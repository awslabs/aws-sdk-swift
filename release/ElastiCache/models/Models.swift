// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension APICallRateForCustomerExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "APICallRateForCustomerExceededFault(message: \(String(describing: message)))"}
}

extension APICallRateForCustomerExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<APICallRateForCustomerExceededFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The customer has exceeded the allowed rate of API calls.</p>
public struct APICallRateForCustomerExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct APICallRateForCustomerExceededFaultBody: Equatable {
    public let message: String?
}

extension APICallRateForCustomerExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum AZMode {
    case crossAz
    case singleAz
    case sdkUnknown(String)
}

extension AZMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AZMode] {
        return [
            .crossAz,
            .singleAz,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .crossAz: return "cross-az"
        case .singleAz: return "single-az"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AZMode(rawValue: rawValue) ?? AZMode.sdkUnknown(rawValue)
    }
}

public struct AddTagsToResourceInputBodyMiddleware: Middleware {
    public let id: String = "AddTagsToResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddTagsToResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<AddTagsToResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddTagsToResourceInput>
    public typealias MOutput = OperationOutput<AddTagsToResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddTagsToResourceOutputError>
}

extension AddTagsToResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddTagsToResourceInput(resourceName: \(String(describing: resourceName)), tags: \(String(describing: tags)))"}
}

extension AddTagsToResourceInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: Key("ResourceName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("AddTagsToResource", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct AddTagsToResourceInputHeadersMiddleware: Middleware {
    public let id: String = "AddTagsToResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddTagsToResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<AddTagsToResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddTagsToResourceInput>
    public typealias MOutput = OperationOutput<AddTagsToResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddTagsToResourceOutputError>
}

public struct AddTagsToResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "AddTagsToResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddTagsToResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<AddTagsToResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddTagsToResourceInput>
    public typealias MOutput = OperationOutput<AddTagsToResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddTagsToResourceOutputError>
}

/// <p>Represents the input of an AddTagsToResource operation.</p>
public struct AddTagsToResourceInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added,
    ///             for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code>
    ///             or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.
    ///             ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p>
    ///         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
    public let resourceName: String?
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair.
    ///           A tag key must be accompanied by a tag value, although null is accepted.</p>
    public let tags: [Tag]?

    public init (
        resourceName: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.resourceName = resourceName
        self.tags = tags
    }
}

extension AddTagsToResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AddTagsToResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFoundFault" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupNotFoundFault" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFoundFault" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidARNFault" : self = .invalidARNFault(try InvalidARNFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupStateFault" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodeNotFoundFault" : self = .reservedCacheNodeNotFoundFault(try ReservedCacheNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFoundFault" : self = .snapshotNotFoundFault(try SnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFoundFault" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundFault" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddTagsToResourceOutputError: Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case invalidARNFault(InvalidARNFault)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case reservedCacheNodeNotFoundFault(ReservedCacheNodeNotFoundFault)
    case snapshotNotFoundFault(SnapshotNotFoundFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsToResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddTagsToResourceOutputResponse(tagList: \(String(describing: tagList)))"}
}

extension AddTagsToResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AddTagsToResourceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tagList = output.tagList
        } else {
            self.tagList = nil
        }
    }
}

/// <p>Represents the output from the <code>AddTagsToResource</code>,
///             <code>ListTagsForResource</code>, and <code>RemoveTagsFromResource</code> operations.</p>
public struct AddTagsToResourceOutputResponse: Equatable {
    /// <p>A list of tags as key-value pairs.</p>
    public let tagList: [Tag]?

    public init (
        tagList: [Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

struct AddTagsToResourceOutputResponseBody: Equatable {
    public let tagList: [Tag]?
}

extension AddTagsToResourceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tagList = "TagList"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("AddTagsToResourceResult"))
        if containerValues.contains(.tagList) {
            struct KeyVal0{struct Tag{}}
            let tagListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tagList)
            if let tagListWrappedContainer = tagListWrappedContainer {
                let tagListContainer = try tagListWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagListBuffer:[Tag]? = nil
                if let tagListContainer = tagListContainer {
                    tagListBuffer = [Tag]()
                    for structureContainer0 in tagListContainer {
                        tagListBuffer?.append(structureContainer0)
                    }
                }
                tagList = tagListBuffer
            } else {
                tagList = []
            }
        } else {
            tagList = nil
        }
    }
}

public enum AuthTokenUpdateStatus {
    case rotating
    case setting
    case sdkUnknown(String)
}

extension AuthTokenUpdateStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AuthTokenUpdateStatus] {
        return [
            .rotating,
            .setting,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .rotating: return "ROTATING"
        case .setting: return "SETTING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AuthTokenUpdateStatus(rawValue: rawValue) ?? AuthTokenUpdateStatus.sdkUnknown(rawValue)
    }
}

public enum AuthTokenUpdateStrategyType {
    case delete
    case rotate
    case `set`
    case sdkUnknown(String)
}

extension AuthTokenUpdateStrategyType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AuthTokenUpdateStrategyType] {
        return [
            .delete,
            .rotate,
            .set,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .delete: return "DELETE"
        case .rotate: return "ROTATE"
        case .set: return "SET"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AuthTokenUpdateStrategyType(rawValue: rawValue) ?? AuthTokenUpdateStrategyType.sdkUnknown(rawValue)
    }
}

extension Authentication: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case passwordCount = "PasswordCount"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let passwordCount = passwordCount {
            try container.encode(passwordCount, forKey: Key("PasswordCount"))
        }
        if let type = type {
            try container.encode(type, forKey: Key("Type"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(AuthenticationType.self, forKey: .type)
        type = typeDecoded
        let passwordCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .passwordCount)
        passwordCount = passwordCountDecoded
    }
}

extension Authentication: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Authentication(passwordCount: \(String(describing: passwordCount)), type: \(String(describing: type)))"}
}

/// <p>Indicates whether the user requires a password to authenticate.</p>
public struct Authentication: Equatable {
    /// <p>The number of passwords belonging to the user. The maximum is two.</p>
    public let passwordCount: Int?
    /// <p>Indicates whether the user requires a password to authenticate.</p>
    public let type: AuthenticationType?

    public init (
        passwordCount: Int? = nil,
        type: AuthenticationType? = nil
    )
    {
        self.passwordCount = passwordCount
        self.type = type
    }
}

public enum AuthenticationType {
    case noPassword
    case password
    case sdkUnknown(String)
}

extension AuthenticationType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AuthenticationType] {
        return [
            .noPassword,
            .password,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noPassword: return "no-password"
        case .password: return "password"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AuthenticationType(rawValue: rawValue) ?? AuthenticationType.sdkUnknown(rawValue)
    }
}

extension AuthorizationAlreadyExistsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AuthorizationAlreadyExistsFault(message: \(String(describing: message)))"}
}

extension AuthorizationAlreadyExistsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<AuthorizationAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified Amazon EC2 security group is already authorized for the specified cache security group.</p>
public struct AuthorizationAlreadyExistsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct AuthorizationAlreadyExistsFaultBody: Equatable {
    public let message: String?
}

extension AuthorizationAlreadyExistsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AuthorizationNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AuthorizationNotFoundFault(message: \(String(describing: message)))"}
}

extension AuthorizationNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<AuthorizationNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified Amazon EC2 security group is not authorized for the specified cache security group.</p>
public struct AuthorizationNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct AuthorizationNotFoundFaultBody: Equatable {
    public let message: String?
}

extension AuthorizationNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct AuthorizeCacheSecurityGroupIngressInputBodyMiddleware: Middleware {
    public let id: String = "AuthorizeCacheSecurityGroupIngressInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AuthorizeCacheSecurityGroupIngressInput>,
                  next: H) -> Swift.Result<OperationOutput<AuthorizeCacheSecurityGroupIngressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AuthorizeCacheSecurityGroupIngressInput>
    public typealias MOutput = OperationOutput<AuthorizeCacheSecurityGroupIngressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AuthorizeCacheSecurityGroupIngressOutputError>
}

extension AuthorizeCacheSecurityGroupIngressInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AuthorizeCacheSecurityGroupIngressInput(cacheSecurityGroupName: \(String(describing: cacheSecurityGroupName)), eC2SecurityGroupName: \(String(describing: eC2SecurityGroupName)), eC2SecurityGroupOwnerId: \(String(describing: eC2SecurityGroupOwnerId)))"}
}

extension AuthorizeCacheSecurityGroupIngressInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheSecurityGroupName = cacheSecurityGroupName {
            try container.encode(cacheSecurityGroupName, forKey: Key("CacheSecurityGroupName"))
        }
        if let eC2SecurityGroupName = eC2SecurityGroupName {
            try container.encode(eC2SecurityGroupName, forKey: Key("EC2SecurityGroupName"))
        }
        if let eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId {
            try container.encode(eC2SecurityGroupOwnerId, forKey: Key("EC2SecurityGroupOwnerId"))
        }
        try container.encode("AuthorizeCacheSecurityGroupIngress", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct AuthorizeCacheSecurityGroupIngressInputHeadersMiddleware: Middleware {
    public let id: String = "AuthorizeCacheSecurityGroupIngressInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AuthorizeCacheSecurityGroupIngressInput>,
                  next: H) -> Swift.Result<OperationOutput<AuthorizeCacheSecurityGroupIngressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AuthorizeCacheSecurityGroupIngressInput>
    public typealias MOutput = OperationOutput<AuthorizeCacheSecurityGroupIngressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AuthorizeCacheSecurityGroupIngressOutputError>
}

public struct AuthorizeCacheSecurityGroupIngressInputQueryItemMiddleware: Middleware {
    public let id: String = "AuthorizeCacheSecurityGroupIngressInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AuthorizeCacheSecurityGroupIngressInput>,
                  next: H) -> Swift.Result<OperationOutput<AuthorizeCacheSecurityGroupIngressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AuthorizeCacheSecurityGroupIngressInput>
    public typealias MOutput = OperationOutput<AuthorizeCacheSecurityGroupIngressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AuthorizeCacheSecurityGroupIngressOutputError>
}

/// <p>Represents the input of an AuthorizeCacheSecurityGroupIngress operation.</p>
public struct AuthorizeCacheSecurityGroupIngressInput: Equatable {
    /// <p>The cache security group that allows network ingress.</p>
    public let cacheSecurityGroupName: String?
    /// <p>The Amazon EC2 security group to be authorized for ingress to the cache security group.</p>
    public let eC2SecurityGroupName: String?
    /// <p>The AWS account number of the Amazon EC2 security group owner.
    ///             Note that this is not the same thing as an AWS access key ID -
    ///             you must provide a valid AWS account number for this parameter.</p>
    public let eC2SecurityGroupOwnerId: String?

    public init (
        cacheSecurityGroupName: String? = nil,
        eC2SecurityGroupName: String? = nil,
        eC2SecurityGroupOwnerId: String? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
        self.eC2SecurityGroupName = eC2SecurityGroupName
        self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
    }
}

extension AuthorizeCacheSecurityGroupIngressOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AuthorizeCacheSecurityGroupIngressOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AuthorizationAlreadyExistsFault" : self = .authorizationAlreadyExistsFault(try AuthorizationAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFoundFault" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheSecurityGroupStateFault" : self = .invalidCacheSecurityGroupStateFault(try InvalidCacheSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AuthorizeCacheSecurityGroupIngressOutputError: Equatable {
    case authorizationAlreadyExistsFault(AuthorizationAlreadyExistsFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case invalidCacheSecurityGroupStateFault(InvalidCacheSecurityGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AuthorizeCacheSecurityGroupIngressOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AuthorizeCacheSecurityGroupIngressOutputResponse(cacheSecurityGroup: \(String(describing: cacheSecurityGroup)))"}
}

extension AuthorizeCacheSecurityGroupIngressOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AuthorizeCacheSecurityGroupIngressOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheSecurityGroup = output.cacheSecurityGroup
        } else {
            self.cacheSecurityGroup = nil
        }
    }
}

public struct AuthorizeCacheSecurityGroupIngressOutputResponse: Equatable {
    /// <p>Represents the output of one of the following operations:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>AuthorizeCacheSecurityGroupIngress</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CreateCacheSecurityGroup</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RevokeCacheSecurityGroupIngress</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let cacheSecurityGroup: CacheSecurityGroup?

    public init (
        cacheSecurityGroup: CacheSecurityGroup? = nil
    )
    {
        self.cacheSecurityGroup = cacheSecurityGroup
    }
}

struct AuthorizeCacheSecurityGroupIngressOutputResponseBody: Equatable {
    public let cacheSecurityGroup: CacheSecurityGroup?
}

extension AuthorizeCacheSecurityGroupIngressOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheSecurityGroup = "CacheSecurityGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("AuthorizeCacheSecurityGroupIngressResult"))
        let cacheSecurityGroupDecoded = try containerValues.decodeIfPresent(CacheSecurityGroup.self, forKey: .cacheSecurityGroup)
        cacheSecurityGroup = cacheSecurityGroupDecoded
    }
}

public enum AutomaticFailoverStatus {
    case disabled
    case disabling
    case enabled
    case enabling
    case sdkUnknown(String)
}

extension AutomaticFailoverStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AutomaticFailoverStatus] {
        return [
            .disabled,
            .disabling,
            .enabled,
            .enabling,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "disabled"
        case .disabling: return "disabling"
        case .enabled: return "enabled"
        case .enabling: return "enabling"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AutomaticFailoverStatus(rawValue: rawValue) ?? AutomaticFailoverStatus.sdkUnknown(rawValue)
    }
}

extension AvailabilityZone: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let name = name {
            try container.encode(name, forKey: Key("Name"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension AvailabilityZone: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AvailabilityZone(name: \(String(describing: name)))"}
}

/// <p>Describes an Availability Zone in which the cluster is launched.</p>
public struct AvailabilityZone: Equatable {
    /// <p>The name of the Availability Zone.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

public struct BatchApplyUpdateActionInputBodyMiddleware: Middleware {
    public let id: String = "BatchApplyUpdateActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchApplyUpdateActionInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchApplyUpdateActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchApplyUpdateActionInput>
    public typealias MOutput = OperationOutput<BatchApplyUpdateActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchApplyUpdateActionOutputError>
}

extension BatchApplyUpdateActionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchApplyUpdateActionInput(cacheClusterIds: \(String(describing: cacheClusterIds)), replicationGroupIds: \(String(describing: replicationGroupIds)), serviceUpdateName: \(String(describing: serviceUpdateName)))"}
}

extension BatchApplyUpdateActionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterIds = cacheClusterIds {
            var cacheClusterIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheClusterIds"))
            for (index0, string0) in cacheClusterIds.enumerated() {
                try cacheClusterIdsContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupIds = replicationGroupIds {
            var replicationGroupIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReplicationGroupIds"))
            for (index0, string0) in replicationGroupIds.enumerated() {
                try replicationGroupIdsContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: Key("ServiceUpdateName"))
        }
        try container.encode("BatchApplyUpdateAction", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct BatchApplyUpdateActionInputHeadersMiddleware: Middleware {
    public let id: String = "BatchApplyUpdateActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchApplyUpdateActionInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchApplyUpdateActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchApplyUpdateActionInput>
    public typealias MOutput = OperationOutput<BatchApplyUpdateActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchApplyUpdateActionOutputError>
}

public struct BatchApplyUpdateActionInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchApplyUpdateActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchApplyUpdateActionInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchApplyUpdateActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchApplyUpdateActionInput>
    public typealias MOutput = OperationOutput<BatchApplyUpdateActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchApplyUpdateActionOutputError>
}

public struct BatchApplyUpdateActionInput: Equatable {
    /// <p>The cache cluster IDs</p>
    public let cacheClusterIds: [String]?
    /// <p>The replication group IDs</p>
    public let replicationGroupIds: [String]?
    /// <p>The unique ID of the service update</p>
    public let serviceUpdateName: String?

    public init (
        cacheClusterIds: [String]? = nil,
        replicationGroupIds: [String]? = nil,
        serviceUpdateName: String? = nil
    )
    {
        self.cacheClusterIds = cacheClusterIds
        self.replicationGroupIds = replicationGroupIds
        self.serviceUpdateName = serviceUpdateName
    }
}

extension BatchApplyUpdateActionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension BatchApplyUpdateActionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUpdateNotFoundFault" : self = .serviceUpdateNotFoundFault(try ServiceUpdateNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchApplyUpdateActionOutputError: Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case serviceUpdateNotFoundFault(ServiceUpdateNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchApplyUpdateActionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchApplyUpdateActionOutputResponse(processedUpdateActions: \(String(describing: processedUpdateActions)), unprocessedUpdateActions: \(String(describing: unprocessedUpdateActions)))"}
}

extension BatchApplyUpdateActionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchApplyUpdateActionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.processedUpdateActions = output.processedUpdateActions
            self.unprocessedUpdateActions = output.unprocessedUpdateActions
        } else {
            self.processedUpdateActions = nil
            self.unprocessedUpdateActions = nil
        }
    }
}

public struct BatchApplyUpdateActionOutputResponse: Equatable {
    /// <p>Update actions that have been processed successfully</p>
    public let processedUpdateActions: [ProcessedUpdateAction]?
    /// <p>Update actions that haven't been processed successfully</p>
    public let unprocessedUpdateActions: [UnprocessedUpdateAction]?

    public init (
        processedUpdateActions: [ProcessedUpdateAction]? = nil,
        unprocessedUpdateActions: [UnprocessedUpdateAction]? = nil
    )
    {
        self.processedUpdateActions = processedUpdateActions
        self.unprocessedUpdateActions = unprocessedUpdateActions
    }
}

struct BatchApplyUpdateActionOutputResponseBody: Equatable {
    public let processedUpdateActions: [ProcessedUpdateAction]?
    public let unprocessedUpdateActions: [UnprocessedUpdateAction]?
}

extension BatchApplyUpdateActionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case processedUpdateActions = "ProcessedUpdateActions"
        case unprocessedUpdateActions = "UnprocessedUpdateActions"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("BatchApplyUpdateActionResult"))
        if containerValues.contains(.processedUpdateActions) {
            struct KeyVal0{struct ProcessedUpdateAction{}}
            let processedUpdateActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ProcessedUpdateAction>.CodingKeys.self, forKey: .processedUpdateActions)
            if let processedUpdateActionsWrappedContainer = processedUpdateActionsWrappedContainer {
                let processedUpdateActionsContainer = try processedUpdateActionsWrappedContainer.decodeIfPresent([ProcessedUpdateAction].self, forKey: .member)
                var processedUpdateActionsBuffer:[ProcessedUpdateAction]? = nil
                if let processedUpdateActionsContainer = processedUpdateActionsContainer {
                    processedUpdateActionsBuffer = [ProcessedUpdateAction]()
                    for structureContainer0 in processedUpdateActionsContainer {
                        processedUpdateActionsBuffer?.append(structureContainer0)
                    }
                }
                processedUpdateActions = processedUpdateActionsBuffer
            } else {
                processedUpdateActions = []
            }
        } else {
            processedUpdateActions = nil
        }
        if containerValues.contains(.unprocessedUpdateActions) {
            struct KeyVal0{struct UnprocessedUpdateAction{}}
            let unprocessedUpdateActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.UnprocessedUpdateAction>.CodingKeys.self, forKey: .unprocessedUpdateActions)
            if let unprocessedUpdateActionsWrappedContainer = unprocessedUpdateActionsWrappedContainer {
                let unprocessedUpdateActionsContainer = try unprocessedUpdateActionsWrappedContainer.decodeIfPresent([UnprocessedUpdateAction].self, forKey: .member)
                var unprocessedUpdateActionsBuffer:[UnprocessedUpdateAction]? = nil
                if let unprocessedUpdateActionsContainer = unprocessedUpdateActionsContainer {
                    unprocessedUpdateActionsBuffer = [UnprocessedUpdateAction]()
                    for structureContainer0 in unprocessedUpdateActionsContainer {
                        unprocessedUpdateActionsBuffer?.append(structureContainer0)
                    }
                }
                unprocessedUpdateActions = unprocessedUpdateActionsBuffer
            } else {
                unprocessedUpdateActions = []
            }
        } else {
            unprocessedUpdateActions = nil
        }
    }
}

public struct BatchStopUpdateActionInputBodyMiddleware: Middleware {
    public let id: String = "BatchStopUpdateActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchStopUpdateActionInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchStopUpdateActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchStopUpdateActionInput>
    public typealias MOutput = OperationOutput<BatchStopUpdateActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchStopUpdateActionOutputError>
}

extension BatchStopUpdateActionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchStopUpdateActionInput(cacheClusterIds: \(String(describing: cacheClusterIds)), replicationGroupIds: \(String(describing: replicationGroupIds)), serviceUpdateName: \(String(describing: serviceUpdateName)))"}
}

extension BatchStopUpdateActionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterIds = cacheClusterIds {
            var cacheClusterIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheClusterIds"))
            for (index0, string0) in cacheClusterIds.enumerated() {
                try cacheClusterIdsContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupIds = replicationGroupIds {
            var replicationGroupIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReplicationGroupIds"))
            for (index0, string0) in replicationGroupIds.enumerated() {
                try replicationGroupIdsContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: Key("ServiceUpdateName"))
        }
        try container.encode("BatchStopUpdateAction", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct BatchStopUpdateActionInputHeadersMiddleware: Middleware {
    public let id: String = "BatchStopUpdateActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchStopUpdateActionInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchStopUpdateActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchStopUpdateActionInput>
    public typealias MOutput = OperationOutput<BatchStopUpdateActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchStopUpdateActionOutputError>
}

public struct BatchStopUpdateActionInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchStopUpdateActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchStopUpdateActionInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchStopUpdateActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchStopUpdateActionInput>
    public typealias MOutput = OperationOutput<BatchStopUpdateActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchStopUpdateActionOutputError>
}

public struct BatchStopUpdateActionInput: Equatable {
    /// <p>The cache cluster IDs</p>
    public let cacheClusterIds: [String]?
    /// <p>The replication group IDs</p>
    public let replicationGroupIds: [String]?
    /// <p>The unique ID of the service update</p>
    public let serviceUpdateName: String?

    public init (
        cacheClusterIds: [String]? = nil,
        replicationGroupIds: [String]? = nil,
        serviceUpdateName: String? = nil
    )
    {
        self.cacheClusterIds = cacheClusterIds
        self.replicationGroupIds = replicationGroupIds
        self.serviceUpdateName = serviceUpdateName
    }
}

extension BatchStopUpdateActionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension BatchStopUpdateActionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUpdateNotFoundFault" : self = .serviceUpdateNotFoundFault(try ServiceUpdateNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchStopUpdateActionOutputError: Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case serviceUpdateNotFoundFault(ServiceUpdateNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchStopUpdateActionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchStopUpdateActionOutputResponse(processedUpdateActions: \(String(describing: processedUpdateActions)), unprocessedUpdateActions: \(String(describing: unprocessedUpdateActions)))"}
}

extension BatchStopUpdateActionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchStopUpdateActionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.processedUpdateActions = output.processedUpdateActions
            self.unprocessedUpdateActions = output.unprocessedUpdateActions
        } else {
            self.processedUpdateActions = nil
            self.unprocessedUpdateActions = nil
        }
    }
}

public struct BatchStopUpdateActionOutputResponse: Equatable {
    /// <p>Update actions that have been processed successfully</p>
    public let processedUpdateActions: [ProcessedUpdateAction]?
    /// <p>Update actions that haven't been processed successfully</p>
    public let unprocessedUpdateActions: [UnprocessedUpdateAction]?

    public init (
        processedUpdateActions: [ProcessedUpdateAction]? = nil,
        unprocessedUpdateActions: [UnprocessedUpdateAction]? = nil
    )
    {
        self.processedUpdateActions = processedUpdateActions
        self.unprocessedUpdateActions = unprocessedUpdateActions
    }
}

struct BatchStopUpdateActionOutputResponseBody: Equatable {
    public let processedUpdateActions: [ProcessedUpdateAction]?
    public let unprocessedUpdateActions: [UnprocessedUpdateAction]?
}

extension BatchStopUpdateActionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case processedUpdateActions = "ProcessedUpdateActions"
        case unprocessedUpdateActions = "UnprocessedUpdateActions"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("BatchStopUpdateActionResult"))
        if containerValues.contains(.processedUpdateActions) {
            struct KeyVal0{struct ProcessedUpdateAction{}}
            let processedUpdateActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ProcessedUpdateAction>.CodingKeys.self, forKey: .processedUpdateActions)
            if let processedUpdateActionsWrappedContainer = processedUpdateActionsWrappedContainer {
                let processedUpdateActionsContainer = try processedUpdateActionsWrappedContainer.decodeIfPresent([ProcessedUpdateAction].self, forKey: .member)
                var processedUpdateActionsBuffer:[ProcessedUpdateAction]? = nil
                if let processedUpdateActionsContainer = processedUpdateActionsContainer {
                    processedUpdateActionsBuffer = [ProcessedUpdateAction]()
                    for structureContainer0 in processedUpdateActionsContainer {
                        processedUpdateActionsBuffer?.append(structureContainer0)
                    }
                }
                processedUpdateActions = processedUpdateActionsBuffer
            } else {
                processedUpdateActions = []
            }
        } else {
            processedUpdateActions = nil
        }
        if containerValues.contains(.unprocessedUpdateActions) {
            struct KeyVal0{struct UnprocessedUpdateAction{}}
            let unprocessedUpdateActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.UnprocessedUpdateAction>.CodingKeys.self, forKey: .unprocessedUpdateActions)
            if let unprocessedUpdateActionsWrappedContainer = unprocessedUpdateActionsWrappedContainer {
                let unprocessedUpdateActionsContainer = try unprocessedUpdateActionsWrappedContainer.decodeIfPresent([UnprocessedUpdateAction].self, forKey: .member)
                var unprocessedUpdateActionsBuffer:[UnprocessedUpdateAction]? = nil
                if let unprocessedUpdateActionsContainer = unprocessedUpdateActionsContainer {
                    unprocessedUpdateActionsBuffer = [UnprocessedUpdateAction]()
                    for structureContainer0 in unprocessedUpdateActionsContainer {
                        unprocessedUpdateActionsBuffer?.append(structureContainer0)
                    }
                }
                unprocessedUpdateActions = unprocessedUpdateActionsBuffer
            } else {
                unprocessedUpdateActions = []
            }
        } else {
            unprocessedUpdateActions = nil
        }
    }
}

extension CacheCluster: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case atRestEncryptionEnabled = "AtRestEncryptionEnabled"
        case authTokenEnabled = "AuthTokenEnabled"
        case authTokenLastModifiedDate = "AuthTokenLastModifiedDate"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case cacheClusterCreateTime = "CacheClusterCreateTime"
        case cacheClusterId = "CacheClusterId"
        case cacheClusterStatus = "CacheClusterStatus"
        case cacheNodeType = "CacheNodeType"
        case cacheNodes = "CacheNodes"
        case cacheParameterGroup = "CacheParameterGroup"
        case cacheSecurityGroups = "CacheSecurityGroups"
        case cacheSubnetGroupName = "CacheSubnetGroupName"
        case clientDownloadLandingPage = "ClientDownloadLandingPage"
        case configurationEndpoint = "ConfigurationEndpoint"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case logDeliveryConfigurations = "LogDeliveryConfigurations"
        case notificationConfiguration = "NotificationConfiguration"
        case numCacheNodes = "NumCacheNodes"
        case pendingModifiedValues = "PendingModifiedValues"
        case preferredAvailabilityZone = "PreferredAvailabilityZone"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case preferredOutpostArn = "PreferredOutpostArn"
        case replicationGroupId = "ReplicationGroupId"
        case replicationGroupLogDeliveryEnabled = "ReplicationGroupLogDeliveryEnabled"
        case securityGroups = "SecurityGroups"
        case snapshotRetentionLimit = "SnapshotRetentionLimit"
        case snapshotWindow = "SnapshotWindow"
        case transitEncryptionEnabled = "TransitEncryptionEnabled"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: Key("ARN"))
        }
        if let atRestEncryptionEnabled = atRestEncryptionEnabled {
            try container.encode(atRestEncryptionEnabled, forKey: Key("AtRestEncryptionEnabled"))
        }
        if let authTokenEnabled = authTokenEnabled {
            try container.encode(authTokenEnabled, forKey: Key("AuthTokenEnabled"))
        }
        if let authTokenLastModifiedDate = authTokenLastModifiedDate {
            try container.encode(TimestampWrapper(authTokenLastModifiedDate, format: .dateTime), forKey: Key("authTokenLastModifiedDate"))
        }
        if autoMinorVersionUpgrade != false {
            try container.encode(autoMinorVersionUpgrade, forKey: Key("AutoMinorVersionUpgrade"))
        }
        if let cacheClusterCreateTime = cacheClusterCreateTime {
            try container.encode(TimestampWrapper(cacheClusterCreateTime, format: .dateTime), forKey: Key("cacheClusterCreateTime"))
        }
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let cacheClusterStatus = cacheClusterStatus {
            try container.encode(cacheClusterStatus, forKey: Key("CacheClusterStatus"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let cacheNodes = cacheNodes {
            var cacheNodesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheNodes"))
            for (index0, cachenode0) in cacheNodes.enumerated() {
                try cacheNodesContainer.encode(cachenode0, forKey: Key("CacheNode.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheParameterGroup = cacheParameterGroup {
            try container.encode(cacheParameterGroup, forKey: Key("CacheParameterGroup"))
        }
        if let cacheSecurityGroups = cacheSecurityGroups {
            var cacheSecurityGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheSecurityGroups"))
            for (index0, cachesecuritygroupmembership0) in cacheSecurityGroups.enumerated() {
                try cacheSecurityGroupsContainer.encode(cachesecuritygroupmembership0, forKey: Key("CacheSecurityGroup.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: Key("CacheSubnetGroupName"))
        }
        if let clientDownloadLandingPage = clientDownloadLandingPage {
            try container.encode(clientDownloadLandingPage, forKey: Key("ClientDownloadLandingPage"))
        }
        if let configurationEndpoint = configurationEndpoint {
            try container.encode(configurationEndpoint, forKey: Key("ConfigurationEndpoint"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LogDeliveryConfigurations"))
            for (index0, logdeliveryconfiguration0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(logdeliveryconfiguration0, forKey: Key("LogDeliveryConfiguration.\(index0.advanced(by: 1))"))
            }
        }
        if let notificationConfiguration = notificationConfiguration {
            try container.encode(notificationConfiguration, forKey: Key("NotificationConfiguration"))
        }
        if let numCacheNodes = numCacheNodes {
            try container.encode(numCacheNodes, forKey: Key("NumCacheNodes"))
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try container.encode(pendingModifiedValues, forKey: Key("PendingModifiedValues"))
        }
        if let preferredAvailabilityZone = preferredAvailabilityZone {
            try container.encode(preferredAvailabilityZone, forKey: Key("PreferredAvailabilityZone"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: Key("PreferredMaintenanceWindow"))
        }
        if let preferredOutpostArn = preferredOutpostArn {
            try container.encode(preferredOutpostArn, forKey: Key("PreferredOutpostArn"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if replicationGroupLogDeliveryEnabled != false {
            try container.encode(replicationGroupLogDeliveryEnabled, forKey: Key("ReplicationGroupLogDeliveryEnabled"))
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SecurityGroups"))
            for (index0, securitygroupmembership0) in securityGroups.enumerated() {
                try securityGroupsContainer.encode(securitygroupmembership0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: Key("SnapshotRetentionLimit"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: Key("SnapshotWindow"))
        }
        if let transitEncryptionEnabled = transitEncryptionEnabled {
            try container.encode(transitEncryptionEnabled, forKey: Key("TransitEncryptionEnabled"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let configurationEndpointDecoded = try containerValues.decodeIfPresent(Endpoint.self, forKey: .configurationEndpoint)
        configurationEndpoint = configurationEndpointDecoded
        let clientDownloadLandingPageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientDownloadLandingPage)
        clientDownloadLandingPage = clientDownloadLandingPageDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let cacheClusterStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheClusterStatus)
        cacheClusterStatus = cacheClusterStatusDecoded
        let numCacheNodesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numCacheNodes)
        numCacheNodes = numCacheNodesDecoded
        let preferredAvailabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredAvailabilityZone)
        preferredAvailabilityZone = preferredAvailabilityZoneDecoded
        let preferredOutpostArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredOutpostArn)
        preferredOutpostArn = preferredOutpostArnDecoded
        let cacheClusterCreateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheClusterCreateTime)
        var cacheClusterCreateTimeBuffer:Date? = nil
        if let cacheClusterCreateTimeDecoded = cacheClusterCreateTimeDecoded {
            cacheClusterCreateTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(cacheClusterCreateTimeDecoded, format: .dateTime)
        }
        cacheClusterCreateTime = cacheClusterCreateTimeBuffer
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(PendingModifiedValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        let notificationConfigurationDecoded = try containerValues.decodeIfPresent(NotificationConfiguration.self, forKey: .notificationConfiguration)
        notificationConfiguration = notificationConfigurationDecoded
        if containerValues.contains(.cacheSecurityGroups) {
            struct KeyVal0{struct CacheSecurityGroup{}}
            let cacheSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheSecurityGroup>.CodingKeys.self, forKey: .cacheSecurityGroups)
            if let cacheSecurityGroupsWrappedContainer = cacheSecurityGroupsWrappedContainer {
                let cacheSecurityGroupsContainer = try cacheSecurityGroupsWrappedContainer.decodeIfPresent([CacheSecurityGroupMembership].self, forKey: .member)
                var cacheSecurityGroupsBuffer:[CacheSecurityGroupMembership]? = nil
                if let cacheSecurityGroupsContainer = cacheSecurityGroupsContainer {
                    cacheSecurityGroupsBuffer = [CacheSecurityGroupMembership]()
                    for structureContainer0 in cacheSecurityGroupsContainer {
                        cacheSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                cacheSecurityGroups = cacheSecurityGroupsBuffer
            } else {
                cacheSecurityGroups = []
            }
        } else {
            cacheSecurityGroups = nil
        }
        let cacheParameterGroupDecoded = try containerValues.decodeIfPresent(CacheParameterGroupStatus.self, forKey: .cacheParameterGroup)
        cacheParameterGroup = cacheParameterGroupDecoded
        let cacheSubnetGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheSubnetGroupName)
        cacheSubnetGroupName = cacheSubnetGroupNameDecoded
        if containerValues.contains(.cacheNodes) {
            struct KeyVal0{struct CacheNode{}}
            let cacheNodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNode>.CodingKeys.self, forKey: .cacheNodes)
            if let cacheNodesWrappedContainer = cacheNodesWrappedContainer {
                let cacheNodesContainer = try cacheNodesWrappedContainer.decodeIfPresent([CacheNode].self, forKey: .member)
                var cacheNodesBuffer:[CacheNode]? = nil
                if let cacheNodesContainer = cacheNodesContainer {
                    cacheNodesBuffer = [CacheNode]()
                    for structureContainer0 in cacheNodesContainer {
                        cacheNodesBuffer?.append(structureContainer0)
                    }
                }
                cacheNodes = cacheNodesBuffer
            } else {
                cacheNodes = []
            }
        } else {
            cacheNodes = nil
        }
        let autoMinorVersionUpgradeDecoded = try containerValues.decode(Bool.self, forKey: .autoMinorVersionUpgrade)
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
        if containerValues.contains(.securityGroups) {
            struct KeyVal0{struct member{}}
            let securityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .securityGroups)
            if let securityGroupsWrappedContainer = securityGroupsWrappedContainer {
                let securityGroupsContainer = try securityGroupsWrappedContainer.decodeIfPresent([SecurityGroupMembership].self, forKey: .member)
                var securityGroupsBuffer:[SecurityGroupMembership]? = nil
                if let securityGroupsContainer = securityGroupsContainer {
                    securityGroupsBuffer = [SecurityGroupMembership]()
                    for structureContainer0 in securityGroupsContainer {
                        securityGroupsBuffer?.append(structureContainer0)
                    }
                }
                securityGroups = securityGroupsBuffer
            } else {
                securityGroups = []
            }
        } else {
            securityGroups = nil
        }
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let snapshotRetentionLimitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .snapshotRetentionLimit)
        snapshotRetentionLimit = snapshotRetentionLimitDecoded
        let snapshotWindowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotWindow)
        snapshotWindow = snapshotWindowDecoded
        let authTokenEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .authTokenEnabled)
        authTokenEnabled = authTokenEnabledDecoded
        let authTokenLastModifiedDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authTokenLastModifiedDate)
        var authTokenLastModifiedDateBuffer:Date? = nil
        if let authTokenLastModifiedDateDecoded = authTokenLastModifiedDateDecoded {
            authTokenLastModifiedDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(authTokenLastModifiedDateDecoded, format: .dateTime)
        }
        authTokenLastModifiedDate = authTokenLastModifiedDateBuffer
        let transitEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .transitEncryptionEnabled)
        transitEncryptionEnabled = transitEncryptionEnabledDecoded
        let atRestEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .atRestEncryptionEnabled)
        atRestEncryptionEnabled = atRestEncryptionEnabledDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
        let replicationGroupLogDeliveryEnabledDecoded = try containerValues.decode(Bool.self, forKey: .replicationGroupLogDeliveryEnabled)
        replicationGroupLogDeliveryEnabled = replicationGroupLogDeliveryEnabledDecoded
        if containerValues.contains(.logDeliveryConfigurations) {
            struct KeyVal0{struct LogDeliveryConfiguration{}}
            let logDeliveryConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.LogDeliveryConfiguration>.CodingKeys.self, forKey: .logDeliveryConfigurations)
            if let logDeliveryConfigurationsWrappedContainer = logDeliveryConfigurationsWrappedContainer {
                let logDeliveryConfigurationsContainer = try logDeliveryConfigurationsWrappedContainer.decodeIfPresent([LogDeliveryConfiguration].self, forKey: .member)
                var logDeliveryConfigurationsBuffer:[LogDeliveryConfiguration]? = nil
                if let logDeliveryConfigurationsContainer = logDeliveryConfigurationsContainer {
                    logDeliveryConfigurationsBuffer = [LogDeliveryConfiguration]()
                    for structureContainer0 in logDeliveryConfigurationsContainer {
                        logDeliveryConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                logDeliveryConfigurations = logDeliveryConfigurationsBuffer
            } else {
                logDeliveryConfigurations = []
            }
        } else {
            logDeliveryConfigurations = nil
        }
    }
}

extension CacheCluster: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheCluster(aRN: \(String(describing: aRN)), atRestEncryptionEnabled: \(String(describing: atRestEncryptionEnabled)), authTokenEnabled: \(String(describing: authTokenEnabled)), authTokenLastModifiedDate: \(String(describing: authTokenLastModifiedDate)), autoMinorVersionUpgrade: \(String(describing: autoMinorVersionUpgrade)), cacheClusterCreateTime: \(String(describing: cacheClusterCreateTime)), cacheClusterId: \(String(describing: cacheClusterId)), cacheClusterStatus: \(String(describing: cacheClusterStatus)), cacheNodeType: \(String(describing: cacheNodeType)), cacheNodes: \(String(describing: cacheNodes)), cacheParameterGroup: \(String(describing: cacheParameterGroup)), cacheSecurityGroups: \(String(describing: cacheSecurityGroups)), cacheSubnetGroupName: \(String(describing: cacheSubnetGroupName)), clientDownloadLandingPage: \(String(describing: clientDownloadLandingPage)), configurationEndpoint: \(String(describing: configurationEndpoint)), engine: \(String(describing: engine)), engineVersion: \(String(describing: engineVersion)), logDeliveryConfigurations: \(String(describing: logDeliveryConfigurations)), notificationConfiguration: \(String(describing: notificationConfiguration)), numCacheNodes: \(String(describing: numCacheNodes)), pendingModifiedValues: \(String(describing: pendingModifiedValues)), preferredAvailabilityZone: \(String(describing: preferredAvailabilityZone)), preferredMaintenanceWindow: \(String(describing: preferredMaintenanceWindow)), preferredOutpostArn: \(String(describing: preferredOutpostArn)), replicationGroupId: \(String(describing: replicationGroupId)), replicationGroupLogDeliveryEnabled: \(String(describing: replicationGroupLogDeliveryEnabled)), securityGroups: \(String(describing: securityGroups)), snapshotRetentionLimit: \(String(describing: snapshotRetentionLimit)), snapshotWindow: \(String(describing: snapshotWindow)), transitEncryptionEnabled: \(String(describing: transitEncryptionEnabled)))"}
}

/// <p>Contains all of the attributes of a specific cluster.</p>
public struct CacheCluster: Equatable {
    /// <p>The ARN (Amazon Resource Name) of the cache cluster.</p>
    public let aRN: String?
    /// <p>A flag that enables encryption at-rest when set to <code>true</code>.</p>
    ///         <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code>
    ///             after the cluster is created. To enable at-rest encryption on a cluster
    ///             you must set <code>AtRestEncryptionEnabled</code> to <code>true</code>
    ///             when you create a cluster.</p>
    ///         <p>
    ///             <b>Required:</b>
    ///             Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    public let atRestEncryptionEnabled: Bool?
    /// <p>A flag that enables using an <code>AuthToken</code> (password)
    ///             when issuing Redis commands.</p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    public let authTokenEnabled: Bool?
    /// <p>The date the auth token was last modified</p>
    public let authTokenLastModifiedDate: Date?
    /// <p>This parameter is currently disabled.</p>
    public let autoMinorVersionUpgrade: Bool
    /// <p>The date and time when the cluster was created.</p>
    public let cacheClusterCreateTime: Date?
    /// <p>The user-supplied identifier of the cluster.
    ///             This identifier is a unique key that identifies a cluster.</p>
    public let cacheClusterId: String?
    /// <p>The current state of this cluster, one of the following values:
    ///                                                      <code>available</code>,
    ///                                                      <code>creating</code>,
    ///                                                      <code>deleted</code>,
    ///                                                      <code>deleting</code>,
    ///                                                      <code>incompatible-network</code>,
    ///                                                      <code>modifying</code>,
    ///                                                      <code>rebooting cluster nodes</code>,
    ///                                                      <code>restore-failed</code>, or
    ///                                                      <code>snapshotting</code>.</p>
    public let cacheClusterStatus: String?
    /// <p>The name of the compute and memory capacity node type for the cluster.</p>
    ///
    ///         <p>The following node types are supported by ElastiCache.
    /// 				Generally speaking, the current generation types provide more memory and computational power
    /// 			at lower cost when compared to their equivalent previous generation counterparts.</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>General purpose:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 					
    ///     						           <p>
    ///                         <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						               <p>	
    ///                         <code>cache.m6g.large</code>,
    /// 							<code>cache.m6g.xlarge</code>,
    /// 							<code>cache.m6g.2xlarge</code>,
    /// 							<code>cache.m6g.4xlarge</code>,
    /// 							<code>cache.m6g.8xlarge</code>,
    /// 							<code>cache.m6g.12xlarge</code>,
    /// 							<code>cache.m6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    ///     					
    ///     					
    ///     					            <p>
    ///                         <b>M5 node types:</b>
    ///     						              <code>cache.m5.large</code>,
    ///     						<code>cache.m5.xlarge</code>,
    ///     						<code>cache.m5.2xlarge</code>,
    ///     						<code>cache.m5.4xlarge</code>,
    ///     						<code>cache.m5.12xlarge</code>,
    ///     						<code>cache.m5.24xlarge</code>
    ///     						
    ///     						
    ///     						           </p>	
    ///     						
    /// 						
    /// 						               <p>
    ///                         <b>M4 node types:</b>
    ///     						              <code>cache.m4.large</code>,
    ///     						<code>cache.m4.xlarge</code>,
    ///     						<code>cache.m4.2xlarge</code>,
    ///     						<code>cache.m4.4xlarge</code>,
    ///     						<code>cache.m4.10xlarge</code>
    ///                      </p>
    ///     					            <p>
    ///                         <b>T3 node types:</b>
    /// 					                   <code>cache.t3.micro</code>,
    ///     						<code>cache.t3.small</code>,
    ///     						<code>cache.t3.medium</code>
    ///                      </p>
    ///     								
    ///     						
    ///     				             <p>
    ///                         <b>T2 node types:</b>
    /// 					                   <code>cache.t2.micro</code>,
    ///     						<code>cache.t2.small</code>,
    ///     						<code>cache.t2.medium</code>
    ///                      </p>
    ///     						
    ///     						
    ///     						
    ///     						
    ///     						        </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 						               <p>
    ///                         <b>T1 node types:</b>
    /// 					                   <code>cache.t1.micro</code>
    ///                      </p>
    /// 					
    /// 						               <p>
    ///                         <b>M1 node types:</b>
    /// 						                  <code>cache.m1.small</code>,
    /// 						   <code>cache.m1.medium</code>,
    /// 						   <code>cache.m1.large</code>,
    /// 						   <code>cache.m1.xlarge</code>
    ///                      </p>
    /// 						
    /// 						               <p>
    ///                         <b>M3 node types:</b>
    ///     						              <code>cache.m3.medium</code>,
    ///     						<code>cache.m3.large</code>,
    ///     						<code>cache.m3.xlarge</code>,
    ///     						<code>cache.m3.2xlarge</code>
    ///                      </p>
    /// 						
    /// 						            </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Compute optimized:</p>
    ///
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 			                  <p>
    ///                         <b>C1 node types:</b>
    /// 			                     <code>cache.c1.xlarge</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Memory optimized:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 											          <p>
    ///                         <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						
    /// 						
    /// 						
    /// 						
    /// 						               <p>	
    /// 							                 <code>cache.r6g.large</code>,
    /// 							<code>cache.r6g.xlarge</code>,
    /// 							<code>cache.r6g.2xlarge</code>,
    /// 							<code>cache.r6g.4xlarge</code>,
    /// 							<code>cache.r6g.8xlarge</code>,
    /// 							<code>cache.r6g.12xlarge</code>,
    /// 							<code>cache.r6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    /// 					                <p>
    ///                         <b>R5 node types:</b>
    ///     					               <code>cache.r5.large</code>,
    ///     					   <code>cache.r5.xlarge</code>,
    ///     					   <code>cache.r5.2xlarge</code>,
    ///     					   <code>cache.r5.4xlarge</code>,
    ///     					   <code>cache.r5.12xlarge</code>,
    ///     					   <code>cache.r5.24xlarge</code>
    ///                      </p>
    /// 						
    ///     					            <p>
    ///                         <b>R4 node types:</b>
    ///     					               <code>cache.r4.large</code>,
    ///     					   <code>cache.r4.xlarge</code>,
    ///     					   <code>cache.r4.2xlarge</code>,
    ///     					   <code>cache.r4.4xlarge</code>,
    ///     					   <code>cache.r4.8xlarge</code>,
    ///     					   <code>cache.r4.16xlarge</code>
    ///                      </p>
    ///     					
    ///     					
    ///     					
    ///
    ///
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					         </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    ///                         <p>
    ///                         <b>M2 node types:</b>						
    ///     					               <code>cache.m2.xlarge</code>,
    ///     						<code>cache.m2.2xlarge</code>,
    ///     						<code>cache.m2.4xlarge</code>
    ///                      </p>
    ///     						
    ///     						           <p>
    ///                         <b>R3 node types:</b>
    ///     					               <code>cache.r3.large</code>,
    ///     						<code>cache.r3.xlarge</code>,
    ///     						<code>cache.r3.2xlarge</code>,
    ///     						<code>cache.r3.4xlarge</code>,
    ///     						<code>cache.r3.8xlarge</code>
    ///                      </p>
    ///     						
    ///     						        </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    /// 				
    /// 		       <p>
    ///             <b>Additional node type info</b>
    ///          </p>
    /// 		       <ul>
    ///             <li>
    ///                <p>All current generation instance types are created in Amazon VPC by default.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis configuration variables <code>appendonly</code> and
    /// 				<code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p>
    ///             </li>
    ///          </ul>
    public let cacheNodeType: String?
    /// <p>A list of cache nodes that are members of the cluster.</p>
    public let cacheNodes: [CacheNode]?
    /// <p>Status of the cache parameter group.</p>
    public let cacheParameterGroup: CacheParameterGroupStatus?
    /// <p>A list of cache security group elements, composed of name and status sub-elements.</p>
    public let cacheSecurityGroups: [CacheSecurityGroupMembership]?
    /// <p>The name of the cache subnet group associated with the cluster.</p>
    public let cacheSubnetGroupName: String?
    /// <p>The URL of the web page where you can download the latest ElastiCache client library.</p>
    public let clientDownloadLandingPage: String?
    /// <p>Represents a Memcached cluster endpoint which can be used by an application to connect to any node in the cluster.
    ///             The configuration endpoint will always have <code>.cfg</code> in it.</p>
    ///         <p>Example: <code>mem-3.9dvc4r<u>.cfg</u>.usw2.cache.amazonaws.com:11211</code>
    ///          </p>
    public let configurationEndpoint: Endpoint?
    /// <p>The name of the cache engine (<code>memcached</code> or
    ///             <code>redis</code>) to be used for this cluster.</p>
    public let engine: String?
    /// <p>The version of the cache engine that is used in this cluster.</p>
    public let engineVersion: String?
    /// <p>Returns the destination, format and type of the logs.</p>
    public let logDeliveryConfigurations: [LogDeliveryConfiguration]?
    /// <p>Describes a notification topic and its status.
    ///             Notification topics are used for publishing ElastiCache events to subscribers using Amazon Simple Notification Service (SNS). </p>
    public let notificationConfiguration: NotificationConfiguration?
    /// <p>The number of cache nodes in the cluster.</p>
    ///         <p>For clusters running Redis, this value must be 1. For clusters running Memcached,
    ///             this value must be between 1 and 40.</p>
    public let numCacheNodes: Int?
    /// <p>A group of settings that are applied to the cluster in the future,
    ///             or that are currently being applied.</p>
    public let pendingModifiedValues: PendingModifiedValues?
    /// <p>The name of the Availability Zone in which the cluster is located or "Multiple"
    ///             if the cache nodes are located in different Availability Zones.</p>
    public let preferredAvailabilityZone: String?
    /// <p>Specifies the weekly time range during which maintenance
    ///    on the cluster is performed. It is specified as a range in
    ///    the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum
    ///    maintenance window is a 60 minute period.</p>
    ///          <p>Valid values for <code>ddd</code> are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>sun</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>mon</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>tue</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>wed</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>thu</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>fri</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sat</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>Example: <code>sun:23:00-mon:01:30</code>
    ///          </p>
    public let preferredMaintenanceWindow: String?
    /// <p>The outpost ARN in which the cache cluster is created.</p>
    public let preferredOutpostArn: String?
    /// <p>The replication group to which this cluster belongs.
    ///             If this field is empty, the cluster is not associated with any replication group.</p>
    public let replicationGroupId: String?
    /// <p>A boolean value indicating whether log delivery is enabled for the replication group.</p>
    public let replicationGroupLogDeliveryEnabled: Bool
    /// <p>A list of VPC Security Groups associated with the cluster.</p>
    public let securityGroups: [SecurityGroupMembership]?
    /// <p>The number of days for which ElastiCache retains automatic cluster snapshots before
    ///             deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5,  a
    ///             snapshot that was taken today is retained for 5 days before being deleted.</p>
    ///         <important>
    ///             <p>
    ///           If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
    ///          </important>
    public let snapshotRetentionLimit: Int?
    /// <p>The daily time range (in UTC) during which ElastiCache begins taking a
    ///             daily snapshot of your cluster.</p>
    ///         <p>Example: <code>05:00-09:00</code>
    ///          </p>
    public let snapshotWindow: String?
    /// <p>A flag that enables in-transit encryption when set to <code>true</code>.</p>
    ///         <p>You cannot modify the value of <code>TransitEncryptionEnabled</code>
    ///             after the cluster is created. To enable in-transit encryption on a cluster
    ///             you must set <code>TransitEncryptionEnabled</code> to <code>true</code>
    ///             when you create a cluster.</p>
    ///         <p>
    ///             <b>Required:</b>
    ///             Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    public let transitEncryptionEnabled: Bool?

    public init (
        aRN: String? = nil,
        atRestEncryptionEnabled: Bool? = nil,
        authTokenEnabled: Bool? = nil,
        authTokenLastModifiedDate: Date? = nil,
        autoMinorVersionUpgrade: Bool = false,
        cacheClusterCreateTime: Date? = nil,
        cacheClusterId: String? = nil,
        cacheClusterStatus: String? = nil,
        cacheNodeType: String? = nil,
        cacheNodes: [CacheNode]? = nil,
        cacheParameterGroup: CacheParameterGroupStatus? = nil,
        cacheSecurityGroups: [CacheSecurityGroupMembership]? = nil,
        cacheSubnetGroupName: String? = nil,
        clientDownloadLandingPage: String? = nil,
        configurationEndpoint: Endpoint? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        logDeliveryConfigurations: [LogDeliveryConfiguration]? = nil,
        notificationConfiguration: NotificationConfiguration? = nil,
        numCacheNodes: Int? = nil,
        pendingModifiedValues: PendingModifiedValues? = nil,
        preferredAvailabilityZone: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        preferredOutpostArn: String? = nil,
        replicationGroupId: String? = nil,
        replicationGroupLogDeliveryEnabled: Bool = false,
        securityGroups: [SecurityGroupMembership]? = nil,
        snapshotRetentionLimit: Int? = nil,
        snapshotWindow: String? = nil,
        transitEncryptionEnabled: Bool? = nil
    )
    {
        self.aRN = aRN
        self.atRestEncryptionEnabled = atRestEncryptionEnabled
        self.authTokenEnabled = authTokenEnabled
        self.authTokenLastModifiedDate = authTokenLastModifiedDate
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.cacheClusterCreateTime = cacheClusterCreateTime
        self.cacheClusterId = cacheClusterId
        self.cacheClusterStatus = cacheClusterStatus
        self.cacheNodeType = cacheNodeType
        self.cacheNodes = cacheNodes
        self.cacheParameterGroup = cacheParameterGroup
        self.cacheSecurityGroups = cacheSecurityGroups
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.clientDownloadLandingPage = clientDownloadLandingPage
        self.configurationEndpoint = configurationEndpoint
        self.engine = engine
        self.engineVersion = engineVersion
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.notificationConfiguration = notificationConfiguration
        self.numCacheNodes = numCacheNodes
        self.pendingModifiedValues = pendingModifiedValues
        self.preferredAvailabilityZone = preferredAvailabilityZone
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.preferredOutpostArn = preferredOutpostArn
        self.replicationGroupId = replicationGroupId
        self.replicationGroupLogDeliveryEnabled = replicationGroupLogDeliveryEnabled
        self.securityGroups = securityGroups
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
        self.transitEncryptionEnabled = transitEncryptionEnabled
    }
}

extension CacheClusterAlreadyExistsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheClusterAlreadyExistsFault(message: \(String(describing: message)))"}
}

extension CacheClusterAlreadyExistsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<CacheClusterAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You already have a cluster with the given identifier.</p>
public struct CacheClusterAlreadyExistsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct CacheClusterAlreadyExistsFaultBody: Equatable {
    public let message: String?
}

extension CacheClusterAlreadyExistsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheClusterNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheClusterNotFoundFault(message: \(String(describing: message)))"}
}

extension CacheClusterNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<CacheClusterNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested cluster ID does not refer to an existing cluster.</p>
public struct CacheClusterNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct CacheClusterNotFoundFaultBody: Equatable {
    public let message: String?
}

extension CacheClusterNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheEngineVersion: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheEngineDescription = "CacheEngineDescription"
        case cacheEngineVersionDescription = "CacheEngineVersionDescription"
        case cacheParameterGroupFamily = "CacheParameterGroupFamily"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheEngineDescription = cacheEngineDescription {
            try container.encode(cacheEngineDescription, forKey: Key("CacheEngineDescription"))
        }
        if let cacheEngineVersionDescription = cacheEngineVersionDescription {
            try container.encode(cacheEngineVersionDescription, forKey: Key("CacheEngineVersionDescription"))
        }
        if let cacheParameterGroupFamily = cacheParameterGroupFamily {
            try container.encode(cacheParameterGroupFamily, forKey: Key("CacheParameterGroupFamily"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let cacheParameterGroupFamilyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheParameterGroupFamily)
        cacheParameterGroupFamily = cacheParameterGroupFamilyDecoded
        let cacheEngineDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheEngineDescription)
        cacheEngineDescription = cacheEngineDescriptionDecoded
        let cacheEngineVersionDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheEngineVersionDescription)
        cacheEngineVersionDescription = cacheEngineVersionDescriptionDecoded
    }
}

extension CacheEngineVersion: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheEngineVersion(cacheEngineDescription: \(String(describing: cacheEngineDescription)), cacheEngineVersionDescription: \(String(describing: cacheEngineVersionDescription)), cacheParameterGroupFamily: \(String(describing: cacheParameterGroupFamily)), engine: \(String(describing: engine)), engineVersion: \(String(describing: engineVersion)))"}
}

/// <p>Provides all of the details about a particular cache engine version.</p>
public struct CacheEngineVersion: Equatable {
    /// <p>The description of the cache engine.</p>
    public let cacheEngineDescription: String?
    /// <p>The description of the cache engine version.</p>
    public let cacheEngineVersionDescription: String?
    /// <p>The name of the cache parameter group family associated with this cache engine.</p>
    ///         <p>Valid values are:
    ///     <code>memcached1.4</code> |
    ///      <code>memcached1.5</code> |
    ///       <code>memcached1.6</code> |
    ///     <code>redis2.6</code> |
    ///     <code>redis2.8</code> |
    ///     <code>redis3.2</code> |
    ///     <code>redis4.0</code> |
    ///      <code>redis5.0</code> |
    ///       <code>redis6.x</code> |
    ///     </p>
    public let cacheParameterGroupFamily: String?
    /// <p>The name of the cache engine.</p>
    public let engine: String?
    /// <p>The version number of the cache engine.</p>
    public let engineVersion: String?

    public init (
        cacheEngineDescription: String? = nil,
        cacheEngineVersionDescription: String? = nil,
        cacheParameterGroupFamily: String? = nil,
        engine: String? = nil,
        engineVersion: String? = nil
    )
    {
        self.cacheEngineDescription = cacheEngineDescription
        self.cacheEngineVersionDescription = cacheEngineVersionDescription
        self.cacheParameterGroupFamily = cacheParameterGroupFamily
        self.engine = engine
        self.engineVersion = engineVersion
    }
}

extension CacheNode: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheNodeCreateTime = "CacheNodeCreateTime"
        case cacheNodeId = "CacheNodeId"
        case cacheNodeStatus = "CacheNodeStatus"
        case customerAvailabilityZone = "CustomerAvailabilityZone"
        case customerOutpostArn = "CustomerOutpostArn"
        case endpoint = "Endpoint"
        case parameterGroupStatus = "ParameterGroupStatus"
        case sourceCacheNodeId = "SourceCacheNodeId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheNodeCreateTime = cacheNodeCreateTime {
            try container.encode(TimestampWrapper(cacheNodeCreateTime, format: .dateTime), forKey: Key("cacheNodeCreateTime"))
        }
        if let cacheNodeId = cacheNodeId {
            try container.encode(cacheNodeId, forKey: Key("CacheNodeId"))
        }
        if let cacheNodeStatus = cacheNodeStatus {
            try container.encode(cacheNodeStatus, forKey: Key("CacheNodeStatus"))
        }
        if let customerAvailabilityZone = customerAvailabilityZone {
            try container.encode(customerAvailabilityZone, forKey: Key("CustomerAvailabilityZone"))
        }
        if let customerOutpostArn = customerOutpostArn {
            try container.encode(customerOutpostArn, forKey: Key("CustomerOutpostArn"))
        }
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: Key("Endpoint"))
        }
        if let parameterGroupStatus = parameterGroupStatus {
            try container.encode(parameterGroupStatus, forKey: Key("ParameterGroupStatus"))
        }
        if let sourceCacheNodeId = sourceCacheNodeId {
            try container.encode(sourceCacheNodeId, forKey: Key("SourceCacheNodeId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheNodeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeId)
        cacheNodeId = cacheNodeIdDecoded
        let cacheNodeStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeStatus)
        cacheNodeStatus = cacheNodeStatusDecoded
        let cacheNodeCreateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeCreateTime)
        var cacheNodeCreateTimeBuffer:Date? = nil
        if let cacheNodeCreateTimeDecoded = cacheNodeCreateTimeDecoded {
            cacheNodeCreateTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(cacheNodeCreateTimeDecoded, format: .dateTime)
        }
        cacheNodeCreateTime = cacheNodeCreateTimeBuffer
        let endpointDecoded = try containerValues.decodeIfPresent(Endpoint.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let parameterGroupStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameterGroupStatus)
        parameterGroupStatus = parameterGroupStatusDecoded
        let sourceCacheNodeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceCacheNodeId)
        sourceCacheNodeId = sourceCacheNodeIdDecoded
        let customerAvailabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customerAvailabilityZone)
        customerAvailabilityZone = customerAvailabilityZoneDecoded
        let customerOutpostArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customerOutpostArn)
        customerOutpostArn = customerOutpostArnDecoded
    }
}

extension CacheNode: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheNode(cacheNodeCreateTime: \(String(describing: cacheNodeCreateTime)), cacheNodeId: \(String(describing: cacheNodeId)), cacheNodeStatus: \(String(describing: cacheNodeStatus)), customerAvailabilityZone: \(String(describing: customerAvailabilityZone)), customerOutpostArn: \(String(describing: customerOutpostArn)), endpoint: \(String(describing: endpoint)), parameterGroupStatus: \(String(describing: parameterGroupStatus)), sourceCacheNodeId: \(String(describing: sourceCacheNodeId)))"}
}

/// <p>Represents an individual cache node within a cluster. Each cache node runs its own
///             instance of the cluster's protocol-compliant caching software - either Memcached or
///             Redis.</p>
///
///         <p>The following node types are supported by ElastiCache.
/// 				Generally speaking, the current generation types provide more memory and computational power
/// 			at lower cost when compared to their equivalent previous generation counterparts.</p>
/// 		       <ul>
///             <li>
///                <p>General purpose:</p>
/// 				           <ul>
///                   <li>
///                      <p>Current generation: </p>
/// 					
///     						           <p>
///                         <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
/// 						               <p>	
///                         <code>cache.m6g.large</code>,
/// 							<code>cache.m6g.xlarge</code>,
/// 							<code>cache.m6g.2xlarge</code>,
/// 							<code>cache.m6g.4xlarge</code>,
/// 							<code>cache.m6g.8xlarge</code>,
/// 							<code>cache.m6g.12xlarge</code>,
/// 							<code>cache.m6g.16xlarge</code>
/// 							
/// 							
/// 							
/// 						               </p>	
/// 						
/// 						               <note>
///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
///                         </p>
///                      </note>
///     					
///     					
///     					            <p>
///                         <b>M5 node types:</b>
///     						              <code>cache.m5.large</code>,
///     						<code>cache.m5.xlarge</code>,
///     						<code>cache.m5.2xlarge</code>,
///     						<code>cache.m5.4xlarge</code>,
///     						<code>cache.m5.12xlarge</code>,
///     						<code>cache.m5.24xlarge</code>
///     						
///     						
///     						           </p>	
///     						
/// 						
/// 						               <p>
///                         <b>M4 node types:</b>
///     						              <code>cache.m4.large</code>,
///     						<code>cache.m4.xlarge</code>,
///     						<code>cache.m4.2xlarge</code>,
///     						<code>cache.m4.4xlarge</code>,
///     						<code>cache.m4.10xlarge</code>
///                      </p>
///     					            <p>
///                         <b>T3 node types:</b>
/// 					                   <code>cache.t3.micro</code>,
///     						<code>cache.t3.small</code>,
///     						<code>cache.t3.medium</code>
///                      </p>
///     								
///     						
///     				             <p>
///                         <b>T2 node types:</b>
/// 					                   <code>cache.t2.micro</code>,
///     						<code>cache.t2.small</code>,
///     						<code>cache.t2.medium</code>
///                      </p>
///     						
///     						
///     						
///     						
///     						        </li>
///                   <li>
///                      <p>Previous generation: (not recommended)</p>
/// 						               <p>
///                         <b>T1 node types:</b>
/// 					                   <code>cache.t1.micro</code>
///                      </p>
/// 					
/// 						               <p>
///                         <b>M1 node types:</b>
/// 						                  <code>cache.m1.small</code>,
/// 						   <code>cache.m1.medium</code>,
/// 						   <code>cache.m1.large</code>,
/// 						   <code>cache.m1.xlarge</code>
///                      </p>
/// 						
/// 						               <p>
///                         <b>M3 node types:</b>
///     						              <code>cache.m3.medium</code>,
///     						<code>cache.m3.large</code>,
///     						<code>cache.m3.xlarge</code>,
///     						<code>cache.m3.2xlarge</code>
///                      </p>
/// 						
/// 						            </li>
///                </ul>
///             </li>
///             <li>
///                <p>Compute optimized:</p>
///
/// 				           <ul>
///                   <li>
///                      <p>Previous generation: (not recommended)</p>
/// 			                  <p>
///                         <b>C1 node types:</b>
/// 			                     <code>cache.c1.xlarge</code>
///                      </p>
///                   </li>
///                </ul>
///             </li>
///             <li>
///                <p>Memory optimized:</p>
/// 				           <ul>
///                   <li>
///                      <p>Current generation: </p>
/// 											          <p>
///                         <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
/// 						
/// 						
/// 						
/// 						
/// 						               <p>	
/// 							                 <code>cache.r6g.large</code>,
/// 							<code>cache.r6g.xlarge</code>,
/// 							<code>cache.r6g.2xlarge</code>,
/// 							<code>cache.r6g.4xlarge</code>,
/// 							<code>cache.r6g.8xlarge</code>,
/// 							<code>cache.r6g.12xlarge</code>,
/// 							<code>cache.r6g.16xlarge</code>
/// 							
/// 							
/// 							
/// 							
/// 							
/// 							
/// 						               </p>	
/// 						               <note>
///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
///                         </p>
///                      </note>
/// 					                <p>
///                         <b>R5 node types:</b>
///     					               <code>cache.r5.large</code>,
///     					   <code>cache.r5.xlarge</code>,
///     					   <code>cache.r5.2xlarge</code>,
///     					   <code>cache.r5.4xlarge</code>,
///     					   <code>cache.r5.12xlarge</code>,
///     					   <code>cache.r5.24xlarge</code>
///                      </p>
/// 						
///     					            <p>
///                         <b>R4 node types:</b>
///     					               <code>cache.r4.large</code>,
///     					   <code>cache.r4.xlarge</code>,
///     					   <code>cache.r4.2xlarge</code>,
///     					   <code>cache.r4.4xlarge</code>,
///     					   <code>cache.r4.8xlarge</code>,
///     					   <code>cache.r4.16xlarge</code>
///                      </p>
///     					
///     					
///     					
///
///
///     					
///     					
///     					
///     					
///     					
///     					
///     					         </li>
///                   <li>
///                      <p>Previous generation: (not recommended)</p>
///                         <p>
///                         <b>M2 node types:</b>						
///     					               <code>cache.m2.xlarge</code>,
///     						<code>cache.m2.2xlarge</code>,
///     						<code>cache.m2.4xlarge</code>
///                      </p>
///     						
///     						           <p>
///                         <b>R3 node types:</b>
///     					               <code>cache.r3.large</code>,
///     						<code>cache.r3.xlarge</code>,
///     						<code>cache.r3.2xlarge</code>,
///     						<code>cache.r3.4xlarge</code>,
///     						<code>cache.r3.8xlarge</code>
///                      </p>
///     						
///     						        </li>
///                </ul>
///             </li>
///          </ul>
/// 				
/// 		       <p>
///             <b>Additional node type info</b>
///          </p>
/// 		       <ul>
///             <li>
///                <p>All current generation instance types are created in Amazon VPC by default.</p>
///             </li>
///             <li>
///                <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p>
///             </li>
///             <li>
///                <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p>
///             </li>
///             <li>
///                <p>Redis configuration variables <code>appendonly</code> and
/// 				<code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p>
///             </li>
///          </ul>
public struct CacheNode: Equatable {
    /// <p>The date and time when the cache node was created.</p>
    public let cacheNodeCreateTime: Date?
    /// <p>The cache node identifier. A node ID is a numeric identifier (0001, 0002, etc.). The combination of cluster ID and node ID uniquely identifies every cache node used in a customer's AWS account.</p>
    public let cacheNodeId: String?
    /// <p>The current state of this cache node, one of the following values: <code>available</code>, <code>creating</code>, <code>rebooting</code>, or <code>deleting</code>.</p>
    public let cacheNodeStatus: String?
    /// <p>The Availability Zone where this node was created and now resides.</p>
    public let customerAvailabilityZone: String?
    /// <p>The customer outpost ARN of the cache node.</p>
    public let customerOutpostArn: String?
    /// <p>The hostname for connecting to this cache node.</p>
    public let endpoint: Endpoint?
    /// <p>The status of the parameter group applied to this cache node.</p>
    public let parameterGroupStatus: String?
    /// <p>The ID of the primary node to which this read replica node is synchronized.
    ///             If this field is empty, this node is not associated with a primary cluster.</p>
    public let sourceCacheNodeId: String?

    public init (
        cacheNodeCreateTime: Date? = nil,
        cacheNodeId: String? = nil,
        cacheNodeStatus: String? = nil,
        customerAvailabilityZone: String? = nil,
        customerOutpostArn: String? = nil,
        endpoint: Endpoint? = nil,
        parameterGroupStatus: String? = nil,
        sourceCacheNodeId: String? = nil
    )
    {
        self.cacheNodeCreateTime = cacheNodeCreateTime
        self.cacheNodeId = cacheNodeId
        self.cacheNodeStatus = cacheNodeStatus
        self.customerAvailabilityZone = customerAvailabilityZone
        self.customerOutpostArn = customerOutpostArn
        self.endpoint = endpoint
        self.parameterGroupStatus = parameterGroupStatus
        self.sourceCacheNodeId = sourceCacheNodeId
    }
}

extension CacheNodeTypeSpecificParameter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedValues = "AllowedValues"
        case cacheNodeTypeSpecificValues = "CacheNodeTypeSpecificValues"
        case changeType = "ChangeType"
        case dataType = "DataType"
        case description = "Description"
        case isModifiable = "IsModifiable"
        case minimumEngineVersion = "MinimumEngineVersion"
        case parameterName = "ParameterName"
        case source = "Source"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let allowedValues = allowedValues {
            try container.encode(allowedValues, forKey: Key("AllowedValues"))
        }
        if let cacheNodeTypeSpecificValues = cacheNodeTypeSpecificValues {
            var cacheNodeTypeSpecificValuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheNodeTypeSpecificValues"))
            for (index0, cachenodetypespecificvalue0) in cacheNodeTypeSpecificValues.enumerated() {
                try cacheNodeTypeSpecificValuesContainer.encode(cachenodetypespecificvalue0, forKey: Key("CacheNodeTypeSpecificValue.\(index0.advanced(by: 1))"))
            }
        }
        if let changeType = changeType {
            try container.encode(changeType, forKey: Key("ChangeType"))
        }
        if let dataType = dataType {
            try container.encode(dataType, forKey: Key("DataType"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if isModifiable != false {
            try container.encode(isModifiable, forKey: Key("IsModifiable"))
        }
        if let minimumEngineVersion = minimumEngineVersion {
            try container.encode(minimumEngineVersion, forKey: Key("MinimumEngineVersion"))
        }
        if let parameterName = parameterName {
            try container.encode(parameterName, forKey: Key("ParameterName"))
        }
        if let source = source {
            try container.encode(source, forKey: Key("Source"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .source)
        source = sourceDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataType)
        dataType = dataTypeDecoded
        let allowedValuesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .allowedValues)
        allowedValues = allowedValuesDecoded
        let isModifiableDecoded = try containerValues.decode(Bool.self, forKey: .isModifiable)
        isModifiable = isModifiableDecoded
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        if containerValues.contains(.cacheNodeTypeSpecificValues) {
            struct KeyVal0{struct CacheNodeTypeSpecificValue{}}
            let cacheNodeTypeSpecificValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeTypeSpecificValue>.CodingKeys.self, forKey: .cacheNodeTypeSpecificValues)
            if let cacheNodeTypeSpecificValuesWrappedContainer = cacheNodeTypeSpecificValuesWrappedContainer {
                let cacheNodeTypeSpecificValuesContainer = try cacheNodeTypeSpecificValuesWrappedContainer.decodeIfPresent([CacheNodeTypeSpecificValue].self, forKey: .member)
                var cacheNodeTypeSpecificValuesBuffer:[CacheNodeTypeSpecificValue]? = nil
                if let cacheNodeTypeSpecificValuesContainer = cacheNodeTypeSpecificValuesContainer {
                    cacheNodeTypeSpecificValuesBuffer = [CacheNodeTypeSpecificValue]()
                    for structureContainer0 in cacheNodeTypeSpecificValuesContainer {
                        cacheNodeTypeSpecificValuesBuffer?.append(structureContainer0)
                    }
                }
                cacheNodeTypeSpecificValues = cacheNodeTypeSpecificValuesBuffer
            } else {
                cacheNodeTypeSpecificValues = []
            }
        } else {
            cacheNodeTypeSpecificValues = nil
        }
        let changeTypeDecoded = try containerValues.decodeIfPresent(ChangeType.self, forKey: .changeType)
        changeType = changeTypeDecoded
    }
}

extension CacheNodeTypeSpecificParameter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheNodeTypeSpecificParameter(allowedValues: \(String(describing: allowedValues)), cacheNodeTypeSpecificValues: \(String(describing: cacheNodeTypeSpecificValues)), changeType: \(String(describing: changeType)), dataType: \(String(describing: dataType)), description: \(String(describing: description)), isModifiable: \(String(describing: isModifiable)), minimumEngineVersion: \(String(describing: minimumEngineVersion)), parameterName: \(String(describing: parameterName)), source: \(String(describing: source)))"}
}

/// <p>A parameter that has a different value for each cache node type it is applied to. For
///             example, in a Redis cluster, a <code>cache.m1.large</code> cache node type would have a
///             larger <code>maxmemory</code> value than a <code>cache.m1.small</code> type.</p>
public struct CacheNodeTypeSpecificParameter: Equatable {
    /// <p>The valid range of values for the parameter.</p>
    public let allowedValues: String?
    /// <p>A list of cache node types and their corresponding values for this parameter.</p>
    public let cacheNodeTypeSpecificValues: [CacheNodeTypeSpecificValue]?
    /// <p>Indicates whether a change to the parameter is applied immediately
    ///             or requires a reboot for the change to be applied.
    ///             You can force a reboot or wait until the next maintenance window's reboot.
    ///             For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a>.</p>
    public let changeType: ChangeType?
    /// <p>The valid data type for the parameter.</p>
    public let dataType: String?
    /// <p>A description of the parameter.</p>
    public let description: String?
    /// <p>Indicates whether (<code>true</code>) or not (<code>false</code>) the parameter can be
    ///             modified. Some parameters have security or operational implications that prevent them
    ///             from being changed.</p>
    public let isModifiable: Bool
    /// <p>The earliest cache engine version to which the parameter can apply.</p>
    public let minimumEngineVersion: String?
    /// <p>The name of the parameter.</p>
    public let parameterName: String?
    /// <p>The source of the parameter value.</p>
    public let source: String?

    public init (
        allowedValues: String? = nil,
        cacheNodeTypeSpecificValues: [CacheNodeTypeSpecificValue]? = nil,
        changeType: ChangeType? = nil,
        dataType: String? = nil,
        description: String? = nil,
        isModifiable: Bool = false,
        minimumEngineVersion: String? = nil,
        parameterName: String? = nil,
        source: String? = nil
    )
    {
        self.allowedValues = allowedValues
        self.cacheNodeTypeSpecificValues = cacheNodeTypeSpecificValues
        self.changeType = changeType
        self.dataType = dataType
        self.description = description
        self.isModifiable = isModifiable
        self.minimumEngineVersion = minimumEngineVersion
        self.parameterName = parameterName
        self.source = source
    }
}

extension CacheNodeTypeSpecificValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheNodeType = "CacheNodeType"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let value = value {
            try container.encode(value, forKey: Key("Value"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CacheNodeTypeSpecificValue: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheNodeTypeSpecificValue(cacheNodeType: \(String(describing: cacheNodeType)), value: \(String(describing: value)))"}
}

/// <p>A value that applies only to a certain cache node type.</p>
public struct CacheNodeTypeSpecificValue: Equatable {
    /// <p>The cache node type for which this value applies.</p>
    public let cacheNodeType: String?
    /// <p>The value for the cache node type.</p>
    public let value: String?

    public init (
        cacheNodeType: String? = nil,
        value: String? = nil
    )
    {
        self.cacheNodeType = cacheNodeType
        self.value = value
    }
}

extension CacheNodeUpdateStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheNodeId = "CacheNodeId"
        case nodeDeletionDate = "NodeDeletionDate"
        case nodeUpdateEndDate = "NodeUpdateEndDate"
        case nodeUpdateInitiatedBy = "NodeUpdateInitiatedBy"
        case nodeUpdateInitiatedDate = "NodeUpdateInitiatedDate"
        case nodeUpdateStartDate = "NodeUpdateStartDate"
        case nodeUpdateStatus = "NodeUpdateStatus"
        case nodeUpdateStatusModifiedDate = "NodeUpdateStatusModifiedDate"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheNodeId = cacheNodeId {
            try container.encode(cacheNodeId, forKey: Key("CacheNodeId"))
        }
        if let nodeDeletionDate = nodeDeletionDate {
            try container.encode(TimestampWrapper(nodeDeletionDate, format: .dateTime), forKey: Key("nodeDeletionDate"))
        }
        if let nodeUpdateEndDate = nodeUpdateEndDate {
            try container.encode(TimestampWrapper(nodeUpdateEndDate, format: .dateTime), forKey: Key("nodeUpdateEndDate"))
        }
        if let nodeUpdateInitiatedBy = nodeUpdateInitiatedBy {
            try container.encode(nodeUpdateInitiatedBy, forKey: Key("NodeUpdateInitiatedBy"))
        }
        if let nodeUpdateInitiatedDate = nodeUpdateInitiatedDate {
            try container.encode(TimestampWrapper(nodeUpdateInitiatedDate, format: .dateTime), forKey: Key("nodeUpdateInitiatedDate"))
        }
        if let nodeUpdateStartDate = nodeUpdateStartDate {
            try container.encode(TimestampWrapper(nodeUpdateStartDate, format: .dateTime), forKey: Key("nodeUpdateStartDate"))
        }
        if let nodeUpdateStatus = nodeUpdateStatus {
            try container.encode(nodeUpdateStatus, forKey: Key("NodeUpdateStatus"))
        }
        if let nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDate {
            try container.encode(TimestampWrapper(nodeUpdateStatusModifiedDate, format: .dateTime), forKey: Key("nodeUpdateStatusModifiedDate"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheNodeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeId)
        cacheNodeId = cacheNodeIdDecoded
        let nodeUpdateStatusDecoded = try containerValues.decodeIfPresent(NodeUpdateStatus.self, forKey: .nodeUpdateStatus)
        nodeUpdateStatus = nodeUpdateStatusDecoded
        let nodeDeletionDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeDeletionDate)
        var nodeDeletionDateBuffer:Date? = nil
        if let nodeDeletionDateDecoded = nodeDeletionDateDecoded {
            nodeDeletionDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(nodeDeletionDateDecoded, format: .dateTime)
        }
        nodeDeletionDate = nodeDeletionDateBuffer
        let nodeUpdateStartDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeUpdateStartDate)
        var nodeUpdateStartDateBuffer:Date? = nil
        if let nodeUpdateStartDateDecoded = nodeUpdateStartDateDecoded {
            nodeUpdateStartDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(nodeUpdateStartDateDecoded, format: .dateTime)
        }
        nodeUpdateStartDate = nodeUpdateStartDateBuffer
        let nodeUpdateEndDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeUpdateEndDate)
        var nodeUpdateEndDateBuffer:Date? = nil
        if let nodeUpdateEndDateDecoded = nodeUpdateEndDateDecoded {
            nodeUpdateEndDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(nodeUpdateEndDateDecoded, format: .dateTime)
        }
        nodeUpdateEndDate = nodeUpdateEndDateBuffer
        let nodeUpdateInitiatedByDecoded = try containerValues.decodeIfPresent(NodeUpdateInitiatedBy.self, forKey: .nodeUpdateInitiatedBy)
        nodeUpdateInitiatedBy = nodeUpdateInitiatedByDecoded
        let nodeUpdateInitiatedDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeUpdateInitiatedDate)
        var nodeUpdateInitiatedDateBuffer:Date? = nil
        if let nodeUpdateInitiatedDateDecoded = nodeUpdateInitiatedDateDecoded {
            nodeUpdateInitiatedDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(nodeUpdateInitiatedDateDecoded, format: .dateTime)
        }
        nodeUpdateInitiatedDate = nodeUpdateInitiatedDateBuffer
        let nodeUpdateStatusModifiedDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeUpdateStatusModifiedDate)
        var nodeUpdateStatusModifiedDateBuffer:Date? = nil
        if let nodeUpdateStatusModifiedDateDecoded = nodeUpdateStatusModifiedDateDecoded {
            nodeUpdateStatusModifiedDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(nodeUpdateStatusModifiedDateDecoded, format: .dateTime)
        }
        nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDateBuffer
    }
}

extension CacheNodeUpdateStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheNodeUpdateStatus(cacheNodeId: \(String(describing: cacheNodeId)), nodeDeletionDate: \(String(describing: nodeDeletionDate)), nodeUpdateEndDate: \(String(describing: nodeUpdateEndDate)), nodeUpdateInitiatedBy: \(String(describing: nodeUpdateInitiatedBy)), nodeUpdateInitiatedDate: \(String(describing: nodeUpdateInitiatedDate)), nodeUpdateStartDate: \(String(describing: nodeUpdateStartDate)), nodeUpdateStatus: \(String(describing: nodeUpdateStatus)), nodeUpdateStatusModifiedDate: \(String(describing: nodeUpdateStatusModifiedDate)))"}
}

/// <p>The status of the service update on the cache node</p>
public struct CacheNodeUpdateStatus: Equatable {
    /// <p>The node ID of the cache cluster</p>
    public let cacheNodeId: String?
    /// <p>The deletion date of the node</p>
    public let nodeDeletionDate: Date?
    /// <p>The end date of the update for a node</p>
    public let nodeUpdateEndDate: Date?
    /// <p>Reflects whether the update was initiated by the customer or automatically applied</p>
    public let nodeUpdateInitiatedBy: NodeUpdateInitiatedBy?
    /// <p>The date when the update is triggered</p>
    public let nodeUpdateInitiatedDate: Date?
    /// <p>The start date of the update for a node</p>
    public let nodeUpdateStartDate: Date?
    /// <p>The update status of the node</p>
    public let nodeUpdateStatus: NodeUpdateStatus?
    /// <p>The date when the NodeUpdateStatus was last modified></p>
    public let nodeUpdateStatusModifiedDate: Date?

    public init (
        cacheNodeId: String? = nil,
        nodeDeletionDate: Date? = nil,
        nodeUpdateEndDate: Date? = nil,
        nodeUpdateInitiatedBy: NodeUpdateInitiatedBy? = nil,
        nodeUpdateInitiatedDate: Date? = nil,
        nodeUpdateStartDate: Date? = nil,
        nodeUpdateStatus: NodeUpdateStatus? = nil,
        nodeUpdateStatusModifiedDate: Date? = nil
    )
    {
        self.cacheNodeId = cacheNodeId
        self.nodeDeletionDate = nodeDeletionDate
        self.nodeUpdateEndDate = nodeUpdateEndDate
        self.nodeUpdateInitiatedBy = nodeUpdateInitiatedBy
        self.nodeUpdateInitiatedDate = nodeUpdateInitiatedDate
        self.nodeUpdateStartDate = nodeUpdateStartDate
        self.nodeUpdateStatus = nodeUpdateStatus
        self.nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDate
    }
}

extension CacheParameterGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case cacheParameterGroupFamily = "CacheParameterGroupFamily"
        case cacheParameterGroupName = "CacheParameterGroupName"
        case description = "Description"
        case isGlobal = "IsGlobal"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: Key("ARN"))
        }
        if let cacheParameterGroupFamily = cacheParameterGroupFamily {
            try container.encode(cacheParameterGroupFamily, forKey: Key("CacheParameterGroupFamily"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if isGlobal != false {
            try container.encode(isGlobal, forKey: Key("IsGlobal"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheParameterGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheParameterGroupName)
        cacheParameterGroupName = cacheParameterGroupNameDecoded
        let cacheParameterGroupFamilyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheParameterGroupFamily)
        cacheParameterGroupFamily = cacheParameterGroupFamilyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let isGlobalDecoded = try containerValues.decode(Bool.self, forKey: .isGlobal)
        isGlobal = isGlobalDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension CacheParameterGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheParameterGroup(aRN: \(String(describing: aRN)), cacheParameterGroupFamily: \(String(describing: cacheParameterGroupFamily)), cacheParameterGroupName: \(String(describing: cacheParameterGroupName)), description: \(String(describing: description)), isGlobal: \(String(describing: isGlobal)))"}
}

/// <p>Represents the output of a <code>CreateCacheParameterGroup</code> operation.</p>
public struct CacheParameterGroup: Equatable {
    /// <p>The ARN (Amazon Resource Name) of the cache parameter group.</p>
    public let aRN: String?
    /// <p>The name of the cache parameter group family that this cache parameter group is compatible with.</p>
    ///         <p>Valid values are:
    ///     <code>memcached1.4</code> |
    ///      <code>memcached1.5</code> |
    ///       <code>memcached1.6</code> |
    ///     <code>redis2.6</code> |
    ///     <code>redis2.8</code> |
    ///     <code>redis3.2</code> |
    ///     <code>redis4.0</code> |
    ///      <code>redis5.0</code> |
    ///       <code>redis6.x</code> |
    ///     </p>
    public let cacheParameterGroupFamily: String?
    /// <p>The name of the cache parameter group.</p>
    public let cacheParameterGroupName: String?
    /// <p>The description for this cache parameter group.</p>
    public let description: String?
    /// <p>Indicates whether the parameter group is associated with a Global datastore</p>
    public let isGlobal: Bool

    public init (
        aRN: String? = nil,
        cacheParameterGroupFamily: String? = nil,
        cacheParameterGroupName: String? = nil,
        description: String? = nil,
        isGlobal: Bool = false
    )
    {
        self.aRN = aRN
        self.cacheParameterGroupFamily = cacheParameterGroupFamily
        self.cacheParameterGroupName = cacheParameterGroupName
        self.description = description
        self.isGlobal = isGlobal
    }
}

extension CacheParameterGroupAlreadyExistsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheParameterGroupAlreadyExistsFault(message: \(String(describing: message)))"}
}

extension CacheParameterGroupAlreadyExistsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<CacheParameterGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A cache parameter group with the requested name already exists.</p>
public struct CacheParameterGroupAlreadyExistsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct CacheParameterGroupAlreadyExistsFaultBody: Equatable {
    public let message: String?
}

extension CacheParameterGroupAlreadyExistsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheParameterGroupNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheParameterGroupNotFoundFault(message: \(String(describing: message)))"}
}

extension CacheParameterGroupNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<CacheParameterGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested cache parameter group name does not refer to an existing cache parameter group.</p>
public struct CacheParameterGroupNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct CacheParameterGroupNotFoundFaultBody: Equatable {
    public let message: String?
}

extension CacheParameterGroupNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheParameterGroupQuotaExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheParameterGroupQuotaExceededFault(message: \(String(describing: message)))"}
}

extension CacheParameterGroupQuotaExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<CacheParameterGroupQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request cannot be processed because it would exceed the maximum number of cache security groups.</p>
public struct CacheParameterGroupQuotaExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct CacheParameterGroupQuotaExceededFaultBody: Equatable {
    public let message: String?
}

extension CacheParameterGroupQuotaExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheParameterGroupStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheNodeIdsToReboot = "CacheNodeIdsToReboot"
        case cacheParameterGroupName = "CacheParameterGroupName"
        case parameterApplyStatus = "ParameterApplyStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheNodeIdsToReboot = cacheNodeIdsToReboot {
            var cacheNodeIdsToRebootContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheNodeIdsToReboot"))
            for (index0, string0) in cacheNodeIdsToReboot.enumerated() {
                try cacheNodeIdsToRebootContainer.encode(string0, forKey: Key("CacheNodeId.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let parameterApplyStatus = parameterApplyStatus {
            try container.encode(parameterApplyStatus, forKey: Key("ParameterApplyStatus"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheParameterGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheParameterGroupName)
        cacheParameterGroupName = cacheParameterGroupNameDecoded
        let parameterApplyStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameterApplyStatus)
        parameterApplyStatus = parameterApplyStatusDecoded
        if containerValues.contains(.cacheNodeIdsToReboot) {
            struct KeyVal0{struct CacheNodeId{}}
            let cacheNodeIdsToRebootWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeId>.CodingKeys.self, forKey: .cacheNodeIdsToReboot)
            if let cacheNodeIdsToRebootWrappedContainer = cacheNodeIdsToRebootWrappedContainer {
                let cacheNodeIdsToRebootContainer = try cacheNodeIdsToRebootWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var cacheNodeIdsToRebootBuffer:[String]? = nil
                if let cacheNodeIdsToRebootContainer = cacheNodeIdsToRebootContainer {
                    cacheNodeIdsToRebootBuffer = [String]()
                    for stringContainer0 in cacheNodeIdsToRebootContainer {
                        cacheNodeIdsToRebootBuffer?.append(stringContainer0)
                    }
                }
                cacheNodeIdsToReboot = cacheNodeIdsToRebootBuffer
            } else {
                cacheNodeIdsToReboot = []
            }
        } else {
            cacheNodeIdsToReboot = nil
        }
    }
}

extension CacheParameterGroupStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheParameterGroupStatus(cacheNodeIdsToReboot: \(String(describing: cacheNodeIdsToReboot)), cacheParameterGroupName: \(String(describing: cacheParameterGroupName)), parameterApplyStatus: \(String(describing: parameterApplyStatus)))"}
}

/// <p>Status of the cache parameter group.</p>
public struct CacheParameterGroupStatus: Equatable {
    /// <p>A list of the cache node IDs which need to be rebooted for parameter changes to be applied.
    ///             A node ID is a numeric identifier (0001, 0002, etc.).</p>
    public let cacheNodeIdsToReboot: [String]?
    /// <p>The name of the cache parameter group.</p>
    public let cacheParameterGroupName: String?
    /// <p>The status of parameter updates.</p>
    public let parameterApplyStatus: String?

    public init (
        cacheNodeIdsToReboot: [String]? = nil,
        cacheParameterGroupName: String? = nil,
        parameterApplyStatus: String? = nil
    )
    {
        self.cacheNodeIdsToReboot = cacheNodeIdsToReboot
        self.cacheParameterGroupName = cacheParameterGroupName
        self.parameterApplyStatus = parameterApplyStatus
    }
}

extension CacheSecurityGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case cacheSecurityGroupName = "CacheSecurityGroupName"
        case description = "Description"
        case eC2SecurityGroups = "EC2SecurityGroups"
        case ownerId = "OwnerId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: Key("ARN"))
        }
        if let cacheSecurityGroupName = cacheSecurityGroupName {
            try container.encode(cacheSecurityGroupName, forKey: Key("CacheSecurityGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let eC2SecurityGroups = eC2SecurityGroups {
            var eC2SecurityGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("EC2SecurityGroups"))
            for (index0, ec2securitygroup0) in eC2SecurityGroups.enumerated() {
                try eC2SecurityGroupsContainer.encode(ec2securitygroup0, forKey: Key("EC2SecurityGroup.\(index0.advanced(by: 1))"))
            }
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: Key("OwnerId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let cacheSecurityGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheSecurityGroupName)
        cacheSecurityGroupName = cacheSecurityGroupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.eC2SecurityGroups) {
            struct KeyVal0{struct EC2SecurityGroup{}}
            let eC2SecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.EC2SecurityGroup>.CodingKeys.self, forKey: .eC2SecurityGroups)
            if let eC2SecurityGroupsWrappedContainer = eC2SecurityGroupsWrappedContainer {
                let eC2SecurityGroupsContainer = try eC2SecurityGroupsWrappedContainer.decodeIfPresent([EC2SecurityGroup].self, forKey: .member)
                var eC2SecurityGroupsBuffer:[EC2SecurityGroup]? = nil
                if let eC2SecurityGroupsContainer = eC2SecurityGroupsContainer {
                    eC2SecurityGroupsBuffer = [EC2SecurityGroup]()
                    for structureContainer0 in eC2SecurityGroupsContainer {
                        eC2SecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                eC2SecurityGroups = eC2SecurityGroupsBuffer
            } else {
                eC2SecurityGroups = []
            }
        } else {
            eC2SecurityGroups = nil
        }
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension CacheSecurityGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheSecurityGroup(aRN: \(String(describing: aRN)), cacheSecurityGroupName: \(String(describing: cacheSecurityGroupName)), description: \(String(describing: description)), eC2SecurityGroups: \(String(describing: eC2SecurityGroups)), ownerId: \(String(describing: ownerId)))"}
}

/// <p>Represents the output of one of the following operations:</p>
///         <ul>
///             <li>
///                <p>
///                   <code>AuthorizeCacheSecurityGroupIngress</code>
///                </p>
///             </li>
///             <li>
///                <p>
///                   <code>CreateCacheSecurityGroup</code>
///                </p>
///             </li>
///             <li>
///                <p>
///                   <code>RevokeCacheSecurityGroupIngress</code>
///                </p>
///             </li>
///          </ul>
public struct CacheSecurityGroup: Equatable {
    /// <p>The ARN of the cache security group,</p>
    public let aRN: String?
    /// <p>The name of the cache security group.</p>
    public let cacheSecurityGroupName: String?
    /// <p>The description of the cache security group.</p>
    public let description: String?
    /// <p>A list of Amazon EC2 security groups that are associated with this cache security group.</p>
    public let eC2SecurityGroups: [EC2SecurityGroup]?
    /// <p>The AWS account ID of the cache security group owner.</p>
    public let ownerId: String?

    public init (
        aRN: String? = nil,
        cacheSecurityGroupName: String? = nil,
        description: String? = nil,
        eC2SecurityGroups: [EC2SecurityGroup]? = nil,
        ownerId: String? = nil
    )
    {
        self.aRN = aRN
        self.cacheSecurityGroupName = cacheSecurityGroupName
        self.description = description
        self.eC2SecurityGroups = eC2SecurityGroups
        self.ownerId = ownerId
    }
}

extension CacheSecurityGroupAlreadyExistsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheSecurityGroupAlreadyExistsFault(message: \(String(describing: message)))"}
}

extension CacheSecurityGroupAlreadyExistsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<CacheSecurityGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A cache security group with the specified name already exists.</p>
public struct CacheSecurityGroupAlreadyExistsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSecurityGroupAlreadyExistsFaultBody: Equatable {
    public let message: String?
}

extension CacheSecurityGroupAlreadyExistsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheSecurityGroupMembership: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheSecurityGroupName = "CacheSecurityGroupName"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheSecurityGroupName = cacheSecurityGroupName {
            try container.encode(cacheSecurityGroupName, forKey: Key("CacheSecurityGroupName"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheSecurityGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheSecurityGroupName)
        cacheSecurityGroupName = cacheSecurityGroupNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
    }
}

extension CacheSecurityGroupMembership: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheSecurityGroupMembership(cacheSecurityGroupName: \(String(describing: cacheSecurityGroupName)), status: \(String(describing: status)))"}
}

/// <p>Represents a cluster's status within a particular cache security group.</p>
public struct CacheSecurityGroupMembership: Equatable {
    /// <p>The name of the cache security group.</p>
    public let cacheSecurityGroupName: String?
    /// <p>The membership status in the cache security group. The status changes when a cache security group is modified, or when the cache security groups assigned to a cluster are modified.</p>
    public let status: String?

    public init (
        cacheSecurityGroupName: String? = nil,
        status: String? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
        self.status = status
    }
}

extension CacheSecurityGroupNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheSecurityGroupNotFoundFault(message: \(String(describing: message)))"}
}

extension CacheSecurityGroupNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<CacheSecurityGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested cache security group name does not refer to an existing cache security group.</p>
public struct CacheSecurityGroupNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSecurityGroupNotFoundFaultBody: Equatable {
    public let message: String?
}

extension CacheSecurityGroupNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheSecurityGroupQuotaExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheSecurityGroupQuotaExceededFault(message: \(String(describing: message)))"}
}

extension CacheSecurityGroupQuotaExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<CacheSecurityGroupQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request cannot be processed because it would exceed the allowed number of cache security groups.</p>
public struct CacheSecurityGroupQuotaExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSecurityGroupQuotaExceededFaultBody: Equatable {
    public let message: String?
}

extension CacheSecurityGroupQuotaExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheSubnetGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case cacheSubnetGroupDescription = "CacheSubnetGroupDescription"
        case cacheSubnetGroupName = "CacheSubnetGroupName"
        case subnets = "Subnets"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: Key("ARN"))
        }
        if let cacheSubnetGroupDescription = cacheSubnetGroupDescription {
            try container.encode(cacheSubnetGroupDescription, forKey: Key("CacheSubnetGroupDescription"))
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: Key("CacheSubnetGroupName"))
        }
        if let subnets = subnets {
            var subnetsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Subnets"))
            for (index0, subnet0) in subnets.enumerated() {
                try subnetsContainer.encode(subnet0, forKey: Key("Subnet.\(index0.advanced(by: 1))"))
            }
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: Key("VpcId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheSubnetGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheSubnetGroupName)
        cacheSubnetGroupName = cacheSubnetGroupNameDecoded
        let cacheSubnetGroupDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheSubnetGroupDescription)
        cacheSubnetGroupDescription = cacheSubnetGroupDescriptionDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        if containerValues.contains(.subnets) {
            struct KeyVal0{struct Subnet{}}
            let subnetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Subnet>.CodingKeys.self, forKey: .subnets)
            if let subnetsWrappedContainer = subnetsWrappedContainer {
                let subnetsContainer = try subnetsWrappedContainer.decodeIfPresent([Subnet].self, forKey: .member)
                var subnetsBuffer:[Subnet]? = nil
                if let subnetsContainer = subnetsContainer {
                    subnetsBuffer = [Subnet]()
                    for structureContainer0 in subnetsContainer {
                        subnetsBuffer?.append(structureContainer0)
                    }
                }
                subnets = subnetsBuffer
            } else {
                subnets = []
            }
        } else {
            subnets = nil
        }
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension CacheSubnetGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheSubnetGroup(aRN: \(String(describing: aRN)), cacheSubnetGroupDescription: \(String(describing: cacheSubnetGroupDescription)), cacheSubnetGroupName: \(String(describing: cacheSubnetGroupName)), subnets: \(String(describing: subnets)), vpcId: \(String(describing: vpcId)))"}
}

/// <p>Represents the output of one of the following operations:</p>
///         <ul>
///             <li>
///                <p>
///                   <code>CreateCacheSubnetGroup</code>
///                </p>
///             </li>
///             <li>
///                <p>
///                   <code>ModifyCacheSubnetGroup</code>
///                </p>
///             </li>
///          </ul>
public struct CacheSubnetGroup: Equatable {
    /// <p>The ARN (Amazon Resource Name) of the cache subnet group.</p>
    public let aRN: String?
    /// <p>The description of the cache subnet group.</p>
    public let cacheSubnetGroupDescription: String?
    /// <p>The name of the cache subnet group.</p>
    public let cacheSubnetGroupName: String?
    /// <p>A list of subnets associated with the cache subnet group.</p>
    public let subnets: [Subnet]?
    /// <p>The Amazon Virtual Private Cloud identifier (VPC ID) of the cache subnet group.</p>
    public let vpcId: String?

    public init (
        aRN: String? = nil,
        cacheSubnetGroupDescription: String? = nil,
        cacheSubnetGroupName: String? = nil,
        subnets: [Subnet]? = nil,
        vpcId: String? = nil
    )
    {
        self.aRN = aRN
        self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.subnets = subnets
        self.vpcId = vpcId
    }
}

extension CacheSubnetGroupAlreadyExistsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheSubnetGroupAlreadyExistsFault(message: \(String(describing: message)))"}
}

extension CacheSubnetGroupAlreadyExistsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<CacheSubnetGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested cache subnet group name is already in use by an existing cache subnet group.</p>
public struct CacheSubnetGroupAlreadyExistsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSubnetGroupAlreadyExistsFaultBody: Equatable {
    public let message: String?
}

extension CacheSubnetGroupAlreadyExistsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheSubnetGroupInUse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheSubnetGroupInUse(message: \(String(describing: message)))"}
}

extension CacheSubnetGroupInUse: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<CacheSubnetGroupInUseBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested cache subnet group is currently in use.</p>
public struct CacheSubnetGroupInUse: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSubnetGroupInUseBody: Equatable {
    public let message: String?
}

extension CacheSubnetGroupInUseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheSubnetGroupNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheSubnetGroupNotFoundFault(message: \(String(describing: message)))"}
}

extension CacheSubnetGroupNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<CacheSubnetGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested cache subnet group name does not refer to an existing cache subnet group.</p>
public struct CacheSubnetGroupNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSubnetGroupNotFoundFaultBody: Equatable {
    public let message: String?
}

extension CacheSubnetGroupNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheSubnetGroupQuotaExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheSubnetGroupQuotaExceededFault(message: \(String(describing: message)))"}
}

extension CacheSubnetGroupQuotaExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<CacheSubnetGroupQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request cannot be processed because it would exceed the allowed number of cache subnet groups.</p>
public struct CacheSubnetGroupQuotaExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSubnetGroupQuotaExceededFaultBody: Equatable {
    public let message: String?
}

extension CacheSubnetGroupQuotaExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheSubnetQuotaExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheSubnetQuotaExceededFault(message: \(String(describing: message)))"}
}

extension CacheSubnetQuotaExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<CacheSubnetQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request cannot be processed because it would exceed the allowed number of subnets in a cache subnet group.</p>
public struct CacheSubnetQuotaExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSubnetQuotaExceededFaultBody: Equatable {
    public let message: String?
}

extension CacheSubnetQuotaExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum ChangeType {
    case immediate
    case requiresReboot
    case sdkUnknown(String)
}

extension ChangeType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ChangeType] {
        return [
            .immediate,
            .requiresReboot,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .immediate: return "immediate"
        case .requiresReboot: return "requires-reboot"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ChangeType(rawValue: rawValue) ?? ChangeType.sdkUnknown(rawValue)
    }
}

extension CloudWatchLogsDestinationDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logGroup = "LogGroup"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let logGroup = logGroup {
            try container.encode(logGroup, forKey: Key("LogGroup"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroup)
        logGroup = logGroupDecoded
    }
}

extension CloudWatchLogsDestinationDetails: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CloudWatchLogsDestinationDetails(logGroup: \(String(describing: logGroup)))"}
}

/// <p>The configuration details of the CloudWatch Logs destination.</p>
public struct CloudWatchLogsDestinationDetails: Equatable {
    /// <p>The name of the CloudWatch Logs log group.</p>
    public let logGroup: String?

    public init (
        logGroup: String? = nil
    )
    {
        self.logGroup = logGroup
    }
}

extension ClusterQuotaForCustomerExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ClusterQuotaForCustomerExceededFault(message: \(String(describing: message)))"}
}

extension ClusterQuotaForCustomerExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ClusterQuotaForCustomerExceededFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request cannot be processed because it would exceed the allowed number of clusters per customer.</p>
public struct ClusterQuotaForCustomerExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ClusterQuotaForCustomerExceededFaultBody: Equatable {
    public let message: String?
}

extension ClusterQuotaForCustomerExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct CompleteMigrationInputBodyMiddleware: Middleware {
    public let id: String = "CompleteMigrationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CompleteMigrationInput>,
                  next: H) -> Swift.Result<OperationOutput<CompleteMigrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CompleteMigrationInput>
    public typealias MOutput = OperationOutput<CompleteMigrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CompleteMigrationOutputError>
}

extension CompleteMigrationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CompleteMigrationInput(force: \(String(describing: force)), replicationGroupId: \(String(describing: replicationGroupId)))"}
}

extension CompleteMigrationInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if force != false {
            try container.encode(force, forKey: Key("Force"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        try container.encode("CompleteMigration", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct CompleteMigrationInputHeadersMiddleware: Middleware {
    public let id: String = "CompleteMigrationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CompleteMigrationInput>,
                  next: H) -> Swift.Result<OperationOutput<CompleteMigrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CompleteMigrationInput>
    public typealias MOutput = OperationOutput<CompleteMigrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CompleteMigrationOutputError>
}

public struct CompleteMigrationInputQueryItemMiddleware: Middleware {
    public let id: String = "CompleteMigrationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CompleteMigrationInput>,
                  next: H) -> Swift.Result<OperationOutput<CompleteMigrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CompleteMigrationInput>
    public typealias MOutput = OperationOutput<CompleteMigrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CompleteMigrationOutputError>
}

public struct CompleteMigrationInput: Equatable {
    /// <p>Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.</p>
    public let force: Bool
    /// <p>The ID of the replication group to which data is being migrated.</p>
    public let replicationGroupId: String?

    public init (
        force: Bool = false,
        replicationGroupId: String? = nil
    )
    {
        self.force = force
        self.replicationGroupId = replicationGroupId
    }
}

extension CompleteMigrationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CompleteMigrationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidReplicationGroupStateFault" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotUnderMigrationFault" : self = .replicationGroupNotUnderMigrationFault(try ReplicationGroupNotUnderMigrationFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CompleteMigrationOutputError: Equatable {
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case replicationGroupNotUnderMigrationFault(ReplicationGroupNotUnderMigrationFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CompleteMigrationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CompleteMigrationOutputResponse(replicationGroup: \(String(describing: replicationGroup)))"}
}

extension CompleteMigrationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CompleteMigrationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct CompleteMigrationOutputResponse: Equatable {
    /// <p>Contains all of the attributes of a specific Redis replication group.</p>
    public let replicationGroup: ReplicationGroup?

    public init (
        replicationGroup: ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct CompleteMigrationOutputResponseBody: Equatable {
    public let replicationGroup: ReplicationGroup?
}

extension CompleteMigrationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("CompleteMigrationResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

extension ConfigureShard: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case newReplicaCount = "NewReplicaCount"
        case nodeGroupId = "NodeGroupId"
        case preferredAvailabilityZones = "PreferredAvailabilityZones"
        case preferredOutpostArns = "PreferredOutpostArns"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if newReplicaCount != 0 {
            try container.encode(newReplicaCount, forKey: Key("NewReplicaCount"))
        }
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: Key("NodeGroupId"))
        }
        if let preferredAvailabilityZones = preferredAvailabilityZones {
            var preferredAvailabilityZonesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PreferredAvailabilityZones"))
            for (index0, string0) in preferredAvailabilityZones.enumerated() {
                try preferredAvailabilityZonesContainer.encode(string0, forKey: Key("PreferredAvailabilityZone.\(index0.advanced(by: 1))"))
            }
        }
        if let preferredOutpostArns = preferredOutpostArns {
            var preferredOutpostArnsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PreferredOutpostArns"))
            for (index0, string0) in preferredOutpostArns.enumerated() {
                try preferredOutpostArnsContainer.encode(string0, forKey: Key("PreferredOutpostArn.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        let newReplicaCountDecoded = try containerValues.decode(Int.self, forKey: .newReplicaCount)
        newReplicaCount = newReplicaCountDecoded
        if containerValues.contains(.preferredAvailabilityZones) {
            struct KeyVal0{struct PreferredAvailabilityZone{}}
            let preferredAvailabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.PreferredAvailabilityZone>.CodingKeys.self, forKey: .preferredAvailabilityZones)
            if let preferredAvailabilityZonesWrappedContainer = preferredAvailabilityZonesWrappedContainer {
                let preferredAvailabilityZonesContainer = try preferredAvailabilityZonesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var preferredAvailabilityZonesBuffer:[String]? = nil
                if let preferredAvailabilityZonesContainer = preferredAvailabilityZonesContainer {
                    preferredAvailabilityZonesBuffer = [String]()
                    for stringContainer0 in preferredAvailabilityZonesContainer {
                        preferredAvailabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                preferredAvailabilityZones = preferredAvailabilityZonesBuffer
            } else {
                preferredAvailabilityZones = []
            }
        } else {
            preferredAvailabilityZones = nil
        }
        if containerValues.contains(.preferredOutpostArns) {
            struct KeyVal0{struct PreferredOutpostArn{}}
            let preferredOutpostArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.PreferredOutpostArn>.CodingKeys.self, forKey: .preferredOutpostArns)
            if let preferredOutpostArnsWrappedContainer = preferredOutpostArnsWrappedContainer {
                let preferredOutpostArnsContainer = try preferredOutpostArnsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var preferredOutpostArnsBuffer:[String]? = nil
                if let preferredOutpostArnsContainer = preferredOutpostArnsContainer {
                    preferredOutpostArnsBuffer = [String]()
                    for stringContainer0 in preferredOutpostArnsContainer {
                        preferredOutpostArnsBuffer?.append(stringContainer0)
                    }
                }
                preferredOutpostArns = preferredOutpostArnsBuffer
            } else {
                preferredOutpostArns = []
            }
        } else {
            preferredOutpostArns = nil
        }
    }
}

extension ConfigureShard: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ConfigureShard(newReplicaCount: \(String(describing: newReplicaCount)), nodeGroupId: \(String(describing: nodeGroupId)), preferredAvailabilityZones: \(String(describing: preferredAvailabilityZones)), preferredOutpostArns: \(String(describing: preferredOutpostArns)))"}
}

/// <p>Node group (shard) configuration options when adding or removing replicas.
///             Each node group (shard) configuration has the following members: NodeGroupId, NewReplicaCount, and PreferredAvailabilityZones. </p>
public struct ConfigureShard: Equatable {
    /// <p>The number of replicas you want  in this node group at the end of this operation.
    ///             The maximum value for <code>NewReplicaCount</code> is 5.
    ///             The minimum value depends upon the type of Redis replication group you are working with.</p>
    ///         <p>The minimum number of replicas in a shard or replication group is:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Redis (cluster mode disabled)</p>
    ///                 <ul>
    ///                   <li>
    ///                         <p>If Multi-AZ: 1</p>
    ///                   </li>
    ///                   <li>
    ///                         <p>If Multi-AZ: 0</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                 <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p>
    ///             </li>
    ///          </ul>
    public let newReplicaCount: Int
    /// <p>The 4-digit id for the node group you are configuring. For Redis (cluster mode disabled)
    ///             replication groups, the node group id is always 0001. To find a Redis (cluster mode enabled)'s
    ///             node group's (shard's) id, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/shard-find-id.html">Finding a Shard's Id</a>.</p>
    public let nodeGroupId: String?
    /// <p>A list of <code>PreferredAvailabilityZone</code> strings that specify which availability zones the
    ///             replication group's nodes are to be in. The nummber of <code>PreferredAvailabilityZone</code> values must
    ///             equal the value of <code>NewReplicaCount</code> plus 1 to account for the primary node. If this member of
    ///             <code>ReplicaConfiguration</code> is omitted, ElastiCache for Redis selects the availability zone for
    ///             each of the replicas.</p>
    public let preferredAvailabilityZones: [String]?
    /// <p>The outpost ARNs in which the cache cluster is created.</p>
    public let preferredOutpostArns: [String]?

    public init (
        newReplicaCount: Int = 0,
        nodeGroupId: String? = nil,
        preferredAvailabilityZones: [String]? = nil,
        preferredOutpostArns: [String]? = nil
    )
    {
        self.newReplicaCount = newReplicaCount
        self.nodeGroupId = nodeGroupId
        self.preferredAvailabilityZones = preferredAvailabilityZones
        self.preferredOutpostArns = preferredOutpostArns
    }
}

public struct CopySnapshotInputBodyMiddleware: Middleware {
    public let id: String = "CopySnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CopySnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<CopySnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CopySnapshotInput>
    public typealias MOutput = OperationOutput<CopySnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CopySnapshotOutputError>
}

extension CopySnapshotInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CopySnapshotInput(kmsKeyId: \(String(describing: kmsKeyId)), sourceSnapshotName: \(String(describing: sourceSnapshotName)), tags: \(String(describing: tags)), targetBucket: \(String(describing: targetBucket)), targetSnapshotName: \(String(describing: targetSnapshotName)))"}
}

extension CopySnapshotInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: Key("KmsKeyId"))
        }
        if let sourceSnapshotName = sourceSnapshotName {
            try container.encode(sourceSnapshotName, forKey: Key("SourceSnapshotName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        if let targetBucket = targetBucket {
            try container.encode(targetBucket, forKey: Key("TargetBucket"))
        }
        if let targetSnapshotName = targetSnapshotName {
            try container.encode(targetSnapshotName, forKey: Key("TargetSnapshotName"))
        }
        try container.encode("CopySnapshot", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct CopySnapshotInputHeadersMiddleware: Middleware {
    public let id: String = "CopySnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CopySnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<CopySnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CopySnapshotInput>
    public typealias MOutput = OperationOutput<CopySnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CopySnapshotOutputError>
}

public struct CopySnapshotInputQueryItemMiddleware: Middleware {
    public let id: String = "CopySnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CopySnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<CopySnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CopySnapshotInput>
    public typealias MOutput = OperationOutput<CopySnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CopySnapshotOutputError>
}

/// <p>Represents the input of a <code>CopySnapshotMessage</code> operation.</p>
public struct CopySnapshotInput: Equatable {
    /// <p>The ID of the KMS key used to encrypt the target snapshot.</p>
    public let kmsKeyId: String?
    /// <p>The name of an existing snapshot from which to make a copy.</p>
    public let sourceSnapshotName: String?
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    public let tags: [Tag]?
    /// <p>The Amazon S3 bucket to which the snapshot is exported.
    ///             This parameter is used only when exporting a snapshot for external access.</p>
    ///         <p>When using this parameter to export a snapshot,
    ///             be sure Amazon ElastiCache has the needed permissions to this S3 bucket.
    ///             For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
    ///
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
    public let targetBucket: String?
    /// <p>A name for the snapshot copy.
    ///             ElastiCache does not permit overwriting a snapshot, therefore
    ///             this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.</p>
    public let targetSnapshotName: String?

    public init (
        kmsKeyId: String? = nil,
        sourceSnapshotName: String? = nil,
        tags: [Tag]? = nil,
        targetBucket: String? = nil,
        targetSnapshotName: String? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.sourceSnapshotName = sourceSnapshotName
        self.tags = tags
        self.targetBucket = targetBucket
        self.targetSnapshotName = targetSnapshotName
    }
}

extension CopySnapshotOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CopySnapshotOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSnapshotStateFault" : self = .invalidSnapshotStateFault(try InvalidSnapshotStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotAlreadyExistsFault" : self = .snapshotAlreadyExistsFault(try SnapshotAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFoundFault" : self = .snapshotNotFoundFault(try SnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotQuotaExceededFault" : self = .snapshotQuotaExceededFault(try SnapshotQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CopySnapshotOutputError: Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidSnapshotStateFault(InvalidSnapshotStateFault)
    case snapshotAlreadyExistsFault(SnapshotAlreadyExistsFault)
    case snapshotNotFoundFault(SnapshotNotFoundFault)
    case snapshotQuotaExceededFault(SnapshotQuotaExceededFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CopySnapshotOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CopySnapshotOutputResponse(snapshot: \(String(describing: snapshot)))"}
}

extension CopySnapshotOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CopySnapshotOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.snapshot = output.snapshot
        } else {
            self.snapshot = nil
        }
    }
}

public struct CopySnapshotOutputResponse: Equatable {
    /// <p>Represents a copy of an entire Redis cluster as of the time when the snapshot was taken.</p>
    public let snapshot: Snapshot?

    public init (
        snapshot: Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

struct CopySnapshotOutputResponseBody: Equatable {
    public let snapshot: Snapshot?
}

extension CopySnapshotOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case snapshot = "Snapshot"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("CopySnapshotResult"))
        let snapshotDecoded = try containerValues.decodeIfPresent(Snapshot.self, forKey: .snapshot)
        snapshot = snapshotDecoded
    }
}

public struct CreateCacheClusterInputBodyMiddleware: Middleware {
    public let id: String = "CreateCacheClusterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCacheClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCacheClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCacheClusterInput>
    public typealias MOutput = OperationOutput<CreateCacheClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCacheClusterOutputError>
}

extension CreateCacheClusterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateCacheClusterInput(aZMode: \(String(describing: aZMode)), authToken: \(String(describing: authToken)), autoMinorVersionUpgrade: \(String(describing: autoMinorVersionUpgrade)), cacheClusterId: \(String(describing: cacheClusterId)), cacheNodeType: \(String(describing: cacheNodeType)), cacheParameterGroupName: \(String(describing: cacheParameterGroupName)), cacheSecurityGroupNames: \(String(describing: cacheSecurityGroupNames)), cacheSubnetGroupName: \(String(describing: cacheSubnetGroupName)), engine: \(String(describing: engine)), engineVersion: \(String(describing: engineVersion)), logDeliveryConfigurations: \(String(describing: logDeliveryConfigurations)), notificationTopicArn: \(String(describing: notificationTopicArn)), numCacheNodes: \(String(describing: numCacheNodes)), outpostMode: \(String(describing: outpostMode)), port: \(String(describing: port)), preferredAvailabilityZone: \(String(describing: preferredAvailabilityZone)), preferredAvailabilityZones: \(String(describing: preferredAvailabilityZones)), preferredMaintenanceWindow: \(String(describing: preferredMaintenanceWindow)), preferredOutpostArn: \(String(describing: preferredOutpostArn)), preferredOutpostArns: \(String(describing: preferredOutpostArns)), replicationGroupId: \(String(describing: replicationGroupId)), securityGroupIds: \(String(describing: securityGroupIds)), snapshotArns: \(String(describing: snapshotArns)), snapshotName: \(String(describing: snapshotName)), snapshotRetentionLimit: \(String(describing: snapshotRetentionLimit)), snapshotWindow: \(String(describing: snapshotWindow)), tags: \(String(describing: tags)))"}
}

extension CreateCacheClusterInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aZMode = aZMode {
            try container.encode(aZMode, forKey: Key("AZMode"))
        }
        if let authToken = authToken {
            try container.encode(authToken, forKey: Key("AuthToken"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: Key("AutoMinorVersionUpgrade"))
        }
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let cacheSecurityGroupNames = cacheSecurityGroupNames {
            var cacheSecurityGroupNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheSecurityGroupNames"))
            for (index0, string0) in cacheSecurityGroupNames.enumerated() {
                try cacheSecurityGroupNamesContainer.encode(string0, forKey: Key("CacheSecurityGroupName.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: Key("CacheSubnetGroupName"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LogDeliveryConfigurations"))
            for (index0, logdeliveryconfigurationrequest0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(logdeliveryconfigurationrequest0, forKey: Key("LogDeliveryConfigurationRequest.\(index0.advanced(by: 1))"))
            }
        }
        if let notificationTopicArn = notificationTopicArn {
            try container.encode(notificationTopicArn, forKey: Key("NotificationTopicArn"))
        }
        if let numCacheNodes = numCacheNodes {
            try container.encode(numCacheNodes, forKey: Key("NumCacheNodes"))
        }
        if let outpostMode = outpostMode {
            try container.encode(outpostMode, forKey: Key("OutpostMode"))
        }
        if let port = port {
            try container.encode(port, forKey: Key("Port"))
        }
        if let preferredAvailabilityZone = preferredAvailabilityZone {
            try container.encode(preferredAvailabilityZone, forKey: Key("PreferredAvailabilityZone"))
        }
        if let preferredAvailabilityZones = preferredAvailabilityZones {
            var preferredAvailabilityZonesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PreferredAvailabilityZones"))
            for (index0, string0) in preferredAvailabilityZones.enumerated() {
                try preferredAvailabilityZonesContainer.encode(string0, forKey: Key("PreferredAvailabilityZone.\(index0.advanced(by: 1))"))
            }
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: Key("PreferredMaintenanceWindow"))
        }
        if let preferredOutpostArn = preferredOutpostArn {
            try container.encode(preferredOutpostArn, forKey: Key("PreferredOutpostArn"))
        }
        if let preferredOutpostArns = preferredOutpostArns {
            var preferredOutpostArnsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PreferredOutpostArns"))
            for (index0, string0) in preferredOutpostArns.enumerated() {
                try preferredOutpostArnsContainer.encode(string0, forKey: Key("PreferredOutpostArn.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SecurityGroupIds"))
            for (index0, string0) in securityGroupIds.enumerated() {
                try securityGroupIdsContainer.encode(string0, forKey: Key("SecurityGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotArns = snapshotArns {
            var snapshotArnsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SnapshotArns"))
            for (index0, string0) in snapshotArns.enumerated() {
                try snapshotArnsContainer.encode(string0, forKey: Key("SnapshotArn.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotName = snapshotName {
            try container.encode(snapshotName, forKey: Key("SnapshotName"))
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: Key("SnapshotRetentionLimit"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: Key("SnapshotWindow"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateCacheCluster", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct CreateCacheClusterInputHeadersMiddleware: Middleware {
    public let id: String = "CreateCacheClusterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCacheClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCacheClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCacheClusterInput>
    public typealias MOutput = OperationOutput<CreateCacheClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCacheClusterOutputError>
}

public struct CreateCacheClusterInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateCacheClusterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCacheClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCacheClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCacheClusterInput>
    public typealias MOutput = OperationOutput<CreateCacheClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCacheClusterOutputError>
}

/// <p>Represents the input of a CreateCacheCluster operation.</p>
public struct CreateCacheClusterInput: Equatable {
    /// <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or
    ///             created across multiple Availability Zones in the cluster's region.</p>
    ///         <p>This parameter is only supported for Memcached clusters.</p>
    ///         <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified,
    ///             ElastiCache assumes <code>single-az</code> mode.</p>
    public let aZMode: AZMode?
    /// <p>
    ///             <b>Reserved parameter.</b>
    ///             The password used to access a password protected server.</p>
    ///         <p>Password constraints:</p>
    ///         <ul>
    ///             <li>
    ///                <p>Must be only printable ASCII characters.</p>
    ///             </li>
    ///             <li>
    ///                <p>Must be at least 16 characters and no more than 128
    ///                 characters in length.</p>
    ///             </li>
    ///             <li>
    ///                <p>The only permitted printable special characters are !, &, #, $, ^, <, >, and -. Other printable special characters cannot be used in the AUTH token.</p>
    ///             </li>
    ///          </ul>
    ///         <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
    public let authToken: String?
    /// <p>This parameter is currently disabled.</p>
    public let autoMinorVersionUpgrade: Bool?
    /// <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p>
    ///          <p>
    ///             <b>Constraints:</b>
    ///          </p>
    ///          <ul>
    ///             <li>
    ///                <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p>
    ///             </li>
    ///             <li>
    ///                <p>The first character must be a letter.</p>
    ///             </li>
    ///             <li>
    ///                <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p>
    ///             </li>
    ///          </ul>
    public let cacheClusterId: String?
    /// <p>The compute and memory capacity of the nodes in the node group (shard).</p>
    ///         <p>The following node types are supported by ElastiCache.
    /// 				Generally speaking, the current generation types provide more memory and computational power
    /// 			at lower cost when compared to their equivalent previous generation counterparts.</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>General purpose:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 					
    ///     						           <p>
    ///                         <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						               <p>	
    ///                         <code>cache.m6g.large</code>,
    /// 							<code>cache.m6g.xlarge</code>,
    /// 							<code>cache.m6g.2xlarge</code>,
    /// 							<code>cache.m6g.4xlarge</code>,
    /// 							<code>cache.m6g.8xlarge</code>,
    /// 							<code>cache.m6g.12xlarge</code>,
    /// 							<code>cache.m6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    ///     					
    ///     					
    ///     					            <p>
    ///                         <b>M5 node types:</b>
    ///     						              <code>cache.m5.large</code>,
    ///     						<code>cache.m5.xlarge</code>,
    ///     						<code>cache.m5.2xlarge</code>,
    ///     						<code>cache.m5.4xlarge</code>,
    ///     						<code>cache.m5.12xlarge</code>,
    ///     						<code>cache.m5.24xlarge</code>
    ///     						
    ///     						
    ///     						           </p>	
    ///     						
    /// 						
    /// 						               <p>
    ///                         <b>M4 node types:</b>
    ///     						              <code>cache.m4.large</code>,
    ///     						<code>cache.m4.xlarge</code>,
    ///     						<code>cache.m4.2xlarge</code>,
    ///     						<code>cache.m4.4xlarge</code>,
    ///     						<code>cache.m4.10xlarge</code>
    ///                      </p>
    ///     					            <p>
    ///                         <b>T3 node types:</b>
    /// 					                   <code>cache.t3.micro</code>,
    ///     						<code>cache.t3.small</code>,
    ///     						<code>cache.t3.medium</code>
    ///                      </p>
    ///     								
    ///     						
    ///     				             <p>
    ///                         <b>T2 node types:</b>
    /// 					                   <code>cache.t2.micro</code>,
    ///     						<code>cache.t2.small</code>,
    ///     						<code>cache.t2.medium</code>
    ///                      </p>
    ///     						
    ///     						
    ///     						
    ///     						
    ///     						        </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 						               <p>
    ///                         <b>T1 node types:</b>
    /// 					                   <code>cache.t1.micro</code>
    ///                      </p>
    /// 					
    /// 						               <p>
    ///                         <b>M1 node types:</b>
    /// 						                  <code>cache.m1.small</code>,
    /// 						   <code>cache.m1.medium</code>,
    /// 						   <code>cache.m1.large</code>,
    /// 						   <code>cache.m1.xlarge</code>
    ///                      </p>
    /// 						
    /// 						               <p>
    ///                         <b>M3 node types:</b>
    ///     						              <code>cache.m3.medium</code>,
    ///     						<code>cache.m3.large</code>,
    ///     						<code>cache.m3.xlarge</code>,
    ///     						<code>cache.m3.2xlarge</code>
    ///                      </p>
    /// 						
    /// 						            </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Compute optimized:</p>
    ///
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 			                  <p>
    ///                         <b>C1 node types:</b>
    /// 			                     <code>cache.c1.xlarge</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Memory optimized:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 											          <p>
    ///                         <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						
    /// 						
    /// 						
    /// 						
    /// 						               <p>	
    /// 							                 <code>cache.r6g.large</code>,
    /// 							<code>cache.r6g.xlarge</code>,
    /// 							<code>cache.r6g.2xlarge</code>,
    /// 							<code>cache.r6g.4xlarge</code>,
    /// 							<code>cache.r6g.8xlarge</code>,
    /// 							<code>cache.r6g.12xlarge</code>,
    /// 							<code>cache.r6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    /// 					                <p>
    ///                         <b>R5 node types:</b>
    ///     					               <code>cache.r5.large</code>,
    ///     					   <code>cache.r5.xlarge</code>,
    ///     					   <code>cache.r5.2xlarge</code>,
    ///     					   <code>cache.r5.4xlarge</code>,
    ///     					   <code>cache.r5.12xlarge</code>,
    ///     					   <code>cache.r5.24xlarge</code>
    ///                      </p>
    /// 						
    ///     					            <p>
    ///                         <b>R4 node types:</b>
    ///     					               <code>cache.r4.large</code>,
    ///     					   <code>cache.r4.xlarge</code>,
    ///     					   <code>cache.r4.2xlarge</code>,
    ///     					   <code>cache.r4.4xlarge</code>,
    ///     					   <code>cache.r4.8xlarge</code>,
    ///     					   <code>cache.r4.16xlarge</code>
    ///                      </p>
    ///     					
    ///     					
    ///     					
    ///
    ///
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					         </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    ///                         <p>
    ///                         <b>M2 node types:</b>						
    ///     					               <code>cache.m2.xlarge</code>,
    ///     						<code>cache.m2.2xlarge</code>,
    ///     						<code>cache.m2.4xlarge</code>
    ///                      </p>
    ///     						
    ///     						           <p>
    ///                         <b>R3 node types:</b>
    ///     					               <code>cache.r3.large</code>,
    ///     						<code>cache.r3.xlarge</code>,
    ///     						<code>cache.r3.2xlarge</code>,
    ///     						<code>cache.r3.4xlarge</code>,
    ///     						<code>cache.r3.8xlarge</code>
    ///                      </p>
    ///     						
    ///     						        </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    /// 				
    /// 		       <p>
    ///             <b>Additional node type info</b>
    ///          </p>
    /// 		       <ul>
    ///             <li>
    ///                <p>All current generation instance types are created in Amazon VPC by default.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis configuration variables <code>appendonly</code> and
    /// 				<code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p>
    ///             </li>
    ///          </ul>
    public let cacheNodeType: String?
    /// <p>The name of the parameter group to associate with this cluster.
    ///             If this argument is omitted, the default parameter group for the specified engine is used.
    ///             You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.</p>
    public let cacheParameterGroupName: String?
    /// <p>A list of security group names to associate with this cluster.</p>
    ///         <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
    public let cacheSecurityGroupNames: [String]?
    /// <p>The name of the subnet group to be used for the cluster.</p>
    ///         <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
    ///         <important>
    ///             <p>If you're going to launch your cluster in an Amazon VPC,
    ///                 you need to create a subnet group before you start creating a cluster.
    ///                 For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p>
    ///          </important>
    public let cacheSubnetGroupName: String?
    /// <p>The name of the cache engine to be used for this cluster.</p>
    ///         <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code>
    ///          </p>
    public let engine: String?
    /// <p>The version number of the cache engine to be used for this cluster.
    ///             To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p>
    ///
    ///         <p>
    ///             <b>Important:</b> You can upgrade to a newer engine version (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version.
    ///             If you want to use an earlier engine version,
    ///             you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
    public let engineVersion: String?
    /// <p>Specifies the destination, format and type of the logs. </p>
    public let logDeliveryConfigurations: [LogDeliveryConfigurationRequest]?
    /// <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic
    ///           to which notifications are sent.</p>
    ///          <note>
    ///             <p>The Amazon SNS topic owner must be the same as the cluster owner.</p>
    ///          </note>
    public let notificationTopicArn: String?
    /// <p>The initial number of cache nodes that the cluster has.</p>
    ///         <p>For clusters running Redis, this value must be 1.
    ///     For clusters running Memcached, this value must be between 1 and 40.</p>
    ///         <p>If you need more than 40 nodes for your Memcached cluster,
    ///             please fill out the ElastiCache Limit Increase Request form at <a href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
    public let numCacheNodes: Int?
    /// <p>Specifies whether the nodes in the cluster are created in a single outpost or across multiple outposts.</p>
    public let outpostMode: OutpostMode?
    /// <p>The port number on which each of the cache nodes  accepts connections.</p>
    public let port: Int?
    /// <p>The EC2 Availability Zone in which the cluster is created.</p>
    ///         <p>All nodes belonging to this cluster are placed in the preferred Availability Zone.
    ///             If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p>
    ///         <p>Default: System chosen Availability Zone.</p>
    public let preferredAvailabilityZone: String?
    /// <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p>
    ///         <p>This option is only supported on Memcached.</p>
    ///         <note>
    ///             <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p>
    ///             <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p>
    ///         </note>
    ///         <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or
    ///             repeat the Availability Zone multiple times in the list.</p>
    ///         <p>Default: System chosen Availability Zones.</p>
    public let preferredAvailabilityZones: [String]?
    /// <p>Specifies the weekly time range during which maintenance
    ///             on the cluster is performed. It is specified as a range in
    ///             the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum
    ///             maintenance window is a 60 minute period.
    ///             Valid values for <code>ddd</code> are:</p>
    public let preferredMaintenanceWindow: String?
    /// <p>The outpost ARN in which the cache cluster is created.</p>
    public let preferredOutpostArn: String?
    /// <p>The outpost ARNs in which the cache cluster is created.</p>
    public let preferredOutpostArns: [String]?
    /// <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p>
    ///         <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p>
    ///         <note>
    ///             <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p>
    ///          </note>
    public let replicationGroupId: String?
    /// <p>One or more VPC security groups associated with the cluster.</p>
    ///         <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
    public let securityGroupIds: [String]?
    /// <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies
    ///             a Redis RDB snapshot file stored in Amazon S3.
    ///             The snapshot file is used to populate the node group (shard).
    ///             The Amazon S3 object name in the ARN cannot contain any commas.</p>
    ///         <note>
    ///             <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p>
    ///          </note>
    ///         <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code>
    ///          </p>
    public let snapshotArns: [String]?
    /// <p>The name of a Redis snapshot from which to restore data into the new node group (shard).
    ///             The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p>
    ///         <note>
    ///             <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p>
    ///          </note>
    public let snapshotName: String?
    /// <p>The number of days for which ElastiCache retains automatic snapshots before deleting them.
    ///           For example, if you set <code>SnapshotRetentionLimit</code> to 5,
    ///           a snapshot taken today is retained for 5 days before being deleted.</p>
    ///          <note>
    ///             <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p>
    ///          </note>
    ///          <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
    public let snapshotRetentionLimit: Int?
    /// <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p>
    ///          <p>Example: <code>05:00-09:00</code>
    ///          </p>
    ///          <p>If you do not specify this parameter, ElastiCache  automatically chooses an appropriate time range.</p>
    ///         <note>
    ///             <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p>
    ///          </note>
    public let snapshotWindow: String?
    /// <p>A list of tags to be added to this resource.</p>
    public let tags: [Tag]?

    public init (
        aZMode: AZMode? = nil,
        authToken: String? = nil,
        autoMinorVersionUpgrade: Bool? = nil,
        cacheClusterId: String? = nil,
        cacheNodeType: String? = nil,
        cacheParameterGroupName: String? = nil,
        cacheSecurityGroupNames: [String]? = nil,
        cacheSubnetGroupName: String? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        logDeliveryConfigurations: [LogDeliveryConfigurationRequest]? = nil,
        notificationTopicArn: String? = nil,
        numCacheNodes: Int? = nil,
        outpostMode: OutpostMode? = nil,
        port: Int? = nil,
        preferredAvailabilityZone: String? = nil,
        preferredAvailabilityZones: [String]? = nil,
        preferredMaintenanceWindow: String? = nil,
        preferredOutpostArn: String? = nil,
        preferredOutpostArns: [String]? = nil,
        replicationGroupId: String? = nil,
        securityGroupIds: [String]? = nil,
        snapshotArns: [String]? = nil,
        snapshotName: String? = nil,
        snapshotRetentionLimit: Int? = nil,
        snapshotWindow: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.aZMode = aZMode
        self.authToken = authToken
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.cacheClusterId = cacheClusterId
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSecurityGroupNames = cacheSecurityGroupNames
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.engine = engine
        self.engineVersion = engineVersion
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.notificationTopicArn = notificationTopicArn
        self.numCacheNodes = numCacheNodes
        self.outpostMode = outpostMode
        self.port = port
        self.preferredAvailabilityZone = preferredAvailabilityZone
        self.preferredAvailabilityZones = preferredAvailabilityZones
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.preferredOutpostArn = preferredOutpostArn
        self.preferredOutpostArns = preferredOutpostArns
        self.replicationGroupId = replicationGroupId
        self.securityGroupIds = securityGroupIds
        self.snapshotArns = snapshotArns
        self.snapshotName = snapshotName
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
        self.tags = tags
    }
}

extension CreateCacheClusterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateCacheClusterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheClusterAlreadyExistsFault" : self = .cacheClusterAlreadyExistsFault(try CacheClusterAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupNotFoundFault" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFoundFault" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClusterQuotaForCustomerExceededFault" : self = .clusterQuotaForCustomerExceededFault(try ClusterQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCacheClusterCapacityFault" : self = .insufficientCacheClusterCapacityFault(try InsufficientCacheClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupStateFault" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCNetworkStateFault" : self = .invalidVPCNetworkStateFault(try InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForClusterExceededFault" : self = .nodeQuotaForClusterExceededFault(try NodeQuotaForClusterExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForCustomerExceededFault" : self = .nodeQuotaForCustomerExceededFault(try NodeQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCacheClusterOutputError: Equatable {
    case cacheClusterAlreadyExistsFault(CacheClusterAlreadyExistsFault)
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case clusterQuotaForCustomerExceededFault(ClusterQuotaForCustomerExceededFault)
    case insufficientCacheClusterCapacityFault(InsufficientCacheClusterCapacityFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case invalidVPCNetworkStateFault(InvalidVPCNetworkStateFault)
    case nodeQuotaForClusterExceededFault(NodeQuotaForClusterExceededFault)
    case nodeQuotaForCustomerExceededFault(NodeQuotaForCustomerExceededFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCacheClusterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateCacheClusterOutputResponse(cacheCluster: \(String(describing: cacheCluster)))"}
}

extension CreateCacheClusterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateCacheClusterOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheCluster = output.cacheCluster
        } else {
            self.cacheCluster = nil
        }
    }
}

public struct CreateCacheClusterOutputResponse: Equatable {
    /// <p>Contains all of the attributes of a specific cluster.</p>
    public let cacheCluster: CacheCluster?

    public init (
        cacheCluster: CacheCluster? = nil
    )
    {
        self.cacheCluster = cacheCluster
    }
}

struct CreateCacheClusterOutputResponseBody: Equatable {
    public let cacheCluster: CacheCluster?
}

extension CreateCacheClusterOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheCluster = "CacheCluster"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("CreateCacheClusterResult"))
        let cacheClusterDecoded = try containerValues.decodeIfPresent(CacheCluster.self, forKey: .cacheCluster)
        cacheCluster = cacheClusterDecoded
    }
}

public struct CreateCacheParameterGroupInputBodyMiddleware: Middleware {
    public let id: String = "CreateCacheParameterGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCacheParameterGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCacheParameterGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCacheParameterGroupInput>
    public typealias MOutput = OperationOutput<CreateCacheParameterGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCacheParameterGroupOutputError>
}

extension CreateCacheParameterGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateCacheParameterGroupInput(cacheParameterGroupFamily: \(String(describing: cacheParameterGroupFamily)), cacheParameterGroupName: \(String(describing: cacheParameterGroupName)), description: \(String(describing: description)), tags: \(String(describing: tags)))"}
}

extension CreateCacheParameterGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheParameterGroupFamily = cacheParameterGroupFamily {
            try container.encode(cacheParameterGroupFamily, forKey: Key("CacheParameterGroupFamily"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateCacheParameterGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct CreateCacheParameterGroupInputHeadersMiddleware: Middleware {
    public let id: String = "CreateCacheParameterGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCacheParameterGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCacheParameterGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCacheParameterGroupInput>
    public typealias MOutput = OperationOutput<CreateCacheParameterGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCacheParameterGroupOutputError>
}

public struct CreateCacheParameterGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateCacheParameterGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCacheParameterGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCacheParameterGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCacheParameterGroupInput>
    public typealias MOutput = OperationOutput<CreateCacheParameterGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCacheParameterGroupOutputError>
}

/// <p>Represents the input of a <code>CreateCacheParameterGroup</code> operation.</p>
public struct CreateCacheParameterGroupInput: Equatable {
    /// <p>The name of the cache parameter group family that the cache parameter group can be used with.</p>
    ///         <p>Valid values are:
    ///     <code>memcached1.4</code> |
    ///      <code>memcached1.5</code> |
    ///       <code>memcached1.6</code> |
    ///     <code>redis2.6</code> |
    ///     <code>redis2.8</code> |
    ///     <code>redis3.2</code> |
    ///     <code>redis4.0</code> |
    ///      <code>redis5.0</code> |
    ///       <code>redis6.x</code> |
    ///     </p>
    public let cacheParameterGroupFamily: String?
    /// <p>A user-specified name for the cache parameter group.</p>
    public let cacheParameterGroupName: String?
    /// <p>A user-specified description for the cache parameter group.</p>
    public let description: String?
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    public let tags: [Tag]?

    public init (
        cacheParameterGroupFamily: String? = nil,
        cacheParameterGroupName: String? = nil,
        description: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.cacheParameterGroupFamily = cacheParameterGroupFamily
        self.cacheParameterGroupName = cacheParameterGroupName
        self.description = description
        self.tags = tags
    }
}

extension CreateCacheParameterGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateCacheParameterGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheParameterGroupAlreadyExistsFault" : self = .cacheParameterGroupAlreadyExistsFault(try CacheParameterGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupQuotaExceededFault" : self = .cacheParameterGroupQuotaExceededFault(try CacheParameterGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheParameterGroupStateFault" : self = .invalidCacheParameterGroupStateFault(try InvalidCacheParameterGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCacheParameterGroupOutputError: Equatable {
    case cacheParameterGroupAlreadyExistsFault(CacheParameterGroupAlreadyExistsFault)
    case cacheParameterGroupQuotaExceededFault(CacheParameterGroupQuotaExceededFault)
    case invalidCacheParameterGroupStateFault(InvalidCacheParameterGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCacheParameterGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateCacheParameterGroupOutputResponse(cacheParameterGroup: \(String(describing: cacheParameterGroup)))"}
}

extension CreateCacheParameterGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateCacheParameterGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheParameterGroup = output.cacheParameterGroup
        } else {
            self.cacheParameterGroup = nil
        }
    }
}

public struct CreateCacheParameterGroupOutputResponse: Equatable {
    /// <p>Represents the output of a <code>CreateCacheParameterGroup</code> operation.</p>
    public let cacheParameterGroup: CacheParameterGroup?

    public init (
        cacheParameterGroup: CacheParameterGroup? = nil
    )
    {
        self.cacheParameterGroup = cacheParameterGroup
    }
}

struct CreateCacheParameterGroupOutputResponseBody: Equatable {
    public let cacheParameterGroup: CacheParameterGroup?
}

extension CreateCacheParameterGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheParameterGroup = "CacheParameterGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("CreateCacheParameterGroupResult"))
        let cacheParameterGroupDecoded = try containerValues.decodeIfPresent(CacheParameterGroup.self, forKey: .cacheParameterGroup)
        cacheParameterGroup = cacheParameterGroupDecoded
    }
}

public struct CreateCacheSecurityGroupInputBodyMiddleware: Middleware {
    public let id: String = "CreateCacheSecurityGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCacheSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCacheSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCacheSecurityGroupInput>
    public typealias MOutput = OperationOutput<CreateCacheSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCacheSecurityGroupOutputError>
}

extension CreateCacheSecurityGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateCacheSecurityGroupInput(cacheSecurityGroupName: \(String(describing: cacheSecurityGroupName)), description: \(String(describing: description)), tags: \(String(describing: tags)))"}
}

extension CreateCacheSecurityGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheSecurityGroupName = cacheSecurityGroupName {
            try container.encode(cacheSecurityGroupName, forKey: Key("CacheSecurityGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateCacheSecurityGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct CreateCacheSecurityGroupInputHeadersMiddleware: Middleware {
    public let id: String = "CreateCacheSecurityGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCacheSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCacheSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCacheSecurityGroupInput>
    public typealias MOutput = OperationOutput<CreateCacheSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCacheSecurityGroupOutputError>
}

public struct CreateCacheSecurityGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateCacheSecurityGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCacheSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCacheSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCacheSecurityGroupInput>
    public typealias MOutput = OperationOutput<CreateCacheSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCacheSecurityGroupOutputError>
}

/// <p>Represents the input of a <code>CreateCacheSecurityGroup</code> operation.</p>
public struct CreateCacheSecurityGroupInput: Equatable {
    /// <p>A name for the cache security group. This value is stored as a lowercase string.</p>
    ///         <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p>
    ///         <p>Example: <code>mysecuritygroup</code>
    ///          </p>
    public let cacheSecurityGroupName: String?
    /// <p>A description for the cache security group.</p>
    public let description: String?
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    public let tags: [Tag]?

    public init (
        cacheSecurityGroupName: String? = nil,
        description: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
        self.description = description
        self.tags = tags
    }
}

extension CreateCacheSecurityGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateCacheSecurityGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheSecurityGroupAlreadyExistsFault" : self = .cacheSecurityGroupAlreadyExistsFault(try CacheSecurityGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupQuotaExceededFault" : self = .cacheSecurityGroupQuotaExceededFault(try CacheSecurityGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCacheSecurityGroupOutputError: Equatable {
    case cacheSecurityGroupAlreadyExistsFault(CacheSecurityGroupAlreadyExistsFault)
    case cacheSecurityGroupQuotaExceededFault(CacheSecurityGroupQuotaExceededFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCacheSecurityGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateCacheSecurityGroupOutputResponse(cacheSecurityGroup: \(String(describing: cacheSecurityGroup)))"}
}

extension CreateCacheSecurityGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateCacheSecurityGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheSecurityGroup = output.cacheSecurityGroup
        } else {
            self.cacheSecurityGroup = nil
        }
    }
}

public struct CreateCacheSecurityGroupOutputResponse: Equatable {
    /// <p>Represents the output of one of the following operations:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>AuthorizeCacheSecurityGroupIngress</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CreateCacheSecurityGroup</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RevokeCacheSecurityGroupIngress</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let cacheSecurityGroup: CacheSecurityGroup?

    public init (
        cacheSecurityGroup: CacheSecurityGroup? = nil
    )
    {
        self.cacheSecurityGroup = cacheSecurityGroup
    }
}

struct CreateCacheSecurityGroupOutputResponseBody: Equatable {
    public let cacheSecurityGroup: CacheSecurityGroup?
}

extension CreateCacheSecurityGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheSecurityGroup = "CacheSecurityGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("CreateCacheSecurityGroupResult"))
        let cacheSecurityGroupDecoded = try containerValues.decodeIfPresent(CacheSecurityGroup.self, forKey: .cacheSecurityGroup)
        cacheSecurityGroup = cacheSecurityGroupDecoded
    }
}

public struct CreateCacheSubnetGroupInputBodyMiddleware: Middleware {
    public let id: String = "CreateCacheSubnetGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCacheSubnetGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCacheSubnetGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCacheSubnetGroupInput>
    public typealias MOutput = OperationOutput<CreateCacheSubnetGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCacheSubnetGroupOutputError>
}

extension CreateCacheSubnetGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateCacheSubnetGroupInput(cacheSubnetGroupDescription: \(String(describing: cacheSubnetGroupDescription)), cacheSubnetGroupName: \(String(describing: cacheSubnetGroupName)), subnetIds: \(String(describing: subnetIds)), tags: \(String(describing: tags)))"}
}

extension CreateCacheSubnetGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheSubnetGroupDescription = cacheSubnetGroupDescription {
            try container.encode(cacheSubnetGroupDescription, forKey: Key("CacheSubnetGroupDescription"))
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: Key("CacheSubnetGroupName"))
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SubnetIds"))
            for (index0, string0) in subnetIds.enumerated() {
                try subnetIdsContainer.encode(string0, forKey: Key("SubnetIdentifier.\(index0.advanced(by: 1))"))
            }
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateCacheSubnetGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct CreateCacheSubnetGroupInputHeadersMiddleware: Middleware {
    public let id: String = "CreateCacheSubnetGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCacheSubnetGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCacheSubnetGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCacheSubnetGroupInput>
    public typealias MOutput = OperationOutput<CreateCacheSubnetGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCacheSubnetGroupOutputError>
}

public struct CreateCacheSubnetGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateCacheSubnetGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCacheSubnetGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCacheSubnetGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCacheSubnetGroupInput>
    public typealias MOutput = OperationOutput<CreateCacheSubnetGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCacheSubnetGroupOutputError>
}

/// <p>Represents the input of a <code>CreateCacheSubnetGroup</code> operation.</p>
public struct CreateCacheSubnetGroupInput: Equatable {
    /// <p>A description for the cache subnet group.</p>
    public let cacheSubnetGroupDescription: String?
    /// <p>A name for the cache subnet group. This value is stored as a lowercase string.</p>
    ///         <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
    ///         <p>Example: <code>mysubnetgroup</code>
    ///          </p>
    public let cacheSubnetGroupName: String?
    /// <p>A list of VPC subnet IDs for the cache subnet group.</p>
    public let subnetIds: [String]?
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    public let tags: [Tag]?

    public init (
        cacheSubnetGroupDescription: String? = nil,
        cacheSubnetGroupName: String? = nil,
        subnetIds: [String]? = nil,
        tags: [Tag]? = nil
    )
    {
        self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.subnetIds = subnetIds
        self.tags = tags
    }
}

extension CreateCacheSubnetGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateCacheSubnetGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheSubnetGroupAlreadyExistsFault" : self = .cacheSubnetGroupAlreadyExistsFault(try CacheSubnetGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetGroupQuotaExceededFault" : self = .cacheSubnetGroupQuotaExceededFault(try CacheSubnetGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetQuotaExceededFault" : self = .cacheSubnetQuotaExceededFault(try CacheSubnetQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSubnet" : self = .invalidSubnet(try InvalidSubnet(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SubnetNotAllowedFault" : self = .subnetNotAllowedFault(try SubnetNotAllowedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCacheSubnetGroupOutputError: Equatable {
    case cacheSubnetGroupAlreadyExistsFault(CacheSubnetGroupAlreadyExistsFault)
    case cacheSubnetGroupQuotaExceededFault(CacheSubnetGroupQuotaExceededFault)
    case cacheSubnetQuotaExceededFault(CacheSubnetQuotaExceededFault)
    case invalidSubnet(InvalidSubnet)
    case subnetNotAllowedFault(SubnetNotAllowedFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCacheSubnetGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateCacheSubnetGroupOutputResponse(cacheSubnetGroup: \(String(describing: cacheSubnetGroup)))"}
}

extension CreateCacheSubnetGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateCacheSubnetGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheSubnetGroup = output.cacheSubnetGroup
        } else {
            self.cacheSubnetGroup = nil
        }
    }
}

public struct CreateCacheSubnetGroupOutputResponse: Equatable {
    /// <p>Represents the output of one of the following operations:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreateCacheSubnetGroup</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ModifyCacheSubnetGroup</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let cacheSubnetGroup: CacheSubnetGroup?

    public init (
        cacheSubnetGroup: CacheSubnetGroup? = nil
    )
    {
        self.cacheSubnetGroup = cacheSubnetGroup
    }
}

struct CreateCacheSubnetGroupOutputResponseBody: Equatable {
    public let cacheSubnetGroup: CacheSubnetGroup?
}

extension CreateCacheSubnetGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheSubnetGroup = "CacheSubnetGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("CreateCacheSubnetGroupResult"))
        let cacheSubnetGroupDecoded = try containerValues.decodeIfPresent(CacheSubnetGroup.self, forKey: .cacheSubnetGroup)
        cacheSubnetGroup = cacheSubnetGroupDecoded
    }
}

public struct CreateGlobalReplicationGroupInputBodyMiddleware: Middleware {
    public let id: String = "CreateGlobalReplicationGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<CreateGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGlobalReplicationGroupOutputError>
}

extension CreateGlobalReplicationGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateGlobalReplicationGroupInput(globalReplicationGroupDescription: \(String(describing: globalReplicationGroupDescription)), globalReplicationGroupIdSuffix: \(String(describing: globalReplicationGroupIdSuffix)), primaryReplicationGroupId: \(String(describing: primaryReplicationGroupId)))"}
}

extension CreateGlobalReplicationGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let globalReplicationGroupDescription = globalReplicationGroupDescription {
            try container.encode(globalReplicationGroupDescription, forKey: Key("GlobalReplicationGroupDescription"))
        }
        if let globalReplicationGroupIdSuffix = globalReplicationGroupIdSuffix {
            try container.encode(globalReplicationGroupIdSuffix, forKey: Key("GlobalReplicationGroupIdSuffix"))
        }
        if let primaryReplicationGroupId = primaryReplicationGroupId {
            try container.encode(primaryReplicationGroupId, forKey: Key("PrimaryReplicationGroupId"))
        }
        try container.encode("CreateGlobalReplicationGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct CreateGlobalReplicationGroupInputHeadersMiddleware: Middleware {
    public let id: String = "CreateGlobalReplicationGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<CreateGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGlobalReplicationGroupOutputError>
}

public struct CreateGlobalReplicationGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateGlobalReplicationGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<CreateGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGlobalReplicationGroupOutputError>
}

public struct CreateGlobalReplicationGroupInput: Equatable {
    /// <p>Provides details of the Global datastore</p>
    public let globalReplicationGroupDescription: String?
    /// <p>The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix
    ///             to the Global datastore ID when it is created. Each AWS Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with "dsdfu" along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions.  </p>
    ///         <p>For a full list of AWS Regions and their respective Global datastore iD prefixes, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastores-CLI.html">Using the AWS CLI with Global datastores </a>.</p>
    public let globalReplicationGroupIdSuffix: String?
    /// <p>The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.</p>
    public let primaryReplicationGroupId: String?

    public init (
        globalReplicationGroupDescription: String? = nil,
        globalReplicationGroupIdSuffix: String? = nil,
        primaryReplicationGroupId: String? = nil
    )
    {
        self.globalReplicationGroupDescription = globalReplicationGroupDescription
        self.globalReplicationGroupIdSuffix = globalReplicationGroupIdSuffix
        self.primaryReplicationGroupId = primaryReplicationGroupId
    }
}

extension CreateGlobalReplicationGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateGlobalReplicationGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupAlreadyExistsFault" : self = .globalReplicationGroupAlreadyExistsFault(try GlobalReplicationGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupStateFault" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleNotFoundFault" : self = .serviceLinkedRoleNotFoundFault(try ServiceLinkedRoleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateGlobalReplicationGroupOutputError: Equatable {
    case globalReplicationGroupAlreadyExistsFault(GlobalReplicationGroupAlreadyExistsFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case serviceLinkedRoleNotFoundFault(ServiceLinkedRoleNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGlobalReplicationGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateGlobalReplicationGroupOutputResponse(globalReplicationGroup: \(String(describing: globalReplicationGroup)))"}
}

extension CreateGlobalReplicationGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct CreateGlobalReplicationGroupOutputResponse: Equatable {
    /// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different AWS region. The secondary cluster accepts only reads. The primary
    ///         cluster automatically replicates updates to the secondary cluster.</p>
    ///
    ///
    ///         <ul>
    ///             <li>
    ///                <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore,
    ///             which is what you use to associate a secondary cluster.</p>
    ///             </li>
    ///          </ul>
    public let globalReplicationGroup: GlobalReplicationGroup?

    public init (
        globalReplicationGroup: GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct CreateGlobalReplicationGroupOutputResponseBody: Equatable {
    public let globalReplicationGroup: GlobalReplicationGroup?
}

extension CreateGlobalReplicationGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("CreateGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

public struct CreateReplicationGroupInputBodyMiddleware: Middleware {
    public let id: String = "CreateReplicationGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateReplicationGroupInput>
    public typealias MOutput = OperationOutput<CreateReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateReplicationGroupOutputError>
}

extension CreateReplicationGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateReplicationGroupInput(atRestEncryptionEnabled: \(String(describing: atRestEncryptionEnabled)), authToken: \(String(describing: authToken)), autoMinorVersionUpgrade: \(String(describing: autoMinorVersionUpgrade)), automaticFailoverEnabled: \(String(describing: automaticFailoverEnabled)), cacheNodeType: \(String(describing: cacheNodeType)), cacheParameterGroupName: \(String(describing: cacheParameterGroupName)), cacheSecurityGroupNames: \(String(describing: cacheSecurityGroupNames)), cacheSubnetGroupName: \(String(describing: cacheSubnetGroupName)), engine: \(String(describing: engine)), engineVersion: \(String(describing: engineVersion)), globalReplicationGroupId: \(String(describing: globalReplicationGroupId)), kmsKeyId: \(String(describing: kmsKeyId)), logDeliveryConfigurations: \(String(describing: logDeliveryConfigurations)), multiAZEnabled: \(String(describing: multiAZEnabled)), nodeGroupConfiguration: \(String(describing: nodeGroupConfiguration)), notificationTopicArn: \(String(describing: notificationTopicArn)), numCacheClusters: \(String(describing: numCacheClusters)), numNodeGroups: \(String(describing: numNodeGroups)), port: \(String(describing: port)), preferredCacheClusterAZs: \(String(describing: preferredCacheClusterAZs)), preferredMaintenanceWindow: \(String(describing: preferredMaintenanceWindow)), primaryClusterId: \(String(describing: primaryClusterId)), replicasPerNodeGroup: \(String(describing: replicasPerNodeGroup)), replicationGroupDescription: \(String(describing: replicationGroupDescription)), replicationGroupId: \(String(describing: replicationGroupId)), securityGroupIds: \(String(describing: securityGroupIds)), snapshotArns: \(String(describing: snapshotArns)), snapshotName: \(String(describing: snapshotName)), snapshotRetentionLimit: \(String(describing: snapshotRetentionLimit)), snapshotWindow: \(String(describing: snapshotWindow)), tags: \(String(describing: tags)), transitEncryptionEnabled: \(String(describing: transitEncryptionEnabled)), userGroupIds: \(String(describing: userGroupIds)))"}
}

extension CreateReplicationGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let atRestEncryptionEnabled = atRestEncryptionEnabled {
            try container.encode(atRestEncryptionEnabled, forKey: Key("AtRestEncryptionEnabled"))
        }
        if let authToken = authToken {
            try container.encode(authToken, forKey: Key("AuthToken"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: Key("AutoMinorVersionUpgrade"))
        }
        if let automaticFailoverEnabled = automaticFailoverEnabled {
            try container.encode(automaticFailoverEnabled, forKey: Key("AutomaticFailoverEnabled"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let cacheSecurityGroupNames = cacheSecurityGroupNames {
            var cacheSecurityGroupNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheSecurityGroupNames"))
            for (index0, string0) in cacheSecurityGroupNames.enumerated() {
                try cacheSecurityGroupNamesContainer.encode(string0, forKey: Key("CacheSecurityGroupName.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: Key("CacheSubnetGroupName"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: Key("GlobalReplicationGroupId"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: Key("KmsKeyId"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LogDeliveryConfigurations"))
            for (index0, logdeliveryconfigurationrequest0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(logdeliveryconfigurationrequest0, forKey: Key("LogDeliveryConfigurationRequest.\(index0.advanced(by: 1))"))
            }
        }
        if let multiAZEnabled = multiAZEnabled {
            try container.encode(multiAZEnabled, forKey: Key("MultiAZEnabled"))
        }
        if let nodeGroupConfiguration = nodeGroupConfiguration {
            var nodeGroupConfigurationContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NodeGroupConfiguration"))
            for (index0, nodegroupconfiguration0) in nodeGroupConfiguration.enumerated() {
                try nodeGroupConfigurationContainer.encode(nodegroupconfiguration0, forKey: Key("NodeGroupConfiguration.\(index0.advanced(by: 1))"))
            }
        }
        if let notificationTopicArn = notificationTopicArn {
            try container.encode(notificationTopicArn, forKey: Key("NotificationTopicArn"))
        }
        if let numCacheClusters = numCacheClusters {
            try container.encode(numCacheClusters, forKey: Key("NumCacheClusters"))
        }
        if let numNodeGroups = numNodeGroups {
            try container.encode(numNodeGroups, forKey: Key("NumNodeGroups"))
        }
        if let port = port {
            try container.encode(port, forKey: Key("Port"))
        }
        if let preferredCacheClusterAZs = preferredCacheClusterAZs {
            var preferredCacheClusterAZsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PreferredCacheClusterAZs"))
            for (index0, string0) in preferredCacheClusterAZs.enumerated() {
                try preferredCacheClusterAZsContainer.encode(string0, forKey: Key("AvailabilityZone.\(index0.advanced(by: 1))"))
            }
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: Key("PreferredMaintenanceWindow"))
        }
        if let primaryClusterId = primaryClusterId {
            try container.encode(primaryClusterId, forKey: Key("PrimaryClusterId"))
        }
        if let replicasPerNodeGroup = replicasPerNodeGroup {
            try container.encode(replicasPerNodeGroup, forKey: Key("ReplicasPerNodeGroup"))
        }
        if let replicationGroupDescription = replicationGroupDescription {
            try container.encode(replicationGroupDescription, forKey: Key("ReplicationGroupDescription"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SecurityGroupIds"))
            for (index0, string0) in securityGroupIds.enumerated() {
                try securityGroupIdsContainer.encode(string0, forKey: Key("SecurityGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotArns = snapshotArns {
            var snapshotArnsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SnapshotArns"))
            for (index0, string0) in snapshotArns.enumerated() {
                try snapshotArnsContainer.encode(string0, forKey: Key("SnapshotArn.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotName = snapshotName {
            try container.encode(snapshotName, forKey: Key("SnapshotName"))
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: Key("SnapshotRetentionLimit"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: Key("SnapshotWindow"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        if let transitEncryptionEnabled = transitEncryptionEnabled {
            try container.encode(transitEncryptionEnabled, forKey: Key("TransitEncryptionEnabled"))
        }
        if let userGroupIds = userGroupIds {
            var userGroupIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserGroupIds"))
            for (index0, usergroupid0) in userGroupIds.enumerated() {
                try userGroupIdsContainer.encode(usergroupid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateReplicationGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct CreateReplicationGroupInputHeadersMiddleware: Middleware {
    public let id: String = "CreateReplicationGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateReplicationGroupInput>
    public typealias MOutput = OperationOutput<CreateReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateReplicationGroupOutputError>
}

public struct CreateReplicationGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateReplicationGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateReplicationGroupInput>
    public typealias MOutput = OperationOutput<CreateReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateReplicationGroupOutputError>
}

/// <p>Represents the input of a <code>CreateReplicationGroup</code> operation.</p>
public struct CreateReplicationGroupInput: Equatable {
    /// <p>A flag that enables encryption at rest when set to <code>true</code>.</p>
    ///         <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication
    ///             group is created.
    ///             To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to
    ///             <code>true</code> when you create the replication group. </p>
    ///         <p>
    ///             <b>Required:</b>
    ///             Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    public let atRestEncryptionEnabled: Bool?
    /// <p>
    ///             <b>Reserved parameter.</b>
    ///             The password used to access a password protected server.</p>
    ///         <p>
    ///             <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is
    ///             <code>true</code>.</p>
    ///         <important>
    ///             <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>,
    ///             an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p>
    ///          </important>
    ///         <p>Password constraints:</p>
    ///         <ul>
    ///             <li>
    ///                <p>Must be only printable ASCII characters.</p>
    ///             </li>
    ///             <li>
    ///                <p>Must be at least 16 characters and no more than 128
    ///                 characters in length.</p>
    ///             </li>
    ///             <li>
    ///                <p>The only permitted printable special characters are !, &, #, $, ^, <, >, and -. Other printable special characters cannot be used in the AUTH token.</p>
    ///             </li>
    ///          </ul>
    ///         <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
    public let authToken: String?
    /// <p>This parameter is currently disabled.</p>
    public let autoMinorVersionUpgrade: Bool?
    /// <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p>
    ///
    ///         <p>
    ///             <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p>
    ///
    ///         <p>Default: false</p>
    public let automaticFailoverEnabled: Bool?
    /// <p>The compute and memory capacity of the nodes in the node group (shard).</p>
    ///         <p>The following node types are supported by ElastiCache.
    /// 				Generally speaking, the current generation types provide more memory and computational power
    /// 			at lower cost when compared to their equivalent previous generation counterparts.</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>General purpose:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 					
    ///     						           <p>
    ///                         <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						               <p>	
    ///                         <code>cache.m6g.large</code>,
    /// 							<code>cache.m6g.xlarge</code>,
    /// 							<code>cache.m6g.2xlarge</code>,
    /// 							<code>cache.m6g.4xlarge</code>,
    /// 							<code>cache.m6g.8xlarge</code>,
    /// 							<code>cache.m6g.12xlarge</code>,
    /// 							<code>cache.m6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    ///     					
    ///     					
    ///     					            <p>
    ///                         <b>M5 node types:</b>
    ///     						              <code>cache.m5.large</code>,
    ///     						<code>cache.m5.xlarge</code>,
    ///     						<code>cache.m5.2xlarge</code>,
    ///     						<code>cache.m5.4xlarge</code>,
    ///     						<code>cache.m5.12xlarge</code>,
    ///     						<code>cache.m5.24xlarge</code>
    ///     						
    ///     						
    ///     						           </p>	
    ///     						
    /// 						
    /// 						               <p>
    ///                         <b>M4 node types:</b>
    ///     						              <code>cache.m4.large</code>,
    ///     						<code>cache.m4.xlarge</code>,
    ///     						<code>cache.m4.2xlarge</code>,
    ///     						<code>cache.m4.4xlarge</code>,
    ///     						<code>cache.m4.10xlarge</code>
    ///                      </p>
    ///     					            <p>
    ///                         <b>T3 node types:</b>
    /// 					                   <code>cache.t3.micro</code>,
    ///     						<code>cache.t3.small</code>,
    ///     						<code>cache.t3.medium</code>
    ///                      </p>
    ///     								
    ///     						
    ///     				             <p>
    ///                         <b>T2 node types:</b>
    /// 					                   <code>cache.t2.micro</code>,
    ///     						<code>cache.t2.small</code>,
    ///     						<code>cache.t2.medium</code>
    ///                      </p>
    ///     						
    ///     						
    ///     						
    ///     						
    ///     						        </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 						               <p>
    ///                         <b>T1 node types:</b>
    /// 					                   <code>cache.t1.micro</code>
    ///                      </p>
    /// 					
    /// 						               <p>
    ///                         <b>M1 node types:</b>
    /// 						                  <code>cache.m1.small</code>,
    /// 						   <code>cache.m1.medium</code>,
    /// 						   <code>cache.m1.large</code>,
    /// 						   <code>cache.m1.xlarge</code>
    ///                      </p>
    /// 						
    /// 						               <p>
    ///                         <b>M3 node types:</b>
    ///     						              <code>cache.m3.medium</code>,
    ///     						<code>cache.m3.large</code>,
    ///     						<code>cache.m3.xlarge</code>,
    ///     						<code>cache.m3.2xlarge</code>
    ///                      </p>
    /// 						
    /// 						            </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Compute optimized:</p>
    ///
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 			                  <p>
    ///                         <b>C1 node types:</b>
    /// 			                     <code>cache.c1.xlarge</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Memory optimized:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 											          <p>
    ///                         <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						
    /// 						
    /// 						
    /// 						
    /// 						               <p>	
    /// 							                 <code>cache.r6g.large</code>,
    /// 							<code>cache.r6g.xlarge</code>,
    /// 							<code>cache.r6g.2xlarge</code>,
    /// 							<code>cache.r6g.4xlarge</code>,
    /// 							<code>cache.r6g.8xlarge</code>,
    /// 							<code>cache.r6g.12xlarge</code>,
    /// 							<code>cache.r6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    /// 					                <p>
    ///                         <b>R5 node types:</b>
    ///     					               <code>cache.r5.large</code>,
    ///     					   <code>cache.r5.xlarge</code>,
    ///     					   <code>cache.r5.2xlarge</code>,
    ///     					   <code>cache.r5.4xlarge</code>,
    ///     					   <code>cache.r5.12xlarge</code>,
    ///     					   <code>cache.r5.24xlarge</code>
    ///                      </p>
    /// 						
    ///     					            <p>
    ///                         <b>R4 node types:</b>
    ///     					               <code>cache.r4.large</code>,
    ///     					   <code>cache.r4.xlarge</code>,
    ///     					   <code>cache.r4.2xlarge</code>,
    ///     					   <code>cache.r4.4xlarge</code>,
    ///     					   <code>cache.r4.8xlarge</code>,
    ///     					   <code>cache.r4.16xlarge</code>
    ///                      </p>
    ///     					
    ///     					
    ///     					
    ///
    ///
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					         </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    ///                         <p>
    ///                         <b>M2 node types:</b>						
    ///     					               <code>cache.m2.xlarge</code>,
    ///     						<code>cache.m2.2xlarge</code>,
    ///     						<code>cache.m2.4xlarge</code>
    ///                      </p>
    ///     						
    ///     						           <p>
    ///                         <b>R3 node types:</b>
    ///     					               <code>cache.r3.large</code>,
    ///     						<code>cache.r3.xlarge</code>,
    ///     						<code>cache.r3.2xlarge</code>,
    ///     						<code>cache.r3.4xlarge</code>,
    ///     						<code>cache.r3.8xlarge</code>
    ///                      </p>
    ///     						
    ///     						        </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    /// 				
    /// 		       <p>
    ///             <b>Additional node type info</b>
    ///          </p>
    /// 		       <ul>
    ///             <li>
    ///                <p>All current generation instance types are created in Amazon VPC by default.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis configuration variables <code>appendonly</code> and
    /// 				<code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p>
    ///             </li>
    ///          </ul>
    public let cacheNodeType: String?
    /// <p>The name of the parameter group to associate with this replication group.
    ///             If this argument is omitted, the default cache parameter group for the specified engine is
    ///             used.</p>
    ///
    ///         <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group,
    ///             we recommend that you specify the parameter group by name. </p>
    ///         <ul>
    ///             <li>
    ///                <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p>
    ///             </li>
    ///          </ul>
    public let cacheParameterGroupName: String?
    /// <p>A list of cache security group names to associate with this replication group.</p>
    public let cacheSecurityGroupNames: [String]?
    /// <p>The name of the cache subnet group to be used for the replication group.</p>
    ///         <important>
    ///             <p>If you're going to launch your cluster in an Amazon VPC,
    ///                 you need to create a subnet group before you start creating a cluster.
    ///                 For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p>
    ///          </important>
    public let cacheSubnetGroupName: String?
    /// <p>The name of the cache engine to be used for the clusters in this replication group. Must be Redis.</p>
    public let engine: String?
    /// <p>The version number of the cache engine to be used for the clusters in this replication group.
    ///             To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p>
    ///
    ///         <p>
    ///             <b>Important:</b> You can upgrade to a newer engine version (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>,
    ///             but you cannot downgrade to an earlier engine version.
    ///             If you want to use an earlier engine version,
    ///             you must delete the existing cluster or replication group and
    ///             create it anew with the earlier engine version. </p>
    public let engineVersion: String?
    /// <p>The name of the Global datastore</p>
    public let globalReplicationGroupId: String?
    /// <p>The ID of the KMS key used to encrypt the disk in the cluster.</p>
    public let kmsKeyId: String?
    /// <p>Specifies the destination, format and type of the logs.</p>
    public let logDeliveryConfigurations: [LogDeliveryConfigurationRequest]?
    /// <p>A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html">Minimizing Downtime: Multi-AZ</a>.</p>
    public let multiAZEnabled: Bool?
    /// <p>A list of node group (shard) configuration options.
    ///             Each node group (shard) configuration has the following members:
    ///             <code>PrimaryAvailabilityZone</code>,
    ///             <code>ReplicaAvailabilityZones</code>,
    ///             <code>ReplicaCount</code>, and
    ///             <code>Slots</code>.</p>
    ///         <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to
    ///             individually configure each node group (shard), or you can omit this parameter. However, it is required when seeding a
    ///             Redis (cluster mode enabled) cluster from a S3 rdb file. You must configure each node group (shard) using this parameter
    ///             because you must specify the slots for each node group.</p>
    public let nodeGroupConfiguration: [NodeGroupConfiguration]?
    /// <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)
    ///             topic to which notifications are sent.</p>
    ///         <note>
    ///             <p>The Amazon SNS topic owner must be the same as the cluster owner.</p>
    ///          </note>
    public let notificationTopicArn: String?
    /// <p>The number of clusters this replication group initially has.</p>
    ///         <p>This parameter is not used if there is more than one node group (shard).
    ///             You should use <code>ReplicasPerNodeGroup</code> instead.</p>
    ///         <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2.
    ///             If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you
    ///             can explicitly set it to a value between 2 and 6.</p>
    ///         <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
    public let numCacheClusters: Int?
    /// <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group.
    ///             For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p>
    ///         <p>Default: 1</p>
    public let numNodeGroups: Int?
    /// <p>The port number on which each member of the replication group accepts connections.</p>
    public let port: Int?
    /// <p>A list of EC2 Availability Zones in which the replication group's clusters are created.
    ///             The order of the Availability Zones in the list is the order in which clusters are allocated.
    ///             The primary cluster is created in the first AZ in the list.</p>
    ///         <p>This parameter is not used if there is more than one node group (shard).
    ///             You should use <code>NodeGroupConfiguration</code> instead.</p>
    ///         <note>
    ///             <p>If you are creating your replication group in an Amazon VPC (recommended),
    ///             you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p>
    ///             <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p>
    ///          </note>
    ///         <p>Default: system chosen Availability Zones.</p>
    public let preferredCacheClusterAZs: [String]?
    /// <p>Specifies the weekly time range during which maintenance
    ///             on the cluster is performed. It is specified as a range in
    ///             the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum
    ///             maintenance window is a 60 minute period.
    ///             Valid values for <code>ddd</code> are:</p>
    ///
    ///          <p>Specifies the weekly time range during which maintenance
    ///    on the cluster is performed. It is specified as a range in
    ///    the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum
    ///    maintenance window is a 60 minute period.</p>
    ///          <p>Valid values for <code>ddd</code> are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>sun</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>mon</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>tue</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>wed</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>thu</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>fri</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sat</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>Example: <code>sun:23:00-mon:01:30</code>
    ///          </p>
    public let preferredMaintenanceWindow: String?
    /// <p>The identifier of the cluster that serves as the primary for this replication
    ///             group. This cluster must already exist and have a status of <code>available</code>.</p>
    ///         <p>This parameter is not required if <code>NumCacheClusters</code>,
    ///             <code>NumNodeGroups</code>, or
    ///             <code>ReplicasPerNodeGroup</code> is specified.</p>
    public let primaryClusterId: String?
    /// <p>An optional parameter that specifies the number of replica nodes in each node group (shard).
    ///             Valid values are 0 to 5.</p>
    public let replicasPerNodeGroup: Int?
    /// <p>A user-created description for the replication group.</p>
    public let replicationGroupDescription: String?
    /// <p>The replication group identifier. This parameter is stored as a lowercase string.</p>
    ///
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p>
    ///             </li>
    ///             <li>
    ///                <p>The first character must be a letter.</p>
    ///             </li>
    ///             <li>
    ///                <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p>
    ///             </li>
    ///          </ul>
    public let replicationGroupId: String?
    /// <p>One or more Amazon VPC security groups associated with this replication group.</p>
    ///         <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
    public let securityGroupIds: [String]?
    /// <p>A list of Amazon Resource Names (ARN) that uniquely identify
    ///           the Redis RDB snapshot files stored in Amazon S3.
    ///           The snapshot files are used to populate the new replication group.
    ///           The Amazon S3 object name in the ARN cannot contain any commas.
    ///           The new replication group will have the number of node groups (console: shards)
    ///           specified by the parameter <i>NumNodeGroups</i> or the number of
    ///           node groups configured by <i>NodeGroupConfiguration</i> regardless
    ///           of the number of ARNs specified here.</p>
    ///          <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code>
    ///          </p>
    public let snapshotArns: [String]?
    /// <p>The name of a snapshot from which to restore data into the new replication group.
    ///             The snapshot status changes to <code>restoring</code> while the new replication group is being created.</p>
    public let snapshotName: String?
    /// <p>The number of days for which ElastiCache retains automatic snapshots before deleting them.
    ///             For example, if you set <code>SnapshotRetentionLimit</code> to 5,
    ///             a snapshot that was taken today is retained for 5 days before being deleted.</p>
    ///          <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
    public let snapshotRetentionLimit: Int?
    /// <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p>
    ///          <p>Example: <code>05:00-09:00</code>
    ///          </p>
    ///          <p>If you do not specify this parameter, ElastiCache  automatically chooses an appropriate time range.</p>
    public let snapshotWindow: String?
    /// <p>A list of tags to be added to this resource.
    ///           Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following:
    ///           Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>. Tags on replication groups will be replicated to all nodes.</p>
    public let tags: [Tag]?
    /// <p>A flag that enables in-transit encryption when set to <code>true</code>.</p>
    ///         <p>You cannot modify the value of <code>TransitEncryptionEnabled</code>
    ///             after the cluster is created. To enable in-transit encryption on a cluster
    ///             you must set <code>TransitEncryptionEnabled</code> to <code>true</code>
    ///             when you create a cluster.</p>
    ///         <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>,
    ///             the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later,
    ///             and the cluster is being created in an Amazon VPC.</p>
    ///         <p>If you enable in-transit encryption, you must also specify a value for
    ///             <code>CacheSubnetGroup</code>.</p>
    ///         <p>
    ///             <b>Required:</b>
    ///             Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    ///         <important>
    ///             <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>,
    ///             an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p>
    ///          </important>
    public let transitEncryptionEnabled: Bool?
    /// <p>The user group to associate with the replication group.</p>
    public let userGroupIds: [String]?

    public init (
        atRestEncryptionEnabled: Bool? = nil,
        authToken: String? = nil,
        autoMinorVersionUpgrade: Bool? = nil,
        automaticFailoverEnabled: Bool? = nil,
        cacheNodeType: String? = nil,
        cacheParameterGroupName: String? = nil,
        cacheSecurityGroupNames: [String]? = nil,
        cacheSubnetGroupName: String? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        globalReplicationGroupId: String? = nil,
        kmsKeyId: String? = nil,
        logDeliveryConfigurations: [LogDeliveryConfigurationRequest]? = nil,
        multiAZEnabled: Bool? = nil,
        nodeGroupConfiguration: [NodeGroupConfiguration]? = nil,
        notificationTopicArn: String? = nil,
        numCacheClusters: Int? = nil,
        numNodeGroups: Int? = nil,
        port: Int? = nil,
        preferredCacheClusterAZs: [String]? = nil,
        preferredMaintenanceWindow: String? = nil,
        primaryClusterId: String? = nil,
        replicasPerNodeGroup: Int? = nil,
        replicationGroupDescription: String? = nil,
        replicationGroupId: String? = nil,
        securityGroupIds: [String]? = nil,
        snapshotArns: [String]? = nil,
        snapshotName: String? = nil,
        snapshotRetentionLimit: Int? = nil,
        snapshotWindow: String? = nil,
        tags: [Tag]? = nil,
        transitEncryptionEnabled: Bool? = nil,
        userGroupIds: [String]? = nil
    )
    {
        self.atRestEncryptionEnabled = atRestEncryptionEnabled
        self.authToken = authToken
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.automaticFailoverEnabled = automaticFailoverEnabled
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSecurityGroupNames = cacheSecurityGroupNames
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.engine = engine
        self.engineVersion = engineVersion
        self.globalReplicationGroupId = globalReplicationGroupId
        self.kmsKeyId = kmsKeyId
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.multiAZEnabled = multiAZEnabled
        self.nodeGroupConfiguration = nodeGroupConfiguration
        self.notificationTopicArn = notificationTopicArn
        self.numCacheClusters = numCacheClusters
        self.numNodeGroups = numNodeGroups
        self.port = port
        self.preferredCacheClusterAZs = preferredCacheClusterAZs
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.primaryClusterId = primaryClusterId
        self.replicasPerNodeGroup = replicasPerNodeGroup
        self.replicationGroupDescription = replicationGroupDescription
        self.replicationGroupId = replicationGroupId
        self.securityGroupIds = securityGroupIds
        self.snapshotArns = snapshotArns
        self.snapshotName = snapshotName
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
        self.tags = tags
        self.transitEncryptionEnabled = transitEncryptionEnabled
        self.userGroupIds = userGroupIds
    }
}

extension CreateReplicationGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateReplicationGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFoundFault" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupNotFoundFault" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFoundFault" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClusterQuotaForCustomerExceededFault" : self = .clusterQuotaForCustomerExceededFault(try ClusterQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCacheClusterCapacityFault" : self = .insufficientCacheClusterCapacityFault(try InsufficientCacheClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterStateFault" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupStateFault" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserGroupStateFault" : self = .invalidUserGroupStateFault(try InvalidUserGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCNetworkStateFault" : self = .invalidVPCNetworkStateFault(try InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeGroupsPerReplicationGroupQuotaExceededFault" : self = .nodeGroupsPerReplicationGroupQuotaExceededFault(try NodeGroupsPerReplicationGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForClusterExceededFault" : self = .nodeQuotaForClusterExceededFault(try NodeQuotaForClusterExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForCustomerExceededFault" : self = .nodeQuotaForCustomerExceededFault(try NodeQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupAlreadyExistsFault" : self = .replicationGroupAlreadyExistsFault(try ReplicationGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFoundFault" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateReplicationGroupOutputError: Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case clusterQuotaForCustomerExceededFault(ClusterQuotaForCustomerExceededFault)
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case insufficientCacheClusterCapacityFault(InsufficientCacheClusterCapacityFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidUserGroupStateFault(InvalidUserGroupStateFault)
    case invalidVPCNetworkStateFault(InvalidVPCNetworkStateFault)
    case nodeGroupsPerReplicationGroupQuotaExceededFault(NodeGroupsPerReplicationGroupQuotaExceededFault)
    case nodeQuotaForClusterExceededFault(NodeQuotaForClusterExceededFault)
    case nodeQuotaForCustomerExceededFault(NodeQuotaForCustomerExceededFault)
    case replicationGroupAlreadyExistsFault(ReplicationGroupAlreadyExistsFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateReplicationGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateReplicationGroupOutputResponse(replicationGroup: \(String(describing: replicationGroup)))"}
}

extension CreateReplicationGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct CreateReplicationGroupOutputResponse: Equatable {
    /// <p>Contains all of the attributes of a specific Redis replication group.</p>
    public let replicationGroup: ReplicationGroup?

    public init (
        replicationGroup: ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct CreateReplicationGroupOutputResponseBody: Equatable {
    public let replicationGroup: ReplicationGroup?
}

extension CreateReplicationGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("CreateReplicationGroupResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

public struct CreateSnapshotInputBodyMiddleware: Middleware {
    public let id: String = "CreateSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateSnapshotInput>
    public typealias MOutput = OperationOutput<CreateSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateSnapshotOutputError>
}

extension CreateSnapshotInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateSnapshotInput(cacheClusterId: \(String(describing: cacheClusterId)), kmsKeyId: \(String(describing: kmsKeyId)), replicationGroupId: \(String(describing: replicationGroupId)), snapshotName: \(String(describing: snapshotName)), tags: \(String(describing: tags)))"}
}

extension CreateSnapshotInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: Key("KmsKeyId"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let snapshotName = snapshotName {
            try container.encode(snapshotName, forKey: Key("SnapshotName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateSnapshot", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct CreateSnapshotInputHeadersMiddleware: Middleware {
    public let id: String = "CreateSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateSnapshotInput>
    public typealias MOutput = OperationOutput<CreateSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateSnapshotOutputError>
}

public struct CreateSnapshotInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateSnapshotInput>
    public typealias MOutput = OperationOutput<CreateSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateSnapshotOutputError>
}

/// <p>Represents the input of a <code>CreateSnapshot</code> operation.</p>
public struct CreateSnapshotInput: Equatable {
    /// <p>The identifier of an existing cluster. The snapshot is created from this cluster.</p>
    public let cacheClusterId: String?
    /// <p>The ID of the KMS key used to encrypt the snapshot.</p>
    public let kmsKeyId: String?
    /// <p>The identifier of an existing replication group. The snapshot is created from this replication group.</p>
    public let replicationGroupId: String?
    /// <p>A name for the snapshot being created.</p>
    public let snapshotName: String?
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    public let tags: [Tag]?

    public init (
        cacheClusterId: String? = nil,
        kmsKeyId: String? = nil,
        replicationGroupId: String? = nil,
        snapshotName: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.kmsKeyId = kmsKeyId
        self.replicationGroupId = replicationGroupId
        self.snapshotName = snapshotName
        self.tags = tags
    }
}

extension CreateSnapshotOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateSnapshotOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFoundFault" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterStateFault" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupStateFault" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotAlreadyExistsFault" : self = .snapshotAlreadyExistsFault(try SnapshotAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotFeatureNotSupportedFault" : self = .snapshotFeatureNotSupportedFault(try SnapshotFeatureNotSupportedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotQuotaExceededFault" : self = .snapshotQuotaExceededFault(try SnapshotQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateSnapshotOutputError: Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case snapshotAlreadyExistsFault(SnapshotAlreadyExistsFault)
    case snapshotFeatureNotSupportedFault(SnapshotFeatureNotSupportedFault)
    case snapshotQuotaExceededFault(SnapshotQuotaExceededFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSnapshotOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateSnapshotOutputResponse(snapshot: \(String(describing: snapshot)))"}
}

extension CreateSnapshotOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.snapshot = output.snapshot
        } else {
            self.snapshot = nil
        }
    }
}

public struct CreateSnapshotOutputResponse: Equatable {
    /// <p>Represents a copy of an entire Redis cluster as of the time when the snapshot was taken.</p>
    public let snapshot: Snapshot?

    public init (
        snapshot: Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

struct CreateSnapshotOutputResponseBody: Equatable {
    public let snapshot: Snapshot?
}

extension CreateSnapshotOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case snapshot = "Snapshot"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("CreateSnapshotResult"))
        let snapshotDecoded = try containerValues.decodeIfPresent(Snapshot.self, forKey: .snapshot)
        snapshot = snapshotDecoded
    }
}

public struct CreateUserGroupInputBodyMiddleware: Middleware {
    public let id: String = "CreateUserGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateUserGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateUserGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateUserGroupInput>
    public typealias MOutput = OperationOutput<CreateUserGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateUserGroupOutputError>
}

extension CreateUserGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateUserGroupInput(engine: \(String(describing: engine)), tags: \(String(describing: tags)), userGroupId: \(String(describing: userGroupId)), userIds: \(String(describing: userIds)))"}
}

extension CreateUserGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        if let userGroupId = userGroupId {
            try container.encode(userGroupId, forKey: Key("UserGroupId"))
        }
        if let userIds = userIds {
            var userIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserIds"))
            for (index0, userid0) in userIds.enumerated() {
                try userIdsContainer.encode(userid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateUserGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct CreateUserGroupInputHeadersMiddleware: Middleware {
    public let id: String = "CreateUserGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateUserGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateUserGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateUserGroupInput>
    public typealias MOutput = OperationOutput<CreateUserGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateUserGroupOutputError>
}

public struct CreateUserGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateUserGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateUserGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateUserGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateUserGroupInput>
    public typealias MOutput = OperationOutput<CreateUserGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateUserGroupOutputError>
}

public struct CreateUserGroupInput: Equatable {
    /// <p>The current supported value is Redis. </p>
    public let engine: String?
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    public let tags: [Tag]?
    /// <p>The ID of the user group.</p>
    public let userGroupId: String?
    /// <p>The list of user IDs that belong to the user group.</p>
    public let userIds: [String]?

    public init (
        engine: String? = nil,
        tags: [Tag]? = nil,
        userGroupId: String? = nil,
        userIds: [String]? = nil
    )
    {
        self.engine = engine
        self.tags = tags
        self.userGroupId = userGroupId
        self.userIds = userIds
    }
}

extension CreateUserGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateUserGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DefaultUserRequired" : self = .defaultUserRequired(try DefaultUserRequired(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateUserNameFault" : self = .duplicateUserNameFault(try DuplicateUserNameFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupAlreadyExistsFault" : self = .userGroupAlreadyExistsFault(try UserGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupQuotaExceededFault" : self = .userGroupQuotaExceededFault(try UserGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundFault" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateUserGroupOutputError: Equatable {
    case defaultUserRequired(DefaultUserRequired)
    case duplicateUserNameFault(DuplicateUserNameFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case userGroupAlreadyExistsFault(UserGroupAlreadyExistsFault)
    case userGroupQuotaExceededFault(UserGroupQuotaExceededFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateUserGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateUserGroupOutputResponse(aRN: \(String(describing: aRN)), engine: \(String(describing: engine)), pendingChanges: \(String(describing: pendingChanges)), replicationGroups: \(String(describing: replicationGroups)), status: \(String(describing: status)), userGroupId: \(String(describing: userGroupId)), userIds: \(String(describing: userIds)))"}
}

extension CreateUserGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateUserGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.aRN = output.aRN
            self.engine = output.engine
            self.pendingChanges = output.pendingChanges
            self.replicationGroups = output.replicationGroups
            self.status = output.status
            self.userGroupId = output.userGroupId
            self.userIds = output.userIds
        } else {
            self.aRN = nil
            self.engine = nil
            self.pendingChanges = nil
            self.replicationGroups = nil
            self.status = nil
            self.userGroupId = nil
            self.userIds = nil
        }
    }
}

public struct CreateUserGroupOutputResponse: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the user group.</p>
    public let aRN: String?
    /// <p>The current supported value is Redis. </p>
    public let engine: String?
    /// <p>A list of updates being applied to the user groups.</p>
    public let pendingChanges: UserGroupPendingChanges?
    /// <p>A list of replication groups that the user group can access.</p>
    public let replicationGroups: [String]?
    /// <p>Indicates user group status. Can be "creating", "active", "modifying", "deleting".</p>
    public let status: String?
    /// <p>The ID of the user group.</p>
    public let userGroupId: String?
    /// <p>The list of user IDs that belong to the user group.</p>
    public let userIds: [String]?

    public init (
        aRN: String? = nil,
        engine: String? = nil,
        pendingChanges: UserGroupPendingChanges? = nil,
        replicationGroups: [String]? = nil,
        status: String? = nil,
        userGroupId: String? = nil,
        userIds: [String]? = nil
    )
    {
        self.aRN = aRN
        self.engine = engine
        self.pendingChanges = pendingChanges
        self.replicationGroups = replicationGroups
        self.status = status
        self.userGroupId = userGroupId
        self.userIds = userIds
    }
}

struct CreateUserGroupOutputResponseBody: Equatable {
    public let userGroupId: String?
    public let status: String?
    public let engine: String?
    public let userIds: [String]?
    public let pendingChanges: UserGroupPendingChanges?
    public let replicationGroups: [String]?
    public let aRN: String?
}

extension CreateUserGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case engine = "Engine"
        case pendingChanges = "PendingChanges"
        case replicationGroups = "ReplicationGroups"
        case status = "Status"
        case userGroupId = "UserGroupId"
        case userIds = "UserIds"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("CreateUserGroupResult"))
        let userGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userGroupId)
        userGroupId = userGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        if containerValues.contains(.userIds) {
            struct KeyVal0{struct member{}}
            let userIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIds)
            if let userIdsWrappedContainer = userIdsWrappedContainer {
                let userIdsContainer = try userIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userIdsBuffer:[String]? = nil
                if let userIdsContainer = userIdsContainer {
                    userIdsBuffer = [String]()
                    for stringContainer0 in userIdsContainer {
                        userIdsBuffer?.append(stringContainer0)
                    }
                }
                userIds = userIdsBuffer
            } else {
                userIds = []
            }
        } else {
            userIds = nil
        }
        let pendingChangesDecoded = try containerValues.decodeIfPresent(UserGroupPendingChanges.self, forKey: .pendingChanges)
        pendingChanges = pendingChangesDecoded
        if containerValues.contains(.replicationGroups) {
            struct KeyVal0{struct member{}}
            let replicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replicationGroups)
            if let replicationGroupsWrappedContainer = replicationGroupsWrappedContainer {
                let replicationGroupsContainer = try replicationGroupsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var replicationGroupsBuffer:[String]? = nil
                if let replicationGroupsContainer = replicationGroupsContainer {
                    replicationGroupsBuffer = [String]()
                    for stringContainer0 in replicationGroupsContainer {
                        replicationGroupsBuffer?.append(stringContainer0)
                    }
                }
                replicationGroups = replicationGroupsBuffer
            } else {
                replicationGroups = []
            }
        } else {
            replicationGroups = nil
        }
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

public struct CreateUserInputBodyMiddleware: Middleware {
    public let id: String = "CreateUserInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateUserInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateUserInput>
    public typealias MOutput = OperationOutput<CreateUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateUserOutputError>
}

extension CreateUserInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateUserInput(accessString: \(String(describing: accessString)), engine: \(String(describing: engine)), noPasswordRequired: \(String(describing: noPasswordRequired)), passwords: \(String(describing: passwords)), tags: \(String(describing: tags)), userId: \(String(describing: userId)), userName: \(String(describing: userName)))"}
}

extension CreateUserInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let accessString = accessString {
            try container.encode(accessString, forKey: Key("AccessString"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let noPasswordRequired = noPasswordRequired {
            try container.encode(noPasswordRequired, forKey: Key("NoPasswordRequired"))
        }
        if let passwords = passwords {
            var passwordsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Passwords"))
            for (index0, string0) in passwords.enumerated() {
                try passwordsContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        if let userId = userId {
            try container.encode(userId, forKey: Key("UserId"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: Key("UserName"))
        }
        try container.encode("CreateUser", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct CreateUserInputHeadersMiddleware: Middleware {
    public let id: String = "CreateUserInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateUserInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateUserInput>
    public typealias MOutput = OperationOutput<CreateUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateUserOutputError>
}

public struct CreateUserInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateUserInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateUserInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateUserInput>
    public typealias MOutput = OperationOutput<CreateUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateUserOutputError>
}

public struct CreateUserInput: Equatable {
    /// <p>Access permissions string used for this user.</p>
    public let accessString: String?
    /// <p>The current supported value is Redis. </p>
    public let engine: String?
    /// <p>Indicates a password is not required for this user.</p>
    public let noPasswordRequired: Bool?
    /// <p>Passwords used for this user. You can create up to two passwords for each user.</p>
    public let passwords: [String]?
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    public let tags: [Tag]?
    /// <p>The ID of the user.</p>
    public let userId: String?
    /// <p>The username of the user.</p>
    public let userName: String?

    public init (
        accessString: String? = nil,
        engine: String? = nil,
        noPasswordRequired: Bool? = nil,
        passwords: [String]? = nil,
        tags: [Tag]? = nil,
        userId: String? = nil,
        userName: String? = nil
    )
    {
        self.accessString = accessString
        self.engine = engine
        self.noPasswordRequired = noPasswordRequired
        self.passwords = passwords
        self.tags = tags
        self.userId = userId
        self.userName = userName
    }
}

extension CreateUserOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateUserOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DuplicateUserNameFault" : self = .duplicateUserNameFault(try DuplicateUserNameFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserAlreadyExistsFault" : self = .userAlreadyExistsFault(try UserAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserQuotaExceededFault" : self = .userQuotaExceededFault(try UserQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateUserOutputError: Equatable {
    case duplicateUserNameFault(DuplicateUserNameFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case userAlreadyExistsFault(UserAlreadyExistsFault)
    case userQuotaExceededFault(UserQuotaExceededFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateUserOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateUserOutputResponse(aRN: \(String(describing: aRN)), accessString: \(String(describing: accessString)), authentication: \(String(describing: authentication)), engine: \(String(describing: engine)), status: \(String(describing: status)), userGroupIds: \(String(describing: userGroupIds)), userId: \(String(describing: userId)), userName: \(String(describing: userName)))"}
}

extension CreateUserOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateUserOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.aRN = output.aRN
            self.accessString = output.accessString
            self.authentication = output.authentication
            self.engine = output.engine
            self.status = output.status
            self.userGroupIds = output.userGroupIds
            self.userId = output.userId
            self.userName = output.userName
        } else {
            self.aRN = nil
            self.accessString = nil
            self.authentication = nil
            self.engine = nil
            self.status = nil
            self.userGroupIds = nil
            self.userId = nil
            self.userName = nil
        }
    }
}

public struct CreateUserOutputResponse: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the user.</p>
    public let aRN: String?
    /// <p>Access permissions string used for this user.</p>
    public let accessString: String?
    /// <p>Denotes whether the user requires a password to authenticate.</p>
    public let authentication: Authentication?
    /// <p>The current supported value is Redis.</p>
    public let engine: String?
    /// <p>Indicates the user status. Can be "active", "modifying" or "deleting".</p>
    public let status: String?
    /// <p>Returns a list of the user group IDs the user belongs to.</p>
    public let userGroupIds: [String]?
    /// <p>The ID of the user.</p>
    public let userId: String?
    /// <p>The username of the user.</p>
    public let userName: String?

    public init (
        aRN: String? = nil,
        accessString: String? = nil,
        authentication: Authentication? = nil,
        engine: String? = nil,
        status: String? = nil,
        userGroupIds: [String]? = nil,
        userId: String? = nil,
        userName: String? = nil
    )
    {
        self.aRN = aRN
        self.accessString = accessString
        self.authentication = authentication
        self.engine = engine
        self.status = status
        self.userGroupIds = userGroupIds
        self.userId = userId
        self.userName = userName
    }
}

struct CreateUserOutputResponseBody: Equatable {
    public let userId: String?
    public let userName: String?
    public let status: String?
    public let engine: String?
    public let accessString: String?
    public let userGroupIds: [String]?
    public let authentication: Authentication?
    public let aRN: String?
}

extension CreateUserOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case accessString = "AccessString"
        case authentication = "Authentication"
        case engine = "Engine"
        case status = "Status"
        case userGroupIds = "UserGroupIds"
        case userId = "UserId"
        case userName = "UserName"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("CreateUserResult"))
        let userIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userId)
        userId = userIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userName)
        userName = userNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let accessStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accessString)
        accessString = accessStringDecoded
        if containerValues.contains(.userGroupIds) {
            struct KeyVal0{struct member{}}
            let userGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIds)
            if let userGroupIdsWrappedContainer = userGroupIdsWrappedContainer {
                let userGroupIdsContainer = try userGroupIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userGroupIdsBuffer:[String]? = nil
                if let userGroupIdsContainer = userGroupIdsContainer {
                    userGroupIdsBuffer = [String]()
                    for stringContainer0 in userGroupIdsContainer {
                        userGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                userGroupIds = userGroupIdsBuffer
            } else {
                userGroupIds = []
            }
        } else {
            userGroupIds = nil
        }
        let authenticationDecoded = try containerValues.decodeIfPresent(Authentication.self, forKey: .authentication)
        authentication = authenticationDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension CustomerNodeEndpoint: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case address = "Address"
        case port = "Port"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let address = address {
            try container.encode(address, forKey: Key("Address"))
        }
        if let port = port {
            try container.encode(port, forKey: Key("Port"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .address)
        address = addressDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
    }
}

extension CustomerNodeEndpoint: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CustomerNodeEndpoint(address: \(String(describing: address)), port: \(String(describing: port)))"}
}

/// <p>The endpoint from which data should be migrated.</p>
public struct CustomerNodeEndpoint: Equatable {
    /// <p>The address of the node endpoint</p>
    public let address: String?
    /// <p>The port of the node endpoint</p>
    public let port: Int?

    public init (
        address: String? = nil,
        port: Int? = nil
    )
    {
        self.address = address
        self.port = port
    }
}

public struct DecreaseNodeGroupsInGlobalReplicationGroupInputBodyMiddleware: Middleware {
    public let id: String = "DecreaseNodeGroupsInGlobalReplicationGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DecreaseNodeGroupsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DecreaseNodeGroupsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DecreaseNodeGroupsInGlobalReplicationGroupOutputError>
}

extension DecreaseNodeGroupsInGlobalReplicationGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DecreaseNodeGroupsInGlobalReplicationGroupInput(applyImmediately: \(String(describing: applyImmediately)), globalNodeGroupsToRemove: \(String(describing: globalNodeGroupsToRemove)), globalNodeGroupsToRetain: \(String(describing: globalNodeGroupsToRetain)), globalReplicationGroupId: \(String(describing: globalReplicationGroupId)), nodeGroupCount: \(String(describing: nodeGroupCount)))"}
}

extension DecreaseNodeGroupsInGlobalReplicationGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: Key("ApplyImmediately"))
        }
        if let globalNodeGroupsToRemove = globalNodeGroupsToRemove {
            var globalNodeGroupsToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("GlobalNodeGroupsToRemove"))
            for (index0, string0) in globalNodeGroupsToRemove.enumerated() {
                try globalNodeGroupsToRemoveContainer.encode(string0, forKey: Key("GlobalNodeGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let globalNodeGroupsToRetain = globalNodeGroupsToRetain {
            var globalNodeGroupsToRetainContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("GlobalNodeGroupsToRetain"))
            for (index0, string0) in globalNodeGroupsToRetain.enumerated() {
                try globalNodeGroupsToRetainContainer.encode(string0, forKey: Key("GlobalNodeGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: Key("GlobalReplicationGroupId"))
        }
        if nodeGroupCount != 0 {
            try container.encode(nodeGroupCount, forKey: Key("NodeGroupCount"))
        }
        try container.encode("DecreaseNodeGroupsInGlobalReplicationGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DecreaseNodeGroupsInGlobalReplicationGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DecreaseNodeGroupsInGlobalReplicationGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DecreaseNodeGroupsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DecreaseNodeGroupsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DecreaseNodeGroupsInGlobalReplicationGroupOutputError>
}

public struct DecreaseNodeGroupsInGlobalReplicationGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DecreaseNodeGroupsInGlobalReplicationGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DecreaseNodeGroupsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DecreaseNodeGroupsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DecreaseNodeGroupsInGlobalReplicationGroupOutputError>
}

public struct DecreaseNodeGroupsInGlobalReplicationGroupInput: Equatable {
    /// <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is true. </p>
    public let applyImmediately: Bool
    /// <p>If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRemove is a list of NodeGroupIds to remove from the cluster.
    ///
    ///             ElastiCache for Redis will attempt to remove all node groups listed by GlobalNodeGroupsToRemove from the cluster. </p>
    public let globalNodeGroupsToRemove: [String]?
    /// <p>If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRetain is a list of NodeGroupIds to retain from the cluster. ElastiCache for Redis will attempt to retain all node groups listed by GlobalNodeGroupsToRetain from the cluster.
    ///
    ///
    ///              </p>
    public let globalNodeGroupsToRetain: [String]?
    /// <p>The name of the Global datastore</p>
    public let globalReplicationGroupId: String?
    /// <p>The number of node groups (shards) that results from the modification of the shard configuration</p>
    public let nodeGroupCount: Int

    public init (
        applyImmediately: Bool = false,
        globalNodeGroupsToRemove: [String]? = nil,
        globalNodeGroupsToRetain: [String]? = nil,
        globalReplicationGroupId: String? = nil,
        nodeGroupCount: Int = 0
    )
    {
        self.applyImmediately = applyImmediately
        self.globalNodeGroupsToRemove = globalNodeGroupsToRemove
        self.globalNodeGroupsToRetain = globalNodeGroupsToRetain
        self.globalReplicationGroupId = globalReplicationGroupId
        self.nodeGroupCount = nodeGroupCount
    }
}

extension DecreaseNodeGroupsInGlobalReplicationGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DecreaseNodeGroupsInGlobalReplicationGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupStateFault" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DecreaseNodeGroupsInGlobalReplicationGroupOutputError: Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse(globalReplicationGroup: \(String(describing: globalReplicationGroup)))"}
}

extension DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DecreaseNodeGroupsInGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse: Equatable {
    /// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different AWS region. The secondary cluster accepts only reads. The primary
    ///         cluster automatically replicates updates to the secondary cluster.</p>
    ///
    ///
    ///         <ul>
    ///             <li>
    ///                <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore,
    ///             which is what you use to associate a secondary cluster.</p>
    ///             </li>
    ///          </ul>
    public let globalReplicationGroup: GlobalReplicationGroup?

    public init (
        globalReplicationGroup: GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct DecreaseNodeGroupsInGlobalReplicationGroupOutputResponseBody: Equatable {
    public let globalReplicationGroup: GlobalReplicationGroup?
}

extension DecreaseNodeGroupsInGlobalReplicationGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DecreaseNodeGroupsInGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

public struct DecreaseReplicaCountInputBodyMiddleware: Middleware {
    public let id: String = "DecreaseReplicaCountInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DecreaseReplicaCountInput>,
                  next: H) -> Swift.Result<OperationOutput<DecreaseReplicaCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DecreaseReplicaCountInput>
    public typealias MOutput = OperationOutput<DecreaseReplicaCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DecreaseReplicaCountOutputError>
}

extension DecreaseReplicaCountInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DecreaseReplicaCountInput(applyImmediately: \(String(describing: applyImmediately)), newReplicaCount: \(String(describing: newReplicaCount)), replicaConfiguration: \(String(describing: replicaConfiguration)), replicasToRemove: \(String(describing: replicasToRemove)), replicationGroupId: \(String(describing: replicationGroupId)))"}
}

extension DecreaseReplicaCountInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: Key("ApplyImmediately"))
        }
        if let newReplicaCount = newReplicaCount {
            try container.encode(newReplicaCount, forKey: Key("NewReplicaCount"))
        }
        if let replicaConfiguration = replicaConfiguration {
            var replicaConfigurationContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReplicaConfiguration"))
            for (index0, configureshard0) in replicaConfiguration.enumerated() {
                try replicaConfigurationContainer.encode(configureshard0, forKey: Key("ConfigureShard.\(index0.advanced(by: 1))"))
            }
        }
        if let replicasToRemove = replicasToRemove {
            var replicasToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReplicasToRemove"))
            for (index0, string0) in replicasToRemove.enumerated() {
                try replicasToRemoveContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        try container.encode("DecreaseReplicaCount", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DecreaseReplicaCountInputHeadersMiddleware: Middleware {
    public let id: String = "DecreaseReplicaCountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DecreaseReplicaCountInput>,
                  next: H) -> Swift.Result<OperationOutput<DecreaseReplicaCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DecreaseReplicaCountInput>
    public typealias MOutput = OperationOutput<DecreaseReplicaCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DecreaseReplicaCountOutputError>
}

public struct DecreaseReplicaCountInputQueryItemMiddleware: Middleware {
    public let id: String = "DecreaseReplicaCountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DecreaseReplicaCountInput>,
                  next: H) -> Swift.Result<OperationOutput<DecreaseReplicaCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DecreaseReplicaCountInput>
    public typealias MOutput = OperationOutput<DecreaseReplicaCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DecreaseReplicaCountOutputError>
}

public struct DecreaseReplicaCountInput: Equatable {
    /// <p>If <code>True</code>, the number of replica nodes is decreased immediately.
    ///
    ///             <code>ApplyImmediately=False</code> is not currently supported.</p>
    public let applyImmediately: Bool
    /// <p>The number of read replica nodes you want at the completion of this operation.
    ///             For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the
    ///             replication group. For Redis (cluster mode enabled) replication groups, this is the number of
    ///             replica nodes in each of the replication group's node groups.</p>
    ///         <p>The minimum number of replicas in a shard or replication group is:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Redis (cluster mode disabled)</p>
    ///                 <ul>
    ///                   <li>
    ///                         <p>If Multi-AZ is enabled: 1</p>
    ///                   </li>
    ///                   <li>
    ///                         <p>If Multi-AZ is not enabled: 0</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                 <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p>
    ///             </li>
    ///          </ul>
    public let newReplicaCount: Int?
    /// <p>A list of <code>ConfigureShard</code> objects that can be used to configure each shard
    ///             in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members:
    ///             <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.</p>
    public let replicaConfiguration: [ConfigureShard]?
    /// <p>A list of the node ids to remove from the replication group or node group (shard).</p>
    public let replicasToRemove: [String]?
    /// <p>The id of the replication group from which you want to remove replica nodes.</p>
    public let replicationGroupId: String?

    public init (
        applyImmediately: Bool = false,
        newReplicaCount: Int? = nil,
        replicaConfiguration: [ConfigureShard]? = nil,
        replicasToRemove: [String]? = nil,
        replicationGroupId: String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.newReplicaCount = newReplicaCount
        self.replicaConfiguration = replicaConfiguration
        self.replicasToRemove = replicasToRemove
        self.replicationGroupId = replicationGroupId
    }
}

extension DecreaseReplicaCountOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DecreaseReplicaCountOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClusterQuotaForCustomerExceededFault" : self = .clusterQuotaForCustomerExceededFault(try ClusterQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCacheClusterCapacityFault" : self = .insufficientCacheClusterCapacityFault(try InsufficientCacheClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterStateFault" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupStateFault" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCNetworkStateFault" : self = .invalidVPCNetworkStateFault(try InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeGroupsPerReplicationGroupQuotaExceededFault" : self = .nodeGroupsPerReplicationGroupQuotaExceededFault(try NodeGroupsPerReplicationGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForCustomerExceededFault" : self = .nodeQuotaForCustomerExceededFault(try NodeQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoOperationFault" : self = .noOperationFault(try NoOperationFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleNotFoundFault" : self = .serviceLinkedRoleNotFoundFault(try ServiceLinkedRoleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DecreaseReplicaCountOutputError: Equatable {
    case clusterQuotaForCustomerExceededFault(ClusterQuotaForCustomerExceededFault)
    case insufficientCacheClusterCapacityFault(InsufficientCacheClusterCapacityFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case invalidVPCNetworkStateFault(InvalidVPCNetworkStateFault)
    case nodeGroupsPerReplicationGroupQuotaExceededFault(NodeGroupsPerReplicationGroupQuotaExceededFault)
    case nodeQuotaForCustomerExceededFault(NodeQuotaForCustomerExceededFault)
    case noOperationFault(NoOperationFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case serviceLinkedRoleNotFoundFault(ServiceLinkedRoleNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DecreaseReplicaCountOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DecreaseReplicaCountOutputResponse(replicationGroup: \(String(describing: replicationGroup)))"}
}

extension DecreaseReplicaCountOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DecreaseReplicaCountOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct DecreaseReplicaCountOutputResponse: Equatable {
    /// <p>Contains all of the attributes of a specific Redis replication group.</p>
    public let replicationGroup: ReplicationGroup?

    public init (
        replicationGroup: ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct DecreaseReplicaCountOutputResponseBody: Equatable {
    public let replicationGroup: ReplicationGroup?
}

extension DecreaseReplicaCountOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DecreaseReplicaCountResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

extension DefaultUserAssociatedToUserGroupFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DefaultUserAssociatedToUserGroupFault(message: \(String(describing: message)))"}
}

extension DefaultUserAssociatedToUserGroupFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<DefaultUserAssociatedToUserGroupFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p></p>
public struct DefaultUserAssociatedToUserGroupFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DefaultUserAssociatedToUserGroupFaultBody: Equatable {
    public let message: String?
}

extension DefaultUserAssociatedToUserGroupFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DefaultUserRequired: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DefaultUserRequired(message: \(String(describing: message)))"}
}

extension DefaultUserRequired: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<DefaultUserRequiredBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You must add default user to a user group.</p>
public struct DefaultUserRequired: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DefaultUserRequiredBody: Equatable {
    public let message: String?
}

extension DefaultUserRequiredBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct DeleteCacheClusterInputBodyMiddleware: Middleware {
    public let id: String = "DeleteCacheClusterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteCacheClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteCacheClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteCacheClusterInput>
    public typealias MOutput = OperationOutput<DeleteCacheClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteCacheClusterOutputError>
}

extension DeleteCacheClusterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteCacheClusterInput(cacheClusterId: \(String(describing: cacheClusterId)), finalSnapshotIdentifier: \(String(describing: finalSnapshotIdentifier)))"}
}

extension DeleteCacheClusterInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let finalSnapshotIdentifier = finalSnapshotIdentifier {
            try container.encode(finalSnapshotIdentifier, forKey: Key("FinalSnapshotIdentifier"))
        }
        try container.encode("DeleteCacheCluster", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DeleteCacheClusterInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteCacheClusterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteCacheClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteCacheClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteCacheClusterInput>
    public typealias MOutput = OperationOutput<DeleteCacheClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteCacheClusterOutputError>
}

public struct DeleteCacheClusterInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteCacheClusterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteCacheClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteCacheClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteCacheClusterInput>
    public typealias MOutput = OperationOutput<DeleteCacheClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteCacheClusterOutputError>
}

/// <p>Represents the input of a <code>DeleteCacheCluster</code> operation.</p>
public struct DeleteCacheClusterInput: Equatable {
    /// <p>The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.</p>
    public let cacheClusterId: String?
    /// <p>The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot.
    ///             ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.</p>
    public let finalSnapshotIdentifier: String?

    public init (
        cacheClusterId: String? = nil,
        finalSnapshotIdentifier: String? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.finalSnapshotIdentifier = finalSnapshotIdentifier
    }
}

extension DeleteCacheClusterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteCacheClusterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFoundFault" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterStateFault" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotAlreadyExistsFault" : self = .snapshotAlreadyExistsFault(try SnapshotAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotFeatureNotSupportedFault" : self = .snapshotFeatureNotSupportedFault(try SnapshotFeatureNotSupportedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotQuotaExceededFault" : self = .snapshotQuotaExceededFault(try SnapshotQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCacheClusterOutputError: Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case snapshotAlreadyExistsFault(SnapshotAlreadyExistsFault)
    case snapshotFeatureNotSupportedFault(SnapshotFeatureNotSupportedFault)
    case snapshotQuotaExceededFault(SnapshotQuotaExceededFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCacheClusterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteCacheClusterOutputResponse(cacheCluster: \(String(describing: cacheCluster)))"}
}

extension DeleteCacheClusterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteCacheClusterOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheCluster = output.cacheCluster
        } else {
            self.cacheCluster = nil
        }
    }
}

public struct DeleteCacheClusterOutputResponse: Equatable {
    /// <p>Contains all of the attributes of a specific cluster.</p>
    public let cacheCluster: CacheCluster?

    public init (
        cacheCluster: CacheCluster? = nil
    )
    {
        self.cacheCluster = cacheCluster
    }
}

struct DeleteCacheClusterOutputResponseBody: Equatable {
    public let cacheCluster: CacheCluster?
}

extension DeleteCacheClusterOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheCluster = "CacheCluster"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DeleteCacheClusterResult"))
        let cacheClusterDecoded = try containerValues.decodeIfPresent(CacheCluster.self, forKey: .cacheCluster)
        cacheCluster = cacheClusterDecoded
    }
}

public struct DeleteCacheParameterGroupInputBodyMiddleware: Middleware {
    public let id: String = "DeleteCacheParameterGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteCacheParameterGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteCacheParameterGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteCacheParameterGroupInput>
    public typealias MOutput = OperationOutput<DeleteCacheParameterGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteCacheParameterGroupOutputError>
}

extension DeleteCacheParameterGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteCacheParameterGroupInput(cacheParameterGroupName: \(String(describing: cacheParameterGroupName)))"}
}

extension DeleteCacheParameterGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        try container.encode("DeleteCacheParameterGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DeleteCacheParameterGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteCacheParameterGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteCacheParameterGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteCacheParameterGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteCacheParameterGroupInput>
    public typealias MOutput = OperationOutput<DeleteCacheParameterGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteCacheParameterGroupOutputError>
}

public struct DeleteCacheParameterGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteCacheParameterGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteCacheParameterGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteCacheParameterGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteCacheParameterGroupInput>
    public typealias MOutput = OperationOutput<DeleteCacheParameterGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteCacheParameterGroupOutputError>
}

/// <p>Represents the input of a <code>DeleteCacheParameterGroup</code> operation.</p>
public struct DeleteCacheParameterGroupInput: Equatable {
    /// <p>The name of the cache parameter group to delete.</p>
    ///         <note>
    ///             <p>The specified cache security group must not be associated with any clusters.</p>
    ///          </note>
    public let cacheParameterGroupName: String?

    public init (
        cacheParameterGroupName: String? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
    }
}

extension DeleteCacheParameterGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteCacheParameterGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheParameterGroupNotFoundFault" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheParameterGroupStateFault" : self = .invalidCacheParameterGroupStateFault(try InvalidCacheParameterGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCacheParameterGroupOutputError: Equatable {
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case invalidCacheParameterGroupStateFault(InvalidCacheParameterGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCacheParameterGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteCacheParameterGroupOutputResponse()"}
}

extension DeleteCacheParameterGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCacheParameterGroupOutputResponse: Equatable {

    public init() {}
}

struct DeleteCacheParameterGroupOutputResponseBody: Equatable {
}

extension DeleteCacheParameterGroupOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteCacheSecurityGroupInputBodyMiddleware: Middleware {
    public let id: String = "DeleteCacheSecurityGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteCacheSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteCacheSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteCacheSecurityGroupInput>
    public typealias MOutput = OperationOutput<DeleteCacheSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteCacheSecurityGroupOutputError>
}

extension DeleteCacheSecurityGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteCacheSecurityGroupInput(cacheSecurityGroupName: \(String(describing: cacheSecurityGroupName)))"}
}

extension DeleteCacheSecurityGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheSecurityGroupName = cacheSecurityGroupName {
            try container.encode(cacheSecurityGroupName, forKey: Key("CacheSecurityGroupName"))
        }
        try container.encode("DeleteCacheSecurityGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DeleteCacheSecurityGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteCacheSecurityGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteCacheSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteCacheSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteCacheSecurityGroupInput>
    public typealias MOutput = OperationOutput<DeleteCacheSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteCacheSecurityGroupOutputError>
}

public struct DeleteCacheSecurityGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteCacheSecurityGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteCacheSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteCacheSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteCacheSecurityGroupInput>
    public typealias MOutput = OperationOutput<DeleteCacheSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteCacheSecurityGroupOutputError>
}

/// <p>Represents the input of a <code>DeleteCacheSecurityGroup</code> operation.</p>
public struct DeleteCacheSecurityGroupInput: Equatable {
    /// <p>The name of the cache security group to delete.</p>
    ///         <note>
    ///             <p>You cannot delete the default security group.</p>
    ///          </note>
    public let cacheSecurityGroupName: String?

    public init (
        cacheSecurityGroupName: String? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
    }
}

extension DeleteCacheSecurityGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteCacheSecurityGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheSecurityGroupNotFoundFault" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheSecurityGroupStateFault" : self = .invalidCacheSecurityGroupStateFault(try InvalidCacheSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCacheSecurityGroupOutputError: Equatable {
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case invalidCacheSecurityGroupStateFault(InvalidCacheSecurityGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCacheSecurityGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteCacheSecurityGroupOutputResponse()"}
}

extension DeleteCacheSecurityGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCacheSecurityGroupOutputResponse: Equatable {

    public init() {}
}

struct DeleteCacheSecurityGroupOutputResponseBody: Equatable {
}

extension DeleteCacheSecurityGroupOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteCacheSubnetGroupInputBodyMiddleware: Middleware {
    public let id: String = "DeleteCacheSubnetGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteCacheSubnetGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteCacheSubnetGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteCacheSubnetGroupInput>
    public typealias MOutput = OperationOutput<DeleteCacheSubnetGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteCacheSubnetGroupOutputError>
}

extension DeleteCacheSubnetGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteCacheSubnetGroupInput(cacheSubnetGroupName: \(String(describing: cacheSubnetGroupName)))"}
}

extension DeleteCacheSubnetGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: Key("CacheSubnetGroupName"))
        }
        try container.encode("DeleteCacheSubnetGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DeleteCacheSubnetGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteCacheSubnetGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteCacheSubnetGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteCacheSubnetGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteCacheSubnetGroupInput>
    public typealias MOutput = OperationOutput<DeleteCacheSubnetGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteCacheSubnetGroupOutputError>
}

public struct DeleteCacheSubnetGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteCacheSubnetGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteCacheSubnetGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteCacheSubnetGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteCacheSubnetGroupInput>
    public typealias MOutput = OperationOutput<DeleteCacheSubnetGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteCacheSubnetGroupOutputError>
}

/// <p>Represents the input of a <code>DeleteCacheSubnetGroup</code> operation.</p>
public struct DeleteCacheSubnetGroupInput: Equatable {
    /// <p>The name of the cache subnet group to delete.</p>
    ///         <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
    public let cacheSubnetGroupName: String?

    public init (
        cacheSubnetGroupName: String? = nil
    )
    {
        self.cacheSubnetGroupName = cacheSubnetGroupName
    }
}

extension DeleteCacheSubnetGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteCacheSubnetGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheSubnetGroupInUse" : self = .cacheSubnetGroupInUse(try CacheSubnetGroupInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCacheSubnetGroupOutputError: Equatable {
    case cacheSubnetGroupInUse(CacheSubnetGroupInUse)
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCacheSubnetGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteCacheSubnetGroupOutputResponse()"}
}

extension DeleteCacheSubnetGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCacheSubnetGroupOutputResponse: Equatable {

    public init() {}
}

struct DeleteCacheSubnetGroupOutputResponseBody: Equatable {
}

extension DeleteCacheSubnetGroupOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteGlobalReplicationGroupInputBodyMiddleware: Middleware {
    public let id: String = "DeleteGlobalReplicationGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<DeleteGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteGlobalReplicationGroupOutputError>
}

extension DeleteGlobalReplicationGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteGlobalReplicationGroupInput(globalReplicationGroupId: \(String(describing: globalReplicationGroupId)), retainPrimaryReplicationGroup: \(String(describing: retainPrimaryReplicationGroup)))"}
}

extension DeleteGlobalReplicationGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: Key("GlobalReplicationGroupId"))
        }
        if retainPrimaryReplicationGroup != false {
            try container.encode(retainPrimaryReplicationGroup, forKey: Key("RetainPrimaryReplicationGroup"))
        }
        try container.encode("DeleteGlobalReplicationGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DeleteGlobalReplicationGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteGlobalReplicationGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<DeleteGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteGlobalReplicationGroupOutputError>
}

public struct DeleteGlobalReplicationGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteGlobalReplicationGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<DeleteGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteGlobalReplicationGroupOutputError>
}

public struct DeleteGlobalReplicationGroupInput: Equatable {
    /// <p>The name of the Global datastore</p>
    public let globalReplicationGroupId: String?
    /// <p>The primary replication group is retained as a standalone replication group. </p>
    public let retainPrimaryReplicationGroup: Bool

    public init (
        globalReplicationGroupId: String? = nil,
        retainPrimaryReplicationGroup: Bool = false
    )
    {
        self.globalReplicationGroupId = globalReplicationGroupId
        self.retainPrimaryReplicationGroup = retainPrimaryReplicationGroup
    }
}

extension DeleteGlobalReplicationGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteGlobalReplicationGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupStateFault" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteGlobalReplicationGroupOutputError: Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGlobalReplicationGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteGlobalReplicationGroupOutputResponse(globalReplicationGroup: \(String(describing: globalReplicationGroup)))"}
}

extension DeleteGlobalReplicationGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct DeleteGlobalReplicationGroupOutputResponse: Equatable {
    /// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different AWS region. The secondary cluster accepts only reads. The primary
    ///         cluster automatically replicates updates to the secondary cluster.</p>
    ///
    ///
    ///         <ul>
    ///             <li>
    ///                <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore,
    ///             which is what you use to associate a secondary cluster.</p>
    ///             </li>
    ///          </ul>
    public let globalReplicationGroup: GlobalReplicationGroup?

    public init (
        globalReplicationGroup: GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct DeleteGlobalReplicationGroupOutputResponseBody: Equatable {
    public let globalReplicationGroup: GlobalReplicationGroup?
}

extension DeleteGlobalReplicationGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DeleteGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

public struct DeleteReplicationGroupInputBodyMiddleware: Middleware {
    public let id: String = "DeleteReplicationGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteReplicationGroupInput>
    public typealias MOutput = OperationOutput<DeleteReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteReplicationGroupOutputError>
}

extension DeleteReplicationGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteReplicationGroupInput(finalSnapshotIdentifier: \(String(describing: finalSnapshotIdentifier)), replicationGroupId: \(String(describing: replicationGroupId)), retainPrimaryCluster: \(String(describing: retainPrimaryCluster)))"}
}

extension DeleteReplicationGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let finalSnapshotIdentifier = finalSnapshotIdentifier {
            try container.encode(finalSnapshotIdentifier, forKey: Key("FinalSnapshotIdentifier"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let retainPrimaryCluster = retainPrimaryCluster {
            try container.encode(retainPrimaryCluster, forKey: Key("RetainPrimaryCluster"))
        }
        try container.encode("DeleteReplicationGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DeleteReplicationGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteReplicationGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteReplicationGroupInput>
    public typealias MOutput = OperationOutput<DeleteReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteReplicationGroupOutputError>
}

public struct DeleteReplicationGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteReplicationGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteReplicationGroupInput>
    public typealias MOutput = OperationOutput<DeleteReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteReplicationGroupOutputError>
}

/// <p>Represents the input of a <code>DeleteReplicationGroup</code> operation.</p>
public struct DeleteReplicationGroupInput: Equatable {
    /// <p>The name of a final node group (shard) snapshot.
    ///             ElastiCache creates the snapshot from the primary node in the cluster,
    ///             rather than one of the replicas; this is to ensure that it captures the freshest data.
    ///             After the final snapshot is taken, the replication group is immediately deleted.</p>
    public let finalSnapshotIdentifier: String?
    /// <p>The identifier for the cluster to be deleted. This parameter is not case sensitive.</p>
    public let replicationGroupId: String?
    /// <p>If set to <code>true</code>, all of the read replicas are deleted,
    ///             but the primary node is retained.</p>
    public let retainPrimaryCluster: Bool?

    public init (
        finalSnapshotIdentifier: String? = nil,
        replicationGroupId: String? = nil,
        retainPrimaryCluster: Bool? = nil
    )
    {
        self.finalSnapshotIdentifier = finalSnapshotIdentifier
        self.replicationGroupId = replicationGroupId
        self.retainPrimaryCluster = retainPrimaryCluster
    }
}

extension DeleteReplicationGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteReplicationGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupStateFault" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotAlreadyExistsFault" : self = .snapshotAlreadyExistsFault(try SnapshotAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotFeatureNotSupportedFault" : self = .snapshotFeatureNotSupportedFault(try SnapshotFeatureNotSupportedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotQuotaExceededFault" : self = .snapshotQuotaExceededFault(try SnapshotQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteReplicationGroupOutputError: Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case snapshotAlreadyExistsFault(SnapshotAlreadyExistsFault)
    case snapshotFeatureNotSupportedFault(SnapshotFeatureNotSupportedFault)
    case snapshotQuotaExceededFault(SnapshotQuotaExceededFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteReplicationGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteReplicationGroupOutputResponse(replicationGroup: \(String(describing: replicationGroup)))"}
}

extension DeleteReplicationGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct DeleteReplicationGroupOutputResponse: Equatable {
    /// <p>Contains all of the attributes of a specific Redis replication group.</p>
    public let replicationGroup: ReplicationGroup?

    public init (
        replicationGroup: ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct DeleteReplicationGroupOutputResponseBody: Equatable {
    public let replicationGroup: ReplicationGroup?
}

extension DeleteReplicationGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DeleteReplicationGroupResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

public struct DeleteSnapshotInputBodyMiddleware: Middleware {
    public let id: String = "DeleteSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteSnapshotInput>
    public typealias MOutput = OperationOutput<DeleteSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteSnapshotOutputError>
}

extension DeleteSnapshotInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteSnapshotInput(snapshotName: \(String(describing: snapshotName)))"}
}

extension DeleteSnapshotInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let snapshotName = snapshotName {
            try container.encode(snapshotName, forKey: Key("SnapshotName"))
        }
        try container.encode("DeleteSnapshot", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DeleteSnapshotInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteSnapshotInput>
    public typealias MOutput = OperationOutput<DeleteSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteSnapshotOutputError>
}

public struct DeleteSnapshotInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteSnapshotInput>
    public typealias MOutput = OperationOutput<DeleteSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteSnapshotOutputError>
}

/// <p>Represents the input of a <code>DeleteSnapshot</code> operation.</p>
public struct DeleteSnapshotInput: Equatable {
    /// <p>The name of the snapshot to be deleted.</p>
    public let snapshotName: String?

    public init (
        snapshotName: String? = nil
    )
    {
        self.snapshotName = snapshotName
    }
}

extension DeleteSnapshotOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteSnapshotOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSnapshotStateFault" : self = .invalidSnapshotStateFault(try InvalidSnapshotStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFoundFault" : self = .snapshotNotFoundFault(try SnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSnapshotOutputError: Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidSnapshotStateFault(InvalidSnapshotStateFault)
    case snapshotNotFoundFault(SnapshotNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSnapshotOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteSnapshotOutputResponse(snapshot: \(String(describing: snapshot)))"}
}

extension DeleteSnapshotOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.snapshot = output.snapshot
        } else {
            self.snapshot = nil
        }
    }
}

public struct DeleteSnapshotOutputResponse: Equatable {
    /// <p>Represents a copy of an entire Redis cluster as of the time when the snapshot was taken.</p>
    public let snapshot: Snapshot?

    public init (
        snapshot: Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

struct DeleteSnapshotOutputResponseBody: Equatable {
    public let snapshot: Snapshot?
}

extension DeleteSnapshotOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case snapshot = "Snapshot"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DeleteSnapshotResult"))
        let snapshotDecoded = try containerValues.decodeIfPresent(Snapshot.self, forKey: .snapshot)
        snapshot = snapshotDecoded
    }
}

public struct DeleteUserGroupInputBodyMiddleware: Middleware {
    public let id: String = "DeleteUserGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteUserGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteUserGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteUserGroupInput>
    public typealias MOutput = OperationOutput<DeleteUserGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteUserGroupOutputError>
}

extension DeleteUserGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteUserGroupInput(userGroupId: \(String(describing: userGroupId)))"}
}

extension DeleteUserGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let userGroupId = userGroupId {
            try container.encode(userGroupId, forKey: Key("UserGroupId"))
        }
        try container.encode("DeleteUserGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DeleteUserGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteUserGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteUserGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteUserGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteUserGroupInput>
    public typealias MOutput = OperationOutput<DeleteUserGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteUserGroupOutputError>
}

public struct DeleteUserGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteUserGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteUserGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteUserGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteUserGroupInput>
    public typealias MOutput = OperationOutput<DeleteUserGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteUserGroupOutputError>
}

public struct DeleteUserGroupInput: Equatable {
    /// <p>The ID of the user group.</p>
    public let userGroupId: String?

    public init (
        userGroupId: String? = nil
    )
    {
        self.userGroupId = userGroupId
    }
}

extension DeleteUserGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteUserGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserGroupStateFault" : self = .invalidUserGroupStateFault(try InvalidUserGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFoundFault" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteUserGroupOutputError: Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidUserGroupStateFault(InvalidUserGroupStateFault)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteUserGroupOutputResponse(aRN: \(String(describing: aRN)), engine: \(String(describing: engine)), pendingChanges: \(String(describing: pendingChanges)), replicationGroups: \(String(describing: replicationGroups)), status: \(String(describing: status)), userGroupId: \(String(describing: userGroupId)), userIds: \(String(describing: userIds)))"}
}

extension DeleteUserGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteUserGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.aRN = output.aRN
            self.engine = output.engine
            self.pendingChanges = output.pendingChanges
            self.replicationGroups = output.replicationGroups
            self.status = output.status
            self.userGroupId = output.userGroupId
            self.userIds = output.userIds
        } else {
            self.aRN = nil
            self.engine = nil
            self.pendingChanges = nil
            self.replicationGroups = nil
            self.status = nil
            self.userGroupId = nil
            self.userIds = nil
        }
    }
}

public struct DeleteUserGroupOutputResponse: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the user group.</p>
    public let aRN: String?
    /// <p>The current supported value is Redis. </p>
    public let engine: String?
    /// <p>A list of updates being applied to the user groups.</p>
    public let pendingChanges: UserGroupPendingChanges?
    /// <p>A list of replication groups that the user group can access.</p>
    public let replicationGroups: [String]?
    /// <p>Indicates user group status. Can be "creating", "active", "modifying", "deleting".</p>
    public let status: String?
    /// <p>The ID of the user group.</p>
    public let userGroupId: String?
    /// <p>The list of user IDs that belong to the user group.</p>
    public let userIds: [String]?

    public init (
        aRN: String? = nil,
        engine: String? = nil,
        pendingChanges: UserGroupPendingChanges? = nil,
        replicationGroups: [String]? = nil,
        status: String? = nil,
        userGroupId: String? = nil,
        userIds: [String]? = nil
    )
    {
        self.aRN = aRN
        self.engine = engine
        self.pendingChanges = pendingChanges
        self.replicationGroups = replicationGroups
        self.status = status
        self.userGroupId = userGroupId
        self.userIds = userIds
    }
}

struct DeleteUserGroupOutputResponseBody: Equatable {
    public let userGroupId: String?
    public let status: String?
    public let engine: String?
    public let userIds: [String]?
    public let pendingChanges: UserGroupPendingChanges?
    public let replicationGroups: [String]?
    public let aRN: String?
}

extension DeleteUserGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case engine = "Engine"
        case pendingChanges = "PendingChanges"
        case replicationGroups = "ReplicationGroups"
        case status = "Status"
        case userGroupId = "UserGroupId"
        case userIds = "UserIds"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DeleteUserGroupResult"))
        let userGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userGroupId)
        userGroupId = userGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        if containerValues.contains(.userIds) {
            struct KeyVal0{struct member{}}
            let userIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIds)
            if let userIdsWrappedContainer = userIdsWrappedContainer {
                let userIdsContainer = try userIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userIdsBuffer:[String]? = nil
                if let userIdsContainer = userIdsContainer {
                    userIdsBuffer = [String]()
                    for stringContainer0 in userIdsContainer {
                        userIdsBuffer?.append(stringContainer0)
                    }
                }
                userIds = userIdsBuffer
            } else {
                userIds = []
            }
        } else {
            userIds = nil
        }
        let pendingChangesDecoded = try containerValues.decodeIfPresent(UserGroupPendingChanges.self, forKey: .pendingChanges)
        pendingChanges = pendingChangesDecoded
        if containerValues.contains(.replicationGroups) {
            struct KeyVal0{struct member{}}
            let replicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replicationGroups)
            if let replicationGroupsWrappedContainer = replicationGroupsWrappedContainer {
                let replicationGroupsContainer = try replicationGroupsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var replicationGroupsBuffer:[String]? = nil
                if let replicationGroupsContainer = replicationGroupsContainer {
                    replicationGroupsBuffer = [String]()
                    for stringContainer0 in replicationGroupsContainer {
                        replicationGroupsBuffer?.append(stringContainer0)
                    }
                }
                replicationGroups = replicationGroupsBuffer
            } else {
                replicationGroups = []
            }
        } else {
            replicationGroups = nil
        }
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

public struct DeleteUserInputBodyMiddleware: Middleware {
    public let id: String = "DeleteUserInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteUserInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteUserInput>
    public typealias MOutput = OperationOutput<DeleteUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteUserOutputError>
}

extension DeleteUserInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteUserInput(userId: \(String(describing: userId)))"}
}

extension DeleteUserInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let userId = userId {
            try container.encode(userId, forKey: Key("UserId"))
        }
        try container.encode("DeleteUser", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DeleteUserInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteUserInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteUserInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteUserInput>
    public typealias MOutput = OperationOutput<DeleteUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteUserOutputError>
}

public struct DeleteUserInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteUserInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteUserInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteUserInput>
    public typealias MOutput = OperationOutput<DeleteUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteUserOutputError>
}

public struct DeleteUserInput: Equatable {
    /// <p>The ID of the user.</p>
    public let userId: String?

    public init (
        userId: String? = nil
    )
    {
        self.userId = userId
    }
}

extension DeleteUserOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteUserOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DefaultUserAssociatedToUserGroupFault" : self = .defaultUserAssociatedToUserGroupFault(try DefaultUserAssociatedToUserGroupFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserStateFault" : self = .invalidUserStateFault(try InvalidUserStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundFault" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteUserOutputError: Equatable {
    case defaultUserAssociatedToUserGroupFault(DefaultUserAssociatedToUserGroupFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidUserStateFault(InvalidUserStateFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteUserOutputResponse(aRN: \(String(describing: aRN)), accessString: \(String(describing: accessString)), authentication: \(String(describing: authentication)), engine: \(String(describing: engine)), status: \(String(describing: status)), userGroupIds: \(String(describing: userGroupIds)), userId: \(String(describing: userId)), userName: \(String(describing: userName)))"}
}

extension DeleteUserOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteUserOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.aRN = output.aRN
            self.accessString = output.accessString
            self.authentication = output.authentication
            self.engine = output.engine
            self.status = output.status
            self.userGroupIds = output.userGroupIds
            self.userId = output.userId
            self.userName = output.userName
        } else {
            self.aRN = nil
            self.accessString = nil
            self.authentication = nil
            self.engine = nil
            self.status = nil
            self.userGroupIds = nil
            self.userId = nil
            self.userName = nil
        }
    }
}

public struct DeleteUserOutputResponse: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the user.</p>
    public let aRN: String?
    /// <p>Access permissions string used for this user.</p>
    public let accessString: String?
    /// <p>Denotes whether the user requires a password to authenticate.</p>
    public let authentication: Authentication?
    /// <p>The current supported value is Redis.</p>
    public let engine: String?
    /// <p>Indicates the user status. Can be "active", "modifying" or "deleting".</p>
    public let status: String?
    /// <p>Returns a list of the user group IDs the user belongs to.</p>
    public let userGroupIds: [String]?
    /// <p>The ID of the user.</p>
    public let userId: String?
    /// <p>The username of the user.</p>
    public let userName: String?

    public init (
        aRN: String? = nil,
        accessString: String? = nil,
        authentication: Authentication? = nil,
        engine: String? = nil,
        status: String? = nil,
        userGroupIds: [String]? = nil,
        userId: String? = nil,
        userName: String? = nil
    )
    {
        self.aRN = aRN
        self.accessString = accessString
        self.authentication = authentication
        self.engine = engine
        self.status = status
        self.userGroupIds = userGroupIds
        self.userId = userId
        self.userName = userName
    }
}

struct DeleteUserOutputResponseBody: Equatable {
    public let userId: String?
    public let userName: String?
    public let status: String?
    public let engine: String?
    public let accessString: String?
    public let userGroupIds: [String]?
    public let authentication: Authentication?
    public let aRN: String?
}

extension DeleteUserOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case accessString = "AccessString"
        case authentication = "Authentication"
        case engine = "Engine"
        case status = "Status"
        case userGroupIds = "UserGroupIds"
        case userId = "UserId"
        case userName = "UserName"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DeleteUserResult"))
        let userIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userId)
        userId = userIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userName)
        userName = userNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let accessStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accessString)
        accessString = accessStringDecoded
        if containerValues.contains(.userGroupIds) {
            struct KeyVal0{struct member{}}
            let userGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIds)
            if let userGroupIdsWrappedContainer = userGroupIdsWrappedContainer {
                let userGroupIdsContainer = try userGroupIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userGroupIdsBuffer:[String]? = nil
                if let userGroupIdsContainer = userGroupIdsContainer {
                    userGroupIdsBuffer = [String]()
                    for stringContainer0 in userGroupIdsContainer {
                        userGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                userGroupIds = userGroupIdsBuffer
            } else {
                userGroupIds = []
            }
        } else {
            userGroupIds = nil
        }
        let authenticationDecoded = try containerValues.decodeIfPresent(Authentication.self, forKey: .authentication)
        authentication = authenticationDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

public struct DescribeCacheClustersInputBodyMiddleware: Middleware {
    public let id: String = "DescribeCacheClustersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheClustersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheClustersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheClustersInput>
    public typealias MOutput = OperationOutput<DescribeCacheClustersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheClustersOutputError>
}

extension DescribeCacheClustersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeCacheClustersInput(cacheClusterId: \(String(describing: cacheClusterId)), marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)), showCacheClustersNotInReplicationGroups: \(String(describing: showCacheClustersNotInReplicationGroups)), showCacheNodeInfo: \(String(describing: showCacheNodeInfo)))"}
}

extension DescribeCacheClustersInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let showCacheClustersNotInReplicationGroups = showCacheClustersNotInReplicationGroups {
            try container.encode(showCacheClustersNotInReplicationGroups, forKey: Key("ShowCacheClustersNotInReplicationGroups"))
        }
        if let showCacheNodeInfo = showCacheNodeInfo {
            try container.encode(showCacheNodeInfo, forKey: Key("ShowCacheNodeInfo"))
        }
        try container.encode("DescribeCacheClusters", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeCacheClustersInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeCacheClustersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheClustersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheClustersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheClustersInput>
    public typealias MOutput = OperationOutput<DescribeCacheClustersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheClustersOutputError>
}

public struct DescribeCacheClustersInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeCacheClustersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheClustersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheClustersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheClustersInput>
    public typealias MOutput = OperationOutput<DescribeCacheClustersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheClustersOutputError>
}

/// <p>Represents the input of a <code>DescribeCacheClusters</code> operation.</p>
public struct DescribeCacheClustersInput: Equatable {
    /// <p>The user-supplied cluster identifier. If this parameter is specified, only information
    ///             about that specific cluster is returned. This parameter isn't case sensitive.</p>
    public let cacheClusterId: String?
    /// <p>An optional marker returned from a prior request.
    ///             Use this marker for pagination of results from this operation. If this
    ///             parameter is specified, the response includes only records beyond the marker, up to the
    ///             value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the
    ///             specified <code>MaxRecords</code> value, a marker is included in the response so that
    ///             the remaining results can be retrieved.</p>
    ///
    ///         <p>Default: 100</p>
    ///         <p>Constraints: minimum 20; maximum 100.</p>
    public let maxRecords: Int?
    /// <p>An optional flag that can be included in the <code>DescribeCacheCluster</code> request
    ///             to show only nodes (API/CLI: clusters) that are not members of a replication group.
    ///             In practice, this mean Memcached and single node Redis clusters.</p>
    public let showCacheClustersNotInReplicationGroups: Bool?
    /// <p>An optional flag that can be included in the <code>DescribeCacheCluster</code> request
    ///             to retrieve information about the individual cache nodes.</p>
    public let showCacheNodeInfo: Bool?

    public init (
        cacheClusterId: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        showCacheClustersNotInReplicationGroups: Bool? = nil,
        showCacheNodeInfo: Bool? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.marker = marker
        self.maxRecords = maxRecords
        self.showCacheClustersNotInReplicationGroups = showCacheClustersNotInReplicationGroups
        self.showCacheNodeInfo = showCacheNodeInfo
    }
}

extension DescribeCacheClustersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeCacheClustersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFoundFault" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCacheClustersOutputError: Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCacheClustersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeCacheClustersOutputResponse(cacheClusters: \(String(describing: cacheClusters)), marker: \(String(describing: marker)))"}
}

extension DescribeCacheClustersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeCacheClustersOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheClusters = output.cacheClusters
            self.marker = output.marker
        } else {
            self.cacheClusters = nil
            self.marker = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeCacheClusters</code> operation.</p>
public struct DescribeCacheClustersOutputResponse: Equatable {
    /// <p>A list of clusters. Each item in the list contains detailed information about one cluster.</p>
    public let cacheClusters: [CacheCluster]?
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    public let marker: String?

    public init (
        cacheClusters: [CacheCluster]? = nil,
        marker: String? = nil
    )
    {
        self.cacheClusters = cacheClusters
        self.marker = marker
    }
}

struct DescribeCacheClustersOutputResponseBody: Equatable {
    public let marker: String?
    public let cacheClusters: [CacheCluster]?
}

extension DescribeCacheClustersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheClusters = "CacheClusters"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeCacheClustersResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheClusters) {
            struct KeyVal0{struct CacheCluster{}}
            let cacheClustersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheCluster>.CodingKeys.self, forKey: .cacheClusters)
            if let cacheClustersWrappedContainer = cacheClustersWrappedContainer {
                let cacheClustersContainer = try cacheClustersWrappedContainer.decodeIfPresent([CacheCluster].self, forKey: .member)
                var cacheClustersBuffer:[CacheCluster]? = nil
                if let cacheClustersContainer = cacheClustersContainer {
                    cacheClustersBuffer = [CacheCluster]()
                    for structureContainer0 in cacheClustersContainer {
                        cacheClustersBuffer?.append(structureContainer0)
                    }
                }
                cacheClusters = cacheClustersBuffer
            } else {
                cacheClusters = []
            }
        } else {
            cacheClusters = nil
        }
    }
}

public struct DescribeCacheEngineVersionsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeCacheEngineVersionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheEngineVersionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheEngineVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheEngineVersionsInput>
    public typealias MOutput = OperationOutput<DescribeCacheEngineVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheEngineVersionsOutputError>
}

extension DescribeCacheEngineVersionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeCacheEngineVersionsInput(cacheParameterGroupFamily: \(String(describing: cacheParameterGroupFamily)), defaultOnly: \(String(describing: defaultOnly)), engine: \(String(describing: engine)), engineVersion: \(String(describing: engineVersion)), marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)))"}
}

extension DescribeCacheEngineVersionsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheParameterGroupFamily = cacheParameterGroupFamily {
            try container.encode(cacheParameterGroupFamily, forKey: Key("CacheParameterGroupFamily"))
        }
        if defaultOnly != false {
            try container.encode(defaultOnly, forKey: Key("DefaultOnly"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        try container.encode("DescribeCacheEngineVersions", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeCacheEngineVersionsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeCacheEngineVersionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheEngineVersionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheEngineVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheEngineVersionsInput>
    public typealias MOutput = OperationOutput<DescribeCacheEngineVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheEngineVersionsOutputError>
}

public struct DescribeCacheEngineVersionsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeCacheEngineVersionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheEngineVersionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheEngineVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheEngineVersionsInput>
    public typealias MOutput = OperationOutput<DescribeCacheEngineVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheEngineVersionsOutputError>
}

/// <p>Represents the input of a <code>DescribeCacheEngineVersions</code> operation.</p>
public struct DescribeCacheEngineVersionsInput: Equatable {
    /// <p>The name of a specific cache parameter group family to return details for.</p>
    ///         <p>Valid values are:
    ///     <code>memcached1.4</code> |
    ///      <code>memcached1.5</code> |
    ///       <code>memcached1.6</code> |
    ///     <code>redis2.6</code> |
    ///     <code>redis2.8</code> |
    ///     <code>redis3.2</code> |
    ///     <code>redis4.0</code> |
    ///      <code>redis5.0</code> |
    ///       <code>redis6.x</code> |
    ///     </p>
    ///         <p>Constraints:</p>
    ///         <ul>
    ///             <li>
    ///                <p>Must be 1 to 255 alphanumeric characters</p>
    ///             </li>
    ///             <li>
    ///                <p>First character must be a letter</p>
    ///             </li>
    ///             <li>
    ///                <p>Cannot end with a hyphen or contain two consecutive hyphens</p>
    ///             </li>
    ///          </ul>
    public let cacheParameterGroupFamily: String?
    /// <p>If <code>true</code>, specifies that only the default version of the specified engine or engine
    ///             and major version combination is to be returned.</p>
    public let defaultOnly: Bool
    /// <p>The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code>
    ///          </p>
    public let engine: String?
    /// <p>The cache engine version to return.</p>
    ///         <p>Example: <code>1.4.14</code>
    ///          </p>
    public let engineVersion: String?
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation.
    ///             If this parameter is specified, the response includes only records beyond the marker, up to the
    ///             value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the
    ///             specified <code>MaxRecords</code> value, a marker is included in the response so that
    ///             the remaining results can be retrieved.</p>
    ///
    ///         <p>Default: 100</p>
    ///         <p>Constraints: minimum 20; maximum 100.</p>
    public let maxRecords: Int?

    public init (
        cacheParameterGroupFamily: String? = nil,
        defaultOnly: Bool = false,
        engine: String? = nil,
        engineVersion: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil
    )
    {
        self.cacheParameterGroupFamily = cacheParameterGroupFamily
        self.defaultOnly = defaultOnly
        self.engine = engine
        self.engineVersion = engineVersion
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeCacheEngineVersionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeCacheEngineVersionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCacheEngineVersionsOutputError: Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCacheEngineVersionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeCacheEngineVersionsOutputResponse(cacheEngineVersions: \(String(describing: cacheEngineVersions)), marker: \(String(describing: marker)))"}
}

extension DescribeCacheEngineVersionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeCacheEngineVersionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheEngineVersions = output.cacheEngineVersions
            self.marker = output.marker
        } else {
            self.cacheEngineVersions = nil
            self.marker = nil
        }
    }
}

/// <p>Represents the output of a <a>DescribeCacheEngineVersions</a> operation.</p>
public struct DescribeCacheEngineVersionsOutputResponse: Equatable {
    /// <p>A list of cache engine version details.
    ///             Each element in the list contains detailed information about one cache engine version.</p>
    public let cacheEngineVersions: [CacheEngineVersion]?
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    public let marker: String?

    public init (
        cacheEngineVersions: [CacheEngineVersion]? = nil,
        marker: String? = nil
    )
    {
        self.cacheEngineVersions = cacheEngineVersions
        self.marker = marker
    }
}

struct DescribeCacheEngineVersionsOutputResponseBody: Equatable {
    public let marker: String?
    public let cacheEngineVersions: [CacheEngineVersion]?
}

extension DescribeCacheEngineVersionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheEngineVersions = "CacheEngineVersions"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeCacheEngineVersionsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheEngineVersions) {
            struct KeyVal0{struct CacheEngineVersion{}}
            let cacheEngineVersionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheEngineVersion>.CodingKeys.self, forKey: .cacheEngineVersions)
            if let cacheEngineVersionsWrappedContainer = cacheEngineVersionsWrappedContainer {
                let cacheEngineVersionsContainer = try cacheEngineVersionsWrappedContainer.decodeIfPresent([CacheEngineVersion].self, forKey: .member)
                var cacheEngineVersionsBuffer:[CacheEngineVersion]? = nil
                if let cacheEngineVersionsContainer = cacheEngineVersionsContainer {
                    cacheEngineVersionsBuffer = [CacheEngineVersion]()
                    for structureContainer0 in cacheEngineVersionsContainer {
                        cacheEngineVersionsBuffer?.append(structureContainer0)
                    }
                }
                cacheEngineVersions = cacheEngineVersionsBuffer
            } else {
                cacheEngineVersions = []
            }
        } else {
            cacheEngineVersions = nil
        }
    }
}

public struct DescribeCacheParameterGroupsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeCacheParameterGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheParameterGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheParameterGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheParameterGroupsInput>
    public typealias MOutput = OperationOutput<DescribeCacheParameterGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheParameterGroupsOutputError>
}

extension DescribeCacheParameterGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeCacheParameterGroupsInput(cacheParameterGroupName: \(String(describing: cacheParameterGroupName)), marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)))"}
}

extension DescribeCacheParameterGroupsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        try container.encode("DescribeCacheParameterGroups", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeCacheParameterGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeCacheParameterGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheParameterGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheParameterGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheParameterGroupsInput>
    public typealias MOutput = OperationOutput<DescribeCacheParameterGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheParameterGroupsOutputError>
}

public struct DescribeCacheParameterGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeCacheParameterGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheParameterGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheParameterGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheParameterGroupsInput>
    public typealias MOutput = OperationOutput<DescribeCacheParameterGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheParameterGroupsOutputError>
}

/// <p>Represents the input of a <code>DescribeCacheParameterGroups</code> operation.</p>
public struct DescribeCacheParameterGroupsInput: Equatable {
    /// <p>The name of a specific cache parameter group to return details for.</p>
    public let cacheParameterGroupName: String?
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation.
    ///             If this parameter is specified, the response includes only records beyond the marker, up to the
    ///             value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the
    ///             specified <code>MaxRecords</code> value, a marker is included in the response so that
    ///             the remaining results can be retrieved.</p>
    ///
    ///         <p>Default: 100</p>
    ///         <p>Constraints: minimum 20; maximum 100.</p>
    public let maxRecords: Int?

    public init (
        cacheParameterGroupName: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeCacheParameterGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeCacheParameterGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheParameterGroupNotFoundFault" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCacheParameterGroupsOutputError: Equatable {
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCacheParameterGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeCacheParameterGroupsOutputResponse(cacheParameterGroups: \(String(describing: cacheParameterGroups)), marker: \(String(describing: marker)))"}
}

extension DescribeCacheParameterGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeCacheParameterGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheParameterGroups = output.cacheParameterGroups
            self.marker = output.marker
        } else {
            self.cacheParameterGroups = nil
            self.marker = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeCacheParameterGroups</code> operation.</p>
public struct DescribeCacheParameterGroupsOutputResponse: Equatable {
    /// <p>A list of cache parameter groups. Each element in the list contains detailed information
    ///             about one cache parameter group.</p>
    public let cacheParameterGroups: [CacheParameterGroup]?
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    public let marker: String?

    public init (
        cacheParameterGroups: [CacheParameterGroup]? = nil,
        marker: String? = nil
    )
    {
        self.cacheParameterGroups = cacheParameterGroups
        self.marker = marker
    }
}

struct DescribeCacheParameterGroupsOutputResponseBody: Equatable {
    public let marker: String?
    public let cacheParameterGroups: [CacheParameterGroup]?
}

extension DescribeCacheParameterGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheParameterGroups = "CacheParameterGroups"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeCacheParameterGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheParameterGroups) {
            struct KeyVal0{struct CacheParameterGroup{}}
            let cacheParameterGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheParameterGroup>.CodingKeys.self, forKey: .cacheParameterGroups)
            if let cacheParameterGroupsWrappedContainer = cacheParameterGroupsWrappedContainer {
                let cacheParameterGroupsContainer = try cacheParameterGroupsWrappedContainer.decodeIfPresent([CacheParameterGroup].self, forKey: .member)
                var cacheParameterGroupsBuffer:[CacheParameterGroup]? = nil
                if let cacheParameterGroupsContainer = cacheParameterGroupsContainer {
                    cacheParameterGroupsBuffer = [CacheParameterGroup]()
                    for structureContainer0 in cacheParameterGroupsContainer {
                        cacheParameterGroupsBuffer?.append(structureContainer0)
                    }
                }
                cacheParameterGroups = cacheParameterGroupsBuffer
            } else {
                cacheParameterGroups = []
            }
        } else {
            cacheParameterGroups = nil
        }
    }
}

public struct DescribeCacheParametersInputBodyMiddleware: Middleware {
    public let id: String = "DescribeCacheParametersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheParametersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheParametersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheParametersInput>
    public typealias MOutput = OperationOutput<DescribeCacheParametersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheParametersOutputError>
}

extension DescribeCacheParametersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeCacheParametersInput(cacheParameterGroupName: \(String(describing: cacheParameterGroupName)), marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)), source: \(String(describing: source)))"}
}

extension DescribeCacheParametersInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let source = source {
            try container.encode(source, forKey: Key("Source"))
        }
        try container.encode("DescribeCacheParameters", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeCacheParametersInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeCacheParametersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheParametersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheParametersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheParametersInput>
    public typealias MOutput = OperationOutput<DescribeCacheParametersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheParametersOutputError>
}

public struct DescribeCacheParametersInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeCacheParametersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheParametersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheParametersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheParametersInput>
    public typealias MOutput = OperationOutput<DescribeCacheParametersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheParametersOutputError>
}

/// <p>Represents the input of a <code>DescribeCacheParameters</code> operation.</p>
public struct DescribeCacheParametersInput: Equatable {
    /// <p>The name of a specific cache parameter group to return details for.</p>
    public let cacheParameterGroupName: String?
    /// <p>An optional marker returned from a prior request.
    ///             Use this marker for pagination of results from this operation.
    ///             If this parameter is specified, the response includes only records beyond the marker, up to the
    ///             value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the
    ///             specified <code>MaxRecords</code> value, a marker is included in the response so that
    ///             the remaining results can be retrieved.</p>
    ///
    ///         <p>Default: 100</p>
    ///         <p>Constraints: minimum 20; maximum 100.</p>
    public let maxRecords: Int?
    /// <p>The parameter types to return.</p>
    ///         <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code>
    ///          </p>
    public let source: String?

    public init (
        cacheParameterGroupName: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        source: String? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
        self.marker = marker
        self.maxRecords = maxRecords
        self.source = source
    }
}

extension DescribeCacheParametersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeCacheParametersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheParameterGroupNotFoundFault" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCacheParametersOutputError: Equatable {
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCacheParametersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeCacheParametersOutputResponse(cacheNodeTypeSpecificParameters: \(String(describing: cacheNodeTypeSpecificParameters)), marker: \(String(describing: marker)), parameters: \(String(describing: parameters)))"}
}

extension DescribeCacheParametersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeCacheParametersOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheNodeTypeSpecificParameters = output.cacheNodeTypeSpecificParameters
            self.marker = output.marker
            self.parameters = output.parameters
        } else {
            self.cacheNodeTypeSpecificParameters = nil
            self.marker = nil
            self.parameters = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeCacheParameters</code> operation.</p>
public struct DescribeCacheParametersOutputResponse: Equatable {
    /// <p>A list of parameters specific to a particular cache node type.
    ///             Each element in the list contains detailed information about one parameter.</p>
    public let cacheNodeTypeSpecificParameters: [CacheNodeTypeSpecificParameter]?
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    public let marker: String?
    /// <p>A list of <a>Parameter</a> instances.</p>
    public let parameters: [Parameter]?

    public init (
        cacheNodeTypeSpecificParameters: [CacheNodeTypeSpecificParameter]? = nil,
        marker: String? = nil,
        parameters: [Parameter]? = nil
    )
    {
        self.cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParameters
        self.marker = marker
        self.parameters = parameters
    }
}

struct DescribeCacheParametersOutputResponseBody: Equatable {
    public let marker: String?
    public let parameters: [Parameter]?
    public let cacheNodeTypeSpecificParameters: [CacheNodeTypeSpecificParameter]?
}

extension DescribeCacheParametersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheNodeTypeSpecificParameters = "CacheNodeTypeSpecificParameters"
        case marker = "Marker"
        case parameters = "Parameters"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeCacheParametersResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct Parameter{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Parameter>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([Parameter].self, forKey: .member)
                var parametersBuffer:[Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        if containerValues.contains(.cacheNodeTypeSpecificParameters) {
            struct KeyVal0{struct CacheNodeTypeSpecificParameter{}}
            let cacheNodeTypeSpecificParametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeTypeSpecificParameter>.CodingKeys.self, forKey: .cacheNodeTypeSpecificParameters)
            if let cacheNodeTypeSpecificParametersWrappedContainer = cacheNodeTypeSpecificParametersWrappedContainer {
                let cacheNodeTypeSpecificParametersContainer = try cacheNodeTypeSpecificParametersWrappedContainer.decodeIfPresent([CacheNodeTypeSpecificParameter].self, forKey: .member)
                var cacheNodeTypeSpecificParametersBuffer:[CacheNodeTypeSpecificParameter]? = nil
                if let cacheNodeTypeSpecificParametersContainer = cacheNodeTypeSpecificParametersContainer {
                    cacheNodeTypeSpecificParametersBuffer = [CacheNodeTypeSpecificParameter]()
                    for structureContainer0 in cacheNodeTypeSpecificParametersContainer {
                        cacheNodeTypeSpecificParametersBuffer?.append(structureContainer0)
                    }
                }
                cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParametersBuffer
            } else {
                cacheNodeTypeSpecificParameters = []
            }
        } else {
            cacheNodeTypeSpecificParameters = nil
        }
    }
}

public struct DescribeCacheSecurityGroupsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeCacheSecurityGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheSecurityGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheSecurityGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheSecurityGroupsInput>
    public typealias MOutput = OperationOutput<DescribeCacheSecurityGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheSecurityGroupsOutputError>
}

extension DescribeCacheSecurityGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeCacheSecurityGroupsInput(cacheSecurityGroupName: \(String(describing: cacheSecurityGroupName)), marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)))"}
}

extension DescribeCacheSecurityGroupsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheSecurityGroupName = cacheSecurityGroupName {
            try container.encode(cacheSecurityGroupName, forKey: Key("CacheSecurityGroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        try container.encode("DescribeCacheSecurityGroups", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeCacheSecurityGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeCacheSecurityGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheSecurityGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheSecurityGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheSecurityGroupsInput>
    public typealias MOutput = OperationOutput<DescribeCacheSecurityGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheSecurityGroupsOutputError>
}

public struct DescribeCacheSecurityGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeCacheSecurityGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheSecurityGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheSecurityGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheSecurityGroupsInput>
    public typealias MOutput = OperationOutput<DescribeCacheSecurityGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheSecurityGroupsOutputError>
}

/// <p>Represents the input of a <code>DescribeCacheSecurityGroups</code> operation.</p>
public struct DescribeCacheSecurityGroupsInput: Equatable {
    /// <p>The name of the cache security group to return details for.</p>
    public let cacheSecurityGroupName: String?
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this
    ///             parameter is specified, the response includes only records beyond the marker, up to the
    ///             value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the
    ///             specified <code>MaxRecords</code> value, a marker is included in the response so that
    ///             the remaining results can be retrieved.</p>
    ///
    ///         <p>Default: 100</p>
    ///         <p>Constraints: minimum 20; maximum 100.</p>
    public let maxRecords: Int?

    public init (
        cacheSecurityGroupName: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeCacheSecurityGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeCacheSecurityGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheSecurityGroupNotFoundFault" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCacheSecurityGroupsOutputError: Equatable {
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCacheSecurityGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeCacheSecurityGroupsOutputResponse(cacheSecurityGroups: \(String(describing: cacheSecurityGroups)), marker: \(String(describing: marker)))"}
}

extension DescribeCacheSecurityGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeCacheSecurityGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheSecurityGroups = output.cacheSecurityGroups
            self.marker = output.marker
        } else {
            self.cacheSecurityGroups = nil
            self.marker = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeCacheSecurityGroups</code> operation.</p>
public struct DescribeCacheSecurityGroupsOutputResponse: Equatable {
    /// <p>A list of cache security groups. Each element in the list contains detailed information about one group.</p>
    public let cacheSecurityGroups: [CacheSecurityGroup]?
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    public let marker: String?

    public init (
        cacheSecurityGroups: [CacheSecurityGroup]? = nil,
        marker: String? = nil
    )
    {
        self.cacheSecurityGroups = cacheSecurityGroups
        self.marker = marker
    }
}

struct DescribeCacheSecurityGroupsOutputResponseBody: Equatable {
    public let marker: String?
    public let cacheSecurityGroups: [CacheSecurityGroup]?
}

extension DescribeCacheSecurityGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheSecurityGroups = "CacheSecurityGroups"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeCacheSecurityGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheSecurityGroups) {
            struct KeyVal0{struct CacheSecurityGroup{}}
            let cacheSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheSecurityGroup>.CodingKeys.self, forKey: .cacheSecurityGroups)
            if let cacheSecurityGroupsWrappedContainer = cacheSecurityGroupsWrappedContainer {
                let cacheSecurityGroupsContainer = try cacheSecurityGroupsWrappedContainer.decodeIfPresent([CacheSecurityGroup].self, forKey: .member)
                var cacheSecurityGroupsBuffer:[CacheSecurityGroup]? = nil
                if let cacheSecurityGroupsContainer = cacheSecurityGroupsContainer {
                    cacheSecurityGroupsBuffer = [CacheSecurityGroup]()
                    for structureContainer0 in cacheSecurityGroupsContainer {
                        cacheSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                cacheSecurityGroups = cacheSecurityGroupsBuffer
            } else {
                cacheSecurityGroups = []
            }
        } else {
            cacheSecurityGroups = nil
        }
    }
}

public struct DescribeCacheSubnetGroupsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeCacheSubnetGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheSubnetGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheSubnetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheSubnetGroupsInput>
    public typealias MOutput = OperationOutput<DescribeCacheSubnetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheSubnetGroupsOutputError>
}

extension DescribeCacheSubnetGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeCacheSubnetGroupsInput(cacheSubnetGroupName: \(String(describing: cacheSubnetGroupName)), marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)))"}
}

extension DescribeCacheSubnetGroupsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: Key("CacheSubnetGroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        try container.encode("DescribeCacheSubnetGroups", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeCacheSubnetGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeCacheSubnetGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheSubnetGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheSubnetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheSubnetGroupsInput>
    public typealias MOutput = OperationOutput<DescribeCacheSubnetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheSubnetGroupsOutputError>
}

public struct DescribeCacheSubnetGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeCacheSubnetGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCacheSubnetGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCacheSubnetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCacheSubnetGroupsInput>
    public typealias MOutput = OperationOutput<DescribeCacheSubnetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCacheSubnetGroupsOutputError>
}

/// <p>Represents the input of a <code>DescribeCacheSubnetGroups</code> operation.</p>
public struct DescribeCacheSubnetGroupsInput: Equatable {
    /// <p>The name of the cache subnet group to return details for.</p>
    public let cacheSubnetGroupName: String?
    /// <p>An optional marker returned from a prior request.
    ///             Use this marker for pagination of results from this operation.
    ///             If this parameter is specified, the response includes only records beyond the marker, up to the
    ///             value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the
    ///             specified <code>MaxRecords</code> value, a marker is included in the response so that
    ///             the remaining results can be retrieved.</p>
    ///
    ///         <p>Default: 100</p>
    ///         <p>Constraints: minimum 20; maximum 100.</p>
    public let maxRecords: Int?

    public init (
        cacheSubnetGroupName: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil
    )
    {
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeCacheSubnetGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeCacheSubnetGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCacheSubnetGroupsOutputError: Equatable {
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCacheSubnetGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeCacheSubnetGroupsOutputResponse(cacheSubnetGroups: \(String(describing: cacheSubnetGroups)), marker: \(String(describing: marker)))"}
}

extension DescribeCacheSubnetGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeCacheSubnetGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheSubnetGroups = output.cacheSubnetGroups
            self.marker = output.marker
        } else {
            self.cacheSubnetGroups = nil
            self.marker = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeCacheSubnetGroups</code> operation.</p>
public struct DescribeCacheSubnetGroupsOutputResponse: Equatable {
    /// <p>A list of cache subnet groups. Each element in the list contains detailed information about one group.</p>
    public let cacheSubnetGroups: [CacheSubnetGroup]?
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    public let marker: String?

    public init (
        cacheSubnetGroups: [CacheSubnetGroup]? = nil,
        marker: String? = nil
    )
    {
        self.cacheSubnetGroups = cacheSubnetGroups
        self.marker = marker
    }
}

struct DescribeCacheSubnetGroupsOutputResponseBody: Equatable {
    public let marker: String?
    public let cacheSubnetGroups: [CacheSubnetGroup]?
}

extension DescribeCacheSubnetGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheSubnetGroups = "CacheSubnetGroups"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeCacheSubnetGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheSubnetGroups) {
            struct KeyVal0{struct CacheSubnetGroup{}}
            let cacheSubnetGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheSubnetGroup>.CodingKeys.self, forKey: .cacheSubnetGroups)
            if let cacheSubnetGroupsWrappedContainer = cacheSubnetGroupsWrappedContainer {
                let cacheSubnetGroupsContainer = try cacheSubnetGroupsWrappedContainer.decodeIfPresent([CacheSubnetGroup].self, forKey: .member)
                var cacheSubnetGroupsBuffer:[CacheSubnetGroup]? = nil
                if let cacheSubnetGroupsContainer = cacheSubnetGroupsContainer {
                    cacheSubnetGroupsBuffer = [CacheSubnetGroup]()
                    for structureContainer0 in cacheSubnetGroupsContainer {
                        cacheSubnetGroupsBuffer?.append(structureContainer0)
                    }
                }
                cacheSubnetGroups = cacheSubnetGroupsBuffer
            } else {
                cacheSubnetGroups = []
            }
        } else {
            cacheSubnetGroups = nil
        }
    }
}

public struct DescribeEngineDefaultParametersInputBodyMiddleware: Middleware {
    public let id: String = "DescribeEngineDefaultParametersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEngineDefaultParametersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEngineDefaultParametersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEngineDefaultParametersInput>
    public typealias MOutput = OperationOutput<DescribeEngineDefaultParametersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEngineDefaultParametersOutputError>
}

extension DescribeEngineDefaultParametersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeEngineDefaultParametersInput(cacheParameterGroupFamily: \(String(describing: cacheParameterGroupFamily)), marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)))"}
}

extension DescribeEngineDefaultParametersInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheParameterGroupFamily = cacheParameterGroupFamily {
            try container.encode(cacheParameterGroupFamily, forKey: Key("CacheParameterGroupFamily"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        try container.encode("DescribeEngineDefaultParameters", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeEngineDefaultParametersInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeEngineDefaultParametersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEngineDefaultParametersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEngineDefaultParametersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEngineDefaultParametersInput>
    public typealias MOutput = OperationOutput<DescribeEngineDefaultParametersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEngineDefaultParametersOutputError>
}

public struct DescribeEngineDefaultParametersInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeEngineDefaultParametersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEngineDefaultParametersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEngineDefaultParametersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEngineDefaultParametersInput>
    public typealias MOutput = OperationOutput<DescribeEngineDefaultParametersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEngineDefaultParametersOutputError>
}

/// <p>Represents the input of a <code>DescribeEngineDefaultParameters</code> operation.</p>
public struct DescribeEngineDefaultParametersInput: Equatable {
    /// <p>The name of the cache parameter group family.</p>
    ///         <p>Valid values are:
    ///     <code>memcached1.4</code> |
    ///      <code>memcached1.5</code> |
    ///       <code>memcached1.6</code> |
    ///     <code>redis2.6</code> |
    ///     <code>redis2.8</code> |
    ///     <code>redis3.2</code> |
    ///     <code>redis4.0</code> |
    ///      <code>redis5.0</code> |
    ///       <code>redis6.x</code> |
    ///     </p>
    public let cacheParameterGroupFamily: String?
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this
    ///             parameter is specified, the response includes only records beyond the marker, up to the
    ///             value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the
    ///             specified <code>MaxRecords</code> value, a marker is included in the response so that
    ///             the remaining results can be retrieved.</p>
    ///
    ///         <p>Default: 100</p>
    ///         <p>Constraints: minimum 20; maximum 100.</p>
    public let maxRecords: Int?

    public init (
        cacheParameterGroupFamily: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil
    )
    {
        self.cacheParameterGroupFamily = cacheParameterGroupFamily
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeEngineDefaultParametersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeEngineDefaultParametersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEngineDefaultParametersOutputError: Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEngineDefaultParametersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeEngineDefaultParametersOutputResponse(engineDefaults: \(String(describing: engineDefaults)))"}
}

extension DescribeEngineDefaultParametersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeEngineDefaultParametersOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.engineDefaults = output.engineDefaults
        } else {
            self.engineDefaults = nil
        }
    }
}

public struct DescribeEngineDefaultParametersOutputResponse: Equatable {
    /// <p>Represents the output of a <code>DescribeEngineDefaultParameters</code> operation.</p>
    public let engineDefaults: EngineDefaults?

    public init (
        engineDefaults: EngineDefaults? = nil
    )
    {
        self.engineDefaults = engineDefaults
    }
}

struct DescribeEngineDefaultParametersOutputResponseBody: Equatable {
    public let engineDefaults: EngineDefaults?
}

extension DescribeEngineDefaultParametersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case engineDefaults = "EngineDefaults"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeEngineDefaultParametersResult"))
        let engineDefaultsDecoded = try containerValues.decodeIfPresent(EngineDefaults.self, forKey: .engineDefaults)
        engineDefaults = engineDefaultsDecoded
    }
}

public struct DescribeEventsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeEventsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEventsInput>
    public typealias MOutput = OperationOutput<DescribeEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEventsOutputError>
}

extension DescribeEventsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeEventsInput(duration: \(String(describing: duration)), endTime: \(String(describing: endTime)), marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)), sourceIdentifier: \(String(describing: sourceIdentifier)), sourceType: \(String(describing: sourceType)), startTime: \(String(describing: startTime)))"}
}

extension DescribeEventsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let duration = duration {
            try container.encode(duration, forKey: Key("Duration"))
        }
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let sourceIdentifier = sourceIdentifier {
            try container.encode(sourceIdentifier, forKey: Key("SourceIdentifier"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: Key("SourceType"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        try container.encode("DescribeEvents", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeEventsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeEventsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEventsInput>
    public typealias MOutput = OperationOutput<DescribeEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEventsOutputError>
}

public struct DescribeEventsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeEventsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEventsInput>
    public typealias MOutput = OperationOutput<DescribeEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEventsOutputError>
}

/// <p>Represents the input of a <code>DescribeEvents</code> operation.</p>
public struct DescribeEventsInput: Equatable {
    /// <p>The number of minutes worth of events to retrieve.</p>
    public let duration: Int?
    /// <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p>
    ///         <p>
    ///             <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
    public let endTime: Date?
    /// <p>An optional marker returned from a prior request.
    ///             Use this marker for pagination of results from this operation.
    ///             If this parameter is specified, the response includes only records beyond the marker,
    ///             up to the value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the
    ///             specified <code>MaxRecords</code> value, a marker is included in the response so that
    ///             the remaining results can be retrieved.</p>
    ///
    ///         <p>Default: 100</p>
    ///         <p>Constraints: minimum 20; maximum 100.</p>
    public let maxRecords: Int?
    /// <p>The identifier of the event source for which events are returned.
    ///             If not specified, all sources are included in the response.</p>
    public let sourceIdentifier: String?
    /// <p>The event source to retrieve events for.
    ///             If no value is specified, all events are returned.</p>
    public let sourceType: SourceType?
    /// <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p>
    ///         <p>
    ///             <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
    public let startTime: Date?

    public init (
        duration: Int? = nil,
        endTime: Date? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        sourceIdentifier: String? = nil,
        sourceType: SourceType? = nil,
        startTime: Date? = nil
    )
    {
        self.duration = duration
        self.endTime = endTime
        self.marker = marker
        self.maxRecords = maxRecords
        self.sourceIdentifier = sourceIdentifier
        self.sourceType = sourceType
        self.startTime = startTime
    }
}

extension DescribeEventsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeEventsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEventsOutputError: Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEventsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeEventsOutputResponse(events: \(String(describing: events)), marker: \(String(describing: marker)))"}
}

extension DescribeEventsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeEventsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.events = output.events
            self.marker = output.marker
        } else {
            self.events = nil
            self.marker = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeEvents</code> operation.</p>
public struct DescribeEventsOutputResponse: Equatable {
    /// <p>A list of events. Each element in the list contains detailed information about one event.</p>
    public let events: [Event]?
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    public let marker: String?

    public init (
        events: [Event]? = nil,
        marker: String? = nil
    )
    {
        self.events = events
        self.marker = marker
    }
}

struct DescribeEventsOutputResponseBody: Equatable {
    public let marker: String?
    public let events: [Event]?
}

extension DescribeEventsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case events = "Events"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeEventsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.events) {
            struct KeyVal0{struct Event{}}
            let eventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Event>.CodingKeys.self, forKey: .events)
            if let eventsWrappedContainer = eventsWrappedContainer {
                let eventsContainer = try eventsWrappedContainer.decodeIfPresent([Event].self, forKey: .member)
                var eventsBuffer:[Event]? = nil
                if let eventsContainer = eventsContainer {
                    eventsBuffer = [Event]()
                    for structureContainer0 in eventsContainer {
                        eventsBuffer?.append(structureContainer0)
                    }
                }
                events = eventsBuffer
            } else {
                events = []
            }
        } else {
            events = nil
        }
    }
}

public struct DescribeGlobalReplicationGroupsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeGlobalReplicationGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGlobalReplicationGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGlobalReplicationGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGlobalReplicationGroupsInput>
    public typealias MOutput = OperationOutput<DescribeGlobalReplicationGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGlobalReplicationGroupsOutputError>
}

extension DescribeGlobalReplicationGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGlobalReplicationGroupsInput(globalReplicationGroupId: \(String(describing: globalReplicationGroupId)), marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)), showMemberInfo: \(String(describing: showMemberInfo)))"}
}

extension DescribeGlobalReplicationGroupsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: Key("GlobalReplicationGroupId"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let showMemberInfo = showMemberInfo {
            try container.encode(showMemberInfo, forKey: Key("ShowMemberInfo"))
        }
        try container.encode("DescribeGlobalReplicationGroups", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeGlobalReplicationGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeGlobalReplicationGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGlobalReplicationGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGlobalReplicationGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGlobalReplicationGroupsInput>
    public typealias MOutput = OperationOutput<DescribeGlobalReplicationGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGlobalReplicationGroupsOutputError>
}

public struct DescribeGlobalReplicationGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeGlobalReplicationGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGlobalReplicationGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGlobalReplicationGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGlobalReplicationGroupsInput>
    public typealias MOutput = OperationOutput<DescribeGlobalReplicationGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGlobalReplicationGroupsOutputError>
}

public struct DescribeGlobalReplicationGroupsInput: Equatable {
    /// <p>The name of the Global datastore</p>
    public let globalReplicationGroupId: String?
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. </p>
    public let maxRecords: Int?
    /// <p>Returns the list of members that comprise the Global datastore.</p>
    public let showMemberInfo: Bool?

    public init (
        globalReplicationGroupId: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        showMemberInfo: Bool? = nil
    )
    {
        self.globalReplicationGroupId = globalReplicationGroupId
        self.marker = marker
        self.maxRecords = maxRecords
        self.showMemberInfo = showMemberInfo
    }
}

extension DescribeGlobalReplicationGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeGlobalReplicationGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeGlobalReplicationGroupsOutputError: Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGlobalReplicationGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGlobalReplicationGroupsOutputResponse(globalReplicationGroups: \(String(describing: globalReplicationGroups)), marker: \(String(describing: marker)))"}
}

extension DescribeGlobalReplicationGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeGlobalReplicationGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalReplicationGroups = output.globalReplicationGroups
            self.marker = output.marker
        } else {
            self.globalReplicationGroups = nil
            self.marker = nil
        }
    }
}

public struct DescribeGlobalReplicationGroupsOutputResponse: Equatable {
    /// <p>Indicates the slot configuration and global identifier for each slice group.</p>
    public let globalReplicationGroups: [GlobalReplicationGroup]?
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. ></p>
    public let marker: String?

    public init (
        globalReplicationGroups: [GlobalReplicationGroup]? = nil,
        marker: String? = nil
    )
    {
        self.globalReplicationGroups = globalReplicationGroups
        self.marker = marker
    }
}

struct DescribeGlobalReplicationGroupsOutputResponseBody: Equatable {
    public let marker: String?
    public let globalReplicationGroups: [GlobalReplicationGroup]?
}

extension DescribeGlobalReplicationGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalReplicationGroups = "GlobalReplicationGroups"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeGlobalReplicationGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.globalReplicationGroups) {
            struct KeyVal0{struct GlobalReplicationGroup{}}
            let globalReplicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GlobalReplicationGroup>.CodingKeys.self, forKey: .globalReplicationGroups)
            if let globalReplicationGroupsWrappedContainer = globalReplicationGroupsWrappedContainer {
                let globalReplicationGroupsContainer = try globalReplicationGroupsWrappedContainer.decodeIfPresent([GlobalReplicationGroup].self, forKey: .member)
                var globalReplicationGroupsBuffer:[GlobalReplicationGroup]? = nil
                if let globalReplicationGroupsContainer = globalReplicationGroupsContainer {
                    globalReplicationGroupsBuffer = [GlobalReplicationGroup]()
                    for structureContainer0 in globalReplicationGroupsContainer {
                        globalReplicationGroupsBuffer?.append(structureContainer0)
                    }
                }
                globalReplicationGroups = globalReplicationGroupsBuffer
            } else {
                globalReplicationGroups = []
            }
        } else {
            globalReplicationGroups = nil
        }
    }
}

public struct DescribeReplicationGroupsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeReplicationGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeReplicationGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeReplicationGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeReplicationGroupsInput>
    public typealias MOutput = OperationOutput<DescribeReplicationGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeReplicationGroupsOutputError>
}

extension DescribeReplicationGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeReplicationGroupsInput(marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)), replicationGroupId: \(String(describing: replicationGroupId)))"}
}

extension DescribeReplicationGroupsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        try container.encode("DescribeReplicationGroups", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeReplicationGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeReplicationGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeReplicationGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeReplicationGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeReplicationGroupsInput>
    public typealias MOutput = OperationOutput<DescribeReplicationGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeReplicationGroupsOutputError>
}

public struct DescribeReplicationGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeReplicationGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeReplicationGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeReplicationGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeReplicationGroupsInput>
    public typealias MOutput = OperationOutput<DescribeReplicationGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeReplicationGroupsOutputError>
}

/// <p>Represents the input of a <code>DescribeReplicationGroups</code> operation.</p>
public struct DescribeReplicationGroupsInput: Equatable {
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this
    ///             parameter is specified, the response includes only records beyond the marker, up to the
    ///             value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the
    ///             specified <code>MaxRecords</code> value, a marker is included in the response so that
    ///             the remaining results can be retrieved.</p>
    ///
    ///         <p>Default: 100</p>
    ///         <p>Constraints: minimum 20; maximum 100.</p>
    public let maxRecords: Int?
    /// <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p>
    ///         <p>If you do not specify this parameter, information about all replication groups is returned.</p>
    public let replicationGroupId: String?

    public init (
        marker: String? = nil,
        maxRecords: Int? = nil,
        replicationGroupId: String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.replicationGroupId = replicationGroupId
    }
}

extension DescribeReplicationGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeReplicationGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeReplicationGroupsOutputError: Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReplicationGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeReplicationGroupsOutputResponse(marker: \(String(describing: marker)), replicationGroups: \(String(describing: replicationGroups)))"}
}

extension DescribeReplicationGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeReplicationGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.marker = output.marker
            self.replicationGroups = output.replicationGroups
        } else {
            self.marker = nil
            self.replicationGroups = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeReplicationGroups</code> operation.</p>
public struct DescribeReplicationGroupsOutputResponse: Equatable {
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    public let marker: String?
    /// <p>A list of replication groups. Each item in the list contains detailed information about one replication group.</p>
    public let replicationGroups: [ReplicationGroup]?

    public init (
        marker: String? = nil,
        replicationGroups: [ReplicationGroup]? = nil
    )
    {
        self.marker = marker
        self.replicationGroups = replicationGroups
    }
}

struct DescribeReplicationGroupsOutputResponseBody: Equatable {
    public let marker: String?
    public let replicationGroups: [ReplicationGroup]?
}

extension DescribeReplicationGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case replicationGroups = "ReplicationGroups"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeReplicationGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.replicationGroups) {
            struct KeyVal0{struct ReplicationGroup{}}
            let replicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReplicationGroup>.CodingKeys.self, forKey: .replicationGroups)
            if let replicationGroupsWrappedContainer = replicationGroupsWrappedContainer {
                let replicationGroupsContainer = try replicationGroupsWrappedContainer.decodeIfPresent([ReplicationGroup].self, forKey: .member)
                var replicationGroupsBuffer:[ReplicationGroup]? = nil
                if let replicationGroupsContainer = replicationGroupsContainer {
                    replicationGroupsBuffer = [ReplicationGroup]()
                    for structureContainer0 in replicationGroupsContainer {
                        replicationGroupsBuffer?.append(structureContainer0)
                    }
                }
                replicationGroups = replicationGroupsBuffer
            } else {
                replicationGroups = []
            }
        } else {
            replicationGroups = nil
        }
    }
}

public struct DescribeReservedCacheNodesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeReservedCacheNodesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeReservedCacheNodesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeReservedCacheNodesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeReservedCacheNodesInput>
    public typealias MOutput = OperationOutput<DescribeReservedCacheNodesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeReservedCacheNodesOutputError>
}

extension DescribeReservedCacheNodesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeReservedCacheNodesInput(cacheNodeType: \(String(describing: cacheNodeType)), duration: \(String(describing: duration)), marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)), offeringType: \(String(describing: offeringType)), productDescription: \(String(describing: productDescription)), reservedCacheNodeId: \(String(describing: reservedCacheNodeId)), reservedCacheNodesOfferingId: \(String(describing: reservedCacheNodesOfferingId)))"}
}

extension DescribeReservedCacheNodesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let duration = duration {
            try container.encode(duration, forKey: Key("Duration"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: Key("OfferingType"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: Key("ProductDescription"))
        }
        if let reservedCacheNodeId = reservedCacheNodeId {
            try container.encode(reservedCacheNodeId, forKey: Key("ReservedCacheNodeId"))
        }
        if let reservedCacheNodesOfferingId = reservedCacheNodesOfferingId {
            try container.encode(reservedCacheNodesOfferingId, forKey: Key("ReservedCacheNodesOfferingId"))
        }
        try container.encode("DescribeReservedCacheNodes", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeReservedCacheNodesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeReservedCacheNodesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeReservedCacheNodesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeReservedCacheNodesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeReservedCacheNodesInput>
    public typealias MOutput = OperationOutput<DescribeReservedCacheNodesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeReservedCacheNodesOutputError>
}

public struct DescribeReservedCacheNodesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeReservedCacheNodesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeReservedCacheNodesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeReservedCacheNodesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeReservedCacheNodesInput>
    public typealias MOutput = OperationOutput<DescribeReservedCacheNodesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeReservedCacheNodesOutputError>
}

/// <p>Represents the input of a <code>DescribeReservedCacheNodes</code> operation.</p>
public struct DescribeReservedCacheNodesInput: Equatable {
    /// <p>The cache node type filter value.
    ///             Use this parameter to show only those reservations matching the specified cache node type.</p>
    ///
    ///         <p>The following node types are supported by ElastiCache.
    /// 				Generally speaking, the current generation types provide more memory and computational power
    /// 			at lower cost when compared to their equivalent previous generation counterparts.</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>General purpose:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 					
    ///     						           <p>
    ///                         <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						               <p>	
    ///                         <code>cache.m6g.large</code>,
    /// 							<code>cache.m6g.xlarge</code>,
    /// 							<code>cache.m6g.2xlarge</code>,
    /// 							<code>cache.m6g.4xlarge</code>,
    /// 							<code>cache.m6g.8xlarge</code>,
    /// 							<code>cache.m6g.12xlarge</code>,
    /// 							<code>cache.m6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    ///     					
    ///     					
    ///     					            <p>
    ///                         <b>M5 node types:</b>
    ///     						              <code>cache.m5.large</code>,
    ///     						<code>cache.m5.xlarge</code>,
    ///     						<code>cache.m5.2xlarge</code>,
    ///     						<code>cache.m5.4xlarge</code>,
    ///     						<code>cache.m5.12xlarge</code>,
    ///     						<code>cache.m5.24xlarge</code>
    ///     						
    ///     						
    ///     						           </p>	
    ///     						
    /// 						
    /// 						               <p>
    ///                         <b>M4 node types:</b>
    ///     						              <code>cache.m4.large</code>,
    ///     						<code>cache.m4.xlarge</code>,
    ///     						<code>cache.m4.2xlarge</code>,
    ///     						<code>cache.m4.4xlarge</code>,
    ///     						<code>cache.m4.10xlarge</code>
    ///                      </p>
    ///     					            <p>
    ///                         <b>T3 node types:</b>
    /// 					                   <code>cache.t3.micro</code>,
    ///     						<code>cache.t3.small</code>,
    ///     						<code>cache.t3.medium</code>
    ///                      </p>
    ///     								
    ///     						
    ///     				             <p>
    ///                         <b>T2 node types:</b>
    /// 					                   <code>cache.t2.micro</code>,
    ///     						<code>cache.t2.small</code>,
    ///     						<code>cache.t2.medium</code>
    ///                      </p>
    ///     						
    ///     						
    ///     						
    ///     						
    ///     						        </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 						               <p>
    ///                         <b>T1 node types:</b>
    /// 					                   <code>cache.t1.micro</code>
    ///                      </p>
    /// 					
    /// 						               <p>
    ///                         <b>M1 node types:</b>
    /// 						                  <code>cache.m1.small</code>,
    /// 						   <code>cache.m1.medium</code>,
    /// 						   <code>cache.m1.large</code>,
    /// 						   <code>cache.m1.xlarge</code>
    ///                      </p>
    /// 						
    /// 						               <p>
    ///                         <b>M3 node types:</b>
    ///     						              <code>cache.m3.medium</code>,
    ///     						<code>cache.m3.large</code>,
    ///     						<code>cache.m3.xlarge</code>,
    ///     						<code>cache.m3.2xlarge</code>
    ///                      </p>
    /// 						
    /// 						            </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Compute optimized:</p>
    ///
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 			                  <p>
    ///                         <b>C1 node types:</b>
    /// 			                     <code>cache.c1.xlarge</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Memory optimized:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 											          <p>
    ///                         <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						
    /// 						
    /// 						
    /// 						
    /// 						               <p>	
    /// 							                 <code>cache.r6g.large</code>,
    /// 							<code>cache.r6g.xlarge</code>,
    /// 							<code>cache.r6g.2xlarge</code>,
    /// 							<code>cache.r6g.4xlarge</code>,
    /// 							<code>cache.r6g.8xlarge</code>,
    /// 							<code>cache.r6g.12xlarge</code>,
    /// 							<code>cache.r6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    /// 					                <p>
    ///                         <b>R5 node types:</b>
    ///     					               <code>cache.r5.large</code>,
    ///     					   <code>cache.r5.xlarge</code>,
    ///     					   <code>cache.r5.2xlarge</code>,
    ///     					   <code>cache.r5.4xlarge</code>,
    ///     					   <code>cache.r5.12xlarge</code>,
    ///     					   <code>cache.r5.24xlarge</code>
    ///                      </p>
    /// 						
    ///     					            <p>
    ///                         <b>R4 node types:</b>
    ///     					               <code>cache.r4.large</code>,
    ///     					   <code>cache.r4.xlarge</code>,
    ///     					   <code>cache.r4.2xlarge</code>,
    ///     					   <code>cache.r4.4xlarge</code>,
    ///     					   <code>cache.r4.8xlarge</code>,
    ///     					   <code>cache.r4.16xlarge</code>
    ///                      </p>
    ///     					
    ///     					
    ///     					
    ///
    ///
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					         </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    ///                         <p>
    ///                         <b>M2 node types:</b>						
    ///     					               <code>cache.m2.xlarge</code>,
    ///     						<code>cache.m2.2xlarge</code>,
    ///     						<code>cache.m2.4xlarge</code>
    ///                      </p>
    ///     						
    ///     						           <p>
    ///                         <b>R3 node types:</b>
    ///     					               <code>cache.r3.large</code>,
    ///     						<code>cache.r3.xlarge</code>,
    ///     						<code>cache.r3.2xlarge</code>,
    ///     						<code>cache.r3.4xlarge</code>,
    ///     						<code>cache.r3.8xlarge</code>
    ///                      </p>
    ///     						
    ///     						        </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    /// 				
    /// 		       <p>
    ///             <b>Additional node type info</b>
    ///          </p>
    /// 		       <ul>
    ///             <li>
    ///                <p>All current generation instance types are created in Amazon VPC by default.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis configuration variables <code>appendonly</code> and
    /// 				<code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p>
    ///             </li>
    ///          </ul>
    public let cacheNodeType: String?
    /// <p>The duration filter value, specified in years or seconds.
    ///             Use this parameter to show only reservations for this duration.</p>
    ///         <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code>
    ///          </p>
    public let duration: String?
    /// <p>An optional marker returned from a prior request.
    ///             Use this marker for pagination of results from this operation.
    ///             If this parameter is specified, the response includes only records beyond the marker,
    ///             up to the value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the
    ///             specified <code>MaxRecords</code> value, a marker is included in the response so that
    ///             the remaining results can be retrieved.</p>
    ///
    ///         <p>Default: 100</p>
    ///         <p>Constraints: minimum 20; maximum 100.</p>
    public let maxRecords: Int?
    /// <p>The offering type filter value.
    ///             Use this parameter to show only the available offerings matching the specified offering type.</p>
    ///         <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"|"All Upfront"|"Partial Upfront"| "No Upfront"</code>
    ///          </p>
    public let offeringType: String?
    /// <p>The product description filter value. Use this parameter to show only those reservations matching the specified product description.</p>
    public let productDescription: String?
    /// <p>The reserved cache node identifier filter value.
    ///             Use this parameter to show only the reservation that matches the specified reservation ID.</p>
    public let reservedCacheNodeId: String?
    /// <p>The offering identifier filter value.
    ///             Use this parameter to show only purchased reservations matching the specified offering identifier.</p>
    public let reservedCacheNodesOfferingId: String?

    public init (
        cacheNodeType: String? = nil,
        duration: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        offeringType: String? = nil,
        productDescription: String? = nil,
        reservedCacheNodeId: String? = nil,
        reservedCacheNodesOfferingId: String? = nil
    )
    {
        self.cacheNodeType = cacheNodeType
        self.duration = duration
        self.marker = marker
        self.maxRecords = maxRecords
        self.offeringType = offeringType
        self.productDescription = productDescription
        self.reservedCacheNodeId = reservedCacheNodeId
        self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
    }
}

public struct DescribeReservedCacheNodesOfferingsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeReservedCacheNodesOfferingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeReservedCacheNodesOfferingsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeReservedCacheNodesOfferingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeReservedCacheNodesOfferingsInput>
    public typealias MOutput = OperationOutput<DescribeReservedCacheNodesOfferingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeReservedCacheNodesOfferingsOutputError>
}

extension DescribeReservedCacheNodesOfferingsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeReservedCacheNodesOfferingsInput(cacheNodeType: \(String(describing: cacheNodeType)), duration: \(String(describing: duration)), marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)), offeringType: \(String(describing: offeringType)), productDescription: \(String(describing: productDescription)), reservedCacheNodesOfferingId: \(String(describing: reservedCacheNodesOfferingId)))"}
}

extension DescribeReservedCacheNodesOfferingsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let duration = duration {
            try container.encode(duration, forKey: Key("Duration"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: Key("OfferingType"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: Key("ProductDescription"))
        }
        if let reservedCacheNodesOfferingId = reservedCacheNodesOfferingId {
            try container.encode(reservedCacheNodesOfferingId, forKey: Key("ReservedCacheNodesOfferingId"))
        }
        try container.encode("DescribeReservedCacheNodesOfferings", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeReservedCacheNodesOfferingsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeReservedCacheNodesOfferingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeReservedCacheNodesOfferingsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeReservedCacheNodesOfferingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeReservedCacheNodesOfferingsInput>
    public typealias MOutput = OperationOutput<DescribeReservedCacheNodesOfferingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeReservedCacheNodesOfferingsOutputError>
}

public struct DescribeReservedCacheNodesOfferingsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeReservedCacheNodesOfferingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeReservedCacheNodesOfferingsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeReservedCacheNodesOfferingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeReservedCacheNodesOfferingsInput>
    public typealias MOutput = OperationOutput<DescribeReservedCacheNodesOfferingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeReservedCacheNodesOfferingsOutputError>
}

/// <p>Represents the input of a <code>DescribeReservedCacheNodesOfferings</code> operation.</p>
public struct DescribeReservedCacheNodesOfferingsInput: Equatable {
    /// <p>The cache node type filter value.
    ///             Use this parameter to show only the available offerings matching the specified cache node type.</p>
    ///
    ///         <p>The following node types are supported by ElastiCache.
    /// 				Generally speaking, the current generation types provide more memory and computational power
    /// 			at lower cost when compared to their equivalent previous generation counterparts.</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>General purpose:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 					
    ///     						           <p>
    ///                         <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						               <p>	
    ///                         <code>cache.m6g.large</code>,
    /// 							<code>cache.m6g.xlarge</code>,
    /// 							<code>cache.m6g.2xlarge</code>,
    /// 							<code>cache.m6g.4xlarge</code>,
    /// 							<code>cache.m6g.8xlarge</code>,
    /// 							<code>cache.m6g.12xlarge</code>,
    /// 							<code>cache.m6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    ///     					
    ///     					
    ///     					            <p>
    ///                         <b>M5 node types:</b>
    ///     						              <code>cache.m5.large</code>,
    ///     						<code>cache.m5.xlarge</code>,
    ///     						<code>cache.m5.2xlarge</code>,
    ///     						<code>cache.m5.4xlarge</code>,
    ///     						<code>cache.m5.12xlarge</code>,
    ///     						<code>cache.m5.24xlarge</code>
    ///     						
    ///     						
    ///     						           </p>	
    ///     						
    /// 						
    /// 						               <p>
    ///                         <b>M4 node types:</b>
    ///     						              <code>cache.m4.large</code>,
    ///     						<code>cache.m4.xlarge</code>,
    ///     						<code>cache.m4.2xlarge</code>,
    ///     						<code>cache.m4.4xlarge</code>,
    ///     						<code>cache.m4.10xlarge</code>
    ///                      </p>
    ///     					            <p>
    ///                         <b>T3 node types:</b>
    /// 					                   <code>cache.t3.micro</code>,
    ///     						<code>cache.t3.small</code>,
    ///     						<code>cache.t3.medium</code>
    ///                      </p>
    ///     								
    ///     						
    ///     				             <p>
    ///                         <b>T2 node types:</b>
    /// 					                   <code>cache.t2.micro</code>,
    ///     						<code>cache.t2.small</code>,
    ///     						<code>cache.t2.medium</code>
    ///                      </p>
    ///     						
    ///     						
    ///     						
    ///     						
    ///     						        </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 						               <p>
    ///                         <b>T1 node types:</b>
    /// 					                   <code>cache.t1.micro</code>
    ///                      </p>
    /// 					
    /// 						               <p>
    ///                         <b>M1 node types:</b>
    /// 						                  <code>cache.m1.small</code>,
    /// 						   <code>cache.m1.medium</code>,
    /// 						   <code>cache.m1.large</code>,
    /// 						   <code>cache.m1.xlarge</code>
    ///                      </p>
    /// 						
    /// 						               <p>
    ///                         <b>M3 node types:</b>
    ///     						              <code>cache.m3.medium</code>,
    ///     						<code>cache.m3.large</code>,
    ///     						<code>cache.m3.xlarge</code>,
    ///     						<code>cache.m3.2xlarge</code>
    ///                      </p>
    /// 						
    /// 						            </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Compute optimized:</p>
    ///
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 			                  <p>
    ///                         <b>C1 node types:</b>
    /// 			                     <code>cache.c1.xlarge</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Memory optimized:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 											          <p>
    ///                         <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						
    /// 						
    /// 						
    /// 						
    /// 						               <p>	
    /// 							                 <code>cache.r6g.large</code>,
    /// 							<code>cache.r6g.xlarge</code>,
    /// 							<code>cache.r6g.2xlarge</code>,
    /// 							<code>cache.r6g.4xlarge</code>,
    /// 							<code>cache.r6g.8xlarge</code>,
    /// 							<code>cache.r6g.12xlarge</code>,
    /// 							<code>cache.r6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    /// 					                <p>
    ///                         <b>R5 node types:</b>
    ///     					               <code>cache.r5.large</code>,
    ///     					   <code>cache.r5.xlarge</code>,
    ///     					   <code>cache.r5.2xlarge</code>,
    ///     					   <code>cache.r5.4xlarge</code>,
    ///     					   <code>cache.r5.12xlarge</code>,
    ///     					   <code>cache.r5.24xlarge</code>
    ///                      </p>
    /// 						
    ///     					            <p>
    ///                         <b>R4 node types:</b>
    ///     					               <code>cache.r4.large</code>,
    ///     					   <code>cache.r4.xlarge</code>,
    ///     					   <code>cache.r4.2xlarge</code>,
    ///     					   <code>cache.r4.4xlarge</code>,
    ///     					   <code>cache.r4.8xlarge</code>,
    ///     					   <code>cache.r4.16xlarge</code>
    ///                      </p>
    ///     					
    ///     					
    ///     					
    ///
    ///
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					         </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    ///                         <p>
    ///                         <b>M2 node types:</b>						
    ///     					               <code>cache.m2.xlarge</code>,
    ///     						<code>cache.m2.2xlarge</code>,
    ///     						<code>cache.m2.4xlarge</code>
    ///                      </p>
    ///     						
    ///     						           <p>
    ///                         <b>R3 node types:</b>
    ///     					               <code>cache.r3.large</code>,
    ///     						<code>cache.r3.xlarge</code>,
    ///     						<code>cache.r3.2xlarge</code>,
    ///     						<code>cache.r3.4xlarge</code>,
    ///     						<code>cache.r3.8xlarge</code>
    ///                      </p>
    ///     						
    ///     						        </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    /// 				
    /// 		       <p>
    ///             <b>Additional node type info</b>
    ///          </p>
    /// 		       <ul>
    ///             <li>
    ///                <p>All current generation instance types are created in Amazon VPC by default.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis configuration variables <code>appendonly</code> and
    /// 				<code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p>
    ///             </li>
    ///          </ul>
    public let cacheNodeType: String?
    /// <p>Duration filter value, specified in years or seconds.
    ///             Use this parameter to show only reservations for a given duration.</p>
    ///         <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code>
    ///          </p>
    public let duration: String?
    /// <p>An optional marker returned from a prior request.
    ///             Use this marker for pagination of results from this operation.
    ///             If this parameter is specified, the response includes only records beyond the marker,
    ///             up to the value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the
    ///             specified <code>MaxRecords</code> value, a marker is included in the response so that
    ///             the remaining results can be retrieved.</p>
    ///
    ///         <p>Default: 100</p>
    ///         <p>Constraints: minimum 20; maximum 100.</p>
    public let maxRecords: Int?
    /// <p>The offering type filter value.
    ///             Use this parameter to show only the available offerings matching the specified offering type.</p>
    ///         <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization" |"All Upfront"|"Partial Upfront"| "No Upfront"</code>
    ///          </p>
    public let offeringType: String?
    /// <p>The product description filter value.
    ///             Use this parameter to show only the available offerings matching the specified product description.</p>
    public let productDescription: String?
    /// <p>The offering identifier filter value.
    ///             Use this parameter to show only the available offering that matches the specified reservation identifier.</p>
    ///         <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code>
    ///          </p>
    public let reservedCacheNodesOfferingId: String?

    public init (
        cacheNodeType: String? = nil,
        duration: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        offeringType: String? = nil,
        productDescription: String? = nil,
        reservedCacheNodesOfferingId: String? = nil
    )
    {
        self.cacheNodeType = cacheNodeType
        self.duration = duration
        self.marker = marker
        self.maxRecords = maxRecords
        self.offeringType = offeringType
        self.productDescription = productDescription
        self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
    }
}

extension DescribeReservedCacheNodesOfferingsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeReservedCacheNodesOfferingsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodesOfferingNotFoundFault" : self = .reservedCacheNodesOfferingNotFoundFault(try ReservedCacheNodesOfferingNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeReservedCacheNodesOfferingsOutputError: Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case reservedCacheNodesOfferingNotFoundFault(ReservedCacheNodesOfferingNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReservedCacheNodesOfferingsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeReservedCacheNodesOfferingsOutputResponse(marker: \(String(describing: marker)), reservedCacheNodesOfferings: \(String(describing: reservedCacheNodesOfferings)))"}
}

extension DescribeReservedCacheNodesOfferingsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeReservedCacheNodesOfferingsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.marker = output.marker
            self.reservedCacheNodesOfferings = output.reservedCacheNodesOfferings
        } else {
            self.marker = nil
            self.reservedCacheNodesOfferings = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeReservedCacheNodesOfferings</code> operation.</p>
public struct DescribeReservedCacheNodesOfferingsOutputResponse: Equatable {
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    public let marker: String?
    /// <p>A list of reserved cache node offerings. Each element in the list contains detailed information about one offering.</p>
    public let reservedCacheNodesOfferings: [ReservedCacheNodesOffering]?

    public init (
        marker: String? = nil,
        reservedCacheNodesOfferings: [ReservedCacheNodesOffering]? = nil
    )
    {
        self.marker = marker
        self.reservedCacheNodesOfferings = reservedCacheNodesOfferings
    }
}

struct DescribeReservedCacheNodesOfferingsOutputResponseBody: Equatable {
    public let marker: String?
    public let reservedCacheNodesOfferings: [ReservedCacheNodesOffering]?
}

extension DescribeReservedCacheNodesOfferingsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case reservedCacheNodesOfferings = "ReservedCacheNodesOfferings"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeReservedCacheNodesOfferingsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedCacheNodesOfferings) {
            struct KeyVal0{struct ReservedCacheNodesOffering{}}
            let reservedCacheNodesOfferingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedCacheNodesOffering>.CodingKeys.self, forKey: .reservedCacheNodesOfferings)
            if let reservedCacheNodesOfferingsWrappedContainer = reservedCacheNodesOfferingsWrappedContainer {
                let reservedCacheNodesOfferingsContainer = try reservedCacheNodesOfferingsWrappedContainer.decodeIfPresent([ReservedCacheNodesOffering].self, forKey: .member)
                var reservedCacheNodesOfferingsBuffer:[ReservedCacheNodesOffering]? = nil
                if let reservedCacheNodesOfferingsContainer = reservedCacheNodesOfferingsContainer {
                    reservedCacheNodesOfferingsBuffer = [ReservedCacheNodesOffering]()
                    for structureContainer0 in reservedCacheNodesOfferingsContainer {
                        reservedCacheNodesOfferingsBuffer?.append(structureContainer0)
                    }
                }
                reservedCacheNodesOfferings = reservedCacheNodesOfferingsBuffer
            } else {
                reservedCacheNodesOfferings = []
            }
        } else {
            reservedCacheNodesOfferings = nil
        }
    }
}

extension DescribeReservedCacheNodesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeReservedCacheNodesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodeNotFoundFault" : self = .reservedCacheNodeNotFoundFault(try ReservedCacheNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeReservedCacheNodesOutputError: Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case reservedCacheNodeNotFoundFault(ReservedCacheNodeNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReservedCacheNodesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeReservedCacheNodesOutputResponse(marker: \(String(describing: marker)), reservedCacheNodes: \(String(describing: reservedCacheNodes)))"}
}

extension DescribeReservedCacheNodesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeReservedCacheNodesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.marker = output.marker
            self.reservedCacheNodes = output.reservedCacheNodes
        } else {
            self.marker = nil
            self.reservedCacheNodes = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeReservedCacheNodes</code> operation.</p>
public struct DescribeReservedCacheNodesOutputResponse: Equatable {
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    public let marker: String?
    /// <p>A list of reserved cache nodes. Each element in the list contains detailed information about one node.</p>
    public let reservedCacheNodes: [ReservedCacheNode]?

    public init (
        marker: String? = nil,
        reservedCacheNodes: [ReservedCacheNode]? = nil
    )
    {
        self.marker = marker
        self.reservedCacheNodes = reservedCacheNodes
    }
}

struct DescribeReservedCacheNodesOutputResponseBody: Equatable {
    public let marker: String?
    public let reservedCacheNodes: [ReservedCacheNode]?
}

extension DescribeReservedCacheNodesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case reservedCacheNodes = "ReservedCacheNodes"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeReservedCacheNodesResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedCacheNodes) {
            struct KeyVal0{struct ReservedCacheNode{}}
            let reservedCacheNodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedCacheNode>.CodingKeys.self, forKey: .reservedCacheNodes)
            if let reservedCacheNodesWrappedContainer = reservedCacheNodesWrappedContainer {
                let reservedCacheNodesContainer = try reservedCacheNodesWrappedContainer.decodeIfPresent([ReservedCacheNode].self, forKey: .member)
                var reservedCacheNodesBuffer:[ReservedCacheNode]? = nil
                if let reservedCacheNodesContainer = reservedCacheNodesContainer {
                    reservedCacheNodesBuffer = [ReservedCacheNode]()
                    for structureContainer0 in reservedCacheNodesContainer {
                        reservedCacheNodesBuffer?.append(structureContainer0)
                    }
                }
                reservedCacheNodes = reservedCacheNodesBuffer
            } else {
                reservedCacheNodes = []
            }
        } else {
            reservedCacheNodes = nil
        }
    }
}

public struct DescribeServiceUpdatesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeServiceUpdatesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeServiceUpdatesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeServiceUpdatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeServiceUpdatesInput>
    public typealias MOutput = OperationOutput<DescribeServiceUpdatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeServiceUpdatesOutputError>
}

extension DescribeServiceUpdatesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeServiceUpdatesInput(marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)), serviceUpdateName: \(String(describing: serviceUpdateName)), serviceUpdateStatus: \(String(describing: serviceUpdateStatus)))"}
}

extension DescribeServiceUpdatesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: Key("ServiceUpdateName"))
        }
        if let serviceUpdateStatus = serviceUpdateStatus {
            var serviceUpdateStatusContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ServiceUpdateStatus"))
            for (index0, serviceupdatestatus0) in serviceUpdateStatus.enumerated() {
                try serviceUpdateStatusContainer.encode(serviceupdatestatus0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DescribeServiceUpdates", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeServiceUpdatesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeServiceUpdatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeServiceUpdatesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeServiceUpdatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeServiceUpdatesInput>
    public typealias MOutput = OperationOutput<DescribeServiceUpdatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeServiceUpdatesOutputError>
}

public struct DescribeServiceUpdatesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeServiceUpdatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeServiceUpdatesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeServiceUpdatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeServiceUpdatesInput>
    public typealias MOutput = OperationOutput<DescribeServiceUpdatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeServiceUpdatesOutputError>
}

public struct DescribeServiceUpdatesInput: Equatable {
    /// <p>An optional marker returned from a prior request.
    ///            Use this marker for pagination of results from this operation. If this
    ///            parameter is specified, the response includes only records beyond the marker, up to the
    ///            value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response</p>
    public let maxRecords: Int?
    /// <p>The unique ID of the service update</p>
    public let serviceUpdateName: String?
    /// <p>The status of the service update</p>
    public let serviceUpdateStatus: [ServiceUpdateStatus]?

    public init (
        marker: String? = nil,
        maxRecords: Int? = nil,
        serviceUpdateName: String? = nil,
        serviceUpdateStatus: [ServiceUpdateStatus]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.serviceUpdateName = serviceUpdateName
        self.serviceUpdateStatus = serviceUpdateStatus
    }
}

extension DescribeServiceUpdatesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeServiceUpdatesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUpdateNotFoundFault" : self = .serviceUpdateNotFoundFault(try ServiceUpdateNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeServiceUpdatesOutputError: Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case serviceUpdateNotFoundFault(ServiceUpdateNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeServiceUpdatesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeServiceUpdatesOutputResponse(marker: \(String(describing: marker)), serviceUpdates: \(String(describing: serviceUpdates)))"}
}

extension DescribeServiceUpdatesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeServiceUpdatesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.marker = output.marker
            self.serviceUpdates = output.serviceUpdates
        } else {
            self.marker = nil
            self.serviceUpdates = nil
        }
    }
}

public struct DescribeServiceUpdatesOutputResponse: Equatable {
    /// <p>An optional marker returned from a prior request.
    ///            Use this marker for pagination of results from this operation. If this
    ///            parameter is specified, the response includes only records beyond the marker, up to the
    ///            value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>A list of service updates</p>
    public let serviceUpdates: [ServiceUpdate]?

    public init (
        marker: String? = nil,
        serviceUpdates: [ServiceUpdate]? = nil
    )
    {
        self.marker = marker
        self.serviceUpdates = serviceUpdates
    }
}

struct DescribeServiceUpdatesOutputResponseBody: Equatable {
    public let marker: String?
    public let serviceUpdates: [ServiceUpdate]?
}

extension DescribeServiceUpdatesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case serviceUpdates = "ServiceUpdates"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeServiceUpdatesResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.serviceUpdates) {
            struct KeyVal0{struct ServiceUpdate{}}
            let serviceUpdatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ServiceUpdate>.CodingKeys.self, forKey: .serviceUpdates)
            if let serviceUpdatesWrappedContainer = serviceUpdatesWrappedContainer {
                let serviceUpdatesContainer = try serviceUpdatesWrappedContainer.decodeIfPresent([ServiceUpdate].self, forKey: .member)
                var serviceUpdatesBuffer:[ServiceUpdate]? = nil
                if let serviceUpdatesContainer = serviceUpdatesContainer {
                    serviceUpdatesBuffer = [ServiceUpdate]()
                    for structureContainer0 in serviceUpdatesContainer {
                        serviceUpdatesBuffer?.append(structureContainer0)
                    }
                }
                serviceUpdates = serviceUpdatesBuffer
            } else {
                serviceUpdates = []
            }
        } else {
            serviceUpdates = nil
        }
    }
}

public struct DescribeSnapshotsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeSnapshotsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeSnapshotsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeSnapshotsInput>
    public typealias MOutput = OperationOutput<DescribeSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeSnapshotsOutputError>
}

extension DescribeSnapshotsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeSnapshotsInput(cacheClusterId: \(String(describing: cacheClusterId)), marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)), replicationGroupId: \(String(describing: replicationGroupId)), showNodeGroupConfig: \(String(describing: showNodeGroupConfig)), snapshotName: \(String(describing: snapshotName)), snapshotSource: \(String(describing: snapshotSource)))"}
}

extension DescribeSnapshotsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let showNodeGroupConfig = showNodeGroupConfig {
            try container.encode(showNodeGroupConfig, forKey: Key("ShowNodeGroupConfig"))
        }
        if let snapshotName = snapshotName {
            try container.encode(snapshotName, forKey: Key("SnapshotName"))
        }
        if let snapshotSource = snapshotSource {
            try container.encode(snapshotSource, forKey: Key("SnapshotSource"))
        }
        try container.encode("DescribeSnapshots", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeSnapshotsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeSnapshotsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeSnapshotsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeSnapshotsInput>
    public typealias MOutput = OperationOutput<DescribeSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeSnapshotsOutputError>
}

public struct DescribeSnapshotsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeSnapshotsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeSnapshotsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeSnapshotsInput>
    public typealias MOutput = OperationOutput<DescribeSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeSnapshotsOutputError>
}

/// <p>Represents the input of a <code>DescribeSnapshotsMessage</code> operation.</p>
public struct DescribeSnapshotsInput: Equatable {
    /// <p>A user-supplied cluster identifier.
    ///             If this parameter is specified, only snapshots associated with that specific cluster are described.</p>
    public let cacheClusterId: String?
    /// <p>An optional marker returned from a prior request.
    ///             Use this marker for pagination of results from this operation.
    ///             If this parameter is specified, the response includes only records beyond the marker,
    ///             up to the value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the
    ///             specified <code>MaxRecords</code> value, a marker is included in the response so that
    ///             the remaining results can be retrieved.</p>
    ///         <p>Default: 50</p>
    ///         <p>Constraints: minimum 20; maximum 50.</p>
    public let maxRecords: Int?
    /// <p>A user-supplied replication group identifier.
    ///             If this parameter is specified, only snapshots associated with that specific replication group are described.</p>
    public let replicationGroupId: String?
    /// <p>A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.</p>
    public let showNodeGroupConfig: Bool?
    /// <p>A user-supplied name of the snapshot.
    ///             If this parameter is specified, only this snapshot are described.</p>
    public let snapshotName: String?
    /// <p>If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache.
    ///             If set to <code>user</code> the output shows snapshots that were manually created.
    ///             If omitted, the output shows both automatically and manually created snapshots.</p>
    public let snapshotSource: String?

    public init (
        cacheClusterId: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        replicationGroupId: String? = nil,
        showNodeGroupConfig: Bool? = nil,
        snapshotName: String? = nil,
        snapshotSource: String? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.marker = marker
        self.maxRecords = maxRecords
        self.replicationGroupId = replicationGroupId
        self.showNodeGroupConfig = showNodeGroupConfig
        self.snapshotName = snapshotName
        self.snapshotSource = snapshotSource
    }
}

extension DescribeSnapshotsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeSnapshotsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFoundFault" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFoundFault" : self = .snapshotNotFoundFault(try SnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeSnapshotsOutputError: Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case snapshotNotFoundFault(SnapshotNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSnapshotsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeSnapshotsOutputResponse(marker: \(String(describing: marker)), snapshots: \(String(describing: snapshots)))"}
}

extension DescribeSnapshotsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeSnapshotsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.marker = output.marker
            self.snapshots = output.snapshots
        } else {
            self.marker = nil
            self.snapshots = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeSnapshots</code> operation.</p>
public struct DescribeSnapshotsOutputResponse: Equatable {
    /// <p>An optional marker returned from a prior request.
    ///             Use this marker for pagination of results from this operation.
    ///             If this parameter is specified, the response includes only records beyond the marker,
    ///             up to the value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>A list of snapshots. Each item in the list contains detailed information about one snapshot.</p>
    public let snapshots: [Snapshot]?

    public init (
        marker: String? = nil,
        snapshots: [Snapshot]? = nil
    )
    {
        self.marker = marker
        self.snapshots = snapshots
    }
}

struct DescribeSnapshotsOutputResponseBody: Equatable {
    public let marker: String?
    public let snapshots: [Snapshot]?
}

extension DescribeSnapshotsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case snapshots = "Snapshots"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeSnapshotsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.snapshots) {
            struct KeyVal0{struct Snapshot{}}
            let snapshotsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Snapshot>.CodingKeys.self, forKey: .snapshots)
            if let snapshotsWrappedContainer = snapshotsWrappedContainer {
                let snapshotsContainer = try snapshotsWrappedContainer.decodeIfPresent([Snapshot].self, forKey: .member)
                var snapshotsBuffer:[Snapshot]? = nil
                if let snapshotsContainer = snapshotsContainer {
                    snapshotsBuffer = [Snapshot]()
                    for structureContainer0 in snapshotsContainer {
                        snapshotsBuffer?.append(structureContainer0)
                    }
                }
                snapshots = snapshotsBuffer
            } else {
                snapshots = []
            }
        } else {
            snapshots = nil
        }
    }
}

public struct DescribeUpdateActionsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeUpdateActionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeUpdateActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeUpdateActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeUpdateActionsInput>
    public typealias MOutput = OperationOutput<DescribeUpdateActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeUpdateActionsOutputError>
}

extension DescribeUpdateActionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeUpdateActionsInput(cacheClusterIds: \(String(describing: cacheClusterIds)), engine: \(String(describing: engine)), marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)), replicationGroupIds: \(String(describing: replicationGroupIds)), serviceUpdateName: \(String(describing: serviceUpdateName)), serviceUpdateStatus: \(String(describing: serviceUpdateStatus)), serviceUpdateTimeRange: \(String(describing: serviceUpdateTimeRange)), showNodeLevelUpdateStatus: \(String(describing: showNodeLevelUpdateStatus)), updateActionStatus: \(String(describing: updateActionStatus)))"}
}

extension DescribeUpdateActionsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterIds = cacheClusterIds {
            var cacheClusterIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheClusterIds"))
            for (index0, string0) in cacheClusterIds.enumerated() {
                try cacheClusterIdsContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let replicationGroupIds = replicationGroupIds {
            var replicationGroupIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReplicationGroupIds"))
            for (index0, string0) in replicationGroupIds.enumerated() {
                try replicationGroupIdsContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: Key("ServiceUpdateName"))
        }
        if let serviceUpdateStatus = serviceUpdateStatus {
            var serviceUpdateStatusContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ServiceUpdateStatus"))
            for (index0, serviceupdatestatus0) in serviceUpdateStatus.enumerated() {
                try serviceUpdateStatusContainer.encode(serviceupdatestatus0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let serviceUpdateTimeRange = serviceUpdateTimeRange {
            try container.encode(serviceUpdateTimeRange, forKey: Key("ServiceUpdateTimeRange"))
        }
        if let showNodeLevelUpdateStatus = showNodeLevelUpdateStatus {
            try container.encode(showNodeLevelUpdateStatus, forKey: Key("ShowNodeLevelUpdateStatus"))
        }
        if let updateActionStatus = updateActionStatus {
            var updateActionStatusContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UpdateActionStatus"))
            for (index0, updateactionstatus0) in updateActionStatus.enumerated() {
                try updateActionStatusContainer.encode(updateactionstatus0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DescribeUpdateActions", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeUpdateActionsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeUpdateActionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeUpdateActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeUpdateActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeUpdateActionsInput>
    public typealias MOutput = OperationOutput<DescribeUpdateActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeUpdateActionsOutputError>
}

public struct DescribeUpdateActionsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeUpdateActionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeUpdateActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeUpdateActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeUpdateActionsInput>
    public typealias MOutput = OperationOutput<DescribeUpdateActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeUpdateActionsOutputError>
}

public struct DescribeUpdateActionsInput: Equatable {
    /// <p>The cache cluster IDs</p>
    public let cacheClusterIds: [String]?
    /// <p>The Elasticache engine to which the update applies. Either Redis or Memcached </p>
    public let engine: String?
    /// <p>An optional marker returned from a prior request.
    ///            Use this marker for pagination of results from this operation. If this
    ///            parameter is specified, the response includes only records beyond the marker, up to the
    ///            value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response</p>
    public let maxRecords: Int?
    /// <p>The replication group IDs</p>
    public let replicationGroupIds: [String]?
    /// <p>The unique ID of the service update</p>
    public let serviceUpdateName: String?
    /// <p>The status of the service update</p>
    public let serviceUpdateStatus: [ServiceUpdateStatus]?
    /// <p>The range of time specified to search for service updates that are in available status</p>
    public let serviceUpdateTimeRange: TimeRangeFilter?
    /// <p>Dictates whether to include node level update status in the response </p>
    public let showNodeLevelUpdateStatus: Bool?
    /// <p>The status of the update action.</p>
    public let updateActionStatus: [UpdateActionStatus]?

    public init (
        cacheClusterIds: [String]? = nil,
        engine: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        replicationGroupIds: [String]? = nil,
        serviceUpdateName: String? = nil,
        serviceUpdateStatus: [ServiceUpdateStatus]? = nil,
        serviceUpdateTimeRange: TimeRangeFilter? = nil,
        showNodeLevelUpdateStatus: Bool? = nil,
        updateActionStatus: [UpdateActionStatus]? = nil
    )
    {
        self.cacheClusterIds = cacheClusterIds
        self.engine = engine
        self.marker = marker
        self.maxRecords = maxRecords
        self.replicationGroupIds = replicationGroupIds
        self.serviceUpdateName = serviceUpdateName
        self.serviceUpdateStatus = serviceUpdateStatus
        self.serviceUpdateTimeRange = serviceUpdateTimeRange
        self.showNodeLevelUpdateStatus = showNodeLevelUpdateStatus
        self.updateActionStatus = updateActionStatus
    }
}

extension DescribeUpdateActionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeUpdateActionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeUpdateActionsOutputError: Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUpdateActionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeUpdateActionsOutputResponse(marker: \(String(describing: marker)), updateActions: \(String(describing: updateActions)))"}
}

extension DescribeUpdateActionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeUpdateActionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.marker = output.marker
            self.updateActions = output.updateActions
        } else {
            self.marker = nil
            self.updateActions = nil
        }
    }
}

public struct DescribeUpdateActionsOutputResponse: Equatable {
    /// <p>An optional marker returned from a prior request.
    ///            Use this marker for pagination of results from this operation. If this
    ///            parameter is specified, the response includes only records beyond the marker, up to the
    ///            value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>Returns a list of update actions</p>
    public let updateActions: [UpdateAction]?

    public init (
        marker: String? = nil,
        updateActions: [UpdateAction]? = nil
    )
    {
        self.marker = marker
        self.updateActions = updateActions
    }
}

struct DescribeUpdateActionsOutputResponseBody: Equatable {
    public let marker: String?
    public let updateActions: [UpdateAction]?
}

extension DescribeUpdateActionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case updateActions = "UpdateActions"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeUpdateActionsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.updateActions) {
            struct KeyVal0{struct UpdateAction{}}
            let updateActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.UpdateAction>.CodingKeys.self, forKey: .updateActions)
            if let updateActionsWrappedContainer = updateActionsWrappedContainer {
                let updateActionsContainer = try updateActionsWrappedContainer.decodeIfPresent([UpdateAction].self, forKey: .member)
                var updateActionsBuffer:[UpdateAction]? = nil
                if let updateActionsContainer = updateActionsContainer {
                    updateActionsBuffer = [UpdateAction]()
                    for structureContainer0 in updateActionsContainer {
                        updateActionsBuffer?.append(structureContainer0)
                    }
                }
                updateActions = updateActionsBuffer
            } else {
                updateActions = []
            }
        } else {
            updateActions = nil
        }
    }
}

public struct DescribeUserGroupsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeUserGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeUserGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeUserGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeUserGroupsInput>
    public typealias MOutput = OperationOutput<DescribeUserGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeUserGroupsOutputError>
}

extension DescribeUserGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeUserGroupsInput(marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)), userGroupId: \(String(describing: userGroupId)))"}
}

extension DescribeUserGroupsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let userGroupId = userGroupId {
            try container.encode(userGroupId, forKey: Key("UserGroupId"))
        }
        try container.encode("DescribeUserGroups", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeUserGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeUserGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeUserGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeUserGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeUserGroupsInput>
    public typealias MOutput = OperationOutput<DescribeUserGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeUserGroupsOutputError>
}

public struct DescribeUserGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeUserGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeUserGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeUserGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeUserGroupsInput>
    public typealias MOutput = OperationOutput<DescribeUserGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeUserGroupsOutputError>
}

public struct DescribeUserGroupsInput: Equatable {
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. ></p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. </p>
    public let maxRecords: Int?
    /// <p>The ID of the user group.</p>
    public let userGroupId: String?

    public init (
        marker: String? = nil,
        maxRecords: Int? = nil,
        userGroupId: String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.userGroupId = userGroupId
    }
}

extension DescribeUserGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeUserGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFoundFault" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeUserGroupsOutputError: Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUserGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeUserGroupsOutputResponse(marker: \(String(describing: marker)), userGroups: \(String(describing: userGroups)))"}
}

extension DescribeUserGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeUserGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.marker = output.marker
            self.userGroups = output.userGroups
        } else {
            self.marker = nil
            self.userGroups = nil
        }
    }
}

public struct DescribeUserGroupsOutputResponse: Equatable {
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. ></p>
    public let marker: String?
    /// <p>Returns a list of user groups.</p>
    public let userGroups: [UserGroup]?

    public init (
        marker: String? = nil,
        userGroups: [UserGroup]? = nil
    )
    {
        self.marker = marker
        self.userGroups = userGroups
    }
}

struct DescribeUserGroupsOutputResponseBody: Equatable {
    public let userGroups: [UserGroup]?
    public let marker: String?
}

extension DescribeUserGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case userGroups = "UserGroups"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeUserGroupsResult"))
        if containerValues.contains(.userGroups) {
            struct KeyVal0{struct member{}}
            let userGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroups)
            if let userGroupsWrappedContainer = userGroupsWrappedContainer {
                let userGroupsContainer = try userGroupsWrappedContainer.decodeIfPresent([UserGroup].self, forKey: .member)
                var userGroupsBuffer:[UserGroup]? = nil
                if let userGroupsContainer = userGroupsContainer {
                    userGroupsBuffer = [UserGroup]()
                    for structureContainer0 in userGroupsContainer {
                        userGroupsBuffer?.append(structureContainer0)
                    }
                }
                userGroups = userGroupsBuffer
            } else {
                userGroups = []
            }
        } else {
            userGroups = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

public struct DescribeUsersInputBodyMiddleware: Middleware {
    public let id: String = "DescribeUsersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeUsersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeUsersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeUsersInput>
    public typealias MOutput = OperationOutput<DescribeUsersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeUsersOutputError>
}

extension DescribeUsersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeUsersInput(engine: \(String(describing: engine)), filters: \(String(describing: filters)), marker: \(String(describing: marker)), maxRecords: \(String(describing: maxRecords)), userId: \(String(describing: userId)))"}
}

extension DescribeUsersInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let filters = filters {
            var filtersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Filters"))
            for (index0, filter0) in filters.enumerated() {
                try filtersContainer.encode(filter0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let userId = userId {
            try container.encode(userId, forKey: Key("UserId"))
        }
        try container.encode("DescribeUsers", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DescribeUsersInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeUsersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeUsersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeUsersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeUsersInput>
    public typealias MOutput = OperationOutput<DescribeUsersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeUsersOutputError>
}

public struct DescribeUsersInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeUsersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeUsersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeUsersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeUsersInput>
    public typealias MOutput = OperationOutput<DescribeUsersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeUsersOutputError>
}

public struct DescribeUsersInput: Equatable {
    /// <p>The Redis engine. </p>
    public let engine: String?
    /// <p>Filter to determine the list of User IDs to return.</p>
    public let filters: [Filter]?
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. ></p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. </p>
    public let maxRecords: Int?
    /// <p>The ID of the user.</p>
    public let userId: String?

    public init (
        engine: String? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        userId: String? = nil
    )
    {
        self.engine = engine
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.userId = userId
    }
}

extension DescribeUsersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeUsersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundFault" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeUsersOutputError: Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUsersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeUsersOutputResponse(marker: \(String(describing: marker)), users: \(String(describing: users)))"}
}

extension DescribeUsersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeUsersOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.marker = output.marker
            self.users = output.users
        } else {
            self.marker = nil
            self.users = nil
        }
    }
}

public struct DescribeUsersOutputResponse: Equatable {
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. ></p>
    public let marker: String?
    /// <p>A list of users.</p>
    public let users: [User]?

    public init (
        marker: String? = nil,
        users: [User]? = nil
    )
    {
        self.marker = marker
        self.users = users
    }
}

struct DescribeUsersOutputResponseBody: Equatable {
    public let users: [User]?
    public let marker: String?
}

extension DescribeUsersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case users = "Users"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeUsersResult"))
        if containerValues.contains(.users) {
            struct KeyVal0{struct member{}}
            let usersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .users)
            if let usersWrappedContainer = usersWrappedContainer {
                let usersContainer = try usersWrappedContainer.decodeIfPresent([User].self, forKey: .member)
                var usersBuffer:[User]? = nil
                if let usersContainer = usersContainer {
                    usersBuffer = [User]()
                    for structureContainer0 in usersContainer {
                        usersBuffer?.append(structureContainer0)
                    }
                }
                users = usersBuffer
            } else {
                users = []
            }
        } else {
            users = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DestinationDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cloudWatchLogsDetails = "CloudWatchLogsDetails"
        case kinesisFirehoseDetails = "KinesisFirehoseDetails"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cloudWatchLogsDetails = cloudWatchLogsDetails {
            try container.encode(cloudWatchLogsDetails, forKey: Key("CloudWatchLogsDetails"))
        }
        if let kinesisFirehoseDetails = kinesisFirehoseDetails {
            try container.encode(kinesisFirehoseDetails, forKey: Key("KinesisFirehoseDetails"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudWatchLogsDetailsDecoded = try containerValues.decodeIfPresent(CloudWatchLogsDestinationDetails.self, forKey: .cloudWatchLogsDetails)
        cloudWatchLogsDetails = cloudWatchLogsDetailsDecoded
        let kinesisFirehoseDetailsDecoded = try containerValues.decodeIfPresent(KinesisFirehoseDestinationDetails.self, forKey: .kinesisFirehoseDetails)
        kinesisFirehoseDetails = kinesisFirehoseDetailsDecoded
    }
}

extension DestinationDetails: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DestinationDetails(cloudWatchLogsDetails: \(String(describing: cloudWatchLogsDetails)), kinesisFirehoseDetails: \(String(describing: kinesisFirehoseDetails)))"}
}

/// <p>Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.</p>
public struct DestinationDetails: Equatable {
    /// <p>The configuration details of the CloudWatch Logs destination.</p>
    public let cloudWatchLogsDetails: CloudWatchLogsDestinationDetails?
    /// <p>The configuration details of the Kinesis Data Firehose destination.</p>
    public let kinesisFirehoseDetails: KinesisFirehoseDestinationDetails?

    public init (
        cloudWatchLogsDetails: CloudWatchLogsDestinationDetails? = nil,
        kinesisFirehoseDetails: KinesisFirehoseDestinationDetails? = nil
    )
    {
        self.cloudWatchLogsDetails = cloudWatchLogsDetails
        self.kinesisFirehoseDetails = kinesisFirehoseDetails
    }
}

public enum DestinationType {
    case cloudwatchlogs
    case kinesisfirehose
    case sdkUnknown(String)
}

extension DestinationType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DestinationType] {
        return [
            .cloudwatchlogs,
            .kinesisfirehose,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cloudwatchlogs: return "cloudwatch-logs"
        case .kinesisfirehose: return "kinesis-firehose"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DestinationType(rawValue: rawValue) ?? DestinationType.sdkUnknown(rawValue)
    }
}

public struct DisassociateGlobalReplicationGroupInputBodyMiddleware: Middleware {
    public let id: String = "DisassociateGlobalReplicationGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisassociateGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DisassociateGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisassociateGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<DisassociateGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisassociateGlobalReplicationGroupOutputError>
}

extension DisassociateGlobalReplicationGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisassociateGlobalReplicationGroupInput(globalReplicationGroupId: \(String(describing: globalReplicationGroupId)), replicationGroupId: \(String(describing: replicationGroupId)), replicationGroupRegion: \(String(describing: replicationGroupRegion)))"}
}

extension DisassociateGlobalReplicationGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: Key("GlobalReplicationGroupId"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let replicationGroupRegion = replicationGroupRegion {
            try container.encode(replicationGroupRegion, forKey: Key("ReplicationGroupRegion"))
        }
        try container.encode("DisassociateGlobalReplicationGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct DisassociateGlobalReplicationGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DisassociateGlobalReplicationGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisassociateGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DisassociateGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisassociateGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<DisassociateGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisassociateGlobalReplicationGroupOutputError>
}

public struct DisassociateGlobalReplicationGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DisassociateGlobalReplicationGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisassociateGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DisassociateGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisassociateGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<DisassociateGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisassociateGlobalReplicationGroupOutputError>
}

public struct DisassociateGlobalReplicationGroupInput: Equatable {
    /// <p>The name of the Global datastore</p>
    public let globalReplicationGroupId: String?
    /// <p>The name of the secondary cluster you wish to remove from the Global datastore</p>
    public let replicationGroupId: String?
    /// <p>The AWS region of secondary cluster you wish to remove from the Global datastore</p>
    public let replicationGroupRegion: String?

    public init (
        globalReplicationGroupId: String? = nil,
        replicationGroupId: String? = nil,
        replicationGroupRegion: String? = nil
    )
    {
        self.globalReplicationGroupId = globalReplicationGroupId
        self.replicationGroupId = replicationGroupId
        self.replicationGroupRegion = replicationGroupRegion
    }
}

extension DisassociateGlobalReplicationGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DisassociateGlobalReplicationGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupStateFault" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateGlobalReplicationGroupOutputError: Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateGlobalReplicationGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisassociateGlobalReplicationGroupOutputResponse(globalReplicationGroup: \(String(describing: globalReplicationGroup)))"}
}

extension DisassociateGlobalReplicationGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DisassociateGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct DisassociateGlobalReplicationGroupOutputResponse: Equatable {
    /// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different AWS region. The secondary cluster accepts only reads. The primary
    ///         cluster automatically replicates updates to the secondary cluster.</p>
    ///
    ///
    ///         <ul>
    ///             <li>
    ///                <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore,
    ///             which is what you use to associate a secondary cluster.</p>
    ///             </li>
    ///          </ul>
    public let globalReplicationGroup: GlobalReplicationGroup?

    public init (
        globalReplicationGroup: GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct DisassociateGlobalReplicationGroupOutputResponseBody: Equatable {
    public let globalReplicationGroup: GlobalReplicationGroup?
}

extension DisassociateGlobalReplicationGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DisassociateGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

extension DuplicateUserNameFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DuplicateUserNameFault(message: \(String(describing: message)))"}
}

extension DuplicateUserNameFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<DuplicateUserNameFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A user with this username already exists.</p>
public struct DuplicateUserNameFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateUserNameFaultBody: Equatable {
    public let message: String?
}

extension DuplicateUserNameFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EC2SecurityGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eC2SecurityGroupName = "EC2SecurityGroupName"
        case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let eC2SecurityGroupName = eC2SecurityGroupName {
            try container.encode(eC2SecurityGroupName, forKey: Key("EC2SecurityGroupName"))
        }
        if let eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId {
            try container.encode(eC2SecurityGroupOwnerId, forKey: Key("EC2SecurityGroupOwnerId"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let eC2SecurityGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eC2SecurityGroupName)
        eC2SecurityGroupName = eC2SecurityGroupNameDecoded
        let eC2SecurityGroupOwnerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eC2SecurityGroupOwnerId)
        eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerIdDecoded
    }
}

extension EC2SecurityGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EC2SecurityGroup(eC2SecurityGroupName: \(String(describing: eC2SecurityGroupName)), eC2SecurityGroupOwnerId: \(String(describing: eC2SecurityGroupOwnerId)), status: \(String(describing: status)))"}
}

/// <p>Provides ownership and status information for an Amazon EC2 security group.</p>
public struct EC2SecurityGroup: Equatable {
    /// <p>The name of the Amazon EC2 security group.</p>
    public let eC2SecurityGroupName: String?
    /// <p>The AWS account ID of the Amazon EC2 security group owner.</p>
    public let eC2SecurityGroupOwnerId: String?
    /// <p>The status of the Amazon EC2 security group.</p>
    public let status: String?

    public init (
        eC2SecurityGroupName: String? = nil,
        eC2SecurityGroupOwnerId: String? = nil,
        status: String? = nil
    )
    {
        self.eC2SecurityGroupName = eC2SecurityGroupName
        self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
        self.status = status
    }
}

extension Endpoint: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case address = "Address"
        case port = "Port"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let address = address {
            try container.encode(address, forKey: Key("Address"))
        }
        if port != 0 {
            try container.encode(port, forKey: Key("Port"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .address)
        address = addressDecoded
        let portDecoded = try containerValues.decode(Int.self, forKey: .port)
        port = portDecoded
    }
}

extension Endpoint: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Endpoint(address: \(String(describing: address)), port: \(String(describing: port)))"}
}

/// <p>Represents the information required for client programs to connect to a cache node.</p>
public struct Endpoint: Equatable {
    /// <p>The DNS hostname of the cache node.</p>
    public let address: String?
    /// <p>The port number that the cache engine is listening on.</p>
    public let port: Int

    public init (
        address: String? = nil,
        port: Int = 0
    )
    {
        self.address = address
        self.port = port
    }
}

extension EngineDefaults: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheNodeTypeSpecificParameters = "CacheNodeTypeSpecificParameters"
        case cacheParameterGroupFamily = "CacheParameterGroupFamily"
        case marker = "Marker"
        case parameters = "Parameters"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParameters {
            var cacheNodeTypeSpecificParametersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheNodeTypeSpecificParameters"))
            for (index0, cachenodetypespecificparameter0) in cacheNodeTypeSpecificParameters.enumerated() {
                try cacheNodeTypeSpecificParametersContainer.encode(cachenodetypespecificparameter0, forKey: Key("CacheNodeTypeSpecificParameter.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheParameterGroupFamily = cacheParameterGroupFamily {
            try container.encode(cacheParameterGroupFamily, forKey: Key("CacheParameterGroupFamily"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let parameters = parameters {
            var parametersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Parameters"))
            for (index0, parameter0) in parameters.enumerated() {
                try parametersContainer.encode(parameter0, forKey: Key("Parameter.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheParameterGroupFamilyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheParameterGroupFamily)
        cacheParameterGroupFamily = cacheParameterGroupFamilyDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct Parameter{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Parameter>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([Parameter].self, forKey: .member)
                var parametersBuffer:[Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        if containerValues.contains(.cacheNodeTypeSpecificParameters) {
            struct KeyVal0{struct CacheNodeTypeSpecificParameter{}}
            let cacheNodeTypeSpecificParametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeTypeSpecificParameter>.CodingKeys.self, forKey: .cacheNodeTypeSpecificParameters)
            if let cacheNodeTypeSpecificParametersWrappedContainer = cacheNodeTypeSpecificParametersWrappedContainer {
                let cacheNodeTypeSpecificParametersContainer = try cacheNodeTypeSpecificParametersWrappedContainer.decodeIfPresent([CacheNodeTypeSpecificParameter].self, forKey: .member)
                var cacheNodeTypeSpecificParametersBuffer:[CacheNodeTypeSpecificParameter]? = nil
                if let cacheNodeTypeSpecificParametersContainer = cacheNodeTypeSpecificParametersContainer {
                    cacheNodeTypeSpecificParametersBuffer = [CacheNodeTypeSpecificParameter]()
                    for structureContainer0 in cacheNodeTypeSpecificParametersContainer {
                        cacheNodeTypeSpecificParametersBuffer?.append(structureContainer0)
                    }
                }
                cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParametersBuffer
            } else {
                cacheNodeTypeSpecificParameters = []
            }
        } else {
            cacheNodeTypeSpecificParameters = nil
        }
    }
}

extension EngineDefaults: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EngineDefaults(cacheNodeTypeSpecificParameters: \(String(describing: cacheNodeTypeSpecificParameters)), cacheParameterGroupFamily: \(String(describing: cacheParameterGroupFamily)), marker: \(String(describing: marker)), parameters: \(String(describing: parameters)))"}
}

/// <p>Represents the output of a <code>DescribeEngineDefaultParameters</code> operation.</p>
public struct EngineDefaults: Equatable {
    /// <p>A list of parameters specific to a particular cache node type. Each element in the list contains detailed information about one parameter.</p>
    public let cacheNodeTypeSpecificParameters: [CacheNodeTypeSpecificParameter]?
    /// <p>Specifies the name of the cache parameter group family to which the engine default parameters apply.</p>
    ///         <p>Valid values are:
    ///     <code>memcached1.4</code> |
    ///      <code>memcached1.5</code> |
    ///       <code>memcached1.6</code> |
    ///     <code>redis2.6</code> |
    ///     <code>redis2.8</code> |
    ///     <code>redis3.2</code> |
    ///     <code>redis4.0</code> |
    ///      <code>redis5.0</code> |
    ///       <code>redis6.x</code> |
    ///     </p>
    public let cacheParameterGroupFamily: String?
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    public let marker: String?
    /// <p>Contains a list of engine default parameters.</p>
    public let parameters: [Parameter]?

    public init (
        cacheNodeTypeSpecificParameters: [CacheNodeTypeSpecificParameter]? = nil,
        cacheParameterGroupFamily: String? = nil,
        marker: String? = nil,
        parameters: [Parameter]? = nil
    )
    {
        self.cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParameters
        self.cacheParameterGroupFamily = cacheParameterGroupFamily
        self.marker = marker
        self.parameters = parameters
    }
}

extension Event: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case date = "Date"
        case message = "Message"
        case sourceIdentifier = "SourceIdentifier"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let date = date {
            try container.encode(TimestampWrapper(date, format: .dateTime), forKey: Key("date"))
        }
        if let message = message {
            try container.encode(message, forKey: Key("Message"))
        }
        if let sourceIdentifier = sourceIdentifier {
            try container.encode(sourceIdentifier, forKey: Key("SourceIdentifier"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: Key("SourceType"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceIdentifier)
        sourceIdentifier = sourceIdentifierDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let dateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .date)
        var dateBuffer:Date? = nil
        if let dateDecoded = dateDecoded {
            dateBuffer = try TimestampWrapperDecoder.parseDateStringValue(dateDecoded, format: .dateTime)
        }
        date = dateBuffer
    }
}

extension Event: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Event(date: \(String(describing: date)), message: \(String(describing: message)), sourceIdentifier: \(String(describing: sourceIdentifier)), sourceType: \(String(describing: sourceType)))"}
}

/// <p>Represents a single occurrence of something interesting within the system.
///             Some examples of events are creating a cluster, adding or removing a cache node, or rebooting a node.</p>
public struct Event: Equatable {
    /// <p>The date and time when the event occurred.</p>
    public let date: Date?
    /// <p>The text of the event.</p>
    public let message: String?
    /// <p>The identifier for the source of the event.
    ///             For example, if the event occurred at the cluster level,
    ///             the identifier would be the name of the cluster.</p>
    public let sourceIdentifier: String?
    /// <p>Specifies the origin of this event - a cluster, a parameter group, a security group, etc.</p>
    public let sourceType: SourceType?

    public init (
        date: Date? = nil,
        message: String? = nil,
        sourceIdentifier: String? = nil,
        sourceType: SourceType? = nil
    )
    {
        self.date = date
        self.message = message
        self.sourceIdentifier = sourceIdentifier
        self.sourceType = sourceType
    }
}

public struct FailoverGlobalReplicationGroupInputBodyMiddleware: Middleware {
    public let id: String = "FailoverGlobalReplicationGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<FailoverGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<FailoverGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<FailoverGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<FailoverGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<FailoverGlobalReplicationGroupOutputError>
}

extension FailoverGlobalReplicationGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FailoverGlobalReplicationGroupInput(globalReplicationGroupId: \(String(describing: globalReplicationGroupId)), primaryRegion: \(String(describing: primaryRegion)), primaryReplicationGroupId: \(String(describing: primaryReplicationGroupId)))"}
}

extension FailoverGlobalReplicationGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: Key("GlobalReplicationGroupId"))
        }
        if let primaryRegion = primaryRegion {
            try container.encode(primaryRegion, forKey: Key("PrimaryRegion"))
        }
        if let primaryReplicationGroupId = primaryReplicationGroupId {
            try container.encode(primaryReplicationGroupId, forKey: Key("PrimaryReplicationGroupId"))
        }
        try container.encode("FailoverGlobalReplicationGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct FailoverGlobalReplicationGroupInputHeadersMiddleware: Middleware {
    public let id: String = "FailoverGlobalReplicationGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<FailoverGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<FailoverGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<FailoverGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<FailoverGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<FailoverGlobalReplicationGroupOutputError>
}

public struct FailoverGlobalReplicationGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "FailoverGlobalReplicationGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<FailoverGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<FailoverGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<FailoverGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<FailoverGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<FailoverGlobalReplicationGroupOutputError>
}

public struct FailoverGlobalReplicationGroupInput: Equatable {
    /// <p>The name of the Global datastore</p>
    public let globalReplicationGroupId: String?
    /// <p>The AWS region of the primary cluster of the Global datastore</p>
    public let primaryRegion: String?
    /// <p>The name of the primary replication group</p>
    public let primaryReplicationGroupId: String?

    public init (
        globalReplicationGroupId: String? = nil,
        primaryRegion: String? = nil,
        primaryReplicationGroupId: String? = nil
    )
    {
        self.globalReplicationGroupId = globalReplicationGroupId
        self.primaryRegion = primaryRegion
        self.primaryReplicationGroupId = primaryReplicationGroupId
    }
}

extension FailoverGlobalReplicationGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension FailoverGlobalReplicationGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupStateFault" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum FailoverGlobalReplicationGroupOutputError: Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension FailoverGlobalReplicationGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FailoverGlobalReplicationGroupOutputResponse(globalReplicationGroup: \(String(describing: globalReplicationGroup)))"}
}

extension FailoverGlobalReplicationGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: FailoverGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct FailoverGlobalReplicationGroupOutputResponse: Equatable {
    /// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different AWS region. The secondary cluster accepts only reads. The primary
    ///         cluster automatically replicates updates to the secondary cluster.</p>
    ///
    ///
    ///         <ul>
    ///             <li>
    ///                <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore,
    ///             which is what you use to associate a secondary cluster.</p>
    ///             </li>
    ///          </ul>
    public let globalReplicationGroup: GlobalReplicationGroup?

    public init (
        globalReplicationGroup: GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct FailoverGlobalReplicationGroupOutputResponseBody: Equatable {
    public let globalReplicationGroup: GlobalReplicationGroup?
}

extension FailoverGlobalReplicationGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("FailoverGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

extension Filter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let name = name {
            try container.encode(name, forKey: Key("Name"))
        }
        if let values = values {
            var valuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Values"))
            for (index0, filtervalue0) in values.enumerated() {
                try valuesContainer.encode(filtervalue0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var valuesBuffer:[String]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [String]()
                    for stringContainer0 in valuesContainer {
                        valuesBuffer?.append(stringContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
    }
}

extension Filter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Filter(name: \(String(describing: name)), values: \(String(describing: values)))"}
}

/// <p>Used to streamline results of a search based on the property being filtered.</p>
public struct Filter: Equatable {
    /// <p>The property being filtered. For example, UserId.</p>
    public let name: String?
    /// <p>The property values to filter on. For example, "user-123".</p>
    public let values: [String]?

    public init (
        name: String? = nil,
        values: [String]? = nil
    )
    {
        self.name = name
        self.values = values
    }
}

extension GlobalNodeGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalNodeGroupId = "GlobalNodeGroupId"
        case slots = "Slots"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let globalNodeGroupId = globalNodeGroupId {
            try container.encode(globalNodeGroupId, forKey: Key("GlobalNodeGroupId"))
        }
        if let slots = slots {
            try container.encode(slots, forKey: Key("Slots"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalNodeGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalNodeGroupId)
        globalNodeGroupId = globalNodeGroupIdDecoded
        let slotsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .slots)
        slots = slotsDecoded
    }
}

extension GlobalNodeGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalNodeGroup(globalNodeGroupId: \(String(describing: globalNodeGroupId)), slots: \(String(describing: slots)))"}
}

/// <p>Indicates the slot configuration and global identifier for a slice group.</p>
public struct GlobalNodeGroup: Equatable {
    /// <p>The name of the global node group</p>
    public let globalNodeGroupId: String?
    /// <p>The keyspace for this node group</p>
    public let slots: String?

    public init (
        globalNodeGroupId: String? = nil,
        slots: String? = nil
    )
    {
        self.globalNodeGroupId = globalNodeGroupId
        self.slots = slots
    }
}

extension GlobalReplicationGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case atRestEncryptionEnabled = "AtRestEncryptionEnabled"
        case authTokenEnabled = "AuthTokenEnabled"
        case cacheNodeType = "CacheNodeType"
        case clusterEnabled = "ClusterEnabled"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case globalNodeGroups = "GlobalNodeGroups"
        case globalReplicationGroupDescription = "GlobalReplicationGroupDescription"
        case globalReplicationGroupId = "GlobalReplicationGroupId"
        case members = "Members"
        case status = "Status"
        case transitEncryptionEnabled = "TransitEncryptionEnabled"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: Key("ARN"))
        }
        if let atRestEncryptionEnabled = atRestEncryptionEnabled {
            try container.encode(atRestEncryptionEnabled, forKey: Key("AtRestEncryptionEnabled"))
        }
        if let authTokenEnabled = authTokenEnabled {
            try container.encode(authTokenEnabled, forKey: Key("AuthTokenEnabled"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let clusterEnabled = clusterEnabled {
            try container.encode(clusterEnabled, forKey: Key("ClusterEnabled"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let globalNodeGroups = globalNodeGroups {
            var globalNodeGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("GlobalNodeGroups"))
            for (index0, globalnodegroup0) in globalNodeGroups.enumerated() {
                try globalNodeGroupsContainer.encode(globalnodegroup0, forKey: Key("GlobalNodeGroup.\(index0.advanced(by: 1))"))
            }
        }
        if let globalReplicationGroupDescription = globalReplicationGroupDescription {
            try container.encode(globalReplicationGroupDescription, forKey: Key("GlobalReplicationGroupDescription"))
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: Key("GlobalReplicationGroupId"))
        }
        if let members = members {
            var membersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Members"))
            for (index0, globalreplicationgroupmember0) in members.enumerated() {
                try membersContainer.encode(globalreplicationgroupmember0, forKey: Key("GlobalReplicationGroupMember.\(index0.advanced(by: 1))"))
            }
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let transitEncryptionEnabled = transitEncryptionEnabled {
            try container.encode(transitEncryptionEnabled, forKey: Key("TransitEncryptionEnabled"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalReplicationGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalReplicationGroupId)
        globalReplicationGroupId = globalReplicationGroupIdDecoded
        let globalReplicationGroupDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalReplicationGroupDescription)
        globalReplicationGroupDescription = globalReplicationGroupDescriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        if containerValues.contains(.members) {
            struct KeyVal0{struct GlobalReplicationGroupMember{}}
            let membersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GlobalReplicationGroupMember>.CodingKeys.self, forKey: .members)
            if let membersWrappedContainer = membersWrappedContainer {
                let membersContainer = try membersWrappedContainer.decodeIfPresent([GlobalReplicationGroupMember].self, forKey: .member)
                var membersBuffer:[GlobalReplicationGroupMember]? = nil
                if let membersContainer = membersContainer {
                    membersBuffer = [GlobalReplicationGroupMember]()
                    for structureContainer0 in membersContainer {
                        membersBuffer?.append(structureContainer0)
                    }
                }
                members = membersBuffer
            } else {
                members = []
            }
        } else {
            members = nil
        }
        let clusterEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .clusterEnabled)
        clusterEnabled = clusterEnabledDecoded
        if containerValues.contains(.globalNodeGroups) {
            struct KeyVal0{struct GlobalNodeGroup{}}
            let globalNodeGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GlobalNodeGroup>.CodingKeys.self, forKey: .globalNodeGroups)
            if let globalNodeGroupsWrappedContainer = globalNodeGroupsWrappedContainer {
                let globalNodeGroupsContainer = try globalNodeGroupsWrappedContainer.decodeIfPresent([GlobalNodeGroup].self, forKey: .member)
                var globalNodeGroupsBuffer:[GlobalNodeGroup]? = nil
                if let globalNodeGroupsContainer = globalNodeGroupsContainer {
                    globalNodeGroupsBuffer = [GlobalNodeGroup]()
                    for structureContainer0 in globalNodeGroupsContainer {
                        globalNodeGroupsBuffer?.append(structureContainer0)
                    }
                }
                globalNodeGroups = globalNodeGroupsBuffer
            } else {
                globalNodeGroups = []
            }
        } else {
            globalNodeGroups = nil
        }
        let authTokenEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .authTokenEnabled)
        authTokenEnabled = authTokenEnabledDecoded
        let transitEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .transitEncryptionEnabled)
        transitEncryptionEnabled = transitEncryptionEnabledDecoded
        let atRestEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .atRestEncryptionEnabled)
        atRestEncryptionEnabled = atRestEncryptionEnabledDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension GlobalReplicationGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalReplicationGroup(aRN: \(String(describing: aRN)), atRestEncryptionEnabled: \(String(describing: atRestEncryptionEnabled)), authTokenEnabled: \(String(describing: authTokenEnabled)), cacheNodeType: \(String(describing: cacheNodeType)), clusterEnabled: \(String(describing: clusterEnabled)), engine: \(String(describing: engine)), engineVersion: \(String(describing: engineVersion)), globalNodeGroups: \(String(describing: globalNodeGroups)), globalReplicationGroupDescription: \(String(describing: globalReplicationGroupDescription)), globalReplicationGroupId: \(String(describing: globalReplicationGroupId)), members: \(String(describing: members)), status: \(String(describing: status)), transitEncryptionEnabled: \(String(describing: transitEncryptionEnabled)))"}
}

/// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different AWS region. The secondary cluster accepts only reads. The primary
///         cluster automatically replicates updates to the secondary cluster.</p>
///
///
///         <ul>
///             <li>
///                <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore,
///             which is what you use to associate a secondary cluster.</p>
///             </li>
///          </ul>
public struct GlobalReplicationGroup: Equatable {
    /// <p>The ARN (Amazon Resource Name) of the global replication group.</p>
    public let aRN: String?
    /// <p>A flag that enables encryption at rest when set to <code>true</code>.</p>
    ///             <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication
    ///                 group is created.
    ///                 To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to
    ///                 <code>true</code> when you create the replication group. </p>
    ///             <p>
    ///             <b>Required:</b>
    ///                 Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    public let atRestEncryptionEnabled: Bool?
    /// <p>A flag that enables using an <code>AuthToken</code> (password)
    ///             when issuing Redis commands.</p>
    ///             <p>Default: <code>false</code>
    ///          </p>
    public let authTokenEnabled: Bool?
    /// <p>The cache node type of the Global datastore</p>
    public let cacheNodeType: String?
    /// <p>A flag that indicates whether the Global datastore is cluster enabled.</p>
    public let clusterEnabled: Bool?
    /// <p>The Elasticache engine. For Redis only.</p>
    public let engine: String?
    /// <p>The Elasticache Redis engine version.</p>
    public let engineVersion: String?
    /// <p>Indicates the slot configuration and global identifier for each slice group.</p>
    public let globalNodeGroups: [GlobalNodeGroup]?
    /// <p>The optional description of the Global datastore</p>
    public let globalReplicationGroupDescription: String?
    /// <p>The name of the Global datastore</p>
    public let globalReplicationGroupId: String?
    /// <p>The replication groups that comprise the Global datastore.</p>
    public let members: [GlobalReplicationGroupMember]?
    /// <p>The status of the Global datastore</p>
    public let status: String?
    /// <p>A flag that enables in-transit encryption when set to true.
    ///
    ///             You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to true when you create a cluster. </p>
    ///         <p>
    ///             <b>Required:</b>
    ///             Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    public let transitEncryptionEnabled: Bool?

    public init (
        aRN: String? = nil,
        atRestEncryptionEnabled: Bool? = nil,
        authTokenEnabled: Bool? = nil,
        cacheNodeType: String? = nil,
        clusterEnabled: Bool? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        globalNodeGroups: [GlobalNodeGroup]? = nil,
        globalReplicationGroupDescription: String? = nil,
        globalReplicationGroupId: String? = nil,
        members: [GlobalReplicationGroupMember]? = nil,
        status: String? = nil,
        transitEncryptionEnabled: Bool? = nil
    )
    {
        self.aRN = aRN
        self.atRestEncryptionEnabled = atRestEncryptionEnabled
        self.authTokenEnabled = authTokenEnabled
        self.cacheNodeType = cacheNodeType
        self.clusterEnabled = clusterEnabled
        self.engine = engine
        self.engineVersion = engineVersion
        self.globalNodeGroups = globalNodeGroups
        self.globalReplicationGroupDescription = globalReplicationGroupDescription
        self.globalReplicationGroupId = globalReplicationGroupId
        self.members = members
        self.status = status
        self.transitEncryptionEnabled = transitEncryptionEnabled
    }
}

extension GlobalReplicationGroupAlreadyExistsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalReplicationGroupAlreadyExistsFault(message: \(String(describing: message)))"}
}

extension GlobalReplicationGroupAlreadyExistsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<GlobalReplicationGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The Global datastore name already exists.</p>
public struct GlobalReplicationGroupAlreadyExistsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct GlobalReplicationGroupAlreadyExistsFaultBody: Equatable {
    public let message: String?
}

extension GlobalReplicationGroupAlreadyExistsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlobalReplicationGroupInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalReplicationGroupId = "GlobalReplicationGroupId"
        case globalReplicationGroupMemberRole = "GlobalReplicationGroupMemberRole"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: Key("GlobalReplicationGroupId"))
        }
        if let globalReplicationGroupMemberRole = globalReplicationGroupMemberRole {
            try container.encode(globalReplicationGroupMemberRole, forKey: Key("GlobalReplicationGroupMemberRole"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalReplicationGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalReplicationGroupId)
        globalReplicationGroupId = globalReplicationGroupIdDecoded
        let globalReplicationGroupMemberRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalReplicationGroupMemberRole)
        globalReplicationGroupMemberRole = globalReplicationGroupMemberRoleDecoded
    }
}

extension GlobalReplicationGroupInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalReplicationGroupInfo(globalReplicationGroupId: \(String(describing: globalReplicationGroupId)), globalReplicationGroupMemberRole: \(String(describing: globalReplicationGroupMemberRole)))"}
}

/// <p>The name of the Global datastore and role of this replication group in the Global datastore.</p>
public struct GlobalReplicationGroupInfo: Equatable {
    /// <p>The name of the Global datastore</p>
    public let globalReplicationGroupId: String?
    /// <p>The role of the replication group in a Global datastore. Can be primary or secondary.</p>
    public let globalReplicationGroupMemberRole: String?

    public init (
        globalReplicationGroupId: String? = nil,
        globalReplicationGroupMemberRole: String? = nil
    )
    {
        self.globalReplicationGroupId = globalReplicationGroupId
        self.globalReplicationGroupMemberRole = globalReplicationGroupMemberRole
    }
}

extension GlobalReplicationGroupMember: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case automaticFailover = "AutomaticFailover"
        case replicationGroupId = "ReplicationGroupId"
        case replicationGroupRegion = "ReplicationGroupRegion"
        case role = "Role"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let automaticFailover = automaticFailover {
            try container.encode(automaticFailover, forKey: Key("AutomaticFailover"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let replicationGroupRegion = replicationGroupRegion {
            try container.encode(replicationGroupRegion, forKey: Key("ReplicationGroupRegion"))
        }
        if let role = role {
            try container.encode(role, forKey: Key("Role"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let replicationGroupRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationGroupRegion)
        replicationGroupRegion = replicationGroupRegionDecoded
        let roleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .role)
        role = roleDecoded
        let automaticFailoverDecoded = try containerValues.decodeIfPresent(AutomaticFailoverStatus.self, forKey: .automaticFailover)
        automaticFailover = automaticFailoverDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
    }
}

extension GlobalReplicationGroupMember: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalReplicationGroupMember(automaticFailover: \(String(describing: automaticFailover)), replicationGroupId: \(String(describing: replicationGroupId)), replicationGroupRegion: \(String(describing: replicationGroupRegion)), role: \(String(describing: role)), status: \(String(describing: status)))"}
}

/// <p>A member of a Global datastore. It contains the Replication Group Id, the AWS region and the role of the replication group. </p>
public struct GlobalReplicationGroupMember: Equatable {
    /// <p>Indicates whether automatic failover is enabled for the replication group.</p>
    public let automaticFailover: AutomaticFailoverStatus?
    /// <p>The replication group id of the Global datastore member.</p>
    public let replicationGroupId: String?
    /// <p>The AWS region of the Global datastore member.</p>
    public let replicationGroupRegion: String?
    /// <p>Indicates the role of the replication group, primary or secondary.</p>
    public let role: String?
    /// <p>The status of the membership of the replication group.</p>
    public let status: String?

    public init (
        automaticFailover: AutomaticFailoverStatus? = nil,
        replicationGroupId: String? = nil,
        replicationGroupRegion: String? = nil,
        role: String? = nil,
        status: String? = nil
    )
    {
        self.automaticFailover = automaticFailover
        self.replicationGroupId = replicationGroupId
        self.replicationGroupRegion = replicationGroupRegion
        self.role = role
        self.status = status
    }
}

extension GlobalReplicationGroupNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalReplicationGroupNotFoundFault(message: \(String(describing: message)))"}
}

extension GlobalReplicationGroupNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<GlobalReplicationGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The Global datastore does not exist</p>
public struct GlobalReplicationGroupNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct GlobalReplicationGroupNotFoundFaultBody: Equatable {
    public let message: String?
}

extension GlobalReplicationGroupNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct IncreaseNodeGroupsInGlobalReplicationGroupInputBodyMiddleware: Middleware {
    public let id: String = "IncreaseNodeGroupsInGlobalReplicationGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IncreaseNodeGroupsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IncreaseNodeGroupsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IncreaseNodeGroupsInGlobalReplicationGroupOutputError>
}

extension IncreaseNodeGroupsInGlobalReplicationGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IncreaseNodeGroupsInGlobalReplicationGroupInput(applyImmediately: \(String(describing: applyImmediately)), globalReplicationGroupId: \(String(describing: globalReplicationGroupId)), nodeGroupCount: \(String(describing: nodeGroupCount)), regionalConfigurations: \(String(describing: regionalConfigurations)))"}
}

extension IncreaseNodeGroupsInGlobalReplicationGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: Key("ApplyImmediately"))
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: Key("GlobalReplicationGroupId"))
        }
        if nodeGroupCount != 0 {
            try container.encode(nodeGroupCount, forKey: Key("NodeGroupCount"))
        }
        if let regionalConfigurations = regionalConfigurations {
            var regionalConfigurationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("RegionalConfigurations"))
            for (index0, regionalconfiguration0) in regionalConfigurations.enumerated() {
                try regionalConfigurationsContainer.encode(regionalconfiguration0, forKey: Key("RegionalConfiguration.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("IncreaseNodeGroupsInGlobalReplicationGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct IncreaseNodeGroupsInGlobalReplicationGroupInputHeadersMiddleware: Middleware {
    public let id: String = "IncreaseNodeGroupsInGlobalReplicationGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IncreaseNodeGroupsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IncreaseNodeGroupsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IncreaseNodeGroupsInGlobalReplicationGroupOutputError>
}

public struct IncreaseNodeGroupsInGlobalReplicationGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "IncreaseNodeGroupsInGlobalReplicationGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IncreaseNodeGroupsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IncreaseNodeGroupsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IncreaseNodeGroupsInGlobalReplicationGroupOutputError>
}

public struct IncreaseNodeGroupsInGlobalReplicationGroupInput: Equatable {
    /// <p>Indicates that the process begins immediately. At present, the only permitted value for this parameter is true.</p>
    public let applyImmediately: Bool
    /// <p>The name of the Global datastore</p>
    public let globalReplicationGroupId: String?
    /// <p>The number of node groups you wish to add</p>
    public let nodeGroupCount: Int
    /// <p>Describes the replication group IDs, the AWS regions where they are stored and the shard configuration for each that comprise the Global datastore</p>
    public let regionalConfigurations: [RegionalConfiguration]?

    public init (
        applyImmediately: Bool = false,
        globalReplicationGroupId: String? = nil,
        nodeGroupCount: Int = 0,
        regionalConfigurations: [RegionalConfiguration]? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.globalReplicationGroupId = globalReplicationGroupId
        self.nodeGroupCount = nodeGroupCount
        self.regionalConfigurations = regionalConfigurations
    }
}

extension IncreaseNodeGroupsInGlobalReplicationGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension IncreaseNodeGroupsInGlobalReplicationGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupStateFault" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum IncreaseNodeGroupsInGlobalReplicationGroupOutputError: Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse(globalReplicationGroup: \(String(describing: globalReplicationGroup)))"}
}

extension IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: IncreaseNodeGroupsInGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse: Equatable {
    /// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different AWS region. The secondary cluster accepts only reads. The primary
    ///         cluster automatically replicates updates to the secondary cluster.</p>
    ///
    ///
    ///         <ul>
    ///             <li>
    ///                <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore,
    ///             which is what you use to associate a secondary cluster.</p>
    ///             </li>
    ///          </ul>
    public let globalReplicationGroup: GlobalReplicationGroup?

    public init (
        globalReplicationGroup: GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct IncreaseNodeGroupsInGlobalReplicationGroupOutputResponseBody: Equatable {
    public let globalReplicationGroup: GlobalReplicationGroup?
}

extension IncreaseNodeGroupsInGlobalReplicationGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("IncreaseNodeGroupsInGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

public struct IncreaseReplicaCountInputBodyMiddleware: Middleware {
    public let id: String = "IncreaseReplicaCountInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IncreaseReplicaCountInput>,
                  next: H) -> Swift.Result<OperationOutput<IncreaseReplicaCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IncreaseReplicaCountInput>
    public typealias MOutput = OperationOutput<IncreaseReplicaCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IncreaseReplicaCountOutputError>
}

extension IncreaseReplicaCountInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IncreaseReplicaCountInput(applyImmediately: \(String(describing: applyImmediately)), newReplicaCount: \(String(describing: newReplicaCount)), replicaConfiguration: \(String(describing: replicaConfiguration)), replicationGroupId: \(String(describing: replicationGroupId)))"}
}

extension IncreaseReplicaCountInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: Key("ApplyImmediately"))
        }
        if let newReplicaCount = newReplicaCount {
            try container.encode(newReplicaCount, forKey: Key("NewReplicaCount"))
        }
        if let replicaConfiguration = replicaConfiguration {
            var replicaConfigurationContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReplicaConfiguration"))
            for (index0, configureshard0) in replicaConfiguration.enumerated() {
                try replicaConfigurationContainer.encode(configureshard0, forKey: Key("ConfigureShard.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        try container.encode("IncreaseReplicaCount", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct IncreaseReplicaCountInputHeadersMiddleware: Middleware {
    public let id: String = "IncreaseReplicaCountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IncreaseReplicaCountInput>,
                  next: H) -> Swift.Result<OperationOutput<IncreaseReplicaCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IncreaseReplicaCountInput>
    public typealias MOutput = OperationOutput<IncreaseReplicaCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IncreaseReplicaCountOutputError>
}

public struct IncreaseReplicaCountInputQueryItemMiddleware: Middleware {
    public let id: String = "IncreaseReplicaCountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IncreaseReplicaCountInput>,
                  next: H) -> Swift.Result<OperationOutput<IncreaseReplicaCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IncreaseReplicaCountInput>
    public typealias MOutput = OperationOutput<IncreaseReplicaCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IncreaseReplicaCountOutputError>
}

public struct IncreaseReplicaCountInput: Equatable {
    /// <p>If <code>True</code>, the number of replica nodes is increased immediately.
    ///
    ///             <code>ApplyImmediately=False</code> is not currently supported.</p>
    public let applyImmediately: Bool
    /// <p>The number of read replica nodes you want at the completion of this operation.
    ///             For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the
    ///             replication group. For Redis (cluster mode enabled) replication groups, this is the number of
    ///             replica nodes in each of the replication group's node groups.</p>
    public let newReplicaCount: Int?
    /// <p>A list of <code>ConfigureShard</code> objects that can be used to configure each shard
    ///             in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members:
    ///             <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.</p>
    public let replicaConfiguration: [ConfigureShard]?
    /// <p>The id of the replication group to which you want to add replica nodes.</p>
    public let replicationGroupId: String?

    public init (
        applyImmediately: Bool = false,
        newReplicaCount: Int? = nil,
        replicaConfiguration: [ConfigureShard]? = nil,
        replicationGroupId: String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.newReplicaCount = newReplicaCount
        self.replicaConfiguration = replicaConfiguration
        self.replicationGroupId = replicationGroupId
    }
}

extension IncreaseReplicaCountOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension IncreaseReplicaCountOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClusterQuotaForCustomerExceededFault" : self = .clusterQuotaForCustomerExceededFault(try ClusterQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCacheClusterCapacityFault" : self = .insufficientCacheClusterCapacityFault(try InsufficientCacheClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterStateFault" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyFault" : self = .invalidKMSKeyFault(try InvalidKMSKeyFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupStateFault" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCNetworkStateFault" : self = .invalidVPCNetworkStateFault(try InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeGroupsPerReplicationGroupQuotaExceededFault" : self = .nodeGroupsPerReplicationGroupQuotaExceededFault(try NodeGroupsPerReplicationGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForCustomerExceededFault" : self = .nodeQuotaForCustomerExceededFault(try NodeQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoOperationFault" : self = .noOperationFault(try NoOperationFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum IncreaseReplicaCountOutputError: Equatable {
    case clusterQuotaForCustomerExceededFault(ClusterQuotaForCustomerExceededFault)
    case insufficientCacheClusterCapacityFault(InsufficientCacheClusterCapacityFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidKMSKeyFault(InvalidKMSKeyFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case invalidVPCNetworkStateFault(InvalidVPCNetworkStateFault)
    case nodeGroupsPerReplicationGroupQuotaExceededFault(NodeGroupsPerReplicationGroupQuotaExceededFault)
    case nodeQuotaForCustomerExceededFault(NodeQuotaForCustomerExceededFault)
    case noOperationFault(NoOperationFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension IncreaseReplicaCountOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IncreaseReplicaCountOutputResponse(replicationGroup: \(String(describing: replicationGroup)))"}
}

extension IncreaseReplicaCountOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: IncreaseReplicaCountOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct IncreaseReplicaCountOutputResponse: Equatable {
    /// <p>Contains all of the attributes of a specific Redis replication group.</p>
    public let replicationGroup: ReplicationGroup?

    public init (
        replicationGroup: ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct IncreaseReplicaCountOutputResponseBody: Equatable {
    public let replicationGroup: ReplicationGroup?
}

extension IncreaseReplicaCountOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("IncreaseReplicaCountResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

extension InsufficientCacheClusterCapacityFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InsufficientCacheClusterCapacityFault(message: \(String(describing: message)))"}
}

extension InsufficientCacheClusterCapacityFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InsufficientCacheClusterCapacityFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested cache node type is not available in the specified Availability Zone.
///             For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ErrorMessages.html#ErrorMessages.INSUFFICIENT_CACHE_CLUSTER_CAPACITY">InsufficientCacheClusterCapacity</a> in the ElastiCache User Guide.</p>
public struct InsufficientCacheClusterCapacityFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InsufficientCacheClusterCapacityFaultBody: Equatable {
    public let message: String?
}

extension InsufficientCacheClusterCapacityFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidARNFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidARNFault(message: \(String(describing: message)))"}
}

extension InvalidARNFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidARNFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested Amazon Resource Name (ARN) does not refer to an existing resource.</p>
public struct InvalidARNFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidARNFaultBody: Equatable {
    public let message: String?
}

extension InvalidARNFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidCacheClusterStateFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidCacheClusterStateFault(message: \(String(describing: message)))"}
}

extension InvalidCacheClusterStateFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidCacheClusterStateFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested cluster is not in the <code>available</code> state.</p>
public struct InvalidCacheClusterStateFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidCacheClusterStateFaultBody: Equatable {
    public let message: String?
}

extension InvalidCacheClusterStateFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidCacheParameterGroupStateFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidCacheParameterGroupStateFault(message: \(String(describing: message)))"}
}

extension InvalidCacheParameterGroupStateFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidCacheParameterGroupStateFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The current state of the cache parameter group does not allow the requested operation to occur.</p>
public struct InvalidCacheParameterGroupStateFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidCacheParameterGroupStateFaultBody: Equatable {
    public let message: String?
}

extension InvalidCacheParameterGroupStateFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidCacheSecurityGroupStateFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidCacheSecurityGroupStateFault(message: \(String(describing: message)))"}
}

extension InvalidCacheSecurityGroupStateFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidCacheSecurityGroupStateFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The current state of the cache security group does not allow deletion.</p>
public struct InvalidCacheSecurityGroupStateFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidCacheSecurityGroupStateFaultBody: Equatable {
    public let message: String?
}

extension InvalidCacheSecurityGroupStateFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidGlobalReplicationGroupStateFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidGlobalReplicationGroupStateFault(message: \(String(describing: message)))"}
}

extension InvalidGlobalReplicationGroupStateFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidGlobalReplicationGroupStateFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The Global datastore is not available or in primary-only state.</p>
public struct InvalidGlobalReplicationGroupStateFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidGlobalReplicationGroupStateFaultBody: Equatable {
    public let message: String?
}

extension InvalidGlobalReplicationGroupStateFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidKMSKeyFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidKMSKeyFault(message: \(String(describing: message)))"}
}

extension InvalidKMSKeyFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidKMSKeyFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The KMS key supplied is not valid.</p>
public struct InvalidKMSKeyFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidKMSKeyFaultBody: Equatable {
    public let message: String?
}

extension InvalidKMSKeyFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterCombinationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidParameterCombinationException(message: \(String(describing: message)))"}
}

extension InvalidParameterCombinationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidParameterCombinationExceptionBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Two or more incompatible parameters were specified.</p>
public struct InvalidParameterCombinationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>Two or more parameters that must not be used together were used together.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterCombinationExceptionBody: Equatable {
    public let message: String?
}

extension InvalidParameterCombinationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterValueException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidParameterValueException(message: \(String(describing: message)))"}
}

extension InvalidParameterValueException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidParameterValueExceptionBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The value for a parameter is invalid.</p>
public struct InvalidParameterValueException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>A parameter value is invalid.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterValueExceptionBody: Equatable {
    public let message: String?
}

extension InvalidParameterValueExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidReplicationGroupStateFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidReplicationGroupStateFault(message: \(String(describing: message)))"}
}

extension InvalidReplicationGroupStateFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidReplicationGroupStateFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested replication group is not in the <code>available</code> state.</p>
public struct InvalidReplicationGroupStateFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidReplicationGroupStateFaultBody: Equatable {
    public let message: String?
}

extension InvalidReplicationGroupStateFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSnapshotStateFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidSnapshotStateFault(message: \(String(describing: message)))"}
}

extension InvalidSnapshotStateFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidSnapshotStateFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The current state of the snapshot does not allow the requested operation to occur.</p>
public struct InvalidSnapshotStateFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSnapshotStateFaultBody: Equatable {
    public let message: String?
}

extension InvalidSnapshotStateFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSubnet: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidSubnet(message: \(String(describing: message)))"}
}

extension InvalidSubnet: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidSubnetBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An invalid subnet identifier was specified.</p>
public struct InvalidSubnet: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSubnetBody: Equatable {
    public let message: String?
}

extension InvalidSubnetBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidUserGroupStateFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidUserGroupStateFault(message: \(String(describing: message)))"}
}

extension InvalidUserGroupStateFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidUserGroupStateFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The user group is not in an active state.</p>
public struct InvalidUserGroupStateFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidUserGroupStateFaultBody: Equatable {
    public let message: String?
}

extension InvalidUserGroupStateFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidUserStateFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidUserStateFault(message: \(String(describing: message)))"}
}

extension InvalidUserStateFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidUserStateFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The user is not in active state.</p>
public struct InvalidUserStateFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidUserStateFaultBody: Equatable {
    public let message: String?
}

extension InvalidUserStateFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidVPCNetworkStateFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidVPCNetworkStateFault(message: \(String(describing: message)))"}
}

extension InvalidVPCNetworkStateFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidVPCNetworkStateFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The VPC network is in an invalid state.</p>
public struct InvalidVPCNetworkStateFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidVPCNetworkStateFaultBody: Equatable {
    public let message: String?
}

extension InvalidVPCNetworkStateFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KinesisFirehoseDestinationDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deliveryStream = "DeliveryStream"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let deliveryStream = deliveryStream {
            try container.encode(deliveryStream, forKey: Key("DeliveryStream"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deliveryStream)
        deliveryStream = deliveryStreamDecoded
    }
}

extension KinesisFirehoseDestinationDetails: CustomDebugStringConvertible {
    public var debugDescription: String {
        "KinesisFirehoseDestinationDetails(deliveryStream: \(String(describing: deliveryStream)))"}
}

/// <p>The configuration details of the Kinesis Data Firehose destination.</p>
public struct KinesisFirehoseDestinationDetails: Equatable {
    /// <p>The name of the Kinesis Data Firehose delivery stream.</p>
    public let deliveryStream: String?

    public init (
        deliveryStream: String? = nil
    )
    {
        self.deliveryStream = deliveryStream
    }
}

public struct ListAllowedNodeTypeModificationsInputBodyMiddleware: Middleware {
    public let id: String = "ListAllowedNodeTypeModificationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAllowedNodeTypeModificationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAllowedNodeTypeModificationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAllowedNodeTypeModificationsInput>
    public typealias MOutput = OperationOutput<ListAllowedNodeTypeModificationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAllowedNodeTypeModificationsOutputError>
}

extension ListAllowedNodeTypeModificationsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListAllowedNodeTypeModificationsInput(cacheClusterId: \(String(describing: cacheClusterId)), replicationGroupId: \(String(describing: replicationGroupId)))"}
}

extension ListAllowedNodeTypeModificationsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        try container.encode("ListAllowedNodeTypeModifications", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct ListAllowedNodeTypeModificationsInputHeadersMiddleware: Middleware {
    public let id: String = "ListAllowedNodeTypeModificationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAllowedNodeTypeModificationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAllowedNodeTypeModificationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAllowedNodeTypeModificationsInput>
    public typealias MOutput = OperationOutput<ListAllowedNodeTypeModificationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAllowedNodeTypeModificationsOutputError>
}

public struct ListAllowedNodeTypeModificationsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListAllowedNodeTypeModificationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAllowedNodeTypeModificationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAllowedNodeTypeModificationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAllowedNodeTypeModificationsInput>
    public typealias MOutput = OperationOutput<ListAllowedNodeTypeModificationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAllowedNodeTypeModificationsOutputError>
}

/// <p>The input parameters for the <code>ListAllowedNodeTypeModifications</code> operation.</p>
public struct ListAllowedNodeTypeModificationsInput: Equatable {
    /// <p>The name of the cluster you want to scale up to a larger node instanced type.
    ///             ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p>
    ///
    ///         <important>
    ///             <p>You must provide a value for either the <code>CacheClusterId</code> or the
    ///             <code>ReplicationGroupId</code>.</p>
    ///          </important>
    public let cacheClusterId: String?
    /// <p>The name of the replication group want to scale up to a larger node type.
    ///         ElastiCache uses the replication group id to identify the current node type being used by
    ///         this replication group, and from that to create a list of node types you can scale up to.</p>
    ///
    ///         <important>
    ///             <p>You must provide a value for either the <code>CacheClusterId</code> or the
    ///             <code>ReplicationGroupId</code>.</p>
    ///          </important>
    public let replicationGroupId: String?

    public init (
        cacheClusterId: String? = nil,
        replicationGroupId: String? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.replicationGroupId = replicationGroupId
    }
}

extension ListAllowedNodeTypeModificationsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListAllowedNodeTypeModificationsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFoundFault" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAllowedNodeTypeModificationsOutputError: Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAllowedNodeTypeModificationsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListAllowedNodeTypeModificationsOutputResponse(scaleDownModifications: \(String(describing: scaleDownModifications)), scaleUpModifications: \(String(describing: scaleUpModifications)))"}
}

extension ListAllowedNodeTypeModificationsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListAllowedNodeTypeModificationsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.scaleDownModifications = output.scaleDownModifications
            self.scaleUpModifications = output.scaleUpModifications
        } else {
            self.scaleDownModifications = nil
            self.scaleUpModifications = nil
        }
    }
}

/// <p>Represents the allowed node types you can use to modify your cluster or replication group.</p>
public struct ListAllowedNodeTypeModificationsOutputResponse: Equatable {
    /// <p>A string list, each element of which specifies a cache node type which you can use to scale your cluster or replication group.
    ///
    ///             When scaling down a Redis cluster or replication group using ModifyCacheCluster or ModifyReplicationGroup, use a value from this list for the CacheNodeType parameter. </p>
    public let scaleDownModifications: [String]?
    /// <p>A string list, each element of which specifies a cache node type which you can use
    ///             to scale your cluster or replication group.</p>
    ///         <p>When scaling up a Redis cluster or replication group using <code>ModifyCacheCluster</code> or
    ///             <code>ModifyReplicationGroup</code>,
    ///             use a value from this list for the <code>CacheNodeType</code> parameter.</p>
    public let scaleUpModifications: [String]?

    public init (
        scaleDownModifications: [String]? = nil,
        scaleUpModifications: [String]? = nil
    )
    {
        self.scaleDownModifications = scaleDownModifications
        self.scaleUpModifications = scaleUpModifications
    }
}

struct ListAllowedNodeTypeModificationsOutputResponseBody: Equatable {
    public let scaleUpModifications: [String]?
    public let scaleDownModifications: [String]?
}

extension ListAllowedNodeTypeModificationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case scaleDownModifications = "ScaleDownModifications"
        case scaleUpModifications = "ScaleUpModifications"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListAllowedNodeTypeModificationsResult"))
        if containerValues.contains(.scaleUpModifications) {
            struct KeyVal0{struct member{}}
            let scaleUpModificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scaleUpModifications)
            if let scaleUpModificationsWrappedContainer = scaleUpModificationsWrappedContainer {
                let scaleUpModificationsContainer = try scaleUpModificationsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var scaleUpModificationsBuffer:[String]? = nil
                if let scaleUpModificationsContainer = scaleUpModificationsContainer {
                    scaleUpModificationsBuffer = [String]()
                    for stringContainer0 in scaleUpModificationsContainer {
                        scaleUpModificationsBuffer?.append(stringContainer0)
                    }
                }
                scaleUpModifications = scaleUpModificationsBuffer
            } else {
                scaleUpModifications = []
            }
        } else {
            scaleUpModifications = nil
        }
        if containerValues.contains(.scaleDownModifications) {
            struct KeyVal0{struct member{}}
            let scaleDownModificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scaleDownModifications)
            if let scaleDownModificationsWrappedContainer = scaleDownModificationsWrappedContainer {
                let scaleDownModificationsContainer = try scaleDownModificationsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var scaleDownModificationsBuffer:[String]? = nil
                if let scaleDownModificationsContainer = scaleDownModificationsContainer {
                    scaleDownModificationsBuffer = [String]()
                    for stringContainer0 in scaleDownModificationsContainer {
                        scaleDownModificationsBuffer?.append(stringContainer0)
                    }
                }
                scaleDownModifications = scaleDownModificationsBuffer
            } else {
                scaleDownModifications = []
            }
        } else {
            scaleDownModifications = nil
        }
    }
}

public struct ListTagsForResourceInputBodyMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

extension ListTagsForResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceInput(resourceName: \(String(describing: resourceName)))"}
}

extension ListTagsForResourceInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: Key("ResourceName"))
        }
        try container.encode("ListTagsForResource", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

/// <p>The input parameters for the <code>ListTagsForResource</code> operation.</p>
public struct ListTagsForResourceInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags,
    ///             for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code>
    ///             or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p>
    ///         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
    public let resourceName: String?

    public init (
        resourceName: String? = nil
    )
    {
        self.resourceName = resourceName
    }
}

extension ListTagsForResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFoundFault" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupNotFoundFault" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFoundFault" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidARNFault" : self = .invalidARNFault(try InvalidARNFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupStateFault" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodeNotFoundFault" : self = .reservedCacheNodeNotFoundFault(try ReservedCacheNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFoundFault" : self = .snapshotNotFoundFault(try SnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFoundFault" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundFault" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case invalidARNFault(InvalidARNFault)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case reservedCacheNodeNotFoundFault(ReservedCacheNodeNotFoundFault)
    case snapshotNotFoundFault(SnapshotNotFoundFault)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceOutputResponse(tagList: \(String(describing: tagList)))"}
}

extension ListTagsForResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tagList = output.tagList
        } else {
            self.tagList = nil
        }
    }
}

/// <p>Represents the output from the <code>AddTagsToResource</code>,
///             <code>ListTagsForResource</code>, and <code>RemoveTagsFromResource</code> operations.</p>
public struct ListTagsForResourceOutputResponse: Equatable {
    /// <p>A list of tags as key-value pairs.</p>
    public let tagList: [Tag]?

    public init (
        tagList: [Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

struct ListTagsForResourceOutputResponseBody: Equatable {
    public let tagList: [Tag]?
}

extension ListTagsForResourceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tagList = "TagList"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListTagsForResourceResult"))
        if containerValues.contains(.tagList) {
            struct KeyVal0{struct Tag{}}
            let tagListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tagList)
            if let tagListWrappedContainer = tagListWrappedContainer {
                let tagListContainer = try tagListWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagListBuffer:[Tag]? = nil
                if let tagListContainer = tagListContainer {
                    tagListBuffer = [Tag]()
                    for structureContainer0 in tagListContainer {
                        tagListBuffer?.append(structureContainer0)
                    }
                }
                tagList = tagListBuffer
            } else {
                tagList = []
            }
        } else {
            tagList = nil
        }
    }
}

extension LogDeliveryConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationDetails = "DestinationDetails"
        case destinationType = "DestinationType"
        case logFormat = "LogFormat"
        case logType = "LogType"
        case message = "Message"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let destinationDetails = destinationDetails {
            try container.encode(destinationDetails, forKey: Key("DestinationDetails"))
        }
        if let destinationType = destinationType {
            try container.encode(destinationType, forKey: Key("DestinationType"))
        }
        if let logFormat = logFormat {
            try container.encode(logFormat, forKey: Key("LogFormat"))
        }
        if let logType = logType {
            try container.encode(logType, forKey: Key("LogType"))
        }
        if let message = message {
            try container.encode(message, forKey: Key("Message"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logTypeDecoded = try containerValues.decodeIfPresent(LogType.self, forKey: .logType)
        logType = logTypeDecoded
        let destinationTypeDecoded = try containerValues.decodeIfPresent(DestinationType.self, forKey: .destinationType)
        destinationType = destinationTypeDecoded
        let destinationDetailsDecoded = try containerValues.decodeIfPresent(DestinationDetails.self, forKey: .destinationDetails)
        destinationDetails = destinationDetailsDecoded
        let logFormatDecoded = try containerValues.decodeIfPresent(LogFormat.self, forKey: .logFormat)
        logFormat = logFormatDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LogDeliveryConfigurationStatus.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LogDeliveryConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LogDeliveryConfiguration(destinationDetails: \(String(describing: destinationDetails)), destinationType: \(String(describing: destinationType)), logFormat: \(String(describing: logFormat)), logType: \(String(describing: logType)), message: \(String(describing: message)), status: \(String(describing: status)))"}
}

/// <p>Returns the destination, format and type of the logs. </p>
public struct LogDeliveryConfiguration: Equatable {
    /// <p>Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.</p>
    public let destinationDetails: DestinationDetails?
    /// <p>Returns the destination type, either <code>cloudwatch-logs</code> or <code>kinesis-firehose</code>.</p>
    public let destinationType: DestinationType?
    /// <p>Returns the log format, either JSON or TEXT.</p>
    public let logFormat: LogFormat?
    /// <p>Refers to <a href="https://redis.io/commands/slowlog">slow-log</a>.</p>
    public let logType: LogType?
    /// <p>Returns an error message for the log delivery configuration.</p>
    public let message: String?
    /// <p>Returns the log delivery configuration status. Values are one of <code>enabling</code> | <code>disabling</code> | <code>modifying</code> | <code>active</code> | <code>error</code>
    ///          </p>
    public let status: LogDeliveryConfigurationStatus?

    public init (
        destinationDetails: DestinationDetails? = nil,
        destinationType: DestinationType? = nil,
        logFormat: LogFormat? = nil,
        logType: LogType? = nil,
        message: String? = nil,
        status: LogDeliveryConfigurationStatus? = nil
    )
    {
        self.destinationDetails = destinationDetails
        self.destinationType = destinationType
        self.logFormat = logFormat
        self.logType = logType
        self.message = message
        self.status = status
    }
}

extension LogDeliveryConfigurationRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationDetails = "DestinationDetails"
        case destinationType = "DestinationType"
        case enabled = "Enabled"
        case logFormat = "LogFormat"
        case logType = "LogType"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let destinationDetails = destinationDetails {
            try container.encode(destinationDetails, forKey: Key("DestinationDetails"))
        }
        if let destinationType = destinationType {
            try container.encode(destinationType, forKey: Key("DestinationType"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: Key("Enabled"))
        }
        if let logFormat = logFormat {
            try container.encode(logFormat, forKey: Key("LogFormat"))
        }
        if let logType = logType {
            try container.encode(logType, forKey: Key("LogType"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logTypeDecoded = try containerValues.decodeIfPresent(LogType.self, forKey: .logType)
        logType = logTypeDecoded
        let destinationTypeDecoded = try containerValues.decodeIfPresent(DestinationType.self, forKey: .destinationType)
        destinationType = destinationTypeDecoded
        let destinationDetailsDecoded = try containerValues.decodeIfPresent(DestinationDetails.self, forKey: .destinationDetails)
        destinationDetails = destinationDetailsDecoded
        let logFormatDecoded = try containerValues.decodeIfPresent(LogFormat.self, forKey: .logFormat)
        logFormat = logFormatDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension LogDeliveryConfigurationRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LogDeliveryConfigurationRequest(destinationDetails: \(String(describing: destinationDetails)), destinationType: \(String(describing: destinationType)), enabled: \(String(describing: enabled)), logFormat: \(String(describing: logFormat)), logType: \(String(describing: logType)))"}
}

/// <p>Specifies the destination, format and type of the logs. </p>
public struct LogDeliveryConfigurationRequest: Equatable {
    /// <p>Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.</p>
    public let destinationDetails: DestinationDetails?
    /// <p>Specify either <code>cloudwatch-logs</code> or <code>kinesis-firehose</code> as the destination type.</p>
    public let destinationType: DestinationType?
    /// <p>Specify if log delivery is enabled. Default <code>true</code>.</p>
    public let enabled: Bool?
    /// <p>Specifies either JSON or TEXT</p>
    public let logFormat: LogFormat?
    /// <p>Refers to <a href="https://redis.io/commands/slowlog">slow-log</a>.</p>
    public let logType: LogType?

    public init (
        destinationDetails: DestinationDetails? = nil,
        destinationType: DestinationType? = nil,
        enabled: Bool? = nil,
        logFormat: LogFormat? = nil,
        logType: LogType? = nil
    )
    {
        self.destinationDetails = destinationDetails
        self.destinationType = destinationType
        self.enabled = enabled
        self.logFormat = logFormat
        self.logType = logType
    }
}

public enum LogDeliveryConfigurationStatus {
    case active
    case disabling
    case enabling
    case error
    case modifying
    case sdkUnknown(String)
}

extension LogDeliveryConfigurationStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LogDeliveryConfigurationStatus] {
        return [
            .active,
            .disabling,
            .enabling,
            .error,
            .modifying,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "active"
        case .disabling: return "disabling"
        case .enabling: return "enabling"
        case .error: return "error"
        case .modifying: return "modifying"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LogDeliveryConfigurationStatus(rawValue: rawValue) ?? LogDeliveryConfigurationStatus.sdkUnknown(rawValue)
    }
}

public enum LogFormat {
    case json
    case text
    case sdkUnknown(String)
}

extension LogFormat : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LogFormat] {
        return [
            .json,
            .text,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .json: return "json"
        case .text: return "text"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LogFormat(rawValue: rawValue) ?? LogFormat.sdkUnknown(rawValue)
    }
}

public enum LogType {
    case slowLog
    case sdkUnknown(String)
}

extension LogType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LogType] {
        return [
            .slowLog,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .slowLog: return "slow-log"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LogType(rawValue: rawValue) ?? LogType.sdkUnknown(rawValue)
    }
}

public struct ModifyCacheClusterInputBodyMiddleware: Middleware {
    public let id: String = "ModifyCacheClusterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyCacheClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyCacheClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyCacheClusterInput>
    public typealias MOutput = OperationOutput<ModifyCacheClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyCacheClusterOutputError>
}

extension ModifyCacheClusterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyCacheClusterInput(aZMode: \(String(describing: aZMode)), applyImmediately: \(String(describing: applyImmediately)), authToken: \(String(describing: authToken)), authTokenUpdateStrategy: \(String(describing: authTokenUpdateStrategy)), autoMinorVersionUpgrade: \(String(describing: autoMinorVersionUpgrade)), cacheClusterId: \(String(describing: cacheClusterId)), cacheNodeIdsToRemove: \(String(describing: cacheNodeIdsToRemove)), cacheNodeType: \(String(describing: cacheNodeType)), cacheParameterGroupName: \(String(describing: cacheParameterGroupName)), cacheSecurityGroupNames: \(String(describing: cacheSecurityGroupNames)), engineVersion: \(String(describing: engineVersion)), logDeliveryConfigurations: \(String(describing: logDeliveryConfigurations)), newAvailabilityZones: \(String(describing: newAvailabilityZones)), notificationTopicArn: \(String(describing: notificationTopicArn)), notificationTopicStatus: \(String(describing: notificationTopicStatus)), numCacheNodes: \(String(describing: numCacheNodes)), preferredMaintenanceWindow: \(String(describing: preferredMaintenanceWindow)), securityGroupIds: \(String(describing: securityGroupIds)), snapshotRetentionLimit: \(String(describing: snapshotRetentionLimit)), snapshotWindow: \(String(describing: snapshotWindow)))"}
}

extension ModifyCacheClusterInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aZMode = aZMode {
            try container.encode(aZMode, forKey: Key("AZMode"))
        }
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: Key("ApplyImmediately"))
        }
        if let authToken = authToken {
            try container.encode(authToken, forKey: Key("AuthToken"))
        }
        if let authTokenUpdateStrategy = authTokenUpdateStrategy {
            try container.encode(authTokenUpdateStrategy, forKey: Key("AuthTokenUpdateStrategy"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: Key("AutoMinorVersionUpgrade"))
        }
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let cacheNodeIdsToRemove = cacheNodeIdsToRemove {
            var cacheNodeIdsToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheNodeIdsToRemove"))
            for (index0, string0) in cacheNodeIdsToRemove.enumerated() {
                try cacheNodeIdsToRemoveContainer.encode(string0, forKey: Key("CacheNodeId.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let cacheSecurityGroupNames = cacheSecurityGroupNames {
            var cacheSecurityGroupNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheSecurityGroupNames"))
            for (index0, string0) in cacheSecurityGroupNames.enumerated() {
                try cacheSecurityGroupNamesContainer.encode(string0, forKey: Key("CacheSecurityGroupName.\(index0.advanced(by: 1))"))
            }
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LogDeliveryConfigurations"))
            for (index0, logdeliveryconfigurationrequest0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(logdeliveryconfigurationrequest0, forKey: Key("LogDeliveryConfigurationRequest.\(index0.advanced(by: 1))"))
            }
        }
        if let newAvailabilityZones = newAvailabilityZones {
            var newAvailabilityZonesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NewAvailabilityZones"))
            for (index0, string0) in newAvailabilityZones.enumerated() {
                try newAvailabilityZonesContainer.encode(string0, forKey: Key("PreferredAvailabilityZone.\(index0.advanced(by: 1))"))
            }
        }
        if let notificationTopicArn = notificationTopicArn {
            try container.encode(notificationTopicArn, forKey: Key("NotificationTopicArn"))
        }
        if let notificationTopicStatus = notificationTopicStatus {
            try container.encode(notificationTopicStatus, forKey: Key("NotificationTopicStatus"))
        }
        if let numCacheNodes = numCacheNodes {
            try container.encode(numCacheNodes, forKey: Key("NumCacheNodes"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: Key("PreferredMaintenanceWindow"))
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SecurityGroupIds"))
            for (index0, string0) in securityGroupIds.enumerated() {
                try securityGroupIdsContainer.encode(string0, forKey: Key("SecurityGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: Key("SnapshotRetentionLimit"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: Key("SnapshotWindow"))
        }
        try container.encode("ModifyCacheCluster", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct ModifyCacheClusterInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyCacheClusterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyCacheClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyCacheClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyCacheClusterInput>
    public typealias MOutput = OperationOutput<ModifyCacheClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyCacheClusterOutputError>
}

public struct ModifyCacheClusterInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyCacheClusterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyCacheClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyCacheClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyCacheClusterInput>
    public typealias MOutput = OperationOutput<ModifyCacheClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyCacheClusterOutputError>
}

/// <p>Represents the input of a <code>ModifyCacheCluster</code> operation.</p>
public struct ModifyCacheClusterInput: Equatable {
    /// <p>Specifies whether the new nodes in this Memcached cluster are all created in a
    ///             single Availability Zone or created across multiple Availability Zones.</p>
    ///         <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p>
    ///         <p>This option is only supported for Memcached clusters.</p>
    ///         <note>
    ///             <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones.
    ///             If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p>
    ///             <p>Only newly created nodes are located in different Availability Zones.
    ///                 </p>
    ///         </note>
    public let aZMode: AZMode?
    /// <p>If <code>true</code>, this parameter causes the modifications in this request and any
    ///             pending modifications to be applied, asynchronously and as soon as possible, regardless
    ///             of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p>
    ///         <p>If <code>false</code>, changes to the cluster are applied on the next
    ///             maintenance reboot, or the next failure reboot, whichever occurs first.</p>
    ///         <important>
    ///             <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied,
    ///             the pending modification is replaced by the newer modification.</p>
    ///          </important>
    ///         <p>Valid values: <code>true</code> | <code>false</code>
    ///          </p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    public let applyImmediately: Bool
    /// <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter.
    ///             Password constraints:</p>
    ///             <ul>
    ///             <li>
    ///                <p>Must be only printable ASCII characters</p>
    ///             </li>
    ///             <li>
    ///                <p>Must be at least 16 characters and no more than 128 characters in length</p>
    ///             </li>
    ///             <li>
    ///                <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p>
    ///             </li>
    ///          </ul>
    ///          <p>
    ///
    ///             For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
    public let authToken: String?
    /// <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter.
    ///             Possible values:</p>
    ///             <ul>
    ///             <li>
    ///                <p>Rotate</p>
    ///             </li>
    ///             <li>
    ///                <p>Set</p>
    ///             </li>
    ///          </ul>
    ///         <p>
    ///             For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a>
    ///          </p>
    public let authTokenUpdateStrategy: AuthTokenUpdateStrategyType?
    /// <p>This parameter is currently disabled.</p>
    public let autoMinorVersionUpgrade: Bool?
    /// <p>The cluster identifier. This value is stored as a lowercase string.</p>
    public let cacheClusterId: String?
    /// <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002,
    ///             etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number
    ///             of cache nodes. The number of cache node IDs supplied in this parameter must match the
    ///             difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is
    ///             greater, and the value of <code>NumCacheNodes</code> in the request.</p>
    ///         <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this
    ///         <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
    public let cacheNodeIdsToRemove: [String]?
    /// <p>A valid cache node type that you want to scale this cluster up to.</p>
    public let cacheNodeType: String?
    /// <p>The name of the cache parameter group to apply to this cluster. This change is
    ///             asynchronously applied as soon as possible for parameters when the
    ///             <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.</p>
    public let cacheParameterGroupName: String?
    /// <p>A list of cache security group names to authorize on this cluster.
    ///             This change is asynchronously applied as soon as possible.</p>
    ///         <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
    ///         <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
    public let cacheSecurityGroupNames: [String]?
    /// <p>The upgraded version of the cache engine to be run on the cache nodes.</p>
    ///
    ///         <p>
    ///             <b>Important:</b> You can upgrade to a newer engine version
    ///             (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version.
    ///             If you want to use an earlier engine version,
    ///             you must delete the existing cluster and create it anew with the earlier engine version. </p>
    public let engineVersion: String?
    /// <p>Specifies the destination, format and type of the logs.</p>
    public let logDeliveryConfigurations: [LogDeliveryConfigurationRequest]?
    /// <note>
    ///             <p>This option is only supported on Memcached clusters.</p>
    ///          </note>
    ///         <p>The list of Availability Zones where the new Memcached cache nodes are created.</p>
    ///         <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater
    ///             than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero).
    ///             The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p>
    ///
    ///         <p>Scenarios:</p>
    ///             <ul>
    ///             <li>
    ///                    <p>
    ///                   <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes.
    ///                         Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones
    ///                         for the two new nodes.</p>
    ///                 </li>
    ///             <li>
    ///                    <p>
    ///                   <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation
    ///                         (from the scenario 1 call) and want to add 1 more node.
    ///                         Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and
    ///                         optionally specify an Availability Zone for the new node.</p>
    ///                 </li>
    ///             <li>
    ///                     <p>
    ///                   <b>Scenario 3:</b> You want to cancel all pending operations.
    ///                         Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p>
    ///                 </li>
    ///          </ul>
    ///
    ///         <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation,
    ///             add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p>
    ///         <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.
    ///             Only newly created nodes can be located in different Availability Zones.
    ///             For guidance on how to move existing Memcached nodes to different Availability Zones, see the
    ///             <b>Availability Zone Considerations</b> section of <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p>
    ///
    ///          <p>
    ///             <b>Impact of new add/remove requests upon pending requests</b>
    ///          </p>
    ///          <ul>
    ///             <li>
    ///                <p>Scenario-1</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Pending Action: Delete</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>New Request: Delete</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Result: The new delete, pending or immediate, replaces the pending delete.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Scenario-2</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Pending Action: Delete</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>New Request: Create</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Result: The new create, pending or immediate, replaces the pending delete.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Scenario-3</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Pending Action: Create</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>New Request: Delete</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Result: The new delete, pending or immediate, replaces the pending create.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Scenario-4</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Pending Action: Create</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>New Request: Create</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Result: The new create is added to the pending create.</p>
    ///                      <important>
    ///                         <p>
    ///                            <b>Important:</b>
    ///                       If the new create request is <b>Apply Immediately - Yes</b>,
    ///                       all creates are performed immediately.
    ///                       If the new create request is <b>Apply Immediately - No</b>,
    ///                       all creates are pending.</p>
    ///                      </important>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    public let newAvailabilityZones: [String]?
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p>
    ///         <note>
    ///             <p>The Amazon SNS topic owner must be same as the cluster owner.</p>
    ///          </note>
    public let notificationTopicArn: String?
    /// <p>The status of the Amazon SNS notification topic. Notifications are sent only if the
    ///             status is <code>active</code>.</p>
    ///         <p>Valid values: <code>active</code> | <code>inactive</code>
    ///          </p>
    public let notificationTopicStatus: String?
    /// <p>The number of cache nodes that the cluster should have.
    ///             If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and
    ///             the number of cache nodes pending creation (which may be zero), more nodes are added.
    ///             If the value is less than the number of existing cache nodes,  nodes are removed.
    ///             If the value is equal to the number of current cache nodes,
    ///              any pending add or remove requests are canceled.</p>
    ///         <p>If you are removing cache nodes, you must
    ///             use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p>
    ///         <p>For clusters running Redis, this value must be 1.
    ///     For clusters running Memcached, this value must be between 1 and 40.</p>
    ///
    ///         <note>
    ///             <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p>
    ///             <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window,
    ///             whether by adding or removing nodes in accordance with the scale out architecture, is not queued.
    ///             The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the
    ///             number of cache nodes in the cluster.
    ///             For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes.
    ///             Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa.
    ///             As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement,
    ///             a request to add nodes does not automatically override a previous pending operation to add nodes.
    ///             The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and
    ///             retry the new request.
    ///             To cancel pending operations to modify the number of cache nodes in a cluster,
    ///             use the <code>ModifyCacheCluster</code> request and
    ///             set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p>
    ///          </note>
    public let numCacheNodes: Int?
    /// <p>Specifies the weekly time range during which maintenance
    ///    on the cluster is performed. It is specified as a range in
    ///    the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum
    ///    maintenance window is a 60 minute period.</p>
    ///          <p>Valid values for <code>ddd</code> are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>sun</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>mon</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>tue</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>wed</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>thu</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>fri</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sat</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>Example: <code>sun:23:00-mon:01:30</code>
    ///          </p>
    public let preferredMaintenanceWindow: String?
    /// <p>Specifies the VPC Security Groups associated with the cluster.</p>
    ///         <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
    public let securityGroupIds: [String]?
    /// <p>The number of days for which ElastiCache retains automatic cluster snapshots before
    ///             deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5,  a
    ///             snapshot that was taken today is retained for 5 days before being deleted.</p>
    ///         <note>
    ///             <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p>
    ///          </note>
    public let snapshotRetentionLimit: Int?
    /// <p>The daily time range (in UTC) during which ElastiCache  begins taking a daily snapshot of
    ///             your cluster. </p>
    public let snapshotWindow: String?

    public init (
        aZMode: AZMode? = nil,
        applyImmediately: Bool = false,
        authToken: String? = nil,
        authTokenUpdateStrategy: AuthTokenUpdateStrategyType? = nil,
        autoMinorVersionUpgrade: Bool? = nil,
        cacheClusterId: String? = nil,
        cacheNodeIdsToRemove: [String]? = nil,
        cacheNodeType: String? = nil,
        cacheParameterGroupName: String? = nil,
        cacheSecurityGroupNames: [String]? = nil,
        engineVersion: String? = nil,
        logDeliveryConfigurations: [LogDeliveryConfigurationRequest]? = nil,
        newAvailabilityZones: [String]? = nil,
        notificationTopicArn: String? = nil,
        notificationTopicStatus: String? = nil,
        numCacheNodes: Int? = nil,
        preferredMaintenanceWindow: String? = nil,
        securityGroupIds: [String]? = nil,
        snapshotRetentionLimit: Int? = nil,
        snapshotWindow: String? = nil
    )
    {
        self.aZMode = aZMode
        self.applyImmediately = applyImmediately
        self.authToken = authToken
        self.authTokenUpdateStrategy = authTokenUpdateStrategy
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.cacheClusterId = cacheClusterId
        self.cacheNodeIdsToRemove = cacheNodeIdsToRemove
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSecurityGroupNames = cacheSecurityGroupNames
        self.engineVersion = engineVersion
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.newAvailabilityZones = newAvailabilityZones
        self.notificationTopicArn = notificationTopicArn
        self.notificationTopicStatus = notificationTopicStatus
        self.numCacheNodes = numCacheNodes
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.securityGroupIds = securityGroupIds
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
    }
}

extension ModifyCacheClusterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyCacheClusterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFoundFault" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupNotFoundFault" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFoundFault" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCacheClusterCapacityFault" : self = .insufficientCacheClusterCapacityFault(try InsufficientCacheClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterStateFault" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheSecurityGroupStateFault" : self = .invalidCacheSecurityGroupStateFault(try InvalidCacheSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCNetworkStateFault" : self = .invalidVPCNetworkStateFault(try InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForClusterExceededFault" : self = .nodeQuotaForClusterExceededFault(try NodeQuotaForClusterExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForCustomerExceededFault" : self = .nodeQuotaForCustomerExceededFault(try NodeQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyCacheClusterOutputError: Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case insufficientCacheClusterCapacityFault(InsufficientCacheClusterCapacityFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidCacheSecurityGroupStateFault(InvalidCacheSecurityGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidVPCNetworkStateFault(InvalidVPCNetworkStateFault)
    case nodeQuotaForClusterExceededFault(NodeQuotaForClusterExceededFault)
    case nodeQuotaForCustomerExceededFault(NodeQuotaForCustomerExceededFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyCacheClusterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyCacheClusterOutputResponse(cacheCluster: \(String(describing: cacheCluster)))"}
}

extension ModifyCacheClusterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ModifyCacheClusterOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheCluster = output.cacheCluster
        } else {
            self.cacheCluster = nil
        }
    }
}

public struct ModifyCacheClusterOutputResponse: Equatable {
    /// <p>Contains all of the attributes of a specific cluster.</p>
    public let cacheCluster: CacheCluster?

    public init (
        cacheCluster: CacheCluster? = nil
    )
    {
        self.cacheCluster = cacheCluster
    }
}

struct ModifyCacheClusterOutputResponseBody: Equatable {
    public let cacheCluster: CacheCluster?
}

extension ModifyCacheClusterOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheCluster = "CacheCluster"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ModifyCacheClusterResult"))
        let cacheClusterDecoded = try containerValues.decodeIfPresent(CacheCluster.self, forKey: .cacheCluster)
        cacheCluster = cacheClusterDecoded
    }
}

public struct ModifyCacheParameterGroupInputBodyMiddleware: Middleware {
    public let id: String = "ModifyCacheParameterGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyCacheParameterGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyCacheParameterGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyCacheParameterGroupInput>
    public typealias MOutput = OperationOutput<ModifyCacheParameterGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyCacheParameterGroupOutputError>
}

extension ModifyCacheParameterGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyCacheParameterGroupInput(cacheParameterGroupName: \(String(describing: cacheParameterGroupName)), parameterNameValues: \(String(describing: parameterNameValues)))"}
}

extension ModifyCacheParameterGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let parameterNameValues = parameterNameValues {
            var parameterNameValuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ParameterNameValues"))
            for (index0, parameternamevalue0) in parameterNameValues.enumerated() {
                try parameterNameValuesContainer.encode(parameternamevalue0, forKey: Key("ParameterNameValue.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ModifyCacheParameterGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct ModifyCacheParameterGroupInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyCacheParameterGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyCacheParameterGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyCacheParameterGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyCacheParameterGroupInput>
    public typealias MOutput = OperationOutput<ModifyCacheParameterGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyCacheParameterGroupOutputError>
}

public struct ModifyCacheParameterGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyCacheParameterGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyCacheParameterGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyCacheParameterGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyCacheParameterGroupInput>
    public typealias MOutput = OperationOutput<ModifyCacheParameterGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyCacheParameterGroupOutputError>
}

/// <p>Represents the input of a <code>ModifyCacheParameterGroup</code> operation.</p>
public struct ModifyCacheParameterGroupInput: Equatable {
    /// <p>The name of the cache parameter group to modify.</p>
    public let cacheParameterGroupName: String?
    /// <p>An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.</p>
    public let parameterNameValues: [ParameterNameValue]?

    public init (
        cacheParameterGroupName: String? = nil,
        parameterNameValues: [ParameterNameValue]? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
        self.parameterNameValues = parameterNameValues
    }
}

extension ModifyCacheParameterGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyCacheParameterGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheParameterGroupNotFoundFault" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheParameterGroupStateFault" : self = .invalidCacheParameterGroupStateFault(try InvalidCacheParameterGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupStateFault" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyCacheParameterGroupOutputError: Equatable {
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case invalidCacheParameterGroupStateFault(InvalidCacheParameterGroupStateFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyCacheParameterGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyCacheParameterGroupOutputResponse(cacheParameterGroupName: \(String(describing: cacheParameterGroupName)))"}
}

extension ModifyCacheParameterGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ModifyCacheParameterGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheParameterGroupName = output.cacheParameterGroupName
        } else {
            self.cacheParameterGroupName = nil
        }
    }
}

/// <p>Represents the output of one of the following operations:</p>
///         <ul>
///             <li>
///                <p>
///                   <code>ModifyCacheParameterGroup</code>
///                </p>
///             </li>
///             <li>
///                <p>
///                   <code>ResetCacheParameterGroup</code>
///                </p>
///             </li>
///          </ul>
public struct ModifyCacheParameterGroupOutputResponse: Equatable {
    /// <p>The name of the cache parameter group.</p>
    public let cacheParameterGroupName: String?

    public init (
        cacheParameterGroupName: String? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
    }
}

struct ModifyCacheParameterGroupOutputResponseBody: Equatable {
    public let cacheParameterGroupName: String?
}

extension ModifyCacheParameterGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheParameterGroupName = "CacheParameterGroupName"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ModifyCacheParameterGroupResult"))
        let cacheParameterGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheParameterGroupName)
        cacheParameterGroupName = cacheParameterGroupNameDecoded
    }
}

public struct ModifyCacheSubnetGroupInputBodyMiddleware: Middleware {
    public let id: String = "ModifyCacheSubnetGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyCacheSubnetGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyCacheSubnetGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyCacheSubnetGroupInput>
    public typealias MOutput = OperationOutput<ModifyCacheSubnetGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyCacheSubnetGroupOutputError>
}

extension ModifyCacheSubnetGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyCacheSubnetGroupInput(cacheSubnetGroupDescription: \(String(describing: cacheSubnetGroupDescription)), cacheSubnetGroupName: \(String(describing: cacheSubnetGroupName)), subnetIds: \(String(describing: subnetIds)))"}
}

extension ModifyCacheSubnetGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheSubnetGroupDescription = cacheSubnetGroupDescription {
            try container.encode(cacheSubnetGroupDescription, forKey: Key("CacheSubnetGroupDescription"))
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: Key("CacheSubnetGroupName"))
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SubnetIds"))
            for (index0, string0) in subnetIds.enumerated() {
                try subnetIdsContainer.encode(string0, forKey: Key("SubnetIdentifier.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ModifyCacheSubnetGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct ModifyCacheSubnetGroupInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyCacheSubnetGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyCacheSubnetGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyCacheSubnetGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyCacheSubnetGroupInput>
    public typealias MOutput = OperationOutput<ModifyCacheSubnetGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyCacheSubnetGroupOutputError>
}

public struct ModifyCacheSubnetGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyCacheSubnetGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyCacheSubnetGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyCacheSubnetGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyCacheSubnetGroupInput>
    public typealias MOutput = OperationOutput<ModifyCacheSubnetGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyCacheSubnetGroupOutputError>
}

/// <p>Represents the input of a <code>ModifyCacheSubnetGroup</code> operation.</p>
public struct ModifyCacheSubnetGroupInput: Equatable {
    /// <p>A description of the cache subnet group.</p>
    public let cacheSubnetGroupDescription: String?
    /// <p>The name for the cache subnet group. This value is stored as a lowercase string.</p>
    ///         <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
    ///         <p>Example: <code>mysubnetgroup</code>
    ///          </p>
    public let cacheSubnetGroupName: String?
    /// <p>The EC2 subnet IDs for the cache subnet group.</p>
    public let subnetIds: [String]?

    public init (
        cacheSubnetGroupDescription: String? = nil,
        cacheSubnetGroupName: String? = nil,
        subnetIds: [String]? = nil
    )
    {
        self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.subnetIds = subnetIds
    }
}

extension ModifyCacheSubnetGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyCacheSubnetGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetQuotaExceededFault" : self = .cacheSubnetQuotaExceededFault(try CacheSubnetQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSubnet" : self = .invalidSubnet(try InvalidSubnet(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SubnetInUse" : self = .subnetInUse(try SubnetInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SubnetNotAllowedFault" : self = .subnetNotAllowedFault(try SubnetNotAllowedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyCacheSubnetGroupOutputError: Equatable {
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case cacheSubnetQuotaExceededFault(CacheSubnetQuotaExceededFault)
    case invalidSubnet(InvalidSubnet)
    case subnetInUse(SubnetInUse)
    case subnetNotAllowedFault(SubnetNotAllowedFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyCacheSubnetGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyCacheSubnetGroupOutputResponse(cacheSubnetGroup: \(String(describing: cacheSubnetGroup)))"}
}

extension ModifyCacheSubnetGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ModifyCacheSubnetGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheSubnetGroup = output.cacheSubnetGroup
        } else {
            self.cacheSubnetGroup = nil
        }
    }
}

public struct ModifyCacheSubnetGroupOutputResponse: Equatable {
    /// <p>Represents the output of one of the following operations:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreateCacheSubnetGroup</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ModifyCacheSubnetGroup</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let cacheSubnetGroup: CacheSubnetGroup?

    public init (
        cacheSubnetGroup: CacheSubnetGroup? = nil
    )
    {
        self.cacheSubnetGroup = cacheSubnetGroup
    }
}

struct ModifyCacheSubnetGroupOutputResponseBody: Equatable {
    public let cacheSubnetGroup: CacheSubnetGroup?
}

extension ModifyCacheSubnetGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheSubnetGroup = "CacheSubnetGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ModifyCacheSubnetGroupResult"))
        let cacheSubnetGroupDecoded = try containerValues.decodeIfPresent(CacheSubnetGroup.self, forKey: .cacheSubnetGroup)
        cacheSubnetGroup = cacheSubnetGroupDecoded
    }
}

public struct ModifyGlobalReplicationGroupInputBodyMiddleware: Middleware {
    public let id: String = "ModifyGlobalReplicationGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<ModifyGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyGlobalReplicationGroupOutputError>
}

extension ModifyGlobalReplicationGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyGlobalReplicationGroupInput(applyImmediately: \(String(describing: applyImmediately)), automaticFailoverEnabled: \(String(describing: automaticFailoverEnabled)), cacheNodeType: \(String(describing: cacheNodeType)), cacheParameterGroupName: \(String(describing: cacheParameterGroupName)), engineVersion: \(String(describing: engineVersion)), globalReplicationGroupDescription: \(String(describing: globalReplicationGroupDescription)), globalReplicationGroupId: \(String(describing: globalReplicationGroupId)))"}
}

extension ModifyGlobalReplicationGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: Key("ApplyImmediately"))
        }
        if let automaticFailoverEnabled = automaticFailoverEnabled {
            try container.encode(automaticFailoverEnabled, forKey: Key("AutomaticFailoverEnabled"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let globalReplicationGroupDescription = globalReplicationGroupDescription {
            try container.encode(globalReplicationGroupDescription, forKey: Key("GlobalReplicationGroupDescription"))
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: Key("GlobalReplicationGroupId"))
        }
        try container.encode("ModifyGlobalReplicationGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct ModifyGlobalReplicationGroupInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyGlobalReplicationGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<ModifyGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyGlobalReplicationGroupOutputError>
}

public struct ModifyGlobalReplicationGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyGlobalReplicationGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<ModifyGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyGlobalReplicationGroupOutputError>
}

public struct ModifyGlobalReplicationGroupInput: Equatable {
    /// <p>This parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible. Modifications to Global
    ///             Replication Groups cannot be requested to be applied in PreferredMaintenceWindow.
    ///              </p>
    public let applyImmediately: Bool
    /// <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure. </p>
    public let automaticFailoverEnabled: Bool?
    /// <p>A valid cache node type that you want to scale this Global datastore to.</p>
    public let cacheNodeType: String?
    /// <p>The name of the cache parameter group to use with the Global datastore. It must be compatible with the major engine version used by the Global datastore.</p>
    public let cacheParameterGroupName: String?
    /// <p>The upgraded version of the cache engine to be run on the clusters in the Global datastore. </p>
    public let engineVersion: String?
    /// <p>A description of the Global datastore</p>
    public let globalReplicationGroupDescription: String?
    /// <p>The name of the Global datastore</p>
    public let globalReplicationGroupId: String?

    public init (
        applyImmediately: Bool = false,
        automaticFailoverEnabled: Bool? = nil,
        cacheNodeType: String? = nil,
        cacheParameterGroupName: String? = nil,
        engineVersion: String? = nil,
        globalReplicationGroupDescription: String? = nil,
        globalReplicationGroupId: String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.automaticFailoverEnabled = automaticFailoverEnabled
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.engineVersion = engineVersion
        self.globalReplicationGroupDescription = globalReplicationGroupDescription
        self.globalReplicationGroupId = globalReplicationGroupId
    }
}

extension ModifyGlobalReplicationGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyGlobalReplicationGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupStateFault" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyGlobalReplicationGroupOutputError: Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyGlobalReplicationGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyGlobalReplicationGroupOutputResponse(globalReplicationGroup: \(String(describing: globalReplicationGroup)))"}
}

extension ModifyGlobalReplicationGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ModifyGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct ModifyGlobalReplicationGroupOutputResponse: Equatable {
    /// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different AWS region. The secondary cluster accepts only reads. The primary
    ///         cluster automatically replicates updates to the secondary cluster.</p>
    ///
    ///
    ///         <ul>
    ///             <li>
    ///                <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore,
    ///             which is what you use to associate a secondary cluster.</p>
    ///             </li>
    ///          </ul>
    public let globalReplicationGroup: GlobalReplicationGroup?

    public init (
        globalReplicationGroup: GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct ModifyGlobalReplicationGroupOutputResponseBody: Equatable {
    public let globalReplicationGroup: GlobalReplicationGroup?
}

extension ModifyGlobalReplicationGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ModifyGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

public struct ModifyReplicationGroupInputBodyMiddleware: Middleware {
    public let id: String = "ModifyReplicationGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyReplicationGroupInput>
    public typealias MOutput = OperationOutput<ModifyReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyReplicationGroupOutputError>
}

extension ModifyReplicationGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyReplicationGroupInput(applyImmediately: \(String(describing: applyImmediately)), authToken: \(String(describing: authToken)), authTokenUpdateStrategy: \(String(describing: authTokenUpdateStrategy)), autoMinorVersionUpgrade: \(String(describing: autoMinorVersionUpgrade)), automaticFailoverEnabled: \(String(describing: automaticFailoverEnabled)), cacheNodeType: \(String(describing: cacheNodeType)), cacheParameterGroupName: \(String(describing: cacheParameterGroupName)), cacheSecurityGroupNames: \(String(describing: cacheSecurityGroupNames)), engineVersion: \(String(describing: engineVersion)), logDeliveryConfigurations: \(String(describing: logDeliveryConfigurations)), multiAZEnabled: \(String(describing: multiAZEnabled)), nodeGroupId: \(String(describing: nodeGroupId)), notificationTopicArn: \(String(describing: notificationTopicArn)), notificationTopicStatus: \(String(describing: notificationTopicStatus)), preferredMaintenanceWindow: \(String(describing: preferredMaintenanceWindow)), primaryClusterId: \(String(describing: primaryClusterId)), removeUserGroups: \(String(describing: removeUserGroups)), replicationGroupDescription: \(String(describing: replicationGroupDescription)), replicationGroupId: \(String(describing: replicationGroupId)), securityGroupIds: \(String(describing: securityGroupIds)), snapshotRetentionLimit: \(String(describing: snapshotRetentionLimit)), snapshotWindow: \(String(describing: snapshotWindow)), snapshottingClusterId: \(String(describing: snapshottingClusterId)), userGroupIdsToAdd: \(String(describing: userGroupIdsToAdd)), userGroupIdsToRemove: \(String(describing: userGroupIdsToRemove)))"}
}

extension ModifyReplicationGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: Key("ApplyImmediately"))
        }
        if let authToken = authToken {
            try container.encode(authToken, forKey: Key("AuthToken"))
        }
        if let authTokenUpdateStrategy = authTokenUpdateStrategy {
            try container.encode(authTokenUpdateStrategy, forKey: Key("AuthTokenUpdateStrategy"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: Key("AutoMinorVersionUpgrade"))
        }
        if let automaticFailoverEnabled = automaticFailoverEnabled {
            try container.encode(automaticFailoverEnabled, forKey: Key("AutomaticFailoverEnabled"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let cacheSecurityGroupNames = cacheSecurityGroupNames {
            var cacheSecurityGroupNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheSecurityGroupNames"))
            for (index0, string0) in cacheSecurityGroupNames.enumerated() {
                try cacheSecurityGroupNamesContainer.encode(string0, forKey: Key("CacheSecurityGroupName.\(index0.advanced(by: 1))"))
            }
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LogDeliveryConfigurations"))
            for (index0, logdeliveryconfigurationrequest0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(logdeliveryconfigurationrequest0, forKey: Key("LogDeliveryConfigurationRequest.\(index0.advanced(by: 1))"))
            }
        }
        if let multiAZEnabled = multiAZEnabled {
            try container.encode(multiAZEnabled, forKey: Key("MultiAZEnabled"))
        }
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: Key("NodeGroupId"))
        }
        if let notificationTopicArn = notificationTopicArn {
            try container.encode(notificationTopicArn, forKey: Key("NotificationTopicArn"))
        }
        if let notificationTopicStatus = notificationTopicStatus {
            try container.encode(notificationTopicStatus, forKey: Key("NotificationTopicStatus"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: Key("PreferredMaintenanceWindow"))
        }
        if let primaryClusterId = primaryClusterId {
            try container.encode(primaryClusterId, forKey: Key("PrimaryClusterId"))
        }
        if let removeUserGroups = removeUserGroups {
            try container.encode(removeUserGroups, forKey: Key("RemoveUserGroups"))
        }
        if let replicationGroupDescription = replicationGroupDescription {
            try container.encode(replicationGroupDescription, forKey: Key("ReplicationGroupDescription"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SecurityGroupIds"))
            for (index0, string0) in securityGroupIds.enumerated() {
                try securityGroupIdsContainer.encode(string0, forKey: Key("SecurityGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: Key("SnapshotRetentionLimit"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: Key("SnapshotWindow"))
        }
        if let snapshottingClusterId = snapshottingClusterId {
            try container.encode(snapshottingClusterId, forKey: Key("SnapshottingClusterId"))
        }
        if let userGroupIdsToAdd = userGroupIdsToAdd {
            var userGroupIdsToAddContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserGroupIdsToAdd"))
            for (index0, usergroupid0) in userGroupIdsToAdd.enumerated() {
                try userGroupIdsToAddContainer.encode(usergroupid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userGroupIdsToRemove = userGroupIdsToRemove {
            var userGroupIdsToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserGroupIdsToRemove"))
            for (index0, usergroupid0) in userGroupIdsToRemove.enumerated() {
                try userGroupIdsToRemoveContainer.encode(usergroupid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ModifyReplicationGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct ModifyReplicationGroupInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyReplicationGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyReplicationGroupInput>
    public typealias MOutput = OperationOutput<ModifyReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyReplicationGroupOutputError>
}

public struct ModifyReplicationGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyReplicationGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyReplicationGroupInput>
    public typealias MOutput = OperationOutput<ModifyReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyReplicationGroupOutputError>
}

/// <p>Represents the input of a <code>ModifyReplicationGroups</code> operation.</p>
public struct ModifyReplicationGroupInput: Equatable {
    /// <p>If <code>true</code>, this parameter causes the modifications in this request and any
    ///             pending modifications to be applied, asynchronously and as soon as possible, regardless
    ///             of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p>
    ///         <p>If <code>false</code>, changes to the nodes in the replication group are applied on
    ///             the next maintenance reboot, or the next failure reboot, whichever occurs first.</p>
    ///         <p>Valid values: <code>true</code> | <code>false</code>
    ///          </p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    public let applyImmediately: Bool
    /// <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code>
    ///             parameter.
    ///             Password constraints:</p>
    ///         <ul>
    ///             <li>
    ///                <p>Must be only printable ASCII characters</p>
    ///             </li>
    ///             <li>
    ///                <p>Must be at least 16 characters and no more than 128 characters in length</p>
    ///             </li>
    ///             <li>
    ///                <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p>
    ///             </li>
    ///          </ul>
    ///         <p>
    ///
    ///             For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
    public let authToken: String?
    /// <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter.
    ///                 Possible values:</p>
    ///             <ul>
    ///             <li>
    ///                <p>Rotate</p>
    ///             </li>
    ///             <li>
    ///                <p>Set</p>
    ///             </li>
    ///          </ul>
    ///             <p>
    ///                 For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a>
    ///          </p>
    public let authTokenUpdateStrategy: AuthTokenUpdateStrategyType?
    /// <p>This parameter is currently disabled.</p>
    public let autoMinorVersionUpgrade: Bool?
    /// <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p>
    ///         <p>Valid values: <code>true</code> | <code>false</code>
    ///          </p>
    public let automaticFailoverEnabled: Bool?
    /// <p>A valid cache node type that you want to scale this replication group to.</p>
    public let cacheNodeType: String?
    /// <p>The name of the cache parameter group to apply to all of the clusters in this replication group.
    ///             This change is asynchronously applied as soon as possible for parameters when the
    ///             <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.</p>
    public let cacheParameterGroupName: String?
    /// <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p>
    ///         <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
    ///         <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
    public let cacheSecurityGroupNames: [String]?
    /// <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p>
    ///
    ///         <p>
    ///             <b>Important:</b> You can upgrade to a newer engine version (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version.
    ///             If you want to use an earlier engine version,
    ///             you must delete the existing replication group and create it anew with the earlier engine version. </p>
    public let engineVersion: String?
    /// <p>Specifies the destination, format and type of the logs.</p>
    public let logDeliveryConfigurations: [LogDeliveryConfigurationRequest]?
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    public let multiAZEnabled: Bool?
    /// <p>Deprecated. This parameter is not used.</p>
    @available(*, deprecated)
    public let nodeGroupId: String?
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p>
    ///         <note>
    ///             <p>The Amazon SNS topic owner must be same as the replication group owner. </p>
    ///          </note>
    public let notificationTopicArn: String?
    /// <p>The status of the Amazon SNS notification topic for the replication group.
    ///             Notifications are sent only if the status is <code>active</code>.</p>
    ///         <p>Valid values: <code>active</code> | <code>inactive</code>
    ///          </p>
    public let notificationTopicStatus: String?
    /// <p>Specifies the weekly time range during which maintenance
    ///    on the cluster is performed. It is specified as a range in
    ///    the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum
    ///    maintenance window is a 60 minute period.</p>
    ///          <p>Valid values for <code>ddd</code> are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>sun</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>mon</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>tue</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>wed</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>thu</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>fri</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sat</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>Example: <code>sun:23:00-mon:01:30</code>
    ///          </p>
    public let preferredMaintenanceWindow: String?
    /// <p>For replication groups with a single primary,
    ///             if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role.
    ///             The nodes of all other clusters in the replication group are read replicas.</p>
    public let primaryClusterId: String?
    /// <p>Removes the user groups that can access this replication group.</p>
    public let removeUserGroups: Bool?
    /// <p>A description for the replication group. Maximum length is 255 characters.</p>
    public let replicationGroupDescription: String?
    /// <p>The identifier of the replication group to modify.</p>
    public let replicationGroupId: String?
    /// <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p>
    ///         <p>This parameter can be used only with replication group containing clusters running in
    ///             an Amazon Virtual Private Cloud (Amazon VPC).</p>
    public let securityGroupIds: [String]?
    /// <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before
    ///             deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a
    ///             snapshot that was taken today is retained for 5 days before being deleted.</p>
    ///         <p>
    ///             <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0),
    ///             backups are turned off.</p>
    public let snapshotRetentionLimit: Int?
    /// <p>The daily time range (in UTC) during which ElastiCache  begins taking a daily snapshot of
    ///             the node group (shard) specified by <code>SnapshottingClusterId</code>.</p>
    ///         <p>Example: <code>05:00-09:00</code>
    ///          </p>
    ///         <p>If you do not specify this parameter, ElastiCache  automatically chooses an appropriate time range.</p>
    public let snapshotWindow: String?
    /// <p>The cluster ID that is used as the daily snapshot source for the replication group.
    ///             This parameter cannot be set for Redis (cluster mode enabled) replication groups.</p>
    public let snapshottingClusterId: String?
    /// <p>The user group you are associating with the replication group.</p>
    public let userGroupIdsToAdd: [String]?
    /// <p>The user group to remove, meaning the users in the group no longer can access the replication group.</p>
    public let userGroupIdsToRemove: [String]?

    public init (
        applyImmediately: Bool = false,
        authToken: String? = nil,
        authTokenUpdateStrategy: AuthTokenUpdateStrategyType? = nil,
        autoMinorVersionUpgrade: Bool? = nil,
        automaticFailoverEnabled: Bool? = nil,
        cacheNodeType: String? = nil,
        cacheParameterGroupName: String? = nil,
        cacheSecurityGroupNames: [String]? = nil,
        engineVersion: String? = nil,
        logDeliveryConfigurations: [LogDeliveryConfigurationRequest]? = nil,
        multiAZEnabled: Bool? = nil,
        nodeGroupId: String? = nil,
        notificationTopicArn: String? = nil,
        notificationTopicStatus: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        primaryClusterId: String? = nil,
        removeUserGroups: Bool? = nil,
        replicationGroupDescription: String? = nil,
        replicationGroupId: String? = nil,
        securityGroupIds: [String]? = nil,
        snapshotRetentionLimit: Int? = nil,
        snapshotWindow: String? = nil,
        snapshottingClusterId: String? = nil,
        userGroupIdsToAdd: [String]? = nil,
        userGroupIdsToRemove: [String]? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.authToken = authToken
        self.authTokenUpdateStrategy = authTokenUpdateStrategy
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.automaticFailoverEnabled = automaticFailoverEnabled
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSecurityGroupNames = cacheSecurityGroupNames
        self.engineVersion = engineVersion
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.multiAZEnabled = multiAZEnabled
        self.nodeGroupId = nodeGroupId
        self.notificationTopicArn = notificationTopicArn
        self.notificationTopicStatus = notificationTopicStatus
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.primaryClusterId = primaryClusterId
        self.removeUserGroups = removeUserGroups
        self.replicationGroupDescription = replicationGroupDescription
        self.replicationGroupId = replicationGroupId
        self.securityGroupIds = securityGroupIds
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
        self.snapshottingClusterId = snapshottingClusterId
        self.userGroupIdsToAdd = userGroupIdsToAdd
        self.userGroupIdsToRemove = userGroupIdsToRemove
    }
}

extension ModifyReplicationGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyReplicationGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFoundFault" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupNotFoundFault" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFoundFault" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCacheClusterCapacityFault" : self = .insufficientCacheClusterCapacityFault(try InsufficientCacheClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterStateFault" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheSecurityGroupStateFault" : self = .invalidCacheSecurityGroupStateFault(try InvalidCacheSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyFault" : self = .invalidKMSKeyFault(try InvalidKMSKeyFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupStateFault" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserGroupStateFault" : self = .invalidUserGroupStateFault(try InvalidUserGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCNetworkStateFault" : self = .invalidVPCNetworkStateFault(try InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForClusterExceededFault" : self = .nodeQuotaForClusterExceededFault(try NodeQuotaForClusterExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForCustomerExceededFault" : self = .nodeQuotaForCustomerExceededFault(try NodeQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFoundFault" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyReplicationGroupOutputError: Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case insufficientCacheClusterCapacityFault(InsufficientCacheClusterCapacityFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidCacheSecurityGroupStateFault(InvalidCacheSecurityGroupStateFault)
    case invalidKMSKeyFault(InvalidKMSKeyFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case invalidUserGroupStateFault(InvalidUserGroupStateFault)
    case invalidVPCNetworkStateFault(InvalidVPCNetworkStateFault)
    case nodeQuotaForClusterExceededFault(NodeQuotaForClusterExceededFault)
    case nodeQuotaForCustomerExceededFault(NodeQuotaForCustomerExceededFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyReplicationGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyReplicationGroupOutputResponse(replicationGroup: \(String(describing: replicationGroup)))"}
}

extension ModifyReplicationGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ModifyReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct ModifyReplicationGroupOutputResponse: Equatable {
    /// <p>Contains all of the attributes of a specific Redis replication group.</p>
    public let replicationGroup: ReplicationGroup?

    public init (
        replicationGroup: ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct ModifyReplicationGroupOutputResponseBody: Equatable {
    public let replicationGroup: ReplicationGroup?
}

extension ModifyReplicationGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ModifyReplicationGroupResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

public struct ModifyReplicationGroupShardConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "ModifyReplicationGroupShardConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyReplicationGroupShardConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyReplicationGroupShardConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyReplicationGroupShardConfigurationInput>
    public typealias MOutput = OperationOutput<ModifyReplicationGroupShardConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyReplicationGroupShardConfigurationOutputError>
}

extension ModifyReplicationGroupShardConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyReplicationGroupShardConfigurationInput(applyImmediately: \(String(describing: applyImmediately)), nodeGroupCount: \(String(describing: nodeGroupCount)), nodeGroupsToRemove: \(String(describing: nodeGroupsToRemove)), nodeGroupsToRetain: \(String(describing: nodeGroupsToRetain)), replicationGroupId: \(String(describing: replicationGroupId)), reshardingConfiguration: \(String(describing: reshardingConfiguration)))"}
}

extension ModifyReplicationGroupShardConfigurationInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: Key("ApplyImmediately"))
        }
        if nodeGroupCount != 0 {
            try container.encode(nodeGroupCount, forKey: Key("NodeGroupCount"))
        }
        if let nodeGroupsToRemove = nodeGroupsToRemove {
            var nodeGroupsToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NodeGroupsToRemove"))
            for (index0, allowednodegroupid0) in nodeGroupsToRemove.enumerated() {
                try nodeGroupsToRemoveContainer.encode(allowednodegroupid0, forKey: Key("NodeGroupToRemove.\(index0.advanced(by: 1))"))
            }
        }
        if let nodeGroupsToRetain = nodeGroupsToRetain {
            var nodeGroupsToRetainContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NodeGroupsToRetain"))
            for (index0, allowednodegroupid0) in nodeGroupsToRetain.enumerated() {
                try nodeGroupsToRetainContainer.encode(allowednodegroupid0, forKey: Key("NodeGroupToRetain.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let reshardingConfiguration = reshardingConfiguration {
            var reshardingConfigurationContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReshardingConfiguration"))
            for (index0, reshardingconfiguration0) in reshardingConfiguration.enumerated() {
                try reshardingConfigurationContainer.encode(reshardingconfiguration0, forKey: Key("ReshardingConfiguration.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ModifyReplicationGroupShardConfiguration", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct ModifyReplicationGroupShardConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyReplicationGroupShardConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyReplicationGroupShardConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyReplicationGroupShardConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyReplicationGroupShardConfigurationInput>
    public typealias MOutput = OperationOutput<ModifyReplicationGroupShardConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyReplicationGroupShardConfigurationOutputError>
}

public struct ModifyReplicationGroupShardConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyReplicationGroupShardConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyReplicationGroupShardConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyReplicationGroupShardConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyReplicationGroupShardConfigurationInput>
    public typealias MOutput = OperationOutput<ModifyReplicationGroupShardConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyReplicationGroupShardConfigurationOutputError>
}

/// <p>Represents the input for a <code>ModifyReplicationGroupShardConfiguration</code> operation.</p>
public struct ModifyReplicationGroupShardConfigurationInput: Equatable {
    /// <p>Indicates that the shard reconfiguration process begins immediately.
    ///             At present, the only permitted value for this parameter is <code>true</code>.</p>
    ///         <p>Value: true</p>
    public let applyImmediately: Bool
    /// <p>The number of node groups (shards) that results from the modification of the
    ///             shard configuration.</p>
    public let nodeGroupCount: Int
    /// <p>If the value of <code>NodeGroupCount</code> is less than the
    ///             current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or
    ///             <code>NodeGroupsToRetain</code> is required.
    ///             <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove
    ///             from the cluster.</p>
    ///         <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code>
    ///             from the cluster.</p>
    public let nodeGroupsToRemove: [String]?
    /// <p>If the value of <code>NodeGroupCount</code> is less than the
    ///             current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or
    ///             <code>NodeGroupsToRetain</code> is required.
    ///             <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain
    ///             in the cluster.</p>
    ///         <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code>
    ///             from the cluster.</p>
    public let nodeGroupsToRetain: [String]?
    /// <p>The name of the Redis (cluster mode enabled) cluster (replication group)
    ///             on which the shards are to be configured.</p>
    public let replicationGroupId: String?
    /// <p>Specifies the preferred availability zones for each node group in the cluster.
    ///             If the value of <code>NodeGroupCount</code> is greater than the current number
    ///             of node groups (shards), you can use this parameter to specify the preferred
    ///             availability zones of the cluster's shards.
    ///             If you omit this parameter ElastiCache selects availability zones for you.</p>
    ///         <p>You can specify this parameter only if the value of <code>NodeGroupCount</code>
    ///             is greater than the current number of node groups (shards).</p>
    public let reshardingConfiguration: [ReshardingConfiguration]?

    public init (
        applyImmediately: Bool = false,
        nodeGroupCount: Int = 0,
        nodeGroupsToRemove: [String]? = nil,
        nodeGroupsToRetain: [String]? = nil,
        replicationGroupId: String? = nil,
        reshardingConfiguration: [ReshardingConfiguration]? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.nodeGroupCount = nodeGroupCount
        self.nodeGroupsToRemove = nodeGroupsToRemove
        self.nodeGroupsToRetain = nodeGroupsToRetain
        self.replicationGroupId = replicationGroupId
        self.reshardingConfiguration = reshardingConfiguration
    }
}

extension ModifyReplicationGroupShardConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyReplicationGroupShardConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InsufficientCacheClusterCapacityFault" : self = .insufficientCacheClusterCapacityFault(try InsufficientCacheClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterStateFault" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyFault" : self = .invalidKMSKeyFault(try InvalidKMSKeyFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupStateFault" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCNetworkStateFault" : self = .invalidVPCNetworkStateFault(try InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeGroupsPerReplicationGroupQuotaExceededFault" : self = .nodeGroupsPerReplicationGroupQuotaExceededFault(try NodeGroupsPerReplicationGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForCustomerExceededFault" : self = .nodeQuotaForCustomerExceededFault(try NodeQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyReplicationGroupShardConfigurationOutputError: Equatable {
    case insufficientCacheClusterCapacityFault(InsufficientCacheClusterCapacityFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidKMSKeyFault(InvalidKMSKeyFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case invalidVPCNetworkStateFault(InvalidVPCNetworkStateFault)
    case nodeGroupsPerReplicationGroupQuotaExceededFault(NodeGroupsPerReplicationGroupQuotaExceededFault)
    case nodeQuotaForCustomerExceededFault(NodeQuotaForCustomerExceededFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyReplicationGroupShardConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyReplicationGroupShardConfigurationOutputResponse(replicationGroup: \(String(describing: replicationGroup)))"}
}

extension ModifyReplicationGroupShardConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ModifyReplicationGroupShardConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct ModifyReplicationGroupShardConfigurationOutputResponse: Equatable {
    /// <p>Contains all of the attributes of a specific Redis replication group.</p>
    public let replicationGroup: ReplicationGroup?

    public init (
        replicationGroup: ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct ModifyReplicationGroupShardConfigurationOutputResponseBody: Equatable {
    public let replicationGroup: ReplicationGroup?
}

extension ModifyReplicationGroupShardConfigurationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ModifyReplicationGroupShardConfigurationResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

public struct ModifyUserGroupInputBodyMiddleware: Middleware {
    public let id: String = "ModifyUserGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyUserGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyUserGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyUserGroupInput>
    public typealias MOutput = OperationOutput<ModifyUserGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyUserGroupOutputError>
}

extension ModifyUserGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyUserGroupInput(userGroupId: \(String(describing: userGroupId)), userIdsToAdd: \(String(describing: userIdsToAdd)), userIdsToRemove: \(String(describing: userIdsToRemove)))"}
}

extension ModifyUserGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let userGroupId = userGroupId {
            try container.encode(userGroupId, forKey: Key("UserGroupId"))
        }
        if let userIdsToAdd = userIdsToAdd {
            var userIdsToAddContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserIdsToAdd"))
            for (index0, userid0) in userIdsToAdd.enumerated() {
                try userIdsToAddContainer.encode(userid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userIdsToRemove = userIdsToRemove {
            var userIdsToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserIdsToRemove"))
            for (index0, userid0) in userIdsToRemove.enumerated() {
                try userIdsToRemoveContainer.encode(userid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ModifyUserGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct ModifyUserGroupInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyUserGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyUserGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyUserGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyUserGroupInput>
    public typealias MOutput = OperationOutput<ModifyUserGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyUserGroupOutputError>
}

public struct ModifyUserGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyUserGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyUserGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyUserGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyUserGroupInput>
    public typealias MOutput = OperationOutput<ModifyUserGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyUserGroupOutputError>
}

public struct ModifyUserGroupInput: Equatable {
    /// <p>The ID of the user group.</p>
    public let userGroupId: String?
    /// <p>The list of user IDs to add to the user group.</p>
    public let userIdsToAdd: [String]?
    /// <p>The list of user IDs to remove from the user group.</p>
    public let userIdsToRemove: [String]?

    public init (
        userGroupId: String? = nil,
        userIdsToAdd: [String]? = nil,
        userIdsToRemove: [String]? = nil
    )
    {
        self.userGroupId = userGroupId
        self.userIdsToAdd = userIdsToAdd
        self.userIdsToRemove = userIdsToRemove
    }
}

extension ModifyUserGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyUserGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DefaultUserRequired" : self = .defaultUserRequired(try DefaultUserRequired(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateUserNameFault" : self = .duplicateUserNameFault(try DuplicateUserNameFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserGroupStateFault" : self = .invalidUserGroupStateFault(try InvalidUserGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFoundFault" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundFault" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyUserGroupOutputError: Equatable {
    case defaultUserRequired(DefaultUserRequired)
    case duplicateUserNameFault(DuplicateUserNameFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidUserGroupStateFault(InvalidUserGroupStateFault)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyUserGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyUserGroupOutputResponse(aRN: \(String(describing: aRN)), engine: \(String(describing: engine)), pendingChanges: \(String(describing: pendingChanges)), replicationGroups: \(String(describing: replicationGroups)), status: \(String(describing: status)), userGroupId: \(String(describing: userGroupId)), userIds: \(String(describing: userIds)))"}
}

extension ModifyUserGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ModifyUserGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.aRN = output.aRN
            self.engine = output.engine
            self.pendingChanges = output.pendingChanges
            self.replicationGroups = output.replicationGroups
            self.status = output.status
            self.userGroupId = output.userGroupId
            self.userIds = output.userIds
        } else {
            self.aRN = nil
            self.engine = nil
            self.pendingChanges = nil
            self.replicationGroups = nil
            self.status = nil
            self.userGroupId = nil
            self.userIds = nil
        }
    }
}

public struct ModifyUserGroupOutputResponse: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the user group.</p>
    public let aRN: String?
    /// <p>The current supported value is Redis. </p>
    public let engine: String?
    /// <p>A list of updates being applied to the user groups.</p>
    public let pendingChanges: UserGroupPendingChanges?
    /// <p>A list of replication groups that the user group can access.</p>
    public let replicationGroups: [String]?
    /// <p>Indicates user group status. Can be "creating", "active", "modifying", "deleting".</p>
    public let status: String?
    /// <p>The ID of the user group.</p>
    public let userGroupId: String?
    /// <p>The list of user IDs that belong to the user group.</p>
    public let userIds: [String]?

    public init (
        aRN: String? = nil,
        engine: String? = nil,
        pendingChanges: UserGroupPendingChanges? = nil,
        replicationGroups: [String]? = nil,
        status: String? = nil,
        userGroupId: String? = nil,
        userIds: [String]? = nil
    )
    {
        self.aRN = aRN
        self.engine = engine
        self.pendingChanges = pendingChanges
        self.replicationGroups = replicationGroups
        self.status = status
        self.userGroupId = userGroupId
        self.userIds = userIds
    }
}

struct ModifyUserGroupOutputResponseBody: Equatable {
    public let userGroupId: String?
    public let status: String?
    public let engine: String?
    public let userIds: [String]?
    public let pendingChanges: UserGroupPendingChanges?
    public let replicationGroups: [String]?
    public let aRN: String?
}

extension ModifyUserGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case engine = "Engine"
        case pendingChanges = "PendingChanges"
        case replicationGroups = "ReplicationGroups"
        case status = "Status"
        case userGroupId = "UserGroupId"
        case userIds = "UserIds"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ModifyUserGroupResult"))
        let userGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userGroupId)
        userGroupId = userGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        if containerValues.contains(.userIds) {
            struct KeyVal0{struct member{}}
            let userIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIds)
            if let userIdsWrappedContainer = userIdsWrappedContainer {
                let userIdsContainer = try userIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userIdsBuffer:[String]? = nil
                if let userIdsContainer = userIdsContainer {
                    userIdsBuffer = [String]()
                    for stringContainer0 in userIdsContainer {
                        userIdsBuffer?.append(stringContainer0)
                    }
                }
                userIds = userIdsBuffer
            } else {
                userIds = []
            }
        } else {
            userIds = nil
        }
        let pendingChangesDecoded = try containerValues.decodeIfPresent(UserGroupPendingChanges.self, forKey: .pendingChanges)
        pendingChanges = pendingChangesDecoded
        if containerValues.contains(.replicationGroups) {
            struct KeyVal0{struct member{}}
            let replicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replicationGroups)
            if let replicationGroupsWrappedContainer = replicationGroupsWrappedContainer {
                let replicationGroupsContainer = try replicationGroupsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var replicationGroupsBuffer:[String]? = nil
                if let replicationGroupsContainer = replicationGroupsContainer {
                    replicationGroupsBuffer = [String]()
                    for stringContainer0 in replicationGroupsContainer {
                        replicationGroupsBuffer?.append(stringContainer0)
                    }
                }
                replicationGroups = replicationGroupsBuffer
            } else {
                replicationGroups = []
            }
        } else {
            replicationGroups = nil
        }
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

public struct ModifyUserInputBodyMiddleware: Middleware {
    public let id: String = "ModifyUserInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyUserInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyUserInput>
    public typealias MOutput = OperationOutput<ModifyUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyUserOutputError>
}

extension ModifyUserInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyUserInput(accessString: \(String(describing: accessString)), appendAccessString: \(String(describing: appendAccessString)), noPasswordRequired: \(String(describing: noPasswordRequired)), passwords: \(String(describing: passwords)), userId: \(String(describing: userId)))"}
}

extension ModifyUserInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let accessString = accessString {
            try container.encode(accessString, forKey: Key("AccessString"))
        }
        if let appendAccessString = appendAccessString {
            try container.encode(appendAccessString, forKey: Key("AppendAccessString"))
        }
        if let noPasswordRequired = noPasswordRequired {
            try container.encode(noPasswordRequired, forKey: Key("NoPasswordRequired"))
        }
        if let passwords = passwords {
            var passwordsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Passwords"))
            for (index0, string0) in passwords.enumerated() {
                try passwordsContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userId = userId {
            try container.encode(userId, forKey: Key("UserId"))
        }
        try container.encode("ModifyUser", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct ModifyUserInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyUserInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyUserInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyUserInput>
    public typealias MOutput = OperationOutput<ModifyUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyUserOutputError>
}

public struct ModifyUserInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyUserInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyUserInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyUserInput>
    public typealias MOutput = OperationOutput<ModifyUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyUserOutputError>
}

public struct ModifyUserInput: Equatable {
    /// <p>Access permissions string used for this user.</p>
    public let accessString: String?
    /// <p>Adds additional user permissions to the access string.</p>
    public let appendAccessString: String?
    /// <p>Indicates no password is required for the user.</p>
    public let noPasswordRequired: Bool?
    /// <p>The passwords belonging to the user. You are allowed up to two.</p>
    public let passwords: [String]?
    /// <p>The ID of the user.</p>
    public let userId: String?

    public init (
        accessString: String? = nil,
        appendAccessString: String? = nil,
        noPasswordRequired: Bool? = nil,
        passwords: [String]? = nil,
        userId: String? = nil
    )
    {
        self.accessString = accessString
        self.appendAccessString = appendAccessString
        self.noPasswordRequired = noPasswordRequired
        self.passwords = passwords
        self.userId = userId
    }
}

extension ModifyUserOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyUserOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserStateFault" : self = .invalidUserStateFault(try InvalidUserStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundFault" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyUserOutputError: Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidUserStateFault(InvalidUserStateFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyUserOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyUserOutputResponse(aRN: \(String(describing: aRN)), accessString: \(String(describing: accessString)), authentication: \(String(describing: authentication)), engine: \(String(describing: engine)), status: \(String(describing: status)), userGroupIds: \(String(describing: userGroupIds)), userId: \(String(describing: userId)), userName: \(String(describing: userName)))"}
}

extension ModifyUserOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ModifyUserOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.aRN = output.aRN
            self.accessString = output.accessString
            self.authentication = output.authentication
            self.engine = output.engine
            self.status = output.status
            self.userGroupIds = output.userGroupIds
            self.userId = output.userId
            self.userName = output.userName
        } else {
            self.aRN = nil
            self.accessString = nil
            self.authentication = nil
            self.engine = nil
            self.status = nil
            self.userGroupIds = nil
            self.userId = nil
            self.userName = nil
        }
    }
}

public struct ModifyUserOutputResponse: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the user.</p>
    public let aRN: String?
    /// <p>Access permissions string used for this user.</p>
    public let accessString: String?
    /// <p>Denotes whether the user requires a password to authenticate.</p>
    public let authentication: Authentication?
    /// <p>The current supported value is Redis.</p>
    public let engine: String?
    /// <p>Indicates the user status. Can be "active", "modifying" or "deleting".</p>
    public let status: String?
    /// <p>Returns a list of the user group IDs the user belongs to.</p>
    public let userGroupIds: [String]?
    /// <p>The ID of the user.</p>
    public let userId: String?
    /// <p>The username of the user.</p>
    public let userName: String?

    public init (
        aRN: String? = nil,
        accessString: String? = nil,
        authentication: Authentication? = nil,
        engine: String? = nil,
        status: String? = nil,
        userGroupIds: [String]? = nil,
        userId: String? = nil,
        userName: String? = nil
    )
    {
        self.aRN = aRN
        self.accessString = accessString
        self.authentication = authentication
        self.engine = engine
        self.status = status
        self.userGroupIds = userGroupIds
        self.userId = userId
        self.userName = userName
    }
}

struct ModifyUserOutputResponseBody: Equatable {
    public let userId: String?
    public let userName: String?
    public let status: String?
    public let engine: String?
    public let accessString: String?
    public let userGroupIds: [String]?
    public let authentication: Authentication?
    public let aRN: String?
}

extension ModifyUserOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case accessString = "AccessString"
        case authentication = "Authentication"
        case engine = "Engine"
        case status = "Status"
        case userGroupIds = "UserGroupIds"
        case userId = "UserId"
        case userName = "UserName"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ModifyUserResult"))
        let userIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userId)
        userId = userIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userName)
        userName = userNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let accessStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accessString)
        accessString = accessStringDecoded
        if containerValues.contains(.userGroupIds) {
            struct KeyVal0{struct member{}}
            let userGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIds)
            if let userGroupIdsWrappedContainer = userGroupIdsWrappedContainer {
                let userGroupIdsContainer = try userGroupIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userGroupIdsBuffer:[String]? = nil
                if let userGroupIdsContainer = userGroupIdsContainer {
                    userGroupIdsBuffer = [String]()
                    for stringContainer0 in userGroupIdsContainer {
                        userGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                userGroupIds = userGroupIdsBuffer
            } else {
                userGroupIds = []
            }
        } else {
            userGroupIds = nil
        }
        let authenticationDecoded = try containerValues.decodeIfPresent(Authentication.self, forKey: .authentication)
        authentication = authenticationDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

public enum MultiAZStatus {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension MultiAZStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MultiAZStatus] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "disabled"
        case .enabled: return "enabled"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MultiAZStatus(rawValue: rawValue) ?? MultiAZStatus.sdkUnknown(rawValue)
    }
}

extension NoOperationFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NoOperationFault(message: \(String(describing: message)))"}
}

extension NoOperationFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<NoOperationFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation was not performed because no changes were required.</p>
public struct NoOperationFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct NoOperationFaultBody: Equatable {
    public let message: String?
}

extension NoOperationFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NodeGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nodeGroupId = "NodeGroupId"
        case nodeGroupMembers = "NodeGroupMembers"
        case primaryEndpoint = "PrimaryEndpoint"
        case readerEndpoint = "ReaderEndpoint"
        case slots = "Slots"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: Key("NodeGroupId"))
        }
        if let nodeGroupMembers = nodeGroupMembers {
            var nodeGroupMembersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NodeGroupMembers"))
            for (index0, nodegroupmember0) in nodeGroupMembers.enumerated() {
                try nodeGroupMembersContainer.encode(nodegroupmember0, forKey: Key("NodeGroupMember.\(index0.advanced(by: 1))"))
            }
        }
        if let primaryEndpoint = primaryEndpoint {
            try container.encode(primaryEndpoint, forKey: Key("PrimaryEndpoint"))
        }
        if let readerEndpoint = readerEndpoint {
            try container.encode(readerEndpoint, forKey: Key("ReaderEndpoint"))
        }
        if let slots = slots {
            try container.encode(slots, forKey: Key("Slots"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let primaryEndpointDecoded = try containerValues.decodeIfPresent(Endpoint.self, forKey: .primaryEndpoint)
        primaryEndpoint = primaryEndpointDecoded
        let readerEndpointDecoded = try containerValues.decodeIfPresent(Endpoint.self, forKey: .readerEndpoint)
        readerEndpoint = readerEndpointDecoded
        let slotsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .slots)
        slots = slotsDecoded
        if containerValues.contains(.nodeGroupMembers) {
            struct KeyVal0{struct NodeGroupMember{}}
            let nodeGroupMembersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeGroupMember>.CodingKeys.self, forKey: .nodeGroupMembers)
            if let nodeGroupMembersWrappedContainer = nodeGroupMembersWrappedContainer {
                let nodeGroupMembersContainer = try nodeGroupMembersWrappedContainer.decodeIfPresent([NodeGroupMember].self, forKey: .member)
                var nodeGroupMembersBuffer:[NodeGroupMember]? = nil
                if let nodeGroupMembersContainer = nodeGroupMembersContainer {
                    nodeGroupMembersBuffer = [NodeGroupMember]()
                    for structureContainer0 in nodeGroupMembersContainer {
                        nodeGroupMembersBuffer?.append(structureContainer0)
                    }
                }
                nodeGroupMembers = nodeGroupMembersBuffer
            } else {
                nodeGroupMembers = []
            }
        } else {
            nodeGroupMembers = nil
        }
    }
}

extension NodeGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeGroup(nodeGroupId: \(String(describing: nodeGroupId)), nodeGroupMembers: \(String(describing: nodeGroupMembers)), primaryEndpoint: \(String(describing: primaryEndpoint)), readerEndpoint: \(String(describing: readerEndpoint)), slots: \(String(describing: slots)), status: \(String(describing: status)))"}
}

/// <p>Represents a collection of cache nodes in a replication group.
///             One node in the node group is the read/write primary node.
///             All the other nodes are read-only Replica nodes.</p>
public struct NodeGroup: Equatable {
    /// <p>The identifier for the node group (shard). A Redis (cluster mode disabled) replication group contains only 1 node group; therefore, the node group ID is 0001.
    ///             A Redis (cluster mode enabled) replication group contains 1 to 90 node groups numbered 0001 to 0090. Optionally, the user can provide the id for
    ///             a node group. </p>
    public let nodeGroupId: String?
    /// <p>A list containing information about individual nodes within the node group (shard).</p>
    public let nodeGroupMembers: [NodeGroupMember]?
    /// <p>The endpoint of the primary node in this node group (shard).</p>
    public let primaryEndpoint: Endpoint?
    /// <p>The endpoint of the replica nodes in this node group (shard).</p>
    public let readerEndpoint: Endpoint?
    /// <p>The keyspace for this node group (shard).</p>
    public let slots: String?
    /// <p>The current state of this replication group - <code>creating</code>,
    ///             <code>available</code>, <code>modifying</code>, <code>deleting</code>.</p>
    public let status: String?

    public init (
        nodeGroupId: String? = nil,
        nodeGroupMembers: [NodeGroupMember]? = nil,
        primaryEndpoint: Endpoint? = nil,
        readerEndpoint: Endpoint? = nil,
        slots: String? = nil,
        status: String? = nil
    )
    {
        self.nodeGroupId = nodeGroupId
        self.nodeGroupMembers = nodeGroupMembers
        self.primaryEndpoint = primaryEndpoint
        self.readerEndpoint = readerEndpoint
        self.slots = slots
        self.status = status
    }
}

extension NodeGroupConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nodeGroupId = "NodeGroupId"
        case primaryAvailabilityZone = "PrimaryAvailabilityZone"
        case primaryOutpostArn = "PrimaryOutpostArn"
        case replicaAvailabilityZones = "ReplicaAvailabilityZones"
        case replicaCount = "ReplicaCount"
        case replicaOutpostArns = "ReplicaOutpostArns"
        case slots = "Slots"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: Key("NodeGroupId"))
        }
        if let primaryAvailabilityZone = primaryAvailabilityZone {
            try container.encode(primaryAvailabilityZone, forKey: Key("PrimaryAvailabilityZone"))
        }
        if let primaryOutpostArn = primaryOutpostArn {
            try container.encode(primaryOutpostArn, forKey: Key("PrimaryOutpostArn"))
        }
        if let replicaAvailabilityZones = replicaAvailabilityZones {
            var replicaAvailabilityZonesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReplicaAvailabilityZones"))
            for (index0, string0) in replicaAvailabilityZones.enumerated() {
                try replicaAvailabilityZonesContainer.encode(string0, forKey: Key("AvailabilityZone.\(index0.advanced(by: 1))"))
            }
        }
        if let replicaCount = replicaCount {
            try container.encode(replicaCount, forKey: Key("ReplicaCount"))
        }
        if let replicaOutpostArns = replicaOutpostArns {
            var replicaOutpostArnsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReplicaOutpostArns"))
            for (index0, string0) in replicaOutpostArns.enumerated() {
                try replicaOutpostArnsContainer.encode(string0, forKey: Key("OutpostArn.\(index0.advanced(by: 1))"))
            }
        }
        if let slots = slots {
            try container.encode(slots, forKey: Key("Slots"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        let slotsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .slots)
        slots = slotsDecoded
        let replicaCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .replicaCount)
        replicaCount = replicaCountDecoded
        let primaryAvailabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .primaryAvailabilityZone)
        primaryAvailabilityZone = primaryAvailabilityZoneDecoded
        if containerValues.contains(.replicaAvailabilityZones) {
            struct KeyVal0{struct AvailabilityZone{}}
            let replicaAvailabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AvailabilityZone>.CodingKeys.self, forKey: .replicaAvailabilityZones)
            if let replicaAvailabilityZonesWrappedContainer = replicaAvailabilityZonesWrappedContainer {
                let replicaAvailabilityZonesContainer = try replicaAvailabilityZonesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var replicaAvailabilityZonesBuffer:[String]? = nil
                if let replicaAvailabilityZonesContainer = replicaAvailabilityZonesContainer {
                    replicaAvailabilityZonesBuffer = [String]()
                    for stringContainer0 in replicaAvailabilityZonesContainer {
                        replicaAvailabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                replicaAvailabilityZones = replicaAvailabilityZonesBuffer
            } else {
                replicaAvailabilityZones = []
            }
        } else {
            replicaAvailabilityZones = nil
        }
        let primaryOutpostArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .primaryOutpostArn)
        primaryOutpostArn = primaryOutpostArnDecoded
        if containerValues.contains(.replicaOutpostArns) {
            struct KeyVal0{struct OutpostArn{}}
            let replicaOutpostArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.OutpostArn>.CodingKeys.self, forKey: .replicaOutpostArns)
            if let replicaOutpostArnsWrappedContainer = replicaOutpostArnsWrappedContainer {
                let replicaOutpostArnsContainer = try replicaOutpostArnsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var replicaOutpostArnsBuffer:[String]? = nil
                if let replicaOutpostArnsContainer = replicaOutpostArnsContainer {
                    replicaOutpostArnsBuffer = [String]()
                    for stringContainer0 in replicaOutpostArnsContainer {
                        replicaOutpostArnsBuffer?.append(stringContainer0)
                    }
                }
                replicaOutpostArns = replicaOutpostArnsBuffer
            } else {
                replicaOutpostArns = []
            }
        } else {
            replicaOutpostArns = nil
        }
    }
}

extension NodeGroupConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeGroupConfiguration(nodeGroupId: \(String(describing: nodeGroupId)), primaryAvailabilityZone: \(String(describing: primaryAvailabilityZone)), primaryOutpostArn: \(String(describing: primaryOutpostArn)), replicaAvailabilityZones: \(String(describing: replicaAvailabilityZones)), replicaCount: \(String(describing: replicaCount)), replicaOutpostArns: \(String(describing: replicaOutpostArns)), slots: \(String(describing: slots)))"}
}

/// <p>Node group (shard) configuration options.
///             Each node group (shard) configuration has the following: <code>Slots</code>, <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>.</p>
public struct NodeGroupConfiguration: Equatable {
    /// <p>Either the ElastiCache for Redis supplied 4-digit id or a user supplied id for the node group these
    ///             configuration values apply to.</p>
    public let nodeGroupId: String?
    /// <p>The Availability Zone where the primary node of this node group (shard) is launched.</p>
    public let primaryAvailabilityZone: String?
    /// <p>The outpost ARN of the primary node.</p>
    public let primaryOutpostArn: String?
    /// <p>A list of Availability Zones to be used for the read replicas.
    ///             The number of Availability Zones in this list must match the value of <code>ReplicaCount</code>
    ///             or <code>ReplicasPerNodeGroup</code> if not specified.</p>
    public let replicaAvailabilityZones: [String]?
    /// <p>The number of read replica nodes in this node group (shard).</p>
    public let replicaCount: Int?
    /// <p>The outpost ARN of the node replicas.</p>
    public let replicaOutpostArns: [String]?
    /// <p>A string that specifies the keyspace for a particular node group.
    ///             Keyspaces range from 0 to 16,383.
    ///             The string is in the format <code>startkey-endkey</code>.</p>
    ///         <p>Example: <code>"0-3999"</code>
    ///          </p>
    public let slots: String?

    public init (
        nodeGroupId: String? = nil,
        primaryAvailabilityZone: String? = nil,
        primaryOutpostArn: String? = nil,
        replicaAvailabilityZones: [String]? = nil,
        replicaCount: Int? = nil,
        replicaOutpostArns: [String]? = nil,
        slots: String? = nil
    )
    {
        self.nodeGroupId = nodeGroupId
        self.primaryAvailabilityZone = primaryAvailabilityZone
        self.primaryOutpostArn = primaryOutpostArn
        self.replicaAvailabilityZones = replicaAvailabilityZones
        self.replicaCount = replicaCount
        self.replicaOutpostArns = replicaOutpostArns
        self.slots = slots
    }
}

extension NodeGroupMember: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheClusterId = "CacheClusterId"
        case cacheNodeId = "CacheNodeId"
        case currentRole = "CurrentRole"
        case preferredAvailabilityZone = "PreferredAvailabilityZone"
        case preferredOutpostArn = "PreferredOutpostArn"
        case readEndpoint = "ReadEndpoint"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let cacheNodeId = cacheNodeId {
            try container.encode(cacheNodeId, forKey: Key("CacheNodeId"))
        }
        if let currentRole = currentRole {
            try container.encode(currentRole, forKey: Key("CurrentRole"))
        }
        if let preferredAvailabilityZone = preferredAvailabilityZone {
            try container.encode(preferredAvailabilityZone, forKey: Key("PreferredAvailabilityZone"))
        }
        if let preferredOutpostArn = preferredOutpostArn {
            try container.encode(preferredOutpostArn, forKey: Key("PreferredOutpostArn"))
        }
        if let readEndpoint = readEndpoint {
            try container.encode(readEndpoint, forKey: Key("ReadEndpoint"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let cacheNodeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeId)
        cacheNodeId = cacheNodeIdDecoded
        let readEndpointDecoded = try containerValues.decodeIfPresent(Endpoint.self, forKey: .readEndpoint)
        readEndpoint = readEndpointDecoded
        let preferredAvailabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredAvailabilityZone)
        preferredAvailabilityZone = preferredAvailabilityZoneDecoded
        let preferredOutpostArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredOutpostArn)
        preferredOutpostArn = preferredOutpostArnDecoded
        let currentRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currentRole)
        currentRole = currentRoleDecoded
    }
}

extension NodeGroupMember: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeGroupMember(cacheClusterId: \(String(describing: cacheClusterId)), cacheNodeId: \(String(describing: cacheNodeId)), currentRole: \(String(describing: currentRole)), preferredAvailabilityZone: \(String(describing: preferredAvailabilityZone)), preferredOutpostArn: \(String(describing: preferredOutpostArn)), readEndpoint: \(String(describing: readEndpoint)))"}
}

/// <p>Represents a single node within a node group (shard).</p>
public struct NodeGroupMember: Equatable {
    /// <p>The ID of the cluster to which the node belongs.</p>
    public let cacheClusterId: String?
    /// <p>The ID of the node within its cluster. A node ID is a numeric identifier (0001, 0002, etc.).</p>
    public let cacheNodeId: String?
    /// <p>The role that is currently assigned to the node - <code>primary</code> or
    ///             <code>replica</code>. This member is only applicable for Redis (cluster mode disabled)
    ///             replication groups.</p>
    public let currentRole: String?
    /// <p>The name of the Availability Zone in which the node is located.</p>
    public let preferredAvailabilityZone: String?
    /// <p>The outpost ARN of the node group member.</p>
    public let preferredOutpostArn: String?
    /// <p>The information required for client programs to connect to a node for read operations.
    ///             The read endpoint is only applicable on Redis (cluster mode disabled) clusters.</p>
    public let readEndpoint: Endpoint?

    public init (
        cacheClusterId: String? = nil,
        cacheNodeId: String? = nil,
        currentRole: String? = nil,
        preferredAvailabilityZone: String? = nil,
        preferredOutpostArn: String? = nil,
        readEndpoint: Endpoint? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.cacheNodeId = cacheNodeId
        self.currentRole = currentRole
        self.preferredAvailabilityZone = preferredAvailabilityZone
        self.preferredOutpostArn = preferredOutpostArn
        self.readEndpoint = readEndpoint
    }
}

extension NodeGroupMemberUpdateStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheClusterId = "CacheClusterId"
        case cacheNodeId = "CacheNodeId"
        case nodeDeletionDate = "NodeDeletionDate"
        case nodeUpdateEndDate = "NodeUpdateEndDate"
        case nodeUpdateInitiatedBy = "NodeUpdateInitiatedBy"
        case nodeUpdateInitiatedDate = "NodeUpdateInitiatedDate"
        case nodeUpdateStartDate = "NodeUpdateStartDate"
        case nodeUpdateStatus = "NodeUpdateStatus"
        case nodeUpdateStatusModifiedDate = "NodeUpdateStatusModifiedDate"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let cacheNodeId = cacheNodeId {
            try container.encode(cacheNodeId, forKey: Key("CacheNodeId"))
        }
        if let nodeDeletionDate = nodeDeletionDate {
            try container.encode(TimestampWrapper(nodeDeletionDate, format: .dateTime), forKey: Key("nodeDeletionDate"))
        }
        if let nodeUpdateEndDate = nodeUpdateEndDate {
            try container.encode(TimestampWrapper(nodeUpdateEndDate, format: .dateTime), forKey: Key("nodeUpdateEndDate"))
        }
        if let nodeUpdateInitiatedBy = nodeUpdateInitiatedBy {
            try container.encode(nodeUpdateInitiatedBy, forKey: Key("NodeUpdateInitiatedBy"))
        }
        if let nodeUpdateInitiatedDate = nodeUpdateInitiatedDate {
            try container.encode(TimestampWrapper(nodeUpdateInitiatedDate, format: .dateTime), forKey: Key("nodeUpdateInitiatedDate"))
        }
        if let nodeUpdateStartDate = nodeUpdateStartDate {
            try container.encode(TimestampWrapper(nodeUpdateStartDate, format: .dateTime), forKey: Key("nodeUpdateStartDate"))
        }
        if let nodeUpdateStatus = nodeUpdateStatus {
            try container.encode(nodeUpdateStatus, forKey: Key("NodeUpdateStatus"))
        }
        if let nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDate {
            try container.encode(TimestampWrapper(nodeUpdateStatusModifiedDate, format: .dateTime), forKey: Key("nodeUpdateStatusModifiedDate"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let cacheNodeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeId)
        cacheNodeId = cacheNodeIdDecoded
        let nodeUpdateStatusDecoded = try containerValues.decodeIfPresent(NodeUpdateStatus.self, forKey: .nodeUpdateStatus)
        nodeUpdateStatus = nodeUpdateStatusDecoded
        let nodeDeletionDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeDeletionDate)
        var nodeDeletionDateBuffer:Date? = nil
        if let nodeDeletionDateDecoded = nodeDeletionDateDecoded {
            nodeDeletionDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(nodeDeletionDateDecoded, format: .dateTime)
        }
        nodeDeletionDate = nodeDeletionDateBuffer
        let nodeUpdateStartDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeUpdateStartDate)
        var nodeUpdateStartDateBuffer:Date? = nil
        if let nodeUpdateStartDateDecoded = nodeUpdateStartDateDecoded {
            nodeUpdateStartDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(nodeUpdateStartDateDecoded, format: .dateTime)
        }
        nodeUpdateStartDate = nodeUpdateStartDateBuffer
        let nodeUpdateEndDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeUpdateEndDate)
        var nodeUpdateEndDateBuffer:Date? = nil
        if let nodeUpdateEndDateDecoded = nodeUpdateEndDateDecoded {
            nodeUpdateEndDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(nodeUpdateEndDateDecoded, format: .dateTime)
        }
        nodeUpdateEndDate = nodeUpdateEndDateBuffer
        let nodeUpdateInitiatedByDecoded = try containerValues.decodeIfPresent(NodeUpdateInitiatedBy.self, forKey: .nodeUpdateInitiatedBy)
        nodeUpdateInitiatedBy = nodeUpdateInitiatedByDecoded
        let nodeUpdateInitiatedDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeUpdateInitiatedDate)
        var nodeUpdateInitiatedDateBuffer:Date? = nil
        if let nodeUpdateInitiatedDateDecoded = nodeUpdateInitiatedDateDecoded {
            nodeUpdateInitiatedDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(nodeUpdateInitiatedDateDecoded, format: .dateTime)
        }
        nodeUpdateInitiatedDate = nodeUpdateInitiatedDateBuffer
        let nodeUpdateStatusModifiedDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeUpdateStatusModifiedDate)
        var nodeUpdateStatusModifiedDateBuffer:Date? = nil
        if let nodeUpdateStatusModifiedDateDecoded = nodeUpdateStatusModifiedDateDecoded {
            nodeUpdateStatusModifiedDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(nodeUpdateStatusModifiedDateDecoded, format: .dateTime)
        }
        nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDateBuffer
    }
}

extension NodeGroupMemberUpdateStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeGroupMemberUpdateStatus(cacheClusterId: \(String(describing: cacheClusterId)), cacheNodeId: \(String(describing: cacheNodeId)), nodeDeletionDate: \(String(describing: nodeDeletionDate)), nodeUpdateEndDate: \(String(describing: nodeUpdateEndDate)), nodeUpdateInitiatedBy: \(String(describing: nodeUpdateInitiatedBy)), nodeUpdateInitiatedDate: \(String(describing: nodeUpdateInitiatedDate)), nodeUpdateStartDate: \(String(describing: nodeUpdateStartDate)), nodeUpdateStatus: \(String(describing: nodeUpdateStatus)), nodeUpdateStatusModifiedDate: \(String(describing: nodeUpdateStatusModifiedDate)))"}
}

/// <p>The status of the service update on the node group member  </p>
public struct NodeGroupMemberUpdateStatus: Equatable {
    /// <p>The cache cluster ID</p>
    public let cacheClusterId: String?
    /// <p>The node ID of the cache cluster</p>
    public let cacheNodeId: String?
    /// <p>The deletion date of the node</p>
    public let nodeDeletionDate: Date?
    /// <p>The end date of the update for a node</p>
    public let nodeUpdateEndDate: Date?
    /// <p>Reflects whether the update was initiated by the customer or automatically applied</p>
    public let nodeUpdateInitiatedBy: NodeUpdateInitiatedBy?
    /// <p>The date when the update is triggered</p>
    public let nodeUpdateInitiatedDate: Date?
    /// <p>The start date of the update for a node</p>
    public let nodeUpdateStartDate: Date?
    /// <p>The update status of the node</p>
    public let nodeUpdateStatus: NodeUpdateStatus?
    /// <p>The date when the NodeUpdateStatus was last modified</p>
    public let nodeUpdateStatusModifiedDate: Date?

    public init (
        cacheClusterId: String? = nil,
        cacheNodeId: String? = nil,
        nodeDeletionDate: Date? = nil,
        nodeUpdateEndDate: Date? = nil,
        nodeUpdateInitiatedBy: NodeUpdateInitiatedBy? = nil,
        nodeUpdateInitiatedDate: Date? = nil,
        nodeUpdateStartDate: Date? = nil,
        nodeUpdateStatus: NodeUpdateStatus? = nil,
        nodeUpdateStatusModifiedDate: Date? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.cacheNodeId = cacheNodeId
        self.nodeDeletionDate = nodeDeletionDate
        self.nodeUpdateEndDate = nodeUpdateEndDate
        self.nodeUpdateInitiatedBy = nodeUpdateInitiatedBy
        self.nodeUpdateInitiatedDate = nodeUpdateInitiatedDate
        self.nodeUpdateStartDate = nodeUpdateStartDate
        self.nodeUpdateStatus = nodeUpdateStatus
        self.nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDate
    }
}

extension NodeGroupNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeGroupNotFoundFault(message: \(String(describing: message)))"}
}

extension NodeGroupNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<NodeGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The node group specified by the <code>NodeGroupId</code> parameter could not be found.
///             Please verify that the node group exists and that you spelled the <code>NodeGroupId</code> value correctly.</p>
public struct NodeGroupNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct NodeGroupNotFoundFaultBody: Equatable {
    public let message: String?
}

extension NodeGroupNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NodeGroupUpdateStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nodeGroupId = "NodeGroupId"
        case nodeGroupMemberUpdateStatus = "NodeGroupMemberUpdateStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: Key("NodeGroupId"))
        }
        if let nodeGroupMemberUpdateStatus = nodeGroupMemberUpdateStatus {
            var nodeGroupMemberUpdateStatusContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NodeGroupMemberUpdateStatus"))
            for (index0, nodegroupmemberupdatestatus0) in nodeGroupMemberUpdateStatus.enumerated() {
                try nodeGroupMemberUpdateStatusContainer.encode(nodegroupmemberupdatestatus0, forKey: Key("NodeGroupMemberUpdateStatus.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        if containerValues.contains(.nodeGroupMemberUpdateStatus) {
            struct KeyVal0{struct NodeGroupMemberUpdateStatus{}}
            let nodeGroupMemberUpdateStatusWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeGroupMemberUpdateStatus>.CodingKeys.self, forKey: .nodeGroupMemberUpdateStatus)
            if let nodeGroupMemberUpdateStatusWrappedContainer = nodeGroupMemberUpdateStatusWrappedContainer {
                let nodeGroupMemberUpdateStatusContainer = try nodeGroupMemberUpdateStatusWrappedContainer.decodeIfPresent([NodeGroupMemberUpdateStatus].self, forKey: .member)
                var nodeGroupMemberUpdateStatusBuffer:[NodeGroupMemberUpdateStatus]? = nil
                if let nodeGroupMemberUpdateStatusContainer = nodeGroupMemberUpdateStatusContainer {
                    nodeGroupMemberUpdateStatusBuffer = [NodeGroupMemberUpdateStatus]()
                    for structureContainer0 in nodeGroupMemberUpdateStatusContainer {
                        nodeGroupMemberUpdateStatusBuffer?.append(structureContainer0)
                    }
                }
                nodeGroupMemberUpdateStatus = nodeGroupMemberUpdateStatusBuffer
            } else {
                nodeGroupMemberUpdateStatus = []
            }
        } else {
            nodeGroupMemberUpdateStatus = nil
        }
    }
}

extension NodeGroupUpdateStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeGroupUpdateStatus(nodeGroupId: \(String(describing: nodeGroupId)), nodeGroupMemberUpdateStatus: \(String(describing: nodeGroupMemberUpdateStatus)))"}
}

/// <p>The status of the service update on the node group </p>
public struct NodeGroupUpdateStatus: Equatable {
    /// <p>The ID of the node group</p>
    public let nodeGroupId: String?
    /// <p>The status of the service update on the node group member</p>
    public let nodeGroupMemberUpdateStatus: [NodeGroupMemberUpdateStatus]?

    public init (
        nodeGroupId: String? = nil,
        nodeGroupMemberUpdateStatus: [NodeGroupMemberUpdateStatus]? = nil
    )
    {
        self.nodeGroupId = nodeGroupId
        self.nodeGroupMemberUpdateStatus = nodeGroupMemberUpdateStatus
    }
}

extension NodeGroupsPerReplicationGroupQuotaExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeGroupsPerReplicationGroupQuotaExceededFault(message: \(String(describing: message)))"}
}

extension NodeGroupsPerReplicationGroupQuotaExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<NodeGroupsPerReplicationGroupQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request cannot be processed because it would exceed the maximum allowed number
///             of node groups (shards) in a single replication group. The default maximum is 90</p>
public struct NodeGroupsPerReplicationGroupQuotaExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct NodeGroupsPerReplicationGroupQuotaExceededFaultBody: Equatable {
    public let message: String?
}

extension NodeGroupsPerReplicationGroupQuotaExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NodeQuotaForClusterExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeQuotaForClusterExceededFault(message: \(String(describing: message)))"}
}

extension NodeQuotaForClusterExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<NodeQuotaForClusterExceededFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request cannot be processed because it would exceed the allowed number of cache nodes in a single cluster.</p>
public struct NodeQuotaForClusterExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct NodeQuotaForClusterExceededFaultBody: Equatable {
    public let message: String?
}

extension NodeQuotaForClusterExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NodeQuotaForCustomerExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeQuotaForCustomerExceededFault(message: \(String(describing: message)))"}
}

extension NodeQuotaForCustomerExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<NodeQuotaForCustomerExceededFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request cannot be processed because it would exceed the allowed number of cache nodes per customer.</p>
public struct NodeQuotaForCustomerExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct NodeQuotaForCustomerExceededFaultBody: Equatable {
    public let message: String?
}

extension NodeQuotaForCustomerExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NodeSnapshot: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheClusterId = "CacheClusterId"
        case cacheNodeCreateTime = "CacheNodeCreateTime"
        case cacheNodeId = "CacheNodeId"
        case cacheSize = "CacheSize"
        case nodeGroupConfiguration = "NodeGroupConfiguration"
        case nodeGroupId = "NodeGroupId"
        case snapshotCreateTime = "SnapshotCreateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let cacheNodeCreateTime = cacheNodeCreateTime {
            try container.encode(TimestampWrapper(cacheNodeCreateTime, format: .dateTime), forKey: Key("cacheNodeCreateTime"))
        }
        if let cacheNodeId = cacheNodeId {
            try container.encode(cacheNodeId, forKey: Key("CacheNodeId"))
        }
        if let cacheSize = cacheSize {
            try container.encode(cacheSize, forKey: Key("CacheSize"))
        }
        if let nodeGroupConfiguration = nodeGroupConfiguration {
            try container.encode(nodeGroupConfiguration, forKey: Key("NodeGroupConfiguration"))
        }
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: Key("NodeGroupId"))
        }
        if let snapshotCreateTime = snapshotCreateTime {
            try container.encode(TimestampWrapper(snapshotCreateTime, format: .dateTime), forKey: Key("snapshotCreateTime"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        let cacheNodeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeId)
        cacheNodeId = cacheNodeIdDecoded
        let nodeGroupConfigurationDecoded = try containerValues.decodeIfPresent(NodeGroupConfiguration.self, forKey: .nodeGroupConfiguration)
        nodeGroupConfiguration = nodeGroupConfigurationDecoded
        let cacheSizeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheSize)
        cacheSize = cacheSizeDecoded
        let cacheNodeCreateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeCreateTime)
        var cacheNodeCreateTimeBuffer:Date? = nil
        if let cacheNodeCreateTimeDecoded = cacheNodeCreateTimeDecoded {
            cacheNodeCreateTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(cacheNodeCreateTimeDecoded, format: .dateTime)
        }
        cacheNodeCreateTime = cacheNodeCreateTimeBuffer
        let snapshotCreateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotCreateTime)
        var snapshotCreateTimeBuffer:Date? = nil
        if let snapshotCreateTimeDecoded = snapshotCreateTimeDecoded {
            snapshotCreateTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(snapshotCreateTimeDecoded, format: .dateTime)
        }
        snapshotCreateTime = snapshotCreateTimeBuffer
    }
}

extension NodeSnapshot: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeSnapshot(cacheClusterId: \(String(describing: cacheClusterId)), cacheNodeCreateTime: \(String(describing: cacheNodeCreateTime)), cacheNodeId: \(String(describing: cacheNodeId)), cacheSize: \(String(describing: cacheSize)), nodeGroupConfiguration: \(String(describing: nodeGroupConfiguration)), nodeGroupId: \(String(describing: nodeGroupId)), snapshotCreateTime: \(String(describing: snapshotCreateTime)))"}
}

/// <p>Represents an individual cache node in a snapshot of a cluster.</p>
public struct NodeSnapshot: Equatable {
    /// <p>A unique identifier for the source cluster.</p>
    public let cacheClusterId: String?
    /// <p>The date and time when the cache node was created in the source cluster.</p>
    public let cacheNodeCreateTime: Date?
    /// <p>The cache node identifier for the node in the source cluster.</p>
    public let cacheNodeId: String?
    /// <p>The size of the cache on the source cache node.</p>
    public let cacheSize: String?
    /// <p>The configuration for the source node group (shard).</p>
    public let nodeGroupConfiguration: NodeGroupConfiguration?
    /// <p>A unique identifier for the source node group (shard).</p>
    public let nodeGroupId: String?
    /// <p>The date and time when the source node's metadata and cache data set was obtained for the snapshot.</p>
    public let snapshotCreateTime: Date?

    public init (
        cacheClusterId: String? = nil,
        cacheNodeCreateTime: Date? = nil,
        cacheNodeId: String? = nil,
        cacheSize: String? = nil,
        nodeGroupConfiguration: NodeGroupConfiguration? = nil,
        nodeGroupId: String? = nil,
        snapshotCreateTime: Date? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.cacheNodeCreateTime = cacheNodeCreateTime
        self.cacheNodeId = cacheNodeId
        self.cacheSize = cacheSize
        self.nodeGroupConfiguration = nodeGroupConfiguration
        self.nodeGroupId = nodeGroupId
        self.snapshotCreateTime = snapshotCreateTime
    }
}

public enum NodeUpdateInitiatedBy {
    case customer
    case system
    case sdkUnknown(String)
}

extension NodeUpdateInitiatedBy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NodeUpdateInitiatedBy] {
        return [
            .customer,
            .system,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .customer: return "customer"
        case .system: return "system"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NodeUpdateInitiatedBy(rawValue: rawValue) ?? NodeUpdateInitiatedBy.sdkUnknown(rawValue)
    }
}

public enum NodeUpdateStatus {
    case complete
    case inProgress
    case notApplied
    case stopped
    case stopping
    case waitingToStart
    case sdkUnknown(String)
}

extension NodeUpdateStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NodeUpdateStatus] {
        return [
            .complete,
            .inProgress,
            .notApplied,
            .stopped,
            .stopping,
            .waitingToStart,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .complete: return "complete"
        case .inProgress: return "in-progress"
        case .notApplied: return "not-applied"
        case .stopped: return "stopped"
        case .stopping: return "stopping"
        case .waitingToStart: return "waiting-to-start"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NodeUpdateStatus(rawValue: rawValue) ?? NodeUpdateStatus.sdkUnknown(rawValue)
    }
}

extension NotificationConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case topicArn = "TopicArn"
        case topicStatus = "TopicStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: Key("TopicArn"))
        }
        if let topicStatus = topicStatus {
            try container.encode(topicStatus, forKey: Key("TopicStatus"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let topicStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .topicStatus)
        topicStatus = topicStatusDecoded
    }
}

extension NotificationConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NotificationConfiguration(topicArn: \(String(describing: topicArn)), topicStatus: \(String(describing: topicStatus)))"}
}

/// <p>Describes a notification topic and its status.
///             Notification topics are used for publishing ElastiCache events to subscribers
///             using Amazon Simple Notification Service (SNS).</p>
public struct NotificationConfiguration: Equatable {
    /// <p>The Amazon Resource Name (ARN) that identifies the topic.</p>
    public let topicArn: String?
    /// <p>The current state of the topic.</p>
    public let topicStatus: String?

    public init (
        topicArn: String? = nil,
        topicStatus: String? = nil
    )
    {
        self.topicArn = topicArn
        self.topicStatus = topicStatus
    }
}

public enum OutpostMode {
    case crossOutpost
    case singleOutpost
    case sdkUnknown(String)
}

extension OutpostMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OutpostMode] {
        return [
            .crossOutpost,
            .singleOutpost,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .crossOutpost: return "cross-outpost"
        case .singleOutpost: return "single-outpost"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OutpostMode(rawValue: rawValue) ?? OutpostMode.sdkUnknown(rawValue)
    }
}

extension Parameter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedValues = "AllowedValues"
        case changeType = "ChangeType"
        case dataType = "DataType"
        case description = "Description"
        case isModifiable = "IsModifiable"
        case minimumEngineVersion = "MinimumEngineVersion"
        case parameterName = "ParameterName"
        case parameterValue = "ParameterValue"
        case source = "Source"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let allowedValues = allowedValues {
            try container.encode(allowedValues, forKey: Key("AllowedValues"))
        }
        if let changeType = changeType {
            try container.encode(changeType, forKey: Key("ChangeType"))
        }
        if let dataType = dataType {
            try container.encode(dataType, forKey: Key("DataType"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if isModifiable != false {
            try container.encode(isModifiable, forKey: Key("IsModifiable"))
        }
        if let minimumEngineVersion = minimumEngineVersion {
            try container.encode(minimumEngineVersion, forKey: Key("MinimumEngineVersion"))
        }
        if let parameterName = parameterName {
            try container.encode(parameterName, forKey: Key("ParameterName"))
        }
        if let parameterValue = parameterValue {
            try container.encode(parameterValue, forKey: Key("ParameterValue"))
        }
        if let source = source {
            try container.encode(source, forKey: Key("Source"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let parameterValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameterValue)
        parameterValue = parameterValueDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .source)
        source = sourceDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataType)
        dataType = dataTypeDecoded
        let allowedValuesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .allowedValues)
        allowedValues = allowedValuesDecoded
        let isModifiableDecoded = try containerValues.decode(Bool.self, forKey: .isModifiable)
        isModifiable = isModifiableDecoded
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        let changeTypeDecoded = try containerValues.decodeIfPresent(ChangeType.self, forKey: .changeType)
        changeType = changeTypeDecoded
    }
}

extension Parameter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Parameter(allowedValues: \(String(describing: allowedValues)), changeType: \(String(describing: changeType)), dataType: \(String(describing: dataType)), description: \(String(describing: description)), isModifiable: \(String(describing: isModifiable)), minimumEngineVersion: \(String(describing: minimumEngineVersion)), parameterName: \(String(describing: parameterName)), parameterValue: \(String(describing: parameterValue)), source: \(String(describing: source)))"}
}

/// <p>Describes an individual setting that controls some aspect of ElastiCache behavior.</p>
public struct Parameter: Equatable {
    /// <p>The valid range of values for the parameter.</p>
    public let allowedValues: String?
    /// <p>Indicates whether a change to the parameter is applied immediately
    ///             or requires a reboot for the change to be applied.
    ///             You can force a reboot or wait until the next maintenance window's reboot.
    ///             For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a>.</p>
    public let changeType: ChangeType?
    /// <p>The valid data type for the parameter.</p>
    public let dataType: String?
    /// <p>A description of the parameter.</p>
    public let description: String?
    /// <p>Indicates whether (<code>true</code>) or not (<code>false</code>) the parameter can be modified.
    ///             Some parameters have security or operational implications that prevent them from being changed.</p>
    public let isModifiable: Bool
    /// <p>The earliest cache engine version to which the parameter can apply.</p>
    public let minimumEngineVersion: String?
    /// <p>The name of the parameter.</p>
    public let parameterName: String?
    /// <p>The value of the parameter.</p>
    public let parameterValue: String?
    /// <p>The source of the parameter.</p>
    public let source: String?

    public init (
        allowedValues: String? = nil,
        changeType: ChangeType? = nil,
        dataType: String? = nil,
        description: String? = nil,
        isModifiable: Bool = false,
        minimumEngineVersion: String? = nil,
        parameterName: String? = nil,
        parameterValue: String? = nil,
        source: String? = nil
    )
    {
        self.allowedValues = allowedValues
        self.changeType = changeType
        self.dataType = dataType
        self.description = description
        self.isModifiable = isModifiable
        self.minimumEngineVersion = minimumEngineVersion
        self.parameterName = parameterName
        self.parameterValue = parameterValue
        self.source = source
    }
}

extension ParameterNameValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case parameterName = "ParameterName"
        case parameterValue = "ParameterValue"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let parameterName = parameterName {
            try container.encode(parameterName, forKey: Key("ParameterName"))
        }
        if let parameterValue = parameterValue {
            try container.encode(parameterValue, forKey: Key("ParameterValue"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let parameterValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameterValue)
        parameterValue = parameterValueDecoded
    }
}

extension ParameterNameValue: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ParameterNameValue(parameterName: \(String(describing: parameterName)), parameterValue: \(String(describing: parameterValue)))"}
}

/// <p>Describes a name-value pair that is used to update the value of a parameter.</p>
public struct ParameterNameValue: Equatable {
    /// <p>The name of the parameter.</p>
    public let parameterName: String?
    /// <p>The value of the parameter.</p>
    public let parameterValue: String?

    public init (
        parameterName: String? = nil,
        parameterValue: String? = nil
    )
    {
        self.parameterName = parameterName
        self.parameterValue = parameterValue
    }
}

public enum PendingAutomaticFailoverStatus {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension PendingAutomaticFailoverStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PendingAutomaticFailoverStatus] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "disabled"
        case .enabled: return "enabled"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PendingAutomaticFailoverStatus(rawValue: rawValue) ?? PendingAutomaticFailoverStatus.sdkUnknown(rawValue)
    }
}

extension PendingLogDeliveryConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationDetails = "DestinationDetails"
        case destinationType = "DestinationType"
        case logFormat = "LogFormat"
        case logType = "LogType"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let destinationDetails = destinationDetails {
            try container.encode(destinationDetails, forKey: Key("DestinationDetails"))
        }
        if let destinationType = destinationType {
            try container.encode(destinationType, forKey: Key("DestinationType"))
        }
        if let logFormat = logFormat {
            try container.encode(logFormat, forKey: Key("LogFormat"))
        }
        if let logType = logType {
            try container.encode(logType, forKey: Key("LogType"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logTypeDecoded = try containerValues.decodeIfPresent(LogType.self, forKey: .logType)
        logType = logTypeDecoded
        let destinationTypeDecoded = try containerValues.decodeIfPresent(DestinationType.self, forKey: .destinationType)
        destinationType = destinationTypeDecoded
        let destinationDetailsDecoded = try containerValues.decodeIfPresent(DestinationDetails.self, forKey: .destinationDetails)
        destinationDetails = destinationDetailsDecoded
        let logFormatDecoded = try containerValues.decodeIfPresent(LogFormat.self, forKey: .logFormat)
        logFormat = logFormatDecoded
    }
}

extension PendingLogDeliveryConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PendingLogDeliveryConfiguration(destinationDetails: \(String(describing: destinationDetails)), destinationType: \(String(describing: destinationType)), logFormat: \(String(describing: logFormat)), logType: \(String(describing: logType)))"}
}

/// <p>The log delivery configurations being modified </p>
public struct PendingLogDeliveryConfiguration: Equatable {
    /// <p>Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.</p>
    public let destinationDetails: DestinationDetails?
    /// <p>Returns the destination type, either CloudWatch Logs or Kinesis Data Firehose.</p>
    public let destinationType: DestinationType?
    /// <p>Returns the log format, either JSON or TEXT</p>
    public let logFormat: LogFormat?
    /// <p>Refers to <a href="https://redis.io/commands/slowlog">slow-log</a>.</p>
    public let logType: LogType?

    public init (
        destinationDetails: DestinationDetails? = nil,
        destinationType: DestinationType? = nil,
        logFormat: LogFormat? = nil,
        logType: LogType? = nil
    )
    {
        self.destinationDetails = destinationDetails
        self.destinationType = destinationType
        self.logFormat = logFormat
        self.logType = logType
    }
}

extension PendingModifiedValues: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authTokenStatus = "AuthTokenStatus"
        case cacheNodeIdsToRemove = "CacheNodeIdsToRemove"
        case cacheNodeType = "CacheNodeType"
        case engineVersion = "EngineVersion"
        case logDeliveryConfigurations = "LogDeliveryConfigurations"
        case numCacheNodes = "NumCacheNodes"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let authTokenStatus = authTokenStatus {
            try container.encode(authTokenStatus, forKey: Key("AuthTokenStatus"))
        }
        if let cacheNodeIdsToRemove = cacheNodeIdsToRemove {
            var cacheNodeIdsToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheNodeIdsToRemove"))
            for (index0, string0) in cacheNodeIdsToRemove.enumerated() {
                try cacheNodeIdsToRemoveContainer.encode(string0, forKey: Key("CacheNodeId.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LogDeliveryConfigurations"))
            for (index0, pendinglogdeliveryconfiguration0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(pendinglogdeliveryconfiguration0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let numCacheNodes = numCacheNodes {
            try container.encode(numCacheNodes, forKey: Key("NumCacheNodes"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numCacheNodesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numCacheNodes)
        numCacheNodes = numCacheNodesDecoded
        if containerValues.contains(.cacheNodeIdsToRemove) {
            struct KeyVal0{struct CacheNodeId{}}
            let cacheNodeIdsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeId>.CodingKeys.self, forKey: .cacheNodeIdsToRemove)
            if let cacheNodeIdsToRemoveWrappedContainer = cacheNodeIdsToRemoveWrappedContainer {
                let cacheNodeIdsToRemoveContainer = try cacheNodeIdsToRemoveWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var cacheNodeIdsToRemoveBuffer:[String]? = nil
                if let cacheNodeIdsToRemoveContainer = cacheNodeIdsToRemoveContainer {
                    cacheNodeIdsToRemoveBuffer = [String]()
                    for stringContainer0 in cacheNodeIdsToRemoveContainer {
                        cacheNodeIdsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                cacheNodeIdsToRemove = cacheNodeIdsToRemoveBuffer
            } else {
                cacheNodeIdsToRemove = []
            }
        } else {
            cacheNodeIdsToRemove = nil
        }
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let authTokenStatusDecoded = try containerValues.decodeIfPresent(AuthTokenUpdateStatus.self, forKey: .authTokenStatus)
        authTokenStatus = authTokenStatusDecoded
        if containerValues.contains(.logDeliveryConfigurations) {
            struct KeyVal0{struct member{}}
            let logDeliveryConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logDeliveryConfigurations)
            if let logDeliveryConfigurationsWrappedContainer = logDeliveryConfigurationsWrappedContainer {
                let logDeliveryConfigurationsContainer = try logDeliveryConfigurationsWrappedContainer.decodeIfPresent([PendingLogDeliveryConfiguration].self, forKey: .member)
                var logDeliveryConfigurationsBuffer:[PendingLogDeliveryConfiguration]? = nil
                if let logDeliveryConfigurationsContainer = logDeliveryConfigurationsContainer {
                    logDeliveryConfigurationsBuffer = [PendingLogDeliveryConfiguration]()
                    for structureContainer0 in logDeliveryConfigurationsContainer {
                        logDeliveryConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                logDeliveryConfigurations = logDeliveryConfigurationsBuffer
            } else {
                logDeliveryConfigurations = []
            }
        } else {
            logDeliveryConfigurations = nil
        }
    }
}

extension PendingModifiedValues: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PendingModifiedValues(authTokenStatus: \(String(describing: authTokenStatus)), cacheNodeIdsToRemove: \(String(describing: cacheNodeIdsToRemove)), cacheNodeType: \(String(describing: cacheNodeType)), engineVersion: \(String(describing: engineVersion)), logDeliveryConfigurations: \(String(describing: logDeliveryConfigurations)), numCacheNodes: \(String(describing: numCacheNodes)))"}
}

/// <p>A group of settings that are applied to the cluster in the future,
///             or that are currently being applied.</p>
public struct PendingModifiedValues: Equatable {
    /// <p>The auth token status</p>
    public let authTokenStatus: AuthTokenUpdateStatus?
    /// <p>A list of cache node IDs that are being removed (or will be removed) from the cluster.
    ///             A node ID is a 4-digit numeric identifier (0001, 0002, etc.).</p>
    public let cacheNodeIdsToRemove: [String]?
    /// <p>The cache node type that this cluster or replication group is scaled to.</p>
    public let cacheNodeType: String?
    /// <p>The new cache engine version that the cluster  runs.</p>
    public let engineVersion: String?
    /// <p>The log delivery configurations being modified </p>
    public let logDeliveryConfigurations: [PendingLogDeliveryConfiguration]?
    /// <p>The new number of cache nodes for the cluster.</p>
    ///         <p>For clusters running Redis, this value must be 1.
    ///             For clusters running Memcached, this value must be between 1 and 40.</p>
    public let numCacheNodes: Int?

    public init (
        authTokenStatus: AuthTokenUpdateStatus? = nil,
        cacheNodeIdsToRemove: [String]? = nil,
        cacheNodeType: String? = nil,
        engineVersion: String? = nil,
        logDeliveryConfigurations: [PendingLogDeliveryConfiguration]? = nil,
        numCacheNodes: Int? = nil
    )
    {
        self.authTokenStatus = authTokenStatus
        self.cacheNodeIdsToRemove = cacheNodeIdsToRemove
        self.cacheNodeType = cacheNodeType
        self.engineVersion = engineVersion
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.numCacheNodes = numCacheNodes
    }
}

extension ProcessedUpdateAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheClusterId = "CacheClusterId"
        case replicationGroupId = "ReplicationGroupId"
        case serviceUpdateName = "ServiceUpdateName"
        case updateActionStatus = "UpdateActionStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: Key("ServiceUpdateName"))
        }
        if let updateActionStatus = updateActionStatus {
            try container.encode(updateActionStatus, forKey: Key("UpdateActionStatus"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let serviceUpdateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateName)
        serviceUpdateName = serviceUpdateNameDecoded
        let updateActionStatusDecoded = try containerValues.decodeIfPresent(UpdateActionStatus.self, forKey: .updateActionStatus)
        updateActionStatus = updateActionStatusDecoded
    }
}

extension ProcessedUpdateAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ProcessedUpdateAction(cacheClusterId: \(String(describing: cacheClusterId)), replicationGroupId: \(String(describing: replicationGroupId)), serviceUpdateName: \(String(describing: serviceUpdateName)), updateActionStatus: \(String(describing: updateActionStatus)))"}
}

/// <p>Update action that has been processed for the corresponding apply/stop request</p>
public struct ProcessedUpdateAction: Equatable {
    /// <p>The ID of the cache cluster</p>
    public let cacheClusterId: String?
    /// <p>The ID of the replication group</p>
    public let replicationGroupId: String?
    /// <p>The unique ID of the service update</p>
    public let serviceUpdateName: String?
    /// <p>The status of the update action on the Redis cluster</p>
    public let updateActionStatus: UpdateActionStatus?

    public init (
        cacheClusterId: String? = nil,
        replicationGroupId: String? = nil,
        serviceUpdateName: String? = nil,
        updateActionStatus: UpdateActionStatus? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.replicationGroupId = replicationGroupId
        self.serviceUpdateName = serviceUpdateName
        self.updateActionStatus = updateActionStatus
    }
}

public struct PurchaseReservedCacheNodesOfferingInputBodyMiddleware: Middleware {
    public let id: String = "PurchaseReservedCacheNodesOfferingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PurchaseReservedCacheNodesOfferingInput>,
                  next: H) -> Swift.Result<OperationOutput<PurchaseReservedCacheNodesOfferingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PurchaseReservedCacheNodesOfferingInput>
    public typealias MOutput = OperationOutput<PurchaseReservedCacheNodesOfferingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PurchaseReservedCacheNodesOfferingOutputError>
}

extension PurchaseReservedCacheNodesOfferingInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PurchaseReservedCacheNodesOfferingInput(cacheNodeCount: \(String(describing: cacheNodeCount)), reservedCacheNodeId: \(String(describing: reservedCacheNodeId)), reservedCacheNodesOfferingId: \(String(describing: reservedCacheNodesOfferingId)), tags: \(String(describing: tags)))"}
}

extension PurchaseReservedCacheNodesOfferingInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheNodeCount = cacheNodeCount {
            try container.encode(cacheNodeCount, forKey: Key("CacheNodeCount"))
        }
        if let reservedCacheNodeId = reservedCacheNodeId {
            try container.encode(reservedCacheNodeId, forKey: Key("ReservedCacheNodeId"))
        }
        if let reservedCacheNodesOfferingId = reservedCacheNodesOfferingId {
            try container.encode(reservedCacheNodesOfferingId, forKey: Key("ReservedCacheNodesOfferingId"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("PurchaseReservedCacheNodesOffering", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct PurchaseReservedCacheNodesOfferingInputHeadersMiddleware: Middleware {
    public let id: String = "PurchaseReservedCacheNodesOfferingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PurchaseReservedCacheNodesOfferingInput>,
                  next: H) -> Swift.Result<OperationOutput<PurchaseReservedCacheNodesOfferingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PurchaseReservedCacheNodesOfferingInput>
    public typealias MOutput = OperationOutput<PurchaseReservedCacheNodesOfferingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PurchaseReservedCacheNodesOfferingOutputError>
}

public struct PurchaseReservedCacheNodesOfferingInputQueryItemMiddleware: Middleware {
    public let id: String = "PurchaseReservedCacheNodesOfferingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PurchaseReservedCacheNodesOfferingInput>,
                  next: H) -> Swift.Result<OperationOutput<PurchaseReservedCacheNodesOfferingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PurchaseReservedCacheNodesOfferingInput>
    public typealias MOutput = OperationOutput<PurchaseReservedCacheNodesOfferingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PurchaseReservedCacheNodesOfferingOutputError>
}

/// <p>Represents the input of a <code>PurchaseReservedCacheNodesOffering</code> operation.</p>
public struct PurchaseReservedCacheNodesOfferingInput: Equatable {
    /// <p>The number of cache node instances to reserve.</p>
    ///         <p>Default: <code>1</code>
    ///          </p>
    public let cacheNodeCount: Int?
    /// <p>A customer-specified identifier to track this reservation.</p>
    ///         <note>
    ///             <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation.
    ///                 If this parameter is not specified,
    ///                 ElastiCache automatically generates an identifier for the reservation.</p>
    ///          </note>
    ///         <p>Example: myreservationID</p>
    public let reservedCacheNodeId: String?
    /// <p>The ID of the reserved cache node offering to purchase.</p>
    ///         <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code>
    ///          </p>
    public let reservedCacheNodesOfferingId: String?
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    public let tags: [Tag]?

    public init (
        cacheNodeCount: Int? = nil,
        reservedCacheNodeId: String? = nil,
        reservedCacheNodesOfferingId: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.cacheNodeCount = cacheNodeCount
        self.reservedCacheNodeId = reservedCacheNodeId
        self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
        self.tags = tags
    }
}

extension PurchaseReservedCacheNodesOfferingOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PurchaseReservedCacheNodesOfferingOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodeAlreadyExistsFault" : self = .reservedCacheNodeAlreadyExistsFault(try ReservedCacheNodeAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodeQuotaExceededFault" : self = .reservedCacheNodeQuotaExceededFault(try ReservedCacheNodeQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodesOfferingNotFoundFault" : self = .reservedCacheNodesOfferingNotFoundFault(try ReservedCacheNodesOfferingNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PurchaseReservedCacheNodesOfferingOutputError: Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case reservedCacheNodeAlreadyExistsFault(ReservedCacheNodeAlreadyExistsFault)
    case reservedCacheNodeQuotaExceededFault(ReservedCacheNodeQuotaExceededFault)
    case reservedCacheNodesOfferingNotFoundFault(ReservedCacheNodesOfferingNotFoundFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension PurchaseReservedCacheNodesOfferingOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PurchaseReservedCacheNodesOfferingOutputResponse(reservedCacheNode: \(String(describing: reservedCacheNode)))"}
}

extension PurchaseReservedCacheNodesOfferingOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PurchaseReservedCacheNodesOfferingOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.reservedCacheNode = output.reservedCacheNode
        } else {
            self.reservedCacheNode = nil
        }
    }
}

public struct PurchaseReservedCacheNodesOfferingOutputResponse: Equatable {
    /// <p>Represents the output of a <code>PurchaseReservedCacheNodesOffering</code> operation.</p>
    public let reservedCacheNode: ReservedCacheNode?

    public init (
        reservedCacheNode: ReservedCacheNode? = nil
    )
    {
        self.reservedCacheNode = reservedCacheNode
    }
}

struct PurchaseReservedCacheNodesOfferingOutputResponseBody: Equatable {
    public let reservedCacheNode: ReservedCacheNode?
}

extension PurchaseReservedCacheNodesOfferingOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case reservedCacheNode = "ReservedCacheNode"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("PurchaseReservedCacheNodesOfferingResult"))
        let reservedCacheNodeDecoded = try containerValues.decodeIfPresent(ReservedCacheNode.self, forKey: .reservedCacheNode)
        reservedCacheNode = reservedCacheNodeDecoded
    }
}

public struct RebalanceSlotsInGlobalReplicationGroupInputBodyMiddleware: Middleware {
    public let id: String = "RebalanceSlotsInGlobalReplicationGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RebalanceSlotsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<RebalanceSlotsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RebalanceSlotsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<RebalanceSlotsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RebalanceSlotsInGlobalReplicationGroupOutputError>
}

extension RebalanceSlotsInGlobalReplicationGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RebalanceSlotsInGlobalReplicationGroupInput(applyImmediately: \(String(describing: applyImmediately)), globalReplicationGroupId: \(String(describing: globalReplicationGroupId)))"}
}

extension RebalanceSlotsInGlobalReplicationGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: Key("ApplyImmediately"))
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: Key("GlobalReplicationGroupId"))
        }
        try container.encode("RebalanceSlotsInGlobalReplicationGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct RebalanceSlotsInGlobalReplicationGroupInputHeadersMiddleware: Middleware {
    public let id: String = "RebalanceSlotsInGlobalReplicationGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RebalanceSlotsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<RebalanceSlotsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RebalanceSlotsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<RebalanceSlotsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RebalanceSlotsInGlobalReplicationGroupOutputError>
}

public struct RebalanceSlotsInGlobalReplicationGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "RebalanceSlotsInGlobalReplicationGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RebalanceSlotsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<RebalanceSlotsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RebalanceSlotsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<RebalanceSlotsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RebalanceSlotsInGlobalReplicationGroupOutputError>
}

public struct RebalanceSlotsInGlobalReplicationGroupInput: Equatable {
    /// <p>If <code>True</code>, redistribution is applied immediately.</p>
    public let applyImmediately: Bool
    /// <p>The name of the Global datastore</p>
    public let globalReplicationGroupId: String?

    public init (
        applyImmediately: Bool = false,
        globalReplicationGroupId: String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.globalReplicationGroupId = globalReplicationGroupId
    }
}

extension RebalanceSlotsInGlobalReplicationGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RebalanceSlotsInGlobalReplicationGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupStateFault" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RebalanceSlotsInGlobalReplicationGroupOutputError: Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RebalanceSlotsInGlobalReplicationGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RebalanceSlotsInGlobalReplicationGroupOutputResponse(globalReplicationGroup: \(String(describing: globalReplicationGroup)))"}
}

extension RebalanceSlotsInGlobalReplicationGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RebalanceSlotsInGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct RebalanceSlotsInGlobalReplicationGroupOutputResponse: Equatable {
    /// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different AWS region. The secondary cluster accepts only reads. The primary
    ///         cluster automatically replicates updates to the secondary cluster.</p>
    ///
    ///
    ///         <ul>
    ///             <li>
    ///                <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore,
    ///             which is what you use to associate a secondary cluster.</p>
    ///             </li>
    ///          </ul>
    public let globalReplicationGroup: GlobalReplicationGroup?

    public init (
        globalReplicationGroup: GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct RebalanceSlotsInGlobalReplicationGroupOutputResponseBody: Equatable {
    public let globalReplicationGroup: GlobalReplicationGroup?
}

extension RebalanceSlotsInGlobalReplicationGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("RebalanceSlotsInGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

public struct RebootCacheClusterInputBodyMiddleware: Middleware {
    public let id: String = "RebootCacheClusterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RebootCacheClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<RebootCacheClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RebootCacheClusterInput>
    public typealias MOutput = OperationOutput<RebootCacheClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RebootCacheClusterOutputError>
}

extension RebootCacheClusterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RebootCacheClusterInput(cacheClusterId: \(String(describing: cacheClusterId)), cacheNodeIdsToReboot: \(String(describing: cacheNodeIdsToReboot)))"}
}

extension RebootCacheClusterInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let cacheNodeIdsToReboot = cacheNodeIdsToReboot {
            var cacheNodeIdsToRebootContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheNodeIdsToReboot"))
            for (index0, string0) in cacheNodeIdsToReboot.enumerated() {
                try cacheNodeIdsToRebootContainer.encode(string0, forKey: Key("CacheNodeId.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("RebootCacheCluster", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct RebootCacheClusterInputHeadersMiddleware: Middleware {
    public let id: String = "RebootCacheClusterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RebootCacheClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<RebootCacheClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RebootCacheClusterInput>
    public typealias MOutput = OperationOutput<RebootCacheClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RebootCacheClusterOutputError>
}

public struct RebootCacheClusterInputQueryItemMiddleware: Middleware {
    public let id: String = "RebootCacheClusterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RebootCacheClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<RebootCacheClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RebootCacheClusterInput>
    public typealias MOutput = OperationOutput<RebootCacheClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RebootCacheClusterOutputError>
}

/// <p>Represents the input of a <code>RebootCacheCluster</code> operation.</p>
public struct RebootCacheClusterInput: Equatable {
    /// <p>The cluster identifier. This parameter is stored as a lowercase string.</p>
    public let cacheClusterId: String?
    /// <p>A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.</p>
    public let cacheNodeIdsToReboot: [String]?

    public init (
        cacheClusterId: String? = nil,
        cacheNodeIdsToReboot: [String]? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.cacheNodeIdsToReboot = cacheNodeIdsToReboot
    }
}

extension RebootCacheClusterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RebootCacheClusterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFoundFault" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterStateFault" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RebootCacheClusterOutputError: Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RebootCacheClusterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RebootCacheClusterOutputResponse(cacheCluster: \(String(describing: cacheCluster)))"}
}

extension RebootCacheClusterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RebootCacheClusterOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheCluster = output.cacheCluster
        } else {
            self.cacheCluster = nil
        }
    }
}

public struct RebootCacheClusterOutputResponse: Equatable {
    /// <p>Contains all of the attributes of a specific cluster.</p>
    public let cacheCluster: CacheCluster?

    public init (
        cacheCluster: CacheCluster? = nil
    )
    {
        self.cacheCluster = cacheCluster
    }
}

struct RebootCacheClusterOutputResponseBody: Equatable {
    public let cacheCluster: CacheCluster?
}

extension RebootCacheClusterOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheCluster = "CacheCluster"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("RebootCacheClusterResult"))
        let cacheClusterDecoded = try containerValues.decodeIfPresent(CacheCluster.self, forKey: .cacheCluster)
        cacheCluster = cacheClusterDecoded
    }
}

extension RecurringCharge: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case recurringChargeAmount = "RecurringChargeAmount"
        case recurringChargeFrequency = "RecurringChargeFrequency"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if recurringChargeAmount != 0.0 {
            try container.encode(String(recurringChargeAmount), forKey: Key("RecurringChargeAmount"))
        }
        if let recurringChargeFrequency = recurringChargeFrequency {
            try container.encode(recurringChargeFrequency, forKey: Key("RecurringChargeFrequency"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recurringChargeAmountDecoded = try containerValues.decode(Double.self, forKey: .recurringChargeAmount)
        recurringChargeAmount = recurringChargeAmountDecoded
        let recurringChargeFrequencyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recurringChargeFrequency)
        recurringChargeFrequency = recurringChargeFrequencyDecoded
    }
}

extension RecurringCharge: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RecurringCharge(recurringChargeAmount: \(String(describing: recurringChargeAmount)), recurringChargeFrequency: \(String(describing: recurringChargeFrequency)))"}
}

/// <p>Contains the specific price and frequency of a recurring charges for a reserved cache node,
///             or for a reserved cache node offering.</p>
public struct RecurringCharge: Equatable {
    /// <p>The monetary amount of the recurring charge.</p>
    public let recurringChargeAmount: Double
    /// <p>The frequency of the recurring charge.</p>
    public let recurringChargeFrequency: String?

    public init (
        recurringChargeAmount: Double = 0.0,
        recurringChargeFrequency: String? = nil
    )
    {
        self.recurringChargeAmount = recurringChargeAmount
        self.recurringChargeFrequency = recurringChargeFrequency
    }
}

extension RegionalConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case replicationGroupId = "ReplicationGroupId"
        case replicationGroupRegion = "ReplicationGroupRegion"
        case reshardingConfiguration = "ReshardingConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let replicationGroupRegion = replicationGroupRegion {
            try container.encode(replicationGroupRegion, forKey: Key("ReplicationGroupRegion"))
        }
        if let reshardingConfiguration = reshardingConfiguration {
            var reshardingConfigurationContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReshardingConfiguration"))
            for (index0, reshardingconfiguration0) in reshardingConfiguration.enumerated() {
                try reshardingConfigurationContainer.encode(reshardingconfiguration0, forKey: Key("ReshardingConfiguration.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let replicationGroupRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationGroupRegion)
        replicationGroupRegion = replicationGroupRegionDecoded
        if containerValues.contains(.reshardingConfiguration) {
            struct KeyVal0{struct ReshardingConfiguration{}}
            let reshardingConfigurationWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReshardingConfiguration>.CodingKeys.self, forKey: .reshardingConfiguration)
            if let reshardingConfigurationWrappedContainer = reshardingConfigurationWrappedContainer {
                let reshardingConfigurationContainer = try reshardingConfigurationWrappedContainer.decodeIfPresent([ReshardingConfiguration].self, forKey: .member)
                var reshardingConfigurationBuffer:[ReshardingConfiguration]? = nil
                if let reshardingConfigurationContainer = reshardingConfigurationContainer {
                    reshardingConfigurationBuffer = [ReshardingConfiguration]()
                    for structureContainer0 in reshardingConfigurationContainer {
                        reshardingConfigurationBuffer?.append(structureContainer0)
                    }
                }
                reshardingConfiguration = reshardingConfigurationBuffer
            } else {
                reshardingConfiguration = []
            }
        } else {
            reshardingConfiguration = nil
        }
    }
}

extension RegionalConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegionalConfiguration(replicationGroupId: \(String(describing: replicationGroupId)), replicationGroupRegion: \(String(describing: replicationGroupRegion)), reshardingConfiguration: \(String(describing: reshardingConfiguration)))"}
}

/// <p>A list of the replication groups </p>
public struct RegionalConfiguration: Equatable {
    /// <p>The name of the secondary cluster</p>
    public let replicationGroupId: String?
    /// <p>The AWS region where the cluster is stored</p>
    public let replicationGroupRegion: String?
    /// <p>A list of <code>PreferredAvailabilityZones</code> objects that specifies the configuration of a node group in the resharded cluster. </p>
    public let reshardingConfiguration: [ReshardingConfiguration]?

    public init (
        replicationGroupId: String? = nil,
        replicationGroupRegion: String? = nil,
        reshardingConfiguration: [ReshardingConfiguration]? = nil
    )
    {
        self.replicationGroupId = replicationGroupId
        self.replicationGroupRegion = replicationGroupRegion
        self.reshardingConfiguration = reshardingConfiguration
    }
}

public struct RemoveTagsFromResourceInputBodyMiddleware: Middleware {
    public let id: String = "RemoveTagsFromResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveTagsFromResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveTagsFromResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveTagsFromResourceInput>
    public typealias MOutput = OperationOutput<RemoveTagsFromResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveTagsFromResourceOutputError>
}

extension RemoveTagsFromResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemoveTagsFromResourceInput(resourceName: \(String(describing: resourceName)), tagKeys: \(String(describing: tagKeys)))"}
}

extension RemoveTagsFromResourceInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: Key("ResourceName"))
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagKeys"))
            for (index0, string0) in tagKeys.enumerated() {
                try tagKeysContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("RemoveTagsFromResource", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct RemoveTagsFromResourceInputHeadersMiddleware: Middleware {
    public let id: String = "RemoveTagsFromResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveTagsFromResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveTagsFromResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveTagsFromResourceInput>
    public typealias MOutput = OperationOutput<RemoveTagsFromResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveTagsFromResourceOutputError>
}

public struct RemoveTagsFromResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "RemoveTagsFromResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveTagsFromResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveTagsFromResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveTagsFromResourceInput>
    public typealias MOutput = OperationOutput<RemoveTagsFromResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveTagsFromResourceOutputError>
}

/// <p>Represents the input of a <code>RemoveTagsFromResource</code> operation.</p>
public struct RemoveTagsFromResourceInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed,
    ///             for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code>
    ///             or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p>
    ///         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
    public let resourceName: String?
    /// <p>A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.</p>
    public let tagKeys: [String]?

    public init (
        resourceName: String? = nil,
        tagKeys: [String]? = nil
    )
    {
        self.resourceName = resourceName
        self.tagKeys = tagKeys
    }
}

extension RemoveTagsFromResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RemoveTagsFromResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFoundFault" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupNotFoundFault" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFoundFault" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidARNFault" : self = .invalidARNFault(try InvalidARNFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupStateFault" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodeNotFoundFault" : self = .reservedCacheNodeNotFoundFault(try ReservedCacheNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFoundFault" : self = .snapshotNotFoundFault(try SnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagNotFoundFault" : self = .tagNotFoundFault(try TagNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFoundFault" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundFault" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveTagsFromResourceOutputError: Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case invalidARNFault(InvalidARNFault)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case reservedCacheNodeNotFoundFault(ReservedCacheNodeNotFoundFault)
    case snapshotNotFoundFault(SnapshotNotFoundFault)
    case tagNotFoundFault(TagNotFoundFault)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveTagsFromResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemoveTagsFromResourceOutputResponse(tagList: \(String(describing: tagList)))"}
}

extension RemoveTagsFromResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RemoveTagsFromResourceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tagList = output.tagList
        } else {
            self.tagList = nil
        }
    }
}

/// <p>Represents the output from the <code>AddTagsToResource</code>,
///             <code>ListTagsForResource</code>, and <code>RemoveTagsFromResource</code> operations.</p>
public struct RemoveTagsFromResourceOutputResponse: Equatable {
    /// <p>A list of tags as key-value pairs.</p>
    public let tagList: [Tag]?

    public init (
        tagList: [Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

struct RemoveTagsFromResourceOutputResponseBody: Equatable {
    public let tagList: [Tag]?
}

extension RemoveTagsFromResourceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tagList = "TagList"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("RemoveTagsFromResourceResult"))
        if containerValues.contains(.tagList) {
            struct KeyVal0{struct Tag{}}
            let tagListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tagList)
            if let tagListWrappedContainer = tagListWrappedContainer {
                let tagListContainer = try tagListWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagListBuffer:[Tag]? = nil
                if let tagListContainer = tagListContainer {
                    tagListBuffer = [Tag]()
                    for structureContainer0 in tagListContainer {
                        tagListBuffer?.append(structureContainer0)
                    }
                }
                tagList = tagListBuffer
            } else {
                tagList = []
            }
        } else {
            tagList = nil
        }
    }
}

extension ReplicationGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case atRestEncryptionEnabled = "AtRestEncryptionEnabled"
        case authTokenEnabled = "AuthTokenEnabled"
        case authTokenLastModifiedDate = "AuthTokenLastModifiedDate"
        case automaticFailover = "AutomaticFailover"
        case cacheNodeType = "CacheNodeType"
        case clusterEnabled = "ClusterEnabled"
        case configurationEndpoint = "ConfigurationEndpoint"
        case description = "Description"
        case globalReplicationGroupInfo = "GlobalReplicationGroupInfo"
        case kmsKeyId = "KmsKeyId"
        case logDeliveryConfigurations = "LogDeliveryConfigurations"
        case memberClusters = "MemberClusters"
        case memberClustersOutpostArns = "MemberClustersOutpostArns"
        case multiAZ = "MultiAZ"
        case nodeGroups = "NodeGroups"
        case pendingModifiedValues = "PendingModifiedValues"
        case replicationGroupId = "ReplicationGroupId"
        case snapshotRetentionLimit = "SnapshotRetentionLimit"
        case snapshotWindow = "SnapshotWindow"
        case snapshottingClusterId = "SnapshottingClusterId"
        case status = "Status"
        case transitEncryptionEnabled = "TransitEncryptionEnabled"
        case userGroupIds = "UserGroupIds"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: Key("ARN"))
        }
        if let atRestEncryptionEnabled = atRestEncryptionEnabled {
            try container.encode(atRestEncryptionEnabled, forKey: Key("AtRestEncryptionEnabled"))
        }
        if let authTokenEnabled = authTokenEnabled {
            try container.encode(authTokenEnabled, forKey: Key("AuthTokenEnabled"))
        }
        if let authTokenLastModifiedDate = authTokenLastModifiedDate {
            try container.encode(TimestampWrapper(authTokenLastModifiedDate, format: .dateTime), forKey: Key("authTokenLastModifiedDate"))
        }
        if let automaticFailover = automaticFailover {
            try container.encode(automaticFailover, forKey: Key("AutomaticFailover"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let clusterEnabled = clusterEnabled {
            try container.encode(clusterEnabled, forKey: Key("ClusterEnabled"))
        }
        if let configurationEndpoint = configurationEndpoint {
            try container.encode(configurationEndpoint, forKey: Key("ConfigurationEndpoint"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let globalReplicationGroupInfo = globalReplicationGroupInfo {
            try container.encode(globalReplicationGroupInfo, forKey: Key("GlobalReplicationGroupInfo"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: Key("KmsKeyId"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LogDeliveryConfigurations"))
            for (index0, logdeliveryconfiguration0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(logdeliveryconfiguration0, forKey: Key("LogDeliveryConfiguration.\(index0.advanced(by: 1))"))
            }
        }
        if let memberClusters = memberClusters {
            var memberClustersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("MemberClusters"))
            for (index0, string0) in memberClusters.enumerated() {
                try memberClustersContainer.encode(string0, forKey: Key("ClusterId.\(index0.advanced(by: 1))"))
            }
        }
        if let memberClustersOutpostArns = memberClustersOutpostArns {
            var memberClustersOutpostArnsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("MemberClustersOutpostArns"))
            for (index0, string0) in memberClustersOutpostArns.enumerated() {
                try memberClustersOutpostArnsContainer.encode(string0, forKey: Key("ReplicationGroupOutpostArn.\(index0.advanced(by: 1))"))
            }
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: Key("MultiAZ"))
        }
        if let nodeGroups = nodeGroups {
            var nodeGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NodeGroups"))
            for (index0, nodegroup0) in nodeGroups.enumerated() {
                try nodeGroupsContainer.encode(nodegroup0, forKey: Key("NodeGroup.\(index0.advanced(by: 1))"))
            }
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try container.encode(pendingModifiedValues, forKey: Key("PendingModifiedValues"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: Key("SnapshotRetentionLimit"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: Key("SnapshotWindow"))
        }
        if let snapshottingClusterId = snapshottingClusterId {
            try container.encode(snapshottingClusterId, forKey: Key("SnapshottingClusterId"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let transitEncryptionEnabled = transitEncryptionEnabled {
            try container.encode(transitEncryptionEnabled, forKey: Key("TransitEncryptionEnabled"))
        }
        if let userGroupIds = userGroupIds {
            var userGroupIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserGroupIds"))
            for (index0, usergroupid0) in userGroupIds.enumerated() {
                try userGroupIdsContainer.encode(usergroupid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let globalReplicationGroupInfoDecoded = try containerValues.decodeIfPresent(GlobalReplicationGroupInfo.self, forKey: .globalReplicationGroupInfo)
        globalReplicationGroupInfo = globalReplicationGroupInfoDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(ReplicationGroupPendingModifiedValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        if containerValues.contains(.memberClusters) {
            struct KeyVal0{struct ClusterId{}}
            let memberClustersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterId>.CodingKeys.self, forKey: .memberClusters)
            if let memberClustersWrappedContainer = memberClustersWrappedContainer {
                let memberClustersContainer = try memberClustersWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var memberClustersBuffer:[String]? = nil
                if let memberClustersContainer = memberClustersContainer {
                    memberClustersBuffer = [String]()
                    for stringContainer0 in memberClustersContainer {
                        memberClustersBuffer?.append(stringContainer0)
                    }
                }
                memberClusters = memberClustersBuffer
            } else {
                memberClusters = []
            }
        } else {
            memberClusters = nil
        }
        if containerValues.contains(.nodeGroups) {
            struct KeyVal0{struct NodeGroup{}}
            let nodeGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeGroup>.CodingKeys.self, forKey: .nodeGroups)
            if let nodeGroupsWrappedContainer = nodeGroupsWrappedContainer {
                let nodeGroupsContainer = try nodeGroupsWrappedContainer.decodeIfPresent([NodeGroup].self, forKey: .member)
                var nodeGroupsBuffer:[NodeGroup]? = nil
                if let nodeGroupsContainer = nodeGroupsContainer {
                    nodeGroupsBuffer = [NodeGroup]()
                    for structureContainer0 in nodeGroupsContainer {
                        nodeGroupsBuffer?.append(structureContainer0)
                    }
                }
                nodeGroups = nodeGroupsBuffer
            } else {
                nodeGroups = []
            }
        } else {
            nodeGroups = nil
        }
        let snapshottingClusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshottingClusterId)
        snapshottingClusterId = snapshottingClusterIdDecoded
        let automaticFailoverDecoded = try containerValues.decodeIfPresent(AutomaticFailoverStatus.self, forKey: .automaticFailover)
        automaticFailover = automaticFailoverDecoded
        let multiAZDecoded = try containerValues.decodeIfPresent(MultiAZStatus.self, forKey: .multiAZ)
        multiAZ = multiAZDecoded
        let configurationEndpointDecoded = try containerValues.decodeIfPresent(Endpoint.self, forKey: .configurationEndpoint)
        configurationEndpoint = configurationEndpointDecoded
        let snapshotRetentionLimitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .snapshotRetentionLimit)
        snapshotRetentionLimit = snapshotRetentionLimitDecoded
        let snapshotWindowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotWindow)
        snapshotWindow = snapshotWindowDecoded
        let clusterEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .clusterEnabled)
        clusterEnabled = clusterEnabledDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let authTokenEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .authTokenEnabled)
        authTokenEnabled = authTokenEnabledDecoded
        let authTokenLastModifiedDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authTokenLastModifiedDate)
        var authTokenLastModifiedDateBuffer:Date? = nil
        if let authTokenLastModifiedDateDecoded = authTokenLastModifiedDateDecoded {
            authTokenLastModifiedDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(authTokenLastModifiedDateDecoded, format: .dateTime)
        }
        authTokenLastModifiedDate = authTokenLastModifiedDateBuffer
        let transitEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .transitEncryptionEnabled)
        transitEncryptionEnabled = transitEncryptionEnabledDecoded
        let atRestEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .atRestEncryptionEnabled)
        atRestEncryptionEnabled = atRestEncryptionEnabledDecoded
        if containerValues.contains(.memberClustersOutpostArns) {
            struct KeyVal0{struct ReplicationGroupOutpostArn{}}
            let memberClustersOutpostArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReplicationGroupOutpostArn>.CodingKeys.self, forKey: .memberClustersOutpostArns)
            if let memberClustersOutpostArnsWrappedContainer = memberClustersOutpostArnsWrappedContainer {
                let memberClustersOutpostArnsContainer = try memberClustersOutpostArnsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var memberClustersOutpostArnsBuffer:[String]? = nil
                if let memberClustersOutpostArnsContainer = memberClustersOutpostArnsContainer {
                    memberClustersOutpostArnsBuffer = [String]()
                    for stringContainer0 in memberClustersOutpostArnsContainer {
                        memberClustersOutpostArnsBuffer?.append(stringContainer0)
                    }
                }
                memberClustersOutpostArns = memberClustersOutpostArnsBuffer
            } else {
                memberClustersOutpostArns = []
            }
        } else {
            memberClustersOutpostArns = nil
        }
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
        if containerValues.contains(.userGroupIds) {
            struct KeyVal0{struct member{}}
            let userGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIds)
            if let userGroupIdsWrappedContainer = userGroupIdsWrappedContainer {
                let userGroupIdsContainer = try userGroupIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userGroupIdsBuffer:[String]? = nil
                if let userGroupIdsContainer = userGroupIdsContainer {
                    userGroupIdsBuffer = [String]()
                    for stringContainer0 in userGroupIdsContainer {
                        userGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                userGroupIds = userGroupIdsBuffer
            } else {
                userGroupIds = []
            }
        } else {
            userGroupIds = nil
        }
        if containerValues.contains(.logDeliveryConfigurations) {
            struct KeyVal0{struct LogDeliveryConfiguration{}}
            let logDeliveryConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.LogDeliveryConfiguration>.CodingKeys.self, forKey: .logDeliveryConfigurations)
            if let logDeliveryConfigurationsWrappedContainer = logDeliveryConfigurationsWrappedContainer {
                let logDeliveryConfigurationsContainer = try logDeliveryConfigurationsWrappedContainer.decodeIfPresent([LogDeliveryConfiguration].self, forKey: .member)
                var logDeliveryConfigurationsBuffer:[LogDeliveryConfiguration]? = nil
                if let logDeliveryConfigurationsContainer = logDeliveryConfigurationsContainer {
                    logDeliveryConfigurationsBuffer = [LogDeliveryConfiguration]()
                    for structureContainer0 in logDeliveryConfigurationsContainer {
                        logDeliveryConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                logDeliveryConfigurations = logDeliveryConfigurationsBuffer
            } else {
                logDeliveryConfigurations = []
            }
        } else {
            logDeliveryConfigurations = nil
        }
    }
}

extension ReplicationGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicationGroup(aRN: \(String(describing: aRN)), atRestEncryptionEnabled: \(String(describing: atRestEncryptionEnabled)), authTokenEnabled: \(String(describing: authTokenEnabled)), authTokenLastModifiedDate: \(String(describing: authTokenLastModifiedDate)), automaticFailover: \(String(describing: automaticFailover)), cacheNodeType: \(String(describing: cacheNodeType)), clusterEnabled: \(String(describing: clusterEnabled)), configurationEndpoint: \(String(describing: configurationEndpoint)), description: \(String(describing: description)), globalReplicationGroupInfo: \(String(describing: globalReplicationGroupInfo)), kmsKeyId: \(String(describing: kmsKeyId)), logDeliveryConfigurations: \(String(describing: logDeliveryConfigurations)), memberClusters: \(String(describing: memberClusters)), memberClustersOutpostArns: \(String(describing: memberClustersOutpostArns)), multiAZ: \(String(describing: multiAZ)), nodeGroups: \(String(describing: nodeGroups)), pendingModifiedValues: \(String(describing: pendingModifiedValues)), replicationGroupId: \(String(describing: replicationGroupId)), snapshotRetentionLimit: \(String(describing: snapshotRetentionLimit)), snapshotWindow: \(String(describing: snapshotWindow)), snapshottingClusterId: \(String(describing: snapshottingClusterId)), status: \(String(describing: status)), transitEncryptionEnabled: \(String(describing: transitEncryptionEnabled)), userGroupIds: \(String(describing: userGroupIds)))"}
}

/// <p>Contains all of the attributes of a specific Redis replication group.</p>
public struct ReplicationGroup: Equatable {
    /// <p>The ARN (Amazon Resource Name) of the replication group.</p>
    public let aRN: String?
    /// <p>A flag that enables encryption at-rest when set to <code>true</code>.</p>
    ///         <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code>
    ///             after the cluster is created. To enable encryption at-rest on a cluster
    ///             you must set <code>AtRestEncryptionEnabled</code> to <code>true</code>
    ///             when you create a cluster.</p>
    ///         <p>
    ///             <b>Required:</b>
    ///             Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    public let atRestEncryptionEnabled: Bool?
    /// <p>A flag that enables using an <code>AuthToken</code> (password)
    ///             when issuing Redis commands.</p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    public let authTokenEnabled: Bool?
    /// <p>The date the auth token was last modified</p>
    public let authTokenLastModifiedDate: Date?
    /// <p>Indicates the status of automatic failover for this Redis replication group.</p>
    public let automaticFailover: AutomaticFailoverStatus?
    /// <p>The name of the compute and memory capacity node type for each node in the replication group.</p>
    public let cacheNodeType: String?
    /// <p>A flag indicating whether or not this replication group is cluster enabled;
    ///             i.e., whether its data can be partitioned across multiple shards (API/CLI: node groups).</p>
    ///         <p>Valid values: <code>true</code> | <code>false</code>
    ///          </p>
    public let clusterEnabled: Bool?
    /// <p>The configuration endpoint for this replication group.
    ///             Use the configuration endpoint to connect to this replication group.</p>
    public let configurationEndpoint: Endpoint?
    /// <p>The user supplied description of the replication group.</p>
    public let description: String?
    /// <p>The name of the Global datastore and role of this replication group in the Global datastore.</p>
    public let globalReplicationGroupInfo: GlobalReplicationGroupInfo?
    /// <p>The ID of the KMS key used to encrypt the disk in the cluster.</p>
    public let kmsKeyId: String?
    /// <p>Returns the destination, format and type of the logs. </p>
    public let logDeliveryConfigurations: [LogDeliveryConfiguration]?
    /// <p>The names of all the cache clusters that are part of this replication group.</p>
    public let memberClusters: [String]?
    /// <p>The outpost ARNs of the replication group's member clusters.</p>
    public let memberClustersOutpostArns: [String]?
    /// <p>A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html">Minimizing Downtime: Multi-AZ</a>
    ///          </p>
    public let multiAZ: MultiAZStatus?
    /// <p>A list of node groups in this replication group.
    ///             For Redis (cluster mode disabled) replication groups, this is a single-element list.
    ///             For Redis (cluster mode enabled) replication groups, the list contains an entry for each
    ///             node group (shard).</p>
    public let nodeGroups: [NodeGroup]?
    /// <p>A group of settings to be applied to the replication group,
    ///             either immediately or during the next maintenance window.</p>
    public let pendingModifiedValues: ReplicationGroupPendingModifiedValues?
    /// <p>The identifier for the replication group.</p>
    public let replicationGroupId: String?
    /// <p>The number of days for which ElastiCache retains automatic cluster snapshots before
    ///             deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a
    ///             snapshot that was taken today is retained for 5 days before being deleted.</p>
    ///         <important>
    ///             <p>
    ///             If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p>
    ///          </important>
    public let snapshotRetentionLimit: Int?
    /// <p>The daily time range (in UTC) during which ElastiCache  begins taking a daily snapshot of your node group (shard).</p>
    ///         <p>Example: <code>05:00-09:00</code>
    ///         </p>
    ///         <p>If you do not specify this parameter, ElastiCache  automatically chooses an appropriate time range.</p>
    ///         <note>
    ///             <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p>
    ///          </note>
    public let snapshotWindow: String?
    /// <p>The cluster ID that is used as the daily snapshot source for the replication group.</p>
    public let snapshottingClusterId: String?
    /// <p>The current state of this replication group -
    ///             <code>creating</code>,
    ///             <code>available</code>,
    ///             <code>modifying</code>,
    ///             <code>deleting</code>,
    ///             <code>create-failed</code>,
    ///             <code>snapshotting</code>.</p>
    public let status: String?
    /// <p>A flag that enables in-transit encryption when set to <code>true</code>.</p>
    ///         <p>You cannot modify the value of <code>TransitEncryptionEnabled</code>
    ///             after the cluster is created. To enable in-transit encryption on a cluster
    ///             you must set <code>TransitEncryptionEnabled</code> to <code>true</code>
    ///             when you create a cluster.</p>
    ///         <p>
    ///             <b>Required:</b>
    ///             Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    public let transitEncryptionEnabled: Bool?
    /// <p>The list of user group IDs that have access to the replication group.</p>
    public let userGroupIds: [String]?

    public init (
        aRN: String? = nil,
        atRestEncryptionEnabled: Bool? = nil,
        authTokenEnabled: Bool? = nil,
        authTokenLastModifiedDate: Date? = nil,
        automaticFailover: AutomaticFailoverStatus? = nil,
        cacheNodeType: String? = nil,
        clusterEnabled: Bool? = nil,
        configurationEndpoint: Endpoint? = nil,
        description: String? = nil,
        globalReplicationGroupInfo: GlobalReplicationGroupInfo? = nil,
        kmsKeyId: String? = nil,
        logDeliveryConfigurations: [LogDeliveryConfiguration]? = nil,
        memberClusters: [String]? = nil,
        memberClustersOutpostArns: [String]? = nil,
        multiAZ: MultiAZStatus? = nil,
        nodeGroups: [NodeGroup]? = nil,
        pendingModifiedValues: ReplicationGroupPendingModifiedValues? = nil,
        replicationGroupId: String? = nil,
        snapshotRetentionLimit: Int? = nil,
        snapshotWindow: String? = nil,
        snapshottingClusterId: String? = nil,
        status: String? = nil,
        transitEncryptionEnabled: Bool? = nil,
        userGroupIds: [String]? = nil
    )
    {
        self.aRN = aRN
        self.atRestEncryptionEnabled = atRestEncryptionEnabled
        self.authTokenEnabled = authTokenEnabled
        self.authTokenLastModifiedDate = authTokenLastModifiedDate
        self.automaticFailover = automaticFailover
        self.cacheNodeType = cacheNodeType
        self.clusterEnabled = clusterEnabled
        self.configurationEndpoint = configurationEndpoint
        self.description = description
        self.globalReplicationGroupInfo = globalReplicationGroupInfo
        self.kmsKeyId = kmsKeyId
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.memberClusters = memberClusters
        self.memberClustersOutpostArns = memberClustersOutpostArns
        self.multiAZ = multiAZ
        self.nodeGroups = nodeGroups
        self.pendingModifiedValues = pendingModifiedValues
        self.replicationGroupId = replicationGroupId
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
        self.snapshottingClusterId = snapshottingClusterId
        self.status = status
        self.transitEncryptionEnabled = transitEncryptionEnabled
        self.userGroupIds = userGroupIds
    }
}

extension ReplicationGroupAlreadyExistsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicationGroupAlreadyExistsFault(message: \(String(describing: message)))"}
}

extension ReplicationGroupAlreadyExistsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ReplicationGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified replication group already exists.</p>
public struct ReplicationGroupAlreadyExistsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ReplicationGroupAlreadyExistsFaultBody: Equatable {
    public let message: String?
}

extension ReplicationGroupAlreadyExistsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReplicationGroupAlreadyUnderMigrationFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicationGroupAlreadyUnderMigrationFault(message: \(String(describing: message)))"}
}

extension ReplicationGroupAlreadyUnderMigrationFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ReplicationGroupAlreadyUnderMigrationFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The targeted replication group is not available. </p>
public struct ReplicationGroupAlreadyUnderMigrationFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ReplicationGroupAlreadyUnderMigrationFaultBody: Equatable {
    public let message: String?
}

extension ReplicationGroupAlreadyUnderMigrationFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReplicationGroupNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicationGroupNotFoundFault(message: \(String(describing: message)))"}
}

extension ReplicationGroupNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ReplicationGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified replication group does not exist.</p>
public struct ReplicationGroupNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ReplicationGroupNotFoundFaultBody: Equatable {
    public let message: String?
}

extension ReplicationGroupNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReplicationGroupNotUnderMigrationFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicationGroupNotUnderMigrationFault(message: \(String(describing: message)))"}
}

extension ReplicationGroupNotUnderMigrationFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ReplicationGroupNotUnderMigrationFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The designated replication group is not available for data migration.</p>
public struct ReplicationGroupNotUnderMigrationFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ReplicationGroupNotUnderMigrationFaultBody: Equatable {
    public let message: String?
}

extension ReplicationGroupNotUnderMigrationFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReplicationGroupPendingModifiedValues: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authTokenStatus = "AuthTokenStatus"
        case automaticFailoverStatus = "AutomaticFailoverStatus"
        case logDeliveryConfigurations = "LogDeliveryConfigurations"
        case primaryClusterId = "PrimaryClusterId"
        case resharding = "Resharding"
        case userGroups = "UserGroups"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let authTokenStatus = authTokenStatus {
            try container.encode(authTokenStatus, forKey: Key("AuthTokenStatus"))
        }
        if let automaticFailoverStatus = automaticFailoverStatus {
            try container.encode(automaticFailoverStatus, forKey: Key("AutomaticFailoverStatus"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LogDeliveryConfigurations"))
            for (index0, pendinglogdeliveryconfiguration0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(pendinglogdeliveryconfiguration0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let primaryClusterId = primaryClusterId {
            try container.encode(primaryClusterId, forKey: Key("PrimaryClusterId"))
        }
        if let resharding = resharding {
            try container.encode(resharding, forKey: Key("Resharding"))
        }
        if let userGroups = userGroups {
            try container.encode(userGroups, forKey: Key("UserGroups"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let primaryClusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .primaryClusterId)
        primaryClusterId = primaryClusterIdDecoded
        let automaticFailoverStatusDecoded = try containerValues.decodeIfPresent(PendingAutomaticFailoverStatus.self, forKey: .automaticFailoverStatus)
        automaticFailoverStatus = automaticFailoverStatusDecoded
        let reshardingDecoded = try containerValues.decodeIfPresent(ReshardingStatus.self, forKey: .resharding)
        resharding = reshardingDecoded
        let authTokenStatusDecoded = try containerValues.decodeIfPresent(AuthTokenUpdateStatus.self, forKey: .authTokenStatus)
        authTokenStatus = authTokenStatusDecoded
        let userGroupsDecoded = try containerValues.decodeIfPresent(UserGroupsUpdateStatus.self, forKey: .userGroups)
        userGroups = userGroupsDecoded
        if containerValues.contains(.logDeliveryConfigurations) {
            struct KeyVal0{struct member{}}
            let logDeliveryConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logDeliveryConfigurations)
            if let logDeliveryConfigurationsWrappedContainer = logDeliveryConfigurationsWrappedContainer {
                let logDeliveryConfigurationsContainer = try logDeliveryConfigurationsWrappedContainer.decodeIfPresent([PendingLogDeliveryConfiguration].self, forKey: .member)
                var logDeliveryConfigurationsBuffer:[PendingLogDeliveryConfiguration]? = nil
                if let logDeliveryConfigurationsContainer = logDeliveryConfigurationsContainer {
                    logDeliveryConfigurationsBuffer = [PendingLogDeliveryConfiguration]()
                    for structureContainer0 in logDeliveryConfigurationsContainer {
                        logDeliveryConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                logDeliveryConfigurations = logDeliveryConfigurationsBuffer
            } else {
                logDeliveryConfigurations = []
            }
        } else {
            logDeliveryConfigurations = nil
        }
    }
}

extension ReplicationGroupPendingModifiedValues: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicationGroupPendingModifiedValues(authTokenStatus: \(String(describing: authTokenStatus)), automaticFailoverStatus: \(String(describing: automaticFailoverStatus)), logDeliveryConfigurations: \(String(describing: logDeliveryConfigurations)), primaryClusterId: \(String(describing: primaryClusterId)), resharding: \(String(describing: resharding)), userGroups: \(String(describing: userGroups)))"}
}

/// <p>The settings to be applied to the Redis replication group,
///             either immediately or during the next maintenance window.</p>
public struct ReplicationGroupPendingModifiedValues: Equatable {
    /// <p>The auth token status</p>
    public let authTokenStatus: AuthTokenUpdateStatus?
    /// <p>Indicates the status of automatic failover for this Redis replication group.</p>
    public let automaticFailoverStatus: PendingAutomaticFailoverStatus?
    /// <p>The log delivery configurations being modified </p>
    public let logDeliveryConfigurations: [PendingLogDeliveryConfiguration]?
    /// <p>The primary cluster ID that is applied immediately (if <code>--apply-immediately</code>
    ///             was specified), or during the next maintenance window.</p>
    public let primaryClusterId: String?
    /// <p>The status of an online resharding operation.</p>
    public let resharding: ReshardingStatus?
    /// <p>The user groups being modified.</p>
    public let userGroups: UserGroupsUpdateStatus?

    public init (
        authTokenStatus: AuthTokenUpdateStatus? = nil,
        automaticFailoverStatus: PendingAutomaticFailoverStatus? = nil,
        logDeliveryConfigurations: [PendingLogDeliveryConfiguration]? = nil,
        primaryClusterId: String? = nil,
        resharding: ReshardingStatus? = nil,
        userGroups: UserGroupsUpdateStatus? = nil
    )
    {
        self.authTokenStatus = authTokenStatus
        self.automaticFailoverStatus = automaticFailoverStatus
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.primaryClusterId = primaryClusterId
        self.resharding = resharding
        self.userGroups = userGroups
    }
}

extension ReservedCacheNode: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheNodeCount = "CacheNodeCount"
        case cacheNodeType = "CacheNodeType"
        case duration = "Duration"
        case fixedPrice = "FixedPrice"
        case offeringType = "OfferingType"
        case productDescription = "ProductDescription"
        case recurringCharges = "RecurringCharges"
        case reservationARN = "ReservationARN"
        case reservedCacheNodeId = "ReservedCacheNodeId"
        case reservedCacheNodesOfferingId = "ReservedCacheNodesOfferingId"
        case startTime = "StartTime"
        case state = "State"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if cacheNodeCount != 0 {
            try container.encode(cacheNodeCount, forKey: Key("CacheNodeCount"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if duration != 0 {
            try container.encode(duration, forKey: Key("Duration"))
        }
        if fixedPrice != 0.0 {
            try container.encode(String(fixedPrice), forKey: Key("FixedPrice"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: Key("OfferingType"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: Key("ProductDescription"))
        }
        if let recurringCharges = recurringCharges {
            var recurringChargesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("RecurringCharges"))
            for (index0, recurringcharge0) in recurringCharges.enumerated() {
                try recurringChargesContainer.encode(recurringcharge0, forKey: Key("RecurringCharge.\(index0.advanced(by: 1))"))
            }
        }
        if let reservationARN = reservationARN {
            try container.encode(reservationARN, forKey: Key("ReservationARN"))
        }
        if let reservedCacheNodeId = reservedCacheNodeId {
            try container.encode(reservedCacheNodeId, forKey: Key("ReservedCacheNodeId"))
        }
        if let reservedCacheNodesOfferingId = reservedCacheNodesOfferingId {
            try container.encode(reservedCacheNodesOfferingId, forKey: Key("ReservedCacheNodesOfferingId"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
        if usagePrice != 0.0 {
            try container.encode(String(usagePrice), forKey: Key("UsagePrice"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedCacheNodeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reservedCacheNodeId)
        reservedCacheNodeId = reservedCacheNodeIdDecoded
        let reservedCacheNodesOfferingIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reservedCacheNodesOfferingId)
        reservedCacheNodesOfferingId = reservedCacheNodesOfferingIdDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        var startTimeBuffer:Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let fixedPriceDecoded = try containerValues.decode(Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let usagePriceDecoded = try containerValues.decode(Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let cacheNodeCountDecoded = try containerValues.decode(Int.self, forKey: .cacheNodeCount)
        cacheNodeCount = cacheNodeCountDecoded
        let productDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productDescription)
        productDescription = productDescriptionDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .state)
        state = stateDecoded
        if containerValues.contains(.recurringCharges) {
            struct KeyVal0{struct RecurringCharge{}}
            let recurringChargesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RecurringCharge>.CodingKeys.self, forKey: .recurringCharges)
            if let recurringChargesWrappedContainer = recurringChargesWrappedContainer {
                let recurringChargesContainer = try recurringChargesWrappedContainer.decodeIfPresent([RecurringCharge].self, forKey: .member)
                var recurringChargesBuffer:[RecurringCharge]? = nil
                if let recurringChargesContainer = recurringChargesContainer {
                    recurringChargesBuffer = [RecurringCharge]()
                    for structureContainer0 in recurringChargesContainer {
                        recurringChargesBuffer?.append(structureContainer0)
                    }
                }
                recurringCharges = recurringChargesBuffer
            } else {
                recurringCharges = []
            }
        } else {
            recurringCharges = nil
        }
        let reservationARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reservationARN)
        reservationARN = reservationARNDecoded
    }
}

extension ReservedCacheNode: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReservedCacheNode(cacheNodeCount: \(String(describing: cacheNodeCount)), cacheNodeType: \(String(describing: cacheNodeType)), duration: \(String(describing: duration)), fixedPrice: \(String(describing: fixedPrice)), offeringType: \(String(describing: offeringType)), productDescription: \(String(describing: productDescription)), recurringCharges: \(String(describing: recurringCharges)), reservationARN: \(String(describing: reservationARN)), reservedCacheNodeId: \(String(describing: reservedCacheNodeId)), reservedCacheNodesOfferingId: \(String(describing: reservedCacheNodesOfferingId)), startTime: \(String(describing: startTime)), state: \(String(describing: state)), usagePrice: \(String(describing: usagePrice)))"}
}

/// <p>Represents the output of a <code>PurchaseReservedCacheNodesOffering</code> operation.</p>
public struct ReservedCacheNode: Equatable {
    /// <p>The number of cache nodes that have been reserved.</p>
    public let cacheNodeCount: Int
    /// <p>The cache node type for the reserved cache nodes.</p>
    ///
    ///         <p>The following node types are supported by ElastiCache.
    /// 				Generally speaking, the current generation types provide more memory and computational power
    /// 			at lower cost when compared to their equivalent previous generation counterparts.</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>General purpose:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 					
    ///     						           <p>
    ///                         <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						               <p>	
    ///                         <code>cache.m6g.large</code>,
    /// 							<code>cache.m6g.xlarge</code>,
    /// 							<code>cache.m6g.2xlarge</code>,
    /// 							<code>cache.m6g.4xlarge</code>,
    /// 							<code>cache.m6g.8xlarge</code>,
    /// 							<code>cache.m6g.12xlarge</code>,
    /// 							<code>cache.m6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    ///     					
    ///     					
    ///     					            <p>
    ///                         <b>M5 node types:</b>
    ///     						              <code>cache.m5.large</code>,
    ///     						<code>cache.m5.xlarge</code>,
    ///     						<code>cache.m5.2xlarge</code>,
    ///     						<code>cache.m5.4xlarge</code>,
    ///     						<code>cache.m5.12xlarge</code>,
    ///     						<code>cache.m5.24xlarge</code>
    ///     						
    ///     						
    ///     						           </p>	
    ///     						
    /// 						
    /// 						               <p>
    ///                         <b>M4 node types:</b>
    ///     						              <code>cache.m4.large</code>,
    ///     						<code>cache.m4.xlarge</code>,
    ///     						<code>cache.m4.2xlarge</code>,
    ///     						<code>cache.m4.4xlarge</code>,
    ///     						<code>cache.m4.10xlarge</code>
    ///                      </p>
    ///     					            <p>
    ///                         <b>T3 node types:</b>
    /// 					                   <code>cache.t3.micro</code>,
    ///     						<code>cache.t3.small</code>,
    ///     						<code>cache.t3.medium</code>
    ///                      </p>
    ///     								
    ///     						
    ///     				             <p>
    ///                         <b>T2 node types:</b>
    /// 					                   <code>cache.t2.micro</code>,
    ///     						<code>cache.t2.small</code>,
    ///     						<code>cache.t2.medium</code>
    ///                      </p>
    ///     						
    ///     						
    ///     						
    ///     						
    ///     						        </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 						               <p>
    ///                         <b>T1 node types:</b>
    /// 					                   <code>cache.t1.micro</code>
    ///                      </p>
    /// 					
    /// 						               <p>
    ///                         <b>M1 node types:</b>
    /// 						                  <code>cache.m1.small</code>,
    /// 						   <code>cache.m1.medium</code>,
    /// 						   <code>cache.m1.large</code>,
    /// 						   <code>cache.m1.xlarge</code>
    ///                      </p>
    /// 						
    /// 						               <p>
    ///                         <b>M3 node types:</b>
    ///     						              <code>cache.m3.medium</code>,
    ///     						<code>cache.m3.large</code>,
    ///     						<code>cache.m3.xlarge</code>,
    ///     						<code>cache.m3.2xlarge</code>
    ///                      </p>
    /// 						
    /// 						            </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Compute optimized:</p>
    ///
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 			                  <p>
    ///                         <b>C1 node types:</b>
    /// 			                     <code>cache.c1.xlarge</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Memory optimized:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 											          <p>
    ///                         <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						
    /// 						
    /// 						
    /// 						
    /// 						               <p>	
    /// 							                 <code>cache.r6g.large</code>,
    /// 							<code>cache.r6g.xlarge</code>,
    /// 							<code>cache.r6g.2xlarge</code>,
    /// 							<code>cache.r6g.4xlarge</code>,
    /// 							<code>cache.r6g.8xlarge</code>,
    /// 							<code>cache.r6g.12xlarge</code>,
    /// 							<code>cache.r6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    /// 					                <p>
    ///                         <b>R5 node types:</b>
    ///     					               <code>cache.r5.large</code>,
    ///     					   <code>cache.r5.xlarge</code>,
    ///     					   <code>cache.r5.2xlarge</code>,
    ///     					   <code>cache.r5.4xlarge</code>,
    ///     					   <code>cache.r5.12xlarge</code>,
    ///     					   <code>cache.r5.24xlarge</code>
    ///                      </p>
    /// 						
    ///     					            <p>
    ///                         <b>R4 node types:</b>
    ///     					               <code>cache.r4.large</code>,
    ///     					   <code>cache.r4.xlarge</code>,
    ///     					   <code>cache.r4.2xlarge</code>,
    ///     					   <code>cache.r4.4xlarge</code>,
    ///     					   <code>cache.r4.8xlarge</code>,
    ///     					   <code>cache.r4.16xlarge</code>
    ///                      </p>
    ///     					
    ///     					
    ///     					
    ///
    ///
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					         </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    ///                         <p>
    ///                         <b>M2 node types:</b>						
    ///     					               <code>cache.m2.xlarge</code>,
    ///     						<code>cache.m2.2xlarge</code>,
    ///     						<code>cache.m2.4xlarge</code>
    ///                      </p>
    ///     						
    ///     						           <p>
    ///                         <b>R3 node types:</b>
    ///     					               <code>cache.r3.large</code>,
    ///     						<code>cache.r3.xlarge</code>,
    ///     						<code>cache.r3.2xlarge</code>,
    ///     						<code>cache.r3.4xlarge</code>,
    ///     						<code>cache.r3.8xlarge</code>
    ///                      </p>
    ///     						
    ///     						        </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    /// 				
    /// 		       <p>
    ///             <b>Additional node type info</b>
    ///          </p>
    /// 		       <ul>
    ///             <li>
    ///                <p>All current generation instance types are created in Amazon VPC by default.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis configuration variables <code>appendonly</code> and
    /// 				<code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p>
    ///             </li>
    ///          </ul>
    public let cacheNodeType: String?
    /// <p>The duration of the reservation in seconds.</p>
    public let duration: Int
    /// <p>The fixed price charged for this reserved cache node.</p>
    public let fixedPrice: Double
    /// <p>The offering type of this reserved cache node.</p>
    public let offeringType: String?
    /// <p>The description of the reserved cache node.</p>
    public let productDescription: String?
    /// <p>The recurring price charged to run this reserved cache node.</p>
    public let recurringCharges: [RecurringCharge]?
    /// <p>The Amazon Resource Name (ARN) of the reserved cache node.</p>
    ///         <p>Example: <code>arn:aws:elasticache:us-east-1:123456789012:reserved-instance:ri-2017-03-27-08-33-25-582</code>
    ///          </p>
    public let reservationARN: String?
    /// <p>The unique identifier for the reservation.</p>
    public let reservedCacheNodeId: String?
    /// <p>The offering identifier.</p>
    public let reservedCacheNodesOfferingId: String?
    /// <p>The time the reservation started.</p>
    public let startTime: Date?
    /// <p>The state of the reserved cache node.</p>
    public let state: String?
    /// <p>The hourly price charged for this reserved cache node.</p>
    public let usagePrice: Double

    public init (
        cacheNodeCount: Int = 0,
        cacheNodeType: String? = nil,
        duration: Int = 0,
        fixedPrice: Double = 0.0,
        offeringType: String? = nil,
        productDescription: String? = nil,
        recurringCharges: [RecurringCharge]? = nil,
        reservationARN: String? = nil,
        reservedCacheNodeId: String? = nil,
        reservedCacheNodesOfferingId: String? = nil,
        startTime: Date? = nil,
        state: String? = nil,
        usagePrice: Double = 0.0
    )
    {
        self.cacheNodeCount = cacheNodeCount
        self.cacheNodeType = cacheNodeType
        self.duration = duration
        self.fixedPrice = fixedPrice
        self.offeringType = offeringType
        self.productDescription = productDescription
        self.recurringCharges = recurringCharges
        self.reservationARN = reservationARN
        self.reservedCacheNodeId = reservedCacheNodeId
        self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
        self.startTime = startTime
        self.state = state
        self.usagePrice = usagePrice
    }
}

extension ReservedCacheNodeAlreadyExistsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReservedCacheNodeAlreadyExistsFault(message: \(String(describing: message)))"}
}

extension ReservedCacheNodeAlreadyExistsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ReservedCacheNodeAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You already have a reservation with the given identifier.</p>
public struct ReservedCacheNodeAlreadyExistsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ReservedCacheNodeAlreadyExistsFaultBody: Equatable {
    public let message: String?
}

extension ReservedCacheNodeAlreadyExistsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReservedCacheNodeNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReservedCacheNodeNotFoundFault(message: \(String(describing: message)))"}
}

extension ReservedCacheNodeNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ReservedCacheNodeNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested reserved cache node was not found.</p>
public struct ReservedCacheNodeNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ReservedCacheNodeNotFoundFaultBody: Equatable {
    public let message: String?
}

extension ReservedCacheNodeNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReservedCacheNodeQuotaExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReservedCacheNodeQuotaExceededFault(message: \(String(describing: message)))"}
}

extension ReservedCacheNodeQuotaExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ReservedCacheNodeQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request cannot be processed because it would exceed the user's cache node quota.</p>
public struct ReservedCacheNodeQuotaExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ReservedCacheNodeQuotaExceededFaultBody: Equatable {
    public let message: String?
}

extension ReservedCacheNodeQuotaExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReservedCacheNodesOffering: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheNodeType = "CacheNodeType"
        case duration = "Duration"
        case fixedPrice = "FixedPrice"
        case offeringType = "OfferingType"
        case productDescription = "ProductDescription"
        case recurringCharges = "RecurringCharges"
        case reservedCacheNodesOfferingId = "ReservedCacheNodesOfferingId"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if duration != 0 {
            try container.encode(duration, forKey: Key("Duration"))
        }
        if fixedPrice != 0.0 {
            try container.encode(String(fixedPrice), forKey: Key("FixedPrice"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: Key("OfferingType"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: Key("ProductDescription"))
        }
        if let recurringCharges = recurringCharges {
            var recurringChargesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("RecurringCharges"))
            for (index0, recurringcharge0) in recurringCharges.enumerated() {
                try recurringChargesContainer.encode(recurringcharge0, forKey: Key("RecurringCharge.\(index0.advanced(by: 1))"))
            }
        }
        if let reservedCacheNodesOfferingId = reservedCacheNodesOfferingId {
            try container.encode(reservedCacheNodesOfferingId, forKey: Key("ReservedCacheNodesOfferingId"))
        }
        if usagePrice != 0.0 {
            try container.encode(String(usagePrice), forKey: Key("UsagePrice"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedCacheNodesOfferingIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reservedCacheNodesOfferingId)
        reservedCacheNodesOfferingId = reservedCacheNodesOfferingIdDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let fixedPriceDecoded = try containerValues.decode(Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let usagePriceDecoded = try containerValues.decode(Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let productDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productDescription)
        productDescription = productDescriptionDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        if containerValues.contains(.recurringCharges) {
            struct KeyVal0{struct RecurringCharge{}}
            let recurringChargesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RecurringCharge>.CodingKeys.self, forKey: .recurringCharges)
            if let recurringChargesWrappedContainer = recurringChargesWrappedContainer {
                let recurringChargesContainer = try recurringChargesWrappedContainer.decodeIfPresent([RecurringCharge].self, forKey: .member)
                var recurringChargesBuffer:[RecurringCharge]? = nil
                if let recurringChargesContainer = recurringChargesContainer {
                    recurringChargesBuffer = [RecurringCharge]()
                    for structureContainer0 in recurringChargesContainer {
                        recurringChargesBuffer?.append(structureContainer0)
                    }
                }
                recurringCharges = recurringChargesBuffer
            } else {
                recurringCharges = []
            }
        } else {
            recurringCharges = nil
        }
    }
}

extension ReservedCacheNodesOffering: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReservedCacheNodesOffering(cacheNodeType: \(String(describing: cacheNodeType)), duration: \(String(describing: duration)), fixedPrice: \(String(describing: fixedPrice)), offeringType: \(String(describing: offeringType)), productDescription: \(String(describing: productDescription)), recurringCharges: \(String(describing: recurringCharges)), reservedCacheNodesOfferingId: \(String(describing: reservedCacheNodesOfferingId)), usagePrice: \(String(describing: usagePrice)))"}
}

/// <p>Describes all of the attributes of a reserved cache node offering.</p>
public struct ReservedCacheNodesOffering: Equatable {
    /// <p>The cache node type for the reserved cache node.</p>
    ///         <p>The following node types are supported by ElastiCache.
    /// 				Generally speaking, the current generation types provide more memory and computational power
    /// 			at lower cost when compared to their equivalent previous generation counterparts.</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>General purpose:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 					
    ///     						           <p>
    ///                         <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						               <p>	
    ///                         <code>cache.m6g.large</code>,
    /// 							<code>cache.m6g.xlarge</code>,
    /// 							<code>cache.m6g.2xlarge</code>,
    /// 							<code>cache.m6g.4xlarge</code>,
    /// 							<code>cache.m6g.8xlarge</code>,
    /// 							<code>cache.m6g.12xlarge</code>,
    /// 							<code>cache.m6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    ///     					
    ///     					
    ///     					            <p>
    ///                         <b>M5 node types:</b>
    ///     						              <code>cache.m5.large</code>,
    ///     						<code>cache.m5.xlarge</code>,
    ///     						<code>cache.m5.2xlarge</code>,
    ///     						<code>cache.m5.4xlarge</code>,
    ///     						<code>cache.m5.12xlarge</code>,
    ///     						<code>cache.m5.24xlarge</code>
    ///     						
    ///     						
    ///     						           </p>	
    ///     						
    /// 						
    /// 						               <p>
    ///                         <b>M4 node types:</b>
    ///     						              <code>cache.m4.large</code>,
    ///     						<code>cache.m4.xlarge</code>,
    ///     						<code>cache.m4.2xlarge</code>,
    ///     						<code>cache.m4.4xlarge</code>,
    ///     						<code>cache.m4.10xlarge</code>
    ///                      </p>
    ///     					            <p>
    ///                         <b>T3 node types:</b>
    /// 					                   <code>cache.t3.micro</code>,
    ///     						<code>cache.t3.small</code>,
    ///     						<code>cache.t3.medium</code>
    ///                      </p>
    ///     								
    ///     						
    ///     				             <p>
    ///                         <b>T2 node types:</b>
    /// 					                   <code>cache.t2.micro</code>,
    ///     						<code>cache.t2.small</code>,
    ///     						<code>cache.t2.medium</code>
    ///                      </p>
    ///     						
    ///     						
    ///     						
    ///     						
    ///     						        </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 						               <p>
    ///                         <b>T1 node types:</b>
    /// 					                   <code>cache.t1.micro</code>
    ///                      </p>
    /// 					
    /// 						               <p>
    ///                         <b>M1 node types:</b>
    /// 						                  <code>cache.m1.small</code>,
    /// 						   <code>cache.m1.medium</code>,
    /// 						   <code>cache.m1.large</code>,
    /// 						   <code>cache.m1.xlarge</code>
    ///                      </p>
    /// 						
    /// 						               <p>
    ///                         <b>M3 node types:</b>
    ///     						              <code>cache.m3.medium</code>,
    ///     						<code>cache.m3.large</code>,
    ///     						<code>cache.m3.xlarge</code>,
    ///     						<code>cache.m3.2xlarge</code>
    ///                      </p>
    /// 						
    /// 						            </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Compute optimized:</p>
    ///
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 			                  <p>
    ///                         <b>C1 node types:</b>
    /// 			                     <code>cache.c1.xlarge</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Memory optimized:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 											          <p>
    ///                         <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						
    /// 						
    /// 						
    /// 						
    /// 						               <p>	
    /// 							                 <code>cache.r6g.large</code>,
    /// 							<code>cache.r6g.xlarge</code>,
    /// 							<code>cache.r6g.2xlarge</code>,
    /// 							<code>cache.r6g.4xlarge</code>,
    /// 							<code>cache.r6g.8xlarge</code>,
    /// 							<code>cache.r6g.12xlarge</code>,
    /// 							<code>cache.r6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    /// 					                <p>
    ///                         <b>R5 node types:</b>
    ///     					               <code>cache.r5.large</code>,
    ///     					   <code>cache.r5.xlarge</code>,
    ///     					   <code>cache.r5.2xlarge</code>,
    ///     					   <code>cache.r5.4xlarge</code>,
    ///     					   <code>cache.r5.12xlarge</code>,
    ///     					   <code>cache.r5.24xlarge</code>
    ///                      </p>
    /// 						
    ///     					            <p>
    ///                         <b>R4 node types:</b>
    ///     					               <code>cache.r4.large</code>,
    ///     					   <code>cache.r4.xlarge</code>,
    ///     					   <code>cache.r4.2xlarge</code>,
    ///     					   <code>cache.r4.4xlarge</code>,
    ///     					   <code>cache.r4.8xlarge</code>,
    ///     					   <code>cache.r4.16xlarge</code>
    ///                      </p>
    ///     					
    ///     					
    ///     					
    ///
    ///
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					         </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    ///                         <p>
    ///                         <b>M2 node types:</b>						
    ///     					               <code>cache.m2.xlarge</code>,
    ///     						<code>cache.m2.2xlarge</code>,
    ///     						<code>cache.m2.4xlarge</code>
    ///                      </p>
    ///     						
    ///     						           <p>
    ///                         <b>R3 node types:</b>
    ///     					               <code>cache.r3.large</code>,
    ///     						<code>cache.r3.xlarge</code>,
    ///     						<code>cache.r3.2xlarge</code>,
    ///     						<code>cache.r3.4xlarge</code>,
    ///     						<code>cache.r3.8xlarge</code>
    ///                      </p>
    ///     						
    ///     						        </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    /// 				
    /// 		       <p>
    ///             <b>Additional node type info</b>
    ///          </p>
    /// 		       <ul>
    ///             <li>
    ///                <p>All current generation instance types are created in Amazon VPC by default.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis configuration variables <code>appendonly</code> and
    /// 				<code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p>
    ///             </li>
    ///          </ul>
    public let cacheNodeType: String?
    /// <p>The duration of the offering. in seconds.</p>
    public let duration: Int
    /// <p>The fixed price charged for this offering.</p>
    public let fixedPrice: Double
    /// <p>The offering type.</p>
    public let offeringType: String?
    /// <p>The cache engine used by the offering.</p>
    public let productDescription: String?
    /// <p>The recurring price charged to run this reserved cache node.</p>
    public let recurringCharges: [RecurringCharge]?
    /// <p>A unique identifier for the reserved cache node offering.</p>
    public let reservedCacheNodesOfferingId: String?
    /// <p>The hourly price charged for this offering.</p>
    public let usagePrice: Double

    public init (
        cacheNodeType: String? = nil,
        duration: Int = 0,
        fixedPrice: Double = 0.0,
        offeringType: String? = nil,
        productDescription: String? = nil,
        recurringCharges: [RecurringCharge]? = nil,
        reservedCacheNodesOfferingId: String? = nil,
        usagePrice: Double = 0.0
    )
    {
        self.cacheNodeType = cacheNodeType
        self.duration = duration
        self.fixedPrice = fixedPrice
        self.offeringType = offeringType
        self.productDescription = productDescription
        self.recurringCharges = recurringCharges
        self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
        self.usagePrice = usagePrice
    }
}

extension ReservedCacheNodesOfferingNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReservedCacheNodesOfferingNotFoundFault(message: \(String(describing: message)))"}
}

extension ReservedCacheNodesOfferingNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ReservedCacheNodesOfferingNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested cache node offering does not exist.</p>
public struct ReservedCacheNodesOfferingNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ReservedCacheNodesOfferingNotFoundFaultBody: Equatable {
    public let message: String?
}

extension ReservedCacheNodesOfferingNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ResetCacheParameterGroupInputBodyMiddleware: Middleware {
    public let id: String = "ResetCacheParameterGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResetCacheParameterGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ResetCacheParameterGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResetCacheParameterGroupInput>
    public typealias MOutput = OperationOutput<ResetCacheParameterGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResetCacheParameterGroupOutputError>
}

extension ResetCacheParameterGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResetCacheParameterGroupInput(cacheParameterGroupName: \(String(describing: cacheParameterGroupName)), parameterNameValues: \(String(describing: parameterNameValues)), resetAllParameters: \(String(describing: resetAllParameters)))"}
}

extension ResetCacheParameterGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let parameterNameValues = parameterNameValues {
            var parameterNameValuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ParameterNameValues"))
            for (index0, parameternamevalue0) in parameterNameValues.enumerated() {
                try parameterNameValuesContainer.encode(parameternamevalue0, forKey: Key("ParameterNameValue.\(index0.advanced(by: 1))"))
            }
        }
        if resetAllParameters != false {
            try container.encode(resetAllParameters, forKey: Key("ResetAllParameters"))
        }
        try container.encode("ResetCacheParameterGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct ResetCacheParameterGroupInputHeadersMiddleware: Middleware {
    public let id: String = "ResetCacheParameterGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResetCacheParameterGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ResetCacheParameterGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResetCacheParameterGroupInput>
    public typealias MOutput = OperationOutput<ResetCacheParameterGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResetCacheParameterGroupOutputError>
}

public struct ResetCacheParameterGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "ResetCacheParameterGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResetCacheParameterGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ResetCacheParameterGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResetCacheParameterGroupInput>
    public typealias MOutput = OperationOutput<ResetCacheParameterGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResetCacheParameterGroupOutputError>
}

/// <p>Represents the input of a <code>ResetCacheParameterGroup</code> operation.</p>
public struct ResetCacheParameterGroupInput: Equatable {
    /// <p>The name of the cache parameter group to reset.</p>
    public let cacheParameterGroupName: String?
    /// <p>An array of parameter names to reset to their default values.
    ///             If <code>ResetAllParameters</code> is <code>true</code>,
    ///             do not use <code>ParameterNameValues</code>.
    ///             If <code>ResetAllParameters</code> is <code>false</code>,
    ///             you must specify the name of at least one parameter to reset.</p>
    public let parameterNameValues: [ParameterNameValue]?
    /// <p>If <code>true</code>,
    ///             all parameters in the cache parameter group are reset to their default values.
    ///             If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code>
    ///             are reset to their default values.</p>
    ///         <p>Valid values: <code>true</code> | <code>false</code>
    ///          </p>
    public let resetAllParameters: Bool

    public init (
        cacheParameterGroupName: String? = nil,
        parameterNameValues: [ParameterNameValue]? = nil,
        resetAllParameters: Bool = false
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
        self.parameterNameValues = parameterNameValues
        self.resetAllParameters = resetAllParameters
    }
}

extension ResetCacheParameterGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ResetCacheParameterGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CacheParameterGroupNotFoundFault" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheParameterGroupStateFault" : self = .invalidCacheParameterGroupStateFault(try InvalidCacheParameterGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupStateFault" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ResetCacheParameterGroupOutputError: Equatable {
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case invalidCacheParameterGroupStateFault(InvalidCacheParameterGroupStateFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResetCacheParameterGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResetCacheParameterGroupOutputResponse(cacheParameterGroupName: \(String(describing: cacheParameterGroupName)))"}
}

extension ResetCacheParameterGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResetCacheParameterGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheParameterGroupName = output.cacheParameterGroupName
        } else {
            self.cacheParameterGroupName = nil
        }
    }
}

/// <p>Represents the output of one of the following operations:</p>
///         <ul>
///             <li>
///                <p>
///                   <code>ModifyCacheParameterGroup</code>
///                </p>
///             </li>
///             <li>
///                <p>
///                   <code>ResetCacheParameterGroup</code>
///                </p>
///             </li>
///          </ul>
public struct ResetCacheParameterGroupOutputResponse: Equatable {
    /// <p>The name of the cache parameter group.</p>
    public let cacheParameterGroupName: String?

    public init (
        cacheParameterGroupName: String? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
    }
}

struct ResetCacheParameterGroupOutputResponseBody: Equatable {
    public let cacheParameterGroupName: String?
}

extension ResetCacheParameterGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheParameterGroupName = "CacheParameterGroupName"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ResetCacheParameterGroupResult"))
        let cacheParameterGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheParameterGroupName)
        cacheParameterGroupName = cacheParameterGroupNameDecoded
    }
}

extension ReshardingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nodeGroupId = "NodeGroupId"
        case preferredAvailabilityZones = "PreferredAvailabilityZones"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: Key("NodeGroupId"))
        }
        if let preferredAvailabilityZones = preferredAvailabilityZones {
            var preferredAvailabilityZonesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PreferredAvailabilityZones"))
            for (index0, string0) in preferredAvailabilityZones.enumerated() {
                try preferredAvailabilityZonesContainer.encode(string0, forKey: Key("AvailabilityZone.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        if containerValues.contains(.preferredAvailabilityZones) {
            struct KeyVal0{struct AvailabilityZone{}}
            let preferredAvailabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AvailabilityZone>.CodingKeys.self, forKey: .preferredAvailabilityZones)
            if let preferredAvailabilityZonesWrappedContainer = preferredAvailabilityZonesWrappedContainer {
                let preferredAvailabilityZonesContainer = try preferredAvailabilityZonesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var preferredAvailabilityZonesBuffer:[String]? = nil
                if let preferredAvailabilityZonesContainer = preferredAvailabilityZonesContainer {
                    preferredAvailabilityZonesBuffer = [String]()
                    for stringContainer0 in preferredAvailabilityZonesContainer {
                        preferredAvailabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                preferredAvailabilityZones = preferredAvailabilityZonesBuffer
            } else {
                preferredAvailabilityZones = []
            }
        } else {
            preferredAvailabilityZones = nil
        }
    }
}

extension ReshardingConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReshardingConfiguration(nodeGroupId: \(String(describing: nodeGroupId)), preferredAvailabilityZones: \(String(describing: preferredAvailabilityZones)))"}
}

/// <p>A list of <code>PreferredAvailabilityZones</code> objects that specifies
///             the configuration of a node group in the resharded cluster.</p>
public struct ReshardingConfiguration: Equatable {
    /// <p>Either the ElastiCache for Redis supplied 4-digit id or a user supplied id for the node group these
    ///             configuration values apply to.</p>
    public let nodeGroupId: String?
    /// <p>A list of preferred availability zones for the nodes in this cluster.</p>
    public let preferredAvailabilityZones: [String]?

    public init (
        nodeGroupId: String? = nil,
        preferredAvailabilityZones: [String]? = nil
    )
    {
        self.nodeGroupId = nodeGroupId
        self.preferredAvailabilityZones = preferredAvailabilityZones
    }
}

extension ReshardingStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case slotMigration = "SlotMigration"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let slotMigration = slotMigration {
            try container.encode(slotMigration, forKey: Key("SlotMigration"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let slotMigrationDecoded = try containerValues.decodeIfPresent(SlotMigration.self, forKey: .slotMigration)
        slotMigration = slotMigrationDecoded
    }
}

extension ReshardingStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReshardingStatus(slotMigration: \(String(describing: slotMigration)))"}
}

/// <p>The status of an online resharding operation.</p>
public struct ReshardingStatus: Equatable {
    /// <p>Represents the progress of an online resharding operation.</p>
    public let slotMigration: SlotMigration?

    public init (
        slotMigration: SlotMigration? = nil
    )
    {
        self.slotMigration = slotMigration
    }
}

public struct RevokeCacheSecurityGroupIngressInputBodyMiddleware: Middleware {
    public let id: String = "RevokeCacheSecurityGroupIngressInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RevokeCacheSecurityGroupIngressInput>,
                  next: H) -> Swift.Result<OperationOutput<RevokeCacheSecurityGroupIngressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RevokeCacheSecurityGroupIngressInput>
    public typealias MOutput = OperationOutput<RevokeCacheSecurityGroupIngressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RevokeCacheSecurityGroupIngressOutputError>
}

extension RevokeCacheSecurityGroupIngressInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RevokeCacheSecurityGroupIngressInput(cacheSecurityGroupName: \(String(describing: cacheSecurityGroupName)), eC2SecurityGroupName: \(String(describing: eC2SecurityGroupName)), eC2SecurityGroupOwnerId: \(String(describing: eC2SecurityGroupOwnerId)))"}
}

extension RevokeCacheSecurityGroupIngressInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheSecurityGroupName = cacheSecurityGroupName {
            try container.encode(cacheSecurityGroupName, forKey: Key("CacheSecurityGroupName"))
        }
        if let eC2SecurityGroupName = eC2SecurityGroupName {
            try container.encode(eC2SecurityGroupName, forKey: Key("EC2SecurityGroupName"))
        }
        if let eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId {
            try container.encode(eC2SecurityGroupOwnerId, forKey: Key("EC2SecurityGroupOwnerId"))
        }
        try container.encode("RevokeCacheSecurityGroupIngress", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct RevokeCacheSecurityGroupIngressInputHeadersMiddleware: Middleware {
    public let id: String = "RevokeCacheSecurityGroupIngressInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RevokeCacheSecurityGroupIngressInput>,
                  next: H) -> Swift.Result<OperationOutput<RevokeCacheSecurityGroupIngressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RevokeCacheSecurityGroupIngressInput>
    public typealias MOutput = OperationOutput<RevokeCacheSecurityGroupIngressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RevokeCacheSecurityGroupIngressOutputError>
}

public struct RevokeCacheSecurityGroupIngressInputQueryItemMiddleware: Middleware {
    public let id: String = "RevokeCacheSecurityGroupIngressInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RevokeCacheSecurityGroupIngressInput>,
                  next: H) -> Swift.Result<OperationOutput<RevokeCacheSecurityGroupIngressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RevokeCacheSecurityGroupIngressInput>
    public typealias MOutput = OperationOutput<RevokeCacheSecurityGroupIngressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RevokeCacheSecurityGroupIngressOutputError>
}

/// <p>Represents the input of a <code>RevokeCacheSecurityGroupIngress</code> operation.</p>
public struct RevokeCacheSecurityGroupIngressInput: Equatable {
    /// <p>The name of the cache security group to revoke ingress from.</p>
    public let cacheSecurityGroupName: String?
    /// <p>The name of the Amazon EC2 security group to revoke access from.</p>
    public let eC2SecurityGroupName: String?
    /// <p>The AWS account number of the Amazon EC2 security group owner.
    ///             Note that this is not the same thing as an AWS access key ID - you must provide
    ///             a valid AWS account number for this parameter.</p>
    public let eC2SecurityGroupOwnerId: String?

    public init (
        cacheSecurityGroupName: String? = nil,
        eC2SecurityGroupName: String? = nil,
        eC2SecurityGroupOwnerId: String? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
        self.eC2SecurityGroupName = eC2SecurityGroupName
        self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
    }
}

extension RevokeCacheSecurityGroupIngressOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RevokeCacheSecurityGroupIngressOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AuthorizationNotFoundFault" : self = .authorizationNotFoundFault(try AuthorizationNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFoundFault" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheSecurityGroupStateFault" : self = .invalidCacheSecurityGroupStateFault(try InvalidCacheSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RevokeCacheSecurityGroupIngressOutputError: Equatable {
    case authorizationNotFoundFault(AuthorizationNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case invalidCacheSecurityGroupStateFault(InvalidCacheSecurityGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RevokeCacheSecurityGroupIngressOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RevokeCacheSecurityGroupIngressOutputResponse(cacheSecurityGroup: \(String(describing: cacheSecurityGroup)))"}
}

extension RevokeCacheSecurityGroupIngressOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RevokeCacheSecurityGroupIngressOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cacheSecurityGroup = output.cacheSecurityGroup
        } else {
            self.cacheSecurityGroup = nil
        }
    }
}

public struct RevokeCacheSecurityGroupIngressOutputResponse: Equatable {
    /// <p>Represents the output of one of the following operations:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>AuthorizeCacheSecurityGroupIngress</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CreateCacheSecurityGroup</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RevokeCacheSecurityGroupIngress</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let cacheSecurityGroup: CacheSecurityGroup?

    public init (
        cacheSecurityGroup: CacheSecurityGroup? = nil
    )
    {
        self.cacheSecurityGroup = cacheSecurityGroup
    }
}

struct RevokeCacheSecurityGroupIngressOutputResponseBody: Equatable {
    public let cacheSecurityGroup: CacheSecurityGroup?
}

extension RevokeCacheSecurityGroupIngressOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheSecurityGroup = "CacheSecurityGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("RevokeCacheSecurityGroupIngressResult"))
        let cacheSecurityGroupDecoded = try containerValues.decodeIfPresent(CacheSecurityGroup.self, forKey: .cacheSecurityGroup)
        cacheSecurityGroup = cacheSecurityGroupDecoded
    }
}

extension SecurityGroupMembership: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case securityGroupId = "SecurityGroupId"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let securityGroupId = securityGroupId {
            try container.encode(securityGroupId, forKey: Key("SecurityGroupId"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityGroupId)
        securityGroupId = securityGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityGroupMembership: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SecurityGroupMembership(securityGroupId: \(String(describing: securityGroupId)), status: \(String(describing: status)))"}
}

/// <p>Represents a single cache security group and its status.</p>
public struct SecurityGroupMembership: Equatable {
    /// <p>The identifier of the cache security group.</p>
    public let securityGroupId: String?
    /// <p>The status of the cache security group membership.
    ///             The status changes whenever a cache security group is modified,
    ///             or when the cache security groups assigned to a cluster are modified.</p>
    public let status: String?

    public init (
        securityGroupId: String? = nil,
        status: String? = nil
    )
    {
        self.securityGroupId = securityGroupId
        self.status = status
    }
}

extension ServiceLinkedRoleNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ServiceLinkedRoleNotFoundFault(message: \(String(describing: message)))"}
}

extension ServiceLinkedRoleNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ServiceLinkedRoleNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified service linked role (SLR) was not found.</p>
public struct ServiceLinkedRoleNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceLinkedRoleNotFoundFaultBody: Equatable {
    public let message: String?
}

extension ServiceLinkedRoleNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ServiceUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoUpdateAfterRecommendedApplyByDate = "AutoUpdateAfterRecommendedApplyByDate"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case estimatedUpdateTime = "EstimatedUpdateTime"
        case serviceUpdateDescription = "ServiceUpdateDescription"
        case serviceUpdateEndDate = "ServiceUpdateEndDate"
        case serviceUpdateName = "ServiceUpdateName"
        case serviceUpdateRecommendedApplyByDate = "ServiceUpdateRecommendedApplyByDate"
        case serviceUpdateReleaseDate = "ServiceUpdateReleaseDate"
        case serviceUpdateSeverity = "ServiceUpdateSeverity"
        case serviceUpdateStatus = "ServiceUpdateStatus"
        case serviceUpdateType = "ServiceUpdateType"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoUpdateAfterRecommendedApplyByDate = autoUpdateAfterRecommendedApplyByDate {
            try container.encode(autoUpdateAfterRecommendedApplyByDate, forKey: Key("AutoUpdateAfterRecommendedApplyByDate"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let estimatedUpdateTime = estimatedUpdateTime {
            try container.encode(estimatedUpdateTime, forKey: Key("EstimatedUpdateTime"))
        }
        if let serviceUpdateDescription = serviceUpdateDescription {
            try container.encode(serviceUpdateDescription, forKey: Key("ServiceUpdateDescription"))
        }
        if let serviceUpdateEndDate = serviceUpdateEndDate {
            try container.encode(TimestampWrapper(serviceUpdateEndDate, format: .dateTime), forKey: Key("serviceUpdateEndDate"))
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: Key("ServiceUpdateName"))
        }
        if let serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDate {
            try container.encode(TimestampWrapper(serviceUpdateRecommendedApplyByDate, format: .dateTime), forKey: Key("serviceUpdateRecommendedApplyByDate"))
        }
        if let serviceUpdateReleaseDate = serviceUpdateReleaseDate {
            try container.encode(TimestampWrapper(serviceUpdateReleaseDate, format: .dateTime), forKey: Key("serviceUpdateReleaseDate"))
        }
        if let serviceUpdateSeverity = serviceUpdateSeverity {
            try container.encode(serviceUpdateSeverity, forKey: Key("ServiceUpdateSeverity"))
        }
        if let serviceUpdateStatus = serviceUpdateStatus {
            try container.encode(serviceUpdateStatus, forKey: Key("ServiceUpdateStatus"))
        }
        if let serviceUpdateType = serviceUpdateType {
            try container.encode(serviceUpdateType, forKey: Key("ServiceUpdateType"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceUpdateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateName)
        serviceUpdateName = serviceUpdateNameDecoded
        let serviceUpdateReleaseDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateReleaseDate)
        var serviceUpdateReleaseDateBuffer:Date? = nil
        if let serviceUpdateReleaseDateDecoded = serviceUpdateReleaseDateDecoded {
            serviceUpdateReleaseDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(serviceUpdateReleaseDateDecoded, format: .dateTime)
        }
        serviceUpdateReleaseDate = serviceUpdateReleaseDateBuffer
        let serviceUpdateEndDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateEndDate)
        var serviceUpdateEndDateBuffer:Date? = nil
        if let serviceUpdateEndDateDecoded = serviceUpdateEndDateDecoded {
            serviceUpdateEndDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(serviceUpdateEndDateDecoded, format: .dateTime)
        }
        serviceUpdateEndDate = serviceUpdateEndDateBuffer
        let serviceUpdateSeverityDecoded = try containerValues.decodeIfPresent(ServiceUpdateSeverity.self, forKey: .serviceUpdateSeverity)
        serviceUpdateSeverity = serviceUpdateSeverityDecoded
        let serviceUpdateRecommendedApplyByDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateRecommendedApplyByDate)
        var serviceUpdateRecommendedApplyByDateBuffer:Date? = nil
        if let serviceUpdateRecommendedApplyByDateDecoded = serviceUpdateRecommendedApplyByDateDecoded {
            serviceUpdateRecommendedApplyByDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(serviceUpdateRecommendedApplyByDateDecoded, format: .dateTime)
        }
        serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDateBuffer
        let serviceUpdateStatusDecoded = try containerValues.decodeIfPresent(ServiceUpdateStatus.self, forKey: .serviceUpdateStatus)
        serviceUpdateStatus = serviceUpdateStatusDecoded
        let serviceUpdateDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateDescription)
        serviceUpdateDescription = serviceUpdateDescriptionDecoded
        let serviceUpdateTypeDecoded = try containerValues.decodeIfPresent(ServiceUpdateType.self, forKey: .serviceUpdateType)
        serviceUpdateType = serviceUpdateTypeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let autoUpdateAfterRecommendedApplyByDateDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .autoUpdateAfterRecommendedApplyByDate)
        autoUpdateAfterRecommendedApplyByDate = autoUpdateAfterRecommendedApplyByDateDecoded
        let estimatedUpdateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .estimatedUpdateTime)
        estimatedUpdateTime = estimatedUpdateTimeDecoded
    }
}

extension ServiceUpdate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ServiceUpdate(autoUpdateAfterRecommendedApplyByDate: \(String(describing: autoUpdateAfterRecommendedApplyByDate)), engine: \(String(describing: engine)), engineVersion: \(String(describing: engineVersion)), estimatedUpdateTime: \(String(describing: estimatedUpdateTime)), serviceUpdateDescription: \(String(describing: serviceUpdateDescription)), serviceUpdateEndDate: \(String(describing: serviceUpdateEndDate)), serviceUpdateName: \(String(describing: serviceUpdateName)), serviceUpdateRecommendedApplyByDate: \(String(describing: serviceUpdateRecommendedApplyByDate)), serviceUpdateReleaseDate: \(String(describing: serviceUpdateReleaseDate)), serviceUpdateSeverity: \(String(describing: serviceUpdateSeverity)), serviceUpdateStatus: \(String(describing: serviceUpdateStatus)), serviceUpdateType: \(String(describing: serviceUpdateType)))"}
}

/// <p>An update that you can apply to your Redis clusters.</p>
public struct ServiceUpdate: Equatable {
    /// <p>Indicates whether the service update will be automatically applied once the recommended apply-by date has expired. </p>
    public let autoUpdateAfterRecommendedApplyByDate: Bool?
    /// <p>The Elasticache engine to which the update applies. Either Redis or Memcached</p>
    public let engine: String?
    /// <p>The Elasticache engine version to which the update applies. Either Redis or Memcached engine version</p>
    public let engineVersion: String?
    /// <p>The estimated length of time the service update will take</p>
    public let estimatedUpdateTime: String?
    /// <p>Provides details of the service update</p>
    public let serviceUpdateDescription: String?
    /// <p>The date after which the service update is no longer available</p>
    public let serviceUpdateEndDate: Date?
    /// <p>The unique ID of the service update</p>
    public let serviceUpdateName: String?
    /// <p>The recommendend date to apply the service update in order to ensure compliance. For information on compliance, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/elasticache-compliance.html#elasticache-compliance-self-service">Self-Service Security Updates for Compliance</a>.</p>
    public let serviceUpdateRecommendedApplyByDate: Date?
    /// <p>The date when the service update is initially available</p>
    public let serviceUpdateReleaseDate: Date?
    /// <p>The severity of the service update</p>
    public let serviceUpdateSeverity: ServiceUpdateSeverity?
    /// <p>The status of the service update</p>
    public let serviceUpdateStatus: ServiceUpdateStatus?
    /// <p>Reflects the nature of the service update</p>
    public let serviceUpdateType: ServiceUpdateType?

    public init (
        autoUpdateAfterRecommendedApplyByDate: Bool? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        estimatedUpdateTime: String? = nil,
        serviceUpdateDescription: String? = nil,
        serviceUpdateEndDate: Date? = nil,
        serviceUpdateName: String? = nil,
        serviceUpdateRecommendedApplyByDate: Date? = nil,
        serviceUpdateReleaseDate: Date? = nil,
        serviceUpdateSeverity: ServiceUpdateSeverity? = nil,
        serviceUpdateStatus: ServiceUpdateStatus? = nil,
        serviceUpdateType: ServiceUpdateType? = nil
    )
    {
        self.autoUpdateAfterRecommendedApplyByDate = autoUpdateAfterRecommendedApplyByDate
        self.engine = engine
        self.engineVersion = engineVersion
        self.estimatedUpdateTime = estimatedUpdateTime
        self.serviceUpdateDescription = serviceUpdateDescription
        self.serviceUpdateEndDate = serviceUpdateEndDate
        self.serviceUpdateName = serviceUpdateName
        self.serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDate
        self.serviceUpdateReleaseDate = serviceUpdateReleaseDate
        self.serviceUpdateSeverity = serviceUpdateSeverity
        self.serviceUpdateStatus = serviceUpdateStatus
        self.serviceUpdateType = serviceUpdateType
    }
}

extension ServiceUpdateNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ServiceUpdateNotFoundFault(message: \(String(describing: message)))"}
}

extension ServiceUpdateNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ServiceUpdateNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The service update doesn't exist</p>
public struct ServiceUpdateNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceUpdateNotFoundFaultBody: Equatable {
    public let message: String?
}

extension ServiceUpdateNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum ServiceUpdateSeverity {
    case critical
    case important
    case low
    case medium
    case sdkUnknown(String)
}

extension ServiceUpdateSeverity : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ServiceUpdateSeverity] {
        return [
            .critical,
            .important,
            .low,
            .medium,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .critical: return "critical"
        case .important: return "important"
        case .low: return "low"
        case .medium: return "medium"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ServiceUpdateSeverity(rawValue: rawValue) ?? ServiceUpdateSeverity.sdkUnknown(rawValue)
    }
}

public enum ServiceUpdateStatus {
    case available
    case cancelled
    case expired
    case sdkUnknown(String)
}

extension ServiceUpdateStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ServiceUpdateStatus] {
        return [
            .available,
            .cancelled,
            .expired,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .available: return "available"
        case .cancelled: return "cancelled"
        case .expired: return "expired"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ServiceUpdateStatus(rawValue: rawValue) ?? ServiceUpdateStatus.sdkUnknown(rawValue)
    }
}

public enum ServiceUpdateType {
    case securityUpdate
    case sdkUnknown(String)
}

extension ServiceUpdateType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ServiceUpdateType] {
        return [
            .securityUpdate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .securityUpdate: return "security-update"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ServiceUpdateType(rawValue: rawValue) ?? ServiceUpdateType.sdkUnknown(rawValue)
    }
}

public enum SlaMet {
    case na
    case no
    case yes
    case sdkUnknown(String)
}

extension SlaMet : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SlaMet] {
        return [
            .na,
            .no,
            .yes,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .na: return "n/a"
        case .no: return "no"
        case .yes: return "yes"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SlaMet(rawValue: rawValue) ?? SlaMet.sdkUnknown(rawValue)
    }
}

extension SlotMigration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case progressPercentage = "ProgressPercentage"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if progressPercentage != 0.0 {
            try container.encode(String(progressPercentage), forKey: Key("ProgressPercentage"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let progressPercentageDecoded = try containerValues.decode(Double.self, forKey: .progressPercentage)
        progressPercentage = progressPercentageDecoded
    }
}

extension SlotMigration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SlotMigration(progressPercentage: \(String(describing: progressPercentage)))"}
}

/// <p>Represents the progress of an online resharding operation.</p>
public struct SlotMigration: Equatable {
    /// <p>The percentage of the slot migration that is complete.</p>
    public let progressPercentage: Double

    public init (
        progressPercentage: Double = 0.0
    )
    {
        self.progressPercentage = progressPercentage
    }
}

extension Snapshot: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case automaticFailover = "AutomaticFailover"
        case cacheClusterCreateTime = "CacheClusterCreateTime"
        case cacheClusterId = "CacheClusterId"
        case cacheNodeType = "CacheNodeType"
        case cacheParameterGroupName = "CacheParameterGroupName"
        case cacheSubnetGroupName = "CacheSubnetGroupName"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case kmsKeyId = "KmsKeyId"
        case nodeSnapshots = "NodeSnapshots"
        case numCacheNodes = "NumCacheNodes"
        case numNodeGroups = "NumNodeGroups"
        case port = "Port"
        case preferredAvailabilityZone = "PreferredAvailabilityZone"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case preferredOutpostArn = "PreferredOutpostArn"
        case replicationGroupDescription = "ReplicationGroupDescription"
        case replicationGroupId = "ReplicationGroupId"
        case snapshotName = "SnapshotName"
        case snapshotRetentionLimit = "SnapshotRetentionLimit"
        case snapshotSource = "SnapshotSource"
        case snapshotStatus = "SnapshotStatus"
        case snapshotWindow = "SnapshotWindow"
        case topicArn = "TopicArn"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: Key("ARN"))
        }
        if autoMinorVersionUpgrade != false {
            try container.encode(autoMinorVersionUpgrade, forKey: Key("AutoMinorVersionUpgrade"))
        }
        if let automaticFailover = automaticFailover {
            try container.encode(automaticFailover, forKey: Key("AutomaticFailover"))
        }
        if let cacheClusterCreateTime = cacheClusterCreateTime {
            try container.encode(TimestampWrapper(cacheClusterCreateTime, format: .dateTime), forKey: Key("cacheClusterCreateTime"))
        }
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: Key("CacheSubnetGroupName"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: Key("KmsKeyId"))
        }
        if let nodeSnapshots = nodeSnapshots {
            var nodeSnapshotsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NodeSnapshots"))
            for (index0, nodesnapshot0) in nodeSnapshots.enumerated() {
                try nodeSnapshotsContainer.encode(nodesnapshot0, forKey: Key("NodeSnapshot.\(index0.advanced(by: 1))"))
            }
        }
        if let numCacheNodes = numCacheNodes {
            try container.encode(numCacheNodes, forKey: Key("NumCacheNodes"))
        }
        if let numNodeGroups = numNodeGroups {
            try container.encode(numNodeGroups, forKey: Key("NumNodeGroups"))
        }
        if let port = port {
            try container.encode(port, forKey: Key("Port"))
        }
        if let preferredAvailabilityZone = preferredAvailabilityZone {
            try container.encode(preferredAvailabilityZone, forKey: Key("PreferredAvailabilityZone"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: Key("PreferredMaintenanceWindow"))
        }
        if let preferredOutpostArn = preferredOutpostArn {
            try container.encode(preferredOutpostArn, forKey: Key("PreferredOutpostArn"))
        }
        if let replicationGroupDescription = replicationGroupDescription {
            try container.encode(replicationGroupDescription, forKey: Key("ReplicationGroupDescription"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let snapshotName = snapshotName {
            try container.encode(snapshotName, forKey: Key("SnapshotName"))
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: Key("SnapshotRetentionLimit"))
        }
        if let snapshotSource = snapshotSource {
            try container.encode(snapshotSource, forKey: Key("SnapshotSource"))
        }
        if let snapshotStatus = snapshotStatus {
            try container.encode(snapshotStatus, forKey: Key("SnapshotStatus"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: Key("SnapshotWindow"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: Key("TopicArn"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: Key("VpcId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotName)
        snapshotName = snapshotNameDecoded
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let replicationGroupDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationGroupDescription)
        replicationGroupDescription = replicationGroupDescriptionDecoded
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let snapshotStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotStatus)
        snapshotStatus = snapshotStatusDecoded
        let snapshotSourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotSource)
        snapshotSource = snapshotSourceDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let numCacheNodesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numCacheNodes)
        numCacheNodes = numCacheNodesDecoded
        let preferredAvailabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredAvailabilityZone)
        preferredAvailabilityZone = preferredAvailabilityZoneDecoded
        let preferredOutpostArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredOutpostArn)
        preferredOutpostArn = preferredOutpostArnDecoded
        let cacheClusterCreateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheClusterCreateTime)
        var cacheClusterCreateTimeBuffer:Date? = nil
        if let cacheClusterCreateTimeDecoded = cacheClusterCreateTimeDecoded {
            cacheClusterCreateTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(cacheClusterCreateTimeDecoded, format: .dateTime)
        }
        cacheClusterCreateTime = cacheClusterCreateTimeBuffer
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let topicArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let cacheParameterGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheParameterGroupName)
        cacheParameterGroupName = cacheParameterGroupNameDecoded
        let cacheSubnetGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheSubnetGroupName)
        cacheSubnetGroupName = cacheSubnetGroupNameDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let autoMinorVersionUpgradeDecoded = try containerValues.decode(Bool.self, forKey: .autoMinorVersionUpgrade)
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
        let snapshotRetentionLimitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .snapshotRetentionLimit)
        snapshotRetentionLimit = snapshotRetentionLimitDecoded
        let snapshotWindowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotWindow)
        snapshotWindow = snapshotWindowDecoded
        let numNodeGroupsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numNodeGroups)
        numNodeGroups = numNodeGroupsDecoded
        let automaticFailoverDecoded = try containerValues.decodeIfPresent(AutomaticFailoverStatus.self, forKey: .automaticFailover)
        automaticFailover = automaticFailoverDecoded
        if containerValues.contains(.nodeSnapshots) {
            struct KeyVal0{struct NodeSnapshot{}}
            let nodeSnapshotsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeSnapshot>.CodingKeys.self, forKey: .nodeSnapshots)
            if let nodeSnapshotsWrappedContainer = nodeSnapshotsWrappedContainer {
                let nodeSnapshotsContainer = try nodeSnapshotsWrappedContainer.decodeIfPresent([NodeSnapshot].self, forKey: .member)
                var nodeSnapshotsBuffer:[NodeSnapshot]? = nil
                if let nodeSnapshotsContainer = nodeSnapshotsContainer {
                    nodeSnapshotsBuffer = [NodeSnapshot]()
                    for structureContainer0 in nodeSnapshotsContainer {
                        nodeSnapshotsBuffer?.append(structureContainer0)
                    }
                }
                nodeSnapshots = nodeSnapshotsBuffer
            } else {
                nodeSnapshots = []
            }
        } else {
            nodeSnapshots = nil
        }
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension Snapshot: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Snapshot(aRN: \(String(describing: aRN)), autoMinorVersionUpgrade: \(String(describing: autoMinorVersionUpgrade)), automaticFailover: \(String(describing: automaticFailover)), cacheClusterCreateTime: \(String(describing: cacheClusterCreateTime)), cacheClusterId: \(String(describing: cacheClusterId)), cacheNodeType: \(String(describing: cacheNodeType)), cacheParameterGroupName: \(String(describing: cacheParameterGroupName)), cacheSubnetGroupName: \(String(describing: cacheSubnetGroupName)), engine: \(String(describing: engine)), engineVersion: \(String(describing: engineVersion)), kmsKeyId: \(String(describing: kmsKeyId)), nodeSnapshots: \(String(describing: nodeSnapshots)), numCacheNodes: \(String(describing: numCacheNodes)), numNodeGroups: \(String(describing: numNodeGroups)), port: \(String(describing: port)), preferredAvailabilityZone: \(String(describing: preferredAvailabilityZone)), preferredMaintenanceWindow: \(String(describing: preferredMaintenanceWindow)), preferredOutpostArn: \(String(describing: preferredOutpostArn)), replicationGroupDescription: \(String(describing: replicationGroupDescription)), replicationGroupId: \(String(describing: replicationGroupId)), snapshotName: \(String(describing: snapshotName)), snapshotRetentionLimit: \(String(describing: snapshotRetentionLimit)), snapshotSource: \(String(describing: snapshotSource)), snapshotStatus: \(String(describing: snapshotStatus)), snapshotWindow: \(String(describing: snapshotWindow)), topicArn: \(String(describing: topicArn)), vpcId: \(String(describing: vpcId)))"}
}

/// <p>Represents a copy of an entire Redis cluster as of the time when the snapshot was taken.</p>
public struct Snapshot: Equatable {
    /// <p>The ARN (Amazon Resource Name) of the snapshot.</p>
    public let aRN: String?
    /// <p>This parameter is currently disabled.</p>
    public let autoMinorVersionUpgrade: Bool
    /// <p>Indicates the status of automatic failover for the source Redis replication group.</p>
    public let automaticFailover: AutomaticFailoverStatus?
    /// <p>The date and time when the source cluster was created.</p>
    public let cacheClusterCreateTime: Date?
    /// <p>The user-supplied identifier of the source cluster.</p>
    public let cacheClusterId: String?
    /// <p>The name of the compute and memory capacity node type for the source cluster.</p>
    ///
    ///         <p>The following node types are supported by ElastiCache.
    /// 				Generally speaking, the current generation types provide more memory and computational power
    /// 			at lower cost when compared to their equivalent previous generation counterparts.</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>General purpose:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 					
    ///     						           <p>
    ///                         <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						               <p>	
    ///                         <code>cache.m6g.large</code>,
    /// 							<code>cache.m6g.xlarge</code>,
    /// 							<code>cache.m6g.2xlarge</code>,
    /// 							<code>cache.m6g.4xlarge</code>,
    /// 							<code>cache.m6g.8xlarge</code>,
    /// 							<code>cache.m6g.12xlarge</code>,
    /// 							<code>cache.m6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    ///     					
    ///     					
    ///     					            <p>
    ///                         <b>M5 node types:</b>
    ///     						              <code>cache.m5.large</code>,
    ///     						<code>cache.m5.xlarge</code>,
    ///     						<code>cache.m5.2xlarge</code>,
    ///     						<code>cache.m5.4xlarge</code>,
    ///     						<code>cache.m5.12xlarge</code>,
    ///     						<code>cache.m5.24xlarge</code>
    ///     						
    ///     						
    ///     						           </p>	
    ///     						
    /// 						
    /// 						               <p>
    ///                         <b>M4 node types:</b>
    ///     						              <code>cache.m4.large</code>,
    ///     						<code>cache.m4.xlarge</code>,
    ///     						<code>cache.m4.2xlarge</code>,
    ///     						<code>cache.m4.4xlarge</code>,
    ///     						<code>cache.m4.10xlarge</code>
    ///                      </p>
    ///     					            <p>
    ///                         <b>T3 node types:</b>
    /// 					                   <code>cache.t3.micro</code>,
    ///     						<code>cache.t3.small</code>,
    ///     						<code>cache.t3.medium</code>
    ///                      </p>
    ///     								
    ///     						
    ///     				             <p>
    ///                         <b>T2 node types:</b>
    /// 					                   <code>cache.t2.micro</code>,
    ///     						<code>cache.t2.small</code>,
    ///     						<code>cache.t2.medium</code>
    ///                      </p>
    ///     						
    ///     						
    ///     						
    ///     						
    ///     						        </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 						               <p>
    ///                         <b>T1 node types:</b>
    /// 					                   <code>cache.t1.micro</code>
    ///                      </p>
    /// 					
    /// 						               <p>
    ///                         <b>M1 node types:</b>
    /// 						                  <code>cache.m1.small</code>,
    /// 						   <code>cache.m1.medium</code>,
    /// 						   <code>cache.m1.large</code>,
    /// 						   <code>cache.m1.xlarge</code>
    ///                      </p>
    /// 						
    /// 						               <p>
    ///                         <b>M3 node types:</b>
    ///     						              <code>cache.m3.medium</code>,
    ///     						<code>cache.m3.large</code>,
    ///     						<code>cache.m3.xlarge</code>,
    ///     						<code>cache.m3.2xlarge</code>
    ///                      </p>
    /// 						
    /// 						            </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Compute optimized:</p>
    ///
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 			                  <p>
    ///                         <b>C1 node types:</b>
    /// 			                     <code>cache.c1.xlarge</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Memory optimized:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 											          <p>
    ///                         <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						
    /// 						
    /// 						
    /// 						
    /// 						               <p>	
    /// 							                 <code>cache.r6g.large</code>,
    /// 							<code>cache.r6g.xlarge</code>,
    /// 							<code>cache.r6g.2xlarge</code>,
    /// 							<code>cache.r6g.4xlarge</code>,
    /// 							<code>cache.r6g.8xlarge</code>,
    /// 							<code>cache.r6g.12xlarge</code>,
    /// 							<code>cache.r6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    /// 					                <p>
    ///                         <b>R5 node types:</b>
    ///     					               <code>cache.r5.large</code>,
    ///     					   <code>cache.r5.xlarge</code>,
    ///     					   <code>cache.r5.2xlarge</code>,
    ///     					   <code>cache.r5.4xlarge</code>,
    ///     					   <code>cache.r5.12xlarge</code>,
    ///     					   <code>cache.r5.24xlarge</code>
    ///                      </p>
    /// 						
    ///     					            <p>
    ///                         <b>R4 node types:</b>
    ///     					               <code>cache.r4.large</code>,
    ///     					   <code>cache.r4.xlarge</code>,
    ///     					   <code>cache.r4.2xlarge</code>,
    ///     					   <code>cache.r4.4xlarge</code>,
    ///     					   <code>cache.r4.8xlarge</code>,
    ///     					   <code>cache.r4.16xlarge</code>
    ///                      </p>
    ///     					
    ///     					
    ///     					
    ///
    ///
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					         </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    ///                         <p>
    ///                         <b>M2 node types:</b>						
    ///     					               <code>cache.m2.xlarge</code>,
    ///     						<code>cache.m2.2xlarge</code>,
    ///     						<code>cache.m2.4xlarge</code>
    ///                      </p>
    ///     						
    ///     						           <p>
    ///                         <b>R3 node types:</b>
    ///     					               <code>cache.r3.large</code>,
    ///     						<code>cache.r3.xlarge</code>,
    ///     						<code>cache.r3.2xlarge</code>,
    ///     						<code>cache.r3.4xlarge</code>,
    ///     						<code>cache.r3.8xlarge</code>
    ///                      </p>
    ///     						
    ///     						        </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    /// 				
    /// 		       <p>
    ///             <b>Additional node type info</b>
    ///          </p>
    /// 		       <ul>
    ///             <li>
    ///                <p>All current generation instance types are created in Amazon VPC by default.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis configuration variables <code>appendonly</code> and
    /// 				<code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p>
    ///             </li>
    ///          </ul>
    public let cacheNodeType: String?
    /// <p>The cache parameter group that is associated with the source cluster.</p>
    public let cacheParameterGroupName: String?
    /// <p>The name of the cache subnet group associated with the source cluster.</p>
    public let cacheSubnetGroupName: String?
    /// <p>The name of the cache engine (<code>memcached</code> or
    ///             <code>redis</code>) used by the source cluster.</p>
    public let engine: String?
    /// <p>The version of the cache engine version that is used by the source cluster.</p>
    public let engineVersion: String?
    /// <p>The ID of the KMS key used to encrypt the snapshot.</p>
    public let kmsKeyId: String?
    /// <p>A list of the cache nodes in the source cluster.</p>
    public let nodeSnapshots: [NodeSnapshot]?
    /// <p>The number of cache nodes in the source cluster.</p>
    ///         <p>For clusters running Redis, this value must be 1.
    ///             For clusters running Memcached, this value must be between 1 and 40.</p>
    public let numCacheNodes: Int?
    /// <p>The number of node groups (shards) in this snapshot.
    ///             When restoring from a snapshot, the number of node groups (shards) in the snapshot and in the restored
    ///             replication group must be the same.</p>
    public let numNodeGroups: Int?
    /// <p>The port number used by each cache nodes in the source cluster.</p>
    public let port: Int?
    /// <p>The name of the Availability Zone in which the source cluster is located.</p>
    public let preferredAvailabilityZone: String?
    /// <p>Specifies the weekly time range during which maintenance
    ///    on the cluster is performed. It is specified as a range in
    ///    the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum
    ///    maintenance window is a 60 minute period.</p>
    ///          <p>Valid values for <code>ddd</code> are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>sun</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>mon</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>tue</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>wed</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>thu</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>fri</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sat</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>Example: <code>sun:23:00-mon:01:30</code>
    ///          </p>
    public let preferredMaintenanceWindow: String?
    /// <p>The ARN (Amazon Resource Name) of the preferred outpost.</p>
    public let preferredOutpostArn: String?
    /// <p>A description of the source replication group.</p>
    public let replicationGroupDescription: String?
    /// <p>The unique identifier of the source replication group.</p>
    public let replicationGroupId: String?
    /// <p>The name of a snapshot.
    ///             For an automatic snapshot, the name is system-generated.
    ///             For a manual snapshot, this is the user-provided name.</p>
    public let snapshotName: String?
    /// <p>For an automatic snapshot, the number of days for which ElastiCache retains the snapshot before deleting it.</p>
    ///         <p>For manual snapshots, this field reflects the <code>SnapshotRetentionLimit</code> for the
    ///             source cluster when the snapshot was created. This field is otherwise ignored:
    ///             Manual snapshots do not expire, and can only be deleted using the <code>DeleteSnapshot</code>
    ///             operation. </p>
    ///         <p>
    ///             <b>Important</b>
    ///           If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
    public let snapshotRetentionLimit: Int?
    /// <p>Indicates whether the snapshot is from an automatic backup (<code>automated</code>)
    ///             or was created manually (<code>manual</code>).</p>
    public let snapshotSource: String?
    /// <p>The status of the snapshot. Valid values: <code>creating</code> | <code>available</code>
    ///             | <code>restoring</code> | <code>copying</code> | <code>deleting</code>.</p>
    public let snapshotStatus: String?
    /// <p>The daily time range during which ElastiCache takes daily snapshots of the source cluster.</p>
    public let snapshotWindow: String?
    /// <p>The Amazon Resource Name (ARN) for the topic used by the source cluster for publishing notifications.</p>
    public let topicArn: String?
    /// <p>The Amazon Virtual Private Cloud identifier (VPC ID) of the cache subnet group for the source cluster.</p>
    public let vpcId: String?

    public init (
        aRN: String? = nil,
        autoMinorVersionUpgrade: Bool = false,
        automaticFailover: AutomaticFailoverStatus? = nil,
        cacheClusterCreateTime: Date? = nil,
        cacheClusterId: String? = nil,
        cacheNodeType: String? = nil,
        cacheParameterGroupName: String? = nil,
        cacheSubnetGroupName: String? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        kmsKeyId: String? = nil,
        nodeSnapshots: [NodeSnapshot]? = nil,
        numCacheNodes: Int? = nil,
        numNodeGroups: Int? = nil,
        port: Int? = nil,
        preferredAvailabilityZone: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        preferredOutpostArn: String? = nil,
        replicationGroupDescription: String? = nil,
        replicationGroupId: String? = nil,
        snapshotName: String? = nil,
        snapshotRetentionLimit: Int? = nil,
        snapshotSource: String? = nil,
        snapshotStatus: String? = nil,
        snapshotWindow: String? = nil,
        topicArn: String? = nil,
        vpcId: String? = nil
    )
    {
        self.aRN = aRN
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.automaticFailover = automaticFailover
        self.cacheClusterCreateTime = cacheClusterCreateTime
        self.cacheClusterId = cacheClusterId
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.engine = engine
        self.engineVersion = engineVersion
        self.kmsKeyId = kmsKeyId
        self.nodeSnapshots = nodeSnapshots
        self.numCacheNodes = numCacheNodes
        self.numNodeGroups = numNodeGroups
        self.port = port
        self.preferredAvailabilityZone = preferredAvailabilityZone
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.preferredOutpostArn = preferredOutpostArn
        self.replicationGroupDescription = replicationGroupDescription
        self.replicationGroupId = replicationGroupId
        self.snapshotName = snapshotName
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotSource = snapshotSource
        self.snapshotStatus = snapshotStatus
        self.snapshotWindow = snapshotWindow
        self.topicArn = topicArn
        self.vpcId = vpcId
    }
}

extension SnapshotAlreadyExistsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SnapshotAlreadyExistsFault(message: \(String(describing: message)))"}
}

extension SnapshotAlreadyExistsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<SnapshotAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You already have a snapshot with the given name.</p>
public struct SnapshotAlreadyExistsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct SnapshotAlreadyExistsFaultBody: Equatable {
    public let message: String?
}

extension SnapshotAlreadyExistsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SnapshotFeatureNotSupportedFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SnapshotFeatureNotSupportedFault(message: \(String(describing: message)))"}
}

extension SnapshotFeatureNotSupportedFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<SnapshotFeatureNotSupportedFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You attempted one of the following operations:</p>
///         <ul>
///             <li>
///                <p>Creating a snapshot of a Redis cluster running on a <code>cache.t1.micro</code> cache
///                     node.</p>
///             </li>
///             <li>
///                <p>Creating a snapshot of a cluster that is running Memcached rather than Redis.</p>
///             </li>
///          </ul>
///         <p>Neither of these are supported by ElastiCache.</p>
public struct SnapshotFeatureNotSupportedFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct SnapshotFeatureNotSupportedFaultBody: Equatable {
    public let message: String?
}

extension SnapshotFeatureNotSupportedFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SnapshotNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SnapshotNotFoundFault(message: \(String(describing: message)))"}
}

extension SnapshotNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<SnapshotNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested snapshot name does not refer to an existing snapshot.</p>
public struct SnapshotNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct SnapshotNotFoundFaultBody: Equatable {
    public let message: String?
}

extension SnapshotNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SnapshotQuotaExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SnapshotQuotaExceededFault(message: \(String(describing: message)))"}
}

extension SnapshotQuotaExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<SnapshotQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request cannot be processed because it would exceed the maximum number of snapshots.</p>
public struct SnapshotQuotaExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct SnapshotQuotaExceededFaultBody: Equatable {
    public let message: String?
}

extension SnapshotQuotaExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum SourceType {
    case cacheCluster
    case cacheParameterGroup
    case cacheSecurityGroup
    case cacheSubnetGroup
    case replicationGroup
    case user
    case userGroup
    case sdkUnknown(String)
}

extension SourceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SourceType] {
        return [
            .cacheCluster,
            .cacheParameterGroup,
            .cacheSecurityGroup,
            .cacheSubnetGroup,
            .replicationGroup,
            .user,
            .userGroup,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cacheCluster: return "cache-cluster"
        case .cacheParameterGroup: return "cache-parameter-group"
        case .cacheSecurityGroup: return "cache-security-group"
        case .cacheSubnetGroup: return "cache-subnet-group"
        case .replicationGroup: return "replication-group"
        case .user: return "user"
        case .userGroup: return "user-group"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SourceType(rawValue: rawValue) ?? SourceType.sdkUnknown(rawValue)
    }
}

public struct StartMigrationInputBodyMiddleware: Middleware {
    public let id: String = "StartMigrationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMigrationInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMigrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMigrationInput>
    public typealias MOutput = OperationOutput<StartMigrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartMigrationOutputError>
}

extension StartMigrationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartMigrationInput(customerNodeEndpointList: \(String(describing: customerNodeEndpointList)), replicationGroupId: \(String(describing: replicationGroupId)))"}
}

extension StartMigrationInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let customerNodeEndpointList = customerNodeEndpointList {
            var customerNodeEndpointListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CustomerNodeEndpointList"))
            for (index0, customernodeendpoint0) in customerNodeEndpointList.enumerated() {
                try customerNodeEndpointListContainer.encode(customernodeendpoint0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        try container.encode("StartMigration", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct StartMigrationInputHeadersMiddleware: Middleware {
    public let id: String = "StartMigrationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMigrationInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMigrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMigrationInput>
    public typealias MOutput = OperationOutput<StartMigrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartMigrationOutputError>
}

public struct StartMigrationInputQueryItemMiddleware: Middleware {
    public let id: String = "StartMigrationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMigrationInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMigrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMigrationInput>
    public typealias MOutput = OperationOutput<StartMigrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartMigrationOutputError>
}

public struct StartMigrationInput: Equatable {
    /// <p>List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.</p>
    public let customerNodeEndpointList: [CustomerNodeEndpoint]?
    /// <p>The ID of the replication group to which data should be migrated.</p>
    public let replicationGroupId: String?

    public init (
        customerNodeEndpointList: [CustomerNodeEndpoint]? = nil,
        replicationGroupId: String? = nil
    )
    {
        self.customerNodeEndpointList = customerNodeEndpointList
        self.replicationGroupId = replicationGroupId
    }
}

extension StartMigrationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension StartMigrationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupStateFault" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupAlreadyUnderMigrationFault" : self = .replicationGroupAlreadyUnderMigrationFault(try ReplicationGroupAlreadyUnderMigrationFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartMigrationOutputError: Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupAlreadyUnderMigrationFault(ReplicationGroupAlreadyUnderMigrationFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMigrationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartMigrationOutputResponse(replicationGroup: \(String(describing: replicationGroup)))"}
}

extension StartMigrationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StartMigrationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct StartMigrationOutputResponse: Equatable {
    /// <p>Contains all of the attributes of a specific Redis replication group.</p>
    public let replicationGroup: ReplicationGroup?

    public init (
        replicationGroup: ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct StartMigrationOutputResponseBody: Equatable {
    public let replicationGroup: ReplicationGroup?
}

extension StartMigrationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("StartMigrationResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

extension Subnet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case subnetAvailabilityZone = "SubnetAvailabilityZone"
        case subnetIdentifier = "SubnetIdentifier"
        case subnetOutpost = "SubnetOutpost"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let subnetAvailabilityZone = subnetAvailabilityZone {
            try container.encode(subnetAvailabilityZone, forKey: Key("SubnetAvailabilityZone"))
        }
        if let subnetIdentifier = subnetIdentifier {
            try container.encode(subnetIdentifier, forKey: Key("SubnetIdentifier"))
        }
        if let subnetOutpost = subnetOutpost {
            try container.encode(subnetOutpost, forKey: Key("SubnetOutpost"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetIdentifier)
        subnetIdentifier = subnetIdentifierDecoded
        let subnetAvailabilityZoneDecoded = try containerValues.decodeIfPresent(AvailabilityZone.self, forKey: .subnetAvailabilityZone)
        subnetAvailabilityZone = subnetAvailabilityZoneDecoded
        let subnetOutpostDecoded = try containerValues.decodeIfPresent(SubnetOutpost.self, forKey: .subnetOutpost)
        subnetOutpost = subnetOutpostDecoded
    }
}

extension Subnet: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Subnet(subnetAvailabilityZone: \(String(describing: subnetAvailabilityZone)), subnetIdentifier: \(String(describing: subnetIdentifier)), subnetOutpost: \(String(describing: subnetOutpost)))"}
}

/// <p>Represents the subnet associated with a cluster.
///             This parameter refers to subnets defined in Amazon Virtual Private Cloud (Amazon VPC) and used with ElastiCache.</p>
public struct Subnet: Equatable {
    /// <p>The Availability Zone associated with the subnet.</p>
    public let subnetAvailabilityZone: AvailabilityZone?
    /// <p>The unique identifier for the subnet.</p>
    public let subnetIdentifier: String?
    /// <p>The outpost ARN of the subnet.</p>
    public let subnetOutpost: SubnetOutpost?

    public init (
        subnetAvailabilityZone: AvailabilityZone? = nil,
        subnetIdentifier: String? = nil,
        subnetOutpost: SubnetOutpost? = nil
    )
    {
        self.subnetAvailabilityZone = subnetAvailabilityZone
        self.subnetIdentifier = subnetIdentifier
        self.subnetOutpost = subnetOutpost
    }
}

extension SubnetInUse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SubnetInUse(message: \(String(describing: message)))"}
}

extension SubnetInUse: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<SubnetInUseBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested subnet is being used by another cache subnet group.</p>
public struct SubnetInUse: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct SubnetInUseBody: Equatable {
    public let message: String?
}

extension SubnetInUseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SubnetNotAllowedFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SubnetNotAllowedFault(message: \(String(describing: message)))"}
}

extension SubnetNotAllowedFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<SubnetNotAllowedFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>At least one subnet ID does not match the other subnet IDs. This mismatch typically occurs when a
///             user sets one subnet ID to a regional Availability Zone and a different one to an outpost. Or when a user sets the subnet ID to an Outpost when not subscribed on this service.</p>
public struct SubnetNotAllowedFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct SubnetNotAllowedFaultBody: Equatable {
    public let message: String?
}

extension SubnetNotAllowedFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SubnetOutpost: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case subnetOutpostArn = "SubnetOutpostArn"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let subnetOutpostArn = subnetOutpostArn {
            try container.encode(subnetOutpostArn, forKey: Key("SubnetOutpostArn"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetOutpostArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetOutpostArn)
        subnetOutpostArn = subnetOutpostArnDecoded
    }
}

extension SubnetOutpost: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SubnetOutpost(subnetOutpostArn: \(String(describing: subnetOutpostArn)))"}
}

/// <p>The ID of the outpost subnet.</p>
public struct SubnetOutpost: Equatable {
    /// <p>The outpost ARN of the subnet.</p>
    public let subnetOutpostArn: String?

    public init (
        subnetOutpostArn: String? = nil
    )
    {
        self.subnetOutpostArn = subnetOutpostArn
    }
}

extension Tag: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let key = key {
            try container.encode(key, forKey: Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: Key("Value"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}

extension Tag: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Tag(key: \(String(describing: key)), value: \(String(describing: value)))"}
}

/// <p>A tag that can be added to an ElastiCache cluster or replication group.
///             Tags are composed of a Key/Value pair. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. A tag with a null Value is permitted.</p>
public struct Tag: Equatable {
    /// <p>The key for the tag. May not be null.</p>
    public let key: String?
    /// <p>The tag's value. May be null.</p>
    public let value: String?

    public init (
        key: String? = nil,
        value: String? = nil
    )
    {
        self.key = key
        self.value = value
    }
}

extension TagNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagNotFoundFault(message: \(String(describing: message)))"}
}

extension TagNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<TagNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested tag was not found on this resource.</p>
public struct TagNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TagNotFoundFaultBody: Equatable {
    public let message: String?
}

extension TagNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TagQuotaPerResourceExceeded: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagQuotaPerResourceExceeded(message: \(String(describing: message)))"}
}

extension TagQuotaPerResourceExceeded: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<TagQuotaPerResourceExceededBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request cannot be processed because it would cause the resource to have more than the allowed number of tags. The maximum number of tags permitted on a resource is 50.</p>
public struct TagQuotaPerResourceExceeded: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TagQuotaPerResourceExceededBody: Equatable {
    public let message: String?
}

extension TagQuotaPerResourceExceededBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct TestFailoverInputBodyMiddleware: Middleware {
    public let id: String = "TestFailoverInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TestFailoverInput>,
                  next: H) -> Swift.Result<OperationOutput<TestFailoverOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TestFailoverInput>
    public typealias MOutput = OperationOutput<TestFailoverOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TestFailoverOutputError>
}

extension TestFailoverInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TestFailoverInput(nodeGroupId: \(String(describing: nodeGroupId)), replicationGroupId: \(String(describing: replicationGroupId)))"}
}

extension TestFailoverInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: Key("NodeGroupId"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        try container.encode("TestFailover", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}

public struct TestFailoverInputHeadersMiddleware: Middleware {
    public let id: String = "TestFailoverInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TestFailoverInput>,
                  next: H) -> Swift.Result<OperationOutput<TestFailoverOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TestFailoverInput>
    public typealias MOutput = OperationOutput<TestFailoverOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TestFailoverOutputError>
}

public struct TestFailoverInputQueryItemMiddleware: Middleware {
    public let id: String = "TestFailoverInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TestFailoverInput>,
                  next: H) -> Swift.Result<OperationOutput<TestFailoverOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TestFailoverInput>
    public typealias MOutput = OperationOutput<TestFailoverOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TestFailoverOutputError>
}

public struct TestFailoverInput: Equatable {
    /// <p>The name of the node group (called shard in the console) in this replication group on
    ///             which automatic failover is to be tested.
    ///             You may test automatic failover on up to 5 node groups in any rolling 24-hour period.</p>
    public let nodeGroupId: String?
    /// <p>The name of the replication group (console: cluster) whose automatic failover is being
    ///             tested by this operation.</p>
    public let replicationGroupId: String?

    public init (
        nodeGroupId: String? = nil,
        replicationGroupId: String? = nil
    )
    {
        self.nodeGroupId = nodeGroupId
        self.replicationGroupId = replicationGroupId
    }
}

extension TestFailoverNotAvailableFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TestFailoverNotAvailableFault(message: \(String(describing: message)))"}
}

extension TestFailoverNotAvailableFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<TestFailoverNotAvailableFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The <code>TestFailover</code> action is not available.</p>
public struct TestFailoverNotAvailableFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TestFailoverNotAvailableFaultBody: Equatable {
    public let message: String?
}

extension TestFailoverNotAvailableFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TestFailoverOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TestFailoverOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "APICallRateForCustomerExceededFault" : self = .aPICallRateForCustomerExceededFault(try APICallRateForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterStateFault" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyFault" : self = .invalidKMSKeyFault(try InvalidKMSKeyFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupStateFault" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeGroupNotFoundFault" : self = .nodeGroupNotFoundFault(try NodeGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TestFailoverNotAvailableFault" : self = .testFailoverNotAvailableFault(try TestFailoverNotAvailableFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TestFailoverOutputError: Equatable {
    case aPICallRateForCustomerExceededFault(APICallRateForCustomerExceededFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidKMSKeyFault(InvalidKMSKeyFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case nodeGroupNotFoundFault(NodeGroupNotFoundFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case testFailoverNotAvailableFault(TestFailoverNotAvailableFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension TestFailoverOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TestFailoverOutputResponse(replicationGroup: \(String(describing: replicationGroup)))"}
}

extension TestFailoverOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TestFailoverOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct TestFailoverOutputResponse: Equatable {
    /// <p>Contains all of the attributes of a specific Redis replication group.</p>
    public let replicationGroup: ReplicationGroup?

    public init (
        replicationGroup: ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct TestFailoverOutputResponseBody: Equatable {
    public let replicationGroup: ReplicationGroup?
}

extension TestFailoverOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("TestFailoverResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

extension TimeRangeFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        var startTimeBuffer:Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endTime)
        var endTimeBuffer:Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
    }
}

extension TimeRangeFilter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TimeRangeFilter(endTime: \(String(describing: endTime)), startTime: \(String(describing: startTime)))"}
}

/// <p>Filters update actions from the service updates that are in available status during the time range.</p>
public struct TimeRangeFilter: Equatable {
    /// <p>The end time of the time range filter</p>
    public let endTime: Date?
    /// <p>The start time of the time range filter</p>
    public let startTime: Date?

    public init (
        endTime: Date? = nil,
        startTime: Date? = nil
    )
    {
        self.endTime = endTime
        self.startTime = startTime
    }
}

extension UnprocessedUpdateAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheClusterId = "CacheClusterId"
        case errorMessage = "ErrorMessage"
        case errorType = "ErrorType"
        case replicationGroupId = "ReplicationGroupId"
        case serviceUpdateName = "ServiceUpdateName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let errorMessage = errorMessage {
            try container.encode(errorMessage, forKey: Key("ErrorMessage"))
        }
        if let errorType = errorType {
            try container.encode(errorType, forKey: Key("ErrorType"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: Key("ServiceUpdateName"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let serviceUpdateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateName)
        serviceUpdateName = serviceUpdateNameDecoded
        let errorTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorType)
        errorType = errorTypeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension UnprocessedUpdateAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UnprocessedUpdateAction(cacheClusterId: \(String(describing: cacheClusterId)), errorMessage: \(String(describing: errorMessage)), errorType: \(String(describing: errorType)), replicationGroupId: \(String(describing: replicationGroupId)), serviceUpdateName: \(String(describing: serviceUpdateName)))"}
}

/// <p>Update action that has failed to be processed for the corresponding apply/stop request</p>
public struct UnprocessedUpdateAction: Equatable {
    /// <p>The ID of the cache cluster</p>
    public let cacheClusterId: String?
    /// <p>The error message that describes the reason the request was not processed</p>
    public let errorMessage: String?
    /// <p>The error type for requests that are not processed</p>
    public let errorType: String?
    /// <p>The replication group ID</p>
    public let replicationGroupId: String?
    /// <p>The unique ID of the service update</p>
    public let serviceUpdateName: String?

    public init (
        cacheClusterId: String? = nil,
        errorMessage: String? = nil,
        errorType: String? = nil,
        replicationGroupId: String? = nil,
        serviceUpdateName: String? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.errorMessage = errorMessage
        self.errorType = errorType
        self.replicationGroupId = replicationGroupId
        self.serviceUpdateName = serviceUpdateName
    }
}

extension UpdateAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheClusterId = "CacheClusterId"
        case cacheNodeUpdateStatus = "CacheNodeUpdateStatus"
        case engine = "Engine"
        case estimatedUpdateTime = "EstimatedUpdateTime"
        case nodeGroupUpdateStatus = "NodeGroupUpdateStatus"
        case nodesUpdated = "NodesUpdated"
        case replicationGroupId = "ReplicationGroupId"
        case serviceUpdateName = "ServiceUpdateName"
        case serviceUpdateRecommendedApplyByDate = "ServiceUpdateRecommendedApplyByDate"
        case serviceUpdateReleaseDate = "ServiceUpdateReleaseDate"
        case serviceUpdateSeverity = "ServiceUpdateSeverity"
        case serviceUpdateStatus = "ServiceUpdateStatus"
        case serviceUpdateType = "ServiceUpdateType"
        case slaMet = "SlaMet"
        case updateActionAvailableDate = "UpdateActionAvailableDate"
        case updateActionStatus = "UpdateActionStatus"
        case updateActionStatusModifiedDate = "UpdateActionStatusModifiedDate"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: Key("CacheClusterId"))
        }
        if let cacheNodeUpdateStatus = cacheNodeUpdateStatus {
            var cacheNodeUpdateStatusContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheNodeUpdateStatus"))
            for (index0, cachenodeupdatestatus0) in cacheNodeUpdateStatus.enumerated() {
                try cacheNodeUpdateStatusContainer.encode(cachenodeupdatestatus0, forKey: Key("CacheNodeUpdateStatus.\(index0.advanced(by: 1))"))
            }
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let estimatedUpdateTime = estimatedUpdateTime {
            try container.encode(estimatedUpdateTime, forKey: Key("EstimatedUpdateTime"))
        }
        if let nodeGroupUpdateStatus = nodeGroupUpdateStatus {
            var nodeGroupUpdateStatusContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NodeGroupUpdateStatus"))
            for (index0, nodegroupupdatestatus0) in nodeGroupUpdateStatus.enumerated() {
                try nodeGroupUpdateStatusContainer.encode(nodegroupupdatestatus0, forKey: Key("NodeGroupUpdateStatus.\(index0.advanced(by: 1))"))
            }
        }
        if let nodesUpdated = nodesUpdated {
            try container.encode(nodesUpdated, forKey: Key("NodesUpdated"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: Key("ServiceUpdateName"))
        }
        if let serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDate {
            try container.encode(TimestampWrapper(serviceUpdateRecommendedApplyByDate, format: .dateTime), forKey: Key("serviceUpdateRecommendedApplyByDate"))
        }
        if let serviceUpdateReleaseDate = serviceUpdateReleaseDate {
            try container.encode(TimestampWrapper(serviceUpdateReleaseDate, format: .dateTime), forKey: Key("serviceUpdateReleaseDate"))
        }
        if let serviceUpdateSeverity = serviceUpdateSeverity {
            try container.encode(serviceUpdateSeverity, forKey: Key("ServiceUpdateSeverity"))
        }
        if let serviceUpdateStatus = serviceUpdateStatus {
            try container.encode(serviceUpdateStatus, forKey: Key("ServiceUpdateStatus"))
        }
        if let serviceUpdateType = serviceUpdateType {
            try container.encode(serviceUpdateType, forKey: Key("ServiceUpdateType"))
        }
        if let slaMet = slaMet {
            try container.encode(slaMet, forKey: Key("SlaMet"))
        }
        if let updateActionAvailableDate = updateActionAvailableDate {
            try container.encode(TimestampWrapper(updateActionAvailableDate, format: .dateTime), forKey: Key("updateActionAvailableDate"))
        }
        if let updateActionStatus = updateActionStatus {
            try container.encode(updateActionStatus, forKey: Key("UpdateActionStatus"))
        }
        if let updateActionStatusModifiedDate = updateActionStatusModifiedDate {
            try container.encode(TimestampWrapper(updateActionStatusModifiedDate, format: .dateTime), forKey: Key("updateActionStatusModifiedDate"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let serviceUpdateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateName)
        serviceUpdateName = serviceUpdateNameDecoded
        let serviceUpdateReleaseDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateReleaseDate)
        var serviceUpdateReleaseDateBuffer:Date? = nil
        if let serviceUpdateReleaseDateDecoded = serviceUpdateReleaseDateDecoded {
            serviceUpdateReleaseDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(serviceUpdateReleaseDateDecoded, format: .dateTime)
        }
        serviceUpdateReleaseDate = serviceUpdateReleaseDateBuffer
        let serviceUpdateSeverityDecoded = try containerValues.decodeIfPresent(ServiceUpdateSeverity.self, forKey: .serviceUpdateSeverity)
        serviceUpdateSeverity = serviceUpdateSeverityDecoded
        let serviceUpdateStatusDecoded = try containerValues.decodeIfPresent(ServiceUpdateStatus.self, forKey: .serviceUpdateStatus)
        serviceUpdateStatus = serviceUpdateStatusDecoded
        let serviceUpdateRecommendedApplyByDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateRecommendedApplyByDate)
        var serviceUpdateRecommendedApplyByDateBuffer:Date? = nil
        if let serviceUpdateRecommendedApplyByDateDecoded = serviceUpdateRecommendedApplyByDateDecoded {
            serviceUpdateRecommendedApplyByDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(serviceUpdateRecommendedApplyByDateDecoded, format: .dateTime)
        }
        serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDateBuffer
        let serviceUpdateTypeDecoded = try containerValues.decodeIfPresent(ServiceUpdateType.self, forKey: .serviceUpdateType)
        serviceUpdateType = serviceUpdateTypeDecoded
        let updateActionAvailableDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updateActionAvailableDate)
        var updateActionAvailableDateBuffer:Date? = nil
        if let updateActionAvailableDateDecoded = updateActionAvailableDateDecoded {
            updateActionAvailableDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(updateActionAvailableDateDecoded, format: .dateTime)
        }
        updateActionAvailableDate = updateActionAvailableDateBuffer
        let updateActionStatusDecoded = try containerValues.decodeIfPresent(UpdateActionStatus.self, forKey: .updateActionStatus)
        updateActionStatus = updateActionStatusDecoded
        let nodesUpdatedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodesUpdated)
        nodesUpdated = nodesUpdatedDecoded
        let updateActionStatusModifiedDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updateActionStatusModifiedDate)
        var updateActionStatusModifiedDateBuffer:Date? = nil
        if let updateActionStatusModifiedDateDecoded = updateActionStatusModifiedDateDecoded {
            updateActionStatusModifiedDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(updateActionStatusModifiedDateDecoded, format: .dateTime)
        }
        updateActionStatusModifiedDate = updateActionStatusModifiedDateBuffer
        let slaMetDecoded = try containerValues.decodeIfPresent(SlaMet.self, forKey: .slaMet)
        slaMet = slaMetDecoded
        if containerValues.contains(.nodeGroupUpdateStatus) {
            struct KeyVal0{struct NodeGroupUpdateStatus{}}
            let nodeGroupUpdateStatusWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeGroupUpdateStatus>.CodingKeys.self, forKey: .nodeGroupUpdateStatus)
            if let nodeGroupUpdateStatusWrappedContainer = nodeGroupUpdateStatusWrappedContainer {
                let nodeGroupUpdateStatusContainer = try nodeGroupUpdateStatusWrappedContainer.decodeIfPresent([NodeGroupUpdateStatus].self, forKey: .member)
                var nodeGroupUpdateStatusBuffer:[NodeGroupUpdateStatus]? = nil
                if let nodeGroupUpdateStatusContainer = nodeGroupUpdateStatusContainer {
                    nodeGroupUpdateStatusBuffer = [NodeGroupUpdateStatus]()
                    for structureContainer0 in nodeGroupUpdateStatusContainer {
                        nodeGroupUpdateStatusBuffer?.append(structureContainer0)
                    }
                }
                nodeGroupUpdateStatus = nodeGroupUpdateStatusBuffer
            } else {
                nodeGroupUpdateStatus = []
            }
        } else {
            nodeGroupUpdateStatus = nil
        }
        if containerValues.contains(.cacheNodeUpdateStatus) {
            struct KeyVal0{struct CacheNodeUpdateStatus{}}
            let cacheNodeUpdateStatusWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeUpdateStatus>.CodingKeys.self, forKey: .cacheNodeUpdateStatus)
            if let cacheNodeUpdateStatusWrappedContainer = cacheNodeUpdateStatusWrappedContainer {
                let cacheNodeUpdateStatusContainer = try cacheNodeUpdateStatusWrappedContainer.decodeIfPresent([CacheNodeUpdateStatus].self, forKey: .member)
                var cacheNodeUpdateStatusBuffer:[CacheNodeUpdateStatus]? = nil
                if let cacheNodeUpdateStatusContainer = cacheNodeUpdateStatusContainer {
                    cacheNodeUpdateStatusBuffer = [CacheNodeUpdateStatus]()
                    for structureContainer0 in cacheNodeUpdateStatusContainer {
                        cacheNodeUpdateStatusBuffer?.append(structureContainer0)
                    }
                }
                cacheNodeUpdateStatus = cacheNodeUpdateStatusBuffer
            } else {
                cacheNodeUpdateStatus = []
            }
        } else {
            cacheNodeUpdateStatus = nil
        }
        let estimatedUpdateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .estimatedUpdateTime)
        estimatedUpdateTime = estimatedUpdateTimeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
    }
}

extension UpdateAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateAction(cacheClusterId: \(String(describing: cacheClusterId)), cacheNodeUpdateStatus: \(String(describing: cacheNodeUpdateStatus)), engine: \(String(describing: engine)), estimatedUpdateTime: \(String(describing: estimatedUpdateTime)), nodeGroupUpdateStatus: \(String(describing: nodeGroupUpdateStatus)), nodesUpdated: \(String(describing: nodesUpdated)), replicationGroupId: \(String(describing: replicationGroupId)), serviceUpdateName: \(String(describing: serviceUpdateName)), serviceUpdateRecommendedApplyByDate: \(String(describing: serviceUpdateRecommendedApplyByDate)), serviceUpdateReleaseDate: \(String(describing: serviceUpdateReleaseDate)), serviceUpdateSeverity: \(String(describing: serviceUpdateSeverity)), serviceUpdateStatus: \(String(describing: serviceUpdateStatus)), serviceUpdateType: \(String(describing: serviceUpdateType)), slaMet: \(String(describing: slaMet)), updateActionAvailableDate: \(String(describing: updateActionAvailableDate)), updateActionStatus: \(String(describing: updateActionStatus)), updateActionStatusModifiedDate: \(String(describing: updateActionStatusModifiedDate)))"}
}

/// <p>The status of the service update for a specific replication group</p>
public struct UpdateAction: Equatable {
    /// <p>The ID of the cache cluster</p>
    public let cacheClusterId: String?
    /// <p>The status of the service update on the cache node</p>
    public let cacheNodeUpdateStatus: [CacheNodeUpdateStatus]?
    /// <p>The Elasticache engine to which the update applies. Either Redis or Memcached</p>
    public let engine: String?
    /// <p>The estimated length of time for the update to complete</p>
    public let estimatedUpdateTime: String?
    /// <p>The status of the service update on the node group</p>
    public let nodeGroupUpdateStatus: [NodeGroupUpdateStatus]?
    /// <p>The progress of the service update on the replication group</p>
    public let nodesUpdated: String?
    /// <p>The ID of the replication group</p>
    public let replicationGroupId: String?
    /// <p>The unique ID of the service update</p>
    public let serviceUpdateName: String?
    /// <p>The recommended date to apply the service update to ensure compliance. For information on compliance, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/elasticache-compliance.html#elasticache-compliance-self-service">Self-Service Security Updates for Compliance</a>.</p>
    public let serviceUpdateRecommendedApplyByDate: Date?
    /// <p>The date the update is first available</p>
    public let serviceUpdateReleaseDate: Date?
    /// <p>The severity of the service update</p>
    public let serviceUpdateSeverity: ServiceUpdateSeverity?
    /// <p>The status of the service update</p>
    public let serviceUpdateStatus: ServiceUpdateStatus?
    /// <p>Reflects the nature of the service update  </p>
    public let serviceUpdateType: ServiceUpdateType?
    /// <p>If yes, all nodes in the replication group have been updated by the recommended apply-by date. If no, at least one node in the replication group have not been updated by the recommended apply-by date. If N/A, the replication group was created after the
    ///       recommended apply-by date.</p>
    public let slaMet: SlaMet?
    /// <p>The date that the service update is available to a replication group</p>
    public let updateActionAvailableDate: Date?
    /// <p>The status of the update action</p>
    public let updateActionStatus: UpdateActionStatus?
    /// <p>The date when the UpdateActionStatus was last modified</p>
    public let updateActionStatusModifiedDate: Date?

    public init (
        cacheClusterId: String? = nil,
        cacheNodeUpdateStatus: [CacheNodeUpdateStatus]? = nil,
        engine: String? = nil,
        estimatedUpdateTime: String? = nil,
        nodeGroupUpdateStatus: [NodeGroupUpdateStatus]? = nil,
        nodesUpdated: String? = nil,
        replicationGroupId: String? = nil,
        serviceUpdateName: String? = nil,
        serviceUpdateRecommendedApplyByDate: Date? = nil,
        serviceUpdateReleaseDate: Date? = nil,
        serviceUpdateSeverity: ServiceUpdateSeverity? = nil,
        serviceUpdateStatus: ServiceUpdateStatus? = nil,
        serviceUpdateType: ServiceUpdateType? = nil,
        slaMet: SlaMet? = nil,
        updateActionAvailableDate: Date? = nil,
        updateActionStatus: UpdateActionStatus? = nil,
        updateActionStatusModifiedDate: Date? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.cacheNodeUpdateStatus = cacheNodeUpdateStatus
        self.engine = engine
        self.estimatedUpdateTime = estimatedUpdateTime
        self.nodeGroupUpdateStatus = nodeGroupUpdateStatus
        self.nodesUpdated = nodesUpdated
        self.replicationGroupId = replicationGroupId
        self.serviceUpdateName = serviceUpdateName
        self.serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDate
        self.serviceUpdateReleaseDate = serviceUpdateReleaseDate
        self.serviceUpdateSeverity = serviceUpdateSeverity
        self.serviceUpdateStatus = serviceUpdateStatus
        self.serviceUpdateType = serviceUpdateType
        self.slaMet = slaMet
        self.updateActionAvailableDate = updateActionAvailableDate
        self.updateActionStatus = updateActionStatus
        self.updateActionStatusModifiedDate = updateActionStatusModifiedDate
    }
}

public enum UpdateActionStatus {
    case complete
    case inProgress
    case notApplicable
    case notApplied
    case scheduled
    case scheduling
    case stopped
    case stopping
    case waitingToStart
    case sdkUnknown(String)
}

extension UpdateActionStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [UpdateActionStatus] {
        return [
            .complete,
            .inProgress,
            .notApplicable,
            .notApplied,
            .scheduled,
            .scheduling,
            .stopped,
            .stopping,
            .waitingToStart,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .complete: return "complete"
        case .inProgress: return "in-progress"
        case .notApplicable: return "not-applicable"
        case .notApplied: return "not-applied"
        case .scheduled: return "scheduled"
        case .scheduling: return "scheduling"
        case .stopped: return "stopped"
        case .stopping: return "stopping"
        case .waitingToStart: return "waiting-to-start"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = UpdateActionStatus(rawValue: rawValue) ?? UpdateActionStatus.sdkUnknown(rawValue)
    }
}

extension User: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case accessString = "AccessString"
        case authentication = "Authentication"
        case engine = "Engine"
        case status = "Status"
        case userGroupIds = "UserGroupIds"
        case userId = "UserId"
        case userName = "UserName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: Key("ARN"))
        }
        if let accessString = accessString {
            try container.encode(accessString, forKey: Key("AccessString"))
        }
        if let authentication = authentication {
            try container.encode(authentication, forKey: Key("Authentication"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let userGroupIds = userGroupIds {
            var userGroupIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserGroupIds"))
            for (index0, usergroupid0) in userGroupIds.enumerated() {
                try userGroupIdsContainer.encode(usergroupid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userId = userId {
            try container.encode(userId, forKey: Key("UserId"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: Key("UserName"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userId)
        userId = userIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userName)
        userName = userNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let accessStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accessString)
        accessString = accessStringDecoded
        if containerValues.contains(.userGroupIds) {
            struct KeyVal0{struct member{}}
            let userGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIds)
            if let userGroupIdsWrappedContainer = userGroupIdsWrappedContainer {
                let userGroupIdsContainer = try userGroupIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userGroupIdsBuffer:[String]? = nil
                if let userGroupIdsContainer = userGroupIdsContainer {
                    userGroupIdsBuffer = [String]()
                    for stringContainer0 in userGroupIdsContainer {
                        userGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                userGroupIds = userGroupIdsBuffer
            } else {
                userGroupIds = []
            }
        } else {
            userGroupIds = nil
        }
        let authenticationDecoded = try containerValues.decodeIfPresent(Authentication.self, forKey: .authentication)
        authentication = authenticationDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension User: CustomDebugStringConvertible {
    public var debugDescription: String {
        "User(aRN: \(String(describing: aRN)), accessString: \(String(describing: accessString)), authentication: \(String(describing: authentication)), engine: \(String(describing: engine)), status: \(String(describing: status)), userGroupIds: \(String(describing: userGroupIds)), userId: \(String(describing: userId)), userName: \(String(describing: userName)))"}
}

public struct User: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the user.</p>
    public let aRN: String?
    /// <p>Access permissions string used for this user.</p>
    public let accessString: String?
    /// <p>Denotes whether the user requires a password to authenticate.</p>
    public let authentication: Authentication?
    /// <p>The current supported value is Redis.</p>
    public let engine: String?
    /// <p>Indicates the user status. Can be "active", "modifying" or "deleting".</p>
    public let status: String?
    /// <p>Returns a list of the user group IDs the user belongs to.</p>
    public let userGroupIds: [String]?
    /// <p>The ID of the user.</p>
    public let userId: String?
    /// <p>The username of the user.</p>
    public let userName: String?

    public init (
        aRN: String? = nil,
        accessString: String? = nil,
        authentication: Authentication? = nil,
        engine: String? = nil,
        status: String? = nil,
        userGroupIds: [String]? = nil,
        userId: String? = nil,
        userName: String? = nil
    )
    {
        self.aRN = aRN
        self.accessString = accessString
        self.authentication = authentication
        self.engine = engine
        self.status = status
        self.userGroupIds = userGroupIds
        self.userId = userId
        self.userName = userName
    }
}

extension UserAlreadyExistsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UserAlreadyExistsFault(message: \(String(describing: message)))"}
}

extension UserAlreadyExistsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<UserAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A user with this ID already exists.</p>
public struct UserAlreadyExistsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct UserAlreadyExistsFaultBody: Equatable {
    public let message: String?
}

extension UserAlreadyExistsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UserGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case engine = "Engine"
        case pendingChanges = "PendingChanges"
        case replicationGroups = "ReplicationGroups"
        case status = "Status"
        case userGroupId = "UserGroupId"
        case userIds = "UserIds"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: Key("ARN"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let pendingChanges = pendingChanges {
            try container.encode(pendingChanges, forKey: Key("PendingChanges"))
        }
        if let replicationGroups = replicationGroups {
            var replicationGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReplicationGroups"))
            for (index0, string0) in replicationGroups.enumerated() {
                try replicationGroupsContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let userGroupId = userGroupId {
            try container.encode(userGroupId, forKey: Key("UserGroupId"))
        }
        if let userIds = userIds {
            var userIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserIds"))
            for (index0, userid0) in userIds.enumerated() {
                try userIdsContainer.encode(userid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userGroupId)
        userGroupId = userGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        if containerValues.contains(.userIds) {
            struct KeyVal0{struct member{}}
            let userIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIds)
            if let userIdsWrappedContainer = userIdsWrappedContainer {
                let userIdsContainer = try userIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userIdsBuffer:[String]? = nil
                if let userIdsContainer = userIdsContainer {
                    userIdsBuffer = [String]()
                    for stringContainer0 in userIdsContainer {
                        userIdsBuffer?.append(stringContainer0)
                    }
                }
                userIds = userIdsBuffer
            } else {
                userIds = []
            }
        } else {
            userIds = nil
        }
        let pendingChangesDecoded = try containerValues.decodeIfPresent(UserGroupPendingChanges.self, forKey: .pendingChanges)
        pendingChanges = pendingChangesDecoded
        if containerValues.contains(.replicationGroups) {
            struct KeyVal0{struct member{}}
            let replicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replicationGroups)
            if let replicationGroupsWrappedContainer = replicationGroupsWrappedContainer {
                let replicationGroupsContainer = try replicationGroupsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var replicationGroupsBuffer:[String]? = nil
                if let replicationGroupsContainer = replicationGroupsContainer {
                    replicationGroupsBuffer = [String]()
                    for stringContainer0 in replicationGroupsContainer {
                        replicationGroupsBuffer?.append(stringContainer0)
                    }
                }
                replicationGroups = replicationGroupsBuffer
            } else {
                replicationGroups = []
            }
        } else {
            replicationGroups = nil
        }
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension UserGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UserGroup(aRN: \(String(describing: aRN)), engine: \(String(describing: engine)), pendingChanges: \(String(describing: pendingChanges)), replicationGroups: \(String(describing: replicationGroups)), status: \(String(describing: status)), userGroupId: \(String(describing: userGroupId)), userIds: \(String(describing: userIds)))"}
}

public struct UserGroup: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the user group.</p>
    public let aRN: String?
    /// <p>The current supported value is Redis. </p>
    public let engine: String?
    /// <p>A list of updates being applied to the user groups.</p>
    public let pendingChanges: UserGroupPendingChanges?
    /// <p>A list of replication groups that the user group can access.</p>
    public let replicationGroups: [String]?
    /// <p>Indicates user group status. Can be "creating", "active", "modifying", "deleting".</p>
    public let status: String?
    /// <p>The ID of the user group.</p>
    public let userGroupId: String?
    /// <p>The list of user IDs that belong to the user group.</p>
    public let userIds: [String]?

    public init (
        aRN: String? = nil,
        engine: String? = nil,
        pendingChanges: UserGroupPendingChanges? = nil,
        replicationGroups: [String]? = nil,
        status: String? = nil,
        userGroupId: String? = nil,
        userIds: [String]? = nil
    )
    {
        self.aRN = aRN
        self.engine = engine
        self.pendingChanges = pendingChanges
        self.replicationGroups = replicationGroups
        self.status = status
        self.userGroupId = userGroupId
        self.userIds = userIds
    }
}

extension UserGroupAlreadyExistsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UserGroupAlreadyExistsFault(message: \(String(describing: message)))"}
}

extension UserGroupAlreadyExistsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<UserGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The user group with this ID already exists.</p>
public struct UserGroupAlreadyExistsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct UserGroupAlreadyExistsFaultBody: Equatable {
    public let message: String?
}

extension UserGroupAlreadyExistsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UserGroupNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UserGroupNotFoundFault(message: \(String(describing: message)))"}
}

extension UserGroupNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<UserGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The user group was not found or does not exist</p>
public struct UserGroupNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct UserGroupNotFoundFaultBody: Equatable {
    public let message: String?
}

extension UserGroupNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UserGroupPendingChanges: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case userIdsToAdd = "UserIdsToAdd"
        case userIdsToRemove = "UserIdsToRemove"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let userIdsToAdd = userIdsToAdd {
            var userIdsToAddContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserIdsToAdd"))
            for (index0, userid0) in userIdsToAdd.enumerated() {
                try userIdsToAddContainer.encode(userid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userIdsToRemove = userIdsToRemove {
            var userIdsToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserIdsToRemove"))
            for (index0, userid0) in userIdsToRemove.enumerated() {
                try userIdsToRemoveContainer.encode(userid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.userIdsToRemove) {
            struct KeyVal0{struct member{}}
            let userIdsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIdsToRemove)
            if let userIdsToRemoveWrappedContainer = userIdsToRemoveWrappedContainer {
                let userIdsToRemoveContainer = try userIdsToRemoveWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userIdsToRemoveBuffer:[String]? = nil
                if let userIdsToRemoveContainer = userIdsToRemoveContainer {
                    userIdsToRemoveBuffer = [String]()
                    for stringContainer0 in userIdsToRemoveContainer {
                        userIdsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                userIdsToRemove = userIdsToRemoveBuffer
            } else {
                userIdsToRemove = []
            }
        } else {
            userIdsToRemove = nil
        }
        if containerValues.contains(.userIdsToAdd) {
            struct KeyVal0{struct member{}}
            let userIdsToAddWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIdsToAdd)
            if let userIdsToAddWrappedContainer = userIdsToAddWrappedContainer {
                let userIdsToAddContainer = try userIdsToAddWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userIdsToAddBuffer:[String]? = nil
                if let userIdsToAddContainer = userIdsToAddContainer {
                    userIdsToAddBuffer = [String]()
                    for stringContainer0 in userIdsToAddContainer {
                        userIdsToAddBuffer?.append(stringContainer0)
                    }
                }
                userIdsToAdd = userIdsToAddBuffer
            } else {
                userIdsToAdd = []
            }
        } else {
            userIdsToAdd = nil
        }
    }
}

extension UserGroupPendingChanges: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UserGroupPendingChanges(userIdsToAdd: \(String(describing: userIdsToAdd)), userIdsToRemove: \(String(describing: userIdsToRemove)))"}
}

/// <p>Returns the updates being applied to the user group.</p>
public struct UserGroupPendingChanges: Equatable {
    /// <p>The list of user IDs to add.</p>
    public let userIdsToAdd: [String]?
    /// <p>The list of user IDs to remove.</p>
    public let userIdsToRemove: [String]?

    public init (
        userIdsToAdd: [String]? = nil,
        userIdsToRemove: [String]? = nil
    )
    {
        self.userIdsToAdd = userIdsToAdd
        self.userIdsToRemove = userIdsToRemove
    }
}

extension UserGroupQuotaExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UserGroupQuotaExceededFault(message: \(String(describing: message)))"}
}

extension UserGroupQuotaExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<UserGroupQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The number of users exceeds the user group limit.</p>
public struct UserGroupQuotaExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct UserGroupQuotaExceededFaultBody: Equatable {
    public let message: String?
}

extension UserGroupQuotaExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UserGroupsUpdateStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case userGroupIdsToAdd = "UserGroupIdsToAdd"
        case userGroupIdsToRemove = "UserGroupIdsToRemove"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let userGroupIdsToAdd = userGroupIdsToAdd {
            var userGroupIdsToAddContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserGroupIdsToAdd"))
            for (index0, usergroupid0) in userGroupIdsToAdd.enumerated() {
                try userGroupIdsToAddContainer.encode(usergroupid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userGroupIdsToRemove = userGroupIdsToRemove {
            var userGroupIdsToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserGroupIdsToRemove"))
            for (index0, usergroupid0) in userGroupIdsToRemove.enumerated() {
                try userGroupIdsToRemoveContainer.encode(usergroupid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.userGroupIdsToAdd) {
            struct KeyVal0{struct member{}}
            let userGroupIdsToAddWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIdsToAdd)
            if let userGroupIdsToAddWrappedContainer = userGroupIdsToAddWrappedContainer {
                let userGroupIdsToAddContainer = try userGroupIdsToAddWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userGroupIdsToAddBuffer:[String]? = nil
                if let userGroupIdsToAddContainer = userGroupIdsToAddContainer {
                    userGroupIdsToAddBuffer = [String]()
                    for stringContainer0 in userGroupIdsToAddContainer {
                        userGroupIdsToAddBuffer?.append(stringContainer0)
                    }
                }
                userGroupIdsToAdd = userGroupIdsToAddBuffer
            } else {
                userGroupIdsToAdd = []
            }
        } else {
            userGroupIdsToAdd = nil
        }
        if containerValues.contains(.userGroupIdsToRemove) {
            struct KeyVal0{struct member{}}
            let userGroupIdsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIdsToRemove)
            if let userGroupIdsToRemoveWrappedContainer = userGroupIdsToRemoveWrappedContainer {
                let userGroupIdsToRemoveContainer = try userGroupIdsToRemoveWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userGroupIdsToRemoveBuffer:[String]? = nil
                if let userGroupIdsToRemoveContainer = userGroupIdsToRemoveContainer {
                    userGroupIdsToRemoveBuffer = [String]()
                    for stringContainer0 in userGroupIdsToRemoveContainer {
                        userGroupIdsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                userGroupIdsToRemove = userGroupIdsToRemoveBuffer
            } else {
                userGroupIdsToRemove = []
            }
        } else {
            userGroupIdsToRemove = nil
        }
    }
}

extension UserGroupsUpdateStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UserGroupsUpdateStatus(userGroupIdsToAdd: \(String(describing: userGroupIdsToAdd)), userGroupIdsToRemove: \(String(describing: userGroupIdsToRemove)))"}
}

/// <p>The status of the user group update.</p>
public struct UserGroupsUpdateStatus: Equatable {
    /// <p>The list of user group IDs to add.</p>
    public let userGroupIdsToAdd: [String]?
    /// <p>The list of user group IDs to remove.</p>
    public let userGroupIdsToRemove: [String]?

    public init (
        userGroupIdsToAdd: [String]? = nil,
        userGroupIdsToRemove: [String]? = nil
    )
    {
        self.userGroupIdsToAdd = userGroupIdsToAdd
        self.userGroupIdsToRemove = userGroupIdsToRemove
    }
}

extension UserNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UserNotFoundFault(message: \(String(describing: message)))"}
}

extension UserNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<UserNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The user does not exist or could not be found.</p>
public struct UserNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct UserNotFoundFaultBody: Equatable {
    public let message: String?
}

extension UserNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UserQuotaExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UserQuotaExceededFault(message: \(String(describing: message)))"}
}

extension UserQuotaExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<UserQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The quota of users has been exceeded.</p>
public struct UserQuotaExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct UserQuotaExceededFaultBody: Equatable {
    public let message: String?
}

extension UserQuotaExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}
