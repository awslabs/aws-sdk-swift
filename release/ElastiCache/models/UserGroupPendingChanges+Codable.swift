// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UserGroupPendingChanges: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case userIdsToAdd = "UserIdsToAdd"
        case userIdsToRemove = "UserIdsToRemove"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let userIdsToAdd = userIdsToAdd {
            var userIdsToAddContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserIdsToAdd"))
            for (index0, userid0) in userIdsToAdd.enumerated() {
                try userIdsToAddContainer.encode(userid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userIdsToRemove = userIdsToRemove {
            var userIdsToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserIdsToRemove"))
            for (index0, userid0) in userIdsToRemove.enumerated() {
                try userIdsToRemoveContainer.encode(userid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.userIdsToRemove) {
            struct KeyVal0{struct member{}}
            let userIdsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIdsToRemove)
            if let userIdsToRemoveWrappedContainer = userIdsToRemoveWrappedContainer {
                let userIdsToRemoveContainer = try userIdsToRemoveWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userIdsToRemoveBuffer:[String]? = nil
                if let userIdsToRemoveContainer = userIdsToRemoveContainer {
                    userIdsToRemoveBuffer = [String]()
                    for stringContainer0 in userIdsToRemoveContainer {
                        userIdsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                userIdsToRemove = userIdsToRemoveBuffer
            } else {
                userIdsToRemove = []
            }
        } else {
            userIdsToRemove = nil
        }
        if containerValues.contains(.userIdsToAdd) {
            struct KeyVal0{struct member{}}
            let userIdsToAddWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIdsToAdd)
            if let userIdsToAddWrappedContainer = userIdsToAddWrappedContainer {
                let userIdsToAddContainer = try userIdsToAddWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userIdsToAddBuffer:[String]? = nil
                if let userIdsToAddContainer = userIdsToAddContainer {
                    userIdsToAddBuffer = [String]()
                    for stringContainer0 in userIdsToAddContainer {
                        userIdsToAddBuffer?.append(stringContainer0)
                    }
                }
                userIdsToAdd = userIdsToAddBuffer
            } else {
                userIdsToAdd = []
            }
        } else {
            userIdsToAdd = nil
        }
    }
}
