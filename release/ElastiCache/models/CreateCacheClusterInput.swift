// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the input of a CreateCacheCluster operation.</p>
public struct CreateCacheClusterInput: Equatable {
    /// <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or
    ///             created across multiple Availability Zones in the cluster's region.</p>
    ///         <p>This parameter is only supported for Memcached clusters.</p>
    ///         <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified,
    ///             ElastiCache assumes <code>single-az</code> mode.</p>
    public let aZMode: AZMode?
    /// <p>
    ///             <b>Reserved parameter.</b>
    ///             The password used to access a password protected server.</p>
    ///         <p>Password constraints:</p>
    ///         <ul>
    ///             <li>
    ///                <p>Must be only printable ASCII characters.</p>
    ///             </li>
    ///             <li>
    ///                <p>Must be at least 16 characters and no more than 128
    ///                 characters in length.</p>
    ///             </li>
    ///             <li>
    ///                <p>The only permitted printable special characters are !, &, #, $, ^, <, >, and -. Other printable special characters cannot be used in the AUTH token.</p>
    ///             </li>
    ///          </ul>
    ///         <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
    public let authToken: String?
    /// <p>This parameter is currently disabled.</p>
    public let autoMinorVersionUpgrade: Bool?
    /// <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p>
    ///          <p>
    ///             <b>Constraints:</b>
    ///          </p>
    ///          <ul>
    ///             <li>
    ///                <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p>
    ///             </li>
    ///             <li>
    ///                <p>The first character must be a letter.</p>
    ///             </li>
    ///             <li>
    ///                <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p>
    ///             </li>
    ///          </ul>
    public let cacheClusterId: String?
    /// <p>The compute and memory capacity of the nodes in the node group (shard).</p>
    ///         <p>The following node types are supported by ElastiCache.
    /// 				Generally speaking, the current generation types provide more memory and computational power
    /// 			at lower cost when compared to their equivalent previous generation counterparts.</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>General purpose:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 					
    ///     						           <p>
    ///                         <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						               <p>	
    ///                         <code>cache.m6g.large</code>,
    /// 							<code>cache.m6g.xlarge</code>,
    /// 							<code>cache.m6g.2xlarge</code>,
    /// 							<code>cache.m6g.4xlarge</code>,
    /// 							<code>cache.m6g.8xlarge</code>,
    /// 							<code>cache.m6g.12xlarge</code>,
    /// 							<code>cache.m6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    ///     					
    ///     					
    ///     					            <p>
    ///                         <b>M5 node types:</b>
    ///     						              <code>cache.m5.large</code>,
    ///     						<code>cache.m5.xlarge</code>,
    ///     						<code>cache.m5.2xlarge</code>,
    ///     						<code>cache.m5.4xlarge</code>,
    ///     						<code>cache.m5.12xlarge</code>,
    ///     						<code>cache.m5.24xlarge</code>
    ///     						
    ///     						
    ///     						           </p>	
    ///     						
    /// 						
    /// 						               <p>
    ///                         <b>M4 node types:</b>
    ///     						              <code>cache.m4.large</code>,
    ///     						<code>cache.m4.xlarge</code>,
    ///     						<code>cache.m4.2xlarge</code>,
    ///     						<code>cache.m4.4xlarge</code>,
    ///     						<code>cache.m4.10xlarge</code>
    ///                      </p>
    ///     					            <p>
    ///                         <b>T3 node types:</b>
    /// 					                   <code>cache.t3.micro</code>,
    ///     						<code>cache.t3.small</code>,
    ///     						<code>cache.t3.medium</code>
    ///                      </p>
    ///     								
    ///     						
    ///     				             <p>
    ///                         <b>T2 node types:</b>
    /// 					                   <code>cache.t2.micro</code>,
    ///     						<code>cache.t2.small</code>,
    ///     						<code>cache.t2.medium</code>
    ///                      </p>
    ///     						
    ///     						
    ///     						
    ///     						
    ///     						        </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 						               <p>
    ///                         <b>T1 node types:</b>
    /// 					                   <code>cache.t1.micro</code>
    ///                      </p>
    /// 					
    /// 						               <p>
    ///                         <b>M1 node types:</b>
    /// 						                  <code>cache.m1.small</code>,
    /// 						   <code>cache.m1.medium</code>,
    /// 						   <code>cache.m1.large</code>,
    /// 						   <code>cache.m1.xlarge</code>
    ///                      </p>
    /// 						
    /// 						               <p>
    ///                         <b>M3 node types:</b>
    ///     						              <code>cache.m3.medium</code>,
    ///     						<code>cache.m3.large</code>,
    ///     						<code>cache.m3.xlarge</code>,
    ///     						<code>cache.m3.2xlarge</code>
    ///                      </p>
    /// 						
    /// 						            </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Compute optimized:</p>
    ///
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 			                  <p>
    ///                         <b>C1 node types:</b>
    /// 			                     <code>cache.c1.xlarge</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Memory optimized:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 											          <p>
    ///                         <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						
    /// 						
    /// 						
    /// 						
    /// 						               <p>	
    /// 							                 <code>cache.r6g.large</code>,
    /// 							<code>cache.r6g.xlarge</code>,
    /// 							<code>cache.r6g.2xlarge</code>,
    /// 							<code>cache.r6g.4xlarge</code>,
    /// 							<code>cache.r6g.8xlarge</code>,
    /// 							<code>cache.r6g.12xlarge</code>,
    /// 							<code>cache.r6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    /// 					                <p>
    ///                         <b>R5 node types:</b>
    ///     					               <code>cache.r5.large</code>,
    ///     					   <code>cache.r5.xlarge</code>,
    ///     					   <code>cache.r5.2xlarge</code>,
    ///     					   <code>cache.r5.4xlarge</code>,
    ///     					   <code>cache.r5.12xlarge</code>,
    ///     					   <code>cache.r5.24xlarge</code>
    ///                      </p>
    /// 						
    ///     					            <p>
    ///                         <b>R4 node types:</b>
    ///     					               <code>cache.r4.large</code>,
    ///     					   <code>cache.r4.xlarge</code>,
    ///     					   <code>cache.r4.2xlarge</code>,
    ///     					   <code>cache.r4.4xlarge</code>,
    ///     					   <code>cache.r4.8xlarge</code>,
    ///     					   <code>cache.r4.16xlarge</code>
    ///                      </p>
    ///     					
    ///     					
    ///     					
    ///
    ///
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					         </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    ///                         <p>
    ///                         <b>M2 node types:</b>						
    ///     					               <code>cache.m2.xlarge</code>,
    ///     						<code>cache.m2.2xlarge</code>,
    ///     						<code>cache.m2.4xlarge</code>
    ///                      </p>
    ///     						
    ///     						           <p>
    ///                         <b>R3 node types:</b>
    ///     					               <code>cache.r3.large</code>,
    ///     						<code>cache.r3.xlarge</code>,
    ///     						<code>cache.r3.2xlarge</code>,
    ///     						<code>cache.r3.4xlarge</code>,
    ///     						<code>cache.r3.8xlarge</code>
    ///                      </p>
    ///     						
    ///     						        </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    /// 				
    /// 		       <p>
    ///             <b>Additional node type info</b>
    ///          </p>
    /// 		       <ul>
    ///             <li>
    ///                <p>All current generation instance types are created in Amazon VPC by default.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis configuration variables <code>appendonly</code> and
    /// 				<code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p>
    ///             </li>
    ///          </ul>
    public let cacheNodeType: String?
    /// <p>The name of the parameter group to associate with this cluster.
    ///             If this argument is omitted, the default parameter group for the specified engine is used.
    ///             You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.</p>
    public let cacheParameterGroupName: String?
    /// <p>A list of security group names to associate with this cluster.</p>
    ///         <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
    public let cacheSecurityGroupNames: [String]?
    /// <p>The name of the subnet group to be used for the cluster.</p>
    ///         <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
    ///         <important>
    ///             <p>If you're going to launch your cluster in an Amazon VPC,
    ///                 you need to create a subnet group before you start creating a cluster.
    ///                 For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p>
    ///          </important>
    public let cacheSubnetGroupName: String?
    /// <p>The name of the cache engine to be used for this cluster.</p>
    ///         <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code>
    ///          </p>
    public let engine: String?
    /// <p>The version number of the cache engine to be used for this cluster.
    ///             To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p>
    ///
    ///         <p>
    ///             <b>Important:</b> You can upgrade to a newer engine version (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version.
    ///             If you want to use an earlier engine version,
    ///             you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
    public let engineVersion: String?
    /// <p>Specifies the destination, format and type of the logs. </p>
    public let logDeliveryConfigurations: [LogDeliveryConfigurationRequest]?
    /// <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic
    ///           to which notifications are sent.</p>
    ///          <note>
    ///             <p>The Amazon SNS topic owner must be the same as the cluster owner.</p>
    ///          </note>
    public let notificationTopicArn: String?
    /// <p>The initial number of cache nodes that the cluster has.</p>
    ///         <p>For clusters running Redis, this value must be 1.
    ///     For clusters running Memcached, this value must be between 1 and 40.</p>
    ///         <p>If you need more than 40 nodes for your Memcached cluster,
    ///             please fill out the ElastiCache Limit Increase Request form at <a href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
    public let numCacheNodes: Int?
    /// <p>Specifies whether the nodes in the cluster are created in a single outpost or across multiple outposts.</p>
    public let outpostMode: OutpostMode?
    /// <p>The port number on which each of the cache nodes  accepts connections.</p>
    public let port: Int?
    /// <p>The EC2 Availability Zone in which the cluster is created.</p>
    ///         <p>All nodes belonging to this cluster are placed in the preferred Availability Zone.
    ///             If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p>
    ///         <p>Default: System chosen Availability Zone.</p>
    public let preferredAvailabilityZone: String?
    /// <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p>
    ///         <p>This option is only supported on Memcached.</p>
    ///         <note>
    ///             <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p>
    ///             <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p>
    ///         </note>
    ///         <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or
    ///             repeat the Availability Zone multiple times in the list.</p>
    ///         <p>Default: System chosen Availability Zones.</p>
    public let preferredAvailabilityZones: [String]?
    /// <p>Specifies the weekly time range during which maintenance
    ///             on the cluster is performed. It is specified as a range in
    ///             the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum
    ///             maintenance window is a 60 minute period.
    ///             Valid values for <code>ddd</code> are:</p>
    public let preferredMaintenanceWindow: String?
    /// <p>The outpost ARN in which the cache cluster is created.</p>
    public let preferredOutpostArn: String?
    /// <p>The outpost ARNs in which the cache cluster is created.</p>
    public let preferredOutpostArns: [String]?
    /// <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p>
    ///         <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p>
    ///         <note>
    ///             <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p>
    ///          </note>
    public let replicationGroupId: String?
    /// <p>One or more VPC security groups associated with the cluster.</p>
    ///         <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
    public let securityGroupIds: [String]?
    /// <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies
    ///             a Redis RDB snapshot file stored in Amazon S3.
    ///             The snapshot file is used to populate the node group (shard).
    ///             The Amazon S3 object name in the ARN cannot contain any commas.</p>
    ///         <note>
    ///             <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p>
    ///          </note>
    ///         <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code>
    ///          </p>
    public let snapshotArns: [String]?
    /// <p>The name of a Redis snapshot from which to restore data into the new node group (shard).
    ///             The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p>
    ///         <note>
    ///             <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p>
    ///          </note>
    public let snapshotName: String?
    /// <p>The number of days for which ElastiCache retains automatic snapshots before deleting them.
    ///           For example, if you set <code>SnapshotRetentionLimit</code> to 5,
    ///           a snapshot taken today is retained for 5 days before being deleted.</p>
    ///          <note>
    ///             <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p>
    ///          </note>
    ///          <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
    public let snapshotRetentionLimit: Int?
    /// <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p>
    ///          <p>Example: <code>05:00-09:00</code>
    ///          </p>
    ///          <p>If you do not specify this parameter, ElastiCache  automatically chooses an appropriate time range.</p>
    ///         <note>
    ///             <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p>
    ///          </note>
    public let snapshotWindow: String?
    /// <p>A list of tags to be added to this resource.</p>
    public let tags: [Tag]?

    public init (
        aZMode: AZMode? = nil,
        authToken: String? = nil,
        autoMinorVersionUpgrade: Bool? = nil,
        cacheClusterId: String? = nil,
        cacheNodeType: String? = nil,
        cacheParameterGroupName: String? = nil,
        cacheSecurityGroupNames: [String]? = nil,
        cacheSubnetGroupName: String? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        logDeliveryConfigurations: [LogDeliveryConfigurationRequest]? = nil,
        notificationTopicArn: String? = nil,
        numCacheNodes: Int? = nil,
        outpostMode: OutpostMode? = nil,
        port: Int? = nil,
        preferredAvailabilityZone: String? = nil,
        preferredAvailabilityZones: [String]? = nil,
        preferredMaintenanceWindow: String? = nil,
        preferredOutpostArn: String? = nil,
        preferredOutpostArns: [String]? = nil,
        replicationGroupId: String? = nil,
        securityGroupIds: [String]? = nil,
        snapshotArns: [String]? = nil,
        snapshotName: String? = nil,
        snapshotRetentionLimit: Int? = nil,
        snapshotWindow: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.aZMode = aZMode
        self.authToken = authToken
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.cacheClusterId = cacheClusterId
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSecurityGroupNames = cacheSecurityGroupNames
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.engine = engine
        self.engineVersion = engineVersion
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.notificationTopicArn = notificationTopicArn
        self.numCacheNodes = numCacheNodes
        self.outpostMode = outpostMode
        self.port = port
        self.preferredAvailabilityZone = preferredAvailabilityZone
        self.preferredAvailabilityZones = preferredAvailabilityZones
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.preferredOutpostArn = preferredOutpostArn
        self.preferredOutpostArns = preferredOutpostArns
        self.replicationGroupId = replicationGroupId
        self.securityGroupIds = securityGroupIds
        self.snapshotArns = snapshotArns
        self.snapshotName = snapshotName
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
        self.tags = tags
    }
}
