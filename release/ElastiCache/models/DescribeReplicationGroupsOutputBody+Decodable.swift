// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReplicationGroupsOutputBody: Equatable {
    public let marker: String?
    public let replicationGroups: [ReplicationGroup]?
}

extension DescribeReplicationGroupsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case replicationGroups = "ReplicationGroups"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeReplicationGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.replicationGroups) {
            struct KeyVal0{struct ReplicationGroup{}}
            let replicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReplicationGroup>.CodingKeys.self, forKey: .replicationGroups)
            if let replicationGroupsWrappedContainer = replicationGroupsWrappedContainer {
                let replicationGroupsContainer = try replicationGroupsWrappedContainer.decodeIfPresent([ReplicationGroup].self, forKey: .member)
                var replicationGroupsBuffer:[ReplicationGroup]? = nil
                if let replicationGroupsContainer = replicationGroupsContainer {
                    replicationGroupsBuffer = [ReplicationGroup]()
                    for structureContainer0 in replicationGroupsContainer {
                        replicationGroupsBuffer?.append(structureContainer0)
                    }
                }
                replicationGroups = replicationGroupsBuffer
            } else {
                replicationGroups = []
            }
        } else {
            replicationGroups = nil
        }
    }
}
