// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigTypeData: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case antennaDownlinkConfig
        case antennaDownlinkDemodDecodeConfig
        case antennaUplinkConfig
        case dataflowEndpointConfig
        case s3RecordingConfig
        case sdkUnknown
        case trackingConfig
        case uplinkEchoConfig
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .antennaDownlinkConfig(antennaDownlinkConfig):
                if let antennaDownlinkConfig = antennaDownlinkConfig {
                    try container.encode(antennaDownlinkConfig, forKey: .antennaDownlinkConfig)
                }
            case let .antennaDownlinkDemodDecodeConfig(antennaDownlinkDemodDecodeConfig):
                if let antennaDownlinkDemodDecodeConfig = antennaDownlinkDemodDecodeConfig {
                    try container.encode(antennaDownlinkDemodDecodeConfig, forKey: .antennaDownlinkDemodDecodeConfig)
                }
            case let .antennaUplinkConfig(antennaUplinkConfig):
                if let antennaUplinkConfig = antennaUplinkConfig {
                    try container.encode(antennaUplinkConfig, forKey: .antennaUplinkConfig)
                }
            case let .dataflowEndpointConfig(dataflowEndpointConfig):
                if let dataflowEndpointConfig = dataflowEndpointConfig {
                    try container.encode(dataflowEndpointConfig, forKey: .dataflowEndpointConfig)
                }
            case let .s3RecordingConfig(s3RecordingConfig):
                if let s3RecordingConfig = s3RecordingConfig {
                    try container.encode(s3RecordingConfig, forKey: .s3RecordingConfig)
                }
            case let .trackingConfig(trackingConfig):
                if let trackingConfig = trackingConfig {
                    try container.encode(trackingConfig, forKey: .trackingConfig)
                }
            case let .uplinkEchoConfig(uplinkEchoConfig):
                if let uplinkEchoConfig = uplinkEchoConfig {
                    try container.encode(uplinkEchoConfig, forKey: .uplinkEchoConfig)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let antennaDownlinkConfigDecoded = try values.decodeIfPresent(AntennaDownlinkConfig.self, forKey: .antennaDownlinkConfig)
        if let antennaDownlinkConfig = antennaDownlinkConfigDecoded {
            self = .antennaDownlinkConfig(antennaDownlinkConfig)
            return
        }
        let trackingConfigDecoded = try values.decodeIfPresent(TrackingConfig.self, forKey: .trackingConfig)
        if let trackingConfig = trackingConfigDecoded {
            self = .trackingConfig(trackingConfig)
            return
        }
        let dataflowEndpointConfigDecoded = try values.decodeIfPresent(DataflowEndpointConfig.self, forKey: .dataflowEndpointConfig)
        if let dataflowEndpointConfig = dataflowEndpointConfigDecoded {
            self = .dataflowEndpointConfig(dataflowEndpointConfig)
            return
        }
        let antennaDownlinkDemodDecodeConfigDecoded = try values.decodeIfPresent(AntennaDownlinkDemodDecodeConfig.self, forKey: .antennaDownlinkDemodDecodeConfig)
        if let antennaDownlinkDemodDecodeConfig = antennaDownlinkDemodDecodeConfigDecoded {
            self = .antennaDownlinkDemodDecodeConfig(antennaDownlinkDemodDecodeConfig)
            return
        }
        let antennaUplinkConfigDecoded = try values.decodeIfPresent(AntennaUplinkConfig.self, forKey: .antennaUplinkConfig)
        if let antennaUplinkConfig = antennaUplinkConfigDecoded {
            self = .antennaUplinkConfig(antennaUplinkConfig)
            return
        }
        let uplinkEchoConfigDecoded = try values.decodeIfPresent(UplinkEchoConfig.self, forKey: .uplinkEchoConfig)
        if let uplinkEchoConfig = uplinkEchoConfigDecoded {
            self = .uplinkEchoConfig(uplinkEchoConfig)
            return
        }
        let s3RecordingConfigDecoded = try values.decodeIfPresent(S3RecordingConfig.self, forKey: .s3RecordingConfig)
        if let s3RecordingConfig = s3RecordingConfigDecoded {
            self = .s3RecordingConfig(s3RecordingConfig)
            return
        }
        self = .sdkUnknown("")
    }
}
