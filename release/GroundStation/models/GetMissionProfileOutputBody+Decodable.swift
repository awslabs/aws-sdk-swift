// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMissionProfileOutputBody: Equatable {
    public let missionProfileId: String?
    public let missionProfileArn: String?
    public let name: String?
    public let region: String?
    public let contactPrePassDurationSeconds: Int?
    public let contactPostPassDurationSeconds: Int?
    public let minimumViableContactDurationSeconds: Int?
    public let dataflowEdges: [[String]?]?
    public let trackingConfigArn: String?
    public let tags: [String:String]?
}

extension GetMissionProfileOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case contactPostPassDurationSeconds
        case contactPrePassDurationSeconds
        case dataflowEdges
        case minimumViableContactDurationSeconds
        case missionProfileArn
        case missionProfileId
        case name
        case region
        case tags
        case trackingConfigArn
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let missionProfileIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .missionProfileId)
        missionProfileId = missionProfileIdDecoded
        let missionProfileArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .missionProfileArn)
        missionProfileArn = missionProfileArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let contactPrePassDurationSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .contactPrePassDurationSeconds)
        contactPrePassDurationSeconds = contactPrePassDurationSecondsDecoded
        let contactPostPassDurationSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .contactPostPassDurationSeconds)
        contactPostPassDurationSeconds = contactPostPassDurationSecondsDecoded
        let minimumViableContactDurationSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minimumViableContactDurationSeconds)
        minimumViableContactDurationSeconds = minimumViableContactDurationSecondsDecoded
        let dataflowEdgesContainer = try containerValues.decodeIfPresent([[String]?].self, forKey: .dataflowEdges)
        var dataflowEdgesDecoded0:[[String]?]? = nil
        if let dataflowEdgesContainer = dataflowEdgesContainer {
            dataflowEdgesDecoded0 = [[String]?]()
            for list0 in dataflowEdgesContainer {
                var list0Decoded0 = [String]()
                if let list0 = list0 {
                    for string1 in list0 {
                        list0Decoded0.append(string1)
                    }
                }
                dataflowEdgesDecoded0?.append(list0Decoded0)
            }
        }
        dataflowEdges = dataflowEdgesDecoded0
        let trackingConfigArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trackingConfigArn)
        trackingConfigArn = trackingConfigArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, string0) in tagsContainer {
                tagsDecoded0?[key0] = string0
            }
        }
        tags = tagsDecoded0
    }
}
