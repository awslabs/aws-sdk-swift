// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListAccessesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListAccessesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListAccessesOutputResponse`
extension TransferClient {
    public func listAccessesPaginated(input: ListAccessesInput) -> ClientRuntime.PaginatorSequence<ListAccessesInput, ListAccessesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAccessesInput, ListAccessesOutputResponse>(input: input, inputKey: \ListAccessesInput.nextToken, outputKey: \ListAccessesOutputResponse.nextToken, paginationFunction: self.listAccesses(input:))
    }
}

extension ListAccessesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAccessesInput {
        return ListAccessesInput(
            maxResults: self.maxResults,
            nextToken: token,
            serverId: self.serverId
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listAccessesPaginated`
/// to access the nested member `[TransferClientTypes.ListedAccess]`
/// - Returns: `[TransferClientTypes.ListedAccess]`
extension PaginatorSequence where Input == ListAccessesInput, Output == ListAccessesOutputResponse {
    public func accesses() async throws -> [TransferClientTypes.ListedAccess] {
        return try await self.asyncCompactMap { item in item.accesses }
    }
}

/// Paginate over `[ListAgreementsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListAgreementsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListAgreementsOutputResponse`
extension TransferClient {
    public func listAgreementsPaginated(input: ListAgreementsInput) -> ClientRuntime.PaginatorSequence<ListAgreementsInput, ListAgreementsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAgreementsInput, ListAgreementsOutputResponse>(input: input, inputKey: \ListAgreementsInput.nextToken, outputKey: \ListAgreementsOutputResponse.nextToken, paginationFunction: self.listAgreements(input:))
    }
}

extension ListAgreementsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAgreementsInput {
        return ListAgreementsInput(
            maxResults: self.maxResults,
            nextToken: token,
            serverId: self.serverId
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listAgreementsPaginated`
/// to access the nested member `[TransferClientTypes.ListedAgreement]`
/// - Returns: `[TransferClientTypes.ListedAgreement]`
extension PaginatorSequence where Input == ListAgreementsInput, Output == ListAgreementsOutputResponse {
    public func agreements() async throws -> [TransferClientTypes.ListedAgreement] {
        return try await self.asyncCompactMap { item in item.agreements }
    }
}

/// Paginate over `[ListCertificatesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListCertificatesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListCertificatesOutputResponse`
extension TransferClient {
    public func listCertificatesPaginated(input: ListCertificatesInput) -> ClientRuntime.PaginatorSequence<ListCertificatesInput, ListCertificatesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListCertificatesInput, ListCertificatesOutputResponse>(input: input, inputKey: \ListCertificatesInput.nextToken, outputKey: \ListCertificatesOutputResponse.nextToken, paginationFunction: self.listCertificates(input:))
    }
}

extension ListCertificatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCertificatesInput {
        return ListCertificatesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listCertificatesPaginated`
/// to access the nested member `[TransferClientTypes.ListedCertificate]`
/// - Returns: `[TransferClientTypes.ListedCertificate]`
extension PaginatorSequence where Input == ListCertificatesInput, Output == ListCertificatesOutputResponse {
    public func certificates() async throws -> [TransferClientTypes.ListedCertificate] {
        return try await self.asyncCompactMap { item in item.certificates }
    }
}

/// Paginate over `[ListConnectorsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListConnectorsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListConnectorsOutputResponse`
extension TransferClient {
    public func listConnectorsPaginated(input: ListConnectorsInput) -> ClientRuntime.PaginatorSequence<ListConnectorsInput, ListConnectorsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListConnectorsInput, ListConnectorsOutputResponse>(input: input, inputKey: \ListConnectorsInput.nextToken, outputKey: \ListConnectorsOutputResponse.nextToken, paginationFunction: self.listConnectors(input:))
    }
}

extension ListConnectorsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListConnectorsInput {
        return ListConnectorsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listConnectorsPaginated`
/// to access the nested member `[TransferClientTypes.ListedConnector]`
/// - Returns: `[TransferClientTypes.ListedConnector]`
extension PaginatorSequence where Input == ListConnectorsInput, Output == ListConnectorsOutputResponse {
    public func connectors() async throws -> [TransferClientTypes.ListedConnector] {
        return try await self.asyncCompactMap { item in item.connectors }
    }
}

/// Paginate over `[ListExecutionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListExecutionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListExecutionsOutputResponse`
extension TransferClient {
    public func listExecutionsPaginated(input: ListExecutionsInput) -> ClientRuntime.PaginatorSequence<ListExecutionsInput, ListExecutionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListExecutionsInput, ListExecutionsOutputResponse>(input: input, inputKey: \ListExecutionsInput.nextToken, outputKey: \ListExecutionsOutputResponse.nextToken, paginationFunction: self.listExecutions(input:))
    }
}

extension ListExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListExecutionsInput {
        return ListExecutionsInput(
            maxResults: self.maxResults,
            nextToken: token,
            workflowId: self.workflowId
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listExecutionsPaginated`
/// to access the nested member `[TransferClientTypes.ListedExecution]`
/// - Returns: `[TransferClientTypes.ListedExecution]`
extension PaginatorSequence where Input == ListExecutionsInput, Output == ListExecutionsOutputResponse {
    public func executions() async throws -> [TransferClientTypes.ListedExecution] {
        return try await self.asyncCompactMap { item in item.executions }
    }
}

/// Paginate over `[ListProfilesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListProfilesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListProfilesOutputResponse`
extension TransferClient {
    public func listProfilesPaginated(input: ListProfilesInput) -> ClientRuntime.PaginatorSequence<ListProfilesInput, ListProfilesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListProfilesInput, ListProfilesOutputResponse>(input: input, inputKey: \ListProfilesInput.nextToken, outputKey: \ListProfilesOutputResponse.nextToken, paginationFunction: self.listProfiles(input:))
    }
}

extension ListProfilesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListProfilesInput {
        return ListProfilesInput(
            maxResults: self.maxResults,
            nextToken: token,
            profileType: self.profileType
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listProfilesPaginated`
/// to access the nested member `[TransferClientTypes.ListedProfile]`
/// - Returns: `[TransferClientTypes.ListedProfile]`
extension PaginatorSequence where Input == ListProfilesInput, Output == ListProfilesOutputResponse {
    public func profiles() async throws -> [TransferClientTypes.ListedProfile] {
        return try await self.asyncCompactMap { item in item.profiles }
    }
}

/// Paginate over `[ListSecurityPoliciesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListSecurityPoliciesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListSecurityPoliciesOutputResponse`
extension TransferClient {
    public func listSecurityPoliciesPaginated(input: ListSecurityPoliciesInput) -> ClientRuntime.PaginatorSequence<ListSecurityPoliciesInput, ListSecurityPoliciesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListSecurityPoliciesInput, ListSecurityPoliciesOutputResponse>(input: input, inputKey: \ListSecurityPoliciesInput.nextToken, outputKey: \ListSecurityPoliciesOutputResponse.nextToken, paginationFunction: self.listSecurityPolicies(input:))
    }
}

extension ListSecurityPoliciesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSecurityPoliciesInput {
        return ListSecurityPoliciesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listSecurityPoliciesPaginated`
/// to access the nested member `[Swift.String]`
/// - Returns: `[Swift.String]`
extension PaginatorSequence where Input == ListSecurityPoliciesInput, Output == ListSecurityPoliciesOutputResponse {
    public func securityPolicyNames() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.securityPolicyNames }
    }
}

/// Paginate over `[ListServersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListServersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListServersOutputResponse`
extension TransferClient {
    public func listServersPaginated(input: ListServersInput) -> ClientRuntime.PaginatorSequence<ListServersInput, ListServersOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListServersInput, ListServersOutputResponse>(input: input, inputKey: \ListServersInput.nextToken, outputKey: \ListServersOutputResponse.nextToken, paginationFunction: self.listServers(input:))
    }
}

extension ListServersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListServersInput {
        return ListServersInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listServersPaginated`
/// to access the nested member `[TransferClientTypes.ListedServer]`
/// - Returns: `[TransferClientTypes.ListedServer]`
extension PaginatorSequence where Input == ListServersInput, Output == ListServersOutputResponse {
    public func servers() async throws -> [TransferClientTypes.ListedServer] {
        return try await self.asyncCompactMap { item in item.servers }
    }
}

/// Paginate over `[ListTagsForResourceOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListTagsForResourceInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListTagsForResourceOutputResponse`
extension TransferClient {
    public func listTagsForResourcePaginated(input: ListTagsForResourceInput) -> ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse>(input: input, inputKey: \ListTagsForResourceInput.nextToken, outputKey: \ListTagsForResourceOutputResponse.nextToken, paginationFunction: self.listTagsForResource(input:))
    }
}

extension ListTagsForResourceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTagsForResourceInput {
        return ListTagsForResourceInput(
            arn: self.arn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listTagsForResourcePaginated`
/// to access the nested member `[TransferClientTypes.Tag]`
/// - Returns: `[TransferClientTypes.Tag]`
extension PaginatorSequence where Input == ListTagsForResourceInput, Output == ListTagsForResourceOutputResponse {
    public func tags() async throws -> [TransferClientTypes.Tag] {
        return try await self.asyncCompactMap { item in item.tags }
    }
}

/// Paginate over `[ListUsersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListUsersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListUsersOutputResponse`
extension TransferClient {
    public func listUsersPaginated(input: ListUsersInput) -> ClientRuntime.PaginatorSequence<ListUsersInput, ListUsersOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListUsersInput, ListUsersOutputResponse>(input: input, inputKey: \ListUsersInput.nextToken, outputKey: \ListUsersOutputResponse.nextToken, paginationFunction: self.listUsers(input:))
    }
}

extension ListUsersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListUsersInput {
        return ListUsersInput(
            maxResults: self.maxResults,
            nextToken: token,
            serverId: self.serverId
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listUsersPaginated`
/// to access the nested member `[TransferClientTypes.ListedUser]`
/// - Returns: `[TransferClientTypes.ListedUser]`
extension PaginatorSequence where Input == ListUsersInput, Output == ListUsersOutputResponse {
    public func users() async throws -> [TransferClientTypes.ListedUser] {
        return try await self.asyncCompactMap { item in item.users }
    }
}

/// Paginate over `[ListWorkflowsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListWorkflowsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListWorkflowsOutputResponse`
extension TransferClient {
    public func listWorkflowsPaginated(input: ListWorkflowsInput) -> ClientRuntime.PaginatorSequence<ListWorkflowsInput, ListWorkflowsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListWorkflowsInput, ListWorkflowsOutputResponse>(input: input, inputKey: \ListWorkflowsInput.nextToken, outputKey: \ListWorkflowsOutputResponse.nextToken, paginationFunction: self.listWorkflows(input:))
    }
}

extension ListWorkflowsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListWorkflowsInput {
        return ListWorkflowsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listWorkflowsPaginated`
/// to access the nested member `[TransferClientTypes.ListedWorkflow]`
/// - Returns: `[TransferClientTypes.ListedWorkflow]`
extension PaginatorSequence where Input == ListWorkflowsInput, Output == ListWorkflowsOutputResponse {
    public func workflows() async throws -> [TransferClientTypes.ListedWorkflow] {
        return try await self.asyncCompactMap { item in item.workflows }
    }
}
