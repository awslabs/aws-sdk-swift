// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QueueInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case queuedIngestion = "QueuedIngestion"
        case waitingOnIngestion = "WaitingOnIngestion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queuedIngestion = queuedIngestion {
            try encodeContainer.encode(queuedIngestion, forKey: .queuedIngestion)
        }
        if let waitingOnIngestion = waitingOnIngestion {
            try encodeContainer.encode(waitingOnIngestion, forKey: .waitingOnIngestion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let waitingOnIngestionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .waitingOnIngestion)
        waitingOnIngestion = waitingOnIngestionDecoded
        let queuedIngestionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queuedIngestion)
        queuedIngestion = queuedIngestionDecoded
    }
}
