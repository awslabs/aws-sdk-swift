// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataSource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alternateDataSourceParameters = "AlternateDataSourceParameters"
        case arn = "Arn"
        case createdTime = "CreatedTime"
        case dataSourceId = "DataSourceId"
        case dataSourceParameters = "DataSourceParameters"
        case errorInfo = "ErrorInfo"
        case lastUpdatedTime = "LastUpdatedTime"
        case name = "Name"
        case sslProperties = "SslProperties"
        case status = "Status"
        case type = "Type"
        case vpcConnectionProperties = "VpcConnectionProperties"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alternateDataSourceParameters = alternateDataSourceParameters {
            var alternateDataSourceParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alternateDataSourceParameters)
            for datasourceparameterslist0 in alternateDataSourceParameters {
                try alternateDataSourceParametersContainer.encode(datasourceparameterslist0)
            }
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let dataSourceParameters = dataSourceParameters {
            try encodeContainer.encode(dataSourceParameters, forKey: .dataSourceParameters)
        }
        if let errorInfo = errorInfo {
            try encodeContainer.encode(errorInfo, forKey: .errorInfo)
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let sslProperties = sslProperties {
            try encodeContainer.encode(sslProperties, forKey: .sslProperties)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let vpcConnectionProperties = vpcConnectionProperties {
            try encodeContainer.encode(vpcConnectionProperties, forKey: .vpcConnectionProperties)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DataSourceType.self, forKey: .type)
        type = typeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ResourceStatus.self, forKey: .status)
        status = statusDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let dataSourceParametersDecoded = try containerValues.decodeIfPresent(DataSourceParameters.self, forKey: .dataSourceParameters)
        dataSourceParameters = dataSourceParametersDecoded
        let alternateDataSourceParametersContainer = try containerValues.decodeIfPresent([DataSourceParameters].self, forKey: .alternateDataSourceParameters)
        var alternateDataSourceParametersDecoded0:[DataSourceParameters]? = nil
        if let alternateDataSourceParametersContainer = alternateDataSourceParametersContainer {
            alternateDataSourceParametersDecoded0 = [DataSourceParameters]()
            for union0 in alternateDataSourceParametersContainer {
                alternateDataSourceParametersDecoded0?.append(union0)
            }
        }
        alternateDataSourceParameters = alternateDataSourceParametersDecoded0
        let vpcConnectionPropertiesDecoded = try containerValues.decodeIfPresent(VpcConnectionProperties.self, forKey: .vpcConnectionProperties)
        vpcConnectionProperties = vpcConnectionPropertiesDecoded
        let sslPropertiesDecoded = try containerValues.decodeIfPresent(SslProperties.self, forKey: .sslProperties)
        sslProperties = sslPropertiesDecoded
        let errorInfoDecoded = try containerValues.decodeIfPresent(DataSourceErrorInfo.self, forKey: .errorInfo)
        errorInfo = errorInfoDecoded
    }
}
