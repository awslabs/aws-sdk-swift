// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataSetReference: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataSetArn = "DataSetArn"
        case dataSetPlaceholder = "DataSetPlaceholder"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSetArn = dataSetArn {
            try encodeContainer.encode(dataSetArn, forKey: .dataSetArn)
        }
        if let dataSetPlaceholder = dataSetPlaceholder {
            try encodeContainer.encode(dataSetPlaceholder, forKey: .dataSetPlaceholder)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSetPlaceholderDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataSetPlaceholder)
        dataSetPlaceholder = dataSetPlaceholderDecoded
        let dataSetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataSetArn)
        dataSetArn = dataSetArnDecoded
    }
}
