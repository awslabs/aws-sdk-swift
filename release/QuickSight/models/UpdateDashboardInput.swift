// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateDashboardInput: Equatable {
    /// <p>The ID of the AWS account that contains the dashboard that you're
    ///             updating.</p>
    public let awsAccountId: String?
    /// <p>The ID for the dashboard.</p>
    public let dashboardId: String?
    /// <p>Options for publishing the dashboard when you create it:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>AvailabilityStatus</code> for <code>AdHocFilteringOption</code> - This
    ///                     status can be either <code>ENABLED</code> or <code>DISABLED</code>. When this is
    ///                     set to <code>DISABLED</code>, QuickSight disables the left filter pane on the
    ///                     published dashboard, which can be used for ad hoc (one-time) filtering. This
    ///                     option is <code>ENABLED</code> by default. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>AvailabilityStatus</code> for <code>ExportToCSVOption</code> - This
    ///                     status can be either <code>ENABLED</code> or <code>DISABLED</code>. The visual
    ///                     option to export data to .CSV format isn't enabled when this is set to
    ///                     <code>DISABLED</code>. This option is <code>ENABLED</code> by default. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>VisibilityState</code> for <code>SheetControlsOption</code> - This
    ///                     visibility state can be either <code>COLLAPSED</code> or <code>EXPANDED</code>.
    ///                     This option is <code>COLLAPSED</code> by default. </p>
    ///             </li>
    ///          </ul>
    public let dashboardPublishOptions: DashboardPublishOptions?
    /// <p>The display name of the dashboard.</p>
    public let name: String?
    /// <p>A structure that contains the parameters of the dashboard. These are parameter
    ///             overrides for a dashboard. A dashboard can have any type of parameters, and some
    ///             parameters might accept multiple values.</p>
    public let parameters: Parameters?
    /// <p>The entity that you are using as a source when you update the dashboard. In
    ///             <code>SourceEntity</code>, you specify the type of object you're using as source. You
    ///             can only update a dashboard from a template, so you use a <code>SourceTemplate</code>
    ///             entity. If you need to update a dashboard from an analysis, first convert the analysis
    ///             to a template by using the <a>CreateTemplate</a> API operation. For
    ///             <code>SourceTemplate</code>, specify the Amazon Resource Name (ARN) of the source
    ///             template. The <code>SourceTemplate</code> ARN can contain any AWS Account and any
    ///             QuickSight-supported AWS Region. </p>
    ///         <p>Use the <code>DataSetReferences</code> entity within <code>SourceTemplate</code> to
    ///             list the replacement datasets for the placeholders listed in the original. The schema in
    ///             each dataset must match its placeholder. </p>
    public let sourceEntity: DashboardSourceEntity?
    /// <p>The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If
    ///             you add a value for this field, it overrides the value that was originally associated
    ///             with the entity. The theme ARN must exist in the same AWS account where you create the
    ///             dashboard.</p>
    public let themeArn: String?
    /// <p>A description for the first version of the dashboard being created.</p>
    public let versionDescription: String?

    public init (
        awsAccountId: String? = nil,
        dashboardId: String? = nil,
        dashboardPublishOptions: DashboardPublishOptions? = nil,
        name: String? = nil,
        parameters: Parameters? = nil,
        sourceEntity: DashboardSourceEntity? = nil,
        themeArn: String? = nil,
        versionDescription: String? = nil
    )
    {
        self.awsAccountId = awsAccountId
        self.dashboardId = dashboardId
        self.dashboardPublishOptions = dashboardPublishOptions
        self.name = name
        self.parameters = parameters
        self.sourceEntity = sourceEntity
        self.themeArn = themeArn
        self.versionDescription = versionDescription
    }
}
