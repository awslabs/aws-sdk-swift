// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LogicalTableSource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case joinInstruction = "JoinInstruction"
        case physicalTableId = "PhysicalTableId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let joinInstruction = joinInstruction {
            try encodeContainer.encode(joinInstruction, forKey: .joinInstruction)
        }
        if let physicalTableId = physicalTableId {
            try encodeContainer.encode(physicalTableId, forKey: .physicalTableId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let joinInstructionDecoded = try containerValues.decodeIfPresent(JoinInstruction.self, forKey: .joinInstruction)
        joinInstruction = joinInstructionDecoded
        let physicalTableIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .physicalTableId)
        physicalTableId = physicalTableIdDecoded
    }
}
