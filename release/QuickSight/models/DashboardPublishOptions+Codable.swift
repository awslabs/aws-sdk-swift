// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DashboardPublishOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adHocFilteringOption = "AdHocFilteringOption"
        case exportToCSVOption = "ExportToCSVOption"
        case sheetControlsOption = "SheetControlsOption"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adHocFilteringOption = adHocFilteringOption {
            try encodeContainer.encode(adHocFilteringOption, forKey: .adHocFilteringOption)
        }
        if let exportToCSVOption = exportToCSVOption {
            try encodeContainer.encode(exportToCSVOption, forKey: .exportToCSVOption)
        }
        if let sheetControlsOption = sheetControlsOption {
            try encodeContainer.encode(sheetControlsOption, forKey: .sheetControlsOption)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adHocFilteringOptionDecoded = try containerValues.decodeIfPresent(AdHocFilteringOption.self, forKey: .adHocFilteringOption)
        adHocFilteringOption = adHocFilteringOptionDecoded
        let exportToCSVOptionDecoded = try containerValues.decodeIfPresent(ExportToCSVOption.self, forKey: .exportToCSVOption)
        exportToCSVOption = exportToCSVOptionDecoded
        let sheetControlsOptionDecoded = try containerValues.decodeIfPresent(SheetControlsOption.self, forKey: .sheetControlsOption)
        sheetControlsOption = sheetControlsOptionDecoded
    }
}
