// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataSetSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case columnLevelPermissionRulesApplied = "ColumnLevelPermissionRulesApplied"
        case createdTime = "CreatedTime"
        case dataSetId = "DataSetId"
        case importMode = "ImportMode"
        case lastUpdatedTime = "LastUpdatedTime"
        case name = "Name"
        case rowLevelPermissionDataSet = "RowLevelPermissionDataSet"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if columnLevelPermissionRulesApplied != false {
            try encodeContainer.encode(columnLevelPermissionRulesApplied, forKey: .columnLevelPermissionRulesApplied)
        }
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let dataSetId = dataSetId {
            try encodeContainer.encode(dataSetId, forKey: .dataSetId)
        }
        if let importMode = importMode {
            try encodeContainer.encode(importMode.rawValue, forKey: .importMode)
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rowLevelPermissionDataSet = rowLevelPermissionDataSet {
            try encodeContainer.encode(rowLevelPermissionDataSet, forKey: .rowLevelPermissionDataSet)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let dataSetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataSetId)
        dataSetId = dataSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let importModeDecoded = try containerValues.decodeIfPresent(DataSetImportMode.self, forKey: .importMode)
        importMode = importModeDecoded
        let rowLevelPermissionDataSetDecoded = try containerValues.decodeIfPresent(RowLevelPermissionDataSet.self, forKey: .rowLevelPermissionDataSet)
        rowLevelPermissionDataSet = rowLevelPermissionDataSetDecoded
        let columnLevelPermissionRulesAppliedDecoded = try containerValues.decode(Bool.self, forKey: .columnLevelPermissionRulesApplied)
        columnLevelPermissionRulesApplied = columnLevelPermissionRulesAppliedDecoded
    }
}
