// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CalculatedColumn: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case columnId = "ColumnId"
        case columnName = "ColumnName"
        case expression = "Expression"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columnId = columnId {
            try encodeContainer.encode(columnId, forKey: .columnId)
        }
        if let columnName = columnName {
            try encodeContainer.encode(columnName, forKey: .columnName)
        }
        if let expression = expression {
            try encodeContainer.encode(expression, forKey: .expression)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .columnName)
        columnName = columnNameDecoded
        let columnIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .columnId)
        columnId = columnIdDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .expression)
        expression = expressionDecoded
    }
}
