// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Parameters: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dateTimeParameters = "DateTimeParameters"
        case decimalParameters = "DecimalParameters"
        case integerParameters = "IntegerParameters"
        case stringParameters = "StringParameters"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dateTimeParameters = dateTimeParameters {
            var dateTimeParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dateTimeParameters)
            for datetimeparameterlist0 in dateTimeParameters {
                try dateTimeParametersContainer.encode(datetimeparameterlist0)
            }
        }
        if let decimalParameters = decimalParameters {
            var decimalParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .decimalParameters)
            for decimalparameterlist0 in decimalParameters {
                try decimalParametersContainer.encode(decimalparameterlist0)
            }
        }
        if let integerParameters = integerParameters {
            var integerParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .integerParameters)
            for integerparameterlist0 in integerParameters {
                try integerParametersContainer.encode(integerparameterlist0)
            }
        }
        if let stringParameters = stringParameters {
            var stringParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stringParameters)
            for stringparameterlist0 in stringParameters {
                try stringParametersContainer.encode(stringparameterlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stringParametersContainer = try containerValues.decodeIfPresent([StringParameter].self, forKey: .stringParameters)
        var stringParametersDecoded0:[StringParameter]? = nil
        if let stringParametersContainer = stringParametersContainer {
            stringParametersDecoded0 = [StringParameter]()
            for structure0 in stringParametersContainer {
                stringParametersDecoded0?.append(structure0)
            }
        }
        stringParameters = stringParametersDecoded0
        let integerParametersContainer = try containerValues.decodeIfPresent([IntegerParameter].self, forKey: .integerParameters)
        var integerParametersDecoded0:[IntegerParameter]? = nil
        if let integerParametersContainer = integerParametersContainer {
            integerParametersDecoded0 = [IntegerParameter]()
            for structure0 in integerParametersContainer {
                integerParametersDecoded0?.append(structure0)
            }
        }
        integerParameters = integerParametersDecoded0
        let decimalParametersContainer = try containerValues.decodeIfPresent([DecimalParameter].self, forKey: .decimalParameters)
        var decimalParametersDecoded0:[DecimalParameter]? = nil
        if let decimalParametersContainer = decimalParametersContainer {
            decimalParametersDecoded0 = [DecimalParameter]()
            for structure0 in decimalParametersContainer {
                decimalParametersDecoded0?.append(structure0)
            }
        }
        decimalParameters = decimalParametersDecoded0
        let dateTimeParametersContainer = try containerValues.decodeIfPresent([DateTimeParameter].self, forKey: .dateTimeParameters)
        var dateTimeParametersDecoded0:[DateTimeParameter]? = nil
        if let dateTimeParametersContainer = dateTimeParametersContainer {
            dateTimeParametersDecoded0 = [DateTimeParameter]()
            for structure0 in dateTimeParametersContainer {
                dateTimeParametersDecoded0?.append(structure0)
            }
        }
        dateTimeParameters = dateTimeParametersDecoded0
    }
}
