// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTemplatesOutputBody: Equatable {
    public let templateSummaryList: [TemplateSummary]?
    public let nextToken: String?
    public let status: Int
    public let requestId: String?
}

extension ListTemplatesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case requestId = "RequestId"
        case status = "Status"
        case templateSummaryList = "TemplateSummaryList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateSummaryListContainer = try containerValues.decodeIfPresent([TemplateSummary].self, forKey: .templateSummaryList)
        var templateSummaryListDecoded0:[TemplateSummary]? = nil
        if let templateSummaryListContainer = templateSummaryListContainer {
            templateSummaryListDecoded0 = [TemplateSummary]()
            for structure0 in templateSummaryListContainer {
                templateSummaryListDecoded0?.append(structure0)
            }
        }
        templateSummaryList = templateSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let statusDecoded = try containerValues.decode(Int.self, forKey: .status)
        status = statusDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}
