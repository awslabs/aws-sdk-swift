// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TagColumnOperation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case columnName = "ColumnName"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columnName = columnName {
            try encodeContainer.encode(columnName, forKey: .columnName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for columntaglist0 in tags {
                try tagsContainer.encode(columntaglist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .columnName)
        columnName = columnNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ColumnTag].self, forKey: .tags)
        var tagsDecoded0:[ColumnTag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ColumnTag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
