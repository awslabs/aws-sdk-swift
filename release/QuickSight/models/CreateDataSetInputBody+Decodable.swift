// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDataSetInputBody: Equatable {
    public let dataSetId: String?
    public let name: String?
    public let physicalTableMap: [String:PhysicalTable]?
    public let logicalTableMap: [String:LogicalTable]?
    public let importMode: DataSetImportMode?
    public let columnGroups: [ColumnGroup]?
    public let fieldFolders: [String:FieldFolder]?
    public let permissions: [ResourcePermission]?
    public let rowLevelPermissionDataSet: RowLevelPermissionDataSet?
    public let columnLevelPermissionRules: [ColumnLevelPermissionRule]?
    public let tags: [Tag]?
}

extension CreateDataSetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case columnGroups = "ColumnGroups"
        case columnLevelPermissionRules = "ColumnLevelPermissionRules"
        case dataSetId = "DataSetId"
        case fieldFolders = "FieldFolders"
        case importMode = "ImportMode"
        case logicalTableMap = "LogicalTableMap"
        case name = "Name"
        case permissions = "Permissions"
        case physicalTableMap = "PhysicalTableMap"
        case rowLevelPermissionDataSet = "RowLevelPermissionDataSet"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataSetId)
        dataSetId = dataSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let physicalTableMapContainer = try containerValues.decodeIfPresent([String:PhysicalTable].self, forKey: .physicalTableMap)
        var physicalTableMapDecoded0: [String:PhysicalTable]? = nil
        if let physicalTableMapContainer = physicalTableMapContainer {
            physicalTableMapDecoded0 = [String:PhysicalTable]()
            for (key0, physicaltable0) in physicalTableMapContainer {
                physicalTableMapDecoded0?[key0] = physicaltable0
            }
        }
        physicalTableMap = physicalTableMapDecoded0
        let logicalTableMapContainer = try containerValues.decodeIfPresent([String:LogicalTable].self, forKey: .logicalTableMap)
        var logicalTableMapDecoded0: [String:LogicalTable]? = nil
        if let logicalTableMapContainer = logicalTableMapContainer {
            logicalTableMapDecoded0 = [String:LogicalTable]()
            for (key0, logicaltable0) in logicalTableMapContainer {
                logicalTableMapDecoded0?[key0] = logicaltable0
            }
        }
        logicalTableMap = logicalTableMapDecoded0
        let importModeDecoded = try containerValues.decodeIfPresent(DataSetImportMode.self, forKey: .importMode)
        importMode = importModeDecoded
        let columnGroupsContainer = try containerValues.decodeIfPresent([ColumnGroup].self, forKey: .columnGroups)
        var columnGroupsDecoded0:[ColumnGroup]? = nil
        if let columnGroupsContainer = columnGroupsContainer {
            columnGroupsDecoded0 = [ColumnGroup]()
            for structure0 in columnGroupsContainer {
                columnGroupsDecoded0?.append(structure0)
            }
        }
        columnGroups = columnGroupsDecoded0
        let fieldFoldersContainer = try containerValues.decodeIfPresent([String:FieldFolder].self, forKey: .fieldFolders)
        var fieldFoldersDecoded0: [String:FieldFolder]? = nil
        if let fieldFoldersContainer = fieldFoldersContainer {
            fieldFoldersDecoded0 = [String:FieldFolder]()
            for (key0, fieldfolder0) in fieldFoldersContainer {
                fieldFoldersDecoded0?[key0] = fieldfolder0
            }
        }
        fieldFolders = fieldFoldersDecoded0
        let permissionsContainer = try containerValues.decodeIfPresent([ResourcePermission].self, forKey: .permissions)
        var permissionsDecoded0:[ResourcePermission]? = nil
        if let permissionsContainer = permissionsContainer {
            permissionsDecoded0 = [ResourcePermission]()
            for structure0 in permissionsContainer {
                permissionsDecoded0?.append(structure0)
            }
        }
        permissions = permissionsDecoded0
        let rowLevelPermissionDataSetDecoded = try containerValues.decodeIfPresent(RowLevelPermissionDataSet.self, forKey: .rowLevelPermissionDataSet)
        rowLevelPermissionDataSet = rowLevelPermissionDataSetDecoded
        let columnLevelPermissionRulesContainer = try containerValues.decodeIfPresent([ColumnLevelPermissionRule].self, forKey: .columnLevelPermissionRules)
        var columnLevelPermissionRulesDecoded0:[ColumnLevelPermissionRule]? = nil
        if let columnLevelPermissionRulesContainer = columnLevelPermissionRulesContainer {
            columnLevelPermissionRulesDecoded0 = [ColumnLevelPermissionRule]()
            for structure0 in columnLevelPermissionRulesContainer {
                columnLevelPermissionRulesDecoded0?.append(structure0)
            }
        }
        columnLevelPermissionRules = columnLevelPermissionRulesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
