// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateDataSetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case columnGroups = "ColumnGroups"
        case columnLevelPermissionRules = "ColumnLevelPermissionRules"
        case fieldFolders = "FieldFolders"
        case importMode = "ImportMode"
        case logicalTableMap = "LogicalTableMap"
        case name = "Name"
        case physicalTableMap = "PhysicalTableMap"
        case rowLevelPermissionDataSet = "RowLevelPermissionDataSet"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columnGroups = columnGroups {
            var columnGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnGroups)
            for columngrouplist0 in columnGroups {
                try columnGroupsContainer.encode(columngrouplist0)
            }
        }
        if let columnLevelPermissionRules = columnLevelPermissionRules {
            var columnLevelPermissionRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnLevelPermissionRules)
            for columnlevelpermissionrulelist0 in columnLevelPermissionRules {
                try columnLevelPermissionRulesContainer.encode(columnlevelpermissionrulelist0)
            }
        }
        if let fieldFolders = fieldFolders {
            var fieldFoldersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .fieldFolders)
            for (dictKey0, fieldfoldermap0) in fieldFolders {
                try fieldFoldersContainer.encode(fieldfoldermap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let importMode = importMode {
            try encodeContainer.encode(importMode.rawValue, forKey: .importMode)
        }
        if let logicalTableMap = logicalTableMap {
            var logicalTableMapContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .logicalTableMap)
            for (dictKey0, logicaltablemap0) in logicalTableMap {
                try logicalTableMapContainer.encode(logicaltablemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let physicalTableMap = physicalTableMap {
            var physicalTableMapContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .physicalTableMap)
            for (dictKey0, physicaltablemap0) in physicalTableMap {
                try physicalTableMapContainer.encode(physicaltablemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let rowLevelPermissionDataSet = rowLevelPermissionDataSet {
            try encodeContainer.encode(rowLevelPermissionDataSet, forKey: .rowLevelPermissionDataSet)
        }
    }
}
