// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListGroupsOutputBody: Equatable {
    public let groupList: [Group]?
    public let nextToken: String?
    public let requestId: String?
    public let status: Int
}

extension ListGroupsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case groupList = "GroupList"
        case nextToken = "NextToken"
        case requestId = "RequestId"
        case status = "Status"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupListContainer = try containerValues.decodeIfPresent([Group].self, forKey: .groupList)
        var groupListDecoded0:[Group]? = nil
        if let groupListContainer = groupListContainer {
            groupListDecoded0 = [Group]()
            for structure0 in groupListContainer {
                groupListDecoded0?.append(structure0)
            }
        }
        groupList = groupListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let statusDecoded = try containerValues.decode(Int.self, forKey: .status)
        status = statusDecoded
    }
}
