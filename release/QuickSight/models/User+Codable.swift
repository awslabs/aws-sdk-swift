// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension User: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case active = "Active"
        case arn = "Arn"
        case customPermissionsName = "CustomPermissionsName"
        case email = "Email"
        case externalLoginFederationProviderType = "ExternalLoginFederationProviderType"
        case externalLoginFederationProviderUrl = "ExternalLoginFederationProviderUrl"
        case externalLoginId = "ExternalLoginId"
        case identityType = "IdentityType"
        case principalId = "PrincipalId"
        case role = "Role"
        case userName = "UserName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if active != false {
            try encodeContainer.encode(active, forKey: .active)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let customPermissionsName = customPermissionsName {
            try encodeContainer.encode(customPermissionsName, forKey: .customPermissionsName)
        }
        if let email = email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if let externalLoginFederationProviderType = externalLoginFederationProviderType {
            try encodeContainer.encode(externalLoginFederationProviderType, forKey: .externalLoginFederationProviderType)
        }
        if let externalLoginFederationProviderUrl = externalLoginFederationProviderUrl {
            try encodeContainer.encode(externalLoginFederationProviderUrl, forKey: .externalLoginFederationProviderUrl)
        }
        if let externalLoginId = externalLoginId {
            try encodeContainer.encode(externalLoginId, forKey: .externalLoginId)
        }
        if let identityType = identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let principalId = principalId {
            try encodeContainer.encode(principalId, forKey: .principalId)
        }
        if let role = role {
            try encodeContainer.encode(role.rawValue, forKey: .role)
        }
        if let userName = userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userName)
        userName = userNameDecoded
        let emailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .email)
        email = emailDecoded
        let roleDecoded = try containerValues.decodeIfPresent(UserRole.self, forKey: .role)
        role = roleDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let activeDecoded = try containerValues.decode(Bool.self, forKey: .active)
        active = activeDecoded
        let principalIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .principalId)
        principalId = principalIdDecoded
        let customPermissionsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customPermissionsName)
        customPermissionsName = customPermissionsNameDecoded
        let externalLoginFederationProviderTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalLoginFederationProviderType)
        externalLoginFederationProviderType = externalLoginFederationProviderTypeDecoded
        let externalLoginFederationProviderUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalLoginFederationProviderUrl)
        externalLoginFederationProviderUrl = externalLoginFederationProviderUrlDecoded
        let externalLoginIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalLoginId)
        externalLoginId = externalLoginIdDecoded
    }
}
