// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateUserInput: Equatable {
    /// <p>The ID for the AWS account that the user is in. Currently, you use the ID for the AWS
    /// 			account that contains your Amazon QuickSight account.</p>
    public let awsAccountId: String?
    /// <p>The URL of the custom OpenID Connect (OIDC) provider that provides identity to let a user federate
    ///          into QuickSight with an associated AWS Identity and Access Management (IAM) role. This parameter should
    ///          only be used when <code>ExternalLoginFederationProviderType</code> parameter is set to <code>CUSTOM_OIDC</code>.</p>
    public let customFederationProviderUrl: String?
    /// <p>(Enterprise edition only) The name of the custom permissions profile that you want to
    ///             assign to this user. Customized permissions allows you to control a user's access by
    ///             restricting access the following operations:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Create and update data sources</p>
    ///             </li>
    ///             <li>
    ///                 <p>Create and update datasets</p>
    ///             </li>
    ///             <li>
    ///                 <p>Create and update email reports</p>
    ///             </li>
    ///             <li>
    ///                 <p>Subscribe to email reports</p>
    ///             </li>
    ///          </ul>
    ///         <p>A set of custom permissions includes any combination of these restrictions. Currently,
    ///             you need to create the profile names for custom permission sets by using the QuickSight
    ///             console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of
    ///             permissions to a QuickSight user. </p>
    ///         <p>QuickSight custom permissions are applied through IAM policies. Therefore, they
    ///             override the permissions typically granted by assigning QuickSight users to one of the
    ///             default security cohorts in QuickSight (admin, author, reader).</p>
    ///         <p>This feature is available only to QuickSight Enterprise edition subscriptions that use
    ///             SAML 2.0-Based Federation for Single Sign-On (SSO).</p>
    public let customPermissionsName: String?
    /// <p>The email address of the user that you want to update.</p>
    public let email: String?
    /// <p>The type of supported external login provider that provides identity to let a user federate into QuickSight with an associated AWS Identity and Access Management (IAM) role. The type of supported external login provider can be one of the following.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>COGNITO</code>: Amazon Cognito. The provider URL is cognito-identity.amazonaws.com. When choosing the <code>COGNITO</code> provider type, donâ€™t use the "CustomFederationProviderUrl" parameter which is only needed when the external provider is custom.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CUSTOM_OIDC</code>: Custom OpenID Connect (OIDC) provider. When choosing <code>CUSTOM_OIDC</code> type, use the <code>CustomFederationProviderUrl</code> parameter to provide the custom OIDC provider URL.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NONE</code>: This clears all the previously saved external login information for a user. Use <code>
    ///                      <a>DescribeUser</a>
    ///                   </code> API to check the external login information.</p>
    ///             </li>
    ///          </ul>
    public let externalLoginFederationProviderType: String?
    /// <p>The identity ID for a user in the external login provider.</p>
    public let externalLoginId: String?
    /// <p>The namespace. Currently, you should set this to <code>default</code>.</p>
    public let namespace: String?
    /// <p>The Amazon QuickSight role of the user. The role can be one of the
    /// 			following default security cohorts:</p>
    /// 		       <ul>
    ///             <li>
    /// 				           <p>
    ///                   <code>READER</code>: A user who has read-only access to dashboards.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    ///                   <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and
    /// 					dashboards.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    ///                   <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight
    /// 					settings.</p>
    /// 			         </li>
    ///          </ul>
    /// 	        <p>The name of the QuickSight role is invisible to the user except for the console
    /// 	        screens dealing with permissions.</p>
    public let role: UserRole?
    /// <p>A flag that you use to indicate that you want to remove all custom permissions
    ///             from this user. Using this parameter resets the user to the state
    ///             it was in before a custom permissions profile was applied. This parameter defaults to
    ///             NULL and it doesn't accept any other value.</p>
    public let unapplyCustomPermissions: Bool
    /// <p>The Amazon QuickSight user name that you want to update.</p>
    public let userName: String?

    public init (
        awsAccountId: String? = nil,
        customFederationProviderUrl: String? = nil,
        customPermissionsName: String? = nil,
        email: String? = nil,
        externalLoginFederationProviderType: String? = nil,
        externalLoginId: String? = nil,
        namespace: String? = nil,
        role: UserRole? = nil,
        unapplyCustomPermissions: Bool = false,
        userName: String? = nil
    )
    {
        self.awsAccountId = awsAccountId
        self.customFederationProviderUrl = customFederationProviderUrl
        self.customPermissionsName = customPermissionsName
        self.email = email
        self.externalLoginFederationProviderType = externalLoginFederationProviderType
        self.externalLoginId = externalLoginId
        self.namespace = namespace
        self.role = role
        self.unapplyCustomPermissions = unapplyCustomPermissions
        self.userName = userName
    }
}
