// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IAMPolicyAssignment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case assignmentId = "AssignmentId"
        case assignmentName = "AssignmentName"
        case assignmentStatus = "AssignmentStatus"
        case awsAccountId = "AwsAccountId"
        case identities = "Identities"
        case policyArn = "PolicyArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentId = assignmentId {
            try encodeContainer.encode(assignmentId, forKey: .assignmentId)
        }
        if let assignmentName = assignmentName {
            try encodeContainer.encode(assignmentName, forKey: .assignmentName)
        }
        if let assignmentStatus = assignmentStatus {
            try encodeContainer.encode(assignmentStatus.rawValue, forKey: .assignmentStatus)
        }
        if let awsAccountId = awsAccountId {
            try encodeContainer.encode(awsAccountId, forKey: .awsAccountId)
        }
        if let identities = identities {
            var identitiesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .identities)
            for (dictKey0, identitymap0) in identities {
                try identitiesContainer.encode(identitymap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let policyArn = policyArn {
            try encodeContainer.encode(policyArn, forKey: .policyArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let awsAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .awsAccountId)
        awsAccountId = awsAccountIdDecoded
        let assignmentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assignmentId)
        assignmentId = assignmentIdDecoded
        let assignmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assignmentName)
        assignmentName = assignmentNameDecoded
        let policyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
        let identitiesContainer = try containerValues.decodeIfPresent([String:[String]?].self, forKey: .identities)
        var identitiesDecoded0: [String:[String]?]? = nil
        if let identitiesContainer = identitiesContainer {
            identitiesDecoded0 = [String:[String]?]()
            for (key0, identitynamelist0) in identitiesContainer {
                var identitynamelist0Decoded0 = [String]()
                if let identitynamelist0 = identitynamelist0 {
                    for string1 in identitynamelist0 {
                        identitynamelist0Decoded0.append(string1)
                    }
                }
                identitiesDecoded0?[key0] = identitynamelist0Decoded0
            }
        }
        identities = identitiesDecoded0
        let assignmentStatusDecoded = try containerValues.decodeIfPresent(AssignmentStatus.self, forKey: .assignmentStatus)
        assignmentStatus = assignmentStatusDecoded
    }
}
