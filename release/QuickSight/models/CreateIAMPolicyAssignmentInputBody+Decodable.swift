// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateIAMPolicyAssignmentInputBody: Equatable {
    public let assignmentName: String?
    public let assignmentStatus: AssignmentStatus?
    public let policyArn: String?
    public let identities: [String:[String]?]?
}

extension CreateIAMPolicyAssignmentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case assignmentName = "AssignmentName"
        case assignmentStatus = "AssignmentStatus"
        case identities = "Identities"
        case policyArn = "PolicyArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assignmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assignmentName)
        assignmentName = assignmentNameDecoded
        let assignmentStatusDecoded = try containerValues.decodeIfPresent(AssignmentStatus.self, forKey: .assignmentStatus)
        assignmentStatus = assignmentStatusDecoded
        let policyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
        let identitiesContainer = try containerValues.decodeIfPresent([String:[String]?].self, forKey: .identities)
        var identitiesDecoded0: [String:[String]?]? = nil
        if let identitiesContainer = identitiesContainer {
            identitiesDecoded0 = [String:[String]?]()
            for (key0, identitynamelist0) in identitiesContainer {
                var identitynamelist0Decoded0 = [String]()
                if let identitynamelist0 = identitynamelist0 {
                    for string1 in identitynamelist0 {
                        identitynamelist0Decoded0.append(string1)
                    }
                }
                identitiesDecoded0?[key0] = identitynamelist0Decoded0
            }
        }
        identities = identitiesDecoded0
    }
}
