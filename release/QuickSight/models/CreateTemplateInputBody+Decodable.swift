// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTemplateInputBody: Equatable {
    public let name: String?
    public let permissions: [ResourcePermission]?
    public let sourceEntity: TemplateSourceEntity?
    public let tags: [Tag]?
    public let versionDescription: String?
}

extension CreateTemplateInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case permissions = "Permissions"
        case sourceEntity = "SourceEntity"
        case tags = "Tags"
        case versionDescription = "VersionDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let permissionsContainer = try containerValues.decodeIfPresent([ResourcePermission].self, forKey: .permissions)
        var permissionsDecoded0:[ResourcePermission]? = nil
        if let permissionsContainer = permissionsContainer {
            permissionsDecoded0 = [ResourcePermission]()
            for structure0 in permissionsContainer {
                permissionsDecoded0?.append(structure0)
            }
        }
        permissions = permissionsDecoded0
        let sourceEntityDecoded = try containerValues.decodeIfPresent(TemplateSourceEntity.self, forKey: .sourceEntity)
        sourceEntity = sourceEntityDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let versionDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .versionDescription)
        versionDescription = versionDescriptionDecoded
    }
}
