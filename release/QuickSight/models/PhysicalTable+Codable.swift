// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PhysicalTable: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customSql = "CustomSql"
        case relationalTable = "RelationalTable"
        case s3Source = "S3Source"
        case sdkUnknown
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .customSql(customSql):
                if let customSql = customSql {
                    try container.encode(customSql, forKey: .customSql)
                }
            case let .relationalTable(relationalTable):
                if let relationalTable = relationalTable {
                    try container.encode(relationalTable, forKey: .relationalTable)
                }
            case let .s3Source(s3Source):
                if let s3Source = s3Source {
                    try container.encode(s3Source, forKey: .s3Source)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let relationalTableDecoded = try values.decodeIfPresent(RelationalTable.self, forKey: .relationalTable)
        if let relationalTable = relationalTableDecoded {
            self = .relationalTable(relationalTable)
            return
        }
        let customSqlDecoded = try values.decodeIfPresent(CustomSql.self, forKey: .customSql)
        if let customSql = customSqlDecoded {
            self = .customSql(customSql)
            return
        }
        let s3SourceDecoded = try values.decodeIfPresent(S3Source.self, forKey: .s3Source)
        if let s3Source = s3SourceDecoded {
            self = .s3Source(s3Source)
            return
        }
        self = .sdkUnknown("")
    }
}
