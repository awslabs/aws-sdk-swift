// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccountSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountName = "AccountName"
        case defaultNamespace = "DefaultNamespace"
        case edition = "Edition"
        case notificationEmail = "NotificationEmail"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountName = accountName {
            try encodeContainer.encode(accountName, forKey: .accountName)
        }
        if let defaultNamespace = defaultNamespace {
            try encodeContainer.encode(defaultNamespace, forKey: .defaultNamespace)
        }
        if let edition = edition {
            try encodeContainer.encode(edition.rawValue, forKey: .edition)
        }
        if let notificationEmail = notificationEmail {
            try encodeContainer.encode(notificationEmail, forKey: .notificationEmail)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountName)
        accountName = accountNameDecoded
        let editionDecoded = try containerValues.decodeIfPresent(Edition.self, forKey: .edition)
        edition = editionDecoded
        let defaultNamespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultNamespace)
        defaultNamespace = defaultNamespaceDecoded
        let notificationEmailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationEmail)
        notificationEmail = notificationEmailDecoded
    }
}
