// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTemplateAliasesOutputBody: Equatable {
    public let templateAliasList: [TemplateAlias]?
    public let status: Int
    public let requestId: String?
    public let nextToken: String?
}

extension ListTemplateAliasesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case requestId = "RequestId"
        case status = "Status"
        case templateAliasList = "TemplateAliasList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateAliasListContainer = try containerValues.decodeIfPresent([TemplateAlias].self, forKey: .templateAliasList)
        var templateAliasListDecoded0:[TemplateAlias]? = nil
        if let templateAliasListContainer = templateAliasListContainer {
            templateAliasListDecoded0 = [TemplateAlias]()
            for structure0 in templateAliasListContainer {
                templateAliasListDecoded0?.append(structure0)
            }
        }
        templateAliasList = templateAliasListDecoded0
        let statusDecoded = try containerValues.decode(Int.self, forKey: .status)
        status = statusDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
