// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LogicalTable: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alias = "Alias"
        case dataTransforms = "DataTransforms"
        case source = "Source"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alias = alias {
            try encodeContainer.encode(alias, forKey: .alias)
        }
        if let dataTransforms = dataTransforms {
            var dataTransformsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataTransforms)
            for transformoperationlist0 in dataTransforms {
                try dataTransformsContainer.encode(transformoperationlist0)
            }
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasDecoded = try containerValues.decodeIfPresent(String.self, forKey: .alias)
        alias = aliasDecoded
        let dataTransformsContainer = try containerValues.decodeIfPresent([TransformOperation].self, forKey: .dataTransforms)
        var dataTransformsDecoded0:[TransformOperation]? = nil
        if let dataTransformsContainer = dataTransformsContainer {
            dataTransformsDecoded0 = [TransformOperation]()
            for union0 in dataTransformsContainer {
                dataTransformsDecoded0?.append(union0)
            }
        }
        dataTransforms = dataTransformsDecoded0
        let sourceDecoded = try containerValues.decodeIfPresent(LogicalTableSource.self, forKey: .source)
        source = sourceDecoded
    }
}
