// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DashboardVersion: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case createdTime = "CreatedTime"
        case dataSetArns = "DataSetArns"
        case description = "Description"
        case errors = "Errors"
        case sheets = "Sheets"
        case sourceEntityArn = "SourceEntityArn"
        case status = "Status"
        case themeArn = "ThemeArn"
        case versionNumber = "VersionNumber"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let dataSetArns = dataSetArns {
            var dataSetArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataSetArns)
            for datasetarnslist0 in dataSetArns {
                try dataSetArnsContainer.encode(datasetarnslist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let errors = errors {
            var errorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .errors)
            for dashboarderrorlist0 in errors {
                try errorsContainer.encode(dashboarderrorlist0)
            }
        }
        if let sheets = sheets {
            var sheetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sheets)
            for sheetlist0 in sheets {
                try sheetsContainer.encode(sheetlist0)
            }
        }
        if let sourceEntityArn = sourceEntityArn {
            try encodeContainer.encode(sourceEntityArn, forKey: .sourceEntityArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let themeArn = themeArn {
            try encodeContainer.encode(themeArn, forKey: .themeArn)
        }
        if let versionNumber = versionNumber {
            try encodeContainer.encode(versionNumber, forKey: .versionNumber)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let errorsContainer = try containerValues.decodeIfPresent([DashboardError].self, forKey: .errors)
        var errorsDecoded0:[DashboardError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [DashboardError]()
            for structure0 in errorsContainer {
                errorsDecoded0?.append(structure0)
            }
        }
        errors = errorsDecoded0
        let versionNumberDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .versionNumber)
        versionNumber = versionNumberDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ResourceStatus.self, forKey: .status)
        status = statusDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let sourceEntityArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceEntityArn)
        sourceEntityArn = sourceEntityArnDecoded
        let dataSetArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .dataSetArns)
        var dataSetArnsDecoded0:[String]? = nil
        if let dataSetArnsContainer = dataSetArnsContainer {
            dataSetArnsDecoded0 = [String]()
            for string0 in dataSetArnsContainer {
                dataSetArnsDecoded0?.append(string0)
            }
        }
        dataSetArns = dataSetArnsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let themeArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .themeArn)
        themeArn = themeArnDecoded
        let sheetsContainer = try containerValues.decodeIfPresent([Sheet].self, forKey: .sheets)
        var sheetsDecoded0:[Sheet]? = nil
        if let sheetsContainer = sheetsContainer {
            sheetsDecoded0 = [Sheet]()
            for structure0 in sheetsContainer {
                sheetsDecoded0?.append(structure0)
            }
        }
        sheets = sheetsDecoded0
    }
}
