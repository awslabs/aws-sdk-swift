// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>The structure of a data source.</p>
public struct DataSource: Equatable {
    /// <p>A set of alternate data source parameters that you want to share for the credentials
    ///             stored with this data source. The credentials are applied in tandem with the data source
    ///             parameters when you copy a data source by using a create or update request. The API
    ///             operation compares the <code>DataSourceParameters</code> structure that's in the request
    ///             with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the
    ///             structures are an exact match, the request is allowed to use the credentials from this
    ///             existing data source. If the <code>AlternateDataSourceParameters</code> list is null,
    ///             the <code>Credentials</code> originally used with this <code>DataSourceParameters</code>
    ///             are automatically allowed.</p>
    public let alternateDataSourceParameters: [DataSourceParameters]?
    /// <p>The Amazon Resource Name (ARN) of the data source.</p>
    public let arn: String?
    /// <p>The time that this data source was created.</p>
    public let createdTime: Date?
    /// <p>The ID of the data source. This ID is unique per AWS Region for each AWS
    ///             account.</p>
    public let dataSourceId: String?
    /// <p>The parameters that Amazon QuickSight uses to connect to your underlying source. This
    ///             is a variant type structure. For this structure to be valid, only one of the attributes
    ///             can be non-null.</p>
    public let dataSourceParameters: DataSourceParameters?
    /// <p>Error information from the last update or the creation of the data source.</p>
    public let errorInfo: DataSourceErrorInfo?
    /// <p>The last time that this data source was updated.</p>
    public let lastUpdatedTime: Date?
    /// <p>A display name for the data source.</p>
    public let name: String?
    /// <p>Secure Socket Layer (SSL) properties that apply when QuickSight connects to your
    ///             underlying source.</p>
    public let sslProperties: SslProperties?
    /// <p>The HTTP status of the request.</p>
    public let status: ResourceStatus?
    /// <p>The type of the data source. This type indicates which database engine the data source
    ///             connects to.</p>
    public let type: DataSourceType?
    /// <p>The VPC connection information. You need to use this parameter only when you want
    ///             QuickSight to use a VPC connection when connecting to your underlying source.</p>
    public let vpcConnectionProperties: VpcConnectionProperties?

    public init (
        alternateDataSourceParameters: [DataSourceParameters]? = nil,
        arn: String? = nil,
        createdTime: Date? = nil,
        dataSourceId: String? = nil,
        dataSourceParameters: DataSourceParameters? = nil,
        errorInfo: DataSourceErrorInfo? = nil,
        lastUpdatedTime: Date? = nil,
        name: String? = nil,
        sslProperties: SslProperties? = nil,
        status: ResourceStatus? = nil,
        type: DataSourceType? = nil,
        vpcConnectionProperties: VpcConnectionProperties? = nil
    )
    {
        self.alternateDataSourceParameters = alternateDataSourceParameters
        self.arn = arn
        self.createdTime = createdTime
        self.dataSourceId = dataSourceId
        self.dataSourceParameters = dataSourceParameters
        self.errorInfo = errorInfo
        self.lastUpdatedTime = lastUpdatedTime
        self.name = name
        self.sslProperties = sslProperties
        self.status = status
        self.type = type
        self.vpcConnectionProperties = vpcConnectionProperties
    }
}
