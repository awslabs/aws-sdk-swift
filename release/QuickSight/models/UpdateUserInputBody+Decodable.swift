// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateUserInputBody: Equatable {
    public let email: String?
    public let role: UserRole?
    public let customPermissionsName: String?
    public let unapplyCustomPermissions: Bool
    public let externalLoginFederationProviderType: String?
    public let customFederationProviderUrl: String?
    public let externalLoginId: String?
}

extension UpdateUserInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case customFederationProviderUrl = "CustomFederationProviderUrl"
        case customPermissionsName = "CustomPermissionsName"
        case email = "Email"
        case externalLoginFederationProviderType = "ExternalLoginFederationProviderType"
        case externalLoginId = "ExternalLoginId"
        case role = "Role"
        case unapplyCustomPermissions = "UnapplyCustomPermissions"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .email)
        email = emailDecoded
        let roleDecoded = try containerValues.decodeIfPresent(UserRole.self, forKey: .role)
        role = roleDecoded
        let customPermissionsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customPermissionsName)
        customPermissionsName = customPermissionsNameDecoded
        let unapplyCustomPermissionsDecoded = try containerValues.decode(Bool.self, forKey: .unapplyCustomPermissions)
        unapplyCustomPermissions = unapplyCustomPermissionsDecoded
        let externalLoginFederationProviderTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalLoginFederationProviderType)
        externalLoginFederationProviderType = externalLoginFederationProviderTypeDecoded
        let customFederationProviderUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customFederationProviderUrl)
        customFederationProviderUrl = customFederationProviderUrlDecoded
        let externalLoginIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalLoginId)
        externalLoginId = externalLoginIdDecoded
    }
}
