// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDashboardsOutputBody: Equatable {
    public let dashboardSummaryList: [DashboardSummary]?
    public let nextToken: String?
    public let status: Int
    public let requestId: String?
}

extension ListDashboardsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dashboardSummaryList = "DashboardSummaryList"
        case nextToken = "NextToken"
        case requestId = "RequestId"
        case status = "Status"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardSummaryListContainer = try containerValues.decodeIfPresent([DashboardSummary].self, forKey: .dashboardSummaryList)
        var dashboardSummaryListDecoded0:[DashboardSummary]? = nil
        if let dashboardSummaryListContainer = dashboardSummaryListContainer {
            dashboardSummaryListDecoded0 = [DashboardSummary]()
            for structure0 in dashboardSummaryListContainer {
                dashboardSummaryListDecoded0?.append(structure0)
            }
        }
        dashboardSummaryList = dashboardSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let statusDecoded = try containerValues.decode(Int.self, forKey: .status)
        status = statusDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}
