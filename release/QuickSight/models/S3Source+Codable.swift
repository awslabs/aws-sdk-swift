// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3Source: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataSourceArn = "DataSourceArn"
        case inputColumns = "InputColumns"
        case uploadSettings = "UploadSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceArn = dataSourceArn {
            try encodeContainer.encode(dataSourceArn, forKey: .dataSourceArn)
        }
        if let inputColumns = inputColumns {
            var inputColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputColumns)
            for inputcolumnlist0 in inputColumns {
                try inputColumnsContainer.encode(inputcolumnlist0)
            }
        }
        if let uploadSettings = uploadSettings {
            try encodeContainer.encode(uploadSettings, forKey: .uploadSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataSourceArn)
        dataSourceArn = dataSourceArnDecoded
        let uploadSettingsDecoded = try containerValues.decodeIfPresent(UploadSettings.self, forKey: .uploadSettings)
        uploadSettings = uploadSettingsDecoded
        let inputColumnsContainer = try containerValues.decodeIfPresent([InputColumn].self, forKey: .inputColumns)
        var inputColumnsDecoded0:[InputColumn]? = nil
        if let inputColumnsContainer = inputColumnsContainer {
            inputColumnsDecoded0 = [InputColumn]()
            for structure0 in inputColumnsContainer {
                inputColumnsDecoded0?.append(structure0)
            }
        }
        inputColumns = inputColumnsDecoded0
    }
}
