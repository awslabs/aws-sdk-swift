// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum DashboardErrorType {
    case accessDenied
    case columnGeographicRoleMismatch
    case columnReplacementMissing
    case columnTypeMismatch
    case dataSetNotFound
    case internalFailure
    case parameterNotFound
    case parameterTypeInvalid
    case parameterValueIncompatible
    case sourceNotFound
    case sdkUnknown(String)
}

extension DashboardErrorType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DashboardErrorType] {
        return [
            .accessDenied,
            .columnGeographicRoleMismatch,
            .columnReplacementMissing,
            .columnTypeMismatch,
            .dataSetNotFound,
            .internalFailure,
            .parameterNotFound,
            .parameterTypeInvalid,
            .parameterValueIncompatible,
            .sourceNotFound,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accessDenied: return "ACCESS_DENIED"
        case .columnGeographicRoleMismatch: return "COLUMN_GEOGRAPHIC_ROLE_MISMATCH"
        case .columnReplacementMissing: return "COLUMN_REPLACEMENT_MISSING"
        case .columnTypeMismatch: return "COLUMN_TYPE_MISMATCH"
        case .dataSetNotFound: return "DATA_SET_NOT_FOUND"
        case .internalFailure: return "INTERNAL_FAILURE"
        case .parameterNotFound: return "PARAMETER_NOT_FOUND"
        case .parameterTypeInvalid: return "PARAMETER_TYPE_INVALID"
        case .parameterValueIncompatible: return "PARAMETER_VALUE_INCOMPATIBLE"
        case .sourceNotFound: return "SOURCE_NOT_FOUND"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DashboardErrorType(rawValue: rawValue) ?? DashboardErrorType.sdkUnknown(rawValue)
    }
}
