// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResourcePermission: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case principal = "Principal"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionlist0 in actions {
                try actionsContainer.encode(actionlist0)
            }
        }
        if let principal = principal {
            try encodeContainer.encode(principal, forKey: .principal)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .principal)
        principal = principalDecoded
        let actionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .actions)
        var actionsDecoded0:[String]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [String]()
            for string0 in actionsContainer {
                actionsDecoded0?.append(string0)
            }
        }
        actions = actionsDecoded0
    }
}
