// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransformOperation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case castColumnTypeOperation = "CastColumnTypeOperation"
        case createColumnsOperation = "CreateColumnsOperation"
        case filterOperation = "FilterOperation"
        case projectOperation = "ProjectOperation"
        case renameColumnOperation = "RenameColumnOperation"
        case tagColumnOperation = "TagColumnOperation"
        case sdkUnknown
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .castColumnTypeOperation(castColumnTypeOperation):
                if let castColumnTypeOperation = castColumnTypeOperation {
                    try container.encode(castColumnTypeOperation, forKey: .castColumnTypeOperation)
                }
            case let .createColumnsOperation(createColumnsOperation):
                if let createColumnsOperation = createColumnsOperation {
                    try container.encode(createColumnsOperation, forKey: .createColumnsOperation)
                }
            case let .filterOperation(filterOperation):
                if let filterOperation = filterOperation {
                    try container.encode(filterOperation, forKey: .filterOperation)
                }
            case let .projectOperation(projectOperation):
                if let projectOperation = projectOperation {
                    try container.encode(projectOperation, forKey: .projectOperation)
                }
            case let .renameColumnOperation(renameColumnOperation):
                if let renameColumnOperation = renameColumnOperation {
                    try container.encode(renameColumnOperation, forKey: .renameColumnOperation)
                }
            case let .tagColumnOperation(tagColumnOperation):
                if let tagColumnOperation = tagColumnOperation {
                    try container.encode(tagColumnOperation, forKey: .tagColumnOperation)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let projectOperationDecoded = try values.decodeIfPresent(ProjectOperation.self, forKey: .projectOperation)
        if let projectOperation = projectOperationDecoded {
            self = .projectOperation(projectOperation)
            return
        }
        let filterOperationDecoded = try values.decodeIfPresent(FilterOperation.self, forKey: .filterOperation)
        if let filterOperation = filterOperationDecoded {
            self = .filterOperation(filterOperation)
            return
        }
        let createColumnsOperationDecoded = try values.decodeIfPresent(CreateColumnsOperation.self, forKey: .createColumnsOperation)
        if let createColumnsOperation = createColumnsOperationDecoded {
            self = .createColumnsOperation(createColumnsOperation)
            return
        }
        let renameColumnOperationDecoded = try values.decodeIfPresent(RenameColumnOperation.self, forKey: .renameColumnOperation)
        if let renameColumnOperation = renameColumnOperationDecoded {
            self = .renameColumnOperation(renameColumnOperation)
            return
        }
        let castColumnTypeOperationDecoded = try values.decodeIfPresent(CastColumnTypeOperation.self, forKey: .castColumnTypeOperation)
        if let castColumnTypeOperation = castColumnTypeOperationDecoded {
            self = .castColumnTypeOperation(castColumnTypeOperation)
            return
        }
        let tagColumnOperationDecoded = try values.decodeIfPresent(TagColumnOperation.self, forKey: .tagColumnOperation)
        if let tagColumnOperation = tagColumnOperationDecoded {
            self = .tagColumnOperation(tagColumnOperation)
            return
        }
        self = .sdkUnknown("")
    }
}
