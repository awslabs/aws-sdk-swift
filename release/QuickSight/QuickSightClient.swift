// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class QuickSightClient {
    let client: SdkHttpClient
    let config: QuickSightClientConfiguration
    let serviceName = "QuickSight"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: QuickSightClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class QuickSightClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> QuickSightClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try QuickSightClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension QuickSightClient: QuickSightClientProtocol {
    /// <p>Cancels an ongoing ingestion of data into SPICE.</p>
    public func cancelIngestion(input: CancelIngestionInput, completion: @escaping (SdkResult<CancelIngestionOutputResponse, CancelIngestionOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dataSetId = input.dataSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dataSetId unexpectedly nil"))))
            return
        }
        guard let ingestionId = input.ingestionId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component ingestionId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sets/\(dataSetId)/ingestions/\(ingestionId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "cancelIngestion")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CancelIngestionInput, CancelIngestionOutputResponse, CancelIngestionOutputError>(id: "cancelIngestion")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CancelIngestionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CancelIngestionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CancelIngestionInput, CancelIngestionOutputResponse, CancelIngestionOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates Amazon QuickSight customizations the current AWS Region. Currently, you can
    ///             add a custom default theme by using the <code>CreateAccountCustomization</code> or
    ///                 <code>UpdateAccountCustomization</code> API operation. To further customize
    ///             QuickSight by removing QuickSight sample assets and videos for all new users, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-quicksight.html">Customizing QuickSight</a> in the <i>Amazon QuickSight User
    ///                 Guide.</i>
    ///          </p>
    ///         <p>You can create customizations for your AWS account or, if you specify a namespace, for
    ///             a QuickSight namespace instead. Customizations that apply to a namespace always override
    ///             customizations that apply to an AWS account. To find out which customizations apply, use
    ///             the <code>DescribeAccountCustomization</code> API operation.</p>
    ///         <p>Before you use the <code>CreateAccountCustomization</code> API operation to add a theme
    ///             as the namespace default, make sure that you first share the theme with the namespace.
    ///             If you don't share it with the namespace, the theme isn't visible to your users
    ///             even if you make it the default theme.
    ///             To check if the theme is shared, view the current permissions by using the
    ///             <code>
    ///                <a>DescribeThemePermissions</a>
    ///             </code> API operation.
    ///             To share the theme, grant permissions by using the
    ///             <code>
    ///                <a>UpdateThemePermissions</a>
    ///             </code> API operation. </p>
    public func createAccountCustomization(input: CreateAccountCustomizationInput, completion: @escaping (SdkResult<CreateAccountCustomizationOutputResponse, CreateAccountCustomizationOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/customizations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createAccountCustomization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateAccountCustomizationInput, CreateAccountCustomizationOutputResponse, CreateAccountCustomizationOutputError>(id: "createAccountCustomization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateAccountCustomizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateAccountCustomizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateAccountCustomizationInput, CreateAccountCustomizationOutputResponse, CreateAccountCustomizationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateAccountCustomizationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an analysis in Amazon QuickSight.</p>
    public func createAnalysis(input: CreateAnalysisInput, completion: @escaping (SdkResult<CreateAnalysisOutputResponse, CreateAnalysisOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let analysisId = input.analysisId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component analysisId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/analyses/\(analysisId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createAnalysis")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateAnalysisInput, CreateAnalysisOutputResponse, CreateAnalysisOutputError>(id: "createAnalysis")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateAnalysisInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateAnalysisInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateAnalysisInput, CreateAnalysisOutputResponse, CreateAnalysisOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateAnalysisInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a dashboard from a template. To first create a template, see the <code>
    ///                <a>CreateTemplate</a>
    ///             </code> API operation.</p>
    ///         <p>A dashboard is an entity in QuickSight that identifies QuickSight reports, created
    ///             from analyses. You can share QuickSight dashboards. With the right permissions, you can
    ///             create scheduled email reports from them. If you have the correct permissions, you can
    ///             create a dashboard from a template that exists in a different AWS account.</p>
    public func createDashboard(input: CreateDashboardInput, completion: @escaping (SdkResult<CreateDashboardOutputResponse, CreateDashboardOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dashboardId = input.dashboardId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dashboardId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/dashboards/\(dashboardId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createDashboard")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateDashboardInput, CreateDashboardOutputResponse, CreateDashboardOutputError>(id: "createDashboard")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateDashboardInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateDashboardInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateDashboardInput, CreateDashboardOutputResponse, CreateDashboardOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateDashboardInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a dataset.</p>
    public func createDataSet(input: CreateDataSetInput, completion: @escaping (SdkResult<CreateDataSetOutputResponse, CreateDataSetOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sets"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createDataSet")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateDataSetInput, CreateDataSetOutputResponse, CreateDataSetOutputError>(id: "createDataSet")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateDataSetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateDataSetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateDataSetInput, CreateDataSetOutputResponse, CreateDataSetOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateDataSetInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a data source.</p>
    public func createDataSource(input: CreateDataSourceInput, completion: @escaping (SdkResult<CreateDataSourceOutputResponse, CreateDataSourceOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sources"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createDataSource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateDataSourceInput, CreateDataSourceOutputResponse, CreateDataSourceOutputError>(id: "createDataSource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateDataSourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateDataSourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateDataSourceInput, CreateDataSourceOutputResponse, CreateDataSourceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateDataSourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an Amazon QuickSight group.</p>
    /// 		       <p>The permissions resource is
    /// 					<code>arn:aws:quicksight:us-east-1:<i><relevant-aws-account-id></i>:group/default/<i><group-name></i>
    ///             </code>.</p>
    /// 		       <p>The response is a group object.</p>
    public func createGroup(input: CreateGroupInput, completion: @escaping (SdkResult<CreateGroupOutputResponse, CreateGroupOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/groups"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateGroupInput, CreateGroupOutputResponse, CreateGroupOutputError>(id: "createGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateGroupInput, CreateGroupOutputResponse, CreateGroupOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds an Amazon QuickSight user to an Amazon QuickSight group. </p>
    public func createGroupMembership(input: CreateGroupMembershipInput, completion: @escaping (SdkResult<CreateGroupMembershipOutputResponse, CreateGroupMembershipOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let groupName = input.groupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component groupName unexpectedly nil"))))
            return
        }
        guard let memberName = input.memberName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component memberName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/groups/\(groupName)/members/\(memberName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createGroupMembership")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateGroupMembershipInput, CreateGroupMembershipOutputResponse, CreateGroupMembershipOutputError>(id: "createGroupMembership")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateGroupMembershipInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateGroupMembershipInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateGroupMembershipInput, CreateGroupMembershipOutputResponse, CreateGroupMembershipOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an assignment with one specified IAM policy, identified by its Amazon Resource Name
    /// 			(ARN). This policy assignment is attached to the specified groups or users of Amazon QuickSight.
    /// 			Assignment names are unique per AWS account. To avoid overwriting rules in other namespaces,
    /// 			use assignment names that are unique.</p>
    public func createIAMPolicyAssignment(input: CreateIAMPolicyAssignmentInput, completion: @escaping (SdkResult<CreateIAMPolicyAssignmentOutputResponse, CreateIAMPolicyAssignmentOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/iam-policy-assignments"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createIAMPolicyAssignment")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateIAMPolicyAssignmentInput, CreateIAMPolicyAssignmentOutputResponse, CreateIAMPolicyAssignmentOutputError>(id: "createIAMPolicyAssignment")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateIAMPolicyAssignmentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateIAMPolicyAssignmentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateIAMPolicyAssignmentInput, CreateIAMPolicyAssignmentOutputResponse, CreateIAMPolicyAssignmentOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateIAMPolicyAssignmentInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates and starts a new SPICE ingestion on a dataset</p>
    /// 		
    /// 		       <p>Any ingestions operating on tagged datasets inherit the same tags automatically for use in
    /// 			access control. For an example, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/iam-ec2-resource-tags/">How do I create an IAM policy to control access to Amazon EC2 resources using
    /// 				tags?</a> in the AWS Knowledge Center. Tags are visible on the tagged dataset, but not on the ingestion resource.</p>
    public func createIngestion(input: CreateIngestionInput, completion: @escaping (SdkResult<CreateIngestionOutputResponse, CreateIngestionOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dataSetId = input.dataSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dataSetId unexpectedly nil"))))
            return
        }
        guard let ingestionId = input.ingestionId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component ingestionId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sets/\(dataSetId)/ingestions/\(ingestionId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createIngestion")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateIngestionInput, CreateIngestionOutputResponse, CreateIngestionOutputError>(id: "createIngestion")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateIngestionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateIngestionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateIngestionInput, CreateIngestionOutputResponse, CreateIngestionOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>(Enterprise edition only) Creates a new namespace for you to use with Amazon QuickSight.</p>
    ///         <p>A namespace allows you to isolate the QuickSight users and groups that are registered
    ///             for that namespace. Users that access the namespace can share assets only with other
    ///             users or groups in the same namespace. They can't see users and groups in other
    ///             namespaces. You can create a namespace after your AWS account is subscribed to
    ///             QuickSight. The namespace must be unique within the AWS account. By default, there is a
    ///             limit of 100 namespaces per AWS account. To increase your limit, create a ticket with
    ///             AWS Support. </p>
    public func createNamespace(input: CreateNamespaceInput, completion: @escaping (SdkResult<CreateNamespaceOutputResponse, CreateNamespaceOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createNamespace")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateNamespaceInput, CreateNamespaceOutputResponse, CreateNamespaceOutputError>(id: "createNamespace")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateNamespaceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateNamespaceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateNamespaceInput, CreateNamespaceOutputResponse, CreateNamespaceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateNamespaceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a template from an existing QuickSight analysis or template. You can use the resulting
    /// 			template to create a dashboard.</p>
    /// 		       <p>A <i>template</i> is an entity in QuickSight that encapsulates the metadata
    /// 			required to create an analysis and that you can use to create s dashboard. A template adds
    /// 			a layer of abstraction by using placeholders to replace the dataset associated with the
    /// 			analysis. You can use templates to create dashboards by replacing dataset placeholders
    /// 			with datasets that follow the same schema that was used to create the source analysis
    /// 			and template.</p>
    public func createTemplate(input: CreateTemplateInput, completion: @escaping (SdkResult<CreateTemplateOutputResponse, CreateTemplateOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let templateId = input.templateId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component templateId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/templates/\(templateId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createTemplate")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateTemplateInput, CreateTemplateOutputResponse, CreateTemplateOutputError>(id: "createTemplate")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateTemplateInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateTemplateInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateTemplateInput, CreateTemplateOutputResponse, CreateTemplateOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateTemplateInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a template alias for a template.</p>
    public func createTemplateAlias(input: CreateTemplateAliasInput, completion: @escaping (SdkResult<CreateTemplateAliasOutputResponse, CreateTemplateAliasOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let templateId = input.templateId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component templateId unexpectedly nil"))))
            return
        }
        guard let aliasName = input.aliasName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component aliasName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/templates/\(templateId)/aliases/\(aliasName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createTemplateAlias")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateTemplateAliasInput, CreateTemplateAliasOutputResponse, CreateTemplateAliasOutputError>(id: "createTemplateAlias")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateTemplateAliasInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateTemplateAliasInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateTemplateAliasInput, CreateTemplateAliasOutputResponse, CreateTemplateAliasOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateTemplateAliasInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a theme.</p>
    /// 		       <p>A <i>theme</i> is set of configuration options for color and layout.
    /// 			Themes apply to analyses and dashboards. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using
    /// 			Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    public func createTheme(input: CreateThemeInput, completion: @escaping (SdkResult<CreateThemeOutputResponse, CreateThemeOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let themeId = input.themeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component themeId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/themes/\(themeId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createTheme")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateThemeInput, CreateThemeOutputResponse, CreateThemeOutputError>(id: "createTheme")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateThemeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateThemeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateThemeInput, CreateThemeOutputResponse, CreateThemeOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateThemeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a theme alias for a theme.</p>
    public func createThemeAlias(input: CreateThemeAliasInput, completion: @escaping (SdkResult<CreateThemeAliasOutputResponse, CreateThemeAliasOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let themeId = input.themeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component themeId unexpectedly nil"))))
            return
        }
        guard let aliasName = input.aliasName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component aliasName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/themes/\(themeId)/aliases/\(aliasName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createThemeAlias")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateThemeAliasInput, CreateThemeAliasOutputResponse, CreateThemeAliasOutputError>(id: "createThemeAlias")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateThemeAliasInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateThemeAliasInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateThemeAliasInput, CreateThemeAliasOutputResponse, CreateThemeAliasOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateThemeAliasInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes all Amazon QuickSight customizations in this AWS Region for the specified AWS
    ///             account and QuickSight namespace.</p>
    public func deleteAccountCustomization(input: DeleteAccountCustomizationInput, completion: @escaping (SdkResult<DeleteAccountCustomizationOutputResponse, DeleteAccountCustomizationOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/customizations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteAccountCustomization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteAccountCustomizationInput, DeleteAccountCustomizationOutputResponse, DeleteAccountCustomizationOutputError>(id: "deleteAccountCustomization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteAccountCustomizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteAccountCustomizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteAccountCustomizationInput, DeleteAccountCustomizationOutputResponse, DeleteAccountCustomizationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes an analysis from Amazon QuickSight. You can optionally include a recovery window during
    ///             which you can restore the analysis. If you don't specify a recovery window value, the
    ///             operation defaults to 30 days. QuickSight attaches a <code>DeletionTime</code> stamp to
    ///             the response that specifies the end of the recovery window. At the end of the recovery
    ///             window, QuickSight deletes the analysis permanently.</p>
    ///         <p>At any time before recovery window ends, you can use the <code>RestoreAnalysis</code>
    ///             API operation to remove the <code>DeletionTime</code> stamp and cancel the deletion of
    ///             the analysis. The analysis remains visible in the API until it's deleted, so you can
    ///             describe it but you can't make a template from it.</p>
    ///         <p>An analysis that's scheduled for deletion isn't accessible in the QuickSight console.
    ///             To access it in the console, restore it. Deleting an analysis doesn't delete the
    ///             dashboards that you publish from it.</p>
    public func deleteAnalysis(input: DeleteAnalysisInput, completion: @escaping (SdkResult<DeleteAnalysisOutputResponse, DeleteAnalysisOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let analysisId = input.analysisId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component analysisId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/analyses/\(analysisId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteAnalysis")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteAnalysisInput, DeleteAnalysisOutputResponse, DeleteAnalysisOutputError>(id: "deleteAnalysis")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteAnalysisInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteAnalysisInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteAnalysisInput, DeleteAnalysisOutputResponse, DeleteAnalysisOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a dashboard.</p>
    public func deleteDashboard(input: DeleteDashboardInput, completion: @escaping (SdkResult<DeleteDashboardOutputResponse, DeleteDashboardOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dashboardId = input.dashboardId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dashboardId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/dashboards/\(dashboardId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteDashboard")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteDashboardInput, DeleteDashboardOutputResponse, DeleteDashboardOutputError>(id: "deleteDashboard")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteDashboardInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteDashboardInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteDashboardInput, DeleteDashboardOutputResponse, DeleteDashboardOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a dataset.</p>
    public func deleteDataSet(input: DeleteDataSetInput, completion: @escaping (SdkResult<DeleteDataSetOutputResponse, DeleteDataSetOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dataSetId = input.dataSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dataSetId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sets/\(dataSetId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteDataSet")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteDataSetInput, DeleteDataSetOutputResponse, DeleteDataSetOutputError>(id: "deleteDataSet")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteDataSetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteDataSetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteDataSetInput, DeleteDataSetOutputResponse, DeleteDataSetOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the data source permanently. This operation breaks
    /// 			all the datasets that reference the deleted data source.</p>
    public func deleteDataSource(input: DeleteDataSourceInput, completion: @escaping (SdkResult<DeleteDataSourceOutputResponse, DeleteDataSourceOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dataSourceId = input.dataSourceId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dataSourceId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sources/\(dataSourceId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteDataSource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteDataSourceInput, DeleteDataSourceOutputResponse, DeleteDataSourceOutputError>(id: "deleteDataSource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteDataSourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteDataSourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteDataSourceInput, DeleteDataSourceOutputResponse, DeleteDataSourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes a user group from Amazon QuickSight. </p>
    public func deleteGroup(input: DeleteGroupInput, completion: @escaping (SdkResult<DeleteGroupOutputResponse, DeleteGroupOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let groupName = input.groupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component groupName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/groups/\(groupName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteGroupInput, DeleteGroupOutputResponse, DeleteGroupOutputError>(id: "deleteGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteGroupInput, DeleteGroupOutputResponse, DeleteGroupOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes a user from a group so that the user is no longer a member of the group.</p>
    public func deleteGroupMembership(input: DeleteGroupMembershipInput, completion: @escaping (SdkResult<DeleteGroupMembershipOutputResponse, DeleteGroupMembershipOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let groupName = input.groupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component groupName unexpectedly nil"))))
            return
        }
        guard let memberName = input.memberName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component memberName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/groups/\(groupName)/members/\(memberName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteGroupMembership")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteGroupMembershipInput, DeleteGroupMembershipOutputResponse, DeleteGroupMembershipOutputError>(id: "deleteGroupMembership")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteGroupMembershipInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteGroupMembershipInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteGroupMembershipInput, DeleteGroupMembershipOutputResponse, DeleteGroupMembershipOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes an existing IAM policy assignment.</p>
    public func deleteIAMPolicyAssignment(input: DeleteIAMPolicyAssignmentInput, completion: @escaping (SdkResult<DeleteIAMPolicyAssignmentOutputResponse, DeleteIAMPolicyAssignmentOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let assignmentName = input.assignmentName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component assignmentName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespace/\(namespace)/iam-policy-assignments/\(assignmentName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteIAMPolicyAssignment")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteIAMPolicyAssignmentInput, DeleteIAMPolicyAssignmentOutputResponse, DeleteIAMPolicyAssignmentOutputError>(id: "deleteIAMPolicyAssignment")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteIAMPolicyAssignmentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteIAMPolicyAssignmentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteIAMPolicyAssignmentInput, DeleteIAMPolicyAssignmentOutputResponse, DeleteIAMPolicyAssignmentOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a namespace and the users and groups that are associated with the namespace.
    ///         This is an asynchronous process. Assets including dashboards, analyses, datasets and data sources are not
    ///         deleted. To delete these assets, you use the API operations for the relevant asset. </p>
    public func deleteNamespace(input: DeleteNamespaceInput, completion: @escaping (SdkResult<DeleteNamespaceOutputResponse, DeleteNamespaceOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteNamespace")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteNamespaceInput, DeleteNamespaceOutputResponse, DeleteNamespaceOutputError>(id: "deleteNamespace")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteNamespaceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteNamespaceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteNamespaceInput, DeleteNamespaceOutputResponse, DeleteNamespaceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a template.</p>
    public func deleteTemplate(input: DeleteTemplateInput, completion: @escaping (SdkResult<DeleteTemplateOutputResponse, DeleteTemplateOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let templateId = input.templateId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component templateId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/templates/\(templateId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteTemplate")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteTemplateInput, DeleteTemplateOutputResponse, DeleteTemplateOutputError>(id: "deleteTemplate")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteTemplateInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteTemplateInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteTemplateInput, DeleteTemplateOutputResponse, DeleteTemplateOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the item that the specified template alias points to. If you provide a specific
    /// 			alias, you delete the version of the template that the alias points to.</p>
    public func deleteTemplateAlias(input: DeleteTemplateAliasInput, completion: @escaping (SdkResult<DeleteTemplateAliasOutputResponse, DeleteTemplateAliasOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let templateId = input.templateId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component templateId unexpectedly nil"))))
            return
        }
        guard let aliasName = input.aliasName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component aliasName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/templates/\(templateId)/aliases/\(aliasName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteTemplateAlias")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteTemplateAliasInput, DeleteTemplateAliasOutputResponse, DeleteTemplateAliasOutputError>(id: "deleteTemplateAlias")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteTemplateAliasInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteTemplateAliasInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteTemplateAliasInput, DeleteTemplateAliasOutputResponse, DeleteTemplateAliasOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a theme.</p>
    public func deleteTheme(input: DeleteThemeInput, completion: @escaping (SdkResult<DeleteThemeOutputResponse, DeleteThemeOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let themeId = input.themeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component themeId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/themes/\(themeId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteTheme")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteThemeInput, DeleteThemeOutputResponse, DeleteThemeOutputError>(id: "deleteTheme")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteThemeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteThemeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteThemeInput, DeleteThemeOutputResponse, DeleteThemeOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the version of the theme that the specified theme alias points to.
    /// 			If you provide a specific alias, you delete the version of the theme
    /// 			that the alias points to.</p>
    public func deleteThemeAlias(input: DeleteThemeAliasInput, completion: @escaping (SdkResult<DeleteThemeAliasOutputResponse, DeleteThemeAliasOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let themeId = input.themeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component themeId unexpectedly nil"))))
            return
        }
        guard let aliasName = input.aliasName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component aliasName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/themes/\(themeId)/aliases/\(aliasName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteThemeAlias")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteThemeAliasInput, DeleteThemeAliasOutputResponse, DeleteThemeAliasOutputError>(id: "deleteThemeAlias")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteThemeAliasInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteThemeAliasInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteThemeAliasInput, DeleteThemeAliasOutputResponse, DeleteThemeAliasOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the Amazon QuickSight user that is associated with the identity of the AWS
    /// 			Identity and Access Management (IAM) user or role that's making the call. The IAM user
    /// 			isn't deleted as a result of this call. </p>
    public func deleteUser(input: DeleteUserInput, completion: @escaping (SdkResult<DeleteUserOutputResponse, DeleteUserOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let userName = input.userName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/users/\(userName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteUserInput, DeleteUserOutputResponse, DeleteUserOutputError>(id: "deleteUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteUserInput, DeleteUserOutputResponse, DeleteUserOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a user identified by its principal ID. </p>
    public func deleteUserByPrincipalId(input: DeleteUserByPrincipalIdInput, completion: @escaping (SdkResult<DeleteUserByPrincipalIdOutputResponse, DeleteUserByPrincipalIdOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let principalId = input.principalId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component principalId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/user-principals/\(principalId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteUserByPrincipalId")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteUserByPrincipalIdInput, DeleteUserByPrincipalIdOutputResponse, DeleteUserByPrincipalIdOutputError>(id: "deleteUserByPrincipalId")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteUserByPrincipalIdInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteUserByPrincipalIdInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteUserByPrincipalIdInput, DeleteUserByPrincipalIdOutputResponse, DeleteUserByPrincipalIdOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes the customizations associated with the provided AWS account and Amazon
    ///             QuickSight namespace in an AWS Region. The QuickSight console evaluates which
    ///             customizations to apply by running this API operation with the <code>Resolved</code> flag
    ///             included. </p>
    ///         <p>To determine what customizations display when you run this command, it can help to
    ///             visualize the relationship of the entities involved. </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>AWS Account</code> - The AWS account exists at the top of the hierarchy.
    ///                     It has the potential to use all of the AWS Regions and AWS Services. When you
    ///                     subscribe to QuickSight, you choose one AWS Region to use as your home Region.
    ///                     That's where your free SPICE capacity is located. You can use QuickSight in any
    ///                     supported AWS Region. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>AWS Region</code> - In each AWS Region where you sign in to QuickSight
    ///                     at least once, QuickSight acts as a separate instance of the same service. If
    ///                     you have a user directory, it resides in us-east-1, which is the US East (N.
    ///                     Virginia). Generally speaking, these users have access to QuickSight in any AWS
    ///                     Region, unless they are constrained to a namespace. </p>
    ///                 <p>To run the command in a different AWS Region, you change your Region settings.
    ///                     If you're using the AWS CLI, you can use one of the following options:</p>
    ///                 <ul>
    ///                   <li>
    ///                         <p>Use <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-options.html">command line options</a>. </p>
    ///                     </li>
    ///                   <li>
    ///                         <p>Use <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html">named profiles</a>. </p>
    ///                     </li>
    ///                   <li>
    ///                         <p>Run <code>aws configure</code> to change your default AWS Region. Use
    ///                             Enter to key the same settings for your keys. For more information, see
    ///                             <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html">Configuring the AWS CLI</a>.</p>
    ///                     </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Namespace</code> - A QuickSight namespace is a partition that contains
    ///                     users and assets (data sources, datasets, dashboards, and so on). To access
    ///                     assets that are in a specific namespace, users and groups must also be part of
    ///                     the same namespace. People who share a namespace are completely isolated from
    ///                     users and assets in other namespaces, even if they are in the same AWS account
    ///                     and AWS Region.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Applied customizations</code> -  Within an AWS Region, a set of
    ///                     QuickSight customizations can apply to an AWS account or to a namespace.
    ///                     Settings that you apply to a namespace override settings that you apply to an
    ///                     AWS account. All settings are isolated to a single AWS Region. To apply them in
    ///                     other AWS Regions, run the <code>CreateAccountCustomization</code> command in
    ///                     each AWS Region where you want to apply the same customizations. </p>
    ///             </li>
    ///          </ul>
    public func describeAccountCustomization(input: DescribeAccountCustomizationInput, completion: @escaping (SdkResult<DescribeAccountCustomizationOutputResponse, DescribeAccountCustomizationOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/customizations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeAccountCustomization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeAccountCustomizationInput, DescribeAccountCustomizationOutputResponse, DescribeAccountCustomizationOutputError>(id: "describeAccountCustomization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeAccountCustomizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeAccountCustomizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeAccountCustomizationInput, DescribeAccountCustomizationOutputResponse, DescribeAccountCustomizationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes the settings that were used when your QuickSight subscription was first
    ///             created in this AWS account.</p>
    public func describeAccountSettings(input: DescribeAccountSettingsInput, completion: @escaping (SdkResult<DescribeAccountSettingsOutputResponse, DescribeAccountSettingsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/settings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeAccountSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeAccountSettingsInput, DescribeAccountSettingsOutputResponse, DescribeAccountSettingsOutputError>(id: "describeAccountSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeAccountSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeAccountSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeAccountSettingsInput, DescribeAccountSettingsOutputResponse, DescribeAccountSettingsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Provides a summary of the metadata for an analysis.</p>
    public func describeAnalysis(input: DescribeAnalysisInput, completion: @escaping (SdkResult<DescribeAnalysisOutputResponse, DescribeAnalysisOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let analysisId = input.analysisId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component analysisId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/analyses/\(analysisId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeAnalysis")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeAnalysisInput, DescribeAnalysisOutputResponse, DescribeAnalysisOutputError>(id: "describeAnalysis")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeAnalysisInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeAnalysisInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeAnalysisInput, DescribeAnalysisOutputResponse, DescribeAnalysisOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Provides the read and write permissions for an analysis.</p>
    public func describeAnalysisPermissions(input: DescribeAnalysisPermissionsInput, completion: @escaping (SdkResult<DescribeAnalysisPermissionsOutputResponse, DescribeAnalysisPermissionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let analysisId = input.analysisId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component analysisId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/analyses/\(analysisId)/permissions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeAnalysisPermissions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeAnalysisPermissionsInput, DescribeAnalysisPermissionsOutputResponse, DescribeAnalysisPermissionsOutputError>(id: "describeAnalysisPermissions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeAnalysisPermissionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeAnalysisPermissionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeAnalysisPermissionsInput, DescribeAnalysisPermissionsOutputResponse, DescribeAnalysisPermissionsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Provides a summary for a dashboard.</p>
    public func describeDashboard(input: DescribeDashboardInput, completion: @escaping (SdkResult<DescribeDashboardOutputResponse, DescribeDashboardOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dashboardId = input.dashboardId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dashboardId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/dashboards/\(dashboardId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeDashboard")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeDashboardInput, DescribeDashboardOutputResponse, DescribeDashboardOutputError>(id: "describeDashboard")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeDashboardInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeDashboardInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeDashboardInput, DescribeDashboardOutputResponse, DescribeDashboardOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes read and write permissions for a dashboard.</p>
    public func describeDashboardPermissions(input: DescribeDashboardPermissionsInput, completion: @escaping (SdkResult<DescribeDashboardPermissionsOutputResponse, DescribeDashboardPermissionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dashboardId = input.dashboardId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dashboardId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/dashboards/\(dashboardId)/permissions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeDashboardPermissions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeDashboardPermissionsInput, DescribeDashboardPermissionsOutputResponse, DescribeDashboardPermissionsOutputError>(id: "describeDashboardPermissions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeDashboardPermissionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeDashboardPermissionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeDashboardPermissionsInput, DescribeDashboardPermissionsOutputResponse, DescribeDashboardPermissionsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes a dataset. </p>
    public func describeDataSet(input: DescribeDataSetInput, completion: @escaping (SdkResult<DescribeDataSetOutputResponse, DescribeDataSetOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dataSetId = input.dataSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dataSetId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sets/\(dataSetId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeDataSet")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeDataSetInput, DescribeDataSetOutputResponse, DescribeDataSetOutputError>(id: "describeDataSet")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeDataSetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeDataSetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeDataSetInput, DescribeDataSetOutputResponse, DescribeDataSetOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes the permissions on a dataset.</p>
    /// 		       <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p>
    public func describeDataSetPermissions(input: DescribeDataSetPermissionsInput, completion: @escaping (SdkResult<DescribeDataSetPermissionsOutputResponse, DescribeDataSetPermissionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dataSetId = input.dataSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dataSetId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sets/\(dataSetId)/permissions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeDataSetPermissions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeDataSetPermissionsInput, DescribeDataSetPermissionsOutputResponse, DescribeDataSetPermissionsOutputError>(id: "describeDataSetPermissions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeDataSetPermissionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeDataSetPermissionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeDataSetPermissionsInput, DescribeDataSetPermissionsOutputResponse, DescribeDataSetPermissionsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes a data source.</p>
    public func describeDataSource(input: DescribeDataSourceInput, completion: @escaping (SdkResult<DescribeDataSourceOutputResponse, DescribeDataSourceOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dataSourceId = input.dataSourceId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dataSourceId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sources/\(dataSourceId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeDataSource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeDataSourceInput, DescribeDataSourceOutputResponse, DescribeDataSourceOutputError>(id: "describeDataSource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeDataSourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeDataSourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeDataSourceInput, DescribeDataSourceOutputResponse, DescribeDataSourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes the resource permissions for a data source.</p>
    public func describeDataSourcePermissions(input: DescribeDataSourcePermissionsInput, completion: @escaping (SdkResult<DescribeDataSourcePermissionsOutputResponse, DescribeDataSourcePermissionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dataSourceId = input.dataSourceId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dataSourceId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sources/\(dataSourceId)/permissions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeDataSourcePermissions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeDataSourcePermissionsInput, DescribeDataSourcePermissionsOutputResponse, DescribeDataSourcePermissionsOutputError>(id: "describeDataSourcePermissions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeDataSourcePermissionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeDataSourcePermissionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeDataSourcePermissionsInput, DescribeDataSourcePermissionsOutputResponse, DescribeDataSourcePermissionsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns an Amazon QuickSight group's description and Amazon Resource Name (ARN). </p>
    public func describeGroup(input: DescribeGroupInput, completion: @escaping (SdkResult<DescribeGroupOutputResponse, DescribeGroupOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let groupName = input.groupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component groupName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/groups/\(groupName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeGroupInput, DescribeGroupOutputResponse, DescribeGroupOutputError>(id: "describeGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeGroupInput, DescribeGroupOutputResponse, DescribeGroupOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes an existing IAM policy assignment, as specified by the assignment name.</p>
    public func describeIAMPolicyAssignment(input: DescribeIAMPolicyAssignmentInput, completion: @escaping (SdkResult<DescribeIAMPolicyAssignmentOutputResponse, DescribeIAMPolicyAssignmentOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let assignmentName = input.assignmentName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component assignmentName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/iam-policy-assignments/\(assignmentName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeIAMPolicyAssignment")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeIAMPolicyAssignmentInput, DescribeIAMPolicyAssignmentOutputResponse, DescribeIAMPolicyAssignmentOutputError>(id: "describeIAMPolicyAssignment")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeIAMPolicyAssignmentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeIAMPolicyAssignmentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeIAMPolicyAssignmentInput, DescribeIAMPolicyAssignmentOutputResponse, DescribeIAMPolicyAssignmentOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes a SPICE ingestion.</p>
    public func describeIngestion(input: DescribeIngestionInput, completion: @escaping (SdkResult<DescribeIngestionOutputResponse, DescribeIngestionOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dataSetId = input.dataSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dataSetId unexpectedly nil"))))
            return
        }
        guard let ingestionId = input.ingestionId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component ingestionId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sets/\(dataSetId)/ingestions/\(ingestionId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeIngestion")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeIngestionInput, DescribeIngestionOutputResponse, DescribeIngestionOutputError>(id: "describeIngestion")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeIngestionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeIngestionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeIngestionInput, DescribeIngestionOutputResponse, DescribeIngestionOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes the current namespace.</p>
    public func describeNamespace(input: DescribeNamespaceInput, completion: @escaping (SdkResult<DescribeNamespaceOutputResponse, DescribeNamespaceOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeNamespace")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeNamespaceInput, DescribeNamespaceOutputResponse, DescribeNamespaceOutputError>(id: "describeNamespace")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeNamespaceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeNamespaceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeNamespaceInput, DescribeNamespaceOutputResponse, DescribeNamespaceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes a template's metadata.</p>
    public func describeTemplate(input: DescribeTemplateInput, completion: @escaping (SdkResult<DescribeTemplateOutputResponse, DescribeTemplateOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let templateId = input.templateId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component templateId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/templates/\(templateId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeTemplate")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeTemplateInput, DescribeTemplateOutputResponse, DescribeTemplateOutputError>(id: "describeTemplate")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeTemplateInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeTemplateInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeTemplateInput, DescribeTemplateOutputResponse, DescribeTemplateOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes the template alias for a template.</p>
    public func describeTemplateAlias(input: DescribeTemplateAliasInput, completion: @escaping (SdkResult<DescribeTemplateAliasOutputResponse, DescribeTemplateAliasOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let templateId = input.templateId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component templateId unexpectedly nil"))))
            return
        }
        guard let aliasName = input.aliasName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component aliasName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/templates/\(templateId)/aliases/\(aliasName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeTemplateAlias")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeTemplateAliasInput, DescribeTemplateAliasOutputResponse, DescribeTemplateAliasOutputError>(id: "describeTemplateAlias")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeTemplateAliasInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeTemplateAliasInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeTemplateAliasInput, DescribeTemplateAliasOutputResponse, DescribeTemplateAliasOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes read and write permissions on a template.</p>
    public func describeTemplatePermissions(input: DescribeTemplatePermissionsInput, completion: @escaping (SdkResult<DescribeTemplatePermissionsOutputResponse, DescribeTemplatePermissionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let templateId = input.templateId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component templateId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/templates/\(templateId)/permissions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeTemplatePermissions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeTemplatePermissionsInput, DescribeTemplatePermissionsOutputResponse, DescribeTemplatePermissionsOutputError>(id: "describeTemplatePermissions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeTemplatePermissionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeTemplatePermissionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeTemplatePermissionsInput, DescribeTemplatePermissionsOutputResponse, DescribeTemplatePermissionsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes a theme.</p>
    public func describeTheme(input: DescribeThemeInput, completion: @escaping (SdkResult<DescribeThemeOutputResponse, DescribeThemeOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let themeId = input.themeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component themeId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/themes/\(themeId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeTheme")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeThemeInput, DescribeThemeOutputResponse, DescribeThemeOutputError>(id: "describeTheme")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeThemeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeThemeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeThemeInput, DescribeThemeOutputResponse, DescribeThemeOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes the alias for a theme.</p>
    public func describeThemeAlias(input: DescribeThemeAliasInput, completion: @escaping (SdkResult<DescribeThemeAliasOutputResponse, DescribeThemeAliasOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let themeId = input.themeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component themeId unexpectedly nil"))))
            return
        }
        guard let aliasName = input.aliasName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component aliasName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/themes/\(themeId)/aliases/\(aliasName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeThemeAlias")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeThemeAliasInput, DescribeThemeAliasOutputResponse, DescribeThemeAliasOutputError>(id: "describeThemeAlias")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeThemeAliasInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeThemeAliasInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeThemeAliasInput, DescribeThemeAliasOutputResponse, DescribeThemeAliasOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes the read and write permissions for a theme.</p>
    public func describeThemePermissions(input: DescribeThemePermissionsInput, completion: @escaping (SdkResult<DescribeThemePermissionsOutputResponse, DescribeThemePermissionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let themeId = input.themeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component themeId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/themes/\(themeId)/permissions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeThemePermissions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeThemePermissionsInput, DescribeThemePermissionsOutputResponse, DescribeThemePermissionsOutputError>(id: "describeThemePermissions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeThemePermissionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeThemePermissionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeThemePermissionsInput, DescribeThemePermissionsOutputResponse, DescribeThemePermissionsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns information about a user, given the user name. </p>
    public func describeUser(input: DescribeUserInput, completion: @escaping (SdkResult<DescribeUserOutputResponse, DescribeUserOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let userName = input.userName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/users/\(userName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeUserInput, DescribeUserOutputResponse, DescribeUserOutputError>(id: "describeUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeUserInput, DescribeUserOutputResponse, DescribeUserOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Generates a session URL and authorization code that you can use to embed an Amazon
    ///             QuickSight read-only dashboard in your web server code. Before you use this command,
    ///             make sure that you have configured the dashboards and permissions. </p>
    ///         <p>Currently, you can use <code>GetDashboardEmbedURL</code> only from the server, not
    ///             from the user's browser. The following rules apply to the combination of URL and
    ///             authorization code:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>They must be used together.</p>
    ///             </li>
    ///             <li>
    ///                 <p>They can be used one time only.</p>
    ///             </li>
    ///             <li>
    ///                 <p>They are valid for 5 minutes after you run this command.</p>
    ///             </li>
    ///             <li>
    ///                 <p>The resulting user session is valid for 10 hours.</p>
    ///             </li>
    ///          </ul>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedded Analytics</a> in the <i>Amazon QuickSight User
    ///             Guide</i>.</p>
    public func getDashboardEmbedUrl(input: GetDashboardEmbedUrlInput, completion: @escaping (SdkResult<GetDashboardEmbedUrlOutputResponse, GetDashboardEmbedUrlOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dashboardId = input.dashboardId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dashboardId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/dashboards/\(dashboardId)/embed-url"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getDashboardEmbedUrl")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetDashboardEmbedUrlInput, GetDashboardEmbedUrlOutputResponse, GetDashboardEmbedUrlOutputError>(id: "getDashboardEmbedUrl")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetDashboardEmbedUrlInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetDashboardEmbedUrlInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetDashboardEmbedUrlInput, GetDashboardEmbedUrlOutputResponse, GetDashboardEmbedUrlOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Generates a session URL and authorization code that you can use to embed the Amazon
    ///             QuickSight console in your web server code. Use <code>GetSessionEmbedUrl</code> where
    ///             you want to provide an authoring portal that allows users to create data sources,
    ///             datasets, analyses, and dashboards. The users who access an embedded QuickSight console
    ///             need belong to the author or admin security cohort. If you want to restrict permissions
    ///             to some of these features, add a custom permissions profile to the user with the
    ///             <code>
    ///                <a>UpdateUser</a>
    ///             </code> API operation. Use <code>
    ///                <a>RegisterUser</a>
    ///             </code> API operation to add a new user with a custom permission profile attached. For more
    ///             information, see the following sections in the <i>Amazon QuickSight User
    ///             Guide</i>:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedding-the-quicksight-console.html">Embedding the Amazon QuickSight Console</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-permissions-to-the-quicksight-console.html">Customizing Access to the Amazon QuickSight Console</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func getSessionEmbedUrl(input: GetSessionEmbedUrlInput, completion: @escaping (SdkResult<GetSessionEmbedUrlOutputResponse, GetSessionEmbedUrlOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/session-embed-url"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getSessionEmbedUrl")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetSessionEmbedUrlInput, GetSessionEmbedUrlOutputResponse, GetSessionEmbedUrlOutputError>(id: "getSessionEmbedUrl")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetSessionEmbedUrlInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetSessionEmbedUrlInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetSessionEmbedUrlInput, GetSessionEmbedUrlOutputResponse, GetSessionEmbedUrlOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists Amazon QuickSight analyses that exist in the specified AWS account.</p>
    public func listAnalyses(input: ListAnalysesInput, completion: @escaping (SdkResult<ListAnalysesOutputResponse, ListAnalysesOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/analyses"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listAnalyses")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListAnalysesInput, ListAnalysesOutputResponse, ListAnalysesOutputError>(id: "listAnalyses")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListAnalysesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListAnalysesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListAnalysesInput, ListAnalysesOutputResponse, ListAnalysesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all the versions of the dashboards in the QuickSight subscription.</p>
    public func listDashboardVersions(input: ListDashboardVersionsInput, completion: @escaping (SdkResult<ListDashboardVersionsOutputResponse, ListDashboardVersionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dashboardId = input.dashboardId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dashboardId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/dashboards/\(dashboardId)/versions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listDashboardVersions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListDashboardVersionsInput, ListDashboardVersionsOutputResponse, ListDashboardVersionsOutputError>(id: "listDashboardVersions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListDashboardVersionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListDashboardVersionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListDashboardVersionsInput, ListDashboardVersionsOutputResponse, ListDashboardVersionsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists dashboards in an AWS account.</p>
    public func listDashboards(input: ListDashboardsInput, completion: @escaping (SdkResult<ListDashboardsOutputResponse, ListDashboardsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/dashboards"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listDashboards")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListDashboardsInput, ListDashboardsOutputResponse, ListDashboardsOutputError>(id: "listDashboards")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListDashboardsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListDashboardsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListDashboardsInput, ListDashboardsOutputResponse, ListDashboardsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all of the datasets belonging to the current AWS account in an AWS Region.</p>
    /// 		       <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/*</code>.</p>
    public func listDataSets(input: ListDataSetsInput, completion: @escaping (SdkResult<ListDataSetsOutputResponse, ListDataSetsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sets"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listDataSets")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListDataSetsInput, ListDataSetsOutputResponse, ListDataSetsOutputError>(id: "listDataSets")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListDataSetsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListDataSetsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListDataSetsInput, ListDataSetsOutputResponse, ListDataSetsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists data sources in current AWS Region that belong to this AWS account.</p>
    public func listDataSources(input: ListDataSourcesInput, completion: @escaping (SdkResult<ListDataSourcesOutputResponse, ListDataSourcesOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sources"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listDataSources")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListDataSourcesInput, ListDataSourcesOutputResponse, ListDataSourcesOutputError>(id: "listDataSources")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListDataSourcesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListDataSourcesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListDataSourcesInput, ListDataSourcesOutputResponse, ListDataSourcesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists member users in a group.</p>
    public func listGroupMemberships(input: ListGroupMembershipsInput, completion: @escaping (SdkResult<ListGroupMembershipsOutputResponse, ListGroupMembershipsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let groupName = input.groupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component groupName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/groups/\(groupName)/members"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listGroupMemberships")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListGroupMembershipsInput, ListGroupMembershipsOutputResponse, ListGroupMembershipsOutputError>(id: "listGroupMemberships")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListGroupMembershipsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListGroupMembershipsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListGroupMembershipsInput, ListGroupMembershipsOutputResponse, ListGroupMembershipsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all user groups in Amazon QuickSight. </p>
    public func listGroups(input: ListGroupsInput, completion: @escaping (SdkResult<ListGroupsOutputResponse, ListGroupsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/groups"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listGroups")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListGroupsInput, ListGroupsOutputResponse, ListGroupsOutputError>(id: "listGroups")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListGroupsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListGroupsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListGroupsInput, ListGroupsOutputResponse, ListGroupsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists IAM policy assignments in the current Amazon QuickSight account.</p>
    public func listIAMPolicyAssignments(input: ListIAMPolicyAssignmentsInput, completion: @escaping (SdkResult<ListIAMPolicyAssignmentsOutputResponse, ListIAMPolicyAssignmentsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/iam-policy-assignments"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listIAMPolicyAssignments")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListIAMPolicyAssignmentsInput, ListIAMPolicyAssignmentsOutputResponse, ListIAMPolicyAssignmentsOutputError>(id: "listIAMPolicyAssignments")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListIAMPolicyAssignmentsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListIAMPolicyAssignmentsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListIAMPolicyAssignmentsInput, ListIAMPolicyAssignmentsOutputResponse, ListIAMPolicyAssignmentsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: ListIAMPolicyAssignmentsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all the IAM policy assignments, including the Amazon Resource Names (ARNs) for the IAM
    /// 			policies assigned to the specified user and group or groups that the user belongs
    /// 			to.</p>
    public func listIAMPolicyAssignmentsForUser(input: ListIAMPolicyAssignmentsForUserInput, completion: @escaping (SdkResult<ListIAMPolicyAssignmentsForUserOutputResponse, ListIAMPolicyAssignmentsForUserOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let userName = input.userName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/users/\(userName)/iam-policy-assignments"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listIAMPolicyAssignmentsForUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListIAMPolicyAssignmentsForUserInput, ListIAMPolicyAssignmentsForUserOutputResponse, ListIAMPolicyAssignmentsForUserOutputError>(id: "listIAMPolicyAssignmentsForUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListIAMPolicyAssignmentsForUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListIAMPolicyAssignmentsForUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListIAMPolicyAssignmentsForUserInput, ListIAMPolicyAssignmentsForUserOutputResponse, ListIAMPolicyAssignmentsForUserOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the history of SPICE ingestions for a dataset.</p>
    public func listIngestions(input: ListIngestionsInput, completion: @escaping (SdkResult<ListIngestionsOutputResponse, ListIngestionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dataSetId = input.dataSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dataSetId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sets/\(dataSetId)/ingestions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listIngestions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListIngestionsInput, ListIngestionsOutputResponse, ListIngestionsOutputError>(id: "listIngestions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListIngestionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListIngestionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListIngestionsInput, ListIngestionsOutputResponse, ListIngestionsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the namespaces for the specified AWS account.</p>
    public func listNamespaces(input: ListNamespacesInput, completion: @escaping (SdkResult<ListNamespacesOutputResponse, ListNamespacesOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listNamespaces")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListNamespacesInput, ListNamespacesOutputResponse, ListNamespacesOutputError>(id: "listNamespaces")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListNamespacesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListNamespacesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListNamespacesInput, ListNamespacesOutputResponse, ListNamespacesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the tags assigned to a resource.</p>
    public func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/resources/\(resourceArn)/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTagsForResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsForResourceInput, ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>(id: "listTagsForResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsForResourceInput, ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all the aliases of a template.</p>
    public func listTemplateAliases(input: ListTemplateAliasesInput, completion: @escaping (SdkResult<ListTemplateAliasesOutputResponse, ListTemplateAliasesOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let templateId = input.templateId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component templateId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/templates/\(templateId)/aliases"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTemplateAliases")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTemplateAliasesInput, ListTemplateAliasesOutputResponse, ListTemplateAliasesOutputError>(id: "listTemplateAliases")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTemplateAliasesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTemplateAliasesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTemplateAliasesInput, ListTemplateAliasesOutputResponse, ListTemplateAliasesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all the versions of the templates in the current Amazon QuickSight account.</p>
    public func listTemplateVersions(input: ListTemplateVersionsInput, completion: @escaping (SdkResult<ListTemplateVersionsOutputResponse, ListTemplateVersionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let templateId = input.templateId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component templateId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/templates/\(templateId)/versions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTemplateVersions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTemplateVersionsInput, ListTemplateVersionsOutputResponse, ListTemplateVersionsOutputError>(id: "listTemplateVersions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTemplateVersionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTemplateVersionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTemplateVersionsInput, ListTemplateVersionsOutputResponse, ListTemplateVersionsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all the templates in the current Amazon QuickSight account.</p>
    public func listTemplates(input: ListTemplatesInput, completion: @escaping (SdkResult<ListTemplatesOutputResponse, ListTemplatesOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/templates"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTemplates")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTemplatesInput, ListTemplatesOutputResponse, ListTemplatesOutputError>(id: "listTemplates")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTemplatesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTemplatesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTemplatesInput, ListTemplatesOutputResponse, ListTemplatesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all the aliases of a theme.</p>
    public func listThemeAliases(input: ListThemeAliasesInput, completion: @escaping (SdkResult<ListThemeAliasesOutputResponse, ListThemeAliasesOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let themeId = input.themeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component themeId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/themes/\(themeId)/aliases"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listThemeAliases")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListThemeAliasesInput, ListThemeAliasesOutputResponse, ListThemeAliasesOutputError>(id: "listThemeAliases")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListThemeAliasesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListThemeAliasesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListThemeAliasesInput, ListThemeAliasesOutputResponse, ListThemeAliasesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all the versions of the themes in the current AWS account.</p>
    public func listThemeVersions(input: ListThemeVersionsInput, completion: @escaping (SdkResult<ListThemeVersionsOutputResponse, ListThemeVersionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let themeId = input.themeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component themeId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/themes/\(themeId)/versions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listThemeVersions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListThemeVersionsInput, ListThemeVersionsOutputResponse, ListThemeVersionsOutputError>(id: "listThemeVersions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListThemeVersionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListThemeVersionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListThemeVersionsInput, ListThemeVersionsOutputResponse, ListThemeVersionsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all the themes in the current AWS account.</p>
    public func listThemes(input: ListThemesInput, completion: @escaping (SdkResult<ListThemesOutputResponse, ListThemesOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/themes"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listThemes")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListThemesInput, ListThemesOutputResponse, ListThemesOutputError>(id: "listThemes")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListThemesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListThemesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListThemesInput, ListThemesOutputResponse, ListThemesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the Amazon QuickSight groups that an Amazon QuickSight user is a member of.</p>
    public func listUserGroups(input: ListUserGroupsInput, completion: @escaping (SdkResult<ListUserGroupsOutputResponse, ListUserGroupsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let userName = input.userName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/users/\(userName)/groups"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listUserGroups")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListUserGroupsInput, ListUserGroupsOutputResponse, ListUserGroupsOutputError>(id: "listUserGroups")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListUserGroupsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListUserGroupsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListUserGroupsInput, ListUserGroupsOutputResponse, ListUserGroupsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of all of the Amazon QuickSight users belonging to this account. </p>
    public func listUsers(input: ListUsersInput, completion: @escaping (SdkResult<ListUsersOutputResponse, ListUsersOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/users"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listUsers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListUsersInput, ListUsersOutputResponse, ListUsersOutputError>(id: "listUsers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListUsersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListUsersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListUsersInput, ListUsersOutputResponse, ListUsersOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an Amazon QuickSight user, whose identity is associated with the AWS Identity
    /// 			and Access Management (IAM) identity or role specified in the request. </p>
    public func registerUser(input: RegisterUserInput, completion: @escaping (SdkResult<RegisterUserOutputResponse, RegisterUserOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/users"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "registerUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RegisterUserInput, RegisterUserOutputResponse, RegisterUserOutputError>(id: "registerUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RegisterUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RegisterUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RegisterUserInput, RegisterUserOutputResponse, RegisterUserOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: RegisterUserInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Restores an analysis.</p>
    public func restoreAnalysis(input: RestoreAnalysisInput, completion: @escaping (SdkResult<RestoreAnalysisOutputResponse, RestoreAnalysisOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let analysisId = input.analysisId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component analysisId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/restore/analyses/\(analysisId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "restoreAnalysis")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RestoreAnalysisInput, RestoreAnalysisOutputResponse, RestoreAnalysisOutputError>(id: "restoreAnalysis")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RestoreAnalysisInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RestoreAnalysisInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RestoreAnalysisInput, RestoreAnalysisOutputResponse, RestoreAnalysisOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Searches for analyses that belong to the user specified in the filter.</p>
    public func searchAnalyses(input: SearchAnalysesInput, completion: @escaping (SdkResult<SearchAnalysesOutputResponse, SearchAnalysesOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/search/analyses"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "searchAnalyses")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SearchAnalysesInput, SearchAnalysesOutputResponse, SearchAnalysesOutputError>(id: "searchAnalyses")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: SearchAnalysesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SearchAnalysesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SearchAnalysesInput, SearchAnalysesOutputResponse, SearchAnalysesOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: SearchAnalysesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Searches for dashboards that belong to a user. </p>
    public func searchDashboards(input: SearchDashboardsInput, completion: @escaping (SdkResult<SearchDashboardsOutputResponse, SearchDashboardsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/search/dashboards"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "searchDashboards")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SearchDashboardsInput, SearchDashboardsOutputResponse, SearchDashboardsOutputError>(id: "searchDashboards")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: SearchDashboardsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SearchDashboardsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SearchDashboardsInput, SearchDashboardsOutputResponse, SearchDashboardsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: SearchDashboardsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Assigns one or more tags (key-value pairs) to the specified QuickSight resource. </p>
    /// 		       <p>Tags can help you organize and categorize your resources. You can also use them to
    /// 			scope user permissions, by granting a user permission to access or change only resources
    /// 			with certain tag values. You can use the <code>TagResource</code> operation with a
    /// 			resource that already has tags. If you specify a new tag key for the resource, this tag
    /// 			is appended to the list of tags associated with the resource. If you specify a tag key
    /// 			that is already associated with the resource, the new tag value that you specify
    /// 			replaces the previous value for that tag.</p>
    /// 		       <p>You can associate as many as 50 tags with a resource. QuickSight supports tagging on data
    /// 			set, data source, dashboard, and template. </p>
    /// 		       <p>Tagging for QuickSight works in a similar way to tagging for other AWS services, except for
    /// 			the following:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>You can't use tags to track AWS costs for QuickSight. This restriction is because QuickSight
    /// 					costs are based on users and SPICE capacity, which aren't taggable
    /// 					resources.</p>
    ///             </li>
    ///             <li>
    ///                <p>QuickSight doesn't currently support the Tag Editor for AWS Resource Groups.</p>
    ///             </li>
    ///          </ul>
    public func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/resources/\(resourceArn)/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagResourceInput, TagResourceOutputResponse, TagResourceOutputError>(id: "tagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagResourceInput, TagResourceOutputResponse, TagResourceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes a tag or tags from a resource.</p>
    public func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/resources/\(resourceArn)/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagResourceInput, UntagResourceOutputResponse, UntagResourceOutputError>(id: "untagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagResourceInput, UntagResourceOutputResponse, UntagResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates Amazon QuickSight customizations the current AWS Region. Currently, the only
    ///             customization you can use is a theme.</p>
    ///         <p>You can use customizations for your AWS account or, if you specify a namespace, for a
    ///             QuickSight namespace instead. Customizations that apply to a namespace override
    ///             customizations that apply to an AWS account. To find out which customizations apply, use
    ///             the <code>DescribeAccountCustomization</code> API operation. </p>
    public func updateAccountCustomization(input: UpdateAccountCustomizationInput, completion: @escaping (SdkResult<UpdateAccountCustomizationOutputResponse, UpdateAccountCustomizationOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/customizations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateAccountCustomization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateAccountCustomizationInput, UpdateAccountCustomizationOutputResponse, UpdateAccountCustomizationOutputError>(id: "updateAccountCustomization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateAccountCustomizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateAccountCustomizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateAccountCustomizationInput, UpdateAccountCustomizationOutputResponse, UpdateAccountCustomizationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateAccountCustomizationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the Amazon QuickSight settings in your AWS account.</p>
    public func updateAccountSettings(input: UpdateAccountSettingsInput, completion: @escaping (SdkResult<UpdateAccountSettingsOutputResponse, UpdateAccountSettingsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/settings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateAccountSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateAccountSettingsInput, UpdateAccountSettingsOutputResponse, UpdateAccountSettingsOutputError>(id: "updateAccountSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateAccountSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateAccountSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateAccountSettingsInput, UpdateAccountSettingsOutputResponse, UpdateAccountSettingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateAccountSettingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates an analysis in Amazon QuickSight</p>
    public func updateAnalysis(input: UpdateAnalysisInput, completion: @escaping (SdkResult<UpdateAnalysisOutputResponse, UpdateAnalysisOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let analysisId = input.analysisId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component analysisId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/analyses/\(analysisId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateAnalysis")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateAnalysisInput, UpdateAnalysisOutputResponse, UpdateAnalysisOutputError>(id: "updateAnalysis")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateAnalysisInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateAnalysisInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateAnalysisInput, UpdateAnalysisOutputResponse, UpdateAnalysisOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateAnalysisInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the read and write permissions for an analysis.</p>
    public func updateAnalysisPermissions(input: UpdateAnalysisPermissionsInput, completion: @escaping (SdkResult<UpdateAnalysisPermissionsOutputResponse, UpdateAnalysisPermissionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let analysisId = input.analysisId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component analysisId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/analyses/\(analysisId)/permissions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateAnalysisPermissions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateAnalysisPermissionsInput, UpdateAnalysisPermissionsOutputResponse, UpdateAnalysisPermissionsOutputError>(id: "updateAnalysisPermissions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateAnalysisPermissionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateAnalysisPermissionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateAnalysisPermissionsInput, UpdateAnalysisPermissionsOutputResponse, UpdateAnalysisPermissionsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateAnalysisPermissionsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a dashboard in an AWS account.</p>
    public func updateDashboard(input: UpdateDashboardInput, completion: @escaping (SdkResult<UpdateDashboardOutputResponse, UpdateDashboardOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dashboardId = input.dashboardId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dashboardId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/dashboards/\(dashboardId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateDashboard")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateDashboardInput, UpdateDashboardOutputResponse, UpdateDashboardOutputError>(id: "updateDashboard")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateDashboardInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateDashboardInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateDashboardInput, UpdateDashboardOutputResponse, UpdateDashboardOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateDashboardInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates read and write permissions on a dashboard.</p>
    public func updateDashboardPermissions(input: UpdateDashboardPermissionsInput, completion: @escaping (SdkResult<UpdateDashboardPermissionsOutputResponse, UpdateDashboardPermissionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dashboardId = input.dashboardId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dashboardId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/dashboards/\(dashboardId)/permissions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateDashboardPermissions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateDashboardPermissionsInput, UpdateDashboardPermissionsOutputResponse, UpdateDashboardPermissionsOutputError>(id: "updateDashboardPermissions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateDashboardPermissionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateDashboardPermissionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateDashboardPermissionsInput, UpdateDashboardPermissionsOutputResponse, UpdateDashboardPermissionsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateDashboardPermissionsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the published version of a dashboard.</p>
    public func updateDashboardPublishedVersion(input: UpdateDashboardPublishedVersionInput, completion: @escaping (SdkResult<UpdateDashboardPublishedVersionOutputResponse, UpdateDashboardPublishedVersionOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dashboardId = input.dashboardId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dashboardId unexpectedly nil"))))
            return
        }
        guard let versionNumber = input.versionNumber else {
            completion(.failure(.client(ClientError.serializationFailed("uri component versionNumber unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/dashboards/\(dashboardId)/versions/\(versionNumber)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateDashboardPublishedVersion")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateDashboardPublishedVersionInput, UpdateDashboardPublishedVersionOutputResponse, UpdateDashboardPublishedVersionOutputError>(id: "updateDashboardPublishedVersion")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateDashboardPublishedVersionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateDashboardPublishedVersionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateDashboardPublishedVersionInput, UpdateDashboardPublishedVersionOutputResponse, UpdateDashboardPublishedVersionOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a dataset.</p>
    public func updateDataSet(input: UpdateDataSetInput, completion: @escaping (SdkResult<UpdateDataSetOutputResponse, UpdateDataSetOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dataSetId = input.dataSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dataSetId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sets/\(dataSetId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateDataSet")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateDataSetInput, UpdateDataSetOutputResponse, UpdateDataSetOutputError>(id: "updateDataSet")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateDataSetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateDataSetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateDataSetInput, UpdateDataSetOutputResponse, UpdateDataSetOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateDataSetInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the permissions on a dataset.</p>
    /// 		       <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p>
    public func updateDataSetPermissions(input: UpdateDataSetPermissionsInput, completion: @escaping (SdkResult<UpdateDataSetPermissionsOutputResponse, UpdateDataSetPermissionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dataSetId = input.dataSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dataSetId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sets/\(dataSetId)/permissions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateDataSetPermissions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateDataSetPermissionsInput, UpdateDataSetPermissionsOutputResponse, UpdateDataSetPermissionsOutputError>(id: "updateDataSetPermissions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateDataSetPermissionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateDataSetPermissionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateDataSetPermissionsInput, UpdateDataSetPermissionsOutputResponse, UpdateDataSetPermissionsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateDataSetPermissionsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a data source.</p>
    public func updateDataSource(input: UpdateDataSourceInput, completion: @escaping (SdkResult<UpdateDataSourceOutputResponse, UpdateDataSourceOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dataSourceId = input.dataSourceId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dataSourceId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sources/\(dataSourceId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateDataSource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateDataSourceInput, UpdateDataSourceOutputResponse, UpdateDataSourceOutputError>(id: "updateDataSource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateDataSourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateDataSourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateDataSourceInput, UpdateDataSourceOutputResponse, UpdateDataSourceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateDataSourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the permissions to a data source.</p>
    public func updateDataSourcePermissions(input: UpdateDataSourcePermissionsInput, completion: @escaping (SdkResult<UpdateDataSourcePermissionsOutputResponse, UpdateDataSourcePermissionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let dataSourceId = input.dataSourceId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component dataSourceId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/data-sources/\(dataSourceId)/permissions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateDataSourcePermissions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateDataSourcePermissionsInput, UpdateDataSourcePermissionsOutputResponse, UpdateDataSourcePermissionsOutputError>(id: "updateDataSourcePermissions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateDataSourcePermissionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateDataSourcePermissionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateDataSourcePermissionsInput, UpdateDataSourcePermissionsOutputResponse, UpdateDataSourcePermissionsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateDataSourcePermissionsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Changes a group description. </p>
    public func updateGroup(input: UpdateGroupInput, completion: @escaping (SdkResult<UpdateGroupOutputResponse, UpdateGroupOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let groupName = input.groupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component groupName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/groups/\(groupName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateGroupInput, UpdateGroupOutputResponse, UpdateGroupOutputError>(id: "updateGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateGroupInput, UpdateGroupOutputResponse, UpdateGroupOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates an existing IAM policy assignment. This operation updates only the optional
    /// 			parameter or parameters that are specified in the request.
    /// 		    This overwrites all of the users included in <code>Identities</code>.
    /// 		</p>
    public func updateIAMPolicyAssignment(input: UpdateIAMPolicyAssignmentInput, completion: @escaping (SdkResult<UpdateIAMPolicyAssignmentOutputResponse, UpdateIAMPolicyAssignmentOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let assignmentName = input.assignmentName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component assignmentName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/iam-policy-assignments/\(assignmentName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateIAMPolicyAssignment")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateIAMPolicyAssignmentInput, UpdateIAMPolicyAssignmentOutputResponse, UpdateIAMPolicyAssignmentOutputError>(id: "updateIAMPolicyAssignment")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateIAMPolicyAssignmentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateIAMPolicyAssignmentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateIAMPolicyAssignmentInput, UpdateIAMPolicyAssignmentOutputResponse, UpdateIAMPolicyAssignmentOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateIAMPolicyAssignmentInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a template from an existing Amazon QuickSight analysis or another template.</p>
    public func updateTemplate(input: UpdateTemplateInput, completion: @escaping (SdkResult<UpdateTemplateOutputResponse, UpdateTemplateOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let templateId = input.templateId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component templateId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/templates/\(templateId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateTemplate")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateTemplateInput, UpdateTemplateOutputResponse, UpdateTemplateOutputError>(id: "updateTemplate")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateTemplateInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateTemplateInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateTemplateInput, UpdateTemplateOutputResponse, UpdateTemplateOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateTemplateInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the template alias of a template.</p>
    public func updateTemplateAlias(input: UpdateTemplateAliasInput, completion: @escaping (SdkResult<UpdateTemplateAliasOutputResponse, UpdateTemplateAliasOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let templateId = input.templateId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component templateId unexpectedly nil"))))
            return
        }
        guard let aliasName = input.aliasName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component aliasName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/templates/\(templateId)/aliases/\(aliasName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateTemplateAlias")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateTemplateAliasInput, UpdateTemplateAliasOutputResponse, UpdateTemplateAliasOutputError>(id: "updateTemplateAlias")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateTemplateAliasInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateTemplateAliasInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateTemplateAliasInput, UpdateTemplateAliasOutputResponse, UpdateTemplateAliasOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateTemplateAliasInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the resource permissions for a template.</p>
    public func updateTemplatePermissions(input: UpdateTemplatePermissionsInput, completion: @escaping (SdkResult<UpdateTemplatePermissionsOutputResponse, UpdateTemplatePermissionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let templateId = input.templateId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component templateId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/templates/\(templateId)/permissions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateTemplatePermissions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateTemplatePermissionsInput, UpdateTemplatePermissionsOutputResponse, UpdateTemplatePermissionsOutputError>(id: "updateTemplatePermissions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateTemplatePermissionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateTemplatePermissionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateTemplatePermissionsInput, UpdateTemplatePermissionsOutputResponse, UpdateTemplatePermissionsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateTemplatePermissionsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a theme.</p>
    public func updateTheme(input: UpdateThemeInput, completion: @escaping (SdkResult<UpdateThemeOutputResponse, UpdateThemeOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let themeId = input.themeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component themeId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/themes/\(themeId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateTheme")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateThemeInput, UpdateThemeOutputResponse, UpdateThemeOutputError>(id: "updateTheme")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateThemeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateThemeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateThemeInput, UpdateThemeOutputResponse, UpdateThemeOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateThemeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates an alias of a theme.</p>
    public func updateThemeAlias(input: UpdateThemeAliasInput, completion: @escaping (SdkResult<UpdateThemeAliasOutputResponse, UpdateThemeAliasOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let themeId = input.themeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component themeId unexpectedly nil"))))
            return
        }
        guard let aliasName = input.aliasName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component aliasName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/themes/\(themeId)/aliases/\(aliasName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateThemeAlias")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateThemeAliasInput, UpdateThemeAliasOutputResponse, UpdateThemeAliasOutputError>(id: "updateThemeAlias")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateThemeAliasInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateThemeAliasInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateThemeAliasInput, UpdateThemeAliasOutputResponse, UpdateThemeAliasOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateThemeAliasInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the resource permissions for a theme. Permissions apply to the action to grant or
    /// 			revoke permissions on, for example <code>"quicksight:DescribeTheme"</code>.</p>
    /// 		       <p>Theme permissions apply in groupings. Valid groupings include the following for the three
    /// 			levels of permissions, which are user, owner, or no permissions: </p>
    /// 			      <ul>
    ///             <li>
    ///                <p>User</p>
    /// 					          <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:DescribeTheme"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:DescribeThemeAlias"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:ListThemeAliases"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:ListThemeVersions"</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    /// 				        </li>
    ///             <li>
    ///                <p>Owner</p>
    /// 					          <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:DescribeTheme"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:DescribeThemeAlias"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:ListThemeAliases"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:ListThemeVersions"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:DeleteTheme"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:UpdateTheme"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:CreateThemeAlias"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:DeleteThemeAlias"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:UpdateThemeAlias"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:UpdateThemePermissions"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:DescribeThemePermissions"</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    /// 				        </li>
    ///             <li>
    ///                <p>To specify no permissions, omit the permissions list.</p>
    ///             </li>
    ///          </ul>
    public func updateThemePermissions(input: UpdateThemePermissionsInput, completion: @escaping (SdkResult<UpdateThemePermissionsOutputResponse, UpdateThemePermissionsOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let themeId = input.themeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component themeId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/themes/\(themeId)/permissions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateThemePermissions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateThemePermissionsInput, UpdateThemePermissionsOutputResponse, UpdateThemePermissionsOutputError>(id: "updateThemePermissions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateThemePermissionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateThemePermissionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateThemePermissionsInput, UpdateThemePermissionsOutputResponse, UpdateThemePermissionsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateThemePermissionsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates an Amazon QuickSight user.</p>
    public func updateUser(input: UpdateUserInput, completion: @escaping (SdkResult<UpdateUserOutputResponse, UpdateUserOutputError>) -> Void)
    {
        guard let awsAccountId = input.awsAccountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component awsAccountId unexpectedly nil"))))
            return
        }
        guard let namespace = input.namespace else {
            completion(.failure(.client(ClientError.serializationFailed("uri component namespace unexpectedly nil"))))
            return
        }
        guard let userName = input.userName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userName unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(awsAccountId)/namespaces/\(namespace)/users/\(userName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "quicksight.\(config.region).amazonaws.com")
                      .withSigningName(value: "quicksight")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateUserInput, UpdateUserOutputResponse, UpdateUserOutputError>(id: "updateUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateUserInput, UpdateUserOutputResponse, UpdateUserOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateUserInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
