// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ShareError: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accounts = "Accounts"
        case error = "Error"
        case message = "Message"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accounts = accounts {
            var accountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accounts)
            for namespaces0 in accounts {
                try accountsContainer.encode(namespaces0)
            }
        }
        if let error = error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountsContainer = try containerValues.decodeIfPresent([String].self, forKey: .accounts)
        var accountsDecoded0:[String]? = nil
        if let accountsContainer = accountsContainer {
            accountsDecoded0 = [String]()
            for string0 in accountsContainer {
                accountsDecoded0?.append(string0)
            }
        }
        accounts = accountsDecoded0
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let errorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .error)
        error = errorDecoded
    }
}
