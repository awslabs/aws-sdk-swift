// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProvisioningArtifactProperties: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case disableTemplateValidation = "DisableTemplateValidation"
        case info = "Info"
        case name = "Name"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if disableTemplateValidation != false {
            try encodeContainer.encode(disableTemplateValidation, forKey: .disableTemplateValidation)
        }
        if let info = info {
            var infoContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .info)
            for (dictKey0, provisioningartifactinfo0) in info {
                try infoContainer.encode(provisioningartifactinfo0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let infoContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .info)
        var infoDecoded0: [String:String]? = nil
        if let infoContainer = infoContainer {
            infoDecoded0 = [String:String]()
            for (key0, provisioningartifactinfovalue0) in infoContainer {
                infoDecoded0?[key0] = provisioningartifactinfovalue0
            }
        }
        info = infoDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(ProvisioningArtifactType.self, forKey: .type)
        type = typeDecoded
        let disableTemplateValidationDecoded = try containerValues.decode(Bool.self, forKey: .disableTemplateValidation)
        disableTemplateValidation = disableTemplateValidationDecoded
    }
}
