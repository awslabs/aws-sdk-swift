// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdatePortfolioInputBody: Equatable {
    public let acceptLanguage: String?
    public let id: String?
    public let displayName: String?
    public let description: String?
    public let providerName: String?
    public let addTags: [Tag]?
    public let removeTags: [String]?
}

extension UpdatePortfolioInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case acceptLanguage = "AcceptLanguage"
        case addTags = "AddTags"
        case description = "Description"
        case displayName = "DisplayName"
        case id = "Id"
        case providerName = "ProviderName"
        case removeTags = "RemoveTags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acceptLanguageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .acceptLanguage)
        acceptLanguage = acceptLanguageDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let providerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let addTagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .addTags)
        var addTagsDecoded0:[Tag]? = nil
        if let addTagsContainer = addTagsContainer {
            addTagsDecoded0 = [Tag]()
            for structure0 in addTagsContainer {
                addTagsDecoded0?.append(structure0)
            }
        }
        addTags = addTagsDecoded0
        let removeTagsContainer = try containerValues.decodeIfPresent([String].self, forKey: .removeTags)
        var removeTagsDecoded0:[String]? = nil
        if let removeTagsContainer = removeTagsContainer {
            removeTagsDecoded0 = [String]()
            for string0 in removeTagsContainer {
                removeTagsDecoded0?.append(string0)
            }
        }
        removeTags = removeTagsDecoded0
    }
}
