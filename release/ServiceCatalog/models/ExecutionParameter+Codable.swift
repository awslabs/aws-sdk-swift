// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExecutionParameter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultValues = "DefaultValues"
        case name = "Name"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultValues = defaultValues {
            var defaultValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .defaultValues)
            for executionparametervaluelist0 in defaultValues {
                try defaultValuesContainer.encode(executionparametervaluelist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .type)
        type = typeDecoded
        let defaultValuesContainer = try containerValues.decodeIfPresent([String].self, forKey: .defaultValues)
        var defaultValuesDecoded0:[String]? = nil
        if let defaultValuesContainer = defaultValuesContainer {
            defaultValuesDecoded0 = [String]()
            for string0 in defaultValuesContainer {
                defaultValuesDecoded0?.append(string0)
            }
        }
        defaultValues = defaultValuesDecoded0
    }
}
