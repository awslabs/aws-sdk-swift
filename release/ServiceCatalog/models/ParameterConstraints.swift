// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The constraints that the administrator has put on the parameter.</p>
public struct ParameterConstraints: Equatable {
    /// <p>A regular expression that represents the patterns that allow for <code>String</code> types. The pattern must match the entire parameter value provided.</p>
    public let allowedPattern: String?
    /// <p>The values that the administrator has allowed for the parameter.</p>
    public let allowedValues: [String]?
    /// <p>A string that explains a constraint when the constraint is violated. For example, without a constraint description, a parameter that has an allowed pattern of <code>[A-Za-z0-9]+</code> displays the following error message when the user specifies an invalid value:</p>
    ///
    ///          <p>
    ///             <code>Malformed input-Parameter MyParameter must match pattern [A-Za-z0-9]+</code>
    ///          </p>
    ///
    ///          <p>By adding a constraint description, such as must only contain letters (uppercase and lowercase) and numbers, you can display the following customized error message:</p>
    ///
    ///          <p>
    ///             <code>Malformed input-Parameter MyParameter must only contain uppercase and lowercase letters and numbers.</code>
    ///          </p>
    public let constraintDescription: String?
    /// <p>An integer value that determines the largest number of characters you want to allow for <code>String</code> types. </p>
    public let maxLength: String?
    /// <p>A numeric value that determines the largest numeric value you want to allow for <code>Number</code> types.</p>
    public let maxValue: String?
    /// <p>An integer value that determines the smallest number of characters you want to allow for <code>String</code> types.</p>
    public let minLength: String?
    /// <p>A numeric value that determines the smallest numeric value you want to allow for <code>Number</code> types. </p>
    public let minValue: String?

    public init (
        allowedPattern: String? = nil,
        allowedValues: [String]? = nil,
        constraintDescription: String? = nil,
        maxLength: String? = nil,
        maxValue: String? = nil,
        minLength: String? = nil,
        minValue: String? = nil
    )
    {
        self.allowedPattern = allowedPattern
        self.allowedValues = allowedValues
        self.constraintDescription = constraintDescription
        self.maxLength = maxLength
        self.maxValue = maxValue
        self.minLength = minLength
        self.minValue = minValue
    }
}
