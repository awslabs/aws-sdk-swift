// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ImportAsProvisionedProductInput: Equatable {
    /// <p>The language code.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>en</code> - English (default)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>jp</code> - Japanese</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>zh</code> - Chinese</p>
    ///             </li>
    ///          </ul>
    public let acceptLanguage: String?
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token,
    ///   the same response is returned for each repeated request.</p>
    public var idempotencyToken: String?
    /// <p>The unique identifier of the resource to be imported. It only currently supports
    ///          CloudFormation stack IDs.</p>
    public let physicalId: String?
    /// <p>The product identifier.</p>
    public let productId: String?
    /// <p>The user-friendly name of the provisioned product. The value must be unique for the AWS
    ///          account. The name cannot be updated after the product is provisioned. </p>
    public let provisionedProductName: String?
    /// <p>The identifier of the provisioning artifact.</p>
    public let provisioningArtifactId: String?

    public init (
        acceptLanguage: String? = nil,
        idempotencyToken: String? = nil,
        physicalId: String? = nil,
        productId: String? = nil,
        provisionedProductName: String? = nil,
        provisioningArtifactId: String? = nil
    )
    {
        self.acceptLanguage = acceptLanguage
        self.idempotencyToken = idempotencyToken
        self.physicalId = physicalId
        self.productId = productId
        self.provisionedProductName = provisionedProductName
        self.provisioningArtifactId = provisioningArtifactId
    }
}
