// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ProvisionProductInput: Equatable {
    /// <p>The language code.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>en</code> - English (default)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>jp</code> - Japanese</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>zh</code> - Chinese</p>
    ///             </li>
    ///          </ul>
    public let acceptLanguage: String?
    /// <p>Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related
    ///          events.</p>
    public let notificationArns: [String]?
    /// <p>The path identifier of the product. This value is optional if the product
    ///          has a default path, and required if the product has more than one path.
    ///          To list the paths for a product, use <a>ListLaunchPaths</a>. You must provide the name or ID, but not both.</p>
    public let pathId: String?
    /// <p>The name of the path. You must provide the name or ID, but not both.</p>
    public let pathName: String?
    /// <p>The product identifier. You must provide the name or ID, but not both.</p>
    public let productId: String?
    /// <p>The name of the product. You must provide the name or ID, but not both.</p>
    public let productName: String?
    /// <p>An idempotency token that uniquely identifies the provisioning request.</p>
    public var provisionToken: String?
    /// <p>A user-friendly name for the provisioned product. This value must be
    ///          unique for the AWS account and cannot be updated after the product is provisioned.</p>
    public let provisionedProductName: String?
    /// <p>The identifier of the provisioning artifact. You must provide the name or ID, but not both.</p>
    public let provisioningArtifactId: String?
    /// <p>The name of the provisioning artifact. You must provide the name or ID, but not both.</p>
    public let provisioningArtifactName: String?
    /// <p>Parameters specified by the administrator that are required for provisioning the
    ///          product.</p>
    public let provisioningParameters: [ProvisioningParameter]?
    /// <p>An object that contains information about the provisioning preferences for a stack set.</p>
    public let provisioningPreferences: ProvisioningPreferences?
    /// <p>One or more tags.</p>
    public let tags: [Tag]?

    public init (
        acceptLanguage: String? = nil,
        notificationArns: [String]? = nil,
        pathId: String? = nil,
        pathName: String? = nil,
        productId: String? = nil,
        productName: String? = nil,
        provisionToken: String? = nil,
        provisionedProductName: String? = nil,
        provisioningArtifactId: String? = nil,
        provisioningArtifactName: String? = nil,
        provisioningParameters: [ProvisioningParameter]? = nil,
        provisioningPreferences: ProvisioningPreferences? = nil,
        tags: [Tag]? = nil
    )
    {
        self.acceptLanguage = acceptLanguage
        self.notificationArns = notificationArns
        self.pathId = pathId
        self.pathName = pathName
        self.productId = productId
        self.productName = productName
        self.provisionToken = provisionToken
        self.provisionedProductName = provisionedProductName
        self.provisioningArtifactId = provisioningArtifactId
        self.provisioningArtifactName = provisioningArtifactName
        self.provisioningParameters = provisioningParameters
        self.provisioningPreferences = provisioningPreferences
        self.tags = tags
    }
}
