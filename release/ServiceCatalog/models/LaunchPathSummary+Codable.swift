// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LaunchPathSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case constraintSummaries = "ConstraintSummaries"
        case id = "Id"
        case name = "Name"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraintSummaries = constraintSummaries {
            var constraintSummariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .constraintSummaries)
            for constraintsummaries0 in constraintSummaries {
                try constraintSummariesContainer.encode(constraintsummaries0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let constraintSummariesContainer = try containerValues.decodeIfPresent([ConstraintSummary].self, forKey: .constraintSummaries)
        var constraintSummariesDecoded0:[ConstraintSummary]? = nil
        if let constraintSummariesContainer = constraintSummariesContainer {
            constraintSummariesDecoded0 = [ConstraintSummary]()
            for structure0 in constraintSummariesContainer {
                constraintSummariesDecoded0?.append(structure0)
            }
        }
        constraintSummaries = constraintSummariesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}
