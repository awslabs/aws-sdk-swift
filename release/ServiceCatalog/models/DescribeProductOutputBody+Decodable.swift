// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeProductOutputBody: Equatable {
    public let productViewSummary: ProductViewSummary?
    public let provisioningArtifacts: [ProvisioningArtifact]?
    public let budgets: [BudgetDetail]?
    public let launchPaths: [LaunchPath]?
}

extension DescribeProductOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case budgets = "Budgets"
        case launchPaths = "LaunchPaths"
        case productViewSummary = "ProductViewSummary"
        case provisioningArtifacts = "ProvisioningArtifacts"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productViewSummaryDecoded = try containerValues.decodeIfPresent(ProductViewSummary.self, forKey: .productViewSummary)
        productViewSummary = productViewSummaryDecoded
        let provisioningArtifactsContainer = try containerValues.decodeIfPresent([ProvisioningArtifact].self, forKey: .provisioningArtifacts)
        var provisioningArtifactsDecoded0:[ProvisioningArtifact]? = nil
        if let provisioningArtifactsContainer = provisioningArtifactsContainer {
            provisioningArtifactsDecoded0 = [ProvisioningArtifact]()
            for structure0 in provisioningArtifactsContainer {
                provisioningArtifactsDecoded0?.append(structure0)
            }
        }
        provisioningArtifacts = provisioningArtifactsDecoded0
        let budgetsContainer = try containerValues.decodeIfPresent([BudgetDetail].self, forKey: .budgets)
        var budgetsDecoded0:[BudgetDetail]? = nil
        if let budgetsContainer = budgetsContainer {
            budgetsDecoded0 = [BudgetDetail]()
            for structure0 in budgetsContainer {
                budgetsDecoded0?.append(structure0)
            }
        }
        budgets = budgetsDecoded0
        let launchPathsContainer = try containerValues.decodeIfPresent([LaunchPath].self, forKey: .launchPaths)
        var launchPathsDecoded0:[LaunchPath]? = nil
        if let launchPathsContainer = launchPathsContainer {
            launchPathsDecoded0 = [LaunchPath]()
            for structure0 in launchPathsContainer {
                launchPathsDecoded0?.append(structure0)
            }
        }
        launchPaths = launchPathsDecoded0
    }
}
