// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ShareDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case shareErrors = "ShareErrors"
        case successfulShares = "SuccessfulShares"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let shareErrors = shareErrors {
            var shareErrorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .shareErrors)
            for shareerrors0 in shareErrors {
                try shareErrorsContainer.encode(shareerrors0)
            }
        }
        if let successfulShares = successfulShares {
            var successfulSharesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .successfulShares)
            for successfulshares0 in successfulShares {
                try successfulSharesContainer.encode(successfulshares0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let successfulSharesContainer = try containerValues.decodeIfPresent([String].self, forKey: .successfulShares)
        var successfulSharesDecoded0:[String]? = nil
        if let successfulSharesContainer = successfulSharesContainer {
            successfulSharesDecoded0 = [String]()
            for string0 in successfulSharesContainer {
                successfulSharesDecoded0?.append(string0)
            }
        }
        successfulShares = successfulSharesDecoded0
        let shareErrorsContainer = try containerValues.decodeIfPresent([ShareError].self, forKey: .shareErrors)
        var shareErrorsDecoded0:[ShareError]? = nil
        if let shareErrorsContainer = shareErrorsContainer {
            shareErrorsDecoded0 = [ShareError]()
            for structure0 in shareErrorsContainer {
                shareErrorsDecoded0?.append(structure0)
            }
        }
        shareErrors = shareErrorsDecoded0
    }
}
