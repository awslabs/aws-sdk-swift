// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetProvisionedProductOutputsInputBody: Equatable {
    public let acceptLanguage: String?
    public let provisionedProductId: String?
    public let provisionedProductName: String?
    public let outputKeys: [String]?
    public let pageSize: Int
    public let pageToken: String?
}

extension GetProvisionedProductOutputsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case acceptLanguage = "AcceptLanguage"
        case outputKeys = "OutputKeys"
        case pageSize = "PageSize"
        case pageToken = "PageToken"
        case provisionedProductId = "ProvisionedProductId"
        case provisionedProductName = "ProvisionedProductName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acceptLanguageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .acceptLanguage)
        acceptLanguage = acceptLanguageDecoded
        let provisionedProductIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .provisionedProductId)
        provisionedProductId = provisionedProductIdDecoded
        let provisionedProductNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .provisionedProductName)
        provisionedProductName = provisionedProductNameDecoded
        let outputKeysContainer = try containerValues.decodeIfPresent([String].self, forKey: .outputKeys)
        var outputKeysDecoded0:[String]? = nil
        if let outputKeysContainer = outputKeysContainer {
            outputKeysDecoded0 = [String]()
            for string0 in outputKeysContainer {
                outputKeysDecoded0?.append(string0)
            }
        }
        outputKeys = outputKeysDecoded0
        let pageSizeDecoded = try containerValues.decode(Int.self, forKey: .pageSize)
        pageSize = pageSizeDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}
