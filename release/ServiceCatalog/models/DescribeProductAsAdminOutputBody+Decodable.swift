// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeProductAsAdminOutputBody: Equatable {
    public let productViewDetail: ProductViewDetail?
    public let provisioningArtifactSummaries: [ProvisioningArtifactSummary]?
    public let tags: [Tag]?
    public let tagOptions: [TagOptionDetail]?
    public let budgets: [BudgetDetail]?
}

extension DescribeProductAsAdminOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case budgets = "Budgets"
        case productViewDetail = "ProductViewDetail"
        case provisioningArtifactSummaries = "ProvisioningArtifactSummaries"
        case tagOptions = "TagOptions"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productViewDetailDecoded = try containerValues.decodeIfPresent(ProductViewDetail.self, forKey: .productViewDetail)
        productViewDetail = productViewDetailDecoded
        let provisioningArtifactSummariesContainer = try containerValues.decodeIfPresent([ProvisioningArtifactSummary].self, forKey: .provisioningArtifactSummaries)
        var provisioningArtifactSummariesDecoded0:[ProvisioningArtifactSummary]? = nil
        if let provisioningArtifactSummariesContainer = provisioningArtifactSummariesContainer {
            provisioningArtifactSummariesDecoded0 = [ProvisioningArtifactSummary]()
            for structure0 in provisioningArtifactSummariesContainer {
                provisioningArtifactSummariesDecoded0?.append(structure0)
            }
        }
        provisioningArtifactSummaries = provisioningArtifactSummariesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let tagOptionsContainer = try containerValues.decodeIfPresent([TagOptionDetail].self, forKey: .tagOptions)
        var tagOptionsDecoded0:[TagOptionDetail]? = nil
        if let tagOptionsContainer = tagOptionsContainer {
            tagOptionsDecoded0 = [TagOptionDetail]()
            for structure0 in tagOptionsContainer {
                tagOptionsDecoded0?.append(structure0)
            }
        }
        tagOptions = tagOptionsDecoded0
        let budgetsContainer = try containerValues.decodeIfPresent([BudgetDetail].self, forKey: .budgets)
        var budgetsDecoded0:[BudgetDetail]? = nil
        if let budgetsContainer = budgetsContainer {
            budgetsDecoded0 = [BudgetDetail]()
            for structure0 in budgetsContainer {
                budgetsDecoded0?.append(structure0)
            }
        }
        budgets = budgetsDecoded0
    }
}
