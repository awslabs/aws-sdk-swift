// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateProductInputBody: Equatable {
    public let acceptLanguage: String?
    public let id: String?
    public let name: String?
    public let owner: String?
    public let description: String?
    public let distributor: String?
    public let supportDescription: String?
    public let supportEmail: String?
    public let supportUrl: String?
    public let addTags: [Tag]?
    public let removeTags: [String]?
}

extension UpdateProductInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case acceptLanguage = "AcceptLanguage"
        case addTags = "AddTags"
        case description = "Description"
        case distributor = "Distributor"
        case id = "Id"
        case name = "Name"
        case owner = "Owner"
        case removeTags = "RemoveTags"
        case supportDescription = "SupportDescription"
        case supportEmail = "SupportEmail"
        case supportUrl = "SupportUrl"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acceptLanguageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .acceptLanguage)
        acceptLanguage = acceptLanguageDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .owner)
        owner = ownerDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let distributorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .distributor)
        distributor = distributorDecoded
        let supportDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .supportDescription)
        supportDescription = supportDescriptionDecoded
        let supportEmailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .supportEmail)
        supportEmail = supportEmailDecoded
        let supportUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .supportUrl)
        supportUrl = supportUrlDecoded
        let addTagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .addTags)
        var addTagsDecoded0:[Tag]? = nil
        if let addTagsContainer = addTagsContainer {
            addTagsDecoded0 = [Tag]()
            for structure0 in addTagsContainer {
                addTagsDecoded0?.append(structure0)
            }
        }
        addTags = addTagsDecoded0
        let removeTagsContainer = try containerValues.decodeIfPresent([String].self, forKey: .removeTags)
        var removeTagsDecoded0:[String]? = nil
        if let removeTagsContainer = removeTagsContainer {
            removeTagsDecoded0 = [String]()
            for string0 in removeTagsContainer {
                removeTagsDecoded0?.append(string0)
            }
        }
        removeTags = removeTagsDecoded0
    }
}
