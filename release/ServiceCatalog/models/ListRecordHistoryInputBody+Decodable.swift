// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRecordHistoryInputBody: Equatable {
    public let acceptLanguage: String?
    public let accessLevelFilter: AccessLevelFilter?
    public let searchFilter: ListRecordHistorySearchFilter?
    public let pageSize: Int
    public let pageToken: String?
}

extension ListRecordHistoryInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case acceptLanguage = "AcceptLanguage"
        case accessLevelFilter = "AccessLevelFilter"
        case pageSize = "PageSize"
        case pageToken = "PageToken"
        case searchFilter = "SearchFilter"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acceptLanguageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .acceptLanguage)
        acceptLanguage = acceptLanguageDecoded
        let accessLevelFilterDecoded = try containerValues.decodeIfPresent(AccessLevelFilter.self, forKey: .accessLevelFilter)
        accessLevelFilter = accessLevelFilterDecoded
        let searchFilterDecoded = try containerValues.decodeIfPresent(ListRecordHistorySearchFilter.self, forKey: .searchFilter)
        searchFilter = searchFilterDecoded
        let pageSizeDecoded = try containerValues.decode(Int.self, forKey: .pageSize)
        pageSize = pageSizeDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}
