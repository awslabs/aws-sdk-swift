// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateProvisionedProductInput: Equatable {
    /// <p>The language code.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>en</code> - English (default)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>jp</code> - Japanese</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>zh</code> - Chinese</p>
    ///             </li>
    ///          </ul>
    public let acceptLanguage: String?
    /// <p>The path identifier. This value is optional if the product
    ///          has a default path, and required if the product has more than one path. You must provide the name or ID, but not both.</p>
    public let pathId: String?
    /// <p>The name of the path. You must provide the name or ID, but not both.</p>
    public let pathName: String?
    /// <p>The identifier of the product. You must provide the name or ID, but not both.</p>
    public let productId: String?
    /// <p>The name of the product. You must provide the name or ID, but not both.</p>
    public let productName: String?
    /// <p>The identifier of the provisioned product. You must provide the name or ID, but not both.</p>
    public let provisionedProductId: String?
    /// <p>The name of the provisioned product. You cannot specify both
    ///          <code>ProvisionedProductName</code> and <code>ProvisionedProductId</code>.</p>
    public let provisionedProductName: String?
    /// <p>The identifier of the provisioning artifact.</p>
    public let provisioningArtifactId: String?
    /// <p>The name of the provisioning artifact. You must provide the name or ID, but not both.</p>
    public let provisioningArtifactName: String?
    /// <p>The new parameters.</p>
    public let provisioningParameters: [UpdateProvisioningParameter]?
    /// <p>An object that contains information about the provisioning preferences for a stack set.</p>
    public let provisioningPreferences: UpdateProvisioningPreferences?
    /// <p>One or more tags. Requires the product to have <code>RESOURCE_UPDATE</code> constraint with <code>TagUpdatesOnProvisionedProduct</code> set to <code>ALLOWED</code> to allow tag updates.</p>
    public let tags: [Tag]?
    /// <p>The idempotency token that uniquely identifies the provisioning update request.</p>
    public var updateToken: String?

    public init (
        acceptLanguage: String? = nil,
        pathId: String? = nil,
        pathName: String? = nil,
        productId: String? = nil,
        productName: String? = nil,
        provisionedProductId: String? = nil,
        provisionedProductName: String? = nil,
        provisioningArtifactId: String? = nil,
        provisioningArtifactName: String? = nil,
        provisioningParameters: [UpdateProvisioningParameter]? = nil,
        provisioningPreferences: UpdateProvisioningPreferences? = nil,
        tags: [Tag]? = nil,
        updateToken: String? = nil
    )
    {
        self.acceptLanguage = acceptLanguage
        self.pathId = pathId
        self.pathName = pathName
        self.productId = productId
        self.productName = productName
        self.provisionedProductId = provisionedProductId
        self.provisionedProductName = provisionedProductName
        self.provisioningArtifactId = provisioningArtifactId
        self.provisioningArtifactName = provisioningArtifactName
        self.provisioningParameters = provisioningParameters
        self.provisioningPreferences = provisioningPreferences
        self.tags = tags
        self.updateToken = updateToken
    }
}
