// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Principal: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case principalARN = "PrincipalARN"
        case principalType = "PrincipalType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let principalARN = principalARN {
            try encodeContainer.encode(principalARN, forKey: .principalARN)
        }
        if let principalType = principalType {
            try encodeContainer.encode(principalType.rawValue, forKey: .principalType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .principalARN)
        principalARN = principalARNDecoded
        let principalTypeDecoded = try containerValues.decodeIfPresent(PrincipalType.self, forKey: .principalType)
        principalType = principalTypeDecoded
    }
}
