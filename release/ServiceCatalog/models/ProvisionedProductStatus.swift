// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ProvisionedProductStatus {
    case available
    case error
    case planInProgress
    case tainted
    case underChange
    case sdkUnknown(String)
}

extension ProvisionedProductStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ProvisionedProductStatus] {
        return [
            .available,
            .error,
            .planInProgress,
            .tainted,
            .underChange,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .available: return "AVAILABLE"
        case .error: return "ERROR"
        case .planInProgress: return "PLAN_IN_PROGRESS"
        case .tainted: return "TAINTED"
        case .underChange: return "UNDER_CHANGE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ProvisionedProductStatus(rawValue: rawValue) ?? ProvisionedProductStatus.sdkUnknown(rawValue)
    }
}
