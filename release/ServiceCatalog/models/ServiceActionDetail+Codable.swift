// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServiceActionDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case definition = "Definition"
        case serviceActionSummary = "ServiceActionSummary"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let definition = definition {
            var definitionContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .definition)
            for (dictKey0, serviceactiondefinitionmap0) in definition {
                try definitionContainer.encode(serviceactiondefinitionmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let serviceActionSummary = serviceActionSummary {
            try encodeContainer.encode(serviceActionSummary, forKey: .serviceActionSummary)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceActionSummaryDecoded = try containerValues.decodeIfPresent(ServiceActionSummary.self, forKey: .serviceActionSummary)
        serviceActionSummary = serviceActionSummaryDecoded
        let definitionContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .definition)
        var definitionDecoded0: [String:String]? = nil
        if let definitionContainer = definitionContainer {
            definitionDecoded0 = [String:String]()
            for (key0, serviceactiondefinitionvalue0) in definitionContainer {
                definitionDecoded0?[key0] = serviceactiondefinitionvalue0
            }
        }
        definition = definitionDecoded0
    }
}
