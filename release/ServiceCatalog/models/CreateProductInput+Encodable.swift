// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateProductInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceptLanguage = "AcceptLanguage"
        case description = "Description"
        case distributor = "Distributor"
        case idempotencyToken = "IdempotencyToken"
        case name = "Name"
        case owner = "Owner"
        case productType = "ProductType"
        case provisioningArtifactParameters = "ProvisioningArtifactParameters"
        case supportDescription = "SupportDescription"
        case supportEmail = "SupportEmail"
        case supportUrl = "SupportUrl"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptLanguage = acceptLanguage {
            try encodeContainer.encode(acceptLanguage, forKey: .acceptLanguage)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let distributor = distributor {
            try encodeContainer.encode(distributor, forKey: .distributor)
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let productType = productType {
            try encodeContainer.encode(productType.rawValue, forKey: .productType)
        }
        if let provisioningArtifactParameters = provisioningArtifactParameters {
            try encodeContainer.encode(provisioningArtifactParameters, forKey: .provisioningArtifactParameters)
        }
        if let supportDescription = supportDescription {
            try encodeContainer.encode(supportDescription, forKey: .supportDescription)
        }
        if let supportEmail = supportEmail {
            try encodeContainer.encode(supportEmail, forKey: .supportEmail)
        }
        if let supportUrl = supportUrl {
            try encodeContainer.encode(supportUrl, forKey: .supportUrl)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for addtags0 in tags {
                try tagsContainer.encode(addtags0)
            }
        }
    }
}
