// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Information about a provisioned product.</p>
public struct ProvisionedProductAttribute: Equatable {
    /// <p>The ARN of the provisioned product.</p>
    public let arn: String?
    /// <p>The UTC time stamp of the creation time.</p>
    public let createdTime: Date?
    /// <p>The identifier of the provisioned product.</p>
    public let id: String?
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token,
    ///   the same response is returned for each repeated request.</p>
    public let idempotencyToken: String?
    /// <p>The record identifier of the last request performed on this provisioned product of the following types:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                ProvisionedProduct
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                UpdateProvisionedProduct
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                ExecuteProvisionedProductPlan
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                TerminateProvisionedProduct
    ///             </p>
    ///             </li>
    ///          </ul>
    public let lastProvisioningRecordId: String?
    /// <p>The record identifier of the last request performed on this provisioned product.</p>
    public let lastRecordId: String?
    /// <p>The record identifier of the last successful request performed on this provisioned product of the following types:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                ProvisionedProduct
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                UpdateProvisionedProduct
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                ExecuteProvisionedProductPlan
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                TerminateProvisionedProduct
    ///             </p>
    ///             </li>
    ///          </ul>
    public let lastSuccessfulProvisioningRecordId: String?
    /// <p>The user-friendly name of the provisioned product.</p>
    public let name: String?
    /// <p>The assigned identifier for the resource, such as an EC2 instance ID or an S3 bucket name.</p>
    public let physicalId: String?
    /// <p>The product identifier.</p>
    public let productId: String?
    /// <p>The name of the product.</p>
    public let productName: String?
    /// <p>The identifier of the provisioning artifact.</p>
    public let provisioningArtifactId: String?
    /// <p>The name of the provisioning artifact.</p>
    public let provisioningArtifactName: String?
    /// <p>The current status of the provisioned product.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>AVAILABLE</code> - Stable state, ready to perform any operation. The most
    ///                recent operation succeeded and completed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UNDER_CHANGE</code> - Transitive state. Operations performed might not have valid results.
    ///                Wait for an <code>AVAILABLE</code> status before performing operations.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TAINTED</code> - Stable state, ready to perform any operation. The stack has
    ///                completed the requested operation but is not exactly what was requested. For example, a
    ///                request to update to a new version failed and the stack rolled back to the current version.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ERROR</code> - An unexpected error occurred. The provisioned product exists but the stack is not running.
    ///                For example, CloudFormation received a parameter value that was not valid and could not launch the stack.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PLAN_IN_PROGRESS</code> - Transitive state. The plan operations were performed to provision a new product,
    ///                 but resources have not yet been created. After reviewing the list of resources to be created, execute the plan. Wait for an <code>AVAILABLE</code> status before performing operations.</p>
    ///             </li>
    ///          </ul>
    public let status: ProvisionedProductStatus?
    /// <p>The current status message of the provisioned product.</p>
    public let statusMessage: String?
    /// <p>One or more tags.</p>
    public let tags: [Tag]?
    /// <p>The type of provisioned product. The supported values are <code>CFN_STACK</code> and <code>CFN_STACKSET</code>.</p>
    public let type: String?
    /// <p>The Amazon Resource Name (ARN) of the IAM user.</p>
    public let userArn: String?
    /// <p>The ARN of the IAM user in the session. This ARN might contain a session ID.</p>
    public let userArnSession: String?

    public init (
        arn: String? = nil,
        createdTime: Date? = nil,
        id: String? = nil,
        idempotencyToken: String? = nil,
        lastProvisioningRecordId: String? = nil,
        lastRecordId: String? = nil,
        lastSuccessfulProvisioningRecordId: String? = nil,
        name: String? = nil,
        physicalId: String? = nil,
        productId: String? = nil,
        productName: String? = nil,
        provisioningArtifactId: String? = nil,
        provisioningArtifactName: String? = nil,
        status: ProvisionedProductStatus? = nil,
        statusMessage: String? = nil,
        tags: [Tag]? = nil,
        type: String? = nil,
        userArn: String? = nil,
        userArnSession: String? = nil
    )
    {
        self.arn = arn
        self.createdTime = createdTime
        self.id = id
        self.idempotencyToken = idempotencyToken
        self.lastProvisioningRecordId = lastProvisioningRecordId
        self.lastRecordId = lastRecordId
        self.lastSuccessfulProvisioningRecordId = lastSuccessfulProvisioningRecordId
        self.name = name
        self.physicalId = physicalId
        self.productId = productId
        self.productName = productName
        self.provisioningArtifactId = provisioningArtifactId
        self.provisioningArtifactName = provisioningArtifactName
        self.status = status
        self.statusMessage = statusMessage
        self.tags = tags
        self.type = type
        self.userArn = userArn
        self.userArnSession = userArnSession
    }
}
