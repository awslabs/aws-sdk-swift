// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct TerminateProvisionedProductInput: Equatable {
    /// <p>The language code.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>en</code> - English (default)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>jp</code> - Japanese</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>zh</code> - Chinese</p>
    ///             </li>
    ///          </ul>
    public let acceptLanguage: String?
    /// <p>If set to true, AWS Service Catalog stops managing the specified provisioned product even
    ///          if it cannot delete the underlying resources.</p>
    public let ignoreErrors: Bool
    /// <p>The identifier of the provisioned product. You cannot specify both
    ///          <code>ProvisionedProductName</code> and <code>ProvisionedProductId</code>.</p>
    public let provisionedProductId: String?
    /// <p>The name of the provisioned product. You cannot specify both
    ///          <code>ProvisionedProductName</code> and <code>ProvisionedProductId</code>.</p>
    public let provisionedProductName: String?
    /// <p>When this boolean parameter is set to true, the <code>TerminateProvisionedProduct</code> API deletes
    ///          the Service Catalog provisioned product. However, it does not remove the CloudFormation
    ///          stack, stack set, or the underlying resources of the deleted provisioned product. The
    ///          default value is false.</p>
    public let retainPhysicalResources: Bool
    /// <p>An idempotency token that uniquely identifies the termination request. This token is
    ///          only valid during the termination process. After the provisioned product is terminated,
    ///          subsequent requests to terminate the same provisioned product always return
    ///          <b>ResourceNotFound</b>.</p>
    public var terminateToken: String?

    public init (
        acceptLanguage: String? = nil,
        ignoreErrors: Bool = false,
        provisionedProductId: String? = nil,
        provisionedProductName: String? = nil,
        retainPhysicalResources: Bool = false,
        terminateToken: String? = nil
    )
    {
        self.acceptLanguage = acceptLanguage
        self.ignoreErrors = ignoreErrors
        self.provisionedProductId = provisionedProductId
        self.provisionedProductName = provisionedProductName
        self.retainPhysicalResources = retainPhysicalResources
        self.terminateToken = terminateToken
    }
}
