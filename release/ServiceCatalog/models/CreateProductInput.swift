// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateProductInput: Equatable {
    /// <p>The language code.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>en</code> - English (default)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>jp</code> - Japanese</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>zh</code> - Chinese</p>
    ///             </li>
    ///          </ul>
    public let acceptLanguage: String?
    /// <p>The description of the product.</p>
    public let description: String?
    /// <p>The distributor of the product.</p>
    public let distributor: String?
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token,
    ///   the same response is returned for each repeated request.</p>
    public var idempotencyToken: String?
    /// <p>The name of the product.</p>
    public let name: String?
    /// <p>The owner of the product.</p>
    public let owner: String?
    /// <p>The type of product.</p>
    public let productType: ProductType?
    /// <p>The configuration of the provisioning artifact. </p>
    public let provisioningArtifactParameters: ProvisioningArtifactProperties?
    /// <p>The support information about the product.</p>
    public let supportDescription: String?
    /// <p>The contact email for product support.</p>
    public let supportEmail: String?
    /// <p>The contact URL for product support.</p>
    ///          <p>
    ///             <code>^https?:\/\// </code>/ is the pattern used to validate SupportUrl.</p>
    public let supportUrl: String?
    /// <p>One or more tags.</p>
    public let tags: [Tag]?

    public init (
        acceptLanguage: String? = nil,
        description: String? = nil,
        distributor: String? = nil,
        idempotencyToken: String? = nil,
        name: String? = nil,
        owner: String? = nil,
        productType: ProductType? = nil,
        provisioningArtifactParameters: ProvisioningArtifactProperties? = nil,
        supportDescription: String? = nil,
        supportEmail: String? = nil,
        supportUrl: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.acceptLanguage = acceptLanguage
        self.description = description
        self.distributor = distributor
        self.idempotencyToken = idempotencyToken
        self.name = name
        self.owner = owner
        self.productType = productType
        self.provisioningArtifactParameters = provisioningArtifactParameters
        self.supportDescription = supportDescription
        self.supportEmail = supportEmail
        self.supportUrl = supportUrl
        self.tags = tags
    }
}
