// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateProvisionedProductPropertiesOutputBody: Equatable {
    public let provisionedProductId: String?
    public let provisionedProductProperties: [String:String]?
    public let recordId: String?
    public let status: RecordStatus?
}

extension UpdateProvisionedProductPropertiesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case provisionedProductId = "ProvisionedProductId"
        case provisionedProductProperties = "ProvisionedProductProperties"
        case recordId = "RecordId"
        case status = "Status"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let provisionedProductIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .provisionedProductId)
        provisionedProductId = provisionedProductIdDecoded
        let provisionedProductPropertiesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .provisionedProductProperties)
        var provisionedProductPropertiesDecoded0: [String:String]? = nil
        if let provisionedProductPropertiesContainer = provisionedProductPropertiesContainer {
            provisionedProductPropertiesDecoded0 = [String:String]()
            for (key0, propertyvalue0) in provisionedProductPropertiesContainer {
                provisionedProductPropertiesDecoded0?[key0] = propertyvalue0
            }
        }
        provisionedProductProperties = provisionedProductPropertiesDecoded0
        let recordIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recordId)
        recordId = recordIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RecordStatus.self, forKey: .status)
        status = statusDecoded
    }
}
