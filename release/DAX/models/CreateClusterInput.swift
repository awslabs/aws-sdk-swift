// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateClusterInput: Equatable {
    /// <p>The Availability Zones (AZs) in which the cluster nodes will reside after the cluster
    ///          has been created or updated. If provided, the length of this list must equal the <code>ReplicationFactor</code> parameter.
    ///          If you omit this parameter, DAX will spread the nodes across Availability Zones for the highest availability.</p>
    public let availabilityZones: [String]?
    /// <p>The cluster identifier. This parameter is stored as a lowercase
    ///             string.</p>
    ///         <p>
    ///             <b>Constraints:</b>
    ///         </p>
    ///         <ul>
    ///             <li>
    ///                 <p>A name must contain from 1 to 20 alphanumeric characters or
    ///                     hyphens.</p>
    ///             </li>
    ///             <li>
    ///                 <p>The first character must be a letter.</p>
    ///             </li>
    ///             <li>
    ///                 <p>A name cannot end with a hyphen or contain two consecutive
    ///                     hyphens.</p>
    ///             </li>
    ///          </ul>
    public let clusterName: String?
    /// <p>A description of the cluster.</p>
    public let description: String?
    /// <p>A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX
    ///             will assume this role and use the role's permissions to access DynamoDB on your
    ///             behalf.</p>
    public let iamRoleArn: String?
    /// <p>The compute and memory capacity of the nodes in the cluster.</p>
    public let nodeType: String?
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications will
    ///             be sent.</p>
    ///         <note>
    ///             <p>The Amazon SNS topic owner must be same as the DAX cluster owner.</p>
    ///         </note>
    public let notificationTopicArn: String?
    /// <p>The parameter group to be associated with the DAX cluster.</p>
    public let parameterGroupName: String?
    /// <p>Specifies the weekly time range during which maintenance on the DAX cluster is
    ///             performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock
    ///             UTC). The minimum maintenance window is a 60 minute period. Valid values for
    ///                 <code>ddd</code> are:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>sun</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>mon</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>tue</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>wed</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>thu</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>fri</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>sat</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <p>Example: <code>sun:05:00-sun:09:00</code>
    ///         </p>
    ///         <note>
    ///             <p>If you don't specify a preferred maintenance window when you create or modify a
    ///                 cache cluster, DAX assigns a 60-minute maintenance window on a randomly selected day
    ///                 of the week.</p>
    ///          </note>
    public let preferredMaintenanceWindow: String?
    /// <p>The number of nodes in the DAX cluster. A replication factor of 1 will
    ///             create a single-node cluster, without any read replicas. For additional fault tolerance,
    ///             you can create a multiple node cluster with one or more read replicas. To do this, set
    ///                 <code>ReplicationFactor</code> to a number between 3 (one primary and two read replicas) and 10 (one primary and nine read replicas).
    ///                  <code>If the AvailabilityZones</code> parameter is provided, its length must equal the <code>ReplicationFactor</code>.</p>
    ///         <note>
    ///             <p>AWS recommends that you have at least two read replicas per cluster.</p>
    ///          </note>
    public let replicationFactor: Int
    /// <p>Represents the settings used to enable server-side encryption on the cluster.</p>
    public let sSESpecification: SSESpecification?
    /// <p>A list of security group IDs to be assigned to each node in the DAX cluster. (Each of the
    ///              security group ID is system-generated.)</p>
    ///         <p>If this parameter is not specified, DAX assigns the default VPC security group to
    ///             each node.</p>
    public let securityGroupIds: [String]?
    /// <p>The name of the subnet group to be used for the replication group.</p>
    ///         <important>
    ///             <p>DAX clusters can only run in an Amazon VPC environment. All of the subnets
    ///                 that you specify in a subnet group must exist in the same VPC.</p>
    ///         </important>
    public let subnetGroupName: String?
    /// <p>A set of tags to associate with the DAX cluster.  </p>
    public let tags: [Tag]?

    public init (
        availabilityZones: [String]? = nil,
        clusterName: String? = nil,
        description: String? = nil,
        iamRoleArn: String? = nil,
        nodeType: String? = nil,
        notificationTopicArn: String? = nil,
        parameterGroupName: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        replicationFactor: Int = 0,
        sSESpecification: SSESpecification? = nil,
        securityGroupIds: [String]? = nil,
        subnetGroupName: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.clusterName = clusterName
        self.description = description
        self.iamRoleArn = iamRoleArn
        self.nodeType = nodeType
        self.notificationTopicArn = notificationTopicArn
        self.parameterGroupName = parameterGroupName
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.replicationFactor = replicationFactor
        self.sSESpecification = sSESpecification
        self.securityGroupIds = securityGroupIds
        self.subnetGroupName = subnetGroupName
        self.tags = tags
    }
}
