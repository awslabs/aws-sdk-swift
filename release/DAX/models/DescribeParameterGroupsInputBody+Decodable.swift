// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeParameterGroupsInputBody: Equatable {
    public let parameterGroupNames: [String]?
    public let maxResults: Int?
    public let nextToken: String?
}

extension DescribeParameterGroupsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parameterGroupNames = "ParameterGroupNames"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterGroupNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .parameterGroupNames)
        var parameterGroupNamesDecoded0:[String]? = nil
        if let parameterGroupNamesContainer = parameterGroupNamesContainer {
            parameterGroupNamesDecoded0 = [String]()
            for string0 in parameterGroupNamesContainer {
                parameterGroupNamesDecoded0?.append(string0)
            }
        }
        parameterGroupNames = parameterGroupNamesDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
