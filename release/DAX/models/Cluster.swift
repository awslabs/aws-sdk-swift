// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains all of the attributes of a specific DAX cluster.</p>
public struct Cluster: Equatable {
    /// <p>The number of nodes in the cluster that are active (i.e., capable of serving
    ///             requests).</p>
    public let activeNodes: Int?
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.
    ///         </p>
    public let clusterArn: String?
    /// <p>The configuration endpoint for this DAX cluster, consisting of a DNS name and a
    ///             port number. Client applications can specify this endpoint, rather than an individual
    ///             node endpoint, and allow the DAX client software to intelligently route requests and
    ///             responses to nodes in the DAX cluster.</p>
    public let clusterDiscoveryEndpoint: Endpoint?
    /// <p>The name of the DAX cluster.</p>
    public let clusterName: String?
    /// <p>The description of the cluster.</p>
    public let description: String?
    /// <p>A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX
    ///             will assume this role and use the role's permissions to access DynamoDB on your
    ///             behalf.</p>
    public let iamRoleArn: String?
    /// <p>A list of nodes to be removed from the cluster.</p>
    public let nodeIdsToRemove: [String]?
    /// <p>The node type for the nodes in the cluster. (All nodes in a DAX cluster are of
    ///             the same type.)</p>
    public let nodeType: String?
    /// <p>A list of nodes that are currently in the cluster.</p>
    public let nodes: [Node]?
    /// <p>Describes a notification topic and its status. Notification topics are used for
    ///             publishing DAX events to subscribers using Amazon Simple Notification Service
    ///             (SNS).</p>
    public let notificationConfiguration: NotificationConfiguration?
    /// <p>The parameter group being used by nodes in the cluster.</p>
    public let parameterGroup: ParameterGroupStatus?
    /// <p>A range of time when maintenance of DAX cluster software will be performed. For
    ///             example: <code>sun:01:00-sun:09:00</code>. Cluster maintenance normally takes less than
    ///             30 minutes, and is performed automatically within the maintenance window.</p>
    public let preferredMaintenanceWindow: String?
    /// <p>The description of the server-side encryption status on the specified DAX cluster.</p>
    public let sSEDescription: SSEDescription?
    /// <p>A list of security groups, and the status of each, for the nodes in the cluster.</p>
    public let securityGroups: [SecurityGroupMembership]?
    /// <p>The current status of the cluster.</p>
    public let status: String?
    /// <p>The subnet group where the DAX cluster is running.</p>
    public let subnetGroup: String?
    /// <p>The total number of nodes in the cluster.</p>
    public let totalNodes: Int?

    public init (
        activeNodes: Int? = nil,
        clusterArn: String? = nil,
        clusterDiscoveryEndpoint: Endpoint? = nil,
        clusterName: String? = nil,
        description: String? = nil,
        iamRoleArn: String? = nil,
        nodeIdsToRemove: [String]? = nil,
        nodeType: String? = nil,
        nodes: [Node]? = nil,
        notificationConfiguration: NotificationConfiguration? = nil,
        parameterGroup: ParameterGroupStatus? = nil,
        preferredMaintenanceWindow: String? = nil,
        sSEDescription: SSEDescription? = nil,
        securityGroups: [SecurityGroupMembership]? = nil,
        status: String? = nil,
        subnetGroup: String? = nil,
        totalNodes: Int? = nil
    )
    {
        self.activeNodes = activeNodes
        self.clusterArn = clusterArn
        self.clusterDiscoveryEndpoint = clusterDiscoveryEndpoint
        self.clusterName = clusterName
        self.description = description
        self.iamRoleArn = iamRoleArn
        self.nodeIdsToRemove = nodeIdsToRemove
        self.nodeType = nodeType
        self.nodes = nodes
        self.notificationConfiguration = notificationConfiguration
        self.parameterGroup = parameterGroup
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.sSEDescription = sSEDescription
        self.securityGroups = securityGroups
        self.status = status
        self.subnetGroup = subnetGroup
        self.totalNodes = totalNodes
    }
}
