// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateParameterGroupInputBody: Equatable {
    public let parameterGroupName: String?
    public let parameterNameValues: [ParameterNameValue]?
}

extension UpdateParameterGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case parameterGroupName = "ParameterGroupName"
        case parameterNameValues = "ParameterNameValues"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
        let parameterNameValuesContainer = try containerValues.decodeIfPresent([ParameterNameValue].self, forKey: .parameterNameValues)
        var parameterNameValuesDecoded0:[ParameterNameValue]? = nil
        if let parameterNameValuesContainer = parameterNameValuesContainer {
            parameterNameValuesDecoded0 = [ParameterNameValue]()
            for structure0 in parameterNameValuesContainer {
                parameterNameValuesDecoded0?.append(structure0)
            }
        }
        parameterNameValues = parameterNameValuesDecoded0
    }
}
