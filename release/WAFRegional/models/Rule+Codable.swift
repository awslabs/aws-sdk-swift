// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Rule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case metricName = "MetricName"
        case name = "Name"
        case predicates = "Predicates"
        case ruleId = "RuleId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let predicates = predicates {
            var predicatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .predicates)
            for predicates0 in predicates {
                try predicatesContainer.encode(predicates0)
            }
        }
        if let ruleId = ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let predicatesContainer = try containerValues.decodeIfPresent([Predicate].self, forKey: .predicates)
        var predicatesDecoded0:[Predicate]? = nil
        if let predicatesContainer = predicatesContainer {
            predicatesDecoded0 = [Predicate]()
            for structure0 in predicatesContainer {
                predicatesDecoded0?.append(structure0)
            }
        }
        predicates = predicatesDecoded0
    }
}
