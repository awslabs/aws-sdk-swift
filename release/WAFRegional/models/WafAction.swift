// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <note>
///             <p>This is <b>AWS WAF Classic</b> documentation. For
///       more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS
///       WAF Classic</a> in the developer guide.</p>
///             <p>
///                <b>For the latest version of AWS
///       WAF</b>, use the AWS WAFV2 API and see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p>
///          </note>
/// 		       <p>For the action that is associated with a rule in a <code>WebACL</code>, specifies the action that you want AWS WAF to perform when a
/// 			web request matches all of the conditions in a rule. For the default action in a <code>WebACL</code>, specifies the action that you want
/// 			AWS WAF to take when a web request doesn't match all of the conditions in any of the rules in a <code>WebACL</code>. </p>
public struct WafAction: Equatable {
    /// <p>Specifies how you want AWS WAF to respond to requests that match the settings in a <code>Rule</code>. Valid settings include the following:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ALLOW</code>: AWS WAF allows requests</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>BLOCK</code>: AWS WAF blocks requests</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>COUNT</code>: AWS WAF increments a counter of the requests that match all of the conditions in the rule.
    /// 				AWS WAF then continues to inspect the web request based on the remaining rules in the web ACL. You can't specify <code>COUNT</code>
    /// 				for the default action for a <code>WebACL</code>.</p>
    ///             </li>
    ///          </ul>
    public let type: WafActionType?

    public init (
        type: WafActionType? = nil
    )
    {
        self.type = type
    }
}
