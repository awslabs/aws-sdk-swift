// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum PredicateType {
    case byteMatch
    case geoMatch
    case ipMatch
    case regexMatch
    case sizeConstraint
    case sqlInjectionMatch
    case xssMatch
    case sdkUnknown(String)
}

extension PredicateType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PredicateType] {
        return [
            .byteMatch,
            .geoMatch,
            .ipMatch,
            .regexMatch,
            .sizeConstraint,
            .sqlInjectionMatch,
            .xssMatch,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .byteMatch: return "ByteMatch"
        case .geoMatch: return "GeoMatch"
        case .ipMatch: return "IPMatch"
        case .regexMatch: return "RegexMatch"
        case .sizeConstraint: return "SizeConstraint"
        case .sqlInjectionMatch: return "SqlInjectionMatch"
        case .xssMatch: return "XssMatch"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PredicateType(rawValue: rawValue) ?? PredicateType.sdkUnknown(rawValue)
    }
}
