// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ByteMatchSetUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case byteMatchTuple = "ByteMatchTuple"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let byteMatchTuple = byteMatchTuple {
            try encodeContainer.encode(byteMatchTuple, forKey: .byteMatchTuple)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(ChangeAction.self, forKey: .action)
        action = actionDecoded
        let byteMatchTupleDecoded = try containerValues.decodeIfPresent(ByteMatchTuple.self, forKey: .byteMatchTuple)
        byteMatchTuple = byteMatchTupleDecoded
    }
}
