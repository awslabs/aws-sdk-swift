// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRateBasedRuleInputBody: Equatable {
    public let name: String?
    public let metricName: String?
    public let rateKey: RateKey?
    public let rateLimit: Int
    public let changeToken: String?
    public let tags: [Tag]?
}

extension CreateRateBasedRuleInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case changeToken = "ChangeToken"
        case metricName = "MetricName"
        case name = "Name"
        case rateKey = "RateKey"
        case rateLimit = "RateLimit"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let rateKeyDecoded = try containerValues.decodeIfPresent(RateKey.self, forKey: .rateKey)
        rateKey = rateKeyDecoded
        let rateLimitDecoded = try containerValues.decode(Int.self, forKey: .rateLimit)
        rateLimit = rateLimitDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
