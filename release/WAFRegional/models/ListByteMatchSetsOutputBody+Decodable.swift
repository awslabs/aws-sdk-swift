// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListByteMatchSetsOutputBody: Equatable {
    public let nextMarker: String?
    public let byteMatchSets: [ByteMatchSetSummary]?
}

extension ListByteMatchSetsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case byteMatchSets = "ByteMatchSets"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let byteMatchSetsContainer = try containerValues.decodeIfPresent([ByteMatchSetSummary].self, forKey: .byteMatchSets)
        var byteMatchSetsDecoded0:[ByteMatchSetSummary]? = nil
        if let byteMatchSetsContainer = byteMatchSetsContainer {
            byteMatchSetsDecoded0 = [ByteMatchSetSummary]()
            for structure0 in byteMatchSetsContainer {
                byteMatchSetsDecoded0?.append(structure0)
            }
        }
        byteMatchSets = byteMatchSetsDecoded0
    }
}
