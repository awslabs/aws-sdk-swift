// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum MigrationErrorType {
    case entityNotFound
    case entityNotSupported
    case s3BucketInvalidRegion
    case s3BucketNotAccessible
    case s3BucketNotFound
    case s3BucketNoPermission
    case s3InternalError
    case sdkUnknown(String)
}

extension MigrationErrorType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MigrationErrorType] {
        return [
            .entityNotFound,
            .entityNotSupported,
            .s3BucketInvalidRegion,
            .s3BucketNotAccessible,
            .s3BucketNotFound,
            .s3BucketNoPermission,
            .s3InternalError,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .entityNotFound: return "ENTITY_NOT_FOUND"
        case .entityNotSupported: return "ENTITY_NOT_SUPPORTED"
        case .s3BucketInvalidRegion: return "S3_BUCKET_INVALID_REGION"
        case .s3BucketNotAccessible: return "S3_BUCKET_NOT_ACCESSIBLE"
        case .s3BucketNotFound: return "S3_BUCKET_NOT_FOUND"
        case .s3BucketNoPermission: return "S3_BUCKET_NO_PERMISSION"
        case .s3InternalError: return "S3_INTERNAL_ERROR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MigrationErrorType(rawValue: rawValue) ?? MigrationErrorType.sdkUnknown(rawValue)
    }
}
