// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateRegexMatchSetInputBody: Equatable {
    public let regexMatchSetId: String?
    public let updates: [RegexMatchSetUpdate]?
    public let changeToken: String?
}

extension UpdateRegexMatchSetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case changeToken = "ChangeToken"
        case regexMatchSetId = "RegexMatchSetId"
        case updates = "Updates"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexMatchSetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regexMatchSetId)
        regexMatchSetId = regexMatchSetIdDecoded
        let updatesContainer = try containerValues.decodeIfPresent([RegexMatchSetUpdate].self, forKey: .updates)
        var updatesDecoded0:[RegexMatchSetUpdate]? = nil
        if let updatesContainer = updatesContainer {
            updatesDecoded0 = [RegexMatchSetUpdate]()
            for structure0 in updatesContainer {
                updatesDecoded0?.append(structure0)
            }
        }
        updates = updatesDecoded0
        let changeTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}
