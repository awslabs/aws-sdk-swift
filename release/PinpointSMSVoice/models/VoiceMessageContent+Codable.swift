// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VoiceMessageContent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case callInstructionsMessage = "CallInstructionsMessage"
        case plainTextMessage = "PlainTextMessage"
        case sSMLMessage = "SSMLMessage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let callInstructionsMessage = callInstructionsMessage {
            try encodeContainer.encode(callInstructionsMessage, forKey: .callInstructionsMessage)
        }
        if let plainTextMessage = plainTextMessage {
            try encodeContainer.encode(plainTextMessage, forKey: .plainTextMessage)
        }
        if let sSMLMessage = sSMLMessage {
            try encodeContainer.encode(sSMLMessage, forKey: .sSMLMessage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let callInstructionsMessageDecoded = try containerValues.decodeIfPresent(CallInstructionsMessageType.self, forKey: .callInstructionsMessage)
        callInstructionsMessage = callInstructionsMessageDecoded
        let plainTextMessageDecoded = try containerValues.decodeIfPresent(PlainTextMessageType.self, forKey: .plainTextMessage)
        plainTextMessage = plainTextMessageDecoded
        let sSMLMessageDecoded = try containerValues.decodeIfPresent(SSMLMessageType.self, forKey: .sSMLMessage)
        sSMLMessage = sSMLMessageDecoded
    }
}
