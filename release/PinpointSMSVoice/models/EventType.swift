// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// The types of events that are sent to the event destination.
public enum EventType {
    case answered
    case busy
    case completedCall
    case failed
    case initiatedCall
    case noAnswer
    case ringing
    case sdkUnknown(String)
}

extension EventType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EventType] {
        return [
            .answered,
            .busy,
            .completedCall,
            .failed,
            .initiatedCall,
            .noAnswer,
            .ringing,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .answered: return "ANSWERED"
        case .busy: return "BUSY"
        case .completedCall: return "COMPLETED_CALL"
        case .failed: return "FAILED"
        case .initiatedCall: return "INITIATED_CALL"
        case .noAnswer: return "NO_ANSWER"
        case .ringing: return "RINGING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
    }
}
