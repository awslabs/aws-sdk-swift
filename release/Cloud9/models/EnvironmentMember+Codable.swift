// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EnvironmentMember: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case environmentId
        case lastAccess
        case permissions
        case userArn
        case userId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let environmentId = environmentId {
            try encodeContainer.encode(environmentId, forKey: .environmentId)
        }
        if let lastAccess = lastAccess {
            try encodeContainer.encode(lastAccess.timeIntervalSince1970, forKey: .lastAccess)
        }
        if let permissions = permissions {
            try encodeContainer.encode(permissions.rawValue, forKey: .permissions)
        }
        if let userArn = userArn {
            try encodeContainer.encode(userArn, forKey: .userArn)
        }
        if let userId = userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let permissionsDecoded = try containerValues.decodeIfPresent(Permissions.self, forKey: .permissions)
        permissions = permissionsDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userId)
        userId = userIdDecoded
        let userArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userArn)
        userArn = userArnDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let lastAccessDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastAccess)
        lastAccess = lastAccessDecoded
    }
}
