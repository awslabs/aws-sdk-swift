// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateEnvironmentEC2InputBody: Equatable {
    public let name: String?
    public let description: String?
    public let clientRequestToken: String?
    public let instanceType: String?
    public let subnetId: String?
    public let imageId: String?
    public let automaticStopTimeMinutes: Int?
    public let ownerArn: String?
    public let tags: [Tag]?
    public let connectionType: ConnectionType?
}

extension CreateEnvironmentEC2InputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case automaticStopTimeMinutes
        case clientRequestToken
        case connectionType
        case description
        case imageId
        case instanceType
        case name
        case ownerArn
        case subnetId
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let automaticStopTimeMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .automaticStopTimeMinutes)
        automaticStopTimeMinutes = automaticStopTimeMinutesDecoded
        let ownerArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerArn)
        ownerArn = ownerArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let connectionTypeDecoded = try containerValues.decodeIfPresent(ConnectionType.self, forKey: .connectionType)
        connectionType = connectionTypeDecoded
    }
}
