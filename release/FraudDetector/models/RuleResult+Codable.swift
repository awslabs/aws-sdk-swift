// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RuleResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case outcomes
        case ruleId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outcomes = outcomes {
            var outcomesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outcomes)
            for listofstrings0 in outcomes {
                try outcomesContainer.encode(listofstrings0)
            }
        }
        if let ruleId = ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let outcomesContainer = try containerValues.decodeIfPresent([String].self, forKey: .outcomes)
        var outcomesDecoded0:[String]? = nil
        if let outcomesContainer = outcomesContainer {
            outcomesDecoded0 = [String]()
            for string0 in outcomesContainer {
                outcomesDecoded0?.append(string0)
            }
        }
        outcomes = outcomesDecoded0
    }
}
