// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModelEndpointDataBlob: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case byteBuffer
        case contentType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let byteBuffer = byteBuffer {
            try encodeContainer.encode(byteBuffer.base64EncodedString(), forKey: .byteBuffer)
        }
        if let contentType = contentType {
            try encodeContainer.encode(contentType, forKey: .contentType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let byteBufferDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .byteBuffer)
        byteBuffer = byteBufferDecoded
        let contentTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .contentType)
        contentType = contentTypeDecoded
    }
}
