// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModelInputConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case csvInputTemplate
        case eventTypeName
        case format
        case jsonInputTemplate
        case useEventVariables
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let csvInputTemplate = csvInputTemplate {
            try encodeContainer.encode(csvInputTemplate, forKey: .csvInputTemplate)
        }
        if let eventTypeName = eventTypeName {
            try encodeContainer.encode(eventTypeName, forKey: .eventTypeName)
        }
        if let format = format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let jsonInputTemplate = jsonInputTemplate {
            try encodeContainer.encode(jsonInputTemplate, forKey: .jsonInputTemplate)
        }
        if let useEventVariables = useEventVariables {
            try encodeContainer.encode(useEventVariables, forKey: .useEventVariables)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventTypeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventTypeName)
        eventTypeName = eventTypeNameDecoded
        let formatDecoded = try containerValues.decodeIfPresent(ModelInputDataFormat.self, forKey: .format)
        format = formatDecoded
        let useEventVariablesDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .useEventVariables)
        useEventVariables = useEventVariablesDecoded
        let jsonInputTemplateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jsonInputTemplate)
        jsonInputTemplate = jsonInputTemplateDecoded
        let csvInputTemplateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .csvInputTemplate)
        csvInputTemplate = csvInputTemplateDecoded
    }
}
