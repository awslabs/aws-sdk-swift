// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateBatchPredictionJobInputBody: Equatable {
    public let jobId: String?
    public let inputPath: String?
    public let outputPath: String?
    public let eventTypeName: String?
    public let detectorName: String?
    public let detectorVersion: String?
    public let iamRoleArn: String?
    public let tags: [Tag]?
}

extension CreateBatchPredictionJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case detectorName
        case detectorVersion
        case eventTypeName
        case iamRoleArn
        case inputPath
        case jobId
        case outputPath
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let inputPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputPath)
        inputPath = inputPathDecoded
        let outputPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputPath)
        outputPath = outputPathDecoded
        let eventTypeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventTypeName)
        eventTypeName = eventTypeNameDecoded
        let detectorNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .detectorName)
        detectorName = detectorNameDecoded
        let detectorVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .detectorVersion)
        detectorVersion = detectorVersionDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
