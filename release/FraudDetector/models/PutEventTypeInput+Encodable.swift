// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutEventTypeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description
        case entityTypes
        case eventVariables
        case labels
        case name
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let entityTypes = entityTypes {
            var entityTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityTypes)
            for nonemptylistofstrings0 in entityTypes {
                try entityTypesContainer.encode(nonemptylistofstrings0)
            }
        }
        if let eventVariables = eventVariables {
            var eventVariablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventVariables)
            for nonemptylistofstrings0 in eventVariables {
                try eventVariablesContainer.encode(nonemptylistofstrings0)
            }
        }
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labels)
            for listofstrings0 in labels {
                try labelsContainer.encode(listofstrings0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
