// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TrainingDataSchema: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case labelSchema
        case modelVariables
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelSchema = labelSchema {
            try encodeContainer.encode(labelSchema, forKey: .labelSchema)
        }
        if let modelVariables = modelVariables {
            var modelVariablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .modelVariables)
            for listofstrings0 in modelVariables {
                try modelVariablesContainer.encode(listofstrings0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelVariablesContainer = try containerValues.decodeIfPresent([String].self, forKey: .modelVariables)
        var modelVariablesDecoded0:[String]? = nil
        if let modelVariablesContainer = modelVariablesContainer {
            modelVariablesDecoded0 = [String]()
            for string0 in modelVariablesContainer {
                modelVariablesDecoded0?.append(string0)
            }
        }
        modelVariables = modelVariablesDecoded0
        let labelSchemaDecoded = try containerValues.decodeIfPresent(LabelSchema.self, forKey: .labelSchema)
        labelSchema = labelSchemaDecoded
    }
}
