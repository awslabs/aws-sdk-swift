// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EventType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case createdTime
        case description
        case entityTypes
        case eventVariables
        case labels
        case lastUpdatedTime
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime, forKey: .createdTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let entityTypes = entityTypes {
            var entityTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityTypes)
            for nonemptylistofstrings0 in entityTypes {
                try entityTypesContainer.encode(nonemptylistofstrings0)
            }
        }
        if let eventVariables = eventVariables {
            var eventVariablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventVariables)
            for listofstrings0 in eventVariables {
                try eventVariablesContainer.encode(listofstrings0)
            }
        }
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labels)
            for listofstrings0 in labels {
                try labelsContainer.encode(listofstrings0)
            }
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime, forKey: .lastUpdatedTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let eventVariablesContainer = try containerValues.decodeIfPresent([String].self, forKey: .eventVariables)
        var eventVariablesDecoded0:[String]? = nil
        if let eventVariablesContainer = eventVariablesContainer {
            eventVariablesDecoded0 = [String]()
            for string0 in eventVariablesContainer {
                eventVariablesDecoded0?.append(string0)
            }
        }
        eventVariables = eventVariablesDecoded0
        let labelsContainer = try containerValues.decodeIfPresent([String].self, forKey: .labels)
        var labelsDecoded0:[String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [String]()
            for string0 in labelsContainer {
                labelsDecoded0?.append(string0)
            }
        }
        labels = labelsDecoded0
        let entityTypesContainer = try containerValues.decodeIfPresent([String].self, forKey: .entityTypes)
        var entityTypesDecoded0:[String]? = nil
        if let entityTypesContainer = entityTypesContainer {
            entityTypesDecoded0 = [String]()
            for string0 in entityTypesContainer {
                entityTypesDecoded0?.append(string0)
            }
        }
        entityTypes = entityTypesDecoded0
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}
