// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDetectorVersionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description
        case detectorId
        case externalModelEndpoints
        case modelVersions
        case ruleExecutionMode
        case rules
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let detectorId = detectorId {
            try encodeContainer.encode(detectorId, forKey: .detectorId)
        }
        if let externalModelEndpoints = externalModelEndpoints {
            var externalModelEndpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .externalModelEndpoints)
            for listofstrings0 in externalModelEndpoints {
                try externalModelEndpointsContainer.encode(listofstrings0)
            }
        }
        if let modelVersions = modelVersions {
            var modelVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .modelVersions)
            for listofmodelversions0 in modelVersions {
                try modelVersionsContainer.encode(listofmodelversions0)
            }
        }
        if let ruleExecutionMode = ruleExecutionMode {
            try encodeContainer.encode(ruleExecutionMode.rawValue, forKey: .ruleExecutionMode)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rulelist0 in rules {
                try rulesContainer.encode(rulelist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
