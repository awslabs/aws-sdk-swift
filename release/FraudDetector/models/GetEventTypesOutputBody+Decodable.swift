// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEventTypesOutputBody: Equatable {
    public let eventTypes: [EventType]?
    public let nextToken: String?
}

extension GetEventTypesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case eventTypes
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventTypesContainer = try containerValues.decodeIfPresent([EventType].self, forKey: .eventTypes)
        var eventTypesDecoded0:[EventType]? = nil
        if let eventTypesContainer = eventTypesContainer {
            eventTypesDecoded0 = [EventType]()
            for structure0 in eventTypesContainer {
                eventTypesDecoded0?.append(structure0)
            }
        }
        eventTypes = eventTypesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
