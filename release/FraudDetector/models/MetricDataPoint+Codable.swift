// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MetricDataPoint: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fpr
        case precision
        case threshold
        case tpr
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fpr = fpr {
            try encodeContainer.encode(fpr, forKey: .fpr)
        }
        if let precision = precision {
            try encodeContainer.encode(precision, forKey: .precision)
        }
        if let threshold = threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let tpr = tpr {
            try encodeContainer.encode(tpr, forKey: .tpr)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fprDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .fpr)
        fpr = fprDecoded
        let precisionDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .precision)
        precision = precisionDecoded
        let tprDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .tpr)
        tpr = tprDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .threshold)
        threshold = thresholdDecoded
    }
}
