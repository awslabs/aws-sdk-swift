// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LabelSchema: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case labelMapper
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelMapper = labelMapper {
            var labelMapperContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .labelMapper)
            for (dictKey0, labelmapper0) in labelMapper {
                try labelMapperContainer.encode(labelmapper0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelMapperContainer = try containerValues.decodeIfPresent([String:[String]?].self, forKey: .labelMapper)
        var labelMapperDecoded0: [String:[String]?]? = nil
        if let labelMapperContainer = labelMapperContainer {
            labelMapperDecoded0 = [String:[String]?]()
            for (key0, listofstrings0) in labelMapperContainer {
                var listofstrings0Decoded0 = [String]()
                if let listofstrings0 = listofstrings0 {
                    for string1 in listofstrings0 {
                        listofstrings0Decoded0.append(string1)
                    }
                }
                labelMapperDecoded0?[key0] = listofstrings0Decoded0
            }
        }
        labelMapper = labelMapperDecoded0
    }
}
