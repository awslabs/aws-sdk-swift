// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateModelVersionInputBody: Equatable {
    public let modelId: String?
    public let modelType: ModelTypeEnum?
    public let majorVersionNumber: String?
    public let externalEventsDetail: ExternalEventsDetail?
    public let tags: [Tag]?
}

extension UpdateModelVersionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case externalEventsDetail
        case majorVersionNumber
        case modelId
        case modelType
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelId)
        modelId = modelIdDecoded
        let modelTypeDecoded = try containerValues.decodeIfPresent(ModelTypeEnum.self, forKey: .modelType)
        modelType = modelTypeDecoded
        let majorVersionNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .majorVersionNumber)
        majorVersionNumber = majorVersionNumberDecoded
        let externalEventsDetailDecoded = try containerValues.decodeIfPresent(ExternalEventsDetail.self, forKey: .externalEventsDetail)
        externalEventsDetail = externalEventsDetailDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
