// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutEventTypeInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let eventVariables: [String]?
    public let labels: [String]?
    public let entityTypes: [String]?
    public let tags: [Tag]?
}

extension PutEventTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description
        case entityTypes
        case eventVariables
        case labels
        case name
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let eventVariablesContainer = try containerValues.decodeIfPresent([String].self, forKey: .eventVariables)
        var eventVariablesDecoded0:[String]? = nil
        if let eventVariablesContainer = eventVariablesContainer {
            eventVariablesDecoded0 = [String]()
            for string0 in eventVariablesContainer {
                eventVariablesDecoded0?.append(string0)
            }
        }
        eventVariables = eventVariablesDecoded0
        let labelsContainer = try containerValues.decodeIfPresent([String].self, forKey: .labels)
        var labelsDecoded0:[String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [String]()
            for string0 in labelsContainer {
                labelsDecoded0?.append(string0)
            }
        }
        labels = labelsDecoded0
        let entityTypesContainer = try containerValues.decodeIfPresent([String].self, forKey: .entityTypes)
        var entityTypesDecoded0:[String]? = nil
        if let entityTypesContainer = entityTypesContainer {
            entityTypesDecoded0 = [String]()
            for string0 in entityTypesContainer {
                entityTypesDecoded0?.append(string0)
            }
        }
        entityTypes = entityTypesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
