// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum AsyncJobStatus {
    case canceled
    case cancelInProgress
    case complete
    case failed
    case inProgress
    case inProgressInitializing
    case sdkUnknown(String)
}

extension AsyncJobStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AsyncJobStatus] {
        return [
            .canceled,
            .cancelInProgress,
            .complete,
            .failed,
            .inProgress,
            .inProgressInitializing,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .canceled: return "CANCELED"
        case .cancelInProgress: return "CANCEL_IN_PROGRESS"
        case .complete: return "COMPLETE"
        case .failed: return "FAILED"
        case .inProgress: return "IN_PROGRESS"
        case .inProgressInitializing: return "IN_PROGRESS_INITIALIZING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AsyncJobStatus(rawValue: rawValue) ?? AsyncJobStatus.sdkUnknown(rawValue)
    }
}
