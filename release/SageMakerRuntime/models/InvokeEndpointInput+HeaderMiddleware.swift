// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct InvokeEndpointInputHeadersMiddleware: Middleware {
    public let id: String = "InvokeEndpointInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<InvokeEndpointInput>,
                  next: H) -> Swift.Result<OperationOutput<InvokeEndpointOutput>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let accept = input.operationInput.accept {
            input.builder.withHeader(name: "Accept", value: String(accept))
        }
        if let contentType = input.operationInput.contentType {
            input.builder.withHeader(name: "Content-Type", value: String(contentType))
        }
        if let customAttributes = input.operationInput.customAttributes {
            input.builder.withHeader(name: "X-Amzn-SageMaker-Custom-Attributes", value: String(customAttributes))
        }
        if let inferenceId = input.operationInput.inferenceId {
            input.builder.withHeader(name: "X-Amzn-SageMaker-Inference-Id", value: String(inferenceId))
        }
        if let targetContainerHostname = input.operationInput.targetContainerHostname {
            input.builder.withHeader(name: "X-Amzn-SageMaker-Target-Container-Hostname", value: String(targetContainerHostname))
        }
        if let targetModel = input.operationInput.targetModel {
            input.builder.withHeader(name: "X-Amzn-SageMaker-Target-Model", value: String(targetModel))
        }
        if let targetVariant = input.operationInput.targetVariant {
            input.builder.withHeader(name: "X-Amzn-SageMaker-Target-Variant", value: String(targetVariant))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<InvokeEndpointInput>
    public typealias MOutput = OperationOutput<InvokeEndpointOutput>
    public typealias Context = HttpContext
    public typealias MError = SdkError<InvokeEndpointOutputError>
}
