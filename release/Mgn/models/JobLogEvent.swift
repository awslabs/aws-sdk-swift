// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum JobLogEvent {
    case cleanupEnd
    case cleanupFail
    case cleanupStart
    case conversionEnd
    case conversionFail
    case conversionStart
    case jobCancel
    case jobEnd
    case jobStart
    case launchFailed
    case launchStart
    case serverSkipped
    case snapshotEnd
    case snapshotFail
    case snapshotStart
    case usingPreviousSnapshot
    case sdkUnknown(String)
}

extension JobLogEvent : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [JobLogEvent] {
        return [
            .cleanupEnd,
            .cleanupFail,
            .cleanupStart,
            .conversionEnd,
            .conversionFail,
            .conversionStart,
            .jobCancel,
            .jobEnd,
            .jobStart,
            .launchFailed,
            .launchStart,
            .serverSkipped,
            .snapshotEnd,
            .snapshotFail,
            .snapshotStart,
            .usingPreviousSnapshot,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cleanupEnd: return "CLEANUP_END"
        case .cleanupFail: return "CLEANUP_FAIL"
        case .cleanupStart: return "CLEANUP_START"
        case .conversionEnd: return "CONVERSION_END"
        case .conversionFail: return "CONVERSION_FAIL"
        case .conversionStart: return "CONVERSION_START"
        case .jobCancel: return "JOB_CANCEL"
        case .jobEnd: return "JOB_END"
        case .jobStart: return "JOB_START"
        case .launchFailed: return "LAUNCH_FAILED"
        case .launchStart: return "LAUNCH_START"
        case .serverSkipped: return "SERVER_SKIPPED"
        case .snapshotEnd: return "SNAPSHOT_END"
        case .snapshotFail: return "SNAPSHOT_FAIL"
        case .snapshotStart: return "SNAPSHOT_START"
        case .usingPreviousSnapshot: return "USING_PREVIOUS_SNAPSHOT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = JobLogEvent(rawValue: rawValue) ?? JobLogEvent.sdkUnknown(rawValue)
    }
}
