// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataReplicationError: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case error
        case rawError
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let error = error {
            try encodeContainer.encode(error.rawValue, forKey: .error)
        }
        if let rawError = rawError {
            try encodeContainer.encode(rawError, forKey: .rawError)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDecoded = try containerValues.decodeIfPresent(DataReplicationErrorString.self, forKey: .error)
        error = errorDecoded
        let rawErrorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rawError)
        rawError = rawErrorDecoded
    }
}
