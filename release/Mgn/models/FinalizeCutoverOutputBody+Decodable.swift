// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct FinalizeCutoverOutputBody: Equatable {
    public let sourceServerID: String?
    public let arn: String?
    public let isArchived: Bool?
    public let tags: [String:String]?
    public let launchedInstance: LaunchedInstance?
    public let dataReplicationInfo: DataReplicationInfo?
    public let lifeCycle: LifeCycle?
    public let sourceProperties: SourceProperties?
}

extension FinalizeCutoverOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn
        case dataReplicationInfo
        case isArchived
        case launchedInstance
        case lifeCycle
        case sourceProperties
        case sourceServerID
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceServerIDDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceServerID)
        sourceServerID = sourceServerIDDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let isArchivedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .isArchived)
        isArchived = isArchivedDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let launchedInstanceDecoded = try containerValues.decodeIfPresent(LaunchedInstance.self, forKey: .launchedInstance)
        launchedInstance = launchedInstanceDecoded
        let dataReplicationInfoDecoded = try containerValues.decodeIfPresent(DataReplicationInfo.self, forKey: .dataReplicationInfo)
        dataReplicationInfo = dataReplicationInfoDecoded
        let lifeCycleDecoded = try containerValues.decodeIfPresent(LifeCycle.self, forKey: .lifeCycle)
        lifeCycle = lifeCycleDecoded
        let sourcePropertiesDecoded = try containerValues.decodeIfPresent(SourceProperties.self, forKey: .sourceProperties)
        sourceProperties = sourcePropertiesDecoded
    }
}
