// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkInterface: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ips
        case isPrimary
        case macAddress
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ips = ips {
            var ipsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ips)
            for ipslist0 in ips {
                try ipsContainer.encode(ipslist0)
            }
        }
        if let isPrimary = isPrimary {
            try encodeContainer.encode(isPrimary, forKey: .isPrimary)
        }
        if let macAddress = macAddress {
            try encodeContainer.encode(macAddress, forKey: .macAddress)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let macAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .macAddress)
        macAddress = macAddressDecoded
        let ipsContainer = try containerValues.decodeIfPresent([String].self, forKey: .ips)
        var ipsDecoded0:[String]? = nil
        if let ipsContainer = ipsContainer {
            ipsDecoded0 = [String]()
            for string0 in ipsContainer {
                ipsDecoded0?.append(string0)
            }
        }
        ips = ipsDecoded0
        let isPrimaryDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .isPrimary)
        isPrimary = isPrimaryDecoded
    }
}
