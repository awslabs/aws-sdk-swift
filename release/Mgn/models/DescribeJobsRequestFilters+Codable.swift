// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DescribeJobsRequestFilters: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fromDate
        case jobIDs
        case toDate
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fromDate = fromDate {
            try encodeContainer.encode(fromDate, forKey: .fromDate)
        }
        if let jobIDs = jobIDs {
            var jobIDsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobIDs)
            for describejobsrequestfiltersjobids0 in jobIDs {
                try jobIDsContainer.encode(describejobsrequestfiltersjobids0)
            }
        }
        if let toDate = toDate {
            try encodeContainer.encode(toDate, forKey: .toDate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIDsContainer = try containerValues.decodeIfPresent([String].self, forKey: .jobIDs)
        var jobIDsDecoded0:[String]? = nil
        if let jobIDsContainer = jobIDsContainer {
            jobIDsDecoded0 = [String]()
            for string0 in jobIDsContainer {
                jobIDsDecoded0?.append(string0)
            }
        }
        jobIDs = jobIDsDecoded0
        let fromDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fromDate)
        fromDate = fromDateDecoded
        let toDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .toDate)
        toDate = toDateDecoded
    }
}
