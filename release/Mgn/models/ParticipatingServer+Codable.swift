// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ParticipatingServer: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case launchStatus
        case sourceServerID
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let launchStatus = launchStatus {
            try encodeContainer.encode(launchStatus.rawValue, forKey: .launchStatus)
        }
        if let sourceServerID = sourceServerID {
            try encodeContainer.encode(sourceServerID, forKey: .sourceServerID)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceServerIDDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceServerID)
        sourceServerID = sourceServerIDDecoded
        let launchStatusDecoded = try containerValues.decodeIfPresent(LaunchStatus.self, forKey: .launchStatus)
        launchStatus = launchStatusDecoded
    }
}
