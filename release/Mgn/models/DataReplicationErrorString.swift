// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum DataReplicationErrorString {
    case agentNotSeen
    case failedToAttachStagingDisks
    case failedToAuthenticateWithService
    case failedToBootReplicationServer
    case failedToConnectAgentToReplicationServer
    case failedToCreateSecurityGroup
    case failedToCreateStagingDisks
    case failedToDownloadReplicationSoftware
    case failedToLaunchReplicationServer
    case failedToPairReplicationServerWithAgent
    case failedToStartDataTransfer
    case notConverging
    case snapshotsFailure
    case unstableNetwork
    case sdkUnknown(String)
}

extension DataReplicationErrorString : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DataReplicationErrorString] {
        return [
            .agentNotSeen,
            .failedToAttachStagingDisks,
            .failedToAuthenticateWithService,
            .failedToBootReplicationServer,
            .failedToConnectAgentToReplicationServer,
            .failedToCreateSecurityGroup,
            .failedToCreateStagingDisks,
            .failedToDownloadReplicationSoftware,
            .failedToLaunchReplicationServer,
            .failedToPairReplicationServerWithAgent,
            .failedToStartDataTransfer,
            .notConverging,
            .snapshotsFailure,
            .unstableNetwork,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .agentNotSeen: return "AGENT_NOT_SEEN"
        case .failedToAttachStagingDisks: return "FAILED_TO_ATTACH_STAGING_DISKS"
        case .failedToAuthenticateWithService: return "FAILED_TO_AUTHENTICATE_WITH_SERVICE"
        case .failedToBootReplicationServer: return "FAILED_TO_BOOT_REPLICATION_SERVER"
        case .failedToConnectAgentToReplicationServer: return "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER"
        case .failedToCreateSecurityGroup: return "FAILED_TO_CREATE_SECURITY_GROUP"
        case .failedToCreateStagingDisks: return "FAILED_TO_CREATE_STAGING_DISKS"
        case .failedToDownloadReplicationSoftware: return "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE"
        case .failedToLaunchReplicationServer: return "FAILED_TO_LAUNCH_REPLICATION_SERVER"
        case .failedToPairReplicationServerWithAgent: return "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT"
        case .failedToStartDataTransfer: return "FAILED_TO_START_DATA_TRANSFER"
        case .notConverging: return "NOT_CONVERGING"
        case .snapshotsFailure: return "SNAPSHOTS_FAILURE"
        case .unstableNetwork: return "UNSTABLE_NETWORK"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DataReplicationErrorString(rawValue: rawValue) ?? DataReplicationErrorString.sdkUnknown(rawValue)
    }
}
