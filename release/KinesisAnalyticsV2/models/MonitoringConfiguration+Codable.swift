// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MonitoringConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configurationType = "ConfigurationType"
        case logLevel = "LogLevel"
        case metricsLevel = "MetricsLevel"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationType = configurationType {
            try encodeContainer.encode(configurationType.rawValue, forKey: .configurationType)
        }
        if let logLevel = logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let metricsLevel = metricsLevel {
            try encodeContainer.encode(metricsLevel.rawValue, forKey: .metricsLevel)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationTypeDecoded = try containerValues.decodeIfPresent(ConfigurationType.self, forKey: .configurationType)
        configurationType = configurationTypeDecoded
        let metricsLevelDecoded = try containerValues.decodeIfPresent(MetricsLevel.self, forKey: .metricsLevel)
        metricsLevel = metricsLevelDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
    }
}
