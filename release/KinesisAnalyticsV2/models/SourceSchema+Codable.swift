// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SourceSchema: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case recordColumns = "RecordColumns"
        case recordEncoding = "RecordEncoding"
        case recordFormat = "RecordFormat"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let recordColumns = recordColumns {
            var recordColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recordColumns)
            for recordcolumns0 in recordColumns {
                try recordColumnsContainer.encode(recordcolumns0)
            }
        }
        if let recordEncoding = recordEncoding {
            try encodeContainer.encode(recordEncoding, forKey: .recordEncoding)
        }
        if let recordFormat = recordFormat {
            try encodeContainer.encode(recordFormat, forKey: .recordFormat)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordFormatDecoded = try containerValues.decodeIfPresent(RecordFormat.self, forKey: .recordFormat)
        recordFormat = recordFormatDecoded
        let recordEncodingDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recordEncoding)
        recordEncoding = recordEncodingDecoded
        let recordColumnsContainer = try containerValues.decodeIfPresent([RecordColumn].self, forKey: .recordColumns)
        var recordColumnsDecoded0:[RecordColumn]? = nil
        if let recordColumnsContainer = recordColumnsContainer {
            recordColumnsDecoded0 = [RecordColumn]()
            for structure0 in recordColumnsContainer {
                recordColumnsDecoded0?.append(structure0)
            }
        }
        recordColumns = recordColumnsDecoded0
    }
}
