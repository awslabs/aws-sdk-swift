// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApplicationConfigurationUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationCodeConfigurationUpdate = "ApplicationCodeConfigurationUpdate"
        case applicationSnapshotConfigurationUpdate = "ApplicationSnapshotConfigurationUpdate"
        case environmentPropertyUpdates = "EnvironmentPropertyUpdates"
        case flinkApplicationConfigurationUpdate = "FlinkApplicationConfigurationUpdate"
        case sqlApplicationConfigurationUpdate = "SqlApplicationConfigurationUpdate"
        case vpcConfigurationUpdates = "VpcConfigurationUpdates"
        case zeppelinApplicationConfigurationUpdate = "ZeppelinApplicationConfigurationUpdate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationCodeConfigurationUpdate = applicationCodeConfigurationUpdate {
            try encodeContainer.encode(applicationCodeConfigurationUpdate, forKey: .applicationCodeConfigurationUpdate)
        }
        if let applicationSnapshotConfigurationUpdate = applicationSnapshotConfigurationUpdate {
            try encodeContainer.encode(applicationSnapshotConfigurationUpdate, forKey: .applicationSnapshotConfigurationUpdate)
        }
        if let environmentPropertyUpdates = environmentPropertyUpdates {
            try encodeContainer.encode(environmentPropertyUpdates, forKey: .environmentPropertyUpdates)
        }
        if let flinkApplicationConfigurationUpdate = flinkApplicationConfigurationUpdate {
            try encodeContainer.encode(flinkApplicationConfigurationUpdate, forKey: .flinkApplicationConfigurationUpdate)
        }
        if let sqlApplicationConfigurationUpdate = sqlApplicationConfigurationUpdate {
            try encodeContainer.encode(sqlApplicationConfigurationUpdate, forKey: .sqlApplicationConfigurationUpdate)
        }
        if let vpcConfigurationUpdates = vpcConfigurationUpdates {
            var vpcConfigurationUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcConfigurationUpdates)
            for vpcconfigurationupdates0 in vpcConfigurationUpdates {
                try vpcConfigurationUpdatesContainer.encode(vpcconfigurationupdates0)
            }
        }
        if let zeppelinApplicationConfigurationUpdate = zeppelinApplicationConfigurationUpdate {
            try encodeContainer.encode(zeppelinApplicationConfigurationUpdate, forKey: .zeppelinApplicationConfigurationUpdate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlApplicationConfigurationUpdateDecoded = try containerValues.decodeIfPresent(SqlApplicationConfigurationUpdate.self, forKey: .sqlApplicationConfigurationUpdate)
        sqlApplicationConfigurationUpdate = sqlApplicationConfigurationUpdateDecoded
        let applicationCodeConfigurationUpdateDecoded = try containerValues.decodeIfPresent(ApplicationCodeConfigurationUpdate.self, forKey: .applicationCodeConfigurationUpdate)
        applicationCodeConfigurationUpdate = applicationCodeConfigurationUpdateDecoded
        let flinkApplicationConfigurationUpdateDecoded = try containerValues.decodeIfPresent(FlinkApplicationConfigurationUpdate.self, forKey: .flinkApplicationConfigurationUpdate)
        flinkApplicationConfigurationUpdate = flinkApplicationConfigurationUpdateDecoded
        let environmentPropertyUpdatesDecoded = try containerValues.decodeIfPresent(EnvironmentPropertyUpdates.self, forKey: .environmentPropertyUpdates)
        environmentPropertyUpdates = environmentPropertyUpdatesDecoded
        let applicationSnapshotConfigurationUpdateDecoded = try containerValues.decodeIfPresent(ApplicationSnapshotConfigurationUpdate.self, forKey: .applicationSnapshotConfigurationUpdate)
        applicationSnapshotConfigurationUpdate = applicationSnapshotConfigurationUpdateDecoded
        let vpcConfigurationUpdatesContainer = try containerValues.decodeIfPresent([VpcConfigurationUpdate].self, forKey: .vpcConfigurationUpdates)
        var vpcConfigurationUpdatesDecoded0:[VpcConfigurationUpdate]? = nil
        if let vpcConfigurationUpdatesContainer = vpcConfigurationUpdatesContainer {
            vpcConfigurationUpdatesDecoded0 = [VpcConfigurationUpdate]()
            for structure0 in vpcConfigurationUpdatesContainer {
                vpcConfigurationUpdatesDecoded0?.append(structure0)
            }
        }
        vpcConfigurationUpdates = vpcConfigurationUpdatesDecoded0
        let zeppelinApplicationConfigurationUpdateDecoded = try containerValues.decodeIfPresent(ZeppelinApplicationConfigurationUpdate.self, forKey: .zeppelinApplicationConfigurationUpdate)
        zeppelinApplicationConfigurationUpdate = zeppelinApplicationConfigurationUpdateDecoded
    }
}
