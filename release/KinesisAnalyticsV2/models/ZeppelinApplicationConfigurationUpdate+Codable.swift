// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ZeppelinApplicationConfigurationUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case catalogConfigurationUpdate = "CatalogConfigurationUpdate"
        case customArtifactsConfigurationUpdate = "CustomArtifactsConfigurationUpdate"
        case deployAsApplicationConfigurationUpdate = "DeployAsApplicationConfigurationUpdate"
        case monitoringConfigurationUpdate = "MonitoringConfigurationUpdate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogConfigurationUpdate = catalogConfigurationUpdate {
            try encodeContainer.encode(catalogConfigurationUpdate, forKey: .catalogConfigurationUpdate)
        }
        if let customArtifactsConfigurationUpdate = customArtifactsConfigurationUpdate {
            var customArtifactsConfigurationUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customArtifactsConfigurationUpdate)
            for customartifactsconfigurationlist0 in customArtifactsConfigurationUpdate {
                try customArtifactsConfigurationUpdateContainer.encode(customartifactsconfigurationlist0)
            }
        }
        if let deployAsApplicationConfigurationUpdate = deployAsApplicationConfigurationUpdate {
            try encodeContainer.encode(deployAsApplicationConfigurationUpdate, forKey: .deployAsApplicationConfigurationUpdate)
        }
        if let monitoringConfigurationUpdate = monitoringConfigurationUpdate {
            try encodeContainer.encode(monitoringConfigurationUpdate, forKey: .monitoringConfigurationUpdate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringConfigurationUpdateDecoded = try containerValues.decodeIfPresent(ZeppelinMonitoringConfigurationUpdate.self, forKey: .monitoringConfigurationUpdate)
        monitoringConfigurationUpdate = monitoringConfigurationUpdateDecoded
        let catalogConfigurationUpdateDecoded = try containerValues.decodeIfPresent(CatalogConfigurationUpdate.self, forKey: .catalogConfigurationUpdate)
        catalogConfigurationUpdate = catalogConfigurationUpdateDecoded
        let deployAsApplicationConfigurationUpdateDecoded = try containerValues.decodeIfPresent(DeployAsApplicationConfigurationUpdate.self, forKey: .deployAsApplicationConfigurationUpdate)
        deployAsApplicationConfigurationUpdate = deployAsApplicationConfigurationUpdateDecoded
        let customArtifactsConfigurationUpdateContainer = try containerValues.decodeIfPresent([CustomArtifactConfiguration].self, forKey: .customArtifactsConfigurationUpdate)
        var customArtifactsConfigurationUpdateDecoded0:[CustomArtifactConfiguration]? = nil
        if let customArtifactsConfigurationUpdateContainer = customArtifactsConfigurationUpdateContainer {
            customArtifactsConfigurationUpdateDecoded0 = [CustomArtifactConfiguration]()
            for structure0 in customArtifactsConfigurationUpdateContainer {
                customArtifactsConfigurationUpdateDecoded0?.append(structure0)
            }
        }
        customArtifactsConfigurationUpdate = customArtifactsConfigurationUpdateDecoded0
    }
}
