// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateApplicationInputBody: Equatable {
    public let applicationName: String?
    public let applicationDescription: String?
    public let runtimeEnvironment: RuntimeEnvironment?
    public let serviceExecutionRole: String?
    public let applicationConfiguration: ApplicationConfiguration?
    public let cloudWatchLoggingOptions: [CloudWatchLoggingOption]?
    public let tags: [Tag]?
    public let applicationMode: ApplicationMode?
}

extension CreateApplicationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationConfiguration = "ApplicationConfiguration"
        case applicationDescription = "ApplicationDescription"
        case applicationMode = "ApplicationMode"
        case applicationName = "ApplicationName"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case runtimeEnvironment = "RuntimeEnvironment"
        case serviceExecutionRole = "ServiceExecutionRole"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let applicationDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationDescription)
        applicationDescription = applicationDescriptionDecoded
        let runtimeEnvironmentDecoded = try containerValues.decodeIfPresent(RuntimeEnvironment.self, forKey: .runtimeEnvironment)
        runtimeEnvironment = runtimeEnvironmentDecoded
        let serviceExecutionRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceExecutionRole)
        serviceExecutionRole = serviceExecutionRoleDecoded
        let applicationConfigurationDecoded = try containerValues.decodeIfPresent(ApplicationConfiguration.self, forKey: .applicationConfiguration)
        applicationConfiguration = applicationConfigurationDecoded
        let cloudWatchLoggingOptionsContainer = try containerValues.decodeIfPresent([CloudWatchLoggingOption].self, forKey: .cloudWatchLoggingOptions)
        var cloudWatchLoggingOptionsDecoded0:[CloudWatchLoggingOption]? = nil
        if let cloudWatchLoggingOptionsContainer = cloudWatchLoggingOptionsContainer {
            cloudWatchLoggingOptionsDecoded0 = [CloudWatchLoggingOption]()
            for structure0 in cloudWatchLoggingOptionsContainer {
                cloudWatchLoggingOptionsDecoded0?.append(structure0)
            }
        }
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let applicationModeDecoded = try containerValues.decodeIfPresent(ApplicationMode.self, forKey: .applicationMode)
        applicationMode = applicationModeDecoded
    }
}
