// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApplicationDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationARN = "ApplicationARN"
        case applicationConfigurationDescription = "ApplicationConfigurationDescription"
        case applicationDescription = "ApplicationDescription"
        case applicationMaintenanceConfigurationDescription = "ApplicationMaintenanceConfigurationDescription"
        case applicationMode = "ApplicationMode"
        case applicationName = "ApplicationName"
        case applicationStatus = "ApplicationStatus"
        case applicationVersionId = "ApplicationVersionId"
        case applicationVersionRolledBackFrom = "ApplicationVersionRolledBackFrom"
        case applicationVersionRolledBackTo = "ApplicationVersionRolledBackTo"
        case applicationVersionUpdatedFrom = "ApplicationVersionUpdatedFrom"
        case cloudWatchLoggingOptionDescriptions = "CloudWatchLoggingOptionDescriptions"
        case conditionalToken = "ConditionalToken"
        case createTimestamp = "CreateTimestamp"
        case lastUpdateTimestamp = "LastUpdateTimestamp"
        case runtimeEnvironment = "RuntimeEnvironment"
        case serviceExecutionRole = "ServiceExecutionRole"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationARN = applicationARN {
            try encodeContainer.encode(applicationARN, forKey: .applicationARN)
        }
        if let applicationConfigurationDescription = applicationConfigurationDescription {
            try encodeContainer.encode(applicationConfigurationDescription, forKey: .applicationConfigurationDescription)
        }
        if let applicationDescription = applicationDescription {
            try encodeContainer.encode(applicationDescription, forKey: .applicationDescription)
        }
        if let applicationMaintenanceConfigurationDescription = applicationMaintenanceConfigurationDescription {
            try encodeContainer.encode(applicationMaintenanceConfigurationDescription, forKey: .applicationMaintenanceConfigurationDescription)
        }
        if let applicationMode = applicationMode {
            try encodeContainer.encode(applicationMode.rawValue, forKey: .applicationMode)
        }
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let applicationStatus = applicationStatus {
            try encodeContainer.encode(applicationStatus.rawValue, forKey: .applicationStatus)
        }
        if let applicationVersionId = applicationVersionId {
            try encodeContainer.encode(applicationVersionId, forKey: .applicationVersionId)
        }
        if let applicationVersionRolledBackFrom = applicationVersionRolledBackFrom {
            try encodeContainer.encode(applicationVersionRolledBackFrom, forKey: .applicationVersionRolledBackFrom)
        }
        if let applicationVersionRolledBackTo = applicationVersionRolledBackTo {
            try encodeContainer.encode(applicationVersionRolledBackTo, forKey: .applicationVersionRolledBackTo)
        }
        if let applicationVersionUpdatedFrom = applicationVersionUpdatedFrom {
            try encodeContainer.encode(applicationVersionUpdatedFrom, forKey: .applicationVersionUpdatedFrom)
        }
        if let cloudWatchLoggingOptionDescriptions = cloudWatchLoggingOptionDescriptions {
            var cloudWatchLoggingOptionDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cloudWatchLoggingOptionDescriptions)
            for cloudwatchloggingoptiondescriptions0 in cloudWatchLoggingOptionDescriptions {
                try cloudWatchLoggingOptionDescriptionsContainer.encode(cloudwatchloggingoptiondescriptions0)
            }
        }
        if let conditionalToken = conditionalToken {
            try encodeContainer.encode(conditionalToken, forKey: .conditionalToken)
        }
        if let createTimestamp = createTimestamp {
            try encodeContainer.encode(createTimestamp.timeIntervalSince1970, forKey: .createTimestamp)
        }
        if let lastUpdateTimestamp = lastUpdateTimestamp {
            try encodeContainer.encode(lastUpdateTimestamp.timeIntervalSince1970, forKey: .lastUpdateTimestamp)
        }
        if let runtimeEnvironment = runtimeEnvironment {
            try encodeContainer.encode(runtimeEnvironment.rawValue, forKey: .runtimeEnvironment)
        }
        if let serviceExecutionRole = serviceExecutionRole {
            try encodeContainer.encode(serviceExecutionRole, forKey: .serviceExecutionRole)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationARN)
        applicationARN = applicationARNDecoded
        let applicationDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationDescription)
        applicationDescription = applicationDescriptionDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let runtimeEnvironmentDecoded = try containerValues.decodeIfPresent(RuntimeEnvironment.self, forKey: .runtimeEnvironment)
        runtimeEnvironment = runtimeEnvironmentDecoded
        let serviceExecutionRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceExecutionRole)
        serviceExecutionRole = serviceExecutionRoleDecoded
        let applicationStatusDecoded = try containerValues.decodeIfPresent(ApplicationStatus.self, forKey: .applicationStatus)
        applicationStatus = applicationStatusDecoded
        let applicationVersionIdDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .applicationVersionId)
        applicationVersionId = applicationVersionIdDecoded
        let createTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createTimestamp)
        createTimestamp = createTimestampDecoded
        let lastUpdateTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateTimestamp)
        lastUpdateTimestamp = lastUpdateTimestampDecoded
        let applicationConfigurationDescriptionDecoded = try containerValues.decodeIfPresent(ApplicationConfigurationDescription.self, forKey: .applicationConfigurationDescription)
        applicationConfigurationDescription = applicationConfigurationDescriptionDecoded
        let cloudWatchLoggingOptionDescriptionsContainer = try containerValues.decodeIfPresent([CloudWatchLoggingOptionDescription].self, forKey: .cloudWatchLoggingOptionDescriptions)
        var cloudWatchLoggingOptionDescriptionsDecoded0:[CloudWatchLoggingOptionDescription]? = nil
        if let cloudWatchLoggingOptionDescriptionsContainer = cloudWatchLoggingOptionDescriptionsContainer {
            cloudWatchLoggingOptionDescriptionsDecoded0 = [CloudWatchLoggingOptionDescription]()
            for structure0 in cloudWatchLoggingOptionDescriptionsContainer {
                cloudWatchLoggingOptionDescriptionsDecoded0?.append(structure0)
            }
        }
        cloudWatchLoggingOptionDescriptions = cloudWatchLoggingOptionDescriptionsDecoded0
        let applicationMaintenanceConfigurationDescriptionDecoded = try containerValues.decodeIfPresent(ApplicationMaintenanceConfigurationDescription.self, forKey: .applicationMaintenanceConfigurationDescription)
        applicationMaintenanceConfigurationDescription = applicationMaintenanceConfigurationDescriptionDecoded
        let applicationVersionUpdatedFromDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .applicationVersionUpdatedFrom)
        applicationVersionUpdatedFrom = applicationVersionUpdatedFromDecoded
        let applicationVersionRolledBackFromDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .applicationVersionRolledBackFrom)
        applicationVersionRolledBackFrom = applicationVersionRolledBackFromDecoded
        let conditionalTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conditionalToken)
        conditionalToken = conditionalTokenDecoded
        let applicationVersionRolledBackToDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .applicationVersionRolledBackTo)
        applicationVersionRolledBackTo = applicationVersionRolledBackToDecoded
        let applicationModeDecoded = try containerValues.decodeIfPresent(ApplicationMode.self, forKey: .applicationMode)
        applicationMode = applicationModeDecoded
    }
}
