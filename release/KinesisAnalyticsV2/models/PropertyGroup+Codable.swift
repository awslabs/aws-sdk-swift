// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PropertyGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case propertyGroupId = "PropertyGroupId"
        case propertyMap = "PropertyMap"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let propertyGroupId = propertyGroupId {
            try encodeContainer.encode(propertyGroupId, forKey: .propertyGroupId)
        }
        if let propertyMap = propertyMap {
            var propertyMapContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .propertyMap)
            for (dictKey0, propertymap0) in propertyMap {
                try propertyMapContainer.encode(propertymap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertyGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .propertyGroupId)
        propertyGroupId = propertyGroupIdDecoded
        let propertyMapContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .propertyMap)
        var propertyMapDecoded0: [String:String]? = nil
        if let propertyMapContainer = propertyMapContainer {
            propertyMapDecoded0 = [String:String]()
            for (key0, propertyvalue0) in propertyMapContainer {
                propertyMapDecoded0?[key0] = propertyvalue0
            }
        }
        propertyMap = propertyMapDecoded0
    }
}
