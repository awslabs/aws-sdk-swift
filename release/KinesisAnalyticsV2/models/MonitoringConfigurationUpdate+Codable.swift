// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MonitoringConfigurationUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configurationTypeUpdate = "ConfigurationTypeUpdate"
        case logLevelUpdate = "LogLevelUpdate"
        case metricsLevelUpdate = "MetricsLevelUpdate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationTypeUpdate = configurationTypeUpdate {
            try encodeContainer.encode(configurationTypeUpdate.rawValue, forKey: .configurationTypeUpdate)
        }
        if let logLevelUpdate = logLevelUpdate {
            try encodeContainer.encode(logLevelUpdate.rawValue, forKey: .logLevelUpdate)
        }
        if let metricsLevelUpdate = metricsLevelUpdate {
            try encodeContainer.encode(metricsLevelUpdate.rawValue, forKey: .metricsLevelUpdate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationTypeUpdateDecoded = try containerValues.decodeIfPresent(ConfigurationType.self, forKey: .configurationTypeUpdate)
        configurationTypeUpdate = configurationTypeUpdateDecoded
        let metricsLevelUpdateDecoded = try containerValues.decodeIfPresent(MetricsLevel.self, forKey: .metricsLevelUpdate)
        metricsLevelUpdate = metricsLevelUpdateDecoded
        let logLevelUpdateDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .logLevelUpdate)
        logLevelUpdate = logLevelUpdateDecoded
    }
}
