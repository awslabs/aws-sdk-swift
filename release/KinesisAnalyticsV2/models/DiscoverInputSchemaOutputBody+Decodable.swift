// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DiscoverInputSchemaOutputBody: Equatable {
    public let inputSchema: SourceSchema?
    public let parsedInputRecords: [[String]?]?
    public let processedInputRecords: [String]?
    public let rawInputRecords: [String]?
}

extension DiscoverInputSchemaOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case inputSchema = "InputSchema"
        case parsedInputRecords = "ParsedInputRecords"
        case processedInputRecords = "ProcessedInputRecords"
        case rawInputRecords = "RawInputRecords"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputSchemaDecoded = try containerValues.decodeIfPresent(SourceSchema.self, forKey: .inputSchema)
        inputSchema = inputSchemaDecoded
        let parsedInputRecordsContainer = try containerValues.decodeIfPresent([[String]?].self, forKey: .parsedInputRecords)
        var parsedInputRecordsDecoded0:[[String]?]? = nil
        if let parsedInputRecordsContainer = parsedInputRecordsContainer {
            parsedInputRecordsDecoded0 = [[String]?]()
            for list0 in parsedInputRecordsContainer {
                var list0Decoded0 = [String]()
                if let list0 = list0 {
                    for string1 in list0 {
                        list0Decoded0.append(string1)
                    }
                }
                parsedInputRecordsDecoded0?.append(list0Decoded0)
            }
        }
        parsedInputRecords = parsedInputRecordsDecoded0
        let processedInputRecordsContainer = try containerValues.decodeIfPresent([String].self, forKey: .processedInputRecords)
        var processedInputRecordsDecoded0:[String]? = nil
        if let processedInputRecordsContainer = processedInputRecordsContainer {
            processedInputRecordsDecoded0 = [String]()
            for string0 in processedInputRecordsContainer {
                processedInputRecordsDecoded0?.append(string0)
            }
        }
        processedInputRecords = processedInputRecordsDecoded0
        let rawInputRecordsContainer = try containerValues.decodeIfPresent([String].self, forKey: .rawInputRecords)
        var rawInputRecordsDecoded0:[String]? = nil
        if let rawInputRecordsContainer = rawInputRecordsContainer {
            rawInputRecordsDecoded0 = [String]()
            for string0 in rawInputRecordsContainer {
                rawInputRecordsDecoded0?.append(string0)
            }
        }
        rawInputRecords = rawInputRecordsDecoded0
    }
}
