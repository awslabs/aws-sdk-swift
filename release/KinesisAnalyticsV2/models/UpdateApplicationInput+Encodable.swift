// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateApplicationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationConfigurationUpdate = "ApplicationConfigurationUpdate"
        case applicationName = "ApplicationName"
        case cloudWatchLoggingOptionUpdates = "CloudWatchLoggingOptionUpdates"
        case conditionalToken = "ConditionalToken"
        case currentApplicationVersionId = "CurrentApplicationVersionId"
        case runConfigurationUpdate = "RunConfigurationUpdate"
        case serviceExecutionRoleUpdate = "ServiceExecutionRoleUpdate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationConfigurationUpdate = applicationConfigurationUpdate {
            try encodeContainer.encode(applicationConfigurationUpdate, forKey: .applicationConfigurationUpdate)
        }
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let cloudWatchLoggingOptionUpdates = cloudWatchLoggingOptionUpdates {
            var cloudWatchLoggingOptionUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cloudWatchLoggingOptionUpdates)
            for cloudwatchloggingoptionupdates0 in cloudWatchLoggingOptionUpdates {
                try cloudWatchLoggingOptionUpdatesContainer.encode(cloudwatchloggingoptionupdates0)
            }
        }
        if let conditionalToken = conditionalToken {
            try encodeContainer.encode(conditionalToken, forKey: .conditionalToken)
        }
        if let currentApplicationVersionId = currentApplicationVersionId {
            try encodeContainer.encode(currentApplicationVersionId, forKey: .currentApplicationVersionId)
        }
        if let runConfigurationUpdate = runConfigurationUpdate {
            try encodeContainer.encode(runConfigurationUpdate, forKey: .runConfigurationUpdate)
        }
        if let serviceExecutionRoleUpdate = serviceExecutionRoleUpdate {
            try encodeContainer.encode(serviceExecutionRoleUpdate, forKey: .serviceExecutionRoleUpdate)
        }
    }
}
