// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateServerInputBody: Equatable {
    public let associatePublicIpAddress: Bool?
    public let customDomain: String?
    public let customCertificate: String?
    public let customPrivateKey: String?
    public let disableAutomatedBackup: Bool?
    public let engine: String?
    public let engineModel: String?
    public let engineVersion: String?
    public let engineAttributes: [EngineAttribute]?
    public let backupRetentionCount: Int?
    public let serverName: String?
    public let instanceProfileArn: String?
    public let instanceType: String?
    public let keyPair: String?
    public let preferredMaintenanceWindow: String?
    public let preferredBackupWindow: String?
    public let securityGroupIds: [String]?
    public let serviceRoleArn: String?
    public let subnetIds: [String]?
    public let tags: [Tag]?
    public let backupId: String?
}

extension CreateServerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case associatePublicIpAddress = "AssociatePublicIpAddress"
        case backupId = "BackupId"
        case backupRetentionCount = "BackupRetentionCount"
        case customCertificate = "CustomCertificate"
        case customDomain = "CustomDomain"
        case customPrivateKey = "CustomPrivateKey"
        case disableAutomatedBackup = "DisableAutomatedBackup"
        case engine = "Engine"
        case engineAttributes = "EngineAttributes"
        case engineModel = "EngineModel"
        case engineVersion = "EngineVersion"
        case instanceProfileArn = "InstanceProfileArn"
        case instanceType = "InstanceType"
        case keyPair = "KeyPair"
        case preferredBackupWindow = "PreferredBackupWindow"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case securityGroupIds = "SecurityGroupIds"
        case serverName = "ServerName"
        case serviceRoleArn = "ServiceRoleArn"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associatePublicIpAddressDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .associatePublicIpAddress)
        associatePublicIpAddress = associatePublicIpAddressDecoded
        let customDomainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customDomain)
        customDomain = customDomainDecoded
        let customCertificateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customCertificate)
        customCertificate = customCertificateDecoded
        let customPrivateKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customPrivateKey)
        customPrivateKey = customPrivateKeyDecoded
        let disableAutomatedBackupDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .disableAutomatedBackup)
        disableAutomatedBackup = disableAutomatedBackupDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let engineModelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineModel)
        engineModel = engineModelDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let engineAttributesContainer = try containerValues.decodeIfPresent([EngineAttribute].self, forKey: .engineAttributes)
        var engineAttributesDecoded0:[EngineAttribute]? = nil
        if let engineAttributesContainer = engineAttributesContainer {
            engineAttributesDecoded0 = [EngineAttribute]()
            for structure0 in engineAttributesContainer {
                engineAttributesDecoded0?.append(structure0)
            }
        }
        engineAttributes = engineAttributesDecoded0
        let backupRetentionCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .backupRetentionCount)
        backupRetentionCount = backupRetentionCountDecoded
        let serverNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverName)
        serverName = serverNameDecoded
        let instanceProfileArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceProfileArn)
        instanceProfileArn = instanceProfileArnDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let keyPairDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyPair)
        keyPair = keyPairDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [String]()
            for string0 in securityGroupIdsContainer {
                securityGroupIdsDecoded0?.append(string0)
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                subnetIdsDecoded0?.append(string0)
            }
        }
        subnetIds = subnetIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let backupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupId)
        backupId = backupIdDecoded
    }
}
