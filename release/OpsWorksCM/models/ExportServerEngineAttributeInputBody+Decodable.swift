// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ExportServerEngineAttributeInputBody: Equatable {
    public let exportAttributeName: String?
    public let serverName: String?
    public let inputAttributes: [EngineAttribute]?
}

extension ExportServerEngineAttributeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case exportAttributeName = "ExportAttributeName"
        case inputAttributes = "InputAttributes"
        case serverName = "ServerName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportAttributeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exportAttributeName)
        exportAttributeName = exportAttributeNameDecoded
        let serverNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverName)
        serverName = serverNameDecoded
        let inputAttributesContainer = try containerValues.decodeIfPresent([EngineAttribute].self, forKey: .inputAttributes)
        var inputAttributesDecoded0:[EngineAttribute]? = nil
        if let inputAttributesContainer = inputAttributesContainer {
            inputAttributesDecoded0 = [EngineAttribute]()
            for structure0 in inputAttributesContainer {
                inputAttributesDecoded0?.append(structure0)
            }
        }
        inputAttributes = inputAttributesDecoded0
    }
}
