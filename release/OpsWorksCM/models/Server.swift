// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes a configuration management server.
///     </p>
public struct Server: Equatable {
    /// <p>Associate a public IP address with a server that you are launching.
    ///     </p>
    public let associatePublicIpAddress: Bool?
    /// <p>The number of automated backups to keep.
    ///     </p>
    public let backupRetentionCount: Int?
    /// <p>The ARN of the CloudFormation stack that was used to create the server.
    ///     </p>
    public let cloudFormationStackArn: String?
    /// <p>Time stamp of server creation. Example <code>2016-07-29T13:38:47.520Z</code>
    ///          </p>
    public let createdAt: Date?
    /// <p>An optional public endpoint of a server, such as <code>https://aws.my-company.com</code>.
    ///       You cannot access the server by using the <code>Endpoint</code> value if the server has a <code>CustomDomain</code> specified.</p>
    public let customDomain: String?
    /// <p>Disables automated backups. The number of stored backups is dependent on the value of PreferredBackupCount.
    ///     </p>
    public let disableAutomatedBackup: Bool?
    /// <p>
    ///       A DNS name that can be used to access the engine. Example: <code>myserver-asdfghjkl.us-east-1.opsworks.io</code>.
    ///       You cannot access the server by using the <code>Endpoint</code> value if the server has a <code>CustomDomain</code> specified.
    ///     </p>
    public let endpoint: String?
    /// <p>The engine type of the server. Valid values in this release include <code>ChefAutomate</code> and <code>Puppet</code>.
    ///     </p>
    public let engine: String?
    /// <p>The response of a createServer() request returns the master
    ///     credential to access the server in EngineAttributes. These
    ///     credentials are not stored by AWS OpsWorks CM; they are returned only as part of the result of createServer().
    ///     </p>
    ///          <p class="title">
    ///             <b>Attributes returned in a createServer response for Chef</b>
    ///          </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CHEF_AUTOMATE_PIVOTAL_KEY</code>: A base64-encoded RSA private key that is
    ///       generated by AWS OpsWorks for Chef Automate. This private key is required to access
    ///       the Chef API.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CHEF_STARTER_KIT</code>: A base64-encoded ZIP file.
    ///       The ZIP file contains a Chef starter kit, which includes a README, a
    ///       configuration file, and the required RSA private key. Save this file, unzip it,
    ///       and then change to the directory where you've unzipped the file contents.
    ///       From this directory, you can run Knife commands.</p>
    ///             </li>
    ///          </ul>
    ///          <p class="title">
    ///             <b>Attributes returned in a createServer response for Puppet</b>
    ///          </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PUPPET_STARTER_KIT</code>: A base64-encoded ZIP file.
    ///         The ZIP file contains a Puppet starter kit, including a README and a
    ///         required private key. Save this file, unzip it,
    ///         and then change to the directory where you've unzipped the file contents.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PUPPET_ADMIN_PASSWORD</code>: An administrator password that you can use to sign in to the Puppet Enterprise console after the server is online.</p>
    ///             </li>
    ///          </ul>
    public let engineAttributes: [EngineAttribute]?
    /// <p>The engine model of the server. Valid values in this release include <code>Monolithic</code> for Puppet and <code>Single</code> for Chef.
    ///     </p>
    public let engineModel: String?
    /// <p>The engine version of the server. For a Chef server, the valid value for EngineVersion is
    ///       currently <code>2</code>. For a Puppet server, specify either <code>2019</code> or <code>2017</code>.
    ///     </p>
    public let engineVersion: String?
    /// <p>The instance profile ARN of the server.
    ///     </p>
    public let instanceProfileArn: String?
    /// <p>
    ///       The instance type for the server, as specified in the CloudFormation stack. This might not be the same instance type that is shown in the EC2 console.
    ///     </p>
    public let instanceType: String?
    /// <p>The key pair associated with the server.
    ///     </p>
    public let keyPair: String?
    /// <p>The status of the most recent server maintenance run. Shows <code>SUCCESS</code> or <code>FAILED</code>.
    ///     </p>
    public let maintenanceStatus: MaintenanceStatus?
    /// <p>The preferred backup period specified for the server.
    ///     </p>
    public let preferredBackupWindow: String?
    /// <p>The preferred maintenance period specified for the server.
    ///     </p>
    public let preferredMaintenanceWindow: String?
    /// <p>
    ///       The security group IDs for the server, as specified in the CloudFormation stack.
    ///       These might not be the same security groups that are shown in the EC2 console.
    ///     </p>
    public let securityGroupIds: [String]?
    /// <p>The ARN of the server.
    ///     </p>
    public let serverArn: String?
    /// <p>The name of the server.
    ///     </p>
    public let serverName: String?
    /// <p>The service role ARN used to create the server.
    ///     </p>
    public let serviceRoleArn: String?
    /// <p>
    ///       The server's status. This field displays the states of actions in progress, such as creating, running, or backing up the server,
    ///       as well as the server's health state.
    ///     </p>
    public let status: ServerStatus?
    /// <p>
    ///       Depending on the server status, this field has either a human-readable
    ///       message (such as a create or backup error), or an escaped block of JSON (used for health check results).
    ///     </p>
    public let statusReason: String?
    /// <p>
    ///       The subnet IDs specified in a CreateServer request.
    ///     </p>
    public let subnetIds: [String]?

    public init (
        associatePublicIpAddress: Bool? = nil,
        backupRetentionCount: Int? = nil,
        cloudFormationStackArn: String? = nil,
        createdAt: Date? = nil,
        customDomain: String? = nil,
        disableAutomatedBackup: Bool? = nil,
        endpoint: String? = nil,
        engine: String? = nil,
        engineAttributes: [EngineAttribute]? = nil,
        engineModel: String? = nil,
        engineVersion: String? = nil,
        instanceProfileArn: String? = nil,
        instanceType: String? = nil,
        keyPair: String? = nil,
        maintenanceStatus: MaintenanceStatus? = nil,
        preferredBackupWindow: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        securityGroupIds: [String]? = nil,
        serverArn: String? = nil,
        serverName: String? = nil,
        serviceRoleArn: String? = nil,
        status: ServerStatus? = nil,
        statusReason: String? = nil,
        subnetIds: [String]? = nil
    )
    {
        self.associatePublicIpAddress = associatePublicIpAddress
        self.backupRetentionCount = backupRetentionCount
        self.cloudFormationStackArn = cloudFormationStackArn
        self.createdAt = createdAt
        self.customDomain = customDomain
        self.disableAutomatedBackup = disableAutomatedBackup
        self.endpoint = endpoint
        self.engine = engine
        self.engineAttributes = engineAttributes
        self.engineModel = engineModel
        self.engineVersion = engineVersion
        self.instanceProfileArn = instanceProfileArn
        self.instanceType = instanceType
        self.keyPair = keyPair
        self.maintenanceStatus = maintenanceStatus
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.securityGroupIds = securityGroupIds
        self.serverArn = serverArn
        self.serverName = serverName
        self.serviceRoleArn = serviceRoleArn
        self.status = status
        self.statusReason = statusReason
        self.subnetIds = subnetIds
    }
}
