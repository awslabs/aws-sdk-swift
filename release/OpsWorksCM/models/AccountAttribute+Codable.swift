// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccountAttribute: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maximum = "Maximum"
        case name = "Name"
        case used = "Used"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maximum = maximum {
            try encodeContainer.encode(maximum, forKey: .maximum)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let used = used {
            try encodeContainer.encode(used, forKey: .used)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let maximumDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximum)
        maximum = maximumDecoded
        let usedDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .used)
        used = usedDecoded
    }
}
