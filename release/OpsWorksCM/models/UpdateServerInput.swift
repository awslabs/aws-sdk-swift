// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateServerInput: Equatable {
    /// <p>Sets the number of automated backups that you want to keep.
    ///       </p>
    public let backupRetentionCount: Int?
    /// <p>Setting DisableAutomatedBackup to <code>true</code> disables automated or scheduled backups. Automated backups are enabled by default.
    ///     </p>
    public let disableAutomatedBackup: Bool?
    /// <p>
    ///             <code>DDD:HH:MM</code> (weekly start time) or
    ///     <code>HH:MM</code> (daily start time).
    ///     </p>
    ///          <p>
    ///       Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>,
    ///       <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
    public let preferredBackupWindow: String?
    /// <p>
    ///             <code>DDD:HH:MM</code> (weekly start time) or
    ///     <code>HH:MM</code> (daily start time).
    ///     </p>
    ///          <p>
    ///       Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>,
    ///       <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
    public let preferredMaintenanceWindow: String?
    /// <p>The name of the server to update.
    ///     </p>
    public let serverName: String?

    public init (
        backupRetentionCount: Int? = nil,
        disableAutomatedBackup: Bool? = nil,
        preferredBackupWindow: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        serverName: String? = nil
    )
    {
        self.backupRetentionCount = backupRetentionCount
        self.disableAutomatedBackup = disableAutomatedBackup
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.serverName = serverName
    }
}
