// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutRecordInputBody: Equatable {
    public let streamName: String?
    public let data: Data?
    public let partitionKey: String?
    public let explicitHashKey: String?
    public let sequenceNumberForOrdering: String?
}

extension PutRecordInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case data = "Data"
        case explicitHashKey = "ExplicitHashKey"
        case partitionKey = "PartitionKey"
        case sequenceNumberForOrdering = "SequenceNumberForOrdering"
        case streamName = "StreamName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let dataDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .data)
        data = dataDecoded
        let partitionKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .partitionKey)
        partitionKey = partitionKeyDecoded
        let explicitHashKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .explicitHashKey)
        explicitHashKey = explicitHashKeyDecoded
        let sequenceNumberForOrderingDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sequenceNumberForOrdering)
        sequenceNumberForOrdering = sequenceNumberForOrderingDecoded
    }
}
