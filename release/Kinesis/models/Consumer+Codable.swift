// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Consumer: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case consumerARN = "ConsumerARN"
        case consumerCreationTimestamp = "ConsumerCreationTimestamp"
        case consumerName = "ConsumerName"
        case consumerStatus = "ConsumerStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consumerARN = consumerARN {
            try encodeContainer.encode(consumerARN, forKey: .consumerARN)
        }
        if let consumerCreationTimestamp = consumerCreationTimestamp {
            try encodeContainer.encode(consumerCreationTimestamp.timeIntervalSince1970, forKey: .consumerCreationTimestamp)
        }
        if let consumerName = consumerName {
            try encodeContainer.encode(consumerName, forKey: .consumerName)
        }
        if let consumerStatus = consumerStatus {
            try encodeContainer.encode(consumerStatus.rawValue, forKey: .consumerStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .consumerName)
        consumerName = consumerNameDecoded
        let consumerARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .consumerARN)
        consumerARN = consumerARNDecoded
        let consumerStatusDecoded = try containerValues.decodeIfPresent(ConsumerStatus.self, forKey: .consumerStatus)
        consumerStatus = consumerStatusDecoded
        let consumerCreationTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .consumerCreationTimestamp)
        consumerCreationTimestamp = consumerCreationTimestampDecoded
    }
}
