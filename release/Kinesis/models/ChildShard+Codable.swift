// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChildShard: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case hashKeyRange = "HashKeyRange"
        case parentShards = "ParentShards"
        case shardId = "ShardId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hashKeyRange = hashKeyRange {
            try encodeContainer.encode(hashKeyRange, forKey: .hashKeyRange)
        }
        if let parentShards = parentShards {
            var parentShardsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parentShards)
            for shardidlist0 in parentShards {
                try parentShardsContainer.encode(shardidlist0)
            }
        }
        if let shardId = shardId {
            try encodeContainer.encode(shardId, forKey: .shardId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shardIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .shardId)
        shardId = shardIdDecoded
        let parentShardsContainer = try containerValues.decodeIfPresent([String].self, forKey: .parentShards)
        var parentShardsDecoded0:[String]? = nil
        if let parentShardsContainer = parentShardsContainer {
            parentShardsDecoded0 = [String]()
            for string0 in parentShardsContainer {
                parentShardsDecoded0?.append(string0)
            }
        }
        parentShards = parentShardsDecoded0
        let hashKeyRangeDecoded = try containerValues.decodeIfPresent(HashKeyRange.self, forKey: .hashKeyRange)
        hashKeyRange = hashKeyRangeDecoded
    }
}
