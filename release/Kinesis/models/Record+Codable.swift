// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Record: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case approximateArrivalTimestamp = "ApproximateArrivalTimestamp"
        case data = "Data"
        case encryptionType = "EncryptionType"
        case partitionKey = "PartitionKey"
        case sequenceNumber = "SequenceNumber"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approximateArrivalTimestamp = approximateArrivalTimestamp {
            try encodeContainer.encode(approximateArrivalTimestamp.timeIntervalSince1970, forKey: .approximateArrivalTimestamp)
        }
        if let data = data {
            try encodeContainer.encode(data.base64EncodedString(), forKey: .data)
        }
        if let encryptionType = encryptionType {
            try encodeContainer.encode(encryptionType.rawValue, forKey: .encryptionType)
        }
        if let partitionKey = partitionKey {
            try encodeContainer.encode(partitionKey, forKey: .partitionKey)
        }
        if let sequenceNumber = sequenceNumber {
            try encodeContainer.encode(sequenceNumber, forKey: .sequenceNumber)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sequenceNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sequenceNumber)
        sequenceNumber = sequenceNumberDecoded
        let approximateArrivalTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .approximateArrivalTimestamp)
        approximateArrivalTimestamp = approximateArrivalTimestampDecoded
        let dataDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .data)
        data = dataDecoded
        let partitionKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .partitionKey)
        partitionKey = partitionKeyDecoded
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(EncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
    }
}
