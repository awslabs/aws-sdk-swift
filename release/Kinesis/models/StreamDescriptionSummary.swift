// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Represents the output for <a>DescribeStreamSummary</a>
///          </p>
public struct StreamDescriptionSummary: Equatable {
    /// <p>The number of enhanced fan-out consumers registered with the stream.</p>
    public let consumerCount: Int?
    /// <p>The encryption type used. This value is one of the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>KMS</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>NONE</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let encryptionType: EncryptionType?
    /// <p>Represents the current enhanced monitoring settings of the stream.</p>
    public let enhancedMonitoring: [EnhancedMetrics]?
    /// <p>The GUID for the customer-managed AWS KMS key to use for encryption. This value can
    ///             be a globally unique identifier, a fully specified ARN to either an alias or a key, or
    ///             an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data
    ///             Streams by specifying the alias <code>aws/kinesis</code>.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Key ARN example:
    ///                         <code>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>Alias ARN example: <code>
    ///                         arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>Globally unique key ID example:
    ///                         <code>12345678-1234-1234-1234-123456789012</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>Alias name example: <code>alias/MyAliasName</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>Master key owned by Kinesis Data Streams:
    ///                     <code>alias/aws/kinesis</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let keyId: String?
    /// <p>The number of open shards in the stream.</p>
    public let openShardCount: Int?
    /// <p>The current retention period, in hours.</p>
    public let retentionPeriodHours: Int?
    /// <p>The Amazon Resource Name (ARN) for the stream being described.</p>
    public let streamARN: String?
    /// <p>The approximate time that the stream was created.</p>
    public let streamCreationTimestamp: Date?
    /// <p>The name of the stream being described.</p>
    public let streamName: String?
    /// <p>The current status of the stream being described. The stream status is one of the
    ///             following states:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>CREATING</code> - The stream is being created. Kinesis Data Streams
    ///                     immediately returns and sets <code>StreamStatus</code> to
    ///                     <code>CREATING</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>DELETING</code> - The stream is being deleted. The specified stream is in
    ///                     the <code>DELETING</code> state until Kinesis Data Streams completes the
    ///                     deletion.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ACTIVE</code> - The stream exists and is ready for read and write
    ///                     operations or deletion. You should perform read and write operations only on an
    ///                         <code>ACTIVE</code> stream.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>UPDATING</code> - Shards in the stream are being merged or split. Read and
    ///                     write operations continue to work while the stream is in the
    ///                         <code>UPDATING</code> state.</p>
    ///             </li>
    ///          </ul>
    public let streamStatus: StreamStatus?

    public init (
        consumerCount: Int? = nil,
        encryptionType: EncryptionType? = nil,
        enhancedMonitoring: [EnhancedMetrics]? = nil,
        keyId: String? = nil,
        openShardCount: Int? = nil,
        retentionPeriodHours: Int? = nil,
        streamARN: String? = nil,
        streamCreationTimestamp: Date? = nil,
        streamName: String? = nil,
        streamStatus: StreamStatus? = nil
    )
    {
        self.consumerCount = consumerCount
        self.encryptionType = encryptionType
        self.enhancedMonitoring = enhancedMonitoring
        self.keyId = keyId
        self.openShardCount = openShardCount
        self.retentionPeriodHours = retentionPeriodHours
        self.streamARN = streamARN
        self.streamCreationTimestamp = streamCreationTimestamp
        self.streamName = streamName
        self.streamStatus = streamStatus
    }
}
