// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListShardsInputBody: Equatable {
    public let streamName: String?
    public let nextToken: String?
    public let exclusiveStartShardId: String?
    public let maxResults: Int?
    public let streamCreationTimestamp: Date?
    public let shardFilter: ShardFilter?
}

extension ListShardsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case exclusiveStartShardId = "ExclusiveStartShardId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case shardFilter = "ShardFilter"
        case streamCreationTimestamp = "StreamCreationTimestamp"
        case streamName = "StreamName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let exclusiveStartShardIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exclusiveStartShardId)
        exclusiveStartShardId = exclusiveStartShardIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let streamCreationTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .streamCreationTimestamp)
        streamCreationTimestamp = streamCreationTimestampDecoded
        let shardFilterDecoded = try containerValues.decodeIfPresent(ShardFilter.self, forKey: .shardFilter)
        shardFilter = shardFilterDecoded
    }
}
