// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct EnableEnhancedMonitoringOutputBody: Equatable {
    public let streamName: String?
    public let currentShardLevelMetrics: [MetricsName]?
    public let desiredShardLevelMetrics: [MetricsName]?
}

extension EnableEnhancedMonitoringOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case currentShardLevelMetrics = "CurrentShardLevelMetrics"
        case desiredShardLevelMetrics = "DesiredShardLevelMetrics"
        case streamName = "StreamName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let currentShardLevelMetricsContainer = try containerValues.decodeIfPresent([MetricsName].self, forKey: .currentShardLevelMetrics)
        var currentShardLevelMetricsDecoded0:[MetricsName]? = nil
        if let currentShardLevelMetricsContainer = currentShardLevelMetricsContainer {
            currentShardLevelMetricsDecoded0 = [MetricsName]()
            for string0 in currentShardLevelMetricsContainer {
                currentShardLevelMetricsDecoded0?.append(string0)
            }
        }
        currentShardLevelMetrics = currentShardLevelMetricsDecoded0
        let desiredShardLevelMetricsContainer = try containerValues.decodeIfPresent([MetricsName].self, forKey: .desiredShardLevelMetrics)
        var desiredShardLevelMetricsDecoded0:[MetricsName]? = nil
        if let desiredShardLevelMetricsContainer = desiredShardLevelMetricsContainer {
            desiredShardLevelMetricsDecoded0 = [MetricsName]()
            for string0 in desiredShardLevelMetricsContainer {
                desiredShardLevelMetricsDecoded0?.append(string0)
            }
        }
        desiredShardLevelMetrics = desiredShardLevelMetricsDecoded0
    }
}
