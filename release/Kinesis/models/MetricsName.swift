// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum MetricsName {
    case all
    case incomingBytes
    case incomingRecords
    case iteratorAgeMilliseconds
    case outgoingBytes
    case outgoingRecords
    case readProvisionedThroughputExceeded
    case writeProvisionedThroughputExceeded
    case sdkUnknown(String)
}

extension MetricsName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MetricsName] {
        return [
            .all,
            .incomingBytes,
            .incomingRecords,
            .iteratorAgeMilliseconds,
            .outgoingBytes,
            .outgoingRecords,
            .readProvisionedThroughputExceeded,
            .writeProvisionedThroughputExceeded,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .all: return "ALL"
        case .incomingBytes: return "IncomingBytes"
        case .incomingRecords: return "IncomingRecords"
        case .iteratorAgeMilliseconds: return "IteratorAgeMilliseconds"
        case .outgoingBytes: return "OutgoingBytes"
        case .outgoingRecords: return "OutgoingRecords"
        case .readProvisionedThroughputExceeded: return "ReadProvisionedThroughputExceeded"
        case .writeProvisionedThroughputExceeded: return "WriteProvisionedThroughputExceeded"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MetricsName(rawValue: rawValue) ?? MetricsName.sdkUnknown(rawValue)
    }
}
