// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ShardFilterType {
    case afterShardId
    case atLatest
    case atTimestamp
    case atTrimHorizon
    case fromTimestamp
    case fromTrimHorizon
    case sdkUnknown(String)
}

extension ShardFilterType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ShardFilterType] {
        return [
            .afterShardId,
            .atLatest,
            .atTimestamp,
            .atTrimHorizon,
            .fromTimestamp,
            .fromTrimHorizon,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .afterShardId: return "AFTER_SHARD_ID"
        case .atLatest: return "AT_LATEST"
        case .atTimestamp: return "AT_TIMESTAMP"
        case .atTrimHorizon: return "AT_TRIM_HORIZON"
        case .fromTimestamp: return "FROM_TIMESTAMP"
        case .fromTrimHorizon: return "FROM_TRIM_HORIZON"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ShardFilterType(rawValue: rawValue) ?? ShardFilterType.sdkUnknown(rawValue)
    }
}
