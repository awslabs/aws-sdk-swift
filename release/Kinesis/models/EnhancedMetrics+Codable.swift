// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EnhancedMetrics: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case shardLevelMetrics = "ShardLevelMetrics"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let shardLevelMetrics = shardLevelMetrics {
            var shardLevelMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .shardLevelMetrics)
            for metricsnamelist0 in shardLevelMetrics {
                try shardLevelMetricsContainer.encode(metricsnamelist0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shardLevelMetricsContainer = try containerValues.decodeIfPresent([MetricsName].self, forKey: .shardLevelMetrics)
        var shardLevelMetricsDecoded0:[MetricsName]? = nil
        if let shardLevelMetricsContainer = shardLevelMetricsContainer {
            shardLevelMetricsDecoded0 = [MetricsName]()
            for string0 in shardLevelMetricsContainer {
                shardLevelMetricsDecoded0?.append(string0)
            }
        }
        shardLevelMetrics = shardLevelMetricsDecoded0
    }
}
