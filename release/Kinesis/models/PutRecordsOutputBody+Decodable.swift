// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutRecordsOutputBody: Equatable {
    public let failedRecordCount: Int?
    public let records: [PutRecordsResultEntry]?
    public let encryptionType: EncryptionType?
}

extension PutRecordsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case encryptionType = "EncryptionType"
        case failedRecordCount = "FailedRecordCount"
        case records = "Records"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedRecordCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .failedRecordCount)
        failedRecordCount = failedRecordCountDecoded
        let recordsContainer = try containerValues.decodeIfPresent([PutRecordsResultEntry].self, forKey: .records)
        var recordsDecoded0:[PutRecordsResultEntry]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [PutRecordsResultEntry]()
            for structure0 in recordsContainer {
                recordsDecoded0?.append(structure0)
            }
        }
        records = recordsDecoded0
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(EncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
    }
}
