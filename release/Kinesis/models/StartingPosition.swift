// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p></p>
public struct StartingPosition: Equatable {
    /// <p>The sequence number of the data record in the shard from which to start streaming. To
    ///             specify a sequence number, set <code>StartingPosition</code> to
    ///                 <code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>.</p>
    public let sequenceNumber: String?
    /// <p>The time stamp of the data record from which to start reading. To specify a time
    ///             stamp, set <code>StartingPosition</code> to <code>Type AT_TIMESTAMP</code>. A time stamp
    ///             is the Unix epoch date with precision in milliseconds. For example,
    ///                 <code>2016-04-04T19:58:46.480-00:00</code> or <code>1459799926.480</code>. If a
    ///             record with this exact time stamp does not exist, records will be streamed from the next
    ///             (later) record. If the time stamp is older than the current trim horizon, records will
    ///             be streamed from the oldest untrimmed data record (<code>TRIM_HORIZON</code>).</p>
    public let timestamp: Date?
    /// <p>You can set the starting position to one of the following values:</p>
    ///         <p>
    ///             <code>AT_SEQUENCE_NUMBER</code>: Start streaming from the position denoted by the
    ///             sequence number specified in the <code>SequenceNumber</code> field.</p>
    ///         <p>
    ///             <code>AFTER_SEQUENCE_NUMBER</code>: Start streaming right after the position denoted
    ///             by the sequence number specified in the <code>SequenceNumber</code> field.</p>
    ///         <p>
    ///             <code>AT_TIMESTAMP</code>: Start streaming from the position denoted by the time stamp
    ///             specified in the <code>Timestamp</code> field.</p>
    ///         <p>
    ///             <code>TRIM_HORIZON</code>: Start streaming at the last untrimmed record in the shard,
    ///             which is the oldest data record in the shard.</p>
    ///         <p>
    ///             <code>LATEST</code>: Start streaming just after the most recent record in the shard,
    ///             so that you always read the most recent data in the shard.</p>
    public let type: ShardIteratorType?

    public init (
        sequenceNumber: String? = nil,
        timestamp: Date? = nil,
        type: ShardIteratorType? = nil
    )
    {
        self.sequenceNumber = sequenceNumber
        self.timestamp = timestamp
        self.type = type
    }
}
