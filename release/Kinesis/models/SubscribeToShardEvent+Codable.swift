// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SubscribeToShardEvent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childShards = "ChildShards"
        case continuationSequenceNumber = "ContinuationSequenceNumber"
        case millisBehindLatest = "MillisBehindLatest"
        case records = "Records"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childShards = childShards {
            var childShardsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .childShards)
            for childshardlist0 in childShards {
                try childShardsContainer.encode(childshardlist0)
            }
        }
        if let continuationSequenceNumber = continuationSequenceNumber {
            try encodeContainer.encode(continuationSequenceNumber, forKey: .continuationSequenceNumber)
        }
        if let millisBehindLatest = millisBehindLatest {
            try encodeContainer.encode(millisBehindLatest, forKey: .millisBehindLatest)
        }
        if let records = records {
            var recordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .records)
            for recordlist0 in records {
                try recordsContainer.encode(recordlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsContainer = try containerValues.decodeIfPresent([Record].self, forKey: .records)
        var recordsDecoded0:[Record]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [Record]()
            for structure0 in recordsContainer {
                recordsDecoded0?.append(structure0)
            }
        }
        records = recordsDecoded0
        let continuationSequenceNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .continuationSequenceNumber)
        continuationSequenceNumber = continuationSequenceNumberDecoded
        let millisBehindLatestDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .millisBehindLatest)
        millisBehindLatest = millisBehindLatestDecoded
        let childShardsContainer = try containerValues.decodeIfPresent([ChildShard].self, forKey: .childShards)
        var childShardsDecoded0:[ChildShard]? = nil
        if let childShardsContainer = childShardsContainer {
            childShardsDecoded0 = [ChildShard]()
            for structure0 in childShardsContainer {
                childShardsDecoded0?.append(structure0)
            }
        }
        childShards = childShardsDecoded0
    }
}
