// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateLedgerInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deletionProtection = "DeletionProtection"
        case name = "Name"
        case permissionsMode = "PermissionsMode"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deletionProtection = deletionProtection {
            try encodeContainer.encode(deletionProtection, forKey: .deletionProtection)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let permissionsMode = permissionsMode {
            try encodeContainer.encode(permissionsMode.rawValue, forKey: .permissionsMode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
