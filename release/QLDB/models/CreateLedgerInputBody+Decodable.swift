// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLedgerInputBody: Equatable {
    public let name: String?
    public let tags: [String:String?]?
    public let permissionsMode: PermissionsMode?
    public let deletionProtection: Bool?
}

extension CreateLedgerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deletionProtection = "DeletionProtection"
        case name = "Name"
        case permissionsMode = "PermissionsMode"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String?].self, forKey: .tags)
        var tagsDecoded0: [String:String?]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String?]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let permissionsModeDecoded = try containerValues.decodeIfPresent(PermissionsMode.self, forKey: .permissionsMode)
        permissionsMode = permissionsModeDecoded
        let deletionProtectionDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .deletionProtection)
        deletionProtection = deletionProtectionDecoded
    }
}
