// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StreamJournalToKinesisInputBody: Equatable {
    public let roleArn: String?
    public let tags: [String:String?]?
    public let inclusiveStartTime: Date?
    public let exclusiveEndTime: Date?
    public let kinesisConfiguration: KinesisConfiguration?
    public let streamName: String?
}

extension StreamJournalToKinesisInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case exclusiveEndTime = "ExclusiveEndTime"
        case inclusiveStartTime = "InclusiveStartTime"
        case kinesisConfiguration = "KinesisConfiguration"
        case roleArn = "RoleArn"
        case streamName = "StreamName"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String?].self, forKey: .tags)
        var tagsDecoded0: [String:String?]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String?]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let inclusiveStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .inclusiveStartTime)
        inclusiveStartTime = inclusiveStartTimeDecoded
        let exclusiveEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .exclusiveEndTime)
        exclusiveEndTime = exclusiveEndTimeDecoded
        let kinesisConfigurationDecoded = try containerValues.decodeIfPresent(KinesisConfiguration.self, forKey: .kinesisConfiguration)
        kinesisConfiguration = kinesisConfigurationDecoded
        let streamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamName)
        streamName = streamNameDecoded
    }
}
