// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Forecast: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case predictions = "Predictions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let predictions = predictions {
            var predictionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .predictions)
            for (dictKey0, predictions0) in predictions {
                try predictionsContainer.encode(predictions0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predictionsContainer = try containerValues.decodeIfPresent([String:[DataPoint]?].self, forKey: .predictions)
        var predictionsDecoded0: [String:[DataPoint]?]? = nil
        if let predictionsContainer = predictionsContainer {
            predictionsDecoded0 = [String:[DataPoint]?]()
            for (key0, timeseries0) in predictionsContainer {
                var timeseries0Decoded0 = [DataPoint]()
                if let timeseries0 = timeseries0 {
                    for structure1 in timeseries0 {
                        timeseries0Decoded0.append(structure1)
                    }
                }
                predictionsDecoded0?[key0] = timeseries0Decoded0
            }
        }
        predictions = predictionsDecoded0
    }
}
