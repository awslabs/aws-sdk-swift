// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct QueryForecastInputBody: Equatable {
    public let forecastArn: String?
    public let startDate: String?
    public let endDate: String?
    public let filters: [String:String]?
    public let nextToken: String?
}

extension QueryForecastInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endDate = "EndDate"
        case filters = "Filters"
        case forecastArn = "ForecastArn"
        case nextToken = "NextToken"
        case startDate = "StartDate"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let forecastArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .forecastArn)
        forecastArn = forecastArnDecoded
        let startDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startDate)
        startDate = startDateDecoded
        let endDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endDate)
        endDate = endDateDecoded
        let filtersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .filters)
        var filtersDecoded0: [String:String]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [String:String]()
            for (key0, attributevalue0) in filtersContainer {
                filtersDecoded0?[key0] = attributevalue0
            }
        }
        filters = filtersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
