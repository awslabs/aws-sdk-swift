// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Provides information about the status, configuration, and other settings for a campaign.</p>
public struct CampaignResponse: Equatable {
    /// <p>An array of responses, one for each treatment that you defined for the campaign, in addition to the default treatment.</p>
    public let additionalTreatments: [TreatmentResource]?
    /// <p>The unique identifier for the application that the campaign applies to.</p>
    public let applicationId: String?
    /// <p>The Amazon Resource Name (ARN) of the campaign.</p>
    public let arn: String?
    /// <p>The date, in ISO 8601 format, when the campaign was created.</p>
    public let creationDate: String?
    /// <p>The delivery configuration settings for sending the campaign through a custom channel.</p>
    public let customDeliveryConfiguration: CustomDeliveryConfiguration?
    /// <p>The current status of the campaign's default treatment. This value exists only for campaigns that have more than one treatment.</p>
    public let defaultState: CampaignState?
    /// <p>The custom description of the campaign.</p>
    public let description: String?
    /// <p>The allocated percentage of users (segment members) who shouldn't receive messages from the campaign.</p>
    public let holdoutPercent: Int
    /// <p>The settings for the AWS Lambda function to use as a code hook for the campaign. You can use this hook to customize the segment that's used by the campaign.</p>
    public let hook: CampaignHook?
    /// <p>The unique identifier for the campaign.</p>
    public let id: String?
    /// <p>Specifies whether the campaign is paused. A paused campaign doesn't run unless you resume it by changing this value to false.</p>
    public let isPaused: Bool
    /// <p>The date, in ISO 8601 format, when the campaign was last modified.</p>
    public let lastModifiedDate: String?
    /// <p>The messaging limits for the campaign.</p>
    public let limits: CampaignLimits?
    /// <p>The message configuration settings for the campaign.</p>
    public let messageConfiguration: MessageConfiguration?
    /// <p>The name of the campaign.</p>
    public let name: String?
    /// <p>The schedule settings for the campaign.</p>
    public let schedule: Schedule?
    /// <p>The unique identifier for the segment that's associated with the campaign.</p>
    public let segmentId: String?
    /// <p>The version number of the segment that's associated with the campaign.</p>
    public let segmentVersion: Int
    /// <p>The current status of the campaign.</p>
    public let state: CampaignState?
    /// <p>A string-to-string map of key-value pairs that identifies the tags that are associated with the campaign. Each tag consists of a required tag key and an associated tag value.</p>
    public let tags: [String:String]?
    /// <p>The message template thatâ€™s used for the campaign.</p>
    public let templateConfiguration: TemplateConfiguration?
    /// <p>The custom description of the default treatment for the campaign.</p>
    public let treatmentDescription: String?
    /// <p>The custom name of the default treatment for the campaign, if the campaign has multiple treatments. A <i>treatment</i> is a variation of a campaign that's used for A/B testing.</p>
    public let treatmentName: String?
    /// <p>The version number of the campaign.</p>
    public let version: Int

    public init (
        additionalTreatments: [TreatmentResource]? = nil,
        applicationId: String? = nil,
        arn: String? = nil,
        creationDate: String? = nil,
        customDeliveryConfiguration: CustomDeliveryConfiguration? = nil,
        defaultState: CampaignState? = nil,
        description: String? = nil,
        holdoutPercent: Int = 0,
        hook: CampaignHook? = nil,
        id: String? = nil,
        isPaused: Bool = false,
        lastModifiedDate: String? = nil,
        limits: CampaignLimits? = nil,
        messageConfiguration: MessageConfiguration? = nil,
        name: String? = nil,
        schedule: Schedule? = nil,
        segmentId: String? = nil,
        segmentVersion: Int = 0,
        state: CampaignState? = nil,
        tags: [String:String]? = nil,
        templateConfiguration: TemplateConfiguration? = nil,
        treatmentDescription: String? = nil,
        treatmentName: String? = nil,
        version: Int = 0
    )
    {
        self.additionalTreatments = additionalTreatments
        self.applicationId = applicationId
        self.arn = arn
        self.creationDate = creationDate
        self.customDeliveryConfiguration = customDeliveryConfiguration
        self.defaultState = defaultState
        self.description = description
        self.holdoutPercent = holdoutPercent
        self.hook = hook
        self.id = id
        self.isPaused = isPaused
        self.lastModifiedDate = lastModifiedDate
        self.limits = limits
        self.messageConfiguration = messageConfiguration
        self.name = name
        self.schedule = schedule
        self.segmentId = segmentId
        self.segmentVersion = segmentVersion
        self.state = state
        self.tags = tags
        self.templateConfiguration = templateConfiguration
        self.treatmentDescription = treatmentDescription
        self.treatmentName = treatmentName
        self.version = version
    }
}
