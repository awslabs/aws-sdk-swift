// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Condition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conditions = "Conditions"
        case `operator` = "Operator"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditions = conditions {
            var conditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conditions)
            for listofsimplecondition0 in conditions {
                try conditionsContainer.encode(listofsimplecondition0)
            }
        }
        if let `operator` = `operator` {
            try encodeContainer.encode(`operator`.rawValue, forKey: .`operator`)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionsContainer = try containerValues.decodeIfPresent([SimpleCondition].self, forKey: .conditions)
        var conditionsDecoded0:[SimpleCondition]? = nil
        if let conditionsContainer = conditionsContainer {
            conditionsDecoded0 = [SimpleCondition]()
            for structure0 in conditionsContainer {
                conditionsDecoded0?.append(structure0)
            }
        }
        conditions = conditionsDecoded0
        let operatorDecoded = try containerValues.decodeIfPresent(Operator.self, forKey: .operator)
        `operator` = operatorDecoded
    }
}
