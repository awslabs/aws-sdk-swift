// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RandomSplitActivity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case branches = "Branches"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branches = branches {
            var branchesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .branches)
            for listofrandomsplitentry0 in branches {
                try branchesContainer.encode(listofrandomsplitentry0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let branchesContainer = try containerValues.decodeIfPresent([RandomSplitEntry].self, forKey: .branches)
        var branchesDecoded0:[RandomSplitEntry]? = nil
        if let branchesContainer = branchesContainer {
            branchesDecoded0 = [RandomSplitEntry]()
            for structure0 in branchesContainer {
                branchesDecoded0?.append(structure0)
            }
        }
        branches = branchesDecoded0
    }
}
