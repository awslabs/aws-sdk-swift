// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EndpointMessageResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case address = "Address"
        case deliveryStatus = "DeliveryStatus"
        case messageId = "MessageId"
        case statusCode = "StatusCode"
        case statusMessage = "StatusMessage"
        case updatedToken = "UpdatedToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if let deliveryStatus = deliveryStatus {
            try encodeContainer.encode(deliveryStatus.rawValue, forKey: .deliveryStatus)
        }
        if let messageId = messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
        if statusCode != 0 {
            try encodeContainer.encode(statusCode, forKey: .statusCode)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let updatedToken = updatedToken {
            try encodeContainer.encode(updatedToken, forKey: .updatedToken)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .address)
        address = addressDecoded
        let deliveryStatusDecoded = try containerValues.decodeIfPresent(DeliveryStatus.self, forKey: .deliveryStatus)
        deliveryStatus = deliveryStatusDecoded
        let messageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let statusCodeDecoded = try containerValues.decode(Int.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let updatedTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updatedToken)
        updatedToken = updatedTokenDecoded
    }
}
