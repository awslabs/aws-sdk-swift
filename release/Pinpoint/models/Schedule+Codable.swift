// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Schedule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endTime = "EndTime"
        case eventFilter = "EventFilter"
        case frequency = "Frequency"
        case isLocalTime = "IsLocalTime"
        case quietTime = "QuietTime"
        case startTime = "StartTime"
        case timezone = "Timezone"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let eventFilter = eventFilter {
            try encodeContainer.encode(eventFilter, forKey: .eventFilter)
        }
        if let frequency = frequency {
            try encodeContainer.encode(frequency.rawValue, forKey: .frequency)
        }
        if isLocalTime != false {
            try encodeContainer.encode(isLocalTime, forKey: .isLocalTime)
        }
        if let quietTime = quietTime {
            try encodeContainer.encode(quietTime, forKey: .quietTime)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
        if let timezone = timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endTime)
        endTime = endTimeDecoded
        let eventFilterDecoded = try containerValues.decodeIfPresent(CampaignEventFilter.self, forKey: .eventFilter)
        eventFilter = eventFilterDecoded
        let frequencyDecoded = try containerValues.decodeIfPresent(Frequency.self, forKey: .frequency)
        frequency = frequencyDecoded
        let isLocalTimeDecoded = try containerValues.decode(Bool.self, forKey: .isLocalTime)
        isLocalTime = isLocalTimeDecoded
        let quietTimeDecoded = try containerValues.decodeIfPresent(QuietTime.self, forKey: .quietTime)
        quietTime = quietTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        startTime = startTimeDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timezone)
        timezone = timezoneDecoded
    }
}
