// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ActivityResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationId = "ApplicationId"
        case campaignId = "CampaignId"
        case end = "End"
        case id = "Id"
        case result = "Result"
        case scheduledStart = "ScheduledStart"
        case start = "Start"
        case state = "State"
        case successfulEndpointCount = "SuccessfulEndpointCount"
        case timezonesCompletedCount = "TimezonesCompletedCount"
        case timezonesTotalCount = "TimezonesTotalCount"
        case totalEndpointCount = "TotalEndpointCount"
        case treatmentId = "TreatmentId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let campaignId = campaignId {
            try encodeContainer.encode(campaignId, forKey: .campaignId)
        }
        if let end = end {
            try encodeContainer.encode(end, forKey: .end)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let result = result {
            try encodeContainer.encode(result, forKey: .result)
        }
        if let scheduledStart = scheduledStart {
            try encodeContainer.encode(scheduledStart, forKey: .scheduledStart)
        }
        if let start = start {
            try encodeContainer.encode(start, forKey: .start)
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if successfulEndpointCount != 0 {
            try encodeContainer.encode(successfulEndpointCount, forKey: .successfulEndpointCount)
        }
        if timezonesCompletedCount != 0 {
            try encodeContainer.encode(timezonesCompletedCount, forKey: .timezonesCompletedCount)
        }
        if timezonesTotalCount != 0 {
            try encodeContainer.encode(timezonesTotalCount, forKey: .timezonesTotalCount)
        }
        if totalEndpointCount != 0 {
            try encodeContainer.encode(totalEndpointCount, forKey: .totalEndpointCount)
        }
        if let treatmentId = treatmentId {
            try encodeContainer.encode(treatmentId, forKey: .treatmentId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let campaignIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .campaignId)
        campaignId = campaignIdDecoded
        let endDecoded = try containerValues.decodeIfPresent(String.self, forKey: .end)
        end = endDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let resultDecoded = try containerValues.decodeIfPresent(String.self, forKey: .result)
        result = resultDecoded
        let scheduledStartDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduledStart)
        scheduledStart = scheduledStartDecoded
        let startDecoded = try containerValues.decodeIfPresent(String.self, forKey: .start)
        start = startDecoded
        let stateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .state)
        state = stateDecoded
        let successfulEndpointCountDecoded = try containerValues.decode(Int.self, forKey: .successfulEndpointCount)
        successfulEndpointCount = successfulEndpointCountDecoded
        let timezonesCompletedCountDecoded = try containerValues.decode(Int.self, forKey: .timezonesCompletedCount)
        timezonesCompletedCount = timezonesCompletedCountDecoded
        let timezonesTotalCountDecoded = try containerValues.decode(Int.self, forKey: .timezonesTotalCount)
        timezonesTotalCount = timezonesTotalCountDecoded
        let totalEndpointCountDecoded = try containerValues.decode(Int.self, forKey: .totalEndpointCount)
        totalEndpointCount = totalEndpointCountDecoded
        let treatmentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .treatmentId)
        treatmentId = treatmentIdDecoded
    }
}
