// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SimpleEmail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case htmlPart = "HtmlPart"
        case subject = "Subject"
        case textPart = "TextPart"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let htmlPart = htmlPart {
            try encodeContainer.encode(htmlPart, forKey: .htmlPart)
        }
        if let subject = subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let textPart = textPart {
            try encodeContainer.encode(textPart, forKey: .textPart)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let htmlPartDecoded = try containerValues.decodeIfPresent(SimpleEmailPart.self, forKey: .htmlPart)
        htmlPart = htmlPartDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(SimpleEmailPart.self, forKey: .subject)
        subject = subjectDecoded
        let textPartDecoded = try containerValues.decodeIfPresent(SimpleEmailPart.self, forKey: .textPart)
        textPart = textPartDecoded
    }
}
