// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SegmentDimensions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributes = "Attributes"
        case behavior = "Behavior"
        case demographic = "Demographic"
        case location = "Location"
        case metrics = "Metrics"
        case userAttributes = "UserAttributes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .attributes)
            for (dictKey0, mapofattributedimension0) in attributes {
                try attributesContainer.encode(mapofattributedimension0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let behavior = behavior {
            try encodeContainer.encode(behavior, forKey: .behavior)
        }
        if let demographic = demographic {
            try encodeContainer.encode(demographic, forKey: .demographic)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .metrics)
            for (dictKey0, mapofmetricdimension0) in metrics {
                try metricsContainer.encode(mapofmetricdimension0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let userAttributes = userAttributes {
            var userAttributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .userAttributes)
            for (dictKey0, mapofattributedimension0) in userAttributes {
                try userAttributesContainer.encode(mapofattributedimension0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([String:AttributeDimension].self, forKey: .attributes)
        var attributesDecoded0: [String:AttributeDimension]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [String:AttributeDimension]()
            for (key0, attributedimension0) in attributesContainer {
                attributesDecoded0?[key0] = attributedimension0
            }
        }
        attributes = attributesDecoded0
        let behaviorDecoded = try containerValues.decodeIfPresent(SegmentBehaviors.self, forKey: .behavior)
        behavior = behaviorDecoded
        let demographicDecoded = try containerValues.decodeIfPresent(SegmentDemographics.self, forKey: .demographic)
        demographic = demographicDecoded
        let locationDecoded = try containerValues.decodeIfPresent(SegmentLocation.self, forKey: .location)
        location = locationDecoded
        let metricsContainer = try containerValues.decodeIfPresent([String:MetricDimension].self, forKey: .metrics)
        var metricsDecoded0: [String:MetricDimension]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [String:MetricDimension]()
            for (key0, metricdimension0) in metricsContainer {
                metricsDecoded0?[key0] = metricdimension0
            }
        }
        metrics = metricsDecoded0
        let userAttributesContainer = try containerValues.decodeIfPresent([String:AttributeDimension].self, forKey: .userAttributes)
        var userAttributesDecoded0: [String:AttributeDimension]? = nil
        if let userAttributesContainer = userAttributesContainer {
            userAttributesDecoded0 = [String:AttributeDimension]()
            for (key0, attributedimension0) in userAttributesContainer {
                userAttributesDecoded0?[key0] = attributedimension0
            }
        }
        userAttributes = userAttributesDecoded0
    }
}
