// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EventsBatch: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endpoint = "Endpoint"
        case events = "Events"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpoint = endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let events = events {
            var eventsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .events)
            for (dictKey0, mapofevent0) in events {
                try eventsContainer.encode(mapofevent0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointDecoded = try containerValues.decodeIfPresent(PublicEndpoint.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let eventsContainer = try containerValues.decodeIfPresent([String:Event].self, forKey: .events)
        var eventsDecoded0: [String:Event]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [String:Event]()
            for (key0, event0) in eventsContainer {
                eventsDecoded0?[key0] = event0
            }
        }
        events = eventsDecoded0
    }
}
