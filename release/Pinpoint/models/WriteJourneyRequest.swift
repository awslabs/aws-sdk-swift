// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Specifies the configuration and other settings for a journey.</p>
public struct WriteJourneyRequest: Equatable {
    /// <p>A map that contains a set of Activity objects, one object for each activity in the journey. For each Activity object, the key is the unique identifier (string) for an activity and the value is the settings for the activity. An activity identifier can contain a maximum of 100 characters. The characters must be alphanumeric characters.</p>
    public let activities: [String:Activity]?
    /// <p>The date, in ISO 8601 format, when the journey was created.</p>
    public let creationDate: String?
    /// <p>The date, in ISO 8601 format, when the journey was last modified.</p>
    public let lastModifiedDate: String?
    /// <p>The messaging and entry limits for the journey.</p>
    public let limits: JourneyLimits?
    /// <p>Specifies whether the journey's scheduled start and end times use each participant's local time. To base the schedule on each participant's local time, set this value to true.</p>
    public let localTime: Bool
    /// <p>The name of the journey. A journey name can contain a maximum of 150 characters. The characters can be alphanumeric characters or symbols, such as underscores (_) or hyphens (-). A journey name can't contain any spaces.</p>
    public let name: String?
    /// <p>The quiet time settings for the journey. Quiet time is a specific time range when a journey doesn't send messages to participants, if all the following conditions are met:</p> <ul><li><p>The EndpointDemographic.Timezone property of the endpoint for the participant is set to a valid value.</p></li> <li><p>The current time in the participant's time zone is later than or equal to the time specified by the QuietTime.Start property for the journey.</p></li> <li><p>The current time in the participant's time zone is earlier than or equal to the time specified by the QuietTime.End property for the journey.</p></li></ul> <p>If any of the preceding conditions isn't met, the participant will receive messages from the journey, even if quiet time is enabled.</p>
    public let quietTime: QuietTime?
    /// <p>The frequency with which Amazon Pinpoint evaluates segment and event data for the journey, as a duration in ISO 8601 format.</p>
    public let refreshFrequency: String?
    /// <p>Specifies whether a journey should be refreshed on segment update.</p>
    public let refreshOnSegmentUpdate: Bool
    /// <p>The schedule settings for the journey.</p>
    public let schedule: JourneySchedule?
    /// <p>The unique identifier for the first activity in the journey. The identifier for this activity can contain a maximum of 128 characters. The characters must be alphanumeric characters.</p>
    public let startActivity: String?
    /// <p>The segment that defines which users are participants in the journey.</p>
    public let startCondition: StartCondition?
    /// <p>The status of the journey. Valid values are:</p> <ul><li><p>DRAFT - Saves the journey and doesn't publish it.</p></li> <li><p>ACTIVE - Saves and publishes the journey. Depending on the journey's schedule, the journey starts running immediately or at the scheduled start time. If a journey's status is ACTIVE, you can't add, change, or remove activities from it.</p></li></ul> <p>PAUSED, CANCELLED, COMPLETED, and CLOSED states are not supported in requests to create or update a journey. To cancel, pause, or resume a journey, use the <link  linkend="apps-application-id-journeys-journey-id-state">Journey State</link> resource.</p>
    public let state: State?
    /// <p>Specifies whether endpoints in quiet hours should enter a wait till the end of their quiet hours.</p>
    public let waitForQuietTime: Bool

    public init (
        activities: [String:Activity]? = nil,
        creationDate: String? = nil,
        lastModifiedDate: String? = nil,
        limits: JourneyLimits? = nil,
        localTime: Bool = false,
        name: String? = nil,
        quietTime: QuietTime? = nil,
        refreshFrequency: String? = nil,
        refreshOnSegmentUpdate: Bool = false,
        schedule: JourneySchedule? = nil,
        startActivity: String? = nil,
        startCondition: StartCondition? = nil,
        state: State? = nil,
        waitForQuietTime: Bool = false
    )
    {
        self.activities = activities
        self.creationDate = creationDate
        self.lastModifiedDate = lastModifiedDate
        self.limits = limits
        self.localTime = localTime
        self.name = name
        self.quietTime = quietTime
        self.refreshFrequency = refreshFrequency
        self.refreshOnSegmentUpdate = refreshOnSegmentUpdate
        self.schedule = schedule
        self.startActivity = startActivity
        self.startCondition = startCondition
        self.state = state
        self.waitForQuietTime = waitForQuietTime
    }
}
