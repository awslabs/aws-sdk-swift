// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectMessageConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aDMMessage = "ADMMessage"
        case aPNSMessage = "APNSMessage"
        case baiduMessage = "BaiduMessage"
        case defaultMessage = "DefaultMessage"
        case defaultPushNotificationMessage = "DefaultPushNotificationMessage"
        case emailMessage = "EmailMessage"
        case gCMMessage = "GCMMessage"
        case sMSMessage = "SMSMessage"
        case voiceMessage = "VoiceMessage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aDMMessage = aDMMessage {
            try encodeContainer.encode(aDMMessage, forKey: .aDMMessage)
        }
        if let aPNSMessage = aPNSMessage {
            try encodeContainer.encode(aPNSMessage, forKey: .aPNSMessage)
        }
        if let baiduMessage = baiduMessage {
            try encodeContainer.encode(baiduMessage, forKey: .baiduMessage)
        }
        if let defaultMessage = defaultMessage {
            try encodeContainer.encode(defaultMessage, forKey: .defaultMessage)
        }
        if let defaultPushNotificationMessage = defaultPushNotificationMessage {
            try encodeContainer.encode(defaultPushNotificationMessage, forKey: .defaultPushNotificationMessage)
        }
        if let emailMessage = emailMessage {
            try encodeContainer.encode(emailMessage, forKey: .emailMessage)
        }
        if let gCMMessage = gCMMessage {
            try encodeContainer.encode(gCMMessage, forKey: .gCMMessage)
        }
        if let sMSMessage = sMSMessage {
            try encodeContainer.encode(sMSMessage, forKey: .sMSMessage)
        }
        if let voiceMessage = voiceMessage {
            try encodeContainer.encode(voiceMessage, forKey: .voiceMessage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aDMMessageDecoded = try containerValues.decodeIfPresent(ADMMessage.self, forKey: .aDMMessage)
        aDMMessage = aDMMessageDecoded
        let aPNSMessageDecoded = try containerValues.decodeIfPresent(APNSMessage.self, forKey: .aPNSMessage)
        aPNSMessage = aPNSMessageDecoded
        let baiduMessageDecoded = try containerValues.decodeIfPresent(BaiduMessage.self, forKey: .baiduMessage)
        baiduMessage = baiduMessageDecoded
        let defaultMessageDecoded = try containerValues.decodeIfPresent(DefaultMessage.self, forKey: .defaultMessage)
        defaultMessage = defaultMessageDecoded
        let defaultPushNotificationMessageDecoded = try containerValues.decodeIfPresent(DefaultPushNotificationMessage.self, forKey: .defaultPushNotificationMessage)
        defaultPushNotificationMessage = defaultPushNotificationMessageDecoded
        let emailMessageDecoded = try containerValues.decodeIfPresent(EmailMessage.self, forKey: .emailMessage)
        emailMessage = emailMessageDecoded
        let gCMMessageDecoded = try containerValues.decodeIfPresent(GCMMessage.self, forKey: .gCMMessage)
        gCMMessage = gCMMessageDecoded
        let sMSMessageDecoded = try containerValues.decodeIfPresent(SMSMessage.self, forKey: .sMSMessage)
        sMSMessage = sMSMessageDecoded
        let voiceMessageDecoded = try containerValues.decodeIfPresent(VoiceMessage.self, forKey: .voiceMessage)
        voiceMessage = voiceMessageDecoded
    }
}
