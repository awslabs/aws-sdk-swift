// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NumberValidateResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case carrier = "Carrier"
        case city = "City"
        case cleansedPhoneNumberE164 = "CleansedPhoneNumberE164"
        case cleansedPhoneNumberNational = "CleansedPhoneNumberNational"
        case country = "Country"
        case countryCodeIso2 = "CountryCodeIso2"
        case countryCodeNumeric = "CountryCodeNumeric"
        case county = "County"
        case originalCountryCodeIso2 = "OriginalCountryCodeIso2"
        case originalPhoneNumber = "OriginalPhoneNumber"
        case phoneType = "PhoneType"
        case phoneTypeCode = "PhoneTypeCode"
        case timezone = "Timezone"
        case zipCode = "ZipCode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let carrier = carrier {
            try encodeContainer.encode(carrier, forKey: .carrier)
        }
        if let city = city {
            try encodeContainer.encode(city, forKey: .city)
        }
        if let cleansedPhoneNumberE164 = cleansedPhoneNumberE164 {
            try encodeContainer.encode(cleansedPhoneNumberE164, forKey: .cleansedPhoneNumberE164)
        }
        if let cleansedPhoneNumberNational = cleansedPhoneNumberNational {
            try encodeContainer.encode(cleansedPhoneNumberNational, forKey: .cleansedPhoneNumberNational)
        }
        if let country = country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if let countryCodeIso2 = countryCodeIso2 {
            try encodeContainer.encode(countryCodeIso2, forKey: .countryCodeIso2)
        }
        if let countryCodeNumeric = countryCodeNumeric {
            try encodeContainer.encode(countryCodeNumeric, forKey: .countryCodeNumeric)
        }
        if let county = county {
            try encodeContainer.encode(county, forKey: .county)
        }
        if let originalCountryCodeIso2 = originalCountryCodeIso2 {
            try encodeContainer.encode(originalCountryCodeIso2, forKey: .originalCountryCodeIso2)
        }
        if let originalPhoneNumber = originalPhoneNumber {
            try encodeContainer.encode(originalPhoneNumber, forKey: .originalPhoneNumber)
        }
        if let phoneType = phoneType {
            try encodeContainer.encode(phoneType, forKey: .phoneType)
        }
        if phoneTypeCode != 0 {
            try encodeContainer.encode(phoneTypeCode, forKey: .phoneTypeCode)
        }
        if let timezone = timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
        if let zipCode = zipCode {
            try encodeContainer.encode(zipCode, forKey: .zipCode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let carrierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .carrier)
        carrier = carrierDecoded
        let cityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .city)
        city = cityDecoded
        let cleansedPhoneNumberE164Decoded = try containerValues.decodeIfPresent(String.self, forKey: .cleansedPhoneNumberE164)
        cleansedPhoneNumberE164 = cleansedPhoneNumberE164Decoded
        let cleansedPhoneNumberNationalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cleansedPhoneNumberNational)
        cleansedPhoneNumberNational = cleansedPhoneNumberNationalDecoded
        let countryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .country)
        country = countryDecoded
        let countryCodeIso2Decoded = try containerValues.decodeIfPresent(String.self, forKey: .countryCodeIso2)
        countryCodeIso2 = countryCodeIso2Decoded
        let countryCodeNumericDecoded = try containerValues.decodeIfPresent(String.self, forKey: .countryCodeNumeric)
        countryCodeNumeric = countryCodeNumericDecoded
        let countyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .county)
        county = countyDecoded
        let originalCountryCodeIso2Decoded = try containerValues.decodeIfPresent(String.self, forKey: .originalCountryCodeIso2)
        originalCountryCodeIso2 = originalCountryCodeIso2Decoded
        let originalPhoneNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .originalPhoneNumber)
        originalPhoneNumber = originalPhoneNumberDecoded
        let phoneTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .phoneType)
        phoneType = phoneTypeDecoded
        let phoneTypeCodeDecoded = try containerValues.decode(Int.self, forKey: .phoneTypeCode)
        phoneTypeCode = phoneTypeCodeDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let zipCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .zipCode)
        zipCode = zipCodeDecoded
    }
}
