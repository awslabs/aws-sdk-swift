// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConditionalSplitActivity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case condition = "Condition"
        case evaluationWaitTime = "EvaluationWaitTime"
        case falseActivity = "FalseActivity"
        case trueActivity = "TrueActivity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let condition = condition {
            try encodeContainer.encode(condition, forKey: .condition)
        }
        if let evaluationWaitTime = evaluationWaitTime {
            try encodeContainer.encode(evaluationWaitTime, forKey: .evaluationWaitTime)
        }
        if let falseActivity = falseActivity {
            try encodeContainer.encode(falseActivity, forKey: .falseActivity)
        }
        if let trueActivity = trueActivity {
            try encodeContainer.encode(trueActivity, forKey: .trueActivity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionDecoded = try containerValues.decodeIfPresent(Condition.self, forKey: .condition)
        condition = conditionDecoded
        let evaluationWaitTimeDecoded = try containerValues.decodeIfPresent(WaitTime.self, forKey: .evaluationWaitTime)
        evaluationWaitTime = evaluationWaitTimeDecoded
        let falseActivityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .falseActivity)
        falseActivity = falseActivityDecoded
        let trueActivityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trueActivity)
        trueActivity = trueActivityDecoded
    }
}
