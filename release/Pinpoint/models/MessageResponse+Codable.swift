// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MessageResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationId = "ApplicationId"
        case endpointResult = "EndpointResult"
        case requestId = "RequestId"
        case result = "Result"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let endpointResult = endpointResult {
            var endpointResultContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .endpointResult)
            for (dictKey0, mapofendpointmessageresult0) in endpointResult {
                try endpointResultContainer.encode(mapofendpointmessageresult0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let requestId = requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let result = result {
            var resultContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .result)
            for (dictKey0, mapofmessageresult0) in result {
                try resultContainer.encode(mapofmessageresult0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let endpointResultContainer = try containerValues.decodeIfPresent([String:EndpointMessageResult].self, forKey: .endpointResult)
        var endpointResultDecoded0: [String:EndpointMessageResult]? = nil
        if let endpointResultContainer = endpointResultContainer {
            endpointResultDecoded0 = [String:EndpointMessageResult]()
            for (key0, endpointmessageresult0) in endpointResultContainer {
                endpointResultDecoded0?[key0] = endpointmessageresult0
            }
        }
        endpointResult = endpointResultDecoded0
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let resultContainer = try containerValues.decodeIfPresent([String:MessageResult].self, forKey: .result)
        var resultDecoded0: [String:MessageResult]? = nil
        if let resultContainer = resultContainer {
            resultDecoded0 = [String:MessageResult]()
            for (key0, messageresult0) in resultContainer {
                resultDecoded0?[key0] = messageresult0
            }
        }
        result = resultDecoded0
    }
}
