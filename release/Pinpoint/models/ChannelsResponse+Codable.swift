// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChannelsResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channels = "Channels"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channels = channels {
            var channelsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .channels)
            for (dictKey0, mapofchannelresponse0) in channels {
                try channelsContainer.encode(mapofchannelresponse0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelsContainer = try containerValues.decodeIfPresent([String:ChannelResponse].self, forKey: .channels)
        var channelsDecoded0: [String:ChannelResponse]? = nil
        if let channelsContainer = channelsContainer {
            channelsDecoded0 = [String:ChannelResponse]()
            for (key0, channelresponse0) in channelsContainer {
                channelsDecoded0?[key0] = channelresponse0
            }
        }
        channels = channelsDecoded0
    }
}
