// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Session: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case duration = "Duration"
        case id = "Id"
        case startTimestamp = "StartTimestamp"
        case stopTimestamp = "StopTimestamp"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let startTimestamp = startTimestamp {
            try encodeContainer.encode(startTimestamp, forKey: .startTimestamp)
        }
        if let stopTimestamp = stopTimestamp {
            try encodeContainer.encode(stopTimestamp, forKey: .stopTimestamp)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let startTimestampDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTimestamp)
        startTimestamp = startTimestampDecoded
        let stopTimestampDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stopTimestamp)
        stopTimestamp = stopTimestampDecoded
    }
}
