// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JourneyLimits: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dailyCap = "DailyCap"
        case endpointReentryCap = "EndpointReentryCap"
        case endpointReentryInterval = "EndpointReentryInterval"
        case messagesPerSecond = "MessagesPerSecond"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if dailyCap != 0 {
            try encodeContainer.encode(dailyCap, forKey: .dailyCap)
        }
        if endpointReentryCap != 0 {
            try encodeContainer.encode(endpointReentryCap, forKey: .endpointReentryCap)
        }
        if let endpointReentryInterval = endpointReentryInterval {
            try encodeContainer.encode(endpointReentryInterval, forKey: .endpointReentryInterval)
        }
        if messagesPerSecond != 0 {
            try encodeContainer.encode(messagesPerSecond, forKey: .messagesPerSecond)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dailyCapDecoded = try containerValues.decode(Int.self, forKey: .dailyCap)
        dailyCap = dailyCapDecoded
        let endpointReentryCapDecoded = try containerValues.decode(Int.self, forKey: .endpointReentryCap)
        endpointReentryCap = endpointReentryCapDecoded
        let messagesPerSecondDecoded = try containerValues.decode(Int.self, forKey: .messagesPerSecond)
        messagesPerSecond = messagesPerSecondDecoded
        let endpointReentryIntervalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointReentryInterval)
        endpointReentryInterval = endpointReentryIntervalDecoded
    }
}
