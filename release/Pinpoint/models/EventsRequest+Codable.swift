// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EventsRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case batchItem = "BatchItem"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchItem = batchItem {
            var batchItemContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .batchItem)
            for (dictKey0, mapofeventsbatch0) in batchItem {
                try batchItemContainer.encode(mapofeventsbatch0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchItemContainer = try containerValues.decodeIfPresent([String:EventsBatch].self, forKey: .batchItem)
        var batchItemDecoded0: [String:EventsBatch]? = nil
        if let batchItemContainer = batchItemContainer {
            batchItemDecoded0 = [String:EventsBatch]()
            for (key0, eventsbatch0) in batchItemContainer {
                batchItemDecoded0?[key0] = eventsbatch0
            }
        }
        batchItem = batchItemDecoded0
    }
}
