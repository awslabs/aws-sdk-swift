// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension PipesClientTypes {
    public enum AssignPublicIp: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AssignPublicIp] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AssignPublicIp(rawValue: rawValue) ?? AssignPublicIp.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes.AwsVpcConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignPublicIp = "AssignPublicIp"
        case securityGroups = "SecurityGroups"
        case subnets = "Subnets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignPublicIp = self.assignPublicIp {
            try encodeContainer.encode(assignPublicIp.rawValue, forKey: .assignPublicIp)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for securitygroup0 in securityGroups {
                try securityGroupsContainer.encode(securitygroup0)
            }
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for subnet0 in subnets {
                try subnetsContainer.encode(subnet0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let assignPublicIpDecoded = try containerValues.decodeIfPresent(PipesClientTypes.AssignPublicIp.self, forKey: .assignPublicIp)
        assignPublicIp = assignPublicIpDecoded
    }
}

extension PipesClientTypes {
    /// This structure specifies the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode.
    public struct AwsVpcConfiguration: Swift.Equatable {
        /// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE.
        public var assignPublicIp: PipesClientTypes.AssignPublicIp?
        /// Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
        public var securityGroups: [Swift.String]?
        /// Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
        /// This member is required.
        public var subnets: [Swift.String]?

        public init (
            assignPublicIp: PipesClientTypes.AssignPublicIp? = nil,
            securityGroups: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil
        )
        {
            self.assignPublicIp = assignPublicIp
            self.securityGroups = securityGroups
            self.subnets = subnets
        }
    }

}

extension PipesClientTypes.BatchArrayProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case size = "Size"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size) ?? 0
        size = sizeDecoded
    }
}

extension PipesClientTypes {
    /// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an Batch job.
    public struct BatchArrayProperties: Swift.Equatable {
        /// The size of the array, if this is an array batch job.
        public var size: Swift.Int

        public init (
            size: Swift.Int = 0
        )
        {
            self.size = size
        }
    }

}

extension PipesClientTypes.BatchContainerOverrides: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command = "Command"
        case environment = "Environment"
        case instanceType = "InstanceType"
        case resourceRequirements = "ResourceRequirements"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for string0 in command {
                try commandContainer.encode(string0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for batchenvironmentvariable0 in environment {
                try environmentContainer.encode(batchenvironmentvariable0)
            }
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let resourceRequirements = resourceRequirements {
            var resourceRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRequirements)
            for batchresourcerequirement0 in resourceRequirements {
                try resourceRequirementsContainer.encode(batchresourcerequirement0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([PipesClientTypes.BatchEnvironmentVariable?].self, forKey: .environment)
        var environmentDecoded0:[PipesClientTypes.BatchEnvironmentVariable]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [PipesClientTypes.BatchEnvironmentVariable]()
            for structure0 in environmentContainer {
                if let structure0 = structure0 {
                    environmentDecoded0?.append(structure0)
                }
            }
        }
        environment = environmentDecoded0
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let resourceRequirementsContainer = try containerValues.decodeIfPresent([PipesClientTypes.BatchResourceRequirement?].self, forKey: .resourceRequirements)
        var resourceRequirementsDecoded0:[PipesClientTypes.BatchResourceRequirement]? = nil
        if let resourceRequirementsContainer = resourceRequirementsContainer {
            resourceRequirementsDecoded0 = [PipesClientTypes.BatchResourceRequirement]()
            for structure0 in resourceRequirementsContainer {
                if let structure0 = structure0 {
                    resourceRequirementsDecoded0?.append(structure0)
                }
            }
        }
        resourceRequirements = resourceRequirementsDecoded0
    }
}

extension PipesClientTypes {
    /// The overrides that are sent to a container.
    public struct BatchContainerOverrides: Swift.Equatable {
        /// The command to send to the container that overrides the default command from the Docker image or the task definition.
        public var command: [Swift.String]?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. Environment variables cannot start with "Batch". This naming convention is reserved for variables that Batch sets.
        public var environment: [PipesClientTypes.BatchEnvironmentVariable]?
        /// The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
        public var instanceType: Swift.String?
        /// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU.
        public var resourceRequirements: [PipesClientTypes.BatchResourceRequirement]?

        public init (
            command: [Swift.String]? = nil,
            environment: [PipesClientTypes.BatchEnvironmentVariable]? = nil,
            instanceType: Swift.String? = nil,
            resourceRequirements: [PipesClientTypes.BatchResourceRequirement]? = nil
        )
        {
            self.command = command
            self.environment = environment
            self.instanceType = instanceType
            self.resourceRequirements = resourceRequirements
        }
    }

}

extension PipesClientTypes.BatchEnvironmentVariable: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension PipesClientTypes {
    /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. Environment variables cannot start with "Batch". This naming convention is reserved for variables that Batch sets.
    public struct BatchEnvironmentVariable: Swift.Equatable {
        /// The name of the key-value pair. For environment variables, this is the name of the environment variable.
        public var name: Swift.String?
        /// The value of the key-value pair. For environment variables, this is the value of the environment variable.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension PipesClientTypes.BatchJobDependency: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(PipesClientTypes.BatchJobDependencyType.self, forKey: .type)
        type = typeDecoded
    }
}

extension PipesClientTypes {
    /// An object that represents an Batch job dependency.
    public struct BatchJobDependency: Swift.Equatable {
        /// The job ID of the Batch job that's associated with this dependency.
        public var jobId: Swift.String?
        /// The type of the job dependency.
        public var type: PipesClientTypes.BatchJobDependencyType?

        public init (
            jobId: Swift.String? = nil,
            type: PipesClientTypes.BatchJobDependencyType? = nil
        )
        {
            self.jobId = jobId
            self.type = type
        }
    }

}

extension PipesClientTypes {
    public enum BatchJobDependencyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case nToN
        case sequential
        case sdkUnknown(Swift.String)

        public static var allCases: [BatchJobDependencyType] {
            return [
                .nToN,
                .sequential,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .nToN: return "N_TO_N"
            case .sequential: return "SEQUENTIAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BatchJobDependencyType(rawValue: rawValue) ?? BatchJobDependencyType.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes.BatchResourceRequirement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(PipesClientTypes.BatchResourceRequirementType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension PipesClientTypes {
    /// The type and amount of a resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
    public struct BatchResourceRequirement: Swift.Equatable {
        /// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
        /// This member is required.
        public var type: PipesClientTypes.BatchResourceRequirementType?
        /// The quantity of the specified resource to reserve for the container. The values vary based on the type specified. type="GPU" The number of physical GPUs to reserve for the container. Make sure that the number of GPUs reserved for all containers in a job doesn't exceed the number of available GPUs on the compute resource that the job is launched on. GPUs aren't available for jobs that are running on Fargate resources. type="MEMORY" The memory hard limit (in MiB) present to the container. This parameter is supported for jobs that are running on EC2 resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter maps to Memory in the [ Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --memory option to [docker run](https://docs.docker.com/engine/reference/run/). You must specify at least 4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP) jobs. It must be specified for each node at least once. This parameter maps to Memory in the [ Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --memory option to [docker run](https://docs.docker.com/engine/reference/run/). If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the Batch User Guide. For jobs that are running on Fargate resources, then value is the hard limit (in MiB), and must match one of the supported values and the VCPU values must be one of the values supported for that memory value. value = 512 VCPU = 0.25 value = 1024 VCPU = 0.25 or 0.5 value = 2048 VCPU = 0.25, 0.5, or 1 value = 3072 VCPU = 0.5, or 1 value = 4096 VCPU = 0.5, 1, or 2 value = 5120, 6144, or 7168 VCPU = 1 or 2 value = 8192 VCPU = 1, 2, 4, or 8 value = 9216, 10240, 11264, 12288, 13312, 14336, or 15360 VCPU = 2 or 4 value = 16384 VCPU = 2, 4, or 8 value = 17408, 18432, 19456, 21504, 22528, 23552, 25600, 26624, 27648, 29696, or 30720 VCPU = 4 value = 20480, 24576, or 28672 VCPU = 4 or 8 value = 36864, 45056, 53248, or 61440 VCPU = 8 value = 32768, 40960, 49152, or 57344 VCPU = 8 or 16 value = 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880 VCPU = 16 type="VCPU" The number of vCPUs reserved for the container. This parameter maps to CpuShares in the [ Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --cpu-shares option to [docker run](https://docs.docker.com/engine/reference/run/). Each vCPU is equivalent to 1,024 CPU shares. For EC2 resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be specified for each node at least once. The default for the Fargate On-Demand vCPU resource count quota is 6 vCPUs. For more information about Fargate quotas, see [Fargate quotas](https://docs.aws.amazon.com/general/latest/gr/ecs-service.html#service-quotas-fargate) in the Amazon Web Services General Reference. For jobs that are running on Fargate resources, then value must match one of the supported values and the MEMORY values must be one of the values supported for that VCPU value. The supported values are 0.25, 0.5, 1, 2, 4, 8, and 16 value = 0.25 MEMORY = 512, 1024, or 2048 value = 0.5 MEMORY = 1024, 2048, 3072, or 4096 value = 1 MEMORY = 2048, 3072, 4096, 5120, 6144, 7168, or 8192 value = 2 MEMORY = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384 value = 4 MEMORY = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720 value = 8 MEMORY = 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, or 61440 value = 16 MEMORY = 32768, 40960, 49152, 57344, 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880
        /// This member is required.
        public var value: Swift.String?

        public init (
            type: PipesClientTypes.BatchResourceRequirementType? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension PipesClientTypes {
    public enum BatchResourceRequirementType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gpu
        case memory
        case vcpu
        case sdkUnknown(Swift.String)

        public static var allCases: [BatchResourceRequirementType] {
            return [
                .gpu,
                .memory,
                .vcpu,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gpu: return "GPU"
            case .memory: return "MEMORY"
            case .vcpu: return "VCPU"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BatchResourceRequirementType(rawValue: rawValue) ?? BatchResourceRequirementType.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes.BatchRetryStrategy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attempts = "Attempts"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if attempts != 0 {
            try encodeContainer.encode(attempts, forKey: .attempts)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attemptsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .attempts) ?? 0
        attempts = attemptsDecoded
    }
}

extension PipesClientTypes {
    /// The retry strategy that's associated with a job. For more information, see [ Automated job retries](https://docs.aws.amazon.com/batch/latest/userguide/job_retries.html) in the Batch User Guide.
    public struct BatchRetryStrategy: Swift.Equatable {
        /// The number of times to move a job to the RUNNABLE status. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value.
        public var attempts: Swift.Int

        public init (
            attempts: Swift.Int = 0
        )
        {
            self.attempts = attempts
        }
    }

}

extension PipesClientTypes.CapacityProviderStrategyItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case base
        case capacityProvider
        case weight
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if base != 0 {
            try encodeContainer.encode(base, forKey: .base)
        }
        if let capacityProvider = self.capacityProvider {
            try encodeContainer.encode(capacityProvider, forKey: .capacityProvider)
        }
        if weight != 0 {
            try encodeContainer.encode(weight, forKey: .weight)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capacityProviderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .capacityProvider)
        capacityProvider = capacityProviderDecoded
        let weightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .weight) ?? 0
        weight = weightDecoded
        let baseDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .base) ?? 0
        base = baseDecoded
    }
}

extension PipesClientTypes.CapacityProviderStrategyItem: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CapacityProviderStrategyItem(base: \(Swift.String(describing: base)), weight: \(Swift.String(describing: weight)), capacityProvider: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// The details of a capacity provider strategy. To learn more, see [CapacityProviderStrategyItem](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CapacityProviderStrategyItem.html) in the Amazon ECS API Reference.
    public struct CapacityProviderStrategyItem: Swift.Equatable {
        /// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
        public var base: Swift.Int
        /// The short name of the capacity provider.
        /// This member is required.
        public var capacityProvider: Swift.String?
        /// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
        public var weight: Swift.Int

        public init (
            base: Swift.Int = 0,
            capacityProvider: Swift.String? = nil,
            weight: Swift.Int = 0
        )
        {
            self.base = base
            self.capacityProvider = capacityProvider
            self.weight = weight
        }
    }

}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceId = output.resourceId
            self.resourceType = output.resourceType
        } else {
            self.message = nil
            self.resourceId = nil
            self.resourceType = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An action you attempted resulted in an exception.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?
    /// The ID of the resource that caused the exception.
    /// This member is required.
    public var resourceId: Swift.String?
    /// The type of resource that caused the exception.
    /// This member is required.
    public var resourceType: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let resourceId: Swift.String?
    let resourceType: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case resourceId
        case resourceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension CreatePipeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePipeInput(desiredState: \(Swift.String(describing: desiredState)), enrichment: \(Swift.String(describing: enrichment)), enrichmentParameters: \(Swift.String(describing: enrichmentParameters)), name: \(Swift.String(describing: name)), roleArn: \(Swift.String(describing: roleArn)), source: \(Swift.String(describing: source)), sourceParameters: \(Swift.String(describing: sourceParameters)), tags: \(Swift.String(describing: tags)), target: \(Swift.String(describing: target)), targetParameters: \(Swift.String(describing: targetParameters)), description: \"CONTENT_REDACTED\")"}
}

extension CreatePipeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case desiredState = "DesiredState"
        case enrichment = "Enrichment"
        case enrichmentParameters = "EnrichmentParameters"
        case roleArn = "RoleArn"
        case source = "Source"
        case sourceParameters = "SourceParameters"
        case tags = "Tags"
        case target = "Target"
        case targetParameters = "TargetParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let desiredState = self.desiredState {
            try encodeContainer.encode(desiredState.rawValue, forKey: .desiredState)
        }
        if let enrichment = self.enrichment {
            try encodeContainer.encode(enrichment, forKey: .enrichment)
        }
        if let enrichmentParameters = self.enrichmentParameters {
            try encodeContainer.encode(enrichmentParameters, forKey: .enrichmentParameters)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let source = self.source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let sourceParameters = self.sourceParameters {
            try encodeContainer.encode(sourceParameters, forKey: .sourceParameters)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let target = self.target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if let targetParameters = self.targetParameters {
            try encodeContainer.encode(targetParameters, forKey: .targetParameters)
        }
    }
}

extension CreatePipeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/v1/pipes/\(name.urlPercentEncoding())"
    }
}

public struct CreatePipeInput: Swift.Equatable {
    /// A description of the pipe.
    public var description: Swift.String?
    /// The state the pipe should be in.
    public var desiredState: PipesClientTypes.RequestedPipeState?
    /// The ARN of the enrichment resource.
    public var enrichment: Swift.String?
    /// The parameters required to set up enrichment on your pipe.
    public var enrichmentParameters: PipesClientTypes.PipeEnrichmentParameters?
    /// The name of the pipe.
    /// This member is required.
    public var name: Swift.String?
    /// The ARN of the role that allows the pipe to send data to the target.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The ARN of the source resource.
    /// This member is required.
    public var source: Swift.String?
    /// The parameters required to set up a source for your pipe.
    public var sourceParameters: PipesClientTypes.PipeSourceParameters?
    /// The list of key-value pairs to associate with the pipe.
    public var tags: [Swift.String:Swift.String]?
    /// The ARN of the target resource.
    /// This member is required.
    public var target: Swift.String?
    /// The parameters required to set up a target for your pipe.
    public var targetParameters: PipesClientTypes.PipeTargetParameters?

    public init (
        description: Swift.String? = nil,
        desiredState: PipesClientTypes.RequestedPipeState? = nil,
        enrichment: Swift.String? = nil,
        enrichmentParameters: PipesClientTypes.PipeEnrichmentParameters? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        source: Swift.String? = nil,
        sourceParameters: PipesClientTypes.PipeSourceParameters? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        target: Swift.String? = nil,
        targetParameters: PipesClientTypes.PipeTargetParameters? = nil
    )
    {
        self.description = description
        self.desiredState = desiredState
        self.enrichment = enrichment
        self.enrichmentParameters = enrichmentParameters
        self.name = name
        self.roleArn = roleArn
        self.source = source
        self.sourceParameters = sourceParameters
        self.tags = tags
        self.target = target
        self.targetParameters = targetParameters
    }
}

struct CreatePipeInputBody: Swift.Equatable {
    let description: Swift.String?
    let desiredState: PipesClientTypes.RequestedPipeState?
    let source: Swift.String?
    let sourceParameters: PipesClientTypes.PipeSourceParameters?
    let enrichment: Swift.String?
    let enrichmentParameters: PipesClientTypes.PipeEnrichmentParameters?
    let target: Swift.String?
    let targetParameters: PipesClientTypes.PipeTargetParameters?
    let roleArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreatePipeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case desiredState = "DesiredState"
        case enrichment = "Enrichment"
        case enrichmentParameters = "EnrichmentParameters"
        case roleArn = "RoleArn"
        case source = "Source"
        case sourceParameters = "SourceParameters"
        case tags = "Tags"
        case target = "Target"
        case targetParameters = "TargetParameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let desiredStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.RequestedPipeState.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let sourceParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeSourceParameters.self, forKey: .sourceParameters)
        sourceParameters = sourceParametersDecoded
        let enrichmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enrichment)
        enrichment = enrichmentDecoded
        let enrichmentParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeEnrichmentParameters.self, forKey: .enrichmentParameters)
        enrichmentParameters = enrichmentParametersDecoded
        let targetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .target)
        target = targetDecoded
        let targetParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetParameters.self, forKey: .targetParameters)
        targetParameters = targetParametersDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreatePipeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePipeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreatePipeOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalException(InternalException)
    case notFoundException(NotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePipeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreatePipeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.creationTime = output.creationTime
            self.currentState = output.currentState
            self.desiredState = output.desiredState
            self.lastModifiedTime = output.lastModifiedTime
            self.name = output.name
        } else {
            self.arn = nil
            self.creationTime = nil
            self.currentState = nil
            self.desiredState = nil
            self.lastModifiedTime = nil
            self.name = nil
        }
    }
}

public struct CreatePipeOutputResponse: Swift.Equatable {
    /// The ARN of the pipe.
    public var arn: Swift.String?
    /// The time the pipe was created.
    public var creationTime: ClientRuntime.Date?
    /// The state the pipe is in.
    public var currentState: PipesClientTypes.PipeState?
    /// The state the pipe should be in.
    public var desiredState: PipesClientTypes.RequestedPipeState?
    /// When the pipe was last updated, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the pipe.
    public var name: Swift.String?

    public init (
        arn: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        currentState: PipesClientTypes.PipeState? = nil,
        desiredState: PipesClientTypes.RequestedPipeState? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.currentState = currentState
        self.desiredState = desiredState
        self.lastModifiedTime = lastModifiedTime
        self.name = name
    }
}

struct CreatePipeOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let name: Swift.String?
    let desiredState: PipesClientTypes.RequestedPipeState?
    let currentState: PipesClientTypes.PipeState?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
}

extension CreatePipeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationTime = "CreationTime"
        case currentState = "CurrentState"
        case desiredState = "DesiredState"
        case lastModifiedTime = "LastModifiedTime"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let desiredStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.RequestedPipeState.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let currentStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeState.self, forKey: .currentState)
        currentState = currentStateDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension PipesClientTypes.DeadLetterConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension PipesClientTypes {
    /// A DeadLetterConfig object that contains information about a dead-letter queue configuration.
    public struct DeadLetterConfig: Swift.Equatable {
        /// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
        public var arn: Swift.String?

        public init (
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension DeletePipeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/v1/pipes/\(name.urlPercentEncoding())"
    }
}

public struct DeletePipeInput: Swift.Equatable {
    /// The name of the pipe.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeletePipeInputBody: Swift.Equatable {
}

extension DeletePipeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeletePipeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePipeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeletePipeOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalException(InternalException)
    case notFoundException(NotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePipeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeletePipeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.creationTime = output.creationTime
            self.currentState = output.currentState
            self.desiredState = output.desiredState
            self.lastModifiedTime = output.lastModifiedTime
            self.name = output.name
        } else {
            self.arn = nil
            self.creationTime = nil
            self.currentState = nil
            self.desiredState = nil
            self.lastModifiedTime = nil
            self.name = nil
        }
    }
}

public struct DeletePipeOutputResponse: Swift.Equatable {
    /// The ARN of the pipe.
    public var arn: Swift.String?
    /// The time the pipe was created.
    public var creationTime: ClientRuntime.Date?
    /// The state the pipe is in.
    public var currentState: PipesClientTypes.PipeState?
    /// The state the pipe should be in.
    public var desiredState: PipesClientTypes.RequestedPipeStateDescribeResponse?
    /// When the pipe was last updated, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the pipe.
    public var name: Swift.String?

    public init (
        arn: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        currentState: PipesClientTypes.PipeState? = nil,
        desiredState: PipesClientTypes.RequestedPipeStateDescribeResponse? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.currentState = currentState
        self.desiredState = desiredState
        self.lastModifiedTime = lastModifiedTime
        self.name = name
    }
}

struct DeletePipeOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let name: Swift.String?
    let desiredState: PipesClientTypes.RequestedPipeStateDescribeResponse?
    let currentState: PipesClientTypes.PipeState?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
}

extension DeletePipeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationTime = "CreationTime"
        case currentState = "CurrentState"
        case desiredState = "DesiredState"
        case lastModifiedTime = "LastModifiedTime"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let desiredStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.RequestedPipeStateDescribeResponse.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let currentStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeState.self, forKey: .currentState)
        currentState = currentStateDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension DescribePipeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/v1/pipes/\(name.urlPercentEncoding())"
    }
}

public struct DescribePipeInput: Swift.Equatable {
    /// The name of the pipe.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DescribePipeInputBody: Swift.Equatable {
}

extension DescribePipeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribePipeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePipeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribePipeOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case notFoundException(NotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePipeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribePipeOutputResponse(arn: \(Swift.String(describing: arn)), creationTime: \(Swift.String(describing: creationTime)), currentState: \(Swift.String(describing: currentState)), desiredState: \(Swift.String(describing: desiredState)), enrichment: \(Swift.String(describing: enrichment)), enrichmentParameters: \(Swift.String(describing: enrichmentParameters)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), name: \(Swift.String(describing: name)), roleArn: \(Swift.String(describing: roleArn)), source: \(Swift.String(describing: source)), sourceParameters: \(Swift.String(describing: sourceParameters)), stateReason: \(Swift.String(describing: stateReason)), tags: \(Swift.String(describing: tags)), target: \(Swift.String(describing: target)), targetParameters: \(Swift.String(describing: targetParameters)), description: \"CONTENT_REDACTED\")"}
}

extension DescribePipeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribePipeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.creationTime = output.creationTime
            self.currentState = output.currentState
            self.description = output.description
            self.desiredState = output.desiredState
            self.enrichment = output.enrichment
            self.enrichmentParameters = output.enrichmentParameters
            self.lastModifiedTime = output.lastModifiedTime
            self.name = output.name
            self.roleArn = output.roleArn
            self.source = output.source
            self.sourceParameters = output.sourceParameters
            self.stateReason = output.stateReason
            self.tags = output.tags
            self.target = output.target
            self.targetParameters = output.targetParameters
        } else {
            self.arn = nil
            self.creationTime = nil
            self.currentState = nil
            self.description = nil
            self.desiredState = nil
            self.enrichment = nil
            self.enrichmentParameters = nil
            self.lastModifiedTime = nil
            self.name = nil
            self.roleArn = nil
            self.source = nil
            self.sourceParameters = nil
            self.stateReason = nil
            self.tags = nil
            self.target = nil
            self.targetParameters = nil
        }
    }
}

public struct DescribePipeOutputResponse: Swift.Equatable {
    /// The ARN of the pipe.
    public var arn: Swift.String?
    /// The time the pipe was created.
    public var creationTime: ClientRuntime.Date?
    /// The state the pipe is in.
    public var currentState: PipesClientTypes.PipeState?
    /// A description of the pipe.
    public var description: Swift.String?
    /// The state the pipe should be in.
    public var desiredState: PipesClientTypes.RequestedPipeStateDescribeResponse?
    /// The ARN of the enrichment resource.
    public var enrichment: Swift.String?
    /// The parameters required to set up enrichment on your pipe.
    public var enrichmentParameters: PipesClientTypes.PipeEnrichmentParameters?
    /// When the pipe was last updated, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the pipe.
    public var name: Swift.String?
    /// The ARN of the role that allows the pipe to send data to the target.
    public var roleArn: Swift.String?
    /// The ARN of the source resource.
    public var source: Swift.String?
    /// The parameters required to set up a source for your pipe.
    public var sourceParameters: PipesClientTypes.PipeSourceParameters?
    /// The reason the pipe is in its current state.
    public var stateReason: Swift.String?
    /// The list of key-value pairs to associate with the pipe.
    public var tags: [Swift.String:Swift.String]?
    /// The ARN of the target resource.
    public var target: Swift.String?
    /// The parameters required to set up a target for your pipe.
    public var targetParameters: PipesClientTypes.PipeTargetParameters?

    public init (
        arn: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        currentState: PipesClientTypes.PipeState? = nil,
        description: Swift.String? = nil,
        desiredState: PipesClientTypes.RequestedPipeStateDescribeResponse? = nil,
        enrichment: Swift.String? = nil,
        enrichmentParameters: PipesClientTypes.PipeEnrichmentParameters? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        source: Swift.String? = nil,
        sourceParameters: PipesClientTypes.PipeSourceParameters? = nil,
        stateReason: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        target: Swift.String? = nil,
        targetParameters: PipesClientTypes.PipeTargetParameters? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.currentState = currentState
        self.description = description
        self.desiredState = desiredState
        self.enrichment = enrichment
        self.enrichmentParameters = enrichmentParameters
        self.lastModifiedTime = lastModifiedTime
        self.name = name
        self.roleArn = roleArn
        self.source = source
        self.sourceParameters = sourceParameters
        self.stateReason = stateReason
        self.tags = tags
        self.target = target
        self.targetParameters = targetParameters
    }
}

struct DescribePipeOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let desiredState: PipesClientTypes.RequestedPipeStateDescribeResponse?
    let currentState: PipesClientTypes.PipeState?
    let stateReason: Swift.String?
    let source: Swift.String?
    let sourceParameters: PipesClientTypes.PipeSourceParameters?
    let enrichment: Swift.String?
    let enrichmentParameters: PipesClientTypes.PipeEnrichmentParameters?
    let target: Swift.String?
    let targetParameters: PipesClientTypes.PipeTargetParameters?
    let roleArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
}

extension DescribePipeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationTime = "CreationTime"
        case currentState = "CurrentState"
        case description = "Description"
        case desiredState = "DesiredState"
        case enrichment = "Enrichment"
        case enrichmentParameters = "EnrichmentParameters"
        case lastModifiedTime = "LastModifiedTime"
        case name = "Name"
        case roleArn = "RoleArn"
        case source = "Source"
        case sourceParameters = "SourceParameters"
        case stateReason = "StateReason"
        case tags = "Tags"
        case target = "Target"
        case targetParameters = "TargetParameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let desiredStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.RequestedPipeStateDescribeResponse.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let currentStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeState.self, forKey: .currentState)
        currentState = currentStateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let sourceParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeSourceParameters.self, forKey: .sourceParameters)
        sourceParameters = sourceParametersDecoded
        let enrichmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enrichment)
        enrichment = enrichmentDecoded
        let enrichmentParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeEnrichmentParameters.self, forKey: .enrichmentParameters)
        enrichmentParameters = enrichmentParametersDecoded
        let targetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .target)
        target = targetDecoded
        let targetParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetParameters.self, forKey: .targetParameters)
        targetParameters = targetParametersDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension PipesClientTypes {
    public enum DynamoDBStreamStartPosition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case latest
        case trimHorizon
        case sdkUnknown(Swift.String)

        public static var allCases: [DynamoDBStreamStartPosition] {
            return [
                .latest,
                .trimHorizon,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .latest: return "LATEST"
            case .trimHorizon: return "TRIM_HORIZON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DynamoDBStreamStartPosition(rawValue: rawValue) ?? DynamoDBStreamStartPosition.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes.EcsContainerOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command = "Command"
        case cpu = "Cpu"
        case environment = "Environment"
        case environmentFiles = "EnvironmentFiles"
        case memory = "Memory"
        case memoryReservation = "MemoryReservation"
        case name = "Name"
        case resourceRequirements = "ResourceRequirements"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for string0 in command {
                try commandContainer.encode(string0)
            }
        }
        if let cpu = self.cpu {
            try encodeContainer.encode(cpu, forKey: .cpu)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for ecsenvironmentvariable0 in environment {
                try environmentContainer.encode(ecsenvironmentvariable0)
            }
        }
        if let environmentFiles = environmentFiles {
            var environmentFilesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environmentFiles)
            for ecsenvironmentfile0 in environmentFiles {
                try environmentFilesContainer.encode(ecsenvironmentfile0)
            }
        }
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let memoryReservation = self.memoryReservation {
            try encodeContainer.encode(memoryReservation, forKey: .memoryReservation)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceRequirements = resourceRequirements {
            var resourceRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRequirements)
            for ecsresourcerequirement0 in resourceRequirements {
                try resourceRequirementsContainer.encode(ecsresourcerequirement0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let cpuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpu)
        cpu = cpuDecoded
        let environmentContainer = try containerValues.decodeIfPresent([PipesClientTypes.EcsEnvironmentVariable?].self, forKey: .environment)
        var environmentDecoded0:[PipesClientTypes.EcsEnvironmentVariable]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [PipesClientTypes.EcsEnvironmentVariable]()
            for structure0 in environmentContainer {
                if let structure0 = structure0 {
                    environmentDecoded0?.append(structure0)
                }
            }
        }
        environment = environmentDecoded0
        let environmentFilesContainer = try containerValues.decodeIfPresent([PipesClientTypes.EcsEnvironmentFile?].self, forKey: .environmentFiles)
        var environmentFilesDecoded0:[PipesClientTypes.EcsEnvironmentFile]? = nil
        if let environmentFilesContainer = environmentFilesContainer {
            environmentFilesDecoded0 = [PipesClientTypes.EcsEnvironmentFile]()
            for structure0 in environmentFilesContainer {
                if let structure0 = structure0 {
                    environmentFilesDecoded0?.append(structure0)
                }
            }
        }
        environmentFiles = environmentFilesDecoded0
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memory)
        memory = memoryDecoded
        let memoryReservationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memoryReservation)
        memoryReservation = memoryReservationDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourceRequirementsContainer = try containerValues.decodeIfPresent([PipesClientTypes.EcsResourceRequirement?].self, forKey: .resourceRequirements)
        var resourceRequirementsDecoded0:[PipesClientTypes.EcsResourceRequirement]? = nil
        if let resourceRequirementsContainer = resourceRequirementsContainer {
            resourceRequirementsDecoded0 = [PipesClientTypes.EcsResourceRequirement]()
            for structure0 in resourceRequirementsContainer {
                if let structure0 = structure0 {
                    resourceRequirementsDecoded0?.append(structure0)
                }
            }
        }
        resourceRequirements = resourceRequirementsDecoded0
    }
}

extension PipesClientTypes {
    /// The overrides that are sent to a container. An empty container override can be passed in. An example of an empty container override is {"containerOverrides": [ ] }. If a non-empty container override is specified, the name parameter must be included.
    public struct EcsContainerOverride: Swift.Equatable {
        /// The command to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
        public var command: [Swift.String]?
        /// The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
        public var cpu: Swift.Int?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name.
        public var environment: [PipesClientTypes.EcsEnvironmentVariable]?
        /// A list of files containing the environment variables to pass to a container, instead of the value from the container definition.
        public var environmentFiles: [PipesClientTypes.EcsEnvironmentFile]?
        /// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
        public var memory: Swift.Int?
        /// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
        public var memoryReservation: Swift.Int?
        /// The name of the container that receives the override. This parameter is required if any override is specified.
        public var name: Swift.String?
        /// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU.
        public var resourceRequirements: [PipesClientTypes.EcsResourceRequirement]?

        public init (
            command: [Swift.String]? = nil,
            cpu: Swift.Int? = nil,
            environment: [PipesClientTypes.EcsEnvironmentVariable]? = nil,
            environmentFiles: [PipesClientTypes.EcsEnvironmentFile]? = nil,
            memory: Swift.Int? = nil,
            memoryReservation: Swift.Int? = nil,
            name: Swift.String? = nil,
            resourceRequirements: [PipesClientTypes.EcsResourceRequirement]? = nil
        )
        {
            self.command = command
            self.cpu = cpu
            self.environment = environment
            self.environmentFiles = environmentFiles
            self.memory = memory
            self.memoryReservation = memoryReservation
            self.name = name
            self.resourceRequirements = resourceRequirements
        }
    }

}

extension PipesClientTypes.EcsEnvironmentFile: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(PipesClientTypes.EcsEnvironmentFileType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension PipesClientTypes {
    /// A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a .env file extension. Each line in an environment file should contain an environment variable in VARIABLE=VALUE format. Lines beginning with # are treated as comments and are ignored. For more information about the environment variable file syntax, see [Declare default environment variables in file](https://docs.docker.com/compose/env-file/). If there are environment variables specified using the environment parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Specifying environment variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html) in the Amazon Elastic Container Service Developer Guide. This parameter is only supported for tasks hosted on Fargate using the following platform versions:
    ///
    /// * Linux platform version 1.4.0 or later.
    ///
    /// * Windows platform version 1.0.0 or later.
    public struct EcsEnvironmentFile: Swift.Equatable {
        /// The file type to use. The only supported value is s3.
        /// This member is required.
        public var type: PipesClientTypes.EcsEnvironmentFileType?
        /// The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.
        /// This member is required.
        public var value: Swift.String?

        public init (
            type: PipesClientTypes.EcsEnvironmentFileType? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension PipesClientTypes {
    public enum EcsEnvironmentFileType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [EcsEnvironmentFileType] {
            return [
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .s3: return "s3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EcsEnvironmentFileType(rawValue: rawValue) ?? EcsEnvironmentFileType.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes.EcsEnvironmentVariable: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension PipesClientTypes {
    /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name.
    public struct EcsEnvironmentVariable: Swift.Equatable {
        /// The name of the key-value pair. For environment variables, this is the name of the environment variable.
        public var name: Swift.String?
        /// The value of the key-value pair. For environment variables, this is the value of the environment variable.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension PipesClientTypes.EcsEphemeralStorage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sizeInGiB
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if sizeInGiB != 0 {
            try encodeContainer.encode(sizeInGiB, forKey: .sizeInGiB)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeInGiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGiB) ?? 0
        sizeInGiB = sizeInGiBDecoded
    }
}

extension PipesClientTypes {
    /// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate. For more information, see [Fargate task storage](https://docs.aws.amazon.com/AmazonECS/latest/userguide/using_data_volumes.html) in the Amazon ECS User Guide for Fargate. This parameter is only supported for tasks hosted on Fargate using Linux platform version 1.4.0 or later. This parameter is not supported for Windows containers on Fargate.
    public struct EcsEphemeralStorage: Swift.Equatable {
        /// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
        /// This member is required.
        public var sizeInGiB: Swift.Int

        public init (
            sizeInGiB: Swift.Int = 0
        )
        {
            self.sizeInGiB = sizeInGiB
        }
    }

}

extension PipesClientTypes.EcsInferenceAcceleratorOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceName
        case deviceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceName = self.deviceName {
            try encodeContainer.encode(deviceName, forKey: .deviceName)
        }
        if let deviceType = self.deviceType {
            try encodeContainer.encode(deviceType, forKey: .deviceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let deviceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceType)
        deviceType = deviceTypeDecoded
    }
}

extension PipesClientTypes {
    /// Details on an Elastic Inference accelerator task override. This parameter is used to override the Elastic Inference accelerator specified in the task definition. For more information, see [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/userguide/ecs-inference.html) in the Amazon Elastic Container Service Developer Guide.
    public struct EcsInferenceAcceleratorOverride: Swift.Equatable {
        /// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
        public var deviceName: Swift.String?
        /// The Elastic Inference accelerator type to use.
        public var deviceType: Swift.String?

        public init (
            deviceName: Swift.String? = nil,
            deviceType: Swift.String? = nil
        )
        {
            self.deviceName = deviceName
            self.deviceType = deviceType
        }
    }

}

extension PipesClientTypes.EcsResourceRequirement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(PipesClientTypes.EcsResourceRequirementType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension PipesClientTypes {
    /// The type and amount of a resource to assign to a container. The supported resource types are GPUs and Elastic Inference accelerators. For more information, see [Working with GPUs on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html) or [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the Amazon Elastic Container Service Developer Guide
    public struct EcsResourceRequirement: Swift.Equatable {
        /// The type of resource to assign to a container. The supported values are GPU or InferenceAccelerator.
        /// This member is required.
        public var type: PipesClientTypes.EcsResourceRequirementType?
        /// The value for the specified resource type. If the GPU type is used, the value is the number of physical GPUs the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on. If the InferenceAccelerator type is used, the value matches the deviceName for an InferenceAccelerator specified in a task definition.
        /// This member is required.
        public var value: Swift.String?

        public init (
            type: PipesClientTypes.EcsResourceRequirementType? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension PipesClientTypes {
    public enum EcsResourceRequirementType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gpu
        case inferenceaccelerator
        case sdkUnknown(Swift.String)

        public static var allCases: [EcsResourceRequirementType] {
            return [
                .gpu,
                .inferenceaccelerator,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gpu: return "GPU"
            case .inferenceaccelerator: return "InferenceAccelerator"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EcsResourceRequirementType(rawValue: rawValue) ?? EcsResourceRequirementType.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes.EcsTaskOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerOverrides = "ContainerOverrides"
        case cpu = "Cpu"
        case ephemeralStorage = "EphemeralStorage"
        case executionRoleArn = "ExecutionRoleArn"
        case inferenceAcceleratorOverrides = "InferenceAcceleratorOverrides"
        case memory = "Memory"
        case taskRoleArn = "TaskRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerOverrides = containerOverrides {
            var containerOverridesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerOverrides)
            for ecscontaineroverride0 in containerOverrides {
                try containerOverridesContainer.encode(ecscontaineroverride0)
            }
        }
        if let cpu = self.cpu {
            try encodeContainer.encode(cpu, forKey: .cpu)
        }
        if let ephemeralStorage = self.ephemeralStorage {
            try encodeContainer.encode(ephemeralStorage, forKey: .ephemeralStorage)
        }
        if let executionRoleArn = self.executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let inferenceAcceleratorOverrides = inferenceAcceleratorOverrides {
            var inferenceAcceleratorOverridesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inferenceAcceleratorOverrides)
            for ecsinferenceacceleratoroverride0 in inferenceAcceleratorOverrides {
                try inferenceAcceleratorOverridesContainer.encode(ecsinferenceacceleratoroverride0)
            }
        }
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let taskRoleArn = self.taskRoleArn {
            try encodeContainer.encode(taskRoleArn, forKey: .taskRoleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerOverridesContainer = try containerValues.decodeIfPresent([PipesClientTypes.EcsContainerOverride?].self, forKey: .containerOverrides)
        var containerOverridesDecoded0:[PipesClientTypes.EcsContainerOverride]? = nil
        if let containerOverridesContainer = containerOverridesContainer {
            containerOverridesDecoded0 = [PipesClientTypes.EcsContainerOverride]()
            for structure0 in containerOverridesContainer {
                if let structure0 = structure0 {
                    containerOverridesDecoded0?.append(structure0)
                }
            }
        }
        containerOverrides = containerOverridesDecoded0
        let cpuDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cpu)
        cpu = cpuDecoded
        let ephemeralStorageDecoded = try containerValues.decodeIfPresent(PipesClientTypes.EcsEphemeralStorage.self, forKey: .ephemeralStorage)
        ephemeralStorage = ephemeralStorageDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let inferenceAcceleratorOverridesContainer = try containerValues.decodeIfPresent([PipesClientTypes.EcsInferenceAcceleratorOverride?].self, forKey: .inferenceAcceleratorOverrides)
        var inferenceAcceleratorOverridesDecoded0:[PipesClientTypes.EcsInferenceAcceleratorOverride]? = nil
        if let inferenceAcceleratorOverridesContainer = inferenceAcceleratorOverridesContainer {
            inferenceAcceleratorOverridesDecoded0 = [PipesClientTypes.EcsInferenceAcceleratorOverride]()
            for structure0 in inferenceAcceleratorOverridesContainer {
                if let structure0 = structure0 {
                    inferenceAcceleratorOverridesDecoded0?.append(structure0)
                }
            }
        }
        inferenceAcceleratorOverrides = inferenceAcceleratorOverridesDecoded0
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memory)
        memory = memoryDecoded
        let taskRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskRoleArn)
        taskRoleArn = taskRoleArnDecoded
    }
}

extension PipesClientTypes {
    /// The overrides that are associated with a task.
    public struct EcsTaskOverride: Swift.Equatable {
        /// One or more container overrides that are sent to a task.
        public var containerOverrides: [PipesClientTypes.EcsContainerOverride]?
        /// The cpu override for the task.
        public var cpu: Swift.String?
        /// The ephemeral storage setting override for the task. This parameter is only supported for tasks hosted on Fargate that use the following platform versions:
        ///
        /// * Linux platform version 1.4.0 or later.
        ///
        /// * Windows platform version 1.0.0 or later.
        public var ephemeralStorage: PipesClientTypes.EcsEphemeralStorage?
        /// The Amazon Resource Name (ARN) of the task execution IAM role override for the task. For more information, see [Amazon ECS task execution IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html) in the Amazon Elastic Container Service Developer Guide.
        public var executionRoleArn: Swift.String?
        /// The Elastic Inference accelerator override for the task.
        public var inferenceAcceleratorOverrides: [PipesClientTypes.EcsInferenceAcceleratorOverride]?
        /// The memory override for the task.
        public var memory: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role. For more information, see [IAM Role for Tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the Amazon Elastic Container Service Developer Guide.
        public var taskRoleArn: Swift.String?

        public init (
            containerOverrides: [PipesClientTypes.EcsContainerOverride]? = nil,
            cpu: Swift.String? = nil,
            ephemeralStorage: PipesClientTypes.EcsEphemeralStorage? = nil,
            executionRoleArn: Swift.String? = nil,
            inferenceAcceleratorOverrides: [PipesClientTypes.EcsInferenceAcceleratorOverride]? = nil,
            memory: Swift.String? = nil,
            taskRoleArn: Swift.String? = nil
        )
        {
            self.containerOverrides = containerOverrides
            self.cpu = cpu
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.inferenceAcceleratorOverrides = inferenceAcceleratorOverrides
            self.memory = memory
            self.taskRoleArn = taskRoleArn
        }
    }

}

extension PipesClientTypes.Filter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pattern = "Pattern"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pattern = self.pattern {
            try encodeContainer.encode(pattern, forKey: .pattern)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let patternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pattern)
        pattern = patternDecoded
    }
}

extension PipesClientTypes.Filter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Filter(pattern: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// Filter events using an event pattern. For more information, see [Events and Event Patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html) in the Amazon EventBridge User Guide.
    public struct Filter: Swift.Equatable {
        /// The event pattern.
        public var pattern: Swift.String?

        public init (
            pattern: Swift.String? = nil
        )
        {
            self.pattern = pattern
        }
    }

}

extension PipesClientTypes.FilterCriteria: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filter0 in filters {
                try filtersContainer.encode(filter0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([PipesClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[PipesClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [PipesClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
    }
}

extension PipesClientTypes {
    /// The collection of event patterns used to filter events. For more information, see [Events and Event Patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html) in the Amazon EventBridge User Guide.
    public struct FilterCriteria: Swift.Equatable {
        /// The event patterns.
        public var filters: [PipesClientTypes.Filter]?

        public init (
            filters: [PipesClientTypes.Filter]? = nil
        )
        {
            self.filters = filters
        }
    }

}

extension InternalException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            self.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        } else {
            self.retryAfterSeconds = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception occurs due to unexpected causes.
public struct InternalException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// This member is required.
    public var message: Swift.String?
    /// The number of seconds to wait before retrying the action that caused the exception.
    public var retryAfterSeconds: Swift.Int?

    public init (
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.Int? = nil
    )
    {
        self.message = message
        self.retryAfterSeconds = retryAfterSeconds
    }
}

struct InternalExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PipesClientTypes {
    public enum KinesisStreamStartPosition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case atTimestamp
        case latest
        case trimHorizon
        case sdkUnknown(Swift.String)

        public static var allCases: [KinesisStreamStartPosition] {
            return [
                .atTimestamp,
                .latest,
                .trimHorizon,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .atTimestamp: return "AT_TIMESTAMP"
            case .latest: return "LATEST"
            case .trimHorizon: return "TRIM_HORIZON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KinesisStreamStartPosition(rawValue: rawValue) ?? KinesisStreamStartPosition.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes {
    public enum LaunchType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ec2
        case external
        case fargate
        case sdkUnknown(Swift.String)

        public static var allCases: [LaunchType] {
            return [
                .ec2,
                .external,
                .fargate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .external: return "EXTERNAL"
            case .fargate: return "FARGATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LaunchType(rawValue: rawValue) ?? LaunchType.sdkUnknown(rawValue)
        }
    }
}

extension ListPipesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPipesInput(currentState: \(Swift.String(describing: currentState)), desiredState: \(Swift.String(describing: desiredState)), limit: \(Swift.String(describing: limit)), namePrefix: \(Swift.String(describing: namePrefix)), sourcePrefix: \(Swift.String(describing: sourcePrefix)), targetPrefix: \(Swift.String(describing: targetPrefix)), nextToken: \"CONTENT_REDACTED\")"}
}

extension ListPipesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let namePrefix = namePrefix {
                let namePrefixQueryItem = ClientRuntime.URLQueryItem(name: "NamePrefix".urlPercentEncoding(), value: Swift.String(namePrefix).urlPercentEncoding())
                items.append(namePrefixQueryItem)
            }
            if let targetPrefix = targetPrefix {
                let targetPrefixQueryItem = ClientRuntime.URLQueryItem(name: "TargetPrefix".urlPercentEncoding(), value: Swift.String(targetPrefix).urlPercentEncoding())
                items.append(targetPrefixQueryItem)
            }
            if let sourcePrefix = sourcePrefix {
                let sourcePrefixQueryItem = ClientRuntime.URLQueryItem(name: "SourcePrefix".urlPercentEncoding(), value: Swift.String(sourcePrefix).urlPercentEncoding())
                items.append(sourcePrefixQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let desiredState = desiredState {
                let desiredStateQueryItem = ClientRuntime.URLQueryItem(name: "DesiredState".urlPercentEncoding(), value: Swift.String(desiredState.rawValue).urlPercentEncoding())
                items.append(desiredStateQueryItem)
            }
            if let currentState = currentState {
                let currentStateQueryItem = ClientRuntime.URLQueryItem(name: "CurrentState".urlPercentEncoding(), value: Swift.String(currentState.rawValue).urlPercentEncoding())
                items.append(currentStateQueryItem)
            }
            if let limit = limit {
                let limitQueryItem = ClientRuntime.URLQueryItem(name: "Limit".urlPercentEncoding(), value: Swift.String(limit).urlPercentEncoding())
                items.append(limitQueryItem)
            }
            return items
        }
    }
}

extension ListPipesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/pipes"
    }
}

public struct ListPipesInput: Swift.Equatable {
    /// The state the pipe is in.
    public var currentState: PipesClientTypes.PipeState?
    /// The state the pipe should be in.
    public var desiredState: PipesClientTypes.RequestedPipeState?
    /// The maximum number of pipes to include in the response.
    public var limit: Swift.Int?
    /// A value that will return a subset of the pipes associated with this account. For example, "NamePrefix": "ABC" will return all endpoints with "ABC" in the name.
    public var namePrefix: Swift.String?
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?
    /// The prefix matching the pipe source.
    public var sourcePrefix: Swift.String?
    /// The prefix matching the pipe target.
    public var targetPrefix: Swift.String?

    public init (
        currentState: PipesClientTypes.PipeState? = nil,
        desiredState: PipesClientTypes.RequestedPipeState? = nil,
        limit: Swift.Int? = nil,
        namePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sourcePrefix: Swift.String? = nil,
        targetPrefix: Swift.String? = nil
    )
    {
        self.currentState = currentState
        self.desiredState = desiredState
        self.limit = limit
        self.namePrefix = namePrefix
        self.nextToken = nextToken
        self.sourcePrefix = sourcePrefix
        self.targetPrefix = targetPrefix
    }
}

struct ListPipesInputBody: Swift.Equatable {
}

extension ListPipesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListPipesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPipesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListPipesOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPipesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPipesOutputResponse(pipes: \(Swift.String(describing: pipes)), nextToken: \"CONTENT_REDACTED\")"}
}

extension ListPipesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListPipesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.pipes = output.pipes
        } else {
            self.nextToken = nil
            self.pipes = nil
        }
    }
}

public struct ListPipesOutputResponse: Swift.Equatable {
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?
    /// The pipes returned by the call.
    public var pipes: [PipesClientTypes.Pipe]?

    public init (
        nextToken: Swift.String? = nil,
        pipes: [PipesClientTypes.Pipe]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipes = pipes
    }
}

struct ListPipesOutputResponseBody: Swift.Equatable {
    let pipes: [PipesClientTypes.Pipe]?
    let nextToken: Swift.String?
}

extension ListPipesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case pipes = "Pipes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipesContainer = try containerValues.decodeIfPresent([PipesClientTypes.Pipe?].self, forKey: .pipes)
        var pipesDecoded0:[PipesClientTypes.Pipe]? = nil
        if let pipesContainer = pipesContainer {
            pipesDecoded0 = [PipesClientTypes.Pipe]()
            for structure0 in pipesContainer {
                if let structure0 = structure0 {
                    pipesDecoded0?.append(structure0)
                }
            }
        }
        pipes = pipesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The ARN of the pipe for which you want to view tags.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case notFoundException(NotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The list of key-value pairs to associate with the pipe.
    public var tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PipesClientTypes.MQBrokerAccessCredentials: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case basicauth = "BasicAuth"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .basicauth(basicauth):
                try container.encode(basicauth, forKey: .basicauth)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let basicauthDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .basicauth)
        if let basicauth = basicauthDecoded {
            self = .basicauth(basicauth)
            return
        }
        self = .sdkUnknown("")
    }
}

extension PipesClientTypes {
    /// The Secrets Manager secret that stores your broker credentials.
    public enum MQBrokerAccessCredentials: Swift.Equatable, Swift.Hashable {
        /// The ARN of the Secrets Manager secret.
        case basicauth(Swift.String)
        case sdkUnknown(Swift.String)
    }

}

extension PipesClientTypes.MSKAccessCredentials: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientcertificatetlsauth = "ClientCertificateTlsAuth"
        case saslscram512auth = "SaslScram512Auth"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .clientcertificatetlsauth(clientcertificatetlsauth):
                try container.encode(clientcertificatetlsauth, forKey: .clientcertificatetlsauth)
            case let .saslscram512auth(saslscram512auth):
                try container.encode(saslscram512auth, forKey: .saslscram512auth)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let saslscram512authDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .saslscram512auth)
        if let saslscram512auth = saslscram512authDecoded {
            self = .saslscram512auth(saslscram512auth)
            return
        }
        let clientcertificatetlsauthDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .clientcertificatetlsauth)
        if let clientcertificatetlsauth = clientcertificatetlsauthDecoded {
            self = .clientcertificatetlsauth(clientcertificatetlsauth)
            return
        }
        self = .sdkUnknown("")
    }
}

extension PipesClientTypes {
    /// The Secrets Manager secret that stores your stream credentials.
    public enum MSKAccessCredentials: Swift.Equatable, Swift.Hashable {
        /// The ARN of the Secrets Manager secret.
        case saslscram512auth(Swift.String)
        /// The ARN of the Secrets Manager secret.
        case clientcertificatetlsauth(Swift.String)
        case sdkUnknown(Swift.String)
    }

}

extension PipesClientTypes {
    public enum MSKStartPosition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case latest
        case trimHorizon
        case sdkUnknown(Swift.String)

        public static var allCases: [MSKStartPosition] {
            return [
                .latest,
                .trimHorizon,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .latest: return "LATEST"
            case .trimHorizon: return "TRIM_HORIZON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MSKStartPosition(rawValue: rawValue) ?? MSKStartPosition.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes.NetworkConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsvpcConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsvpcConfiguration = self.awsvpcConfiguration {
            try encodeContainer.encode(awsvpcConfiguration, forKey: .awsvpcConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let awsvpcConfigurationDecoded = try containerValues.decodeIfPresent(PipesClientTypes.AwsVpcConfiguration.self, forKey: .awsvpcConfiguration)
        awsvpcConfiguration = awsvpcConfigurationDecoded
    }
}

extension PipesClientTypes {
    /// This structure specifies the network configuration for an Amazon ECS task.
    public struct NetworkConfiguration: Swift.Equatable {
        /// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode.
        public var awsvpcConfiguration: PipesClientTypes.AwsVpcConfiguration?

        public init (
            awsvpcConfiguration: PipesClientTypes.AwsVpcConfiguration? = nil
        )
        {
            self.awsvpcConfiguration = awsvpcConfiguration
        }
    }

}

extension NotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An entity that you specified does not exist.
public struct NotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PipesClientTypes {
    public enum OnPartialBatchItemFailureStreams: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case automaticBisect
        case sdkUnknown(Swift.String)

        public static var allCases: [OnPartialBatchItemFailureStreams] {
            return [
                .automaticBisect,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .automaticBisect: return "AUTOMATIC_BISECT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OnPartialBatchItemFailureStreams(rawValue: rawValue) ?? OnPartialBatchItemFailureStreams.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes.Pipe: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationTime = "CreationTime"
        case currentState = "CurrentState"
        case desiredState = "DesiredState"
        case enrichment = "Enrichment"
        case lastModifiedTime = "LastModifiedTime"
        case name = "Name"
        case source = "Source"
        case stateReason = "StateReason"
        case target = "Target"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let currentState = self.currentState {
            try encodeContainer.encode(currentState.rawValue, forKey: .currentState)
        }
        if let desiredState = self.desiredState {
            try encodeContainer.encode(desiredState.rawValue, forKey: .desiredState)
        }
        if let enrichment = self.enrichment {
            try encodeContainer.encode(enrichment, forKey: .enrichment)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encodeTimestamp(lastModifiedTime, format: .epochSeconds, forKey: .lastModifiedTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let source = self.source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let stateReason = self.stateReason {
            try encodeContainer.encode(stateReason, forKey: .stateReason)
        }
        if let target = self.target {
            try encodeContainer.encode(target, forKey: .target)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let desiredStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.RequestedPipeState.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let currentStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeState.self, forKey: .currentState)
        currentState = currentStateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let targetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .target)
        target = targetDecoded
        let enrichmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enrichment)
        enrichment = enrichmentDecoded
    }
}

extension PipesClientTypes {
    /// An object that represents a pipe. Amazon EventBridgePipes connect event sources to targets and reduces the need for specialized knowledge and integration code.
    public struct Pipe: Swift.Equatable {
        /// The ARN of the pipe.
        public var arn: Swift.String?
        /// The time the pipe was created.
        public var creationTime: ClientRuntime.Date?
        /// The state the pipe is in.
        public var currentState: PipesClientTypes.PipeState?
        /// The state the pipe should be in.
        public var desiredState: PipesClientTypes.RequestedPipeState?
        /// The ARN of the enrichment resource.
        public var enrichment: Swift.String?
        /// When the pipe was last updated, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
        public var lastModifiedTime: ClientRuntime.Date?
        /// The name of the pipe.
        public var name: Swift.String?
        /// The ARN of the source resource.
        public var source: Swift.String?
        /// The reason the pipe is in its current state.
        public var stateReason: Swift.String?
        /// The ARN of the target resource.
        public var target: Swift.String?

        public init (
            arn: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            currentState: PipesClientTypes.PipeState? = nil,
            desiredState: PipesClientTypes.RequestedPipeState? = nil,
            enrichment: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            source: Swift.String? = nil,
            stateReason: Swift.String? = nil,
            target: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.currentState = currentState
            self.desiredState = desiredState
            self.enrichment = enrichment
            self.lastModifiedTime = lastModifiedTime
            self.name = name
            self.source = source
            self.stateReason = stateReason
            self.target = target
        }
    }

}

extension PipesClientTypes.PipeEnrichmentHttpParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case headerParameters = "HeaderParameters"
        case pathParameterValues = "PathParameterValues"
        case queryStringParameters = "QueryStringParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let headerParameters = headerParameters {
            var headerParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .headerParameters)
            for (dictKey0, headerParametersMap0) in headerParameters {
                try headerParametersContainer.encode(headerParametersMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let pathParameterValues = pathParameterValues {
            var pathParameterValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pathParameterValues)
            for pathparameter0 in pathParameterValues {
                try pathParameterValuesContainer.encode(pathparameter0)
            }
        }
        if let queryStringParameters = queryStringParameters {
            var queryStringParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .queryStringParameters)
            for (dictKey0, queryStringParametersMap0) in queryStringParameters {
                try queryStringParametersContainer.encode(queryStringParametersMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathParameterValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .pathParameterValues)
        var pathParameterValuesDecoded0:[Swift.String]? = nil
        if let pathParameterValuesContainer = pathParameterValuesContainer {
            pathParameterValuesDecoded0 = [Swift.String]()
            for string0 in pathParameterValuesContainer {
                if let string0 = string0 {
                    pathParameterValuesDecoded0?.append(string0)
                }
            }
        }
        pathParameterValues = pathParameterValuesDecoded0
        let headerParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .headerParameters)
        var headerParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let headerParametersContainer = headerParametersContainer {
            headerParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, headervalue0) in headerParametersContainer {
                if let headervalue0 = headervalue0 {
                    headerParametersDecoded0?[key0] = headervalue0
                }
            }
        }
        headerParameters = headerParametersDecoded0
        let queryStringParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .queryStringParameters)
        var queryStringParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let queryStringParametersContainer = queryStringParametersContainer {
            queryStringParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, querystringvalue0) in queryStringParametersContainer {
                if let querystringvalue0 = querystringvalue0 {
                    queryStringParametersDecoded0?[key0] = querystringvalue0
                }
            }
        }
        queryStringParameters = queryStringParametersDecoded0
    }
}

extension PipesClientTypes {
    /// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. In the latter case, these are merged with any InvocationParameters specified on the Connection, with any values from the Connection taking precedence.
    public struct PipeEnrichmentHttpParameters: Swift.Equatable {
        /// The headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
        public var headerParameters: [Swift.String:Swift.String]?
        /// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
        public var pathParameterValues: [Swift.String]?
        /// The query string keys/values that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
        public var queryStringParameters: [Swift.String:Swift.String]?

        public init (
            headerParameters: [Swift.String:Swift.String]? = nil,
            pathParameterValues: [Swift.String]? = nil,
            queryStringParameters: [Swift.String:Swift.String]? = nil
        )
        {
            self.headerParameters = headerParameters
            self.pathParameterValues = pathParameterValues
            self.queryStringParameters = queryStringParameters
        }
    }

}

extension PipesClientTypes.PipeEnrichmentParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpParameters = "HttpParameters"
        case inputTemplate = "InputTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let httpParameters = self.httpParameters {
            try encodeContainer.encode(httpParameters, forKey: .httpParameters)
        }
        if let inputTemplate = self.inputTemplate {
            try encodeContainer.encode(inputTemplate, forKey: .inputTemplate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputTemplate)
        inputTemplate = inputTemplateDecoded
        let httpParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeEnrichmentHttpParameters.self, forKey: .httpParameters)
        httpParameters = httpParametersDecoded
    }
}

extension PipesClientTypes.PipeEnrichmentParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipeEnrichmentParameters(httpParameters: \(Swift.String(describing: httpParameters)), inputTemplate: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// The parameters required to set up enrichment on your pipe.
    public struct PipeEnrichmentParameters: Swift.Equatable {
        /// Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence.
        public var httpParameters: PipesClientTypes.PipeEnrichmentHttpParameters?
        /// Valid JSON text passed to the enrichment. In this case, nothing from the event itself is passed to the enrichment. For more information, see [The JavaScript Object Notation (JSON) Data Interchange Format](http://www.rfc-editor.org/rfc/rfc7159.txt).
        public var inputTemplate: Swift.String?

        public init (
            httpParameters: PipesClientTypes.PipeEnrichmentHttpParameters? = nil,
            inputTemplate: Swift.String? = nil
        )
        {
            self.httpParameters = httpParameters
            self.inputTemplate = inputTemplate
        }
    }

}

extension PipesClientTypes.PipeSourceActiveMQBrokerParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case credentials = "Credentials"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
        case queueName = "QueueName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let credentials = self.credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
        if let queueName = self.queueName {
            try encodeContainer.encode(queueName, forKey: .queueName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let credentialsDecoded = try containerValues.decodeIfPresent(PipesClientTypes.MQBrokerAccessCredentials.self, forKey: .credentials)
        credentials = credentialsDecoded
        let queueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueName)
        queueName = queueNameDecoded
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
    }
}

extension PipesClientTypes.PipeSourceActiveMQBrokerParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipeSourceActiveMQBrokerParameters(batchSize: \(Swift.String(describing: batchSize)), credentials: \(Swift.String(describing: credentials)), maximumBatchingWindowInSeconds: \(Swift.String(describing: maximumBatchingWindowInSeconds)), queueName: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// The parameters for using an Active MQ broker as a source.
    public struct PipeSourceActiveMQBrokerParameters: Swift.Equatable {
        /// The maximum number of records to include in each batch.
        public var batchSize: Swift.Int?
        /// The credentials needed to access the resource.
        /// This member is required.
        public var credentials: PipesClientTypes.MQBrokerAccessCredentials?
        /// The maximum length of a time to wait for events.
        public var maximumBatchingWindowInSeconds: Swift.Int?
        /// The name of the destination queue to consume.
        /// This member is required.
        public var queueName: Swift.String?

        public init (
            batchSize: Swift.Int? = nil,
            credentials: PipesClientTypes.MQBrokerAccessCredentials? = nil,
            maximumBatchingWindowInSeconds: Swift.Int? = nil,
            queueName: Swift.String? = nil
        )
        {
            self.batchSize = batchSize
            self.credentials = credentials
            self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
            self.queueName = queueName
        }
    }

}

extension PipesClientTypes.PipeSourceDynamoDBStreamParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case deadLetterConfig = "DeadLetterConfig"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
        case maximumRecordAgeInSeconds = "MaximumRecordAgeInSeconds"
        case maximumRetryAttempts = "MaximumRetryAttempts"
        case onPartialBatchItemFailure = "OnPartialBatchItemFailure"
        case parallelizationFactor = "ParallelizationFactor"
        case startingPosition = "StartingPosition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let deadLetterConfig = self.deadLetterConfig {
            try encodeContainer.encode(deadLetterConfig, forKey: .deadLetterConfig)
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
        if let maximumRecordAgeInSeconds = self.maximumRecordAgeInSeconds {
            try encodeContainer.encode(maximumRecordAgeInSeconds, forKey: .maximumRecordAgeInSeconds)
        }
        if let maximumRetryAttempts = self.maximumRetryAttempts {
            try encodeContainer.encode(maximumRetryAttempts, forKey: .maximumRetryAttempts)
        }
        if let onPartialBatchItemFailure = self.onPartialBatchItemFailure {
            try encodeContainer.encode(onPartialBatchItemFailure.rawValue, forKey: .onPartialBatchItemFailure)
        }
        if let parallelizationFactor = self.parallelizationFactor {
            try encodeContainer.encode(parallelizationFactor, forKey: .parallelizationFactor)
        }
        if let startingPosition = self.startingPosition {
            try encodeContainer.encode(startingPosition.rawValue, forKey: .startingPosition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let deadLetterConfigDecoded = try containerValues.decodeIfPresent(PipesClientTypes.DeadLetterConfig.self, forKey: .deadLetterConfig)
        deadLetterConfig = deadLetterConfigDecoded
        let onPartialBatchItemFailureDecoded = try containerValues.decodeIfPresent(PipesClientTypes.OnPartialBatchItemFailureStreams.self, forKey: .onPartialBatchItemFailure)
        onPartialBatchItemFailure = onPartialBatchItemFailureDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
        let maximumRecordAgeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumRecordAgeInSeconds)
        maximumRecordAgeInSeconds = maximumRecordAgeInSecondsDecoded
        let maximumRetryAttemptsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumRetryAttempts)
        maximumRetryAttempts = maximumRetryAttemptsDecoded
        let parallelizationFactorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parallelizationFactor)
        parallelizationFactor = parallelizationFactorDecoded
        let startingPositionDecoded = try containerValues.decodeIfPresent(PipesClientTypes.DynamoDBStreamStartPosition.self, forKey: .startingPosition)
        startingPosition = startingPositionDecoded
    }
}

extension PipesClientTypes {
    /// The parameters for using a DynamoDB stream as a source.
    public struct PipeSourceDynamoDBStreamParameters: Swift.Equatable {
        /// The maximum number of records to include in each batch.
        public var batchSize: Swift.Int?
        /// Define the target queue to send dead-letter queue events to.
        public var deadLetterConfig: PipesClientTypes.DeadLetterConfig?
        /// The maximum length of a time to wait for events.
        public var maximumBatchingWindowInSeconds: Swift.Int?
        /// (Streams only) Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records.
        public var maximumRecordAgeInSeconds: Swift.Int?
        /// (Streams only) Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source.
        public var maximumRetryAttempts: Swift.Int?
        /// (Streams only) Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch.
        public var onPartialBatchItemFailure: PipesClientTypes.OnPartialBatchItemFailureStreams?
        /// (Streams only) The number of batches to process concurrently from each shard. The default value is 1.
        public var parallelizationFactor: Swift.Int?
        /// (Streams only) The position in a stream from which to start reading.
        /// This member is required.
        public var startingPosition: PipesClientTypes.DynamoDBStreamStartPosition?

        public init (
            batchSize: Swift.Int? = nil,
            deadLetterConfig: PipesClientTypes.DeadLetterConfig? = nil,
            maximumBatchingWindowInSeconds: Swift.Int? = nil,
            maximumRecordAgeInSeconds: Swift.Int? = nil,
            maximumRetryAttempts: Swift.Int? = nil,
            onPartialBatchItemFailure: PipesClientTypes.OnPartialBatchItemFailureStreams? = nil,
            parallelizationFactor: Swift.Int? = nil,
            startingPosition: PipesClientTypes.DynamoDBStreamStartPosition? = nil
        )
        {
            self.batchSize = batchSize
            self.deadLetterConfig = deadLetterConfig
            self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
            self.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds
            self.maximumRetryAttempts = maximumRetryAttempts
            self.onPartialBatchItemFailure = onPartialBatchItemFailure
            self.parallelizationFactor = parallelizationFactor
            self.startingPosition = startingPosition
        }
    }

}

extension PipesClientTypes.PipeSourceKinesisStreamParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case deadLetterConfig = "DeadLetterConfig"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
        case maximumRecordAgeInSeconds = "MaximumRecordAgeInSeconds"
        case maximumRetryAttempts = "MaximumRetryAttempts"
        case onPartialBatchItemFailure = "OnPartialBatchItemFailure"
        case parallelizationFactor = "ParallelizationFactor"
        case startingPosition = "StartingPosition"
        case startingPositionTimestamp = "StartingPositionTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let deadLetterConfig = self.deadLetterConfig {
            try encodeContainer.encode(deadLetterConfig, forKey: .deadLetterConfig)
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
        if let maximumRecordAgeInSeconds = self.maximumRecordAgeInSeconds {
            try encodeContainer.encode(maximumRecordAgeInSeconds, forKey: .maximumRecordAgeInSeconds)
        }
        if let maximumRetryAttempts = self.maximumRetryAttempts {
            try encodeContainer.encode(maximumRetryAttempts, forKey: .maximumRetryAttempts)
        }
        if let onPartialBatchItemFailure = self.onPartialBatchItemFailure {
            try encodeContainer.encode(onPartialBatchItemFailure.rawValue, forKey: .onPartialBatchItemFailure)
        }
        if let parallelizationFactor = self.parallelizationFactor {
            try encodeContainer.encode(parallelizationFactor, forKey: .parallelizationFactor)
        }
        if let startingPosition = self.startingPosition {
            try encodeContainer.encode(startingPosition.rawValue, forKey: .startingPosition)
        }
        if let startingPositionTimestamp = self.startingPositionTimestamp {
            try encodeContainer.encodeTimestamp(startingPositionTimestamp, format: .epochSeconds, forKey: .startingPositionTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let deadLetterConfigDecoded = try containerValues.decodeIfPresent(PipesClientTypes.DeadLetterConfig.self, forKey: .deadLetterConfig)
        deadLetterConfig = deadLetterConfigDecoded
        let onPartialBatchItemFailureDecoded = try containerValues.decodeIfPresent(PipesClientTypes.OnPartialBatchItemFailureStreams.self, forKey: .onPartialBatchItemFailure)
        onPartialBatchItemFailure = onPartialBatchItemFailureDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
        let maximumRecordAgeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumRecordAgeInSeconds)
        maximumRecordAgeInSeconds = maximumRecordAgeInSecondsDecoded
        let maximumRetryAttemptsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumRetryAttempts)
        maximumRetryAttempts = maximumRetryAttemptsDecoded
        let parallelizationFactorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parallelizationFactor)
        parallelizationFactor = parallelizationFactorDecoded
        let startingPositionDecoded = try containerValues.decodeIfPresent(PipesClientTypes.KinesisStreamStartPosition.self, forKey: .startingPosition)
        startingPosition = startingPositionDecoded
        let startingPositionTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startingPositionTimestamp)
        startingPositionTimestamp = startingPositionTimestampDecoded
    }
}

extension PipesClientTypes {
    /// The parameters for using a Kinesis stream as a source.
    public struct PipeSourceKinesisStreamParameters: Swift.Equatable {
        /// The maximum number of records to include in each batch.
        public var batchSize: Swift.Int?
        /// Define the target queue to send dead-letter queue events to.
        public var deadLetterConfig: PipesClientTypes.DeadLetterConfig?
        /// The maximum length of a time to wait for events.
        public var maximumBatchingWindowInSeconds: Swift.Int?
        /// (Streams only) Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records.
        public var maximumRecordAgeInSeconds: Swift.Int?
        /// (Streams only) Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source.
        public var maximumRetryAttempts: Swift.Int?
        /// (Streams only) Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch.
        public var onPartialBatchItemFailure: PipesClientTypes.OnPartialBatchItemFailureStreams?
        /// (Streams only) The number of batches to process concurrently from each shard. The default value is 1.
        public var parallelizationFactor: Swift.Int?
        /// (Streams only) The position in a stream from which to start reading.
        /// This member is required.
        public var startingPosition: PipesClientTypes.KinesisStreamStartPosition?
        /// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
        public var startingPositionTimestamp: ClientRuntime.Date?

        public init (
            batchSize: Swift.Int? = nil,
            deadLetterConfig: PipesClientTypes.DeadLetterConfig? = nil,
            maximumBatchingWindowInSeconds: Swift.Int? = nil,
            maximumRecordAgeInSeconds: Swift.Int? = nil,
            maximumRetryAttempts: Swift.Int? = nil,
            onPartialBatchItemFailure: PipesClientTypes.OnPartialBatchItemFailureStreams? = nil,
            parallelizationFactor: Swift.Int? = nil,
            startingPosition: PipesClientTypes.KinesisStreamStartPosition? = nil,
            startingPositionTimestamp: ClientRuntime.Date? = nil
        )
        {
            self.batchSize = batchSize
            self.deadLetterConfig = deadLetterConfig
            self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
            self.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds
            self.maximumRetryAttempts = maximumRetryAttempts
            self.onPartialBatchItemFailure = onPartialBatchItemFailure
            self.parallelizationFactor = parallelizationFactor
            self.startingPosition = startingPosition
            self.startingPositionTimestamp = startingPositionTimestamp
        }
    }

}

extension PipesClientTypes.PipeSourceManagedStreamingKafkaParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case consumerGroupID = "ConsumerGroupID"
        case credentials = "Credentials"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
        case startingPosition = "StartingPosition"
        case topicName = "TopicName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let consumerGroupID = self.consumerGroupID {
            try encodeContainer.encode(consumerGroupID, forKey: .consumerGroupID)
        }
        if let credentials = self.credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
        if let startingPosition = self.startingPosition {
            try encodeContainer.encode(startingPosition.rawValue, forKey: .startingPosition)
        }
        if let topicName = self.topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
        let startingPositionDecoded = try containerValues.decodeIfPresent(PipesClientTypes.MSKStartPosition.self, forKey: .startingPosition)
        startingPosition = startingPositionDecoded
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
        let consumerGroupIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerGroupID)
        consumerGroupID = consumerGroupIDDecoded
        let credentialsDecoded = try containerValues.decodeIfPresent(PipesClientTypes.MSKAccessCredentials.self, forKey: .credentials)
        credentials = credentialsDecoded
    }
}

extension PipesClientTypes.PipeSourceManagedStreamingKafkaParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipeSourceManagedStreamingKafkaParameters(batchSize: \(Swift.String(describing: batchSize)), credentials: \(Swift.String(describing: credentials)), maximumBatchingWindowInSeconds: \(Swift.String(describing: maximumBatchingWindowInSeconds)), startingPosition: \(Swift.String(describing: startingPosition)), consumerGroupID: \"CONTENT_REDACTED\", topicName: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// The parameters for using an MSK stream as a source.
    public struct PipeSourceManagedStreamingKafkaParameters: Swift.Equatable {
        /// The maximum number of records to include in each batch.
        public var batchSize: Swift.Int?
        /// The name of the destination queue to consume.
        public var consumerGroupID: Swift.String?
        /// The credentials needed to access the resource.
        public var credentials: PipesClientTypes.MSKAccessCredentials?
        /// The maximum length of a time to wait for events.
        public var maximumBatchingWindowInSeconds: Swift.Int?
        /// (Streams only) The position in a stream from which to start reading.
        public var startingPosition: PipesClientTypes.MSKStartPosition?
        /// The name of the topic that the pipe will read from.
        /// This member is required.
        public var topicName: Swift.String?

        public init (
            batchSize: Swift.Int? = nil,
            consumerGroupID: Swift.String? = nil,
            credentials: PipesClientTypes.MSKAccessCredentials? = nil,
            maximumBatchingWindowInSeconds: Swift.Int? = nil,
            startingPosition: PipesClientTypes.MSKStartPosition? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.batchSize = batchSize
            self.consumerGroupID = consumerGroupID
            self.credentials = credentials
            self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
            self.startingPosition = startingPosition
            self.topicName = topicName
        }
    }

}

extension PipesClientTypes.PipeSourceParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeMQBrokerParameters = "ActiveMQBrokerParameters"
        case dynamoDBStreamParameters = "DynamoDBStreamParameters"
        case filterCriteria = "FilterCriteria"
        case kinesisStreamParameters = "KinesisStreamParameters"
        case managedStreamingKafkaParameters = "ManagedStreamingKafkaParameters"
        case rabbitMQBrokerParameters = "RabbitMQBrokerParameters"
        case selfManagedKafkaParameters = "SelfManagedKafkaParameters"
        case sqsQueueParameters = "SqsQueueParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeMQBrokerParameters = self.activeMQBrokerParameters {
            try encodeContainer.encode(activeMQBrokerParameters, forKey: .activeMQBrokerParameters)
        }
        if let dynamoDBStreamParameters = self.dynamoDBStreamParameters {
            try encodeContainer.encode(dynamoDBStreamParameters, forKey: .dynamoDBStreamParameters)
        }
        if let filterCriteria = self.filterCriteria {
            try encodeContainer.encode(filterCriteria, forKey: .filterCriteria)
        }
        if let kinesisStreamParameters = self.kinesisStreamParameters {
            try encodeContainer.encode(kinesisStreamParameters, forKey: .kinesisStreamParameters)
        }
        if let managedStreamingKafkaParameters = self.managedStreamingKafkaParameters {
            try encodeContainer.encode(managedStreamingKafkaParameters, forKey: .managedStreamingKafkaParameters)
        }
        if let rabbitMQBrokerParameters = self.rabbitMQBrokerParameters {
            try encodeContainer.encode(rabbitMQBrokerParameters, forKey: .rabbitMQBrokerParameters)
        }
        if let selfManagedKafkaParameters = self.selfManagedKafkaParameters {
            try encodeContainer.encode(selfManagedKafkaParameters, forKey: .selfManagedKafkaParameters)
        }
        if let sqsQueueParameters = self.sqsQueueParameters {
            try encodeContainer.encode(sqsQueueParameters, forKey: .sqsQueueParameters)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterCriteriaDecoded = try containerValues.decodeIfPresent(PipesClientTypes.FilterCriteria.self, forKey: .filterCriteria)
        filterCriteria = filterCriteriaDecoded
        let kinesisStreamParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeSourceKinesisStreamParameters.self, forKey: .kinesisStreamParameters)
        kinesisStreamParameters = kinesisStreamParametersDecoded
        let dynamoDBStreamParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeSourceDynamoDBStreamParameters.self, forKey: .dynamoDBStreamParameters)
        dynamoDBStreamParameters = dynamoDBStreamParametersDecoded
        let sqsQueueParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeSourceSqsQueueParameters.self, forKey: .sqsQueueParameters)
        sqsQueueParameters = sqsQueueParametersDecoded
        let activeMQBrokerParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeSourceActiveMQBrokerParameters.self, forKey: .activeMQBrokerParameters)
        activeMQBrokerParameters = activeMQBrokerParametersDecoded
        let rabbitMQBrokerParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeSourceRabbitMQBrokerParameters.self, forKey: .rabbitMQBrokerParameters)
        rabbitMQBrokerParameters = rabbitMQBrokerParametersDecoded
        let managedStreamingKafkaParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeSourceManagedStreamingKafkaParameters.self, forKey: .managedStreamingKafkaParameters)
        managedStreamingKafkaParameters = managedStreamingKafkaParametersDecoded
        let selfManagedKafkaParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeSourceSelfManagedKafkaParameters.self, forKey: .selfManagedKafkaParameters)
        selfManagedKafkaParameters = selfManagedKafkaParametersDecoded
    }
}

extension PipesClientTypes {
    /// The parameters required to set up a source for your pipe.
    public struct PipeSourceParameters: Swift.Equatable {
        /// The parameters for using an Active MQ broker as a source.
        public var activeMQBrokerParameters: PipesClientTypes.PipeSourceActiveMQBrokerParameters?
        /// The parameters for using a DynamoDB stream as a source.
        public var dynamoDBStreamParameters: PipesClientTypes.PipeSourceDynamoDBStreamParameters?
        /// The collection of event patterns used to filter events. For more information, see [Events and Event Patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html) in the Amazon EventBridge User Guide.
        public var filterCriteria: PipesClientTypes.FilterCriteria?
        /// The parameters for using a Kinesis stream as a source.
        public var kinesisStreamParameters: PipesClientTypes.PipeSourceKinesisStreamParameters?
        /// The parameters for using an MSK stream as a source.
        public var managedStreamingKafkaParameters: PipesClientTypes.PipeSourceManagedStreamingKafkaParameters?
        /// The parameters for using a Rabbit MQ broker as a source.
        public var rabbitMQBrokerParameters: PipesClientTypes.PipeSourceRabbitMQBrokerParameters?
        /// The parameters for using a self-managed Apache Kafka stream as a source.
        public var selfManagedKafkaParameters: PipesClientTypes.PipeSourceSelfManagedKafkaParameters?
        /// The parameters for using a Amazon SQS stream as a source.
        public var sqsQueueParameters: PipesClientTypes.PipeSourceSqsQueueParameters?

        public init (
            activeMQBrokerParameters: PipesClientTypes.PipeSourceActiveMQBrokerParameters? = nil,
            dynamoDBStreamParameters: PipesClientTypes.PipeSourceDynamoDBStreamParameters? = nil,
            filterCriteria: PipesClientTypes.FilterCriteria? = nil,
            kinesisStreamParameters: PipesClientTypes.PipeSourceKinesisStreamParameters? = nil,
            managedStreamingKafkaParameters: PipesClientTypes.PipeSourceManagedStreamingKafkaParameters? = nil,
            rabbitMQBrokerParameters: PipesClientTypes.PipeSourceRabbitMQBrokerParameters? = nil,
            selfManagedKafkaParameters: PipesClientTypes.PipeSourceSelfManagedKafkaParameters? = nil,
            sqsQueueParameters: PipesClientTypes.PipeSourceSqsQueueParameters? = nil
        )
        {
            self.activeMQBrokerParameters = activeMQBrokerParameters
            self.dynamoDBStreamParameters = dynamoDBStreamParameters
            self.filterCriteria = filterCriteria
            self.kinesisStreamParameters = kinesisStreamParameters
            self.managedStreamingKafkaParameters = managedStreamingKafkaParameters
            self.rabbitMQBrokerParameters = rabbitMQBrokerParameters
            self.selfManagedKafkaParameters = selfManagedKafkaParameters
            self.sqsQueueParameters = sqsQueueParameters
        }
    }

}

extension PipesClientTypes.PipeSourceRabbitMQBrokerParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case credentials = "Credentials"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
        case queueName = "QueueName"
        case virtualHost = "VirtualHost"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let credentials = self.credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
        if let queueName = self.queueName {
            try encodeContainer.encode(queueName, forKey: .queueName)
        }
        if let virtualHost = self.virtualHost {
            try encodeContainer.encode(virtualHost, forKey: .virtualHost)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let credentialsDecoded = try containerValues.decodeIfPresent(PipesClientTypes.MQBrokerAccessCredentials.self, forKey: .credentials)
        credentials = credentialsDecoded
        let queueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueName)
        queueName = queueNameDecoded
        let virtualHostDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualHost)
        virtualHost = virtualHostDecoded
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
    }
}

extension PipesClientTypes.PipeSourceRabbitMQBrokerParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipeSourceRabbitMQBrokerParameters(batchSize: \(Swift.String(describing: batchSize)), credentials: \(Swift.String(describing: credentials)), maximumBatchingWindowInSeconds: \(Swift.String(describing: maximumBatchingWindowInSeconds)), queueName: \"CONTENT_REDACTED\", virtualHost: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// The parameters for using a Rabbit MQ broker as a source.
    public struct PipeSourceRabbitMQBrokerParameters: Swift.Equatable {
        /// The maximum number of records to include in each batch.
        public var batchSize: Swift.Int?
        /// The credentials needed to access the resource.
        /// This member is required.
        public var credentials: PipesClientTypes.MQBrokerAccessCredentials?
        /// The maximum length of a time to wait for events.
        public var maximumBatchingWindowInSeconds: Swift.Int?
        /// The name of the destination queue to consume.
        /// This member is required.
        public var queueName: Swift.String?
        /// The name of the virtual host associated with the source broker.
        public var virtualHost: Swift.String?

        public init (
            batchSize: Swift.Int? = nil,
            credentials: PipesClientTypes.MQBrokerAccessCredentials? = nil,
            maximumBatchingWindowInSeconds: Swift.Int? = nil,
            queueName: Swift.String? = nil,
            virtualHost: Swift.String? = nil
        )
        {
            self.batchSize = batchSize
            self.credentials = credentials
            self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
            self.queueName = queueName
            self.virtualHost = virtualHost
        }
    }

}

extension PipesClientTypes.PipeSourceSelfManagedKafkaParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalBootstrapServers = "AdditionalBootstrapServers"
        case batchSize = "BatchSize"
        case consumerGroupID = "ConsumerGroupID"
        case credentials = "Credentials"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
        case serverRootCaCertificate = "ServerRootCaCertificate"
        case startingPosition = "StartingPosition"
        case topicName = "TopicName"
        case vpc = "Vpc"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalBootstrapServers = additionalBootstrapServers {
            var additionalBootstrapServersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalBootstrapServers)
            for endpointstring0 in additionalBootstrapServers {
                try additionalBootstrapServersContainer.encode(endpointstring0)
            }
        }
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let consumerGroupID = self.consumerGroupID {
            try encodeContainer.encode(consumerGroupID, forKey: .consumerGroupID)
        }
        if let credentials = self.credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
        if let serverRootCaCertificate = self.serverRootCaCertificate {
            try encodeContainer.encode(serverRootCaCertificate, forKey: .serverRootCaCertificate)
        }
        if let startingPosition = self.startingPosition {
            try encodeContainer.encode(startingPosition.rawValue, forKey: .startingPosition)
        }
        if let topicName = self.topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
        if let vpc = self.vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
        let startingPositionDecoded = try containerValues.decodeIfPresent(PipesClientTypes.SelfManagedKafkaStartPosition.self, forKey: .startingPosition)
        startingPosition = startingPositionDecoded
        let additionalBootstrapServersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalBootstrapServers)
        var additionalBootstrapServersDecoded0:[Swift.String]? = nil
        if let additionalBootstrapServersContainer = additionalBootstrapServersContainer {
            additionalBootstrapServersDecoded0 = [Swift.String]()
            for string0 in additionalBootstrapServersContainer {
                if let string0 = string0 {
                    additionalBootstrapServersDecoded0?.append(string0)
                }
            }
        }
        additionalBootstrapServers = additionalBootstrapServersDecoded0
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
        let consumerGroupIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerGroupID)
        consumerGroupID = consumerGroupIDDecoded
        let credentialsDecoded = try containerValues.decodeIfPresent(PipesClientTypes.SelfManagedKafkaAccessConfigurationCredentials.self, forKey: .credentials)
        credentials = credentialsDecoded
        let serverRootCaCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverRootCaCertificate)
        serverRootCaCertificate = serverRootCaCertificateDecoded
        let vpcDecoded = try containerValues.decodeIfPresent(PipesClientTypes.SelfManagedKafkaAccessConfigurationVpc.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension PipesClientTypes.PipeSourceSelfManagedKafkaParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipeSourceSelfManagedKafkaParameters(additionalBootstrapServers: \(Swift.String(describing: additionalBootstrapServers)), batchSize: \(Swift.String(describing: batchSize)), credentials: \(Swift.String(describing: credentials)), maximumBatchingWindowInSeconds: \(Swift.String(describing: maximumBatchingWindowInSeconds)), serverRootCaCertificate: \(Swift.String(describing: serverRootCaCertificate)), startingPosition: \(Swift.String(describing: startingPosition)), vpc: \(Swift.String(describing: vpc)), consumerGroupID: \"CONTENT_REDACTED\", topicName: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// The parameters for using a self-managed Apache Kafka stream as a source.
    public struct PipeSourceSelfManagedKafkaParameters: Swift.Equatable {
        /// An array of server URLs.
        public var additionalBootstrapServers: [Swift.String]?
        /// The maximum number of records to include in each batch.
        public var batchSize: Swift.Int?
        /// The name of the destination queue to consume.
        public var consumerGroupID: Swift.String?
        /// The credentials needed to access the resource.
        public var credentials: PipesClientTypes.SelfManagedKafkaAccessConfigurationCredentials?
        /// The maximum length of a time to wait for events.
        public var maximumBatchingWindowInSeconds: Swift.Int?
        /// The ARN of the Secrets Manager secret used for certification.
        public var serverRootCaCertificate: Swift.String?
        /// (Streams only) The position in a stream from which to start reading.
        public var startingPosition: PipesClientTypes.SelfManagedKafkaStartPosition?
        /// The name of the topic that the pipe will read from.
        /// This member is required.
        public var topicName: Swift.String?
        /// This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used.
        public var vpc: PipesClientTypes.SelfManagedKafkaAccessConfigurationVpc?

        public init (
            additionalBootstrapServers: [Swift.String]? = nil,
            batchSize: Swift.Int? = nil,
            consumerGroupID: Swift.String? = nil,
            credentials: PipesClientTypes.SelfManagedKafkaAccessConfigurationCredentials? = nil,
            maximumBatchingWindowInSeconds: Swift.Int? = nil,
            serverRootCaCertificate: Swift.String? = nil,
            startingPosition: PipesClientTypes.SelfManagedKafkaStartPosition? = nil,
            topicName: Swift.String? = nil,
            vpc: PipesClientTypes.SelfManagedKafkaAccessConfigurationVpc? = nil
        )
        {
            self.additionalBootstrapServers = additionalBootstrapServers
            self.batchSize = batchSize
            self.consumerGroupID = consumerGroupID
            self.credentials = credentials
            self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
            self.serverRootCaCertificate = serverRootCaCertificate
            self.startingPosition = startingPosition
            self.topicName = topicName
            self.vpc = vpc
        }
    }

}

extension PipesClientTypes.PipeSourceSqsQueueParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
    }
}

extension PipesClientTypes {
    /// The parameters for using a Amazon SQS stream as a source.
    public struct PipeSourceSqsQueueParameters: Swift.Equatable {
        /// The maximum number of records to include in each batch.
        public var batchSize: Swift.Int?
        /// The maximum length of a time to wait for events.
        public var maximumBatchingWindowInSeconds: Swift.Int?

        public init (
            batchSize: Swift.Int? = nil,
            maximumBatchingWindowInSeconds: Swift.Int? = nil
        )
        {
            self.batchSize = batchSize
            self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
        }
    }

}

extension PipesClientTypes {
    public enum PipeState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createFailed
        case creating
        case deleting
        case running
        case starting
        case startFailed
        case stopped
        case stopping
        case stopFailed
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [PipeState] {
            return [
                .createFailed,
                .creating,
                .deleting,
                .running,
                .starting,
                .startFailed,
                .stopped,
                .stopping,
                .stopFailed,
                .updateFailed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .startFailed: return "START_FAILED"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case .stopFailed: return "STOP_FAILED"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PipeState(rawValue: rawValue) ?? PipeState.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes.PipeTargetBatchJobParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayProperties = "ArrayProperties"
        case containerOverrides = "ContainerOverrides"
        case dependsOn = "DependsOn"
        case jobDefinition = "JobDefinition"
        case jobName = "JobName"
        case parameters = "Parameters"
        case retryStrategy = "RetryStrategy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arrayProperties = self.arrayProperties {
            try encodeContainer.encode(arrayProperties, forKey: .arrayProperties)
        }
        if let containerOverrides = self.containerOverrides {
            try encodeContainer.encode(containerOverrides, forKey: .containerOverrides)
        }
        if let dependsOn = dependsOn {
            var dependsOnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dependsOn)
            for batchjobdependency0 in dependsOn {
                try dependsOnContainer.encode(batchjobdependency0)
            }
        }
        if let jobDefinition = self.jobDefinition {
            try encodeContainer.encode(jobDefinition, forKey: .jobDefinition)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, batchParametersMap0) in parameters {
                try parametersContainer.encode(batchParametersMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let retryStrategy = self.retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinition)
        jobDefinition = jobDefinitionDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let arrayPropertiesDecoded = try containerValues.decodeIfPresent(PipesClientTypes.BatchArrayProperties.self, forKey: .arrayProperties)
        arrayProperties = arrayPropertiesDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(PipesClientTypes.BatchRetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let containerOverridesDecoded = try containerValues.decodeIfPresent(PipesClientTypes.BatchContainerOverrides.self, forKey: .containerOverrides)
        containerOverrides = containerOverridesDecoded
        let dependsOnContainer = try containerValues.decodeIfPresent([PipesClientTypes.BatchJobDependency?].self, forKey: .dependsOn)
        var dependsOnDecoded0:[PipesClientTypes.BatchJobDependency]? = nil
        if let dependsOnContainer = dependsOnContainer {
            dependsOnDecoded0 = [PipesClientTypes.BatchJobDependency]()
            for structure0 in dependsOnContainer {
                if let structure0 = structure0 {
                    dependsOnDecoded0?.append(structure0)
                }
            }
        }
        dependsOn = dependsOnDecoded0
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in parametersContainer {
                if let string0 = string0 {
                    parametersDecoded0?[key0] = string0
                }
            }
        }
        parameters = parametersDecoded0
    }
}

extension PipesClientTypes {
    /// The parameters for using an Batch job as a target.
    public struct PipeTargetBatchJobParameters: Swift.Equatable {
        /// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an Batch job.
        public var arrayProperties: PipesClientTypes.BatchArrayProperties?
        /// The overrides that are sent to a container.
        public var containerOverrides: PipesClientTypes.BatchContainerOverrides?
        /// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin.
        public var dependsOn: [PipesClientTypes.BatchJobDependency]?
        /// The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
        /// This member is required.
        public var jobDefinition: Swift.String?
        /// The name of the job. It can be up to 128 letters long. The first character must be alphanumeric, can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
        /// This member is required.
        public var jobName: Swift.String?
        /// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition.
        public var parameters: [Swift.String:Swift.String]?
        /// The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.
        public var retryStrategy: PipesClientTypes.BatchRetryStrategy?

        public init (
            arrayProperties: PipesClientTypes.BatchArrayProperties? = nil,
            containerOverrides: PipesClientTypes.BatchContainerOverrides? = nil,
            dependsOn: [PipesClientTypes.BatchJobDependency]? = nil,
            jobDefinition: Swift.String? = nil,
            jobName: Swift.String? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            retryStrategy: PipesClientTypes.BatchRetryStrategy? = nil
        )
        {
            self.arrayProperties = arrayProperties
            self.containerOverrides = containerOverrides
            self.dependsOn = dependsOn
            self.jobDefinition = jobDefinition
            self.jobName = jobName
            self.parameters = parameters
            self.retryStrategy = retryStrategy
        }
    }

}

extension PipesClientTypes.PipeTargetCloudWatchLogsParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logStreamName = "LogStreamName"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}

extension PipesClientTypes {
    /// The parameters for using an CloudWatch Logs log stream as a target.
    public struct PipeTargetCloudWatchLogsParameters: Swift.Equatable {
        /// The name of the log stream.
        public var logStreamName: Swift.String?
        /// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var timestamp: Swift.String?

        public init (
            logStreamName: Swift.String? = nil,
            timestamp: Swift.String? = nil
        )
        {
            self.logStreamName = logStreamName
            self.timestamp = timestamp
        }
    }

}

extension PipesClientTypes.PipeTargetEcsTaskParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityProviderStrategy = "CapacityProviderStrategy"
        case enableECSManagedTags = "EnableECSManagedTags"
        case enableExecuteCommand = "EnableExecuteCommand"
        case group = "Group"
        case launchType = "LaunchType"
        case networkConfiguration = "NetworkConfiguration"
        case overrides = "Overrides"
        case placementConstraints = "PlacementConstraints"
        case placementStrategy = "PlacementStrategy"
        case platformVersion = "PlatformVersion"
        case propagateTags = "PropagateTags"
        case referenceId = "ReferenceId"
        case tags = "Tags"
        case taskCount = "TaskCount"
        case taskDefinitionArn = "TaskDefinitionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityProviderStrategy = capacityProviderStrategy {
            var capacityProviderStrategyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .capacityProviderStrategy)
            for capacityproviderstrategyitem0 in capacityProviderStrategy {
                try capacityProviderStrategyContainer.encode(capacityproviderstrategyitem0)
            }
        }
        if enableECSManagedTags != false {
            try encodeContainer.encode(enableECSManagedTags, forKey: .enableECSManagedTags)
        }
        if enableExecuteCommand != false {
            try encodeContainer.encode(enableExecuteCommand, forKey: .enableExecuteCommand)
        }
        if let group = self.group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let launchType = self.launchType {
            try encodeContainer.encode(launchType.rawValue, forKey: .launchType)
        }
        if let networkConfiguration = self.networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if let overrides = self.overrides {
            try encodeContainer.encode(overrides, forKey: .overrides)
        }
        if let placementConstraints = placementConstraints {
            var placementConstraintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementConstraints)
            for placementconstraint0 in placementConstraints {
                try placementConstraintsContainer.encode(placementconstraint0)
            }
        }
        if let placementStrategy = placementStrategy {
            var placementStrategyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementStrategy)
            for placementstrategy0 in placementStrategy {
                try placementStrategyContainer.encode(placementstrategy0)
            }
        }
        if let platformVersion = self.platformVersion {
            try encodeContainer.encode(platformVersion, forKey: .platformVersion)
        }
        if let propagateTags = self.propagateTags {
            try encodeContainer.encode(propagateTags.rawValue, forKey: .propagateTags)
        }
        if let referenceId = self.referenceId {
            try encodeContainer.encode(referenceId, forKey: .referenceId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let taskCount = self.taskCount {
            try encodeContainer.encode(taskCount, forKey: .taskCount)
        }
        if let taskDefinitionArn = self.taskDefinitionArn {
            try encodeContainer.encode(taskDefinitionArn, forKey: .taskDefinitionArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskDefinitionArn)
        taskDefinitionArn = taskDefinitionArnDecoded
        let taskCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .taskCount)
        taskCount = taskCountDecoded
        let launchTypeDecoded = try containerValues.decodeIfPresent(PipesClientTypes.LaunchType.self, forKey: .launchType)
        launchType = launchTypeDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(PipesClientTypes.NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
        let capacityProviderStrategyContainer = try containerValues.decodeIfPresent([PipesClientTypes.CapacityProviderStrategyItem?].self, forKey: .capacityProviderStrategy)
        var capacityProviderStrategyDecoded0:[PipesClientTypes.CapacityProviderStrategyItem]? = nil
        if let capacityProviderStrategyContainer = capacityProviderStrategyContainer {
            capacityProviderStrategyDecoded0 = [PipesClientTypes.CapacityProviderStrategyItem]()
            for structure0 in capacityProviderStrategyContainer {
                if let structure0 = structure0 {
                    capacityProviderStrategyDecoded0?.append(structure0)
                }
            }
        }
        capacityProviderStrategy = capacityProviderStrategyDecoded0
        let enableECSManagedTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableECSManagedTags) ?? false
        enableECSManagedTags = enableECSManagedTagsDecoded
        let enableExecuteCommandDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableExecuteCommand) ?? false
        enableExecuteCommand = enableExecuteCommandDecoded
        let placementConstraintsContainer = try containerValues.decodeIfPresent([PipesClientTypes.PlacementConstraint?].self, forKey: .placementConstraints)
        var placementConstraintsDecoded0:[PipesClientTypes.PlacementConstraint]? = nil
        if let placementConstraintsContainer = placementConstraintsContainer {
            placementConstraintsDecoded0 = [PipesClientTypes.PlacementConstraint]()
            for structure0 in placementConstraintsContainer {
                if let structure0 = structure0 {
                    placementConstraintsDecoded0?.append(structure0)
                }
            }
        }
        placementConstraints = placementConstraintsDecoded0
        let placementStrategyContainer = try containerValues.decodeIfPresent([PipesClientTypes.PlacementStrategy?].self, forKey: .placementStrategy)
        var placementStrategyDecoded0:[PipesClientTypes.PlacementStrategy]? = nil
        if let placementStrategyContainer = placementStrategyContainer {
            placementStrategyDecoded0 = [PipesClientTypes.PlacementStrategy]()
            for structure0 in placementStrategyContainer {
                if let structure0 = structure0 {
                    placementStrategyDecoded0?.append(structure0)
                }
            }
        }
        placementStrategy = placementStrategyDecoded0
        let propagateTagsDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PropagateTags.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let referenceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referenceId)
        referenceId = referenceIdDecoded
        let overridesDecoded = try containerValues.decodeIfPresent(PipesClientTypes.EcsTaskOverride.self, forKey: .overrides)
        overrides = overridesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PipesClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PipesClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PipesClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PipesClientTypes.PipeTargetEcsTaskParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipeTargetEcsTaskParameters(capacityProviderStrategy: \(Swift.String(describing: capacityProviderStrategy)), enableECSManagedTags: \(Swift.String(describing: enableECSManagedTags)), enableExecuteCommand: \(Swift.String(describing: enableExecuteCommand)), group: \(Swift.String(describing: group)), launchType: \(Swift.String(describing: launchType)), networkConfiguration: \(Swift.String(describing: networkConfiguration)), overrides: \(Swift.String(describing: overrides)), placementConstraints: \(Swift.String(describing: placementConstraints)), placementStrategy: \(Swift.String(describing: placementStrategy)), platformVersion: \(Swift.String(describing: platformVersion)), propagateTags: \(Swift.String(describing: propagateTags)), tags: \(Swift.String(describing: tags)), taskCount: \(Swift.String(describing: taskCount)), taskDefinitionArn: \(Swift.String(describing: taskDefinitionArn)), referenceId: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// The parameters for using an Amazon ECS task as a target.
    public struct PipeTargetEcsTaskParameters: Swift.Equatable {
        /// The capacity provider strategy to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used.
        public var capacityProviderStrategy: [PipesClientTypes.CapacityProviderStrategyItem]?
        /// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon Elastic Container Service Developer Guide.
        public var enableECSManagedTags: Swift.Bool
        /// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
        public var enableExecuteCommand: Swift.Bool
        /// Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
        public var group: Swift.String?
        /// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where Fargate with Amazon ECS is supported. For more information, see [Fargate on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS-Fargate.html) in the Amazon Elastic Container Service Developer Guide.
        public var launchType: PipesClientTypes.LaunchType?
        /// Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails.
        public var networkConfiguration: PipesClientTypes.NetworkConfiguration?
        /// The overrides that are associated with a task.
        public var overrides: PipesClientTypes.EcsTaskOverride?
        /// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
        public var placementConstraints: [PipesClientTypes.PlacementConstraint]?
        /// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
        public var placementStrategy: [PipesClientTypes.PlacementStrategy]?
        /// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE. For more information about valid platform versions, see [Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
        public var platformVersion: Swift.String?
        /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action.
        public var propagateTags: PipesClientTypes.PropagateTags?
        /// The reference ID to use for the task.
        public var referenceId: Swift.String?
        /// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html#ECS-RunTask-request-tags) in the Amazon ECS API Reference.
        public var tags: [PipesClientTypes.Tag]?
        /// The number of tasks to create based on TaskDefinition. The default is 1.
        public var taskCount: Swift.Int?
        /// The ARN of the task definition to use if the event target is an Amazon ECS task.
        /// This member is required.
        public var taskDefinitionArn: Swift.String?

        public init (
            capacityProviderStrategy: [PipesClientTypes.CapacityProviderStrategyItem]? = nil,
            enableECSManagedTags: Swift.Bool = false,
            enableExecuteCommand: Swift.Bool = false,
            group: Swift.String? = nil,
            launchType: PipesClientTypes.LaunchType? = nil,
            networkConfiguration: PipesClientTypes.NetworkConfiguration? = nil,
            overrides: PipesClientTypes.EcsTaskOverride? = nil,
            placementConstraints: [PipesClientTypes.PlacementConstraint]? = nil,
            placementStrategy: [PipesClientTypes.PlacementStrategy]? = nil,
            platformVersion: Swift.String? = nil,
            propagateTags: PipesClientTypes.PropagateTags? = nil,
            referenceId: Swift.String? = nil,
            tags: [PipesClientTypes.Tag]? = nil,
            taskCount: Swift.Int? = nil,
            taskDefinitionArn: Swift.String? = nil
        )
        {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.enableECSManagedTags = enableECSManagedTags
            self.enableExecuteCommand = enableExecuteCommand
            self.group = group
            self.launchType = launchType
            self.networkConfiguration = networkConfiguration
            self.overrides = overrides
            self.placementConstraints = placementConstraints
            self.placementStrategy = placementStrategy
            self.platformVersion = platformVersion
            self.propagateTags = propagateTags
            self.referenceId = referenceId
            self.tags = tags
            self.taskCount = taskCount
            self.taskDefinitionArn = taskDefinitionArn
        }
    }

}

extension PipesClientTypes.PipeTargetEventBridgeEventBusParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detailType = "DetailType"
        case endpointId = "EndpointId"
        case resources = "Resources"
        case source = "Source"
        case time = "Time"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let detailType = self.detailType {
            try encodeContainer.encode(detailType, forKey: .detailType)
        }
        if let endpointId = self.endpointId {
            try encodeContainer.encode(endpointId, forKey: .endpointId)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for arnorjsonpath0 in resources {
                try resourcesContainer.encode(arnorjsonpath0)
            }
        }
        if let source = self.source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let time = self.time {
            try encodeContainer.encode(time, forKey: .time)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointId)
        endpointId = endpointIdDecoded
        let detailTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detailType)
        detailType = detailTypeDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let resourcesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resources)
        var resourcesDecoded0:[Swift.String]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [Swift.String]()
            for string0 in resourcesContainer {
                if let string0 = string0 {
                    resourcesDecoded0?.append(string0)
                }
            }
        }
        resources = resourcesDecoded0
        let timeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .time)
        time = timeDecoded
    }
}

extension PipesClientTypes.PipeTargetEventBridgeEventBusParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipeTargetEventBridgeEventBusParameters(resources: \(Swift.String(describing: resources)), time: \(Swift.String(describing: time)), detailType: \"CONTENT_REDACTED\", endpointId: \"CONTENT_REDACTED\", source: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// The parameters for using an EventBridge event bus as a target.
    public struct PipeTargetEventBridgeEventBusParameters: Swift.Equatable {
        /// A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
        public var detailType: Swift.String?
        /// The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo. When using Java, you must include auth-crt on the class path.
        public var endpointId: Swift.String?
        /// Amazon Web Services resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.
        public var resources: [Swift.String]?
        /// The source of the event.
        public var source: Swift.String?
        /// The time stamp of the event, per [RFC3339](https://www.rfc-editor.org/rfc/rfc3339.txt). If no time stamp is provided, the time stamp of the [PutEvents](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html) call is used.
        public var time: Swift.String?

        public init (
            detailType: Swift.String? = nil,
            endpointId: Swift.String? = nil,
            resources: [Swift.String]? = nil,
            source: Swift.String? = nil,
            time: Swift.String? = nil
        )
        {
            self.detailType = detailType
            self.endpointId = endpointId
            self.resources = resources
            self.source = source
            self.time = time
        }
    }

}

extension PipesClientTypes.PipeTargetHttpParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case headerParameters = "HeaderParameters"
        case pathParameterValues = "PathParameterValues"
        case queryStringParameters = "QueryStringParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let headerParameters = headerParameters {
            var headerParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .headerParameters)
            for (dictKey0, headerParametersMap0) in headerParameters {
                try headerParametersContainer.encode(headerParametersMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let pathParameterValues = pathParameterValues {
            var pathParameterValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pathParameterValues)
            for pathparameter0 in pathParameterValues {
                try pathParameterValuesContainer.encode(pathparameter0)
            }
        }
        if let queryStringParameters = queryStringParameters {
            var queryStringParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .queryStringParameters)
            for (dictKey0, queryStringParametersMap0) in queryStringParameters {
                try queryStringParametersContainer.encode(queryStringParametersMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathParameterValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .pathParameterValues)
        var pathParameterValuesDecoded0:[Swift.String]? = nil
        if let pathParameterValuesContainer = pathParameterValuesContainer {
            pathParameterValuesDecoded0 = [Swift.String]()
            for string0 in pathParameterValuesContainer {
                if let string0 = string0 {
                    pathParameterValuesDecoded0?.append(string0)
                }
            }
        }
        pathParameterValues = pathParameterValuesDecoded0
        let headerParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .headerParameters)
        var headerParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let headerParametersContainer = headerParametersContainer {
            headerParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, headervalue0) in headerParametersContainer {
                if let headervalue0 = headervalue0 {
                    headerParametersDecoded0?[key0] = headervalue0
                }
            }
        }
        headerParameters = headerParametersDecoded0
        let queryStringParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .queryStringParameters)
        var queryStringParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let queryStringParametersContainer = queryStringParametersContainer {
            queryStringParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, querystringvalue0) in queryStringParametersContainer {
                if let querystringvalue0 = querystringvalue0 {
                    queryStringParametersDecoded0?[key0] = querystringvalue0
                }
            }
        }
        queryStringParameters = queryStringParametersDecoded0
    }
}

extension PipesClientTypes {
    /// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations.
    public struct PipeTargetHttpParameters: Swift.Equatable {
        /// The headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
        public var headerParameters: [Swift.String:Swift.String]?
        /// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
        public var pathParameterValues: [Swift.String]?
        /// The query string keys/values that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
        public var queryStringParameters: [Swift.String:Swift.String]?

        public init (
            headerParameters: [Swift.String:Swift.String]? = nil,
            pathParameterValues: [Swift.String]? = nil,
            queryStringParameters: [Swift.String:Swift.String]? = nil
        )
        {
            self.headerParameters = headerParameters
            self.pathParameterValues = pathParameterValues
            self.queryStringParameters = queryStringParameters
        }
    }

}

extension PipesClientTypes {
    public enum PipeTargetInvocationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fireAndForget
        case requestResponse
        case sdkUnknown(Swift.String)

        public static var allCases: [PipeTargetInvocationType] {
            return [
                .fireAndForget,
                .requestResponse,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fireAndForget: return "FIRE_AND_FORGET"
            case .requestResponse: return "REQUEST_RESPONSE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PipeTargetInvocationType(rawValue: rawValue) ?? PipeTargetInvocationType.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes.PipeTargetKinesisStreamParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case partitionKey = "PartitionKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let partitionKey = self.partitionKey {
            try encodeContainer.encode(partitionKey, forKey: .partitionKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partitionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partitionKey)
        partitionKey = partitionKeyDecoded
    }
}

extension PipesClientTypes.PipeTargetKinesisStreamParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipeTargetKinesisStreamParameters(partitionKey: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// The parameters for using a Kinesis stream as a source.
    public struct PipeTargetKinesisStreamParameters: Swift.Equatable {
        /// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
        /// This member is required.
        public var partitionKey: Swift.String?

        public init (
            partitionKey: Swift.String? = nil
        )
        {
            self.partitionKey = partitionKey
        }
    }

}

extension PipesClientTypes.PipeTargetLambdaFunctionParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invocationType = "InvocationType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invocationType = self.invocationType {
            try encodeContainer.encode(invocationType.rawValue, forKey: .invocationType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invocationTypeDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetInvocationType.self, forKey: .invocationType)
        invocationType = invocationTypeDecoded
    }
}

extension PipesClientTypes {
    /// The parameters for using a Lambda function as a target.
    public struct PipeTargetLambdaFunctionParameters: Swift.Equatable {
        /// Choose from the following options.
        ///
        /// * RequestResponse (default) - Invoke the function synchronously. Keep the connection open until the function returns a response or times out. The API response includes the function response and additional data.
        ///
        /// * Event - Invoke the function asynchronously. Send events that fail multiple times to the function's dead-letter queue (if it's configured). The API response only includes a status code.
        ///
        /// * DryRun - Validate parameter values and verify that the user or role has permission to invoke the function.
        public var invocationType: PipesClientTypes.PipeTargetInvocationType?

        public init (
            invocationType: PipesClientTypes.PipeTargetInvocationType? = nil
        )
        {
            self.invocationType = invocationType
        }
    }

}

extension PipesClientTypes.PipeTargetParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchJobParameters = "BatchJobParameters"
        case cloudWatchLogsParameters = "CloudWatchLogsParameters"
        case ecsTaskParameters = "EcsTaskParameters"
        case eventBridgeEventBusParameters = "EventBridgeEventBusParameters"
        case httpParameters = "HttpParameters"
        case inputTemplate = "InputTemplate"
        case kinesisStreamParameters = "KinesisStreamParameters"
        case lambdaFunctionParameters = "LambdaFunctionParameters"
        case redshiftDataParameters = "RedshiftDataParameters"
        case sageMakerPipelineParameters = "SageMakerPipelineParameters"
        case sqsQueueParameters = "SqsQueueParameters"
        case stepFunctionStateMachineParameters = "StepFunctionStateMachineParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchJobParameters = self.batchJobParameters {
            try encodeContainer.encode(batchJobParameters, forKey: .batchJobParameters)
        }
        if let cloudWatchLogsParameters = self.cloudWatchLogsParameters {
            try encodeContainer.encode(cloudWatchLogsParameters, forKey: .cloudWatchLogsParameters)
        }
        if let ecsTaskParameters = self.ecsTaskParameters {
            try encodeContainer.encode(ecsTaskParameters, forKey: .ecsTaskParameters)
        }
        if let eventBridgeEventBusParameters = self.eventBridgeEventBusParameters {
            try encodeContainer.encode(eventBridgeEventBusParameters, forKey: .eventBridgeEventBusParameters)
        }
        if let httpParameters = self.httpParameters {
            try encodeContainer.encode(httpParameters, forKey: .httpParameters)
        }
        if let inputTemplate = self.inputTemplate {
            try encodeContainer.encode(inputTemplate, forKey: .inputTemplate)
        }
        if let kinesisStreamParameters = self.kinesisStreamParameters {
            try encodeContainer.encode(kinesisStreamParameters, forKey: .kinesisStreamParameters)
        }
        if let lambdaFunctionParameters = self.lambdaFunctionParameters {
            try encodeContainer.encode(lambdaFunctionParameters, forKey: .lambdaFunctionParameters)
        }
        if let redshiftDataParameters = self.redshiftDataParameters {
            try encodeContainer.encode(redshiftDataParameters, forKey: .redshiftDataParameters)
        }
        if let sageMakerPipelineParameters = self.sageMakerPipelineParameters {
            try encodeContainer.encode(sageMakerPipelineParameters, forKey: .sageMakerPipelineParameters)
        }
        if let sqsQueueParameters = self.sqsQueueParameters {
            try encodeContainer.encode(sqsQueueParameters, forKey: .sqsQueueParameters)
        }
        if let stepFunctionStateMachineParameters = self.stepFunctionStateMachineParameters {
            try encodeContainer.encode(stepFunctionStateMachineParameters, forKey: .stepFunctionStateMachineParameters)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputTemplate)
        inputTemplate = inputTemplateDecoded
        let lambdaFunctionParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetLambdaFunctionParameters.self, forKey: .lambdaFunctionParameters)
        lambdaFunctionParameters = lambdaFunctionParametersDecoded
        let stepFunctionStateMachineParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetStateMachineParameters.self, forKey: .stepFunctionStateMachineParameters)
        stepFunctionStateMachineParameters = stepFunctionStateMachineParametersDecoded
        let kinesisStreamParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetKinesisStreamParameters.self, forKey: .kinesisStreamParameters)
        kinesisStreamParameters = kinesisStreamParametersDecoded
        let ecsTaskParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetEcsTaskParameters.self, forKey: .ecsTaskParameters)
        ecsTaskParameters = ecsTaskParametersDecoded
        let batchJobParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetBatchJobParameters.self, forKey: .batchJobParameters)
        batchJobParameters = batchJobParametersDecoded
        let sqsQueueParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetSqsQueueParameters.self, forKey: .sqsQueueParameters)
        sqsQueueParameters = sqsQueueParametersDecoded
        let httpParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetHttpParameters.self, forKey: .httpParameters)
        httpParameters = httpParametersDecoded
        let redshiftDataParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetRedshiftDataParameters.self, forKey: .redshiftDataParameters)
        redshiftDataParameters = redshiftDataParametersDecoded
        let sageMakerPipelineParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetSageMakerPipelineParameters.self, forKey: .sageMakerPipelineParameters)
        sageMakerPipelineParameters = sageMakerPipelineParametersDecoded
        let eventBridgeEventBusParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetEventBridgeEventBusParameters.self, forKey: .eventBridgeEventBusParameters)
        eventBridgeEventBusParameters = eventBridgeEventBusParametersDecoded
        let cloudWatchLogsParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetCloudWatchLogsParameters.self, forKey: .cloudWatchLogsParameters)
        cloudWatchLogsParameters = cloudWatchLogsParametersDecoded
    }
}

extension PipesClientTypes.PipeTargetParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipeTargetParameters(batchJobParameters: \(Swift.String(describing: batchJobParameters)), cloudWatchLogsParameters: \(Swift.String(describing: cloudWatchLogsParameters)), ecsTaskParameters: \(Swift.String(describing: ecsTaskParameters)), eventBridgeEventBusParameters: \(Swift.String(describing: eventBridgeEventBusParameters)), httpParameters: \(Swift.String(describing: httpParameters)), kinesisStreamParameters: \(Swift.String(describing: kinesisStreamParameters)), lambdaFunctionParameters: \(Swift.String(describing: lambdaFunctionParameters)), redshiftDataParameters: \(Swift.String(describing: redshiftDataParameters)), sageMakerPipelineParameters: \(Swift.String(describing: sageMakerPipelineParameters)), sqsQueueParameters: \(Swift.String(describing: sqsQueueParameters)), stepFunctionStateMachineParameters: \(Swift.String(describing: stepFunctionStateMachineParameters)), inputTemplate: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// The parameters required to set up a target for your pipe.
    public struct PipeTargetParameters: Swift.Equatable {
        /// The parameters for using an Batch job as a target.
        public var batchJobParameters: PipesClientTypes.PipeTargetBatchJobParameters?
        /// The parameters for using an CloudWatch Logs log stream as a target.
        public var cloudWatchLogsParameters: PipesClientTypes.PipeTargetCloudWatchLogsParameters?
        /// The parameters for using an Amazon ECS task as a target.
        public var ecsTaskParameters: PipesClientTypes.PipeTargetEcsTaskParameters?
        /// The parameters for using an EventBridge event bus as a target.
        public var eventBridgeEventBusParameters: PipesClientTypes.PipeTargetEventBridgeEventBusParameters?
        /// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations.
        public var httpParameters: PipesClientTypes.PipeTargetHttpParameters?
        /// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. For more information, see [The JavaScript Object Notation (JSON) Data Interchange Format](http://www.rfc-editor.org/rfc/rfc7159.txt).
        public var inputTemplate: Swift.String?
        /// The parameters for using a Kinesis stream as a source.
        public var kinesisStreamParameters: PipesClientTypes.PipeTargetKinesisStreamParameters?
        /// The parameters for using a Lambda function as a target.
        public var lambdaFunctionParameters: PipesClientTypes.PipeTargetLambdaFunctionParameters?
        /// These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API ExecuteStatement.
        public var redshiftDataParameters: PipesClientTypes.PipeTargetRedshiftDataParameters?
        /// The parameters for using a SageMaker pipeline as a target.
        public var sageMakerPipelineParameters: PipesClientTypes.PipeTargetSageMakerPipelineParameters?
        /// The parameters for using a Amazon SQS stream as a source.
        public var sqsQueueParameters: PipesClientTypes.PipeTargetSqsQueueParameters?
        /// The parameters for using a Step Functions state machine as a target.
        public var stepFunctionStateMachineParameters: PipesClientTypes.PipeTargetStateMachineParameters?

        public init (
            batchJobParameters: PipesClientTypes.PipeTargetBatchJobParameters? = nil,
            cloudWatchLogsParameters: PipesClientTypes.PipeTargetCloudWatchLogsParameters? = nil,
            ecsTaskParameters: PipesClientTypes.PipeTargetEcsTaskParameters? = nil,
            eventBridgeEventBusParameters: PipesClientTypes.PipeTargetEventBridgeEventBusParameters? = nil,
            httpParameters: PipesClientTypes.PipeTargetHttpParameters? = nil,
            inputTemplate: Swift.String? = nil,
            kinesisStreamParameters: PipesClientTypes.PipeTargetKinesisStreamParameters? = nil,
            lambdaFunctionParameters: PipesClientTypes.PipeTargetLambdaFunctionParameters? = nil,
            redshiftDataParameters: PipesClientTypes.PipeTargetRedshiftDataParameters? = nil,
            sageMakerPipelineParameters: PipesClientTypes.PipeTargetSageMakerPipelineParameters? = nil,
            sqsQueueParameters: PipesClientTypes.PipeTargetSqsQueueParameters? = nil,
            stepFunctionStateMachineParameters: PipesClientTypes.PipeTargetStateMachineParameters? = nil
        )
        {
            self.batchJobParameters = batchJobParameters
            self.cloudWatchLogsParameters = cloudWatchLogsParameters
            self.ecsTaskParameters = ecsTaskParameters
            self.eventBridgeEventBusParameters = eventBridgeEventBusParameters
            self.httpParameters = httpParameters
            self.inputTemplate = inputTemplate
            self.kinesisStreamParameters = kinesisStreamParameters
            self.lambdaFunctionParameters = lambdaFunctionParameters
            self.redshiftDataParameters = redshiftDataParameters
            self.sageMakerPipelineParameters = sageMakerPipelineParameters
            self.sqsQueueParameters = sqsQueueParameters
            self.stepFunctionStateMachineParameters = stepFunctionStateMachineParameters
        }
    }

}

extension PipesClientTypes.PipeTargetRedshiftDataParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case database = "Database"
        case dbUser = "DbUser"
        case secretManagerArn = "SecretManagerArn"
        case sqls = "Sqls"
        case statementName = "StatementName"
        case withEvent = "WithEvent"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let database = self.database {
            try encodeContainer.encode(database, forKey: .database)
        }
        if let dbUser = self.dbUser {
            try encodeContainer.encode(dbUser, forKey: .dbUser)
        }
        if let secretManagerArn = self.secretManagerArn {
            try encodeContainer.encode(secretManagerArn, forKey: .secretManagerArn)
        }
        if let sqls = sqls {
            var sqlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sqls)
            for sql0 in sqls {
                try sqlsContainer.encode(sql0)
            }
        }
        if let statementName = self.statementName {
            try encodeContainer.encode(statementName, forKey: .statementName)
        }
        if withEvent != false {
            try encodeContainer.encode(withEvent, forKey: .withEvent)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let secretManagerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretManagerArn)
        secretManagerArn = secretManagerArnDecoded
        let databaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .database)
        database = databaseDecoded
        let dbUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbUser)
        dbUser = dbUserDecoded
        let statementNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statementName)
        statementName = statementNameDecoded
        let withEventDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .withEvent) ?? false
        withEvent = withEventDecoded
        let sqlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sqls)
        var sqlsDecoded0:[Swift.String]? = nil
        if let sqlsContainer = sqlsContainer {
            sqlsDecoded0 = [Swift.String]()
            for string0 in sqlsContainer {
                if let string0 = string0 {
                    sqlsDecoded0?.append(string0)
                }
            }
        }
        sqls = sqlsDecoded0
    }
}

extension PipesClientTypes.PipeTargetRedshiftDataParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipeTargetRedshiftDataParameters(secretManagerArn: \(Swift.String(describing: secretManagerArn)), sqls: \(Swift.String(describing: sqls)), withEvent: \(Swift.String(describing: withEvent)), database: \"CONTENT_REDACTED\", dbUser: \"CONTENT_REDACTED\", statementName: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API ExecuteStatement.
    public struct PipeTargetRedshiftDataParameters: Swift.Equatable {
        /// The name of the database. Required when authenticating using temporary credentials.
        /// This member is required.
        public var database: Swift.String?
        /// The database user name. Required when authenticating using temporary credentials.
        public var dbUser: Swift.String?
        /// The name or ARN of the secret that enables access to the database. Required when authenticating using SageMaker.
        public var secretManagerArn: Swift.String?
        /// The SQL statement text to run.
        /// This member is required.
        public var sqls: [Swift.String]?
        /// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
        public var statementName: Swift.String?
        /// Indicates whether to send an event back to EventBridge after the SQL statement runs.
        public var withEvent: Swift.Bool

        public init (
            database: Swift.String? = nil,
            dbUser: Swift.String? = nil,
            secretManagerArn: Swift.String? = nil,
            sqls: [Swift.String]? = nil,
            statementName: Swift.String? = nil,
            withEvent: Swift.Bool = false
        )
        {
            self.database = database
            self.dbUser = dbUser
            self.secretManagerArn = secretManagerArn
            self.sqls = sqls
            self.statementName = statementName
            self.withEvent = withEvent
        }
    }

}

extension PipesClientTypes.PipeTargetSageMakerPipelineParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineParameterList = "PipelineParameterList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineParameterList = pipelineParameterList {
            var pipelineParameterListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineParameterList)
            for sagemakerpipelineparameter0 in pipelineParameterList {
                try pipelineParameterListContainer.encode(sagemakerpipelineparameter0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineParameterListContainer = try containerValues.decodeIfPresent([PipesClientTypes.SageMakerPipelineParameter?].self, forKey: .pipelineParameterList)
        var pipelineParameterListDecoded0:[PipesClientTypes.SageMakerPipelineParameter]? = nil
        if let pipelineParameterListContainer = pipelineParameterListContainer {
            pipelineParameterListDecoded0 = [PipesClientTypes.SageMakerPipelineParameter]()
            for structure0 in pipelineParameterListContainer {
                if let structure0 = structure0 {
                    pipelineParameterListDecoded0?.append(structure0)
                }
            }
        }
        pipelineParameterList = pipelineParameterListDecoded0
    }
}

extension PipesClientTypes {
    /// The parameters for using a SageMaker pipeline as a target.
    public struct PipeTargetSageMakerPipelineParameters: Swift.Equatable {
        /// List of Parameter names and values for SageMaker Model Building Pipeline execution.
        public var pipelineParameterList: [PipesClientTypes.SageMakerPipelineParameter]?

        public init (
            pipelineParameterList: [PipesClientTypes.SageMakerPipelineParameter]? = nil
        )
        {
            self.pipelineParameterList = pipelineParameterList
        }
    }

}

extension PipesClientTypes.PipeTargetSqsQueueParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageDeduplicationId = "MessageDeduplicationId"
        case messageGroupId = "MessageGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let messageDeduplicationId = self.messageDeduplicationId {
            try encodeContainer.encode(messageDeduplicationId, forKey: .messageDeduplicationId)
        }
        if let messageGroupId = self.messageGroupId {
            try encodeContainer.encode(messageGroupId, forKey: .messageGroupId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageGroupId)
        messageGroupId = messageGroupIdDecoded
        let messageDeduplicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageDeduplicationId)
        messageDeduplicationId = messageDeduplicationIdDecoded
    }
}

extension PipesClientTypes.PipeTargetSqsQueueParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipeTargetSqsQueueParameters(messageDeduplicationId: \"CONTENT_REDACTED\", messageGroupId: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// The parameters for using a Amazon SQS stream as a source.
    public struct PipeTargetSqsQueueParameters: Swift.Equatable {
        /// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages.
        public var messageDeduplicationId: Swift.String?
        /// The FIFO message group ID to use as the target.
        public var messageGroupId: Swift.String?

        public init (
            messageDeduplicationId: Swift.String? = nil,
            messageGroupId: Swift.String? = nil
        )
        {
            self.messageDeduplicationId = messageDeduplicationId
            self.messageGroupId = messageGroupId
        }
    }

}

extension PipesClientTypes.PipeTargetStateMachineParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invocationType = "InvocationType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invocationType = self.invocationType {
            try encodeContainer.encode(invocationType.rawValue, forKey: .invocationType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invocationTypeDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetInvocationType.self, forKey: .invocationType)
        invocationType = invocationTypeDecoded
    }
}

extension PipesClientTypes {
    /// The parameters for using a Step Functions state machine as a target.
    public struct PipeTargetStateMachineParameters: Swift.Equatable {
        /// Specify whether to wait for the state machine to finish or not.
        public var invocationType: PipesClientTypes.PipeTargetInvocationType?

        public init (
            invocationType: PipesClientTypes.PipeTargetInvocationType? = nil
        )
        {
            self.invocationType = invocationType
        }
    }

}

extension PipesClientTypes.PlacementConstraint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expression = self.expression {
            try encodeContainer.encode(expression, forKey: .expression)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PlacementConstraintType.self, forKey: .type)
        type = typeDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
    }
}

extension PipesClientTypes.PlacementConstraint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PlacementConstraint(type: \(Swift.String(describing: type)), expression: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// An object representing a constraint on task placement. To learn more, see [Task Placement Constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the Amazon Elastic Container Service Developer Guide.
    public struct PlacementConstraint: Swift.Equatable {
        /// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. To learn more, see [Cluster Query Language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the Amazon Elastic Container Service Developer Guide.
        public var expression: Swift.String?
        /// The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates.
        public var type: PipesClientTypes.PlacementConstraintType?

        public init (
            expression: Swift.String? = nil,
            type: PipesClientTypes.PlacementConstraintType? = nil
        )
        {
            self.expression = expression
            self.type = type
        }
    }

}

extension PipesClientTypes {
    public enum PlacementConstraintType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case distinctInstance
        case memberOf
        case sdkUnknown(Swift.String)

        public static var allCases: [PlacementConstraintType] {
            return [
                .distinctInstance,
                .memberOf,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .distinctInstance: return "distinctInstance"
            case .memberOf: return "memberOf"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PlacementConstraintType(rawValue: rawValue) ?? PlacementConstraintType.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes.PlacementStrategy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case field
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let field = self.field {
            try encodeContainer.encode(field, forKey: .field)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PlacementStrategyType.self, forKey: .type)
        type = typeDecoded
        let fieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .field)
        field = fieldDecoded
    }
}

extension PipesClientTypes.PlacementStrategy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PlacementStrategy(type: \(Swift.String(describing: type)), field: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// The task placement strategy for a task or service. To learn more, see [Task Placement Strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html) in the Amazon Elastic Container Service Service Developer Guide.
    public struct PlacementStrategy: Swift.Equatable {
        /// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
        public var field: Swift.String?
        /// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task).
        public var type: PipesClientTypes.PlacementStrategyType?

        public init (
            field: Swift.String? = nil,
            type: PipesClientTypes.PlacementStrategyType? = nil
        )
        {
            self.field = field
            self.type = type
        }
    }

}

extension PipesClientTypes {
    public enum PlacementStrategyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case binpack
        case random
        case spread
        case sdkUnknown(Swift.String)

        public static var allCases: [PlacementStrategyType] {
            return [
                .binpack,
                .random,
                .spread,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .binpack: return "binpack"
            case .random: return "random"
            case .spread: return "spread"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PlacementStrategyType(rawValue: rawValue) ?? PlacementStrategyType.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes {
    public enum PropagateTags: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case taskDefinition
        case sdkUnknown(Swift.String)

        public static var allCases: [PropagateTags] {
            return [
                .taskDefinition,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .taskDefinition: return "TASK_DEFINITION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PropagateTags(rawValue: rawValue) ?? PropagateTags.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes {
    public enum RequestedPipeState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case running
        case stopped
        case sdkUnknown(Swift.String)

        public static var allCases: [RequestedPipeState] {
            return [
                .running,
                .stopped,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .running: return "RUNNING"
            case .stopped: return "STOPPED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RequestedPipeState(rawValue: rawValue) ?? RequestedPipeState.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes {
    public enum RequestedPipeStateDescribeResponse: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleted
        case running
        case stopped
        case sdkUnknown(Swift.String)

        public static var allCases: [RequestedPipeStateDescribeResponse] {
            return [
                .deleted,
                .running,
                .stopped,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleted: return "DELETED"
            case .running: return "RUNNING"
            case .stopped: return "STOPPED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RequestedPipeStateDescribeResponse(rawValue: rawValue) ?? RequestedPipeStateDescribeResponse.sdkUnknown(rawValue)
        }
    }
}

extension PipesClientTypes.SageMakerPipelineParameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension PipesClientTypes.SageMakerPipelineParameter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SageMakerPipelineParameter(name: \"CONTENT_REDACTED\", value: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// Name/Value pair of a parameter to start execution of a SageMaker Model Building Pipeline.
    public struct SageMakerPipelineParameter: Swift.Equatable {
        /// Name of parameter to start execution of a SageMaker Model Building Pipeline.
        /// This member is required.
        public var name: Swift.String?
        /// Value of parameter to start execution of a SageMaker Model Building Pipeline.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension PipesClientTypes.SelfManagedKafkaAccessConfigurationCredentials: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case basicauth = "BasicAuth"
        case clientcertificatetlsauth = "ClientCertificateTlsAuth"
        case saslscram256auth = "SaslScram256Auth"
        case saslscram512auth = "SaslScram512Auth"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .basicauth(basicauth):
                try container.encode(basicauth, forKey: .basicauth)
            case let .clientcertificatetlsauth(clientcertificatetlsauth):
                try container.encode(clientcertificatetlsauth, forKey: .clientcertificatetlsauth)
            case let .saslscram256auth(saslscram256auth):
                try container.encode(saslscram256auth, forKey: .saslscram256auth)
            case let .saslscram512auth(saslscram512auth):
                try container.encode(saslscram512auth, forKey: .saslscram512auth)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let basicauthDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .basicauth)
        if let basicauth = basicauthDecoded {
            self = .basicauth(basicauth)
            return
        }
        let saslscram512authDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .saslscram512auth)
        if let saslscram512auth = saslscram512authDecoded {
            self = .saslscram512auth(saslscram512auth)
            return
        }
        let saslscram256authDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .saslscram256auth)
        if let saslscram256auth = saslscram256authDecoded {
            self = .saslscram256auth(saslscram256auth)
            return
        }
        let clientcertificatetlsauthDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .clientcertificatetlsauth)
        if let clientcertificatetlsauth = clientcertificatetlsauthDecoded {
            self = .clientcertificatetlsauth(clientcertificatetlsauth)
            return
        }
        self = .sdkUnknown("")
    }
}

extension PipesClientTypes {
    /// The Secrets Manager secret that stores your stream credentials.
    public enum SelfManagedKafkaAccessConfigurationCredentials: Swift.Equatable, Swift.Hashable {
        /// The ARN of the Secrets Manager secret.
        case basicauth(Swift.String)
        /// The ARN of the Secrets Manager secret.
        case saslscram512auth(Swift.String)
        /// The ARN of the Secrets Manager secret.
        case saslscram256auth(Swift.String)
        /// The ARN of the Secrets Manager secret.
        case clientcertificatetlsauth(Swift.String)
        case sdkUnknown(Swift.String)
    }

}

extension PipesClientTypes.SelfManagedKafkaAccessConfigurationVpc: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroup = "SecurityGroup"
        case subnets = "Subnets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroup = securityGroup {
            var securityGroupContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroup)
            for securitygroupid0 in securityGroup {
                try securityGroupContainer.encode(securitygroupid0)
            }
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for subnetid0 in subnets {
                try subnetsContainer.encode(subnetid0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let securityGroupContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroup)
        var securityGroupDecoded0:[Swift.String]? = nil
        if let securityGroupContainer = securityGroupContainer {
            securityGroupDecoded0 = [Swift.String]()
            for string0 in securityGroupContainer {
                if let string0 = string0 {
                    securityGroupDecoded0?.append(string0)
                }
            }
        }
        securityGroup = securityGroupDecoded0
    }
}

extension PipesClientTypes {
    /// This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used.
    public struct SelfManagedKafkaAccessConfigurationVpc: Swift.Equatable {
        /// Specifies the security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
        public var securityGroup: [Swift.String]?
        /// Specifies the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
        public var subnets: [Swift.String]?

        public init (
            securityGroup: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil
        )
        {
            self.securityGroup = securityGroup
            self.subnets = subnets
        }
    }

}

extension PipesClientTypes {
    public enum SelfManagedKafkaStartPosition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case latest
        case trimHorizon
        case sdkUnknown(Swift.String)

        public static var allCases: [SelfManagedKafkaStartPosition] {
            return [
                .latest,
                .trimHorizon,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .latest: return "LATEST"
            case .trimHorizon: return "TRIM_HORIZON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SelfManagedKafkaStartPosition(rawValue: rawValue) ?? SelfManagedKafkaStartPosition.sdkUnknown(rawValue)
        }
    }
}

extension ServiceQuotaExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.quotaCode = output.quotaCode
            self.resourceId = output.resourceId
            self.resourceType = output.resourceType
            self.serviceCode = output.serviceCode
        } else {
            self.message = nil
            self.quotaCode = nil
            self.resourceId = nil
            self.resourceType = nil
            self.serviceCode = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A quota has been exceeded.
public struct ServiceQuotaExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?
    /// The identifier of the quota that caused the exception.
    /// This member is required.
    public var quotaCode: Swift.String?
    /// The ID of the resource that caused the exception.
    /// This member is required.
    public var resourceId: Swift.String?
    /// The type of resource that caused the exception.
    /// This member is required.
    public var resourceType: Swift.String?
    /// The identifier of the service that caused the exception.
    /// This member is required.
    public var serviceCode: Swift.String?

    public init (
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.message = message
        self.quotaCode = quotaCode
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.serviceCode = serviceCode
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let resourceId: Swift.String?
    let resourceType: Swift.String?
    let serviceCode: Swift.String?
    let quotaCode: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case quotaCode
        case resourceId
        case resourceType
        case serviceCode
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let serviceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceCode)
        serviceCode = serviceCodeDecoded
        let quotaCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quotaCode)
        quotaCode = quotaCodeDecoded
    }
}

extension StartPipeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/v1/pipes/\(name.urlPercentEncoding())/start"
    }
}

public struct StartPipeInput: Swift.Equatable {
    /// The name of the pipe.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct StartPipeInputBody: Swift.Equatable {
}

extension StartPipeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension StartPipeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartPipeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartPipeOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalException(InternalException)
    case notFoundException(NotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartPipeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartPipeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.creationTime = output.creationTime
            self.currentState = output.currentState
            self.desiredState = output.desiredState
            self.lastModifiedTime = output.lastModifiedTime
            self.name = output.name
        } else {
            self.arn = nil
            self.creationTime = nil
            self.currentState = nil
            self.desiredState = nil
            self.lastModifiedTime = nil
            self.name = nil
        }
    }
}

public struct StartPipeOutputResponse: Swift.Equatable {
    /// The ARN of the pipe.
    public var arn: Swift.String?
    /// The time the pipe was created.
    public var creationTime: ClientRuntime.Date?
    /// The state the pipe is in.
    public var currentState: PipesClientTypes.PipeState?
    /// The state the pipe should be in.
    public var desiredState: PipesClientTypes.RequestedPipeState?
    /// When the pipe was last updated, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the pipe.
    public var name: Swift.String?

    public init (
        arn: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        currentState: PipesClientTypes.PipeState? = nil,
        desiredState: PipesClientTypes.RequestedPipeState? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.currentState = currentState
        self.desiredState = desiredState
        self.lastModifiedTime = lastModifiedTime
        self.name = name
    }
}

struct StartPipeOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let name: Swift.String?
    let desiredState: PipesClientTypes.RequestedPipeState?
    let currentState: PipesClientTypes.PipeState?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
}

extension StartPipeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationTime = "CreationTime"
        case currentState = "CurrentState"
        case desiredState = "DesiredState"
        case lastModifiedTime = "LastModifiedTime"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let desiredStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.RequestedPipeState.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let currentStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeState.self, forKey: .currentState)
        currentState = currentStateDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension StopPipeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/v1/pipes/\(name.urlPercentEncoding())/stop"
    }
}

public struct StopPipeInput: Swift.Equatable {
    /// The name of the pipe.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct StopPipeInputBody: Swift.Equatable {
}

extension StopPipeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension StopPipeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopPipeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopPipeOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalException(InternalException)
    case notFoundException(NotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopPipeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopPipeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.creationTime = output.creationTime
            self.currentState = output.currentState
            self.desiredState = output.desiredState
            self.lastModifiedTime = output.lastModifiedTime
            self.name = output.name
        } else {
            self.arn = nil
            self.creationTime = nil
            self.currentState = nil
            self.desiredState = nil
            self.lastModifiedTime = nil
            self.name = nil
        }
    }
}

public struct StopPipeOutputResponse: Swift.Equatable {
    /// The ARN of the pipe.
    public var arn: Swift.String?
    /// The time the pipe was created.
    public var creationTime: ClientRuntime.Date?
    /// The state the pipe is in.
    public var currentState: PipesClientTypes.PipeState?
    /// The state the pipe should be in.
    public var desiredState: PipesClientTypes.RequestedPipeState?
    /// When the pipe was last updated, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the pipe.
    public var name: Swift.String?

    public init (
        arn: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        currentState: PipesClientTypes.PipeState? = nil,
        desiredState: PipesClientTypes.RequestedPipeState? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.currentState = currentState
        self.desiredState = desiredState
        self.lastModifiedTime = lastModifiedTime
        self.name = name
    }
}

struct StopPipeOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let name: Swift.String?
    let desiredState: PipesClientTypes.RequestedPipeState?
    let currentState: PipesClientTypes.PipeState?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
}

extension StopPipeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationTime = "CreationTime"
        case currentState = "CurrentState"
        case desiredState = "DesiredState"
        case lastModifiedTime = "LastModifiedTime"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let desiredStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.RequestedPipeState.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let currentStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeState.self, forKey: .currentState)
        currentState = currentStateDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension PipesClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension PipesClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \"CONTENT_REDACTED\")"}
}

extension PipesClientTypes {
    /// A key-value pair associated with an Amazon Web Services resource. In EventBridge, rules and event buses support tagging.
    public struct Tag: Swift.Equatable {
        /// A string you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.
        /// This member is required.
        public var key: Swift.String?
        /// The value for the specified tag key.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The ARN of the pipe.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of key-value pairs associated with the pipe.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case notFoundException(NotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            self.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        } else {
            self.retryAfterSeconds = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.quotaCode = output.quotaCode
            self.serviceCode = output.serviceCode
        } else {
            self.message = nil
            self.quotaCode = nil
            self.serviceCode = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An action was throttled.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?
    /// The identifier of the quota that caused the exception.
    public var quotaCode: Swift.String?
    /// The number of seconds to wait before retrying the action that caused the exception.
    public var retryAfterSeconds: Swift.Int?
    /// The identifier of the service that caused the exception.
    public var serviceCode: Swift.String?

    public init (
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        retryAfterSeconds: Swift.Int? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.message = message
        self.quotaCode = quotaCode
        self.retryAfterSeconds = retryAfterSeconds
        self.serviceCode = serviceCode
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let serviceCode: Swift.String?
    let quotaCode: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case quotaCode
        case serviceCode
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let serviceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceCode)
        serviceCode = serviceCodeDecoded
        let quotaCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quotaCode)
        quotaCode = quotaCodeDecoded
    }
}

extension UntagResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let tagKeys = tagKeys else {
                let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            return items
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The ARN of the pipe.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tag keys to remove from the pipe.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case notFoundException(NotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdatePipeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdatePipeInput(desiredState: \(Swift.String(describing: desiredState)), enrichment: \(Swift.String(describing: enrichment)), enrichmentParameters: \(Swift.String(describing: enrichmentParameters)), name: \(Swift.String(describing: name)), roleArn: \(Swift.String(describing: roleArn)), sourceParameters: \(Swift.String(describing: sourceParameters)), target: \(Swift.String(describing: target)), targetParameters: \(Swift.String(describing: targetParameters)), description: \"CONTENT_REDACTED\")"}
}

extension UpdatePipeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case desiredState = "DesiredState"
        case enrichment = "Enrichment"
        case enrichmentParameters = "EnrichmentParameters"
        case roleArn = "RoleArn"
        case sourceParameters = "SourceParameters"
        case target = "Target"
        case targetParameters = "TargetParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let desiredState = self.desiredState {
            try encodeContainer.encode(desiredState.rawValue, forKey: .desiredState)
        }
        if let enrichment = self.enrichment {
            try encodeContainer.encode(enrichment, forKey: .enrichment)
        }
        if let enrichmentParameters = self.enrichmentParameters {
            try encodeContainer.encode(enrichmentParameters, forKey: .enrichmentParameters)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let sourceParameters = self.sourceParameters {
            try encodeContainer.encode(sourceParameters, forKey: .sourceParameters)
        }
        if let target = self.target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if let targetParameters = self.targetParameters {
            try encodeContainer.encode(targetParameters, forKey: .targetParameters)
        }
    }
}

extension UpdatePipeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/v1/pipes/\(name.urlPercentEncoding())"
    }
}

public struct UpdatePipeInput: Swift.Equatable {
    /// A description of the pipe.
    public var description: Swift.String?
    /// The state the pipe should be in.
    public var desiredState: PipesClientTypes.RequestedPipeState?
    /// The ARN of the enrichment resource.
    public var enrichment: Swift.String?
    /// The parameters required to set up enrichment on your pipe.
    public var enrichmentParameters: PipesClientTypes.PipeEnrichmentParameters?
    /// The name of the pipe.
    /// This member is required.
    public var name: Swift.String?
    /// The ARN of the role that allows the pipe to send data to the target.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The parameters required to set up a source for your pipe.
    public var sourceParameters: PipesClientTypes.UpdatePipeSourceParameters?
    /// The ARN of the target resource.
    public var target: Swift.String?
    /// The parameters required to set up a target for your pipe.
    public var targetParameters: PipesClientTypes.PipeTargetParameters?

    public init (
        description: Swift.String? = nil,
        desiredState: PipesClientTypes.RequestedPipeState? = nil,
        enrichment: Swift.String? = nil,
        enrichmentParameters: PipesClientTypes.PipeEnrichmentParameters? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceParameters: PipesClientTypes.UpdatePipeSourceParameters? = nil,
        target: Swift.String? = nil,
        targetParameters: PipesClientTypes.PipeTargetParameters? = nil
    )
    {
        self.description = description
        self.desiredState = desiredState
        self.enrichment = enrichment
        self.enrichmentParameters = enrichmentParameters
        self.name = name
        self.roleArn = roleArn
        self.sourceParameters = sourceParameters
        self.target = target
        self.targetParameters = targetParameters
    }
}

struct UpdatePipeInputBody: Swift.Equatable {
    let description: Swift.String?
    let desiredState: PipesClientTypes.RequestedPipeState?
    let sourceParameters: PipesClientTypes.UpdatePipeSourceParameters?
    let enrichment: Swift.String?
    let enrichmentParameters: PipesClientTypes.PipeEnrichmentParameters?
    let target: Swift.String?
    let targetParameters: PipesClientTypes.PipeTargetParameters?
    let roleArn: Swift.String?
}

extension UpdatePipeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case desiredState = "DesiredState"
        case enrichment = "Enrichment"
        case enrichmentParameters = "EnrichmentParameters"
        case roleArn = "RoleArn"
        case sourceParameters = "SourceParameters"
        case target = "Target"
        case targetParameters = "TargetParameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let desiredStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.RequestedPipeState.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let sourceParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.UpdatePipeSourceParameters.self, forKey: .sourceParameters)
        sourceParameters = sourceParametersDecoded
        let enrichmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enrichment)
        enrichment = enrichmentDecoded
        let enrichmentParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeEnrichmentParameters.self, forKey: .enrichmentParameters)
        enrichmentParameters = enrichmentParametersDecoded
        let targetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .target)
        target = targetDecoded
        let targetParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeTargetParameters.self, forKey: .targetParameters)
        targetParameters = targetParametersDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension UpdatePipeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePipeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdatePipeOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalException(InternalException)
    case notFoundException(NotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdatePipeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdatePipeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.creationTime = output.creationTime
            self.currentState = output.currentState
            self.desiredState = output.desiredState
            self.lastModifiedTime = output.lastModifiedTime
            self.name = output.name
        } else {
            self.arn = nil
            self.creationTime = nil
            self.currentState = nil
            self.desiredState = nil
            self.lastModifiedTime = nil
            self.name = nil
        }
    }
}

public struct UpdatePipeOutputResponse: Swift.Equatable {
    /// The ARN of the pipe.
    public var arn: Swift.String?
    /// The time the pipe was created.
    public var creationTime: ClientRuntime.Date?
    /// The state the pipe is in.
    public var currentState: PipesClientTypes.PipeState?
    /// The state the pipe should be in.
    public var desiredState: PipesClientTypes.RequestedPipeState?
    /// When the pipe was last updated, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the pipe.
    public var name: Swift.String?

    public init (
        arn: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        currentState: PipesClientTypes.PipeState? = nil,
        desiredState: PipesClientTypes.RequestedPipeState? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.currentState = currentState
        self.desiredState = desiredState
        self.lastModifiedTime = lastModifiedTime
        self.name = name
    }
}

struct UpdatePipeOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let name: Swift.String?
    let desiredState: PipesClientTypes.RequestedPipeState?
    let currentState: PipesClientTypes.PipeState?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
}

extension UpdatePipeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationTime = "CreationTime"
        case currentState = "CurrentState"
        case desiredState = "DesiredState"
        case lastModifiedTime = "LastModifiedTime"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let desiredStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.RequestedPipeState.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let currentStateDecoded = try containerValues.decodeIfPresent(PipesClientTypes.PipeState.self, forKey: .currentState)
        currentState = currentStateDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension PipesClientTypes.UpdatePipeSourceActiveMQBrokerParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case credentials = "Credentials"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let credentials = self.credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let credentialsDecoded = try containerValues.decodeIfPresent(PipesClientTypes.MQBrokerAccessCredentials.self, forKey: .credentials)
        credentials = credentialsDecoded
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
    }
}

extension PipesClientTypes {
    /// The parameters for using an Active MQ broker as a source.
    public struct UpdatePipeSourceActiveMQBrokerParameters: Swift.Equatable {
        /// The maximum number of records to include in each batch.
        public var batchSize: Swift.Int?
        /// The credentials needed to access the resource.
        /// This member is required.
        public var credentials: PipesClientTypes.MQBrokerAccessCredentials?
        /// The maximum length of a time to wait for events.
        public var maximumBatchingWindowInSeconds: Swift.Int?

        public init (
            batchSize: Swift.Int? = nil,
            credentials: PipesClientTypes.MQBrokerAccessCredentials? = nil,
            maximumBatchingWindowInSeconds: Swift.Int? = nil
        )
        {
            self.batchSize = batchSize
            self.credentials = credentials
            self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
        }
    }

}

extension PipesClientTypes.UpdatePipeSourceDynamoDBStreamParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case deadLetterConfig = "DeadLetterConfig"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
        case maximumRecordAgeInSeconds = "MaximumRecordAgeInSeconds"
        case maximumRetryAttempts = "MaximumRetryAttempts"
        case onPartialBatchItemFailure = "OnPartialBatchItemFailure"
        case parallelizationFactor = "ParallelizationFactor"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let deadLetterConfig = self.deadLetterConfig {
            try encodeContainer.encode(deadLetterConfig, forKey: .deadLetterConfig)
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
        if let maximumRecordAgeInSeconds = self.maximumRecordAgeInSeconds {
            try encodeContainer.encode(maximumRecordAgeInSeconds, forKey: .maximumRecordAgeInSeconds)
        }
        if let maximumRetryAttempts = self.maximumRetryAttempts {
            try encodeContainer.encode(maximumRetryAttempts, forKey: .maximumRetryAttempts)
        }
        if let onPartialBatchItemFailure = self.onPartialBatchItemFailure {
            try encodeContainer.encode(onPartialBatchItemFailure.rawValue, forKey: .onPartialBatchItemFailure)
        }
        if let parallelizationFactor = self.parallelizationFactor {
            try encodeContainer.encode(parallelizationFactor, forKey: .parallelizationFactor)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let deadLetterConfigDecoded = try containerValues.decodeIfPresent(PipesClientTypes.DeadLetterConfig.self, forKey: .deadLetterConfig)
        deadLetterConfig = deadLetterConfigDecoded
        let onPartialBatchItemFailureDecoded = try containerValues.decodeIfPresent(PipesClientTypes.OnPartialBatchItemFailureStreams.self, forKey: .onPartialBatchItemFailure)
        onPartialBatchItemFailure = onPartialBatchItemFailureDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
        let maximumRecordAgeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumRecordAgeInSeconds)
        maximumRecordAgeInSeconds = maximumRecordAgeInSecondsDecoded
        let maximumRetryAttemptsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumRetryAttempts)
        maximumRetryAttempts = maximumRetryAttemptsDecoded
        let parallelizationFactorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parallelizationFactor)
        parallelizationFactor = parallelizationFactorDecoded
    }
}

extension PipesClientTypes {
    /// The parameters for using a DynamoDB stream as a source.
    public struct UpdatePipeSourceDynamoDBStreamParameters: Swift.Equatable {
        /// The maximum number of records to include in each batch.
        public var batchSize: Swift.Int?
        /// Define the target queue to send dead-letter queue events to.
        public var deadLetterConfig: PipesClientTypes.DeadLetterConfig?
        /// The maximum length of a time to wait for events.
        public var maximumBatchingWindowInSeconds: Swift.Int?
        /// (Streams only) Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records.
        public var maximumRecordAgeInSeconds: Swift.Int?
        /// (Streams only) Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source.
        public var maximumRetryAttempts: Swift.Int?
        /// (Streams only) Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch.
        public var onPartialBatchItemFailure: PipesClientTypes.OnPartialBatchItemFailureStreams?
        /// (Streams only) The number of batches to process concurrently from each shard. The default value is 1.
        public var parallelizationFactor: Swift.Int?

        public init (
            batchSize: Swift.Int? = nil,
            deadLetterConfig: PipesClientTypes.DeadLetterConfig? = nil,
            maximumBatchingWindowInSeconds: Swift.Int? = nil,
            maximumRecordAgeInSeconds: Swift.Int? = nil,
            maximumRetryAttempts: Swift.Int? = nil,
            onPartialBatchItemFailure: PipesClientTypes.OnPartialBatchItemFailureStreams? = nil,
            parallelizationFactor: Swift.Int? = nil
        )
        {
            self.batchSize = batchSize
            self.deadLetterConfig = deadLetterConfig
            self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
            self.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds
            self.maximumRetryAttempts = maximumRetryAttempts
            self.onPartialBatchItemFailure = onPartialBatchItemFailure
            self.parallelizationFactor = parallelizationFactor
        }
    }

}

extension PipesClientTypes.UpdatePipeSourceKinesisStreamParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case deadLetterConfig = "DeadLetterConfig"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
        case maximumRecordAgeInSeconds = "MaximumRecordAgeInSeconds"
        case maximumRetryAttempts = "MaximumRetryAttempts"
        case onPartialBatchItemFailure = "OnPartialBatchItemFailure"
        case parallelizationFactor = "ParallelizationFactor"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let deadLetterConfig = self.deadLetterConfig {
            try encodeContainer.encode(deadLetterConfig, forKey: .deadLetterConfig)
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
        if let maximumRecordAgeInSeconds = self.maximumRecordAgeInSeconds {
            try encodeContainer.encode(maximumRecordAgeInSeconds, forKey: .maximumRecordAgeInSeconds)
        }
        if let maximumRetryAttempts = self.maximumRetryAttempts {
            try encodeContainer.encode(maximumRetryAttempts, forKey: .maximumRetryAttempts)
        }
        if let onPartialBatchItemFailure = self.onPartialBatchItemFailure {
            try encodeContainer.encode(onPartialBatchItemFailure.rawValue, forKey: .onPartialBatchItemFailure)
        }
        if let parallelizationFactor = self.parallelizationFactor {
            try encodeContainer.encode(parallelizationFactor, forKey: .parallelizationFactor)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let deadLetterConfigDecoded = try containerValues.decodeIfPresent(PipesClientTypes.DeadLetterConfig.self, forKey: .deadLetterConfig)
        deadLetterConfig = deadLetterConfigDecoded
        let onPartialBatchItemFailureDecoded = try containerValues.decodeIfPresent(PipesClientTypes.OnPartialBatchItemFailureStreams.self, forKey: .onPartialBatchItemFailure)
        onPartialBatchItemFailure = onPartialBatchItemFailureDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
        let maximumRecordAgeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumRecordAgeInSeconds)
        maximumRecordAgeInSeconds = maximumRecordAgeInSecondsDecoded
        let maximumRetryAttemptsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumRetryAttempts)
        maximumRetryAttempts = maximumRetryAttemptsDecoded
        let parallelizationFactorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parallelizationFactor)
        parallelizationFactor = parallelizationFactorDecoded
    }
}

extension PipesClientTypes {
    /// The parameters for using a Kinesis stream as a source.
    public struct UpdatePipeSourceKinesisStreamParameters: Swift.Equatable {
        /// The maximum number of records to include in each batch.
        public var batchSize: Swift.Int?
        /// Define the target queue to send dead-letter queue events to.
        public var deadLetterConfig: PipesClientTypes.DeadLetterConfig?
        /// The maximum length of a time to wait for events.
        public var maximumBatchingWindowInSeconds: Swift.Int?
        /// (Streams only) Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records.
        public var maximumRecordAgeInSeconds: Swift.Int?
        /// (Streams only) Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source.
        public var maximumRetryAttempts: Swift.Int?
        /// (Streams only) Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch.
        public var onPartialBatchItemFailure: PipesClientTypes.OnPartialBatchItemFailureStreams?
        /// (Streams only) The number of batches to process concurrently from each shard. The default value is 1.
        public var parallelizationFactor: Swift.Int?

        public init (
            batchSize: Swift.Int? = nil,
            deadLetterConfig: PipesClientTypes.DeadLetterConfig? = nil,
            maximumBatchingWindowInSeconds: Swift.Int? = nil,
            maximumRecordAgeInSeconds: Swift.Int? = nil,
            maximumRetryAttempts: Swift.Int? = nil,
            onPartialBatchItemFailure: PipesClientTypes.OnPartialBatchItemFailureStreams? = nil,
            parallelizationFactor: Swift.Int? = nil
        )
        {
            self.batchSize = batchSize
            self.deadLetterConfig = deadLetterConfig
            self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
            self.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds
            self.maximumRetryAttempts = maximumRetryAttempts
            self.onPartialBatchItemFailure = onPartialBatchItemFailure
            self.parallelizationFactor = parallelizationFactor
        }
    }

}

extension PipesClientTypes.UpdatePipeSourceManagedStreamingKafkaParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case credentials = "Credentials"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let credentials = self.credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let credentialsDecoded = try containerValues.decodeIfPresent(PipesClientTypes.MSKAccessCredentials.self, forKey: .credentials)
        credentials = credentialsDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
    }
}

extension PipesClientTypes {
    /// The parameters for using an MSK stream as a source.
    public struct UpdatePipeSourceManagedStreamingKafkaParameters: Swift.Equatable {
        /// The maximum number of records to include in each batch.
        public var batchSize: Swift.Int?
        /// The credentials needed to access the resource.
        public var credentials: PipesClientTypes.MSKAccessCredentials?
        /// The maximum length of a time to wait for events.
        public var maximumBatchingWindowInSeconds: Swift.Int?

        public init (
            batchSize: Swift.Int? = nil,
            credentials: PipesClientTypes.MSKAccessCredentials? = nil,
            maximumBatchingWindowInSeconds: Swift.Int? = nil
        )
        {
            self.batchSize = batchSize
            self.credentials = credentials
            self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
        }
    }

}

extension PipesClientTypes.UpdatePipeSourceParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeMQBrokerParameters = "ActiveMQBrokerParameters"
        case dynamoDBStreamParameters = "DynamoDBStreamParameters"
        case filterCriteria = "FilterCriteria"
        case kinesisStreamParameters = "KinesisStreamParameters"
        case managedStreamingKafkaParameters = "ManagedStreamingKafkaParameters"
        case rabbitMQBrokerParameters = "RabbitMQBrokerParameters"
        case selfManagedKafkaParameters = "SelfManagedKafkaParameters"
        case sqsQueueParameters = "SqsQueueParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeMQBrokerParameters = self.activeMQBrokerParameters {
            try encodeContainer.encode(activeMQBrokerParameters, forKey: .activeMQBrokerParameters)
        }
        if let dynamoDBStreamParameters = self.dynamoDBStreamParameters {
            try encodeContainer.encode(dynamoDBStreamParameters, forKey: .dynamoDBStreamParameters)
        }
        if let filterCriteria = self.filterCriteria {
            try encodeContainer.encode(filterCriteria, forKey: .filterCriteria)
        }
        if let kinesisStreamParameters = self.kinesisStreamParameters {
            try encodeContainer.encode(kinesisStreamParameters, forKey: .kinesisStreamParameters)
        }
        if let managedStreamingKafkaParameters = self.managedStreamingKafkaParameters {
            try encodeContainer.encode(managedStreamingKafkaParameters, forKey: .managedStreamingKafkaParameters)
        }
        if let rabbitMQBrokerParameters = self.rabbitMQBrokerParameters {
            try encodeContainer.encode(rabbitMQBrokerParameters, forKey: .rabbitMQBrokerParameters)
        }
        if let selfManagedKafkaParameters = self.selfManagedKafkaParameters {
            try encodeContainer.encode(selfManagedKafkaParameters, forKey: .selfManagedKafkaParameters)
        }
        if let sqsQueueParameters = self.sqsQueueParameters {
            try encodeContainer.encode(sqsQueueParameters, forKey: .sqsQueueParameters)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterCriteriaDecoded = try containerValues.decodeIfPresent(PipesClientTypes.FilterCriteria.self, forKey: .filterCriteria)
        filterCriteria = filterCriteriaDecoded
        let kinesisStreamParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.UpdatePipeSourceKinesisStreamParameters.self, forKey: .kinesisStreamParameters)
        kinesisStreamParameters = kinesisStreamParametersDecoded
        let dynamoDBStreamParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.UpdatePipeSourceDynamoDBStreamParameters.self, forKey: .dynamoDBStreamParameters)
        dynamoDBStreamParameters = dynamoDBStreamParametersDecoded
        let sqsQueueParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.UpdatePipeSourceSqsQueueParameters.self, forKey: .sqsQueueParameters)
        sqsQueueParameters = sqsQueueParametersDecoded
        let activeMQBrokerParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.UpdatePipeSourceActiveMQBrokerParameters.self, forKey: .activeMQBrokerParameters)
        activeMQBrokerParameters = activeMQBrokerParametersDecoded
        let rabbitMQBrokerParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.UpdatePipeSourceRabbitMQBrokerParameters.self, forKey: .rabbitMQBrokerParameters)
        rabbitMQBrokerParameters = rabbitMQBrokerParametersDecoded
        let managedStreamingKafkaParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.UpdatePipeSourceManagedStreamingKafkaParameters.self, forKey: .managedStreamingKafkaParameters)
        managedStreamingKafkaParameters = managedStreamingKafkaParametersDecoded
        let selfManagedKafkaParametersDecoded = try containerValues.decodeIfPresent(PipesClientTypes.UpdatePipeSourceSelfManagedKafkaParameters.self, forKey: .selfManagedKafkaParameters)
        selfManagedKafkaParameters = selfManagedKafkaParametersDecoded
    }
}

extension PipesClientTypes {
    /// The parameters required to set up a source for your pipe.
    public struct UpdatePipeSourceParameters: Swift.Equatable {
        /// The parameters for using an Active MQ broker as a source.
        public var activeMQBrokerParameters: PipesClientTypes.UpdatePipeSourceActiveMQBrokerParameters?
        /// The parameters for using a DynamoDB stream as a source.
        public var dynamoDBStreamParameters: PipesClientTypes.UpdatePipeSourceDynamoDBStreamParameters?
        /// The collection of event patterns used to filter events. For more information, see [Events and Event Patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html) in the Amazon EventBridge User Guide.
        public var filterCriteria: PipesClientTypes.FilterCriteria?
        /// The parameters for using a Kinesis stream as a source.
        public var kinesisStreamParameters: PipesClientTypes.UpdatePipeSourceKinesisStreamParameters?
        /// The parameters for using an MSK stream as a source.
        public var managedStreamingKafkaParameters: PipesClientTypes.UpdatePipeSourceManagedStreamingKafkaParameters?
        /// The parameters for using a Rabbit MQ broker as a source.
        public var rabbitMQBrokerParameters: PipesClientTypes.UpdatePipeSourceRabbitMQBrokerParameters?
        /// The parameters for using a self-managed Apache Kafka stream as a source.
        public var selfManagedKafkaParameters: PipesClientTypes.UpdatePipeSourceSelfManagedKafkaParameters?
        /// The parameters for using a Amazon SQS stream as a source.
        public var sqsQueueParameters: PipesClientTypes.UpdatePipeSourceSqsQueueParameters?

        public init (
            activeMQBrokerParameters: PipesClientTypes.UpdatePipeSourceActiveMQBrokerParameters? = nil,
            dynamoDBStreamParameters: PipesClientTypes.UpdatePipeSourceDynamoDBStreamParameters? = nil,
            filterCriteria: PipesClientTypes.FilterCriteria? = nil,
            kinesisStreamParameters: PipesClientTypes.UpdatePipeSourceKinesisStreamParameters? = nil,
            managedStreamingKafkaParameters: PipesClientTypes.UpdatePipeSourceManagedStreamingKafkaParameters? = nil,
            rabbitMQBrokerParameters: PipesClientTypes.UpdatePipeSourceRabbitMQBrokerParameters? = nil,
            selfManagedKafkaParameters: PipesClientTypes.UpdatePipeSourceSelfManagedKafkaParameters? = nil,
            sqsQueueParameters: PipesClientTypes.UpdatePipeSourceSqsQueueParameters? = nil
        )
        {
            self.activeMQBrokerParameters = activeMQBrokerParameters
            self.dynamoDBStreamParameters = dynamoDBStreamParameters
            self.filterCriteria = filterCriteria
            self.kinesisStreamParameters = kinesisStreamParameters
            self.managedStreamingKafkaParameters = managedStreamingKafkaParameters
            self.rabbitMQBrokerParameters = rabbitMQBrokerParameters
            self.selfManagedKafkaParameters = selfManagedKafkaParameters
            self.sqsQueueParameters = sqsQueueParameters
        }
    }

}

extension PipesClientTypes.UpdatePipeSourceRabbitMQBrokerParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case credentials = "Credentials"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let credentials = self.credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let credentialsDecoded = try containerValues.decodeIfPresent(PipesClientTypes.MQBrokerAccessCredentials.self, forKey: .credentials)
        credentials = credentialsDecoded
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
    }
}

extension PipesClientTypes {
    /// The parameters for using a Rabbit MQ broker as a source.
    public struct UpdatePipeSourceRabbitMQBrokerParameters: Swift.Equatable {
        /// The maximum number of records to include in each batch.
        public var batchSize: Swift.Int?
        /// The credentials needed to access the resource.
        /// This member is required.
        public var credentials: PipesClientTypes.MQBrokerAccessCredentials?
        /// The maximum length of a time to wait for events.
        public var maximumBatchingWindowInSeconds: Swift.Int?

        public init (
            batchSize: Swift.Int? = nil,
            credentials: PipesClientTypes.MQBrokerAccessCredentials? = nil,
            maximumBatchingWindowInSeconds: Swift.Int? = nil
        )
        {
            self.batchSize = batchSize
            self.credentials = credentials
            self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
        }
    }

}

extension PipesClientTypes.UpdatePipeSourceSelfManagedKafkaParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case credentials = "Credentials"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
        case serverRootCaCertificate = "ServerRootCaCertificate"
        case vpc = "Vpc"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let credentials = self.credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
        if let serverRootCaCertificate = self.serverRootCaCertificate {
            try encodeContainer.encode(serverRootCaCertificate, forKey: .serverRootCaCertificate)
        }
        if let vpc = self.vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
        let credentialsDecoded = try containerValues.decodeIfPresent(PipesClientTypes.SelfManagedKafkaAccessConfigurationCredentials.self, forKey: .credentials)
        credentials = credentialsDecoded
        let serverRootCaCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverRootCaCertificate)
        serverRootCaCertificate = serverRootCaCertificateDecoded
        let vpcDecoded = try containerValues.decodeIfPresent(PipesClientTypes.SelfManagedKafkaAccessConfigurationVpc.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension PipesClientTypes {
    /// The parameters for using a self-managed Apache Kafka stream as a source.
    public struct UpdatePipeSourceSelfManagedKafkaParameters: Swift.Equatable {
        /// The maximum number of records to include in each batch.
        public var batchSize: Swift.Int?
        /// The credentials needed to access the resource.
        public var credentials: PipesClientTypes.SelfManagedKafkaAccessConfigurationCredentials?
        /// The maximum length of a time to wait for events.
        public var maximumBatchingWindowInSeconds: Swift.Int?
        /// The ARN of the Secrets Manager secret used for certification.
        public var serverRootCaCertificate: Swift.String?
        /// This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used.
        public var vpc: PipesClientTypes.SelfManagedKafkaAccessConfigurationVpc?

        public init (
            batchSize: Swift.Int? = nil,
            credentials: PipesClientTypes.SelfManagedKafkaAccessConfigurationCredentials? = nil,
            maximumBatchingWindowInSeconds: Swift.Int? = nil,
            serverRootCaCertificate: Swift.String? = nil,
            vpc: PipesClientTypes.SelfManagedKafkaAccessConfigurationVpc? = nil
        )
        {
            self.batchSize = batchSize
            self.credentials = credentials
            self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
            self.serverRootCaCertificate = serverRootCaCertificate
            self.vpc = vpc
        }
    }

}

extension PipesClientTypes.UpdatePipeSourceSqsQueueParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
    }
}

extension PipesClientTypes {
    /// The parameters for using a Amazon SQS stream as a source.
    public struct UpdatePipeSourceSqsQueueParameters: Swift.Equatable {
        /// The maximum number of records to include in each batch.
        public var batchSize: Swift.Int?
        /// The maximum length of a time to wait for events.
        public var maximumBatchingWindowInSeconds: Swift.Int?

        public init (
            batchSize: Swift.Int? = nil,
            maximumBatchingWindowInSeconds: Swift.Int? = nil
        )
        {
            self.batchSize = batchSize
            self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
        }
    }

}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.fieldList = output.fieldList
            self.message = output.message
        } else {
            self.fieldList = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that an error has occurred while performing a validate operation.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The list of fields for which validation failed and the corresponding failure messages.
    public var fieldList: [PipesClientTypes.ValidationExceptionField]?
    public var message: Swift.String?

    public init (
        fieldList: [PipesClientTypes.ValidationExceptionField]? = nil,
        message: Swift.String? = nil
    )
    {
        self.fieldList = fieldList
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let fieldList: [PipesClientTypes.ValidationExceptionField]?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldList
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let fieldListContainer = try containerValues.decodeIfPresent([PipesClientTypes.ValidationExceptionField?].self, forKey: .fieldList)
        var fieldListDecoded0:[PipesClientTypes.ValidationExceptionField]? = nil
        if let fieldListContainer = fieldListContainer {
            fieldListDecoded0 = [PipesClientTypes.ValidationExceptionField]()
            for structure0 in fieldListContainer {
                if let structure0 = structure0 {
                    fieldListDecoded0?.append(structure0)
                }
            }
        }
        fieldList = fieldListDecoded0
    }
}

extension PipesClientTypes.ValidationExceptionField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PipesClientTypes {
    /// Indicates that an error has occurred while performing a validate operation.
    public struct ValidationExceptionField: Swift.Equatable {
        /// The message of the exception.
        /// This member is required.
        public var message: Swift.String?
        /// The name of the exception.
        /// This member is required.
        public var name: Swift.String?

        public init (
            message: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.message = message
            self.name = name
        }
    }

}
