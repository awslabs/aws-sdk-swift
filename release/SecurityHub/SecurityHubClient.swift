// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class SecurityHubClient {
    let client: SdkHttpClient
    let config: SecurityHubClientConfiguration
    let serviceName = "SecurityHub"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: SecurityHubClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class SecurityHubClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> SecurityHubClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try SecurityHubClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension SecurityHubClient: SecurityHubClientProtocol {
    /// <p>Accepts the invitation to be a member account and be monitored by the Security Hub administrator
    ///          account that the invitation was sent from.</p>
    ///          <p>This operation is only used by member accounts that are not added through
    ///          Organizations.</p>
    ///          <p>When the member account accepts the invitation, permission is granted to the administrator
    ///          account to view findings generated in the member account.</p>
    public func acceptAdministratorInvitation(input: AcceptAdministratorInvitationInput, completion: @escaping (SdkResult<AcceptAdministratorInvitationOutput, AcceptAdministratorInvitationOutputError>) -> Void)
    {
        let urlPath = "/administrator"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "acceptAdministratorInvitation")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AcceptAdministratorInvitationInput, AcceptAdministratorInvitationOutput, AcceptAdministratorInvitationOutputError>(id: "acceptAdministratorInvitation")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AcceptAdministratorInvitationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AcceptAdministratorInvitationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AcceptAdministratorInvitationInput, AcceptAdministratorInvitationOutput, AcceptAdministratorInvitationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AcceptAdministratorInvitationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This method is deprecated. Instead, use <code>AcceptAdministratorInvitation</code>.</p>
    ///          <p>The Security Hub console continues to use <code>AcceptInvitation</code>. It will eventually change to use <code>AcceptAdministratorInvitation</code>. Any IAM policies that specifically control access to this function must continue to use <code>AcceptInvitation</code>. You should also add <code>AcceptAdministratorInvitation</code> to your policies to ensure that the correct permissions are in place after the console begins to use <code>AcceptAdministratorInvitation</code>.</p>
    ///          <p>Accepts the invitation to be a member account and be monitored by the Security Hub administrator
    ///          account that the invitation was sent from.</p>
    ///          <p>This operation is only used by member accounts that are not added through
    ///          Organizations.</p>
    ///          <p>When the member account accepts the invitation, permission is granted to the administrator
    ///          account to view findings generated in the member account.</p>
    @available(*, deprecated, message: "This API has been deprecated, use AcceptAdministratorInvitation API instead.")
    public func acceptInvitation(input: AcceptInvitationInput, completion: @escaping (SdkResult<AcceptInvitationOutput, AcceptInvitationOutputError>) -> Void)
    {
        let urlPath = "/master"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "acceptInvitation")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AcceptInvitationInput, AcceptInvitationOutput, AcceptInvitationOutputError>(id: "acceptInvitation")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AcceptInvitationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AcceptInvitationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AcceptInvitationInput, AcceptInvitationOutput, AcceptInvitationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AcceptInvitationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disables the standards specified by the provided
    ///          <code>StandardsSubscriptionArns</code>.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards.html">Security Standards</a> section of the <i>AWS Security Hub User
    ///          Guide</i>.</p>
    public func batchDisableStandards(input: BatchDisableStandardsInput, completion: @escaping (SdkResult<BatchDisableStandardsOutput, BatchDisableStandardsOutputError>) -> Void)
    {
        let urlPath = "/standards/deregister"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "batchDisableStandards")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<BatchDisableStandardsInput, BatchDisableStandardsOutput, BatchDisableStandardsOutputError>(id: "batchDisableStandards")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: BatchDisableStandardsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: BatchDisableStandardsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<BatchDisableStandardsInput, BatchDisableStandardsOutput, BatchDisableStandardsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: BatchDisableStandardsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Enables the standards specified by the provided <code>StandardsArn</code>. To obtain the
    ///          ARN for a standard, use the <code>
    ///                <a>DescribeStandards</a>
    ///             </code>
    ///          operation.</p>
    ///          <p>For more information, see the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards.html">Security Standards</a>
    ///          section of the <i>AWS Security Hub User Guide</i>.</p>
    public func batchEnableStandards(input: BatchEnableStandardsInput, completion: @escaping (SdkResult<BatchEnableStandardsOutput, BatchEnableStandardsOutputError>) -> Void)
    {
        let urlPath = "/standards/register"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "batchEnableStandards")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<BatchEnableStandardsInput, BatchEnableStandardsOutput, BatchEnableStandardsOutputError>(id: "batchEnableStandards")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: BatchEnableStandardsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: BatchEnableStandardsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<BatchEnableStandardsInput, BatchEnableStandardsOutput, BatchEnableStandardsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: BatchEnableStandardsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Imports security findings generated from an integrated product into Security Hub.
    ///          This action is requested by the integrated product to import its findings into
    ///          Security Hub.</p>
    ///          <p>The maximum allowed size for a finding is 240 Kb. An error is returned for any finding
    ///          larger than 240 Kb.</p>
    ///          <p>After a finding is created, <code>BatchImportFindings</code> cannot be used to update
    ///          the following finding fields and objects, which Security Hub customers use to manage their
    ///          investigation workflow.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Note</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UserDefinedFields</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>VerificationState</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Workflow</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>Finding providers also should not use <code>BatchImportFindings</code> to update the following attributes.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Confidence</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Criticality</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RelatedFindings</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Severity</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Types</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>Instead, finding providers use <code>FindingProviderFields</code> to provide values for these attributes.</p>
    public func batchImportFindings(input: BatchImportFindingsInput, completion: @escaping (SdkResult<BatchImportFindingsOutput, BatchImportFindingsOutputError>) -> Void)
    {
        let urlPath = "/findings/import"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "batchImportFindings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<BatchImportFindingsInput, BatchImportFindingsOutput, BatchImportFindingsOutputError>(id: "batchImportFindings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: BatchImportFindingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: BatchImportFindingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<BatchImportFindingsInput, BatchImportFindingsOutput, BatchImportFindingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: BatchImportFindingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Used by Security Hub customers to update information about their investigation into a finding.
    ///          Requested by administrator accounts or member accounts. Administrator accounts can update findings for
    ///          their account and their member accounts. Member accounts can update findings for their
    ///          account.</p>
    ///          <p>Updates from <code>BatchUpdateFindings</code> do not affect the value of
    ///             <code>UpdatedAt</code> for a finding.</p>
    ///          <p>Administrator and member accounts can use <code>BatchUpdateFindings</code> to update the
    ///          following finding fields and objects.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Confidence</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Criticality</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Note</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RelatedFindings</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Severity</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Types</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UserDefinedFields</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>VerificationState</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Workflow</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>You can configure IAM policies to restrict access to fields and field values. For
    ///          example, you might not want member accounts to be able to suppress findings or change the
    ///          finding severity. See <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/finding-update-batchupdatefindings.html#batchupdatefindings-configure-access">Configuring access to BatchUpdateFindings</a> in the
    ///             <i>AWS Security Hub User Guide</i>.</p>
    public func batchUpdateFindings(input: BatchUpdateFindingsInput, completion: @escaping (SdkResult<BatchUpdateFindingsOutput, BatchUpdateFindingsOutputError>) -> Void)
    {
        let urlPath = "/findings/batchupdate"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "batchUpdateFindings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<BatchUpdateFindingsInput, BatchUpdateFindingsOutput, BatchUpdateFindingsOutputError>(id: "batchUpdateFindings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: BatchUpdateFindingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: BatchUpdateFindingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<BatchUpdateFindingsInput, BatchUpdateFindingsOutput, BatchUpdateFindingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: BatchUpdateFindingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a custom action target in Security Hub.</p>
    ///          <p>You can use custom actions on findings and insights in Security Hub to trigger target actions
    ///          in Amazon CloudWatch Events.</p>
    public func createActionTarget(input: CreateActionTargetInput, completion: @escaping (SdkResult<CreateActionTargetOutput, CreateActionTargetOutputError>) -> Void)
    {
        let urlPath = "/actionTargets"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createActionTarget")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateActionTargetInput, CreateActionTargetOutput, CreateActionTargetOutputError>(id: "createActionTarget")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateActionTargetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateActionTargetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateActionTargetInput, CreateActionTargetOutput, CreateActionTargetOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateActionTargetInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a custom insight in Security Hub. An insight is a consolidation of findings that relate
    ///          to a security issue that requires attention or remediation.</p>
    ///          <p>To group the related findings in the insight, use the
    ///          <code>GroupByAttribute</code>.</p>
    public func createInsight(input: CreateInsightInput, completion: @escaping (SdkResult<CreateInsightOutput, CreateInsightOutputError>) -> Void)
    {
        let urlPath = "/insights"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createInsight")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateInsightInput, CreateInsightOutput, CreateInsightOutputError>(id: "createInsight")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateInsightInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateInsightInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateInsightInput, CreateInsightOutput, CreateInsightOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateInsightInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a member association in Security Hub between the specified accounts and the account
    ///          used to make the request, which is the administrator account. If you are integrated with
    ///          Organizations, then the administrator account is designated by the organization management account.</p>
    ///          <p>
    ///             <code>CreateMembers</code> is always used to add accounts that are not organization
    ///          members.</p>
    ///          <p>For accounts that are part of an organization, <code>CreateMembers</code> is only used
    ///          in the following cases:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Security Hub is not configured to automatically add new accounts in an
    ///                organization.</p>
    ///             </li>
    ///             <li>
    ///                <p>The account was disassociated or deleted in Security Hub.</p>
    ///             </li>
    ///          </ul>
    ///          <p>This action can only be used by an account that has Security Hub enabled. To enable Security Hub, you
    ///          can use the <code>
    ///                <a>EnableSecurityHub</a>
    ///             </code> operation.</p>
    ///          <p>For accounts that are not organization members, you create the account association and
    ///          then send an invitation to the member account. To send the invitation, you use the
    ///                <code>
    ///                <a>InviteMembers</a>
    ///             </code> operation. If the account owner accepts
    ///          the invitation, the account becomes a member account in Security Hub.</p>
    ///          <p>Accounts that are part of an organization do not receive an invitation. They
    ///          automatically become a member account in Security Hub.</p>
    ///          <p>A permissions policy is added that permits the administrator account to view the findings
    ///          generated in the member account. When Security Hub is enabled in a member account, the member account findings are
    ///          also visible to the administrator account. </p>
    ///          <p>To remove the association between the administrator and member accounts, use the <code>
    ///                <a>DisassociateFromMasterAccount</a>
    ///             </code> or <code>
    ///                <a>DisassociateMembers</a>
    ///             </code> operation.</p>
    public func createMembers(input: CreateMembersInput, completion: @escaping (SdkResult<CreateMembersOutput, CreateMembersOutputError>) -> Void)
    {
        let urlPath = "/members"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateMembersInput, CreateMembersOutput, CreateMembersOutputError>(id: "createMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateMembersInput, CreateMembersOutput, CreateMembersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateMembersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Declines invitations to become a member account.</p>
    ///          <p>This operation is only used by accounts that are not part of an organization.
    ///          Organization accounts do not receive invitations.</p>
    public func declineInvitations(input: DeclineInvitationsInput, completion: @escaping (SdkResult<DeclineInvitationsOutput, DeclineInvitationsOutputError>) -> Void)
    {
        let urlPath = "/invitations/decline"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "declineInvitations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeclineInvitationsInput, DeclineInvitationsOutput, DeclineInvitationsOutputError>(id: "declineInvitations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeclineInvitationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeclineInvitationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeclineInvitationsInput, DeclineInvitationsOutput, DeclineInvitationsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DeclineInvitationsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a custom action target from Security Hub.</p>
    ///          <p>Deleting a custom action target does not affect any findings or insights that were
    ///          already sent to Amazon CloudWatch Events using the custom action.</p>
    public func deleteActionTarget(input: DeleteActionTargetInput, completion: @escaping (SdkResult<DeleteActionTargetOutput, DeleteActionTargetOutputError>) -> Void)
    {
        guard let actionTargetArn = input.actionTargetArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component actionTargetArn unexpectedly nil"))))
            return
        }
        let urlPath = "/actionTargets/\(actionTargetArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteActionTarget")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteActionTargetInput, DeleteActionTargetOutput, DeleteActionTargetOutputError>(id: "deleteActionTarget")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteActionTargetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteActionTargetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteActionTargetInput, DeleteActionTargetOutput, DeleteActionTargetOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the insight specified by the <code>InsightArn</code>.</p>
    public func deleteInsight(input: DeleteInsightInput, completion: @escaping (SdkResult<DeleteInsightOutput, DeleteInsightOutputError>) -> Void)
    {
        guard let insightArn = input.insightArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component insightArn unexpectedly nil"))))
            return
        }
        let urlPath = "/insights/\(insightArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteInsight")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteInsightInput, DeleteInsightOutput, DeleteInsightOutputError>(id: "deleteInsight")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteInsightInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteInsightInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteInsightInput, DeleteInsightOutput, DeleteInsightOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes invitations received by the AWS account to become a member account.</p>
    ///          <p>This operation is only used by accounts that are not part of an organization.
    ///          Organization accounts do not receive invitations.</p>
    public func deleteInvitations(input: DeleteInvitationsInput, completion: @escaping (SdkResult<DeleteInvitationsOutput, DeleteInvitationsOutputError>) -> Void)
    {
        let urlPath = "/invitations/delete"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteInvitations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteInvitationsInput, DeleteInvitationsOutput, DeleteInvitationsOutputError>(id: "deleteInvitations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteInvitationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteInvitationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteInvitationsInput, DeleteInvitationsOutput, DeleteInvitationsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteInvitationsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the specified member accounts from Security Hub.</p>
    ///          <p>Can be used to delete member accounts that belong to an organization as well as member
    ///          accounts that were invited manually.</p>
    public func deleteMembers(input: DeleteMembersInput, completion: @escaping (SdkResult<DeleteMembersOutput, DeleteMembersOutputError>) -> Void)
    {
        let urlPath = "/members/delete"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteMembersInput, DeleteMembersOutput, DeleteMembersOutputError>(id: "deleteMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteMembersInput, DeleteMembersOutput, DeleteMembersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteMembersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of the custom action targets in Security Hub in your account.</p>
    public func describeActionTargets(input: DescribeActionTargetsInput, completion: @escaping (SdkResult<DescribeActionTargetsOutput, DescribeActionTargetsOutputError>) -> Void)
    {
        let urlPath = "/actionTargets/get"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeActionTargets")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeActionTargetsInput, DescribeActionTargetsOutput, DescribeActionTargetsOutputError>(id: "describeActionTargets")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeActionTargetsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeActionTargetsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeActionTargetsInput, DescribeActionTargetsOutput, DescribeActionTargetsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeActionTargetsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns details about the Hub resource in your account, including the
    ///             <code>HubArn</code> and the time when you enabled Security Hub.</p>
    public func describeHub(input: DescribeHubInput, completion: @escaping (SdkResult<DescribeHubOutput, DescribeHubOutputError>) -> Void)
    {
        let urlPath = "/accounts"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeHub")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeHubInput, DescribeHubOutput, DescribeHubOutputError>(id: "describeHub")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeHubInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeHubInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeHubInput, DescribeHubOutput, DescribeHubOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns information about the Organizations configuration for Security Hub. Can only be
    ///          called from a Security Hub administrator account.</p>
    public func describeOrganizationConfiguration(input: DescribeOrganizationConfigurationInput, completion: @escaping (SdkResult<DescribeOrganizationConfigurationOutput, DescribeOrganizationConfigurationOutputError>) -> Void)
    {
        let urlPath = "/organization/configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeOrganizationConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeOrganizationConfigurationInput, DescribeOrganizationConfigurationOutput, DescribeOrganizationConfigurationOutputError>(id: "describeOrganizationConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeOrganizationConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeOrganizationConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeOrganizationConfigurationInput, DescribeOrganizationConfigurationOutput, DescribeOrganizationConfigurationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns information about product integrations in Security Hub.</p>
    ///          <p>You can optionally provide an integration ARN. If you provide an integration ARN, then
    ///          the results only include that integration.</p>
    ///          <p>If you do not provide an integration ARN, then the results include all of the available
    ///          product integrations. </p>
    public func describeProducts(input: DescribeProductsInput, completion: @escaping (SdkResult<DescribeProductsOutput, DescribeProductsOutputError>) -> Void)
    {
        let urlPath = "/products"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeProducts")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeProductsInput, DescribeProductsOutput, DescribeProductsOutputError>(id: "describeProducts")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeProductsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeProductsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeProductsInput, DescribeProductsOutput, DescribeProductsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of the available standards in Security Hub.</p>
    ///          <p>For each standard, the results include the standard ARN, the name, and a description. </p>
    public func describeStandards(input: DescribeStandardsInput, completion: @escaping (SdkResult<DescribeStandardsOutput, DescribeStandardsOutputError>) -> Void)
    {
        let urlPath = "/standards"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeStandards")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeStandardsInput, DescribeStandardsOutput, DescribeStandardsOutputError>(id: "describeStandards")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeStandardsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeStandardsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeStandardsInput, DescribeStandardsOutput, DescribeStandardsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of security standards controls.</p>
    ///          <p>For each control, the results include information about whether it is currently enabled,
    ///          the severity, and a link to remediation information.</p>
    public func describeStandardsControls(input: DescribeStandardsControlsInput, completion: @escaping (SdkResult<DescribeStandardsControlsOutput, DescribeStandardsControlsOutputError>) -> Void)
    {
        guard let standardsSubscriptionArn = input.standardsSubscriptionArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component standardsSubscriptionArn unexpectedly nil"))))
            return
        }
        let urlPath = "/standards/controls/\(standardsSubscriptionArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeStandardsControls")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeStandardsControlsInput, DescribeStandardsControlsOutput, DescribeStandardsControlsOutputError>(id: "describeStandardsControls")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeStandardsControlsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeStandardsControlsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeStandardsControlsInput, DescribeStandardsControlsOutput, DescribeStandardsControlsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disables the integration of the specified product with Security Hub. After the integration is
    ///          disabled, findings from that product are no longer sent to Security Hub.</p>
    public func disableImportFindingsForProduct(input: DisableImportFindingsForProductInput, completion: @escaping (SdkResult<DisableImportFindingsForProductOutput, DisableImportFindingsForProductOutputError>) -> Void)
    {
        guard let productSubscriptionArn = input.productSubscriptionArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component productSubscriptionArn unexpectedly nil"))))
            return
        }
        let urlPath = "/productSubscriptions/\(productSubscriptionArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disableImportFindingsForProduct")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisableImportFindingsForProductInput, DisableImportFindingsForProductOutput, DisableImportFindingsForProductOutputError>(id: "disableImportFindingsForProduct")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisableImportFindingsForProductInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisableImportFindingsForProductInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisableImportFindingsForProductInput, DisableImportFindingsForProductOutput, DisableImportFindingsForProductOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disables a Security Hub administrator account. Can only be called by the organization
    ///          management account.</p>
    public func disableOrganizationAdminAccount(input: DisableOrganizationAdminAccountInput, completion: @escaping (SdkResult<DisableOrganizationAdminAccountOutput, DisableOrganizationAdminAccountOutputError>) -> Void)
    {
        let urlPath = "/organization/admin/disable"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disableOrganizationAdminAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisableOrganizationAdminAccountInput, DisableOrganizationAdminAccountOutput, DisableOrganizationAdminAccountOutputError>(id: "disableOrganizationAdminAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisableOrganizationAdminAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisableOrganizationAdminAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisableOrganizationAdminAccountInput, DisableOrganizationAdminAccountOutput, DisableOrganizationAdminAccountOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DisableOrganizationAdminAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disables Security Hub in your account only in the current Region. To disable Security Hub in all
    ///          Regions, you must submit one request per Region where you have enabled Security Hub.</p>
    ///          <p>When you disable Security Hub for an administrator account, it doesn't disable Security Hub for any associated
    ///          member accounts.</p>
    ///          <p>When you disable Security Hub, your existing findings and insights and any Security Hub configuration
    ///          settings are deleted after 90 days and cannot be recovered. Any standards that were enabled
    ///          are disabled, and your administrator and member account associations are removed.</p>
    ///          <p>If you want to save your existing findings, you must export them before you disable
    ///          Security Hub.</p>
    public func disableSecurityHub(input: DisableSecurityHubInput, completion: @escaping (SdkResult<DisableSecurityHubOutput, DisableSecurityHubOutputError>) -> Void)
    {
        let urlPath = "/accounts"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disableSecurityHub")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisableSecurityHubInput, DisableSecurityHubOutput, DisableSecurityHubOutputError>(id: "disableSecurityHub")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisableSecurityHubInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisableSecurityHubInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisableSecurityHubInput, DisableSecurityHubOutput, DisableSecurityHubOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociates the current Security Hub member account from the associated administrator
    ///          account.</p>
    ///          <p>This operation is only used by accounts that are not part of an organization. For
    ///          organization accounts, only the administrator account can
    ///          disassociate a member account.</p>
    public func disassociateFromAdministratorAccount(input: DisassociateFromAdministratorAccountInput, completion: @escaping (SdkResult<DisassociateFromAdministratorAccountOutput, DisassociateFromAdministratorAccountOutputError>) -> Void)
    {
        let urlPath = "/administrator/disassociate"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociateFromAdministratorAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociateFromAdministratorAccountInput, DisassociateFromAdministratorAccountOutput, DisassociateFromAdministratorAccountOutputError>(id: "disassociateFromAdministratorAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociateFromAdministratorAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociateFromAdministratorAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociateFromAdministratorAccountInput, DisassociateFromAdministratorAccountOutput, DisassociateFromAdministratorAccountOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This method is deprecated. Instead, use <code>DisassociateFromAdministratorAccount</code>.</p>
    ///          <p>The Security Hub console continues to use <code>DisassociateFromMasterAccount</code>. It will eventually change to use <code>DisassociateFromAdministratorAccount</code>. Any IAM policies that specifically control access to this function must continue to use <code>DisassociateFromMasterAccount</code>. You should also add <code>DisassociateFromAdministratorAccount</code> to your policies to ensure that the correct permissions are in place after the console begins to use <code>DisassociateFromAdministratorAccount</code>.</p>
    ///          <p>Disassociates the current Security Hub member account from the associated administrator
    ///          account.</p>
    ///          <p>This operation is only used by accounts that are not part of an organization. For
    ///          organization accounts, only the administrator account can
    ///          disassociate a member account.</p>
    @available(*, deprecated, message: "This API has been deprecated, use DisassociateFromAdministratorAccount API instead.")
    public func disassociateFromMasterAccount(input: DisassociateFromMasterAccountInput, completion: @escaping (SdkResult<DisassociateFromMasterAccountOutput, DisassociateFromMasterAccountOutputError>) -> Void)
    {
        let urlPath = "/master/disassociate"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociateFromMasterAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociateFromMasterAccountInput, DisassociateFromMasterAccountOutput, DisassociateFromMasterAccountOutputError>(id: "disassociateFromMasterAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociateFromMasterAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociateFromMasterAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociateFromMasterAccountInput, DisassociateFromMasterAccountOutput, DisassociateFromMasterAccountOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociates the specified member accounts from the associated administrator account.</p>
    ///          <p>Can be used to disassociate both accounts that are managed using Organizations and accounts that
    ///          were invited manually.</p>
    public func disassociateMembers(input: DisassociateMembersInput, completion: @escaping (SdkResult<DisassociateMembersOutput, DisassociateMembersOutputError>) -> Void)
    {
        let urlPath = "/members/disassociate"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociateMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociateMembersInput, DisassociateMembersOutput, DisassociateMembersOutputError>(id: "disassociateMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociateMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociateMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociateMembersInput, DisassociateMembersOutput, DisassociateMembersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DisassociateMembersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Enables the integration of a partner product with Security Hub. Integrated products send
    ///          findings to Security Hub.</p>
    ///          <p>When you enable a product integration, a permissions policy that grants permission for
    ///          the product to send findings to Security Hub is applied.</p>
    public func enableImportFindingsForProduct(input: EnableImportFindingsForProductInput, completion: @escaping (SdkResult<EnableImportFindingsForProductOutput, EnableImportFindingsForProductOutputError>) -> Void)
    {
        let urlPath = "/productSubscriptions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "enableImportFindingsForProduct")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<EnableImportFindingsForProductInput, EnableImportFindingsForProductOutput, EnableImportFindingsForProductOutputError>(id: "enableImportFindingsForProduct")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: EnableImportFindingsForProductInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: EnableImportFindingsForProductInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<EnableImportFindingsForProductInput, EnableImportFindingsForProductOutput, EnableImportFindingsForProductOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: EnableImportFindingsForProductInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Designates the Security Hub administrator account for an organization. Can only be called by
    ///          the organization management account.</p>
    public func enableOrganizationAdminAccount(input: EnableOrganizationAdminAccountInput, completion: @escaping (SdkResult<EnableOrganizationAdminAccountOutput, EnableOrganizationAdminAccountOutputError>) -> Void)
    {
        let urlPath = "/organization/admin/enable"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "enableOrganizationAdminAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<EnableOrganizationAdminAccountInput, EnableOrganizationAdminAccountOutput, EnableOrganizationAdminAccountOutputError>(id: "enableOrganizationAdminAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: EnableOrganizationAdminAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: EnableOrganizationAdminAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<EnableOrganizationAdminAccountInput, EnableOrganizationAdminAccountOutput, EnableOrganizationAdminAccountOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: EnableOrganizationAdminAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Enables Security Hub for your account in the current Region or the Region you specify in the
    ///          request.</p>
    ///          <p>When you enable Security Hub, you grant to Security Hub the permissions necessary to gather findings
    ///          from other services that are integrated with Security Hub.</p>
    ///          <p>When you use the <code>EnableSecurityHub</code> operation to enable Security Hub, you also
    ///          automatically enable the following standards.</p>
    ///          <ul>
    ///             <li>
    ///                <p>CIS AWS Foundations</p>
    ///             </li>
    ///             <li>
    ///                <p>AWS Foundational Security Best Practices</p>
    ///             </li>
    ///          </ul>
    ///          <p>You do not enable the Payment Card Industry Data Security Standard (PCI DSS) standard. </p>
    ///          <p>To not enable the automatically enabled standards, set
    ///             <code>EnableDefaultStandards</code> to <code>false</code>.</p>
    ///          <p>After you enable Security Hub, to enable a standard, use the <code>
    ///                <a>BatchEnableStandards</a>
    ///             </code> operation. To disable a standard, use the
    ///                <code>
    ///                <a>BatchDisableStandards</a>
    ///             </code> operation.</p>
    ///          <p>To learn more, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-settingup.html">Setting Up
    ///             AWS Security Hub</a> in the <i>AWS Security Hub User Guide</i>.</p>
    public func enableSecurityHub(input: EnableSecurityHubInput, completion: @escaping (SdkResult<EnableSecurityHubOutput, EnableSecurityHubOutputError>) -> Void)
    {
        let urlPath = "/accounts"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "enableSecurityHub")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<EnableSecurityHubInput, EnableSecurityHubOutput, EnableSecurityHubOutputError>(id: "enableSecurityHub")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: EnableSecurityHubInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: EnableSecurityHubInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<EnableSecurityHubInput, EnableSecurityHubOutput, EnableSecurityHubOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: EnableSecurityHubInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Provides the details for the Security Hub administrator account for the current member account.</p>
    ///          <p>Can be used by both member accounts that are managed using Organizations and accounts that were
    ///          invited manually.</p>
    public func getAdministratorAccount(input: GetAdministratorAccountInput, completion: @escaping (SdkResult<GetAdministratorAccountOutput, GetAdministratorAccountOutputError>) -> Void)
    {
        let urlPath = "/administrator"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getAdministratorAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetAdministratorAccountInput, GetAdministratorAccountOutput, GetAdministratorAccountOutputError>(id: "getAdministratorAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetAdministratorAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetAdministratorAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetAdministratorAccountInput, GetAdministratorAccountOutput, GetAdministratorAccountOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of the standards that are currently enabled.</p>
    public func getEnabledStandards(input: GetEnabledStandardsInput, completion: @escaping (SdkResult<GetEnabledStandardsOutput, GetEnabledStandardsOutputError>) -> Void)
    {
        let urlPath = "/standards/get"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getEnabledStandards")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetEnabledStandardsInput, GetEnabledStandardsOutput, GetEnabledStandardsOutputError>(id: "getEnabledStandards")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetEnabledStandardsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetEnabledStandardsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetEnabledStandardsInput, GetEnabledStandardsOutput, GetEnabledStandardsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GetEnabledStandardsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of findings that match the specified criteria.</p>
    public func getFindings(input: GetFindingsInput, completion: @escaping (SdkResult<GetFindingsOutput, GetFindingsOutputError>) -> Void)
    {
        let urlPath = "/findings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getFindings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetFindingsInput, GetFindingsOutput, GetFindingsOutputError>(id: "getFindings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetFindingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetFindingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetFindingsInput, GetFindingsOutput, GetFindingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GetFindingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the results of the Security Hub insight specified by the insight ARN.</p>
    public func getInsightResults(input: GetInsightResultsInput, completion: @escaping (SdkResult<GetInsightResultsOutput, GetInsightResultsOutputError>) -> Void)
    {
        guard let insightArn = input.insightArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component insightArn unexpectedly nil"))))
            return
        }
        let urlPath = "/insights/results/\(insightArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getInsightResults")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetInsightResultsInput, GetInsightResultsOutput, GetInsightResultsOutputError>(id: "getInsightResults")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetInsightResultsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetInsightResultsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetInsightResultsInput, GetInsightResultsOutput, GetInsightResultsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists and describes insights for the specified insight ARNs.</p>
    public func getInsights(input: GetInsightsInput, completion: @escaping (SdkResult<GetInsightsOutput, GetInsightsOutputError>) -> Void)
    {
        let urlPath = "/insights/get"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getInsights")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetInsightsInput, GetInsightsOutput, GetInsightsOutputError>(id: "getInsights")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetInsightsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetInsightsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetInsightsInput, GetInsightsOutput, GetInsightsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GetInsightsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the count of all Security Hub membership invitations that were sent to the
    ///          current member account, not including the currently accepted invitation. </p>
    public func getInvitationsCount(input: GetInvitationsCountInput, completion: @escaping (SdkResult<GetInvitationsCountOutput, GetInvitationsCountOutputError>) -> Void)
    {
        let urlPath = "/invitations/count"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getInvitationsCount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetInvitationsCountInput, GetInvitationsCountOutput, GetInvitationsCountOutputError>(id: "getInvitationsCount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetInvitationsCountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetInvitationsCountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetInvitationsCountInput, GetInvitationsCountOutput, GetInvitationsCountOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This method is deprecated. Instead, use <code>GetAdministratorAccount</code>.</p>
    ///          <p>The Security Hub console continues to use <code>GetMasterAccount</code>. It will eventually change to use <code>GetAdministratorAccount</code>. Any IAM policies that specifically control access to this function must continue to use <code>GetMasterAccount</code>. You should also add <code>GetAdministratorAccount</code> to your policies to ensure that the correct permissions are in place after the console begins to use <code>GetAdministratorAccount</code>.</p>
    ///          <p>Provides the details for the Security Hub administrator account for the current member account.</p>
    ///          <p>Can be used by both member accounts that are managed using Organizations and accounts that were
    ///          invited manually.</p>
    @available(*, deprecated, message: "This API has been deprecated, use GetAdministratorAccount API instead.")
    public func getMasterAccount(input: GetMasterAccountInput, completion: @escaping (SdkResult<GetMasterAccountOutput, GetMasterAccountOutputError>) -> Void)
    {
        let urlPath = "/master"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getMasterAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetMasterAccountInput, GetMasterAccountOutput, GetMasterAccountOutputError>(id: "getMasterAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetMasterAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetMasterAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetMasterAccountInput, GetMasterAccountOutput, GetMasterAccountOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the details for the Security Hub member accounts for the specified account IDs.</p>
    ///          <p>An administrator account can be either the delegated Security Hub administrator account for an
    ///          organization or an administrator account that enabled Security Hub manually.</p>
    ///          <p>The results include both member accounts that are managed using Organizations and accounts that
    ///          were invited manually.</p>
    public func getMembers(input: GetMembersInput, completion: @escaping (SdkResult<GetMembersOutput, GetMembersOutputError>) -> Void)
    {
        let urlPath = "/members/get"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetMembersInput, GetMembersOutput, GetMembersOutputError>(id: "getMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetMembersInput, GetMembersOutput, GetMembersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GetMembersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Invites other AWS accounts to become member accounts for the Security Hub administrator account that
    ///          the invitation is sent from.</p>
    ///          <p>This operation is only used to invite accounts that do not belong to an organization.
    ///          Organization accounts do not receive invitations.</p>
    ///          <p>Before you can use this action to invite a member, you must first use the <code>
    ///                <a>CreateMembers</a>
    ///             </code> action to create the member account in Security Hub.</p>
    ///          <p>When the account owner enables Security Hub and accepts the invitation to become a member
    ///          account, the administrator account can view the findings generated from the member account.</p>
    public func inviteMembers(input: InviteMembersInput, completion: @escaping (SdkResult<InviteMembersOutput, InviteMembersOutputError>) -> Void)
    {
        let urlPath = "/members/invite"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "inviteMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<InviteMembersInput, InviteMembersOutput, InviteMembersOutputError>(id: "inviteMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: InviteMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: InviteMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<InviteMembersInput, InviteMembersOutput, InviteMembersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: InviteMembersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all findings-generating solutions (products) that you are subscribed to receive
    ///          findings from in Security Hub.</p>
    public func listEnabledProductsForImport(input: ListEnabledProductsForImportInput, completion: @escaping (SdkResult<ListEnabledProductsForImportOutput, ListEnabledProductsForImportOutputError>) -> Void)
    {
        let urlPath = "/productSubscriptions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listEnabledProductsForImport")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListEnabledProductsForImportInput, ListEnabledProductsForImportOutput, ListEnabledProductsForImportOutputError>(id: "listEnabledProductsForImport")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListEnabledProductsForImportInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListEnabledProductsForImportInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListEnabledProductsForImportInput, ListEnabledProductsForImportOutput, ListEnabledProductsForImportOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all Security Hub membership invitations that were sent to the current AWS account.</p>
    ///          <p>This operation is only used by accounts that are managed by invitation.
    ///          Accounts that are managed using the integration with AWS Organizations do not receive invitations.</p>
    public func listInvitations(input: ListInvitationsInput, completion: @escaping (SdkResult<ListInvitationsOutput, ListInvitationsOutputError>) -> Void)
    {
        let urlPath = "/invitations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listInvitations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListInvitationsInput, ListInvitationsOutput, ListInvitationsOutputError>(id: "listInvitations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListInvitationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListInvitationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListInvitationsInput, ListInvitationsOutput, ListInvitationsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists details about all member accounts for the current Security Hub administrator
    ///          account.</p>
    ///          <p>The results include both member accounts that belong to an organization and member
    ///          accounts that were invited manually.</p>
    public func listMembers(input: ListMembersInput, completion: @escaping (SdkResult<ListMembersOutput, ListMembersOutputError>) -> Void)
    {
        let urlPath = "/members"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListMembersInput, ListMembersOutput, ListMembersOutputError>(id: "listMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListMembersInput, ListMembersOutput, ListMembersOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the Security Hub administrator accounts. Can only be called by the organization
    ///          management account.</p>
    public func listOrganizationAdminAccounts(input: ListOrganizationAdminAccountsInput, completion: @escaping (SdkResult<ListOrganizationAdminAccountsOutput, ListOrganizationAdminAccountsOutputError>) -> Void)
    {
        let urlPath = "/organization/admin"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listOrganizationAdminAccounts")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListOrganizationAdminAccountsInput, ListOrganizationAdminAccountsOutput, ListOrganizationAdminAccountsOutputError>(id: "listOrganizationAdminAccounts")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListOrganizationAdminAccountsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListOrganizationAdminAccountsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListOrganizationAdminAccountsInput, ListOrganizationAdminAccountsOutput, ListOrganizationAdminAccountsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of tags associated with a resource.</p>
    public func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutput, ListTagsForResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTagsForResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(id: "listTagsForResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds one or more tags to a resource.</p>
    public func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutput, TagResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagResourceInput, TagResourceOutput, TagResourceOutputError>(id: "tagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagResourceInput, TagResourceOutput, TagResourceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes one or more tags from a resource.</p>
    public func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutput, UntagResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(id: "untagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the name and description of a custom action target in Security Hub.</p>
    public func updateActionTarget(input: UpdateActionTargetInput, completion: @escaping (SdkResult<UpdateActionTargetOutput, UpdateActionTargetOutputError>) -> Void)
    {
        guard let actionTargetArn = input.actionTargetArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component actionTargetArn unexpectedly nil"))))
            return
        }
        let urlPath = "/actionTargets/\(actionTargetArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateActionTarget")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateActionTargetInput, UpdateActionTargetOutput, UpdateActionTargetOutputError>(id: "updateActionTarget")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateActionTargetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateActionTargetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateActionTargetInput, UpdateActionTargetOutput, UpdateActionTargetOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateActionTargetInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    ///             <code>UpdateFindings</code> is deprecated. Instead of <code>UpdateFindings</code>, use
    ///             <code>BatchUpdateFindings</code>.</p>
    ///          <p>Updates the <code>Note</code> and <code>RecordState</code> of the Security Hub-aggregated
    ///          findings that the filter attributes specify. Any member account that can view the finding
    ///          also sees the update to the finding.</p>
    public func updateFindings(input: UpdateFindingsInput, completion: @escaping (SdkResult<UpdateFindingsOutput, UpdateFindingsOutputError>) -> Void)
    {
        let urlPath = "/findings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateFindings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateFindingsInput, UpdateFindingsOutput, UpdateFindingsOutputError>(id: "updateFindings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateFindingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateFindingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateFindingsInput, UpdateFindingsOutput, UpdateFindingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateFindingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the Security Hub insight identified by the specified insight ARN.</p>
    public func updateInsight(input: UpdateInsightInput, completion: @escaping (SdkResult<UpdateInsightOutput, UpdateInsightOutputError>) -> Void)
    {
        guard let insightArn = input.insightArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component insightArn unexpectedly nil"))))
            return
        }
        let urlPath = "/insights/\(insightArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateInsight")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateInsightInput, UpdateInsightOutput, UpdateInsightOutputError>(id: "updateInsight")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateInsightInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateInsightInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateInsightInput, UpdateInsightOutput, UpdateInsightOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateInsightInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Used to update the configuration related to Organizations. Can only be called from a
    ///          Security Hub administrator account.</p>
    public func updateOrganizationConfiguration(input: UpdateOrganizationConfigurationInput, completion: @escaping (SdkResult<UpdateOrganizationConfigurationOutput, UpdateOrganizationConfigurationOutputError>) -> Void)
    {
        let urlPath = "/organization/configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateOrganizationConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateOrganizationConfigurationInput, UpdateOrganizationConfigurationOutput, UpdateOrganizationConfigurationOutputError>(id: "updateOrganizationConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateOrganizationConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateOrganizationConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateOrganizationConfigurationInput, UpdateOrganizationConfigurationOutput, UpdateOrganizationConfigurationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateOrganizationConfigurationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates configuration options for Security Hub.</p>
    public func updateSecurityHubConfiguration(input: UpdateSecurityHubConfigurationInput, completion: @escaping (SdkResult<UpdateSecurityHubConfigurationOutput, UpdateSecurityHubConfigurationOutputError>) -> Void)
    {
        let urlPath = "/accounts"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateSecurityHubConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateSecurityHubConfigurationInput, UpdateSecurityHubConfigurationOutput, UpdateSecurityHubConfigurationOutputError>(id: "updateSecurityHubConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateSecurityHubConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateSecurityHubConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateSecurityHubConfigurationInput, UpdateSecurityHubConfigurationOutput, UpdateSecurityHubConfigurationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateSecurityHubConfigurationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Used to control whether an individual security standard control is enabled or
    ///          disabled.</p>
    public func updateStandardsControl(input: UpdateStandardsControlInput, completion: @escaping (SdkResult<UpdateStandardsControlOutput, UpdateStandardsControlOutputError>) -> Void)
    {
        guard let standardsControlArn = input.standardsControlArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component standardsControlArn unexpectedly nil"))))
            return
        }
        let urlPath = "/standards/control/\(standardsControlArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateStandardsControl")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "securityhub.\(config.region).amazonaws.com")
                      .withSigningName(value: "securityhub")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateStandardsControlInput, UpdateStandardsControlOutput, UpdateStandardsControlOutputError>(id: "updateStandardsControl")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateStandardsControlInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateStandardsControlInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateStandardsControlInput, UpdateStandardsControlOutput, UpdateStandardsControlOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateStandardsControlInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
