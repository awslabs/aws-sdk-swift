// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PatchSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case failedCount = "FailedCount"
        case id = "Id"
        case installedCount = "InstalledCount"
        case installedOtherCount = "InstalledOtherCount"
        case installedPendingReboot = "InstalledPendingReboot"
        case installedRejectedCount = "InstalledRejectedCount"
        case missingCount = "MissingCount"
        case operation = "Operation"
        case operationEndTime = "OperationEndTime"
        case operationStartTime = "OperationStartTime"
        case rebootOption = "RebootOption"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if failedCount != 0 {
            try encodeContainer.encode(failedCount, forKey: .failedCount)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if installedCount != 0 {
            try encodeContainer.encode(installedCount, forKey: .installedCount)
        }
        if installedOtherCount != 0 {
            try encodeContainer.encode(installedOtherCount, forKey: .installedOtherCount)
        }
        if installedPendingReboot != 0 {
            try encodeContainer.encode(installedPendingReboot, forKey: .installedPendingReboot)
        }
        if installedRejectedCount != 0 {
            try encodeContainer.encode(installedRejectedCount, forKey: .installedRejectedCount)
        }
        if missingCount != 0 {
            try encodeContainer.encode(missingCount, forKey: .missingCount)
        }
        if let operation = operation {
            try encodeContainer.encode(operation, forKey: .operation)
        }
        if let operationEndTime = operationEndTime {
            try encodeContainer.encode(operationEndTime, forKey: .operationEndTime)
        }
        if let operationStartTime = operationStartTime {
            try encodeContainer.encode(operationStartTime, forKey: .operationStartTime)
        }
        if let rebootOption = rebootOption {
            try encodeContainer.encode(rebootOption, forKey: .rebootOption)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let installedCountDecoded = try containerValues.decode(Int.self, forKey: .installedCount)
        installedCount = installedCountDecoded
        let missingCountDecoded = try containerValues.decode(Int.self, forKey: .missingCount)
        missingCount = missingCountDecoded
        let failedCountDecoded = try containerValues.decode(Int.self, forKey: .failedCount)
        failedCount = failedCountDecoded
        let installedOtherCountDecoded = try containerValues.decode(Int.self, forKey: .installedOtherCount)
        installedOtherCount = installedOtherCountDecoded
        let installedRejectedCountDecoded = try containerValues.decode(Int.self, forKey: .installedRejectedCount)
        installedRejectedCount = installedRejectedCountDecoded
        let installedPendingRebootDecoded = try containerValues.decode(Int.self, forKey: .installedPendingReboot)
        installedPendingReboot = installedPendingRebootDecoded
        let operationStartTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operationStartTime)
        operationStartTime = operationStartTimeDecoded
        let operationEndTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operationEndTime)
        operationEndTime = operationEndTimeDecoded
        let rebootOptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rebootOption)
        rebootOption = rebootOptionDecoded
        let operationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operation)
        operation = operationDecoded
    }
}
