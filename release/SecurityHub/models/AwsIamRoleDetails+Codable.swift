// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsIamRoleDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case assumeRolePolicyDocument = "AssumeRolePolicyDocument"
        case attachedManagedPolicies = "AttachedManagedPolicies"
        case createDate = "CreateDate"
        case instanceProfileList = "InstanceProfileList"
        case maxSessionDuration = "MaxSessionDuration"
        case path = "Path"
        case permissionsBoundary = "PermissionsBoundary"
        case roleId = "RoleId"
        case roleName = "RoleName"
        case rolePolicyList = "RolePolicyList"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assumeRolePolicyDocument = assumeRolePolicyDocument {
            try encodeContainer.encode(assumeRolePolicyDocument, forKey: .assumeRolePolicyDocument)
        }
        if let attachedManagedPolicies = attachedManagedPolicies {
            var attachedManagedPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachedManagedPolicies)
            for awsiamattachedmanagedpolicylist0 in attachedManagedPolicies {
                try attachedManagedPoliciesContainer.encode(awsiamattachedmanagedpolicylist0)
            }
        }
        if let createDate = createDate {
            try encodeContainer.encode(createDate, forKey: .createDate)
        }
        if let instanceProfileList = instanceProfileList {
            var instanceProfileListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceProfileList)
            for awsiaminstanceprofilelist0 in instanceProfileList {
                try instanceProfileListContainer.encode(awsiaminstanceprofilelist0)
            }
        }
        if maxSessionDuration != 0 {
            try encodeContainer.encode(maxSessionDuration, forKey: .maxSessionDuration)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let permissionsBoundary = permissionsBoundary {
            try encodeContainer.encode(permissionsBoundary, forKey: .permissionsBoundary)
        }
        if let roleId = roleId {
            try encodeContainer.encode(roleId, forKey: .roleId)
        }
        if let roleName = roleName {
            try encodeContainer.encode(roleName, forKey: .roleName)
        }
        if let rolePolicyList = rolePolicyList {
            var rolePolicyListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rolePolicyList)
            for awsiamrolepolicylist0 in rolePolicyList {
                try rolePolicyListContainer.encode(awsiamrolepolicylist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assumeRolePolicyDocumentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assumeRolePolicyDocument)
        assumeRolePolicyDocument = assumeRolePolicyDocumentDecoded
        let attachedManagedPoliciesContainer = try containerValues.decodeIfPresent([AwsIamAttachedManagedPolicy].self, forKey: .attachedManagedPolicies)
        var attachedManagedPoliciesDecoded0:[AwsIamAttachedManagedPolicy]? = nil
        if let attachedManagedPoliciesContainer = attachedManagedPoliciesContainer {
            attachedManagedPoliciesDecoded0 = [AwsIamAttachedManagedPolicy]()
            for structure0 in attachedManagedPoliciesContainer {
                attachedManagedPoliciesDecoded0?.append(structure0)
            }
        }
        attachedManagedPolicies = attachedManagedPoliciesDecoded0
        let createDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createDate)
        createDate = createDateDecoded
        let instanceProfileListContainer = try containerValues.decodeIfPresent([AwsIamInstanceProfile].self, forKey: .instanceProfileList)
        var instanceProfileListDecoded0:[AwsIamInstanceProfile]? = nil
        if let instanceProfileListContainer = instanceProfileListContainer {
            instanceProfileListDecoded0 = [AwsIamInstanceProfile]()
            for structure0 in instanceProfileListContainer {
                instanceProfileListDecoded0?.append(structure0)
            }
        }
        instanceProfileList = instanceProfileListDecoded0
        let permissionsBoundaryDecoded = try containerValues.decodeIfPresent(AwsIamPermissionsBoundary.self, forKey: .permissionsBoundary)
        permissionsBoundary = permissionsBoundaryDecoded
        let roleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleId)
        roleId = roleIdDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let rolePolicyListContainer = try containerValues.decodeIfPresent([AwsIamRolePolicy].self, forKey: .rolePolicyList)
        var rolePolicyListDecoded0:[AwsIamRolePolicy]? = nil
        if let rolePolicyListContainer = rolePolicyListContainer {
            rolePolicyListDecoded0 = [AwsIamRolePolicy]()
            for structure0 in rolePolicyListContainer {
                rolePolicyListDecoded0?.append(structure0)
            }
        }
        rolePolicyList = rolePolicyListDecoded0
        let maxSessionDurationDecoded = try containerValues.decode(Int.self, forKey: .maxSessionDuration)
        maxSessionDuration = maxSessionDurationDecoded
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
    }
}
