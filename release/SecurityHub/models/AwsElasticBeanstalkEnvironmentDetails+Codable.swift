// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsElasticBeanstalkEnvironmentDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName = "ApplicationName"
        case cname = "Cname"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case description = "Description"
        case endpointUrl = "EndpointUrl"
        case environmentArn = "EnvironmentArn"
        case environmentId = "EnvironmentId"
        case environmentLinks = "EnvironmentLinks"
        case environmentName = "EnvironmentName"
        case optionSettings = "OptionSettings"
        case platformArn = "PlatformArn"
        case solutionStackName = "SolutionStackName"
        case status = "Status"
        case tier = "Tier"
        case versionLabel = "VersionLabel"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let cname = cname {
            try encodeContainer.encode(cname, forKey: .cname)
        }
        if let dateCreated = dateCreated {
            try encodeContainer.encode(dateCreated, forKey: .dateCreated)
        }
        if let dateUpdated = dateUpdated {
            try encodeContainer.encode(dateUpdated, forKey: .dateUpdated)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let endpointUrl = endpointUrl {
            try encodeContainer.encode(endpointUrl, forKey: .endpointUrl)
        }
        if let environmentArn = environmentArn {
            try encodeContainer.encode(environmentArn, forKey: .environmentArn)
        }
        if let environmentId = environmentId {
            try encodeContainer.encode(environmentId, forKey: .environmentId)
        }
        if let environmentLinks = environmentLinks {
            var environmentLinksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environmentLinks)
            for awselasticbeanstalkenvironmentenvironmentlinks0 in environmentLinks {
                try environmentLinksContainer.encode(awselasticbeanstalkenvironmentenvironmentlinks0)
            }
        }
        if let environmentName = environmentName {
            try encodeContainer.encode(environmentName, forKey: .environmentName)
        }
        if let optionSettings = optionSettings {
            var optionSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .optionSettings)
            for awselasticbeanstalkenvironmentoptionsettings0 in optionSettings {
                try optionSettingsContainer.encode(awselasticbeanstalkenvironmentoptionsettings0)
            }
        }
        if let platformArn = platformArn {
            try encodeContainer.encode(platformArn, forKey: .platformArn)
        }
        if let solutionStackName = solutionStackName {
            try encodeContainer.encode(solutionStackName, forKey: .solutionStackName)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tier = tier {
            try encodeContainer.encode(tier, forKey: .tier)
        }
        if let versionLabel = versionLabel {
            try encodeContainer.encode(versionLabel, forKey: .versionLabel)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let cnameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cname)
        cname = cnameDecoded
        let dateCreatedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dateCreated)
        dateCreated = dateCreatedDecoded
        let dateUpdatedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dateUpdated)
        dateUpdated = dateUpdatedDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let endpointUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointUrl)
        endpointUrl = endpointUrlDecoded
        let environmentArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .environmentArn)
        environmentArn = environmentArnDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let environmentLinksContainer = try containerValues.decodeIfPresent([AwsElasticBeanstalkEnvironmentEnvironmentLink].self, forKey: .environmentLinks)
        var environmentLinksDecoded0:[AwsElasticBeanstalkEnvironmentEnvironmentLink]? = nil
        if let environmentLinksContainer = environmentLinksContainer {
            environmentLinksDecoded0 = [AwsElasticBeanstalkEnvironmentEnvironmentLink]()
            for structure0 in environmentLinksContainer {
                environmentLinksDecoded0?.append(structure0)
            }
        }
        environmentLinks = environmentLinksDecoded0
        let environmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let optionSettingsContainer = try containerValues.decodeIfPresent([AwsElasticBeanstalkEnvironmentOptionSetting].self, forKey: .optionSettings)
        var optionSettingsDecoded0:[AwsElasticBeanstalkEnvironmentOptionSetting]? = nil
        if let optionSettingsContainer = optionSettingsContainer {
            optionSettingsDecoded0 = [AwsElasticBeanstalkEnvironmentOptionSetting]()
            for structure0 in optionSettingsContainer {
                optionSettingsDecoded0?.append(structure0)
            }
        }
        optionSettings = optionSettingsDecoded0
        let platformArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let tierDecoded = try containerValues.decodeIfPresent(AwsElasticBeanstalkEnvironmentTier.self, forKey: .tier)
        tier = tierDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
    }
}
