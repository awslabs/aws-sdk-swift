// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsCloudFrontDistributionDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheBehaviors = "CacheBehaviors"
        case defaultCacheBehavior = "DefaultCacheBehavior"
        case defaultRootObject = "DefaultRootObject"
        case domainName = "DomainName"
        case eTag = "ETag"
        case lastModifiedTime = "LastModifiedTime"
        case logging = "Logging"
        case originGroups = "OriginGroups"
        case origins = "Origins"
        case status = "Status"
        case webAclId = "WebAclId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cacheBehaviors = cacheBehaviors {
            try encodeContainer.encode(cacheBehaviors, forKey: .cacheBehaviors)
        }
        if let defaultCacheBehavior = defaultCacheBehavior {
            try encodeContainer.encode(defaultCacheBehavior, forKey: .defaultCacheBehavior)
        }
        if let defaultRootObject = defaultRootObject {
            try encodeContainer.encode(defaultRootObject, forKey: .defaultRootObject)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let eTag = eTag {
            try encodeContainer.encode(eTag, forKey: .eTag)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime, forKey: .lastModifiedTime)
        }
        if let logging = logging {
            try encodeContainer.encode(logging, forKey: .logging)
        }
        if let originGroups = originGroups {
            try encodeContainer.encode(originGroups, forKey: .originGroups)
        }
        if let origins = origins {
            try encodeContainer.encode(origins, forKey: .origins)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let webAclId = webAclId {
            try encodeContainer.encode(webAclId, forKey: .webAclId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheBehaviorsDecoded = try containerValues.decodeIfPresent(AwsCloudFrontDistributionCacheBehaviors.self, forKey: .cacheBehaviors)
        cacheBehaviors = cacheBehaviorsDecoded
        let defaultCacheBehaviorDecoded = try containerValues.decodeIfPresent(AwsCloudFrontDistributionDefaultCacheBehavior.self, forKey: .defaultCacheBehavior)
        defaultCacheBehavior = defaultCacheBehaviorDecoded
        let defaultRootObjectDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultRootObject)
        defaultRootObject = defaultRootObjectDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let eTagDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eTag)
        eTag = eTagDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let loggingDecoded = try containerValues.decodeIfPresent(AwsCloudFrontDistributionLogging.self, forKey: .logging)
        logging = loggingDecoded
        let originsDecoded = try containerValues.decodeIfPresent(AwsCloudFrontDistributionOrigins.self, forKey: .origins)
        origins = originsDecoded
        let originGroupsDecoded = try containerValues.decodeIfPresent(AwsCloudFrontDistributionOriginGroups.self, forKey: .originGroups)
        originGroups = originGroupsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let webAclIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .webAclId)
        webAclId = webAclIdDecoded
    }
}
