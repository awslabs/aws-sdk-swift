// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Provides details about an Amazon RDS DB cluster snapshot.</p>
public struct AwsRdsDbSnapshotDetails: Equatable {
    /// <p>The amount of storage (in gigabytes) to be initially allocated for the database instance.</p>
    public let allocatedStorage: Int
    /// <p>Specifies the name of the Availability Zone in which the DB instance was located at the time of the DB snapshot.</p>
    public let availabilityZone: String?
    /// <p>A name for the DB instance.</p>
    public let dbInstanceIdentifier: String?
    /// <p>The name or ARN of the DB snapshot that is used to restore the DB instance.</p>
    public let dbSnapshotIdentifier: String?
    /// <p>The identifier for the source DB instance.</p>
    public let dbiResourceId: String?
    /// <p>Whether the DB snapshot is encrypted.</p>
    public let encrypted: Bool
    /// <p>The name of the database engine to use for this DB instance.</p>
    public let engine: String?
    /// <p>The version of the database engine.</p>
    public let engineVersion: String?
    /// <p>Whether mapping of IAM accounts to database accounts is enabled.</p>
    public let iamDatabaseAuthenticationEnabled: Bool
    /// <p>Specifies the time in Coordinated Universal Time (UTC) when the DB instance, from which the snapshot was taken, was created.</p>
    public let instanceCreateTime: String?
    /// <p>The provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.</p>
    public let iops: Int
    /// <p>If <code>Encrypted</code> is <code>true</code>, the AWS KMS key identifier for the encrypted DB snapshot.</p>
    public let kmsKeyId: String?
    /// <p>License model information for the restored DB instance.</p>
    public let licenseModel: String?
    /// <p>The master user name for the DB snapshot.</p>
    public let masterUsername: String?
    /// <p>The option group name for the DB snapshot.</p>
    public let optionGroupName: String?
    /// <p>The percentage of the estimated data that has been transferred.</p>
    public let percentProgress: Int
    /// <p>The port that the database engine was listening on at the time of the snapshot.</p>
    public let port: Int
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    public let processorFeatures: [AwsRdsDbProcessorFeature]?
    /// <p>When the snapshot was taken in Coordinated Universal Time (UTC).</p>
    public let snapshotCreateTime: String?
    /// <p>The type of the DB snapshot.</p>
    public let snapshotType: String?
    /// <p>The DB snapshot ARN that the DB snapshot was copied from.</p>
    public let sourceDbSnapshotIdentifier: String?
    /// <p>The AWS Region that the DB snapshot was created in or copied from.</p>
    public let sourceRegion: String?
    /// <p>The status of this DB snapshot.</p>
    public let status: String?
    /// <p>The storage type associated with the DB snapshot.</p>
    public let storageType: String?
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    public let tdeCredentialArn: String?
    /// <p>The time zone of the DB snapshot.</p>
    public let timezone: String?
    /// <p>The VPC ID associated with the DB snapshot.</p>
    public let vpcId: String?

    public init (
        allocatedStorage: Int = 0,
        availabilityZone: String? = nil,
        dbInstanceIdentifier: String? = nil,
        dbSnapshotIdentifier: String? = nil,
        dbiResourceId: String? = nil,
        encrypted: Bool = false,
        engine: String? = nil,
        engineVersion: String? = nil,
        iamDatabaseAuthenticationEnabled: Bool = false,
        instanceCreateTime: String? = nil,
        iops: Int = 0,
        kmsKeyId: String? = nil,
        licenseModel: String? = nil,
        masterUsername: String? = nil,
        optionGroupName: String? = nil,
        percentProgress: Int = 0,
        port: Int = 0,
        processorFeatures: [AwsRdsDbProcessorFeature]? = nil,
        snapshotCreateTime: String? = nil,
        snapshotType: String? = nil,
        sourceDbSnapshotIdentifier: String? = nil,
        sourceRegion: String? = nil,
        status: String? = nil,
        storageType: String? = nil,
        tdeCredentialArn: String? = nil,
        timezone: String? = nil,
        vpcId: String? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.availabilityZone = availabilityZone
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.dbSnapshotIdentifier = dbSnapshotIdentifier
        self.dbiResourceId = dbiResourceId
        self.encrypted = encrypted
        self.engine = engine
        self.engineVersion = engineVersion
        self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
        self.instanceCreateTime = instanceCreateTime
        self.iops = iops
        self.kmsKeyId = kmsKeyId
        self.licenseModel = licenseModel
        self.masterUsername = masterUsername
        self.optionGroupName = optionGroupName
        self.percentProgress = percentProgress
        self.port = port
        self.processorFeatures = processorFeatures
        self.snapshotCreateTime = snapshotCreateTime
        self.snapshotType = snapshotType
        self.sourceDbSnapshotIdentifier = sourceDbSnapshotIdentifier
        self.sourceRegion = sourceRegion
        self.status = status
        self.storageType = storageType
        self.tdeCredentialArn = tdeCredentialArn
        self.timezone = timezone
        self.vpcId = vpcId
    }
}
