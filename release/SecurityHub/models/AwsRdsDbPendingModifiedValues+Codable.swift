// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsRdsDbPendingModifiedValues: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case caCertificateIdentifier = "CaCertificateIdentifier"
        case dbInstanceClass = "DbInstanceClass"
        case dbInstanceIdentifier = "DbInstanceIdentifier"
        case dbSubnetGroupName = "DbSubnetGroupName"
        case engineVersion = "EngineVersion"
        case iops = "Iops"
        case licenseModel = "LicenseModel"
        case masterUserPassword = "MasterUserPassword"
        case multiAZ = "MultiAZ"
        case pendingCloudWatchLogsExports = "PendingCloudWatchLogsExports"
        case port = "Port"
        case processorFeatures = "ProcessorFeatures"
        case storageType = "StorageType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedStorage != 0 {
            try encodeContainer.encode(allocatedStorage, forKey: .allocatedStorage)
        }
        if backupRetentionPeriod != 0 {
            try encodeContainer.encode(backupRetentionPeriod, forKey: .backupRetentionPeriod)
        }
        if let caCertificateIdentifier = caCertificateIdentifier {
            try encodeContainer.encode(caCertificateIdentifier, forKey: .caCertificateIdentifier)
        }
        if let dbInstanceClass = dbInstanceClass {
            try encodeContainer.encode(dbInstanceClass, forKey: .dbInstanceClass)
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try encodeContainer.encode(dbInstanceIdentifier, forKey: .dbInstanceIdentifier)
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try encodeContainer.encode(dbSubnetGroupName, forKey: .dbSubnetGroupName)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if iops != 0 {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let licenseModel = licenseModel {
            try encodeContainer.encode(licenseModel, forKey: .licenseModel)
        }
        if let masterUserPassword = masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
        if multiAZ != false {
            try encodeContainer.encode(multiAZ, forKey: .multiAZ)
        }
        if let pendingCloudWatchLogsExports = pendingCloudWatchLogsExports {
            try encodeContainer.encode(pendingCloudWatchLogsExports, forKey: .pendingCloudWatchLogsExports)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let processorFeatures = processorFeatures {
            var processorFeaturesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processorFeatures)
            for awsrdsdbprocessorfeatures0 in processorFeatures {
                try processorFeaturesContainer.encode(awsrdsdbprocessorfeatures0)
            }
        }
        if let storageType = storageType {
            try encodeContainer.encode(storageType, forKey: .storageType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dbInstanceClassDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dbInstanceClass)
        dbInstanceClass = dbInstanceClassDecoded
        let allocatedStorageDecoded = try containerValues.decode(Int.self, forKey: .allocatedStorage)
        allocatedStorage = allocatedStorageDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let portDecoded = try containerValues.decode(Int.self, forKey: .port)
        port = portDecoded
        let backupRetentionPeriodDecoded = try containerValues.decode(Int.self, forKey: .backupRetentionPeriod)
        backupRetentionPeriod = backupRetentionPeriodDecoded
        let multiAZDecoded = try containerValues.decode(Bool.self, forKey: .multiAZ)
        multiAZ = multiAZDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let licenseModelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseModel)
        licenseModel = licenseModelDecoded
        let iopsDecoded = try containerValues.decode(Int.self, forKey: .iops)
        iops = iopsDecoded
        let dbInstanceIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dbInstanceIdentifier)
        dbInstanceIdentifier = dbInstanceIdentifierDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let caCertificateIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .caCertificateIdentifier)
        caCertificateIdentifier = caCertificateIdentifierDecoded
        let dbSubnetGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dbSubnetGroupName)
        dbSubnetGroupName = dbSubnetGroupNameDecoded
        let pendingCloudWatchLogsExportsDecoded = try containerValues.decodeIfPresent(AwsRdsPendingCloudWatchLogsExports.self, forKey: .pendingCloudWatchLogsExports)
        pendingCloudWatchLogsExports = pendingCloudWatchLogsExportsDecoded
        let processorFeaturesContainer = try containerValues.decodeIfPresent([AwsRdsDbProcessorFeature].self, forKey: .processorFeatures)
        var processorFeaturesDecoded0:[AwsRdsDbProcessorFeature]? = nil
        if let processorFeaturesContainer = processorFeaturesContainer {
            processorFeaturesDecoded0 = [AwsRdsDbProcessorFeature]()
            for structure0 in processorFeaturesContainer {
                processorFeaturesDecoded0?.append(structure0)
            }
        }
        processorFeatures = processorFeaturesDecoded0
    }
}
