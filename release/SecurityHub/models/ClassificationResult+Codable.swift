// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ClassificationResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalOccurrences = "AdditionalOccurrences"
        case customDataIdentifiers = "CustomDataIdentifiers"
        case mimeType = "MimeType"
        case sensitiveData = "SensitiveData"
        case sizeClassified = "SizeClassified"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if additionalOccurrences != false {
            try encodeContainer.encode(additionalOccurrences, forKey: .additionalOccurrences)
        }
        if let customDataIdentifiers = customDataIdentifiers {
            try encodeContainer.encode(customDataIdentifiers, forKey: .customDataIdentifiers)
        }
        if let mimeType = mimeType {
            try encodeContainer.encode(mimeType, forKey: .mimeType)
        }
        if let sensitiveData = sensitiveData {
            var sensitiveDataContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sensitiveData)
            for sensitivedataresultlist0 in sensitiveData {
                try sensitiveDataContainer.encode(sensitivedataresultlist0)
            }
        }
        if sizeClassified != 0 {
            try encodeContainer.encode(sizeClassified, forKey: .sizeClassified)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mimeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mimeType)
        mimeType = mimeTypeDecoded
        let sizeClassifiedDecoded = try containerValues.decode(Int.self, forKey: .sizeClassified)
        sizeClassified = sizeClassifiedDecoded
        let additionalOccurrencesDecoded = try containerValues.decode(Bool.self, forKey: .additionalOccurrences)
        additionalOccurrences = additionalOccurrencesDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ClassificationStatus.self, forKey: .status)
        status = statusDecoded
        let sensitiveDataContainer = try containerValues.decodeIfPresent([SensitiveDataResult].self, forKey: .sensitiveData)
        var sensitiveDataDecoded0:[SensitiveDataResult]? = nil
        if let sensitiveDataContainer = sensitiveDataContainer {
            sensitiveDataDecoded0 = [SensitiveDataResult]()
            for structure0 in sensitiveDataContainer {
                sensitiveDataDecoded0?.append(structure0)
            }
        }
        sensitiveData = sensitiveDataDecoded0
        let customDataIdentifiersDecoded = try containerValues.decodeIfPresent(CustomDataIdentifiersResult.self, forKey: .customDataIdentifiers)
        customDataIdentifiers = customDataIdentifiersDecoded
    }
}
