// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SeverityUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case label = "Label"
        case normalized = "Normalized"
        case product = "Product"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let label = label {
            try encodeContainer.encode(label.rawValue, forKey: .label)
        }
        if normalized != 0 {
            try encodeContainer.encode(normalized, forKey: .normalized)
        }
        if product != 0.0 {
            try encodeContainer.encode(product, forKey: .product)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let normalizedDecoded = try containerValues.decode(Int.self, forKey: .normalized)
        normalized = normalizedDecoded
        let productDecoded = try containerValues.decode(Double.self, forKey: .product)
        product = productDecoded
        let labelDecoded = try containerValues.decodeIfPresent(SeverityLabel.self, forKey: .label)
        label = labelDecoded
    }
}
