// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum MalwareType {
    case adware
    case blendedThreat
    case botnetAgent
    case coinMiner
    case exploitKit
    case keylogger
    case macro
    case potentiallyUnwanted
    case ransomware
    case remoteAccess
    case rootkit
    case spyware
    case trojan
    case virus
    case worm
    case sdkUnknown(String)
}

extension MalwareType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MalwareType] {
        return [
            .adware,
            .blendedThreat,
            .botnetAgent,
            .coinMiner,
            .exploitKit,
            .keylogger,
            .macro,
            .potentiallyUnwanted,
            .ransomware,
            .remoteAccess,
            .rootkit,
            .spyware,
            .trojan,
            .virus,
            .worm,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .adware: return "ADWARE"
        case .blendedThreat: return "BLENDED_THREAT"
        case .botnetAgent: return "BOTNET_AGENT"
        case .coinMiner: return "COIN_MINER"
        case .exploitKit: return "EXPLOIT_KIT"
        case .keylogger: return "KEYLOGGER"
        case .macro: return "MACRO"
        case .potentiallyUnwanted: return "POTENTIALLY_UNWANTED"
        case .ransomware: return "RANSOMWARE"
        case .remoteAccess: return "REMOTE_ACCESS"
        case .rootkit: return "ROOTKIT"
        case .spyware: return "SPYWARE"
        case .trojan: return "TROJAN"
        case .virus: return "VIRUS"
        case .worm: return "WORM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MalwareType(rawValue: rawValue) ?? MalwareType.sdkUnknown(rawValue)
    }
}
