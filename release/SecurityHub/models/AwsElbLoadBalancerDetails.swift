// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains details about a Classic Load Balancer.</p>
public struct AwsElbLoadBalancerDetails: Equatable {
    /// <p>The list of Availability Zones for the load balancer.</p>
    public let availabilityZones: [String]?
    /// <p>Information about the configuration of the EC2 instances.</p>
    public let backendServerDescriptions: [AwsElbLoadBalancerBackendServerDescription]?
    /// <p>The name of the Amazon Route 53 hosted zone for the load balancer.</p>
    public let canonicalHostedZoneName: String?
    /// <p>The ID of the Amazon Route 53 hosted zone for the load balancer.</p>
    public let canonicalHostedZoneNameID: String?
    /// <p>Indicates when the load balancer was created.</p>
    ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
    ///             Date/Time Format</a>. The value cannot contain spaces. For example,
    ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
    public let createdTime: String?
    /// <p>The DNS name of the load balancer.</p>
    public let dnsName: String?
    /// <p>Information about the health checks that are conducted on the load balancer.</p>
    public let healthCheck: AwsElbLoadBalancerHealthCheck?
    /// <p>List of EC2 instances for the load balancer.</p>
    public let instances: [AwsElbLoadBalancerInstance]?
    /// <p>The policies that are enabled for the load balancer listeners.</p>
    public let listenerDescriptions: [AwsElbLoadBalancerListenerDescription]?
    /// <p>The attributes for a load balancer.</p>
    public let loadBalancerAttributes: AwsElbLoadBalancerAttributes?
    /// <p>The name of the load balancer.</p>
    public let loadBalancerName: String?
    /// <p>The policies for a load balancer.</p>
    public let policies: AwsElbLoadBalancerPolicies?
    /// <p>The type of load balancer. Only provided if the load balancer is in a VPC.</p>
    ///          <p>If <code>Scheme</code> is <code>internet-facing</code>, the load balancer has a public
    ///          DNS name that resolves to a public IP address.</p>
    ///          <p>If <code>Scheme</code> is <code>internal</code>, the load balancer has a public DNS name
    ///          that resolves to a private IP address.</p>
    public let scheme: String?
    /// <p>The security groups for the load balancer. Only provided if the load balancer is in a
    ///          VPC.</p>
    public let securityGroups: [String]?
    /// <p>Information about the security group for the load balancer. This is the security group
    ///          that is used for inbound rules.</p>
    public let sourceSecurityGroup: AwsElbLoadBalancerSourceSecurityGroup?
    /// <p>The list of subnet identifiers for the load balancer.</p>
    public let subnets: [String]?
    /// <p>The identifier of the VPC for the load balancer.</p>
    public let vpcId: String?

    public init (
        availabilityZones: [String]? = nil,
        backendServerDescriptions: [AwsElbLoadBalancerBackendServerDescription]? = nil,
        canonicalHostedZoneName: String? = nil,
        canonicalHostedZoneNameID: String? = nil,
        createdTime: String? = nil,
        dnsName: String? = nil,
        healthCheck: AwsElbLoadBalancerHealthCheck? = nil,
        instances: [AwsElbLoadBalancerInstance]? = nil,
        listenerDescriptions: [AwsElbLoadBalancerListenerDescription]? = nil,
        loadBalancerAttributes: AwsElbLoadBalancerAttributes? = nil,
        loadBalancerName: String? = nil,
        policies: AwsElbLoadBalancerPolicies? = nil,
        scheme: String? = nil,
        securityGroups: [String]? = nil,
        sourceSecurityGroup: AwsElbLoadBalancerSourceSecurityGroup? = nil,
        subnets: [String]? = nil,
        vpcId: String? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.backendServerDescriptions = backendServerDescriptions
        self.canonicalHostedZoneName = canonicalHostedZoneName
        self.canonicalHostedZoneNameID = canonicalHostedZoneNameID
        self.createdTime = createdTime
        self.dnsName = dnsName
        self.healthCheck = healthCheck
        self.instances = instances
        self.listenerDescriptions = listenerDescriptions
        self.loadBalancerAttributes = loadBalancerAttributes
        self.loadBalancerName = loadBalancerName
        self.policies = policies
        self.scheme = scheme
        self.securityGroups = securityGroups
        self.sourceSecurityGroup = sourceSecurityGroup
        self.subnets = subnets
        self.vpcId = vpcId
    }
}
