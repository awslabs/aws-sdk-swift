// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsEc2NetworkAclDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case associations = "Associations"
        case entries = "Entries"
        case isDefault = "IsDefault"
        case networkAclId = "NetworkAclId"
        case ownerId = "OwnerId"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associations = associations {
            var associationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .associations)
            for awsec2networkaclassociationlist0 in associations {
                try associationsContainer.encode(awsec2networkaclassociationlist0)
            }
        }
        if let entries = entries {
            var entriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entries)
            for awsec2networkaclentrylist0 in entries {
                try entriesContainer.encode(awsec2networkaclentrylist0)
            }
        }
        if isDefault != false {
            try encodeContainer.encode(isDefault, forKey: .isDefault)
        }
        if let networkAclId = networkAclId {
            try encodeContainer.encode(networkAclId, forKey: .networkAclId)
        }
        if let ownerId = ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isDefaultDecoded = try containerValues.decode(Bool.self, forKey: .isDefault)
        isDefault = isDefaultDecoded
        let networkAclIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkAclId)
        networkAclId = networkAclIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let associationsContainer = try containerValues.decodeIfPresent([AwsEc2NetworkAclAssociation].self, forKey: .associations)
        var associationsDecoded0:[AwsEc2NetworkAclAssociation]? = nil
        if let associationsContainer = associationsContainer {
            associationsDecoded0 = [AwsEc2NetworkAclAssociation]()
            for structure0 in associationsContainer {
                associationsDecoded0?.append(structure0)
            }
        }
        associations = associationsDecoded0
        let entriesContainer = try containerValues.decodeIfPresent([AwsEc2NetworkAclEntry].self, forKey: .entries)
        var entriesDecoded0:[AwsEc2NetworkAclEntry]? = nil
        if let entriesContainer = entriesContainer {
            entriesDecoded0 = [AwsEc2NetworkAclEntry]()
            for structure0 in entriesContainer {
                entriesDecoded0?.append(structure0)
            }
        }
        entries = entriesDecoded0
    }
}
