// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Information about an Amazon RDS DB cluster.</p>
public struct AwsRdsDbClusterDetails: Equatable {
    /// <p>The status of the database activity stream.</p>
    public let activityStreamStatus: String?
    /// <p>For all database engines except Aurora, specifies the allocated storage size in
    ///          gibibytes (GiB).</p>
    public let allocatedStorage: Int
    /// <p>A list of the IAM roles that are associated with the DB cluster.</p>
    public let associatedRoles: [AwsRdsDbClusterAssociatedRole]?
    /// <p>A list of Availability Zones (AZs) where instances in the DB cluster can be
    ///          created.</p>
    public let availabilityZones: [String]?
    /// <p>The number of days for which automated backups are retained.</p>
    public let backupRetentionPeriod: Int
    /// <p>Indicates when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
    ///             Date/Time Format</a>. The value cannot contain spaces. For example,
    ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
    public let clusterCreateTime: String?
    /// <p>Whether tags are copied from the DB cluster to snapshots of the DB cluster.</p>
    public let copyTagsToSnapshot: Bool
    /// <p>Whether the DB cluster is a clone of a DB cluster owned by a different AWS
    ///          account.</p>
    public let crossAccountClone: Bool
    /// <p>A list of custom endpoints for the DB cluster.</p>
    public let customEndpoints: [String]?
    /// <p>The name of the database.</p>
    public let databaseName: String?
    /// <p>The DB cluster identifier that the user assigned to the cluster. This identifier is the
    ///          unique key that identifies a DB cluster.</p>
    public let dbClusterIdentifier: String?
    /// <p>The list of instances that make up the DB cluster.</p>
    public let dbClusterMembers: [AwsRdsDbClusterMember]?
    /// <p>The list of option group memberships for this DB cluster.</p>
    public let dbClusterOptionGroupMemberships: [AwsRdsDbClusterOptionGroupMembership]?
    /// <p>The name of the DB cluster parameter group for the DB cluster.</p>
    public let dbClusterParameterGroup: String?
    /// <p>The identifier of the DB cluster. The identifier must be unique within each AWS Region
    ///          and is immutable.</p>
    public let dbClusterResourceId: String?
    /// <p>The subnet group that is associated with the DB cluster, including the name,
    ///          description, and subnets in the subnet group.</p>
    public let dbSubnetGroup: String?
    /// <p>Whether the DB cluster has deletion protection enabled.</p>
    public let deletionProtection: Bool
    /// <p>The Active Directory domain membership records that are associated with the DB
    ///          cluster.</p>
    public let domainMemberships: [AwsRdsDbDomainMembership]?
    /// <p>A list of log types that this DB cluster is configured to export to CloudWatch
    ///          Logs.</p>
    public let enabledCloudWatchLogsExports: [String]?
    /// <p>The connection endpoint for the primary instance of the DB cluster.</p>
    public let endpoint: String?
    /// <p>The name of the database engine to use for this DB cluster.</p>
    public let engine: String?
    /// <p>The database engine mode of the DB cluster.</p>
    public let engineMode: String?
    /// <p>The version number of the database engine to use.</p>
    public let engineVersion: String?
    /// <p>Specifies the identifier that Amazon Route 53 assigns when you create a hosted
    ///          zone.</p>
    public let hostedZoneId: String?
    /// <p>Whether the HTTP endpoint for an Aurora Serverless DB cluster is enabled.</p>
    public let httpEndpointEnabled: Bool
    /// <p>Whether the mapping of IAM accounts to database accounts is enabled.</p>
    public let iamDatabaseAuthenticationEnabled: Bool
    /// <p>The ARN of the AWS KMS master key that is used to encrypt the database instances in the
    ///          DB cluster.</p>
    public let kmsKeyId: String?
    /// <p>The name of the master user for the DB cluster.</p>
    public let masterUsername: String?
    /// <p>Whether the DB cluster has instances in multiple Availability Zones.</p>
    public let multiAz: Bool
    /// <p>The port number on which the DB instances in the DB cluster accept connections.</p>
    public let port: Int
    /// <p>The range of time each day when automated backups are created, if automated backups are
    ///          enabled.</p>
    ///          <p>Uses the format <code>HH:MM-HH:MM</code>. For example, <code>04:52-05:22</code>.</p>
    public let preferredBackupWindow: String?
    /// <p>The weekly time range during which system maintenance can occur, in Universal
    ///          Coordinated Time (UTC).</p>
    ///          <p>Uses the format <code><day>:HH:MM-<day>:HH:MM</code>.</p>
    ///          <p>For the day values, use
    ///             <code>mon</code>|<code>tue</code>|<code>wed</code>|<code>thu</code>|<code>fri</code>|<code>sat</code>|<code>sun</code>.</p>
    ///          <p>For example, <code>sun:09:32-sun:10:02</code>.</p>
    public let preferredMaintenanceWindow: String?
    /// <p>The identifiers of the read replicas that are associated with this DB cluster.</p>
    public let readReplicaIdentifiers: [String]?
    /// <p>The reader endpoint for the DB cluster.</p>
    public let readerEndpoint: String?
    /// <p>The current status of this DB cluster.</p>
    public let status: String?
    /// <p>Whether the DB cluster is encrypted.</p>
    public let storageEncrypted: Bool
    /// <p>A list of VPC security groups that the DB cluster belongs to.</p>
    public let vpcSecurityGroups: [AwsRdsDbInstanceVpcSecurityGroup]?

    public init (
        activityStreamStatus: String? = nil,
        allocatedStorage: Int = 0,
        associatedRoles: [AwsRdsDbClusterAssociatedRole]? = nil,
        availabilityZones: [String]? = nil,
        backupRetentionPeriod: Int = 0,
        clusterCreateTime: String? = nil,
        copyTagsToSnapshot: Bool = false,
        crossAccountClone: Bool = false,
        customEndpoints: [String]? = nil,
        databaseName: String? = nil,
        dbClusterIdentifier: String? = nil,
        dbClusterMembers: [AwsRdsDbClusterMember]? = nil,
        dbClusterOptionGroupMemberships: [AwsRdsDbClusterOptionGroupMembership]? = nil,
        dbClusterParameterGroup: String? = nil,
        dbClusterResourceId: String? = nil,
        dbSubnetGroup: String? = nil,
        deletionProtection: Bool = false,
        domainMemberships: [AwsRdsDbDomainMembership]? = nil,
        enabledCloudWatchLogsExports: [String]? = nil,
        endpoint: String? = nil,
        engine: String? = nil,
        engineMode: String? = nil,
        engineVersion: String? = nil,
        hostedZoneId: String? = nil,
        httpEndpointEnabled: Bool = false,
        iamDatabaseAuthenticationEnabled: Bool = false,
        kmsKeyId: String? = nil,
        masterUsername: String? = nil,
        multiAz: Bool = false,
        port: Int = 0,
        preferredBackupWindow: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        readReplicaIdentifiers: [String]? = nil,
        readerEndpoint: String? = nil,
        status: String? = nil,
        storageEncrypted: Bool = false,
        vpcSecurityGroups: [AwsRdsDbInstanceVpcSecurityGroup]? = nil
    )
    {
        self.activityStreamStatus = activityStreamStatus
        self.allocatedStorage = allocatedStorage
        self.associatedRoles = associatedRoles
        self.availabilityZones = availabilityZones
        self.backupRetentionPeriod = backupRetentionPeriod
        self.clusterCreateTime = clusterCreateTime
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.crossAccountClone = crossAccountClone
        self.customEndpoints = customEndpoints
        self.databaseName = databaseName
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterMembers = dbClusterMembers
        self.dbClusterOptionGroupMemberships = dbClusterOptionGroupMemberships
        self.dbClusterParameterGroup = dbClusterParameterGroup
        self.dbClusterResourceId = dbClusterResourceId
        self.dbSubnetGroup = dbSubnetGroup
        self.deletionProtection = deletionProtection
        self.domainMemberships = domainMemberships
        self.enabledCloudWatchLogsExports = enabledCloudWatchLogsExports
        self.endpoint = endpoint
        self.engine = engine
        self.engineMode = engineMode
        self.engineVersion = engineVersion
        self.hostedZoneId = hostedZoneId
        self.httpEndpointEnabled = httpEndpointEnabled
        self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
        self.kmsKeyId = kmsKeyId
        self.masterUsername = masterUsername
        self.multiAz = multiAz
        self.port = port
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.readReplicaIdentifiers = readReplicaIdentifiers
        self.readerEndpoint = readerEndpoint
        self.status = status
        self.storageEncrypted = storageEncrypted
        self.vpcSecurityGroups = vpcSecurityGroups
    }
}
