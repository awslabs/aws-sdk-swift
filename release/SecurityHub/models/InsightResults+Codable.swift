// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InsightResults: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case groupByAttribute = "GroupByAttribute"
        case insightArn = "InsightArn"
        case resultValues = "ResultValues"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupByAttribute = groupByAttribute {
            try encodeContainer.encode(groupByAttribute, forKey: .groupByAttribute)
        }
        if let insightArn = insightArn {
            try encodeContainer.encode(insightArn, forKey: .insightArn)
        }
        if let resultValues = resultValues {
            var resultValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resultValues)
            for insightresultvaluelist0 in resultValues {
                try resultValuesContainer.encode(insightresultvaluelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .insightArn)
        insightArn = insightArnDecoded
        let groupByAttributeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupByAttribute)
        groupByAttribute = groupByAttributeDecoded
        let resultValuesContainer = try containerValues.decodeIfPresent([InsightResultValue].self, forKey: .resultValues)
        var resultValuesDecoded0:[InsightResultValue]? = nil
        if let resultValuesContainer = resultValuesContainer {
            resultValuesDecoded0 = [InsightResultValue]()
            for structure0 in resultValuesContainer {
                resultValuesDecoded0?.append(structure0)
            }
        }
        resultValues = resultValuesDecoded0
    }
}
