// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Product: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activationUrl = "ActivationUrl"
        case categories = "Categories"
        case companyName = "CompanyName"
        case description = "Description"
        case integrationTypes = "IntegrationTypes"
        case marketplaceUrl = "MarketplaceUrl"
        case productArn = "ProductArn"
        case productName = "ProductName"
        case productSubscriptionResourcePolicy = "ProductSubscriptionResourcePolicy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activationUrl = activationUrl {
            try encodeContainer.encode(activationUrl, forKey: .activationUrl)
        }
        if let categories = categories {
            var categoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .categories)
            for categorylist0 in categories {
                try categoriesContainer.encode(categorylist0)
            }
        }
        if let companyName = companyName {
            try encodeContainer.encode(companyName, forKey: .companyName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let integrationTypes = integrationTypes {
            var integrationTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .integrationTypes)
            for integrationtypelist0 in integrationTypes {
                try integrationTypesContainer.encode(integrationtypelist0.rawValue)
            }
        }
        if let marketplaceUrl = marketplaceUrl {
            try encodeContainer.encode(marketplaceUrl, forKey: .marketplaceUrl)
        }
        if let productArn = productArn {
            try encodeContainer.encode(productArn, forKey: .productArn)
        }
        if let productName = productName {
            try encodeContainer.encode(productName, forKey: .productName)
        }
        if let productSubscriptionResourcePolicy = productSubscriptionResourcePolicy {
            try encodeContainer.encode(productSubscriptionResourcePolicy, forKey: .productSubscriptionResourcePolicy)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productArn)
        productArn = productArnDecoded
        let productNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productName)
        productName = productNameDecoded
        let companyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .companyName)
        companyName = companyNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let categoriesContainer = try containerValues.decodeIfPresent([String].self, forKey: .categories)
        var categoriesDecoded0:[String]? = nil
        if let categoriesContainer = categoriesContainer {
            categoriesDecoded0 = [String]()
            for string0 in categoriesContainer {
                categoriesDecoded0?.append(string0)
            }
        }
        categories = categoriesDecoded0
        let integrationTypesContainer = try containerValues.decodeIfPresent([IntegrationType].self, forKey: .integrationTypes)
        var integrationTypesDecoded0:[IntegrationType]? = nil
        if let integrationTypesContainer = integrationTypesContainer {
            integrationTypesDecoded0 = [IntegrationType]()
            for string0 in integrationTypesContainer {
                integrationTypesDecoded0?.append(string0)
            }
        }
        integrationTypes = integrationTypesDecoded0
        let marketplaceUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marketplaceUrl)
        marketplaceUrl = marketplaceUrlDecoded
        let activationUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activationUrl)
        activationUrl = activationUrlDecoded
        let productSubscriptionResourcePolicyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productSubscriptionResourcePolicy)
        productSubscriptionResourcePolicy = productSubscriptionResourcePolicyDecoded
    }
}
