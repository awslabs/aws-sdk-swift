// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEnabledStandardsInputBody: Equatable {
    public let standardsSubscriptionArns: [String]?
    public let nextToken: String?
    public let maxResults: Int
}

extension GetEnabledStandardsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case standardsSubscriptionArns = "StandardsSubscriptionArns"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let standardsSubscriptionArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .standardsSubscriptionArns)
        var standardsSubscriptionArnsDecoded0:[String]? = nil
        if let standardsSubscriptionArnsContainer = standardsSubscriptionArnsContainer {
            standardsSubscriptionArnsDecoded0 = [String]()
            for string0 in standardsSubscriptionArnsContainer {
                standardsSubscriptionArnsDecoded0?.append(string0)
            }
        }
        standardsSubscriptionArns = standardsSubscriptionArnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
