// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkPathComponentDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case address = "Address"
        case portRanges = "PortRanges"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = address {
            var addressContainer = encodeContainer.nestedUnkeyedContainer(forKey: .address)
            for stringlist0 in address {
                try addressContainer.encode(stringlist0)
            }
        }
        if let portRanges = portRanges {
            var portRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .portRanges)
            for portrangelist0 in portRanges {
                try portRangesContainer.encode(portrangelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressContainer = try containerValues.decodeIfPresent([String].self, forKey: .address)
        var addressDecoded0:[String]? = nil
        if let addressContainer = addressContainer {
            addressDecoded0 = [String]()
            for string0 in addressContainer {
                addressDecoded0?.append(string0)
            }
        }
        address = addressDecoded0
        let portRangesContainer = try containerValues.decodeIfPresent([PortRange].self, forKey: .portRanges)
        var portRangesDecoded0:[PortRange]? = nil
        if let portRangesContainer = portRangesContainer {
            portRangesDecoded0 = [PortRange]()
            for structure0 in portRangesContainer {
                portRangesDecoded0?.append(structure0)
            }
        }
        portRanges = portRangesDecoded0
    }
}
