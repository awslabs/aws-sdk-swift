// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsEc2SecurityGroupIpPermission: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fromPort = "FromPort"
        case ipProtocol = "IpProtocol"
        case ipRanges = "IpRanges"
        case ipv6Ranges = "Ipv6Ranges"
        case prefixListIds = "PrefixListIds"
        case toPort = "ToPort"
        case userIdGroupPairs = "UserIdGroupPairs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if fromPort != 0 {
            try encodeContainer.encode(fromPort, forKey: .fromPort)
        }
        if let ipProtocol = ipProtocol {
            try encodeContainer.encode(ipProtocol, forKey: .ipProtocol)
        }
        if let ipRanges = ipRanges {
            var ipRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipRanges)
            for awsec2securitygroupiprangelist0 in ipRanges {
                try ipRangesContainer.encode(awsec2securitygroupiprangelist0)
            }
        }
        if let ipv6Ranges = ipv6Ranges {
            var ipv6RangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6Ranges)
            for awsec2securitygroupipv6rangelist0 in ipv6Ranges {
                try ipv6RangesContainer.encode(awsec2securitygroupipv6rangelist0)
            }
        }
        if let prefixListIds = prefixListIds {
            var prefixListIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .prefixListIds)
            for awsec2securitygroupprefixlistidlist0 in prefixListIds {
                try prefixListIdsContainer.encode(awsec2securitygroupprefixlistidlist0)
            }
        }
        if toPort != 0 {
            try encodeContainer.encode(toPort, forKey: .toPort)
        }
        if let userIdGroupPairs = userIdGroupPairs {
            var userIdGroupPairsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userIdGroupPairs)
            for awsec2securitygroupuseridgrouppairlist0 in userIdGroupPairs {
                try userIdGroupPairsContainer.encode(awsec2securitygroupuseridgrouppairlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipProtocolDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipProtocol)
        ipProtocol = ipProtocolDecoded
        let fromPortDecoded = try containerValues.decode(Int.self, forKey: .fromPort)
        fromPort = fromPortDecoded
        let toPortDecoded = try containerValues.decode(Int.self, forKey: .toPort)
        toPort = toPortDecoded
        let userIdGroupPairsContainer = try containerValues.decodeIfPresent([AwsEc2SecurityGroupUserIdGroupPair].self, forKey: .userIdGroupPairs)
        var userIdGroupPairsDecoded0:[AwsEc2SecurityGroupUserIdGroupPair]? = nil
        if let userIdGroupPairsContainer = userIdGroupPairsContainer {
            userIdGroupPairsDecoded0 = [AwsEc2SecurityGroupUserIdGroupPair]()
            for structure0 in userIdGroupPairsContainer {
                userIdGroupPairsDecoded0?.append(structure0)
            }
        }
        userIdGroupPairs = userIdGroupPairsDecoded0
        let ipRangesContainer = try containerValues.decodeIfPresent([AwsEc2SecurityGroupIpRange].self, forKey: .ipRanges)
        var ipRangesDecoded0:[AwsEc2SecurityGroupIpRange]? = nil
        if let ipRangesContainer = ipRangesContainer {
            ipRangesDecoded0 = [AwsEc2SecurityGroupIpRange]()
            for structure0 in ipRangesContainer {
                ipRangesDecoded0?.append(structure0)
            }
        }
        ipRanges = ipRangesDecoded0
        let ipv6RangesContainer = try containerValues.decodeIfPresent([AwsEc2SecurityGroupIpv6Range].self, forKey: .ipv6Ranges)
        var ipv6RangesDecoded0:[AwsEc2SecurityGroupIpv6Range]? = nil
        if let ipv6RangesContainer = ipv6RangesContainer {
            ipv6RangesDecoded0 = [AwsEc2SecurityGroupIpv6Range]()
            for structure0 in ipv6RangesContainer {
                ipv6RangesDecoded0?.append(structure0)
            }
        }
        ipv6Ranges = ipv6RangesDecoded0
        let prefixListIdsContainer = try containerValues.decodeIfPresent([AwsEc2SecurityGroupPrefixListId].self, forKey: .prefixListIds)
        var prefixListIdsDecoded0:[AwsEc2SecurityGroupPrefixListId]? = nil
        if let prefixListIdsContainer = prefixListIdsContainer {
            prefixListIdsDecoded0 = [AwsEc2SecurityGroupPrefixListId]()
            for structure0 in prefixListIdsContainer {
                prefixListIdsDecoded0?.append(structure0)
            }
        }
        prefixListIds = prefixListIdsDecoded0
    }
}
