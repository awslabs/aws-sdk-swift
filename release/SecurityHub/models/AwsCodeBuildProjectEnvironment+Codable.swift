// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsCodeBuildProjectEnvironment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificate = "Certificate"
        case imagePullCredentialsType = "ImagePullCredentialsType"
        case registryCredential = "RegistryCredential"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificate = certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let imagePullCredentialsType = imagePullCredentialsType {
            try encodeContainer.encode(imagePullCredentialsType, forKey: .imagePullCredentialsType)
        }
        if let registryCredential = registryCredential {
            try encodeContainer.encode(registryCredential, forKey: .registryCredential)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificate)
        certificate = certificateDecoded
        let imagePullCredentialsTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imagePullCredentialsType)
        imagePullCredentialsType = imagePullCredentialsTypeDecoded
        let registryCredentialDecoded = try containerValues.decodeIfPresent(AwsCodeBuildProjectEnvironmentRegistryCredential.self, forKey: .registryCredential)
        registryCredential = registryCredentialDecoded
        let typeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .type)
        type = typeDecoded
    }
}
