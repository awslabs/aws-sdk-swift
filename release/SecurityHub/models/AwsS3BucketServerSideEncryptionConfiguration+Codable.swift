// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsS3BucketServerSideEncryptionConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case rules = "Rules"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for awss3bucketserversideencryptionrules0 in rules {
                try rulesContainer.encode(awss3bucketserversideencryptionrules0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rulesContainer = try containerValues.decodeIfPresent([AwsS3BucketServerSideEncryptionRule].self, forKey: .rules)
        var rulesDecoded0:[AwsS3BucketServerSideEncryptionRule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [AwsS3BucketServerSideEncryptionRule]()
            for structure0 in rulesContainer {
                rulesDecoded0?.append(structure0)
            }
        }
        rules = rulesDecoded0
    }
}
