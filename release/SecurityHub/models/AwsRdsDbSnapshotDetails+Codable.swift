// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsRdsDbSnapshotDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case availabilityZone = "AvailabilityZone"
        case dbInstanceIdentifier = "DbInstanceIdentifier"
        case dbSnapshotIdentifier = "DbSnapshotIdentifier"
        case dbiResourceId = "DbiResourceId"
        case encrypted = "Encrypted"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case iamDatabaseAuthenticationEnabled = "IamDatabaseAuthenticationEnabled"
        case instanceCreateTime = "InstanceCreateTime"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case licenseModel = "LicenseModel"
        case masterUsername = "MasterUsername"
        case optionGroupName = "OptionGroupName"
        case percentProgress = "PercentProgress"
        case port = "Port"
        case processorFeatures = "ProcessorFeatures"
        case snapshotCreateTime = "SnapshotCreateTime"
        case snapshotType = "SnapshotType"
        case sourceDbSnapshotIdentifier = "SourceDbSnapshotIdentifier"
        case sourceRegion = "SourceRegion"
        case status = "Status"
        case storageType = "StorageType"
        case tdeCredentialArn = "TdeCredentialArn"
        case timezone = "Timezone"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedStorage != 0 {
            try encodeContainer.encode(allocatedStorage, forKey: .allocatedStorage)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try encodeContainer.encode(dbInstanceIdentifier, forKey: .dbInstanceIdentifier)
        }
        if let dbSnapshotIdentifier = dbSnapshotIdentifier {
            try encodeContainer.encode(dbSnapshotIdentifier, forKey: .dbSnapshotIdentifier)
        }
        if let dbiResourceId = dbiResourceId {
            try encodeContainer.encode(dbiResourceId, forKey: .dbiResourceId)
        }
        if encrypted != false {
            try encodeContainer.encode(encrypted, forKey: .encrypted)
        }
        if let engine = engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if iamDatabaseAuthenticationEnabled != false {
            try encodeContainer.encode(iamDatabaseAuthenticationEnabled, forKey: .iamDatabaseAuthenticationEnabled)
        }
        if let instanceCreateTime = instanceCreateTime {
            try encodeContainer.encode(instanceCreateTime, forKey: .instanceCreateTime)
        }
        if iops != 0 {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let licenseModel = licenseModel {
            try encodeContainer.encode(licenseModel, forKey: .licenseModel)
        }
        if let masterUsername = masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if let optionGroupName = optionGroupName {
            try encodeContainer.encode(optionGroupName, forKey: .optionGroupName)
        }
        if percentProgress != 0 {
            try encodeContainer.encode(percentProgress, forKey: .percentProgress)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let processorFeatures = processorFeatures {
            var processorFeaturesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processorFeatures)
            for awsrdsdbprocessorfeatures0 in processorFeatures {
                try processorFeaturesContainer.encode(awsrdsdbprocessorfeatures0)
            }
        }
        if let snapshotCreateTime = snapshotCreateTime {
            try encodeContainer.encode(snapshotCreateTime, forKey: .snapshotCreateTime)
        }
        if let snapshotType = snapshotType {
            try encodeContainer.encode(snapshotType, forKey: .snapshotType)
        }
        if let sourceDbSnapshotIdentifier = sourceDbSnapshotIdentifier {
            try encodeContainer.encode(sourceDbSnapshotIdentifier, forKey: .sourceDbSnapshotIdentifier)
        }
        if let sourceRegion = sourceRegion {
            try encodeContainer.encode(sourceRegion, forKey: .sourceRegion)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let storageType = storageType {
            try encodeContainer.encode(storageType, forKey: .storageType)
        }
        if let tdeCredentialArn = tdeCredentialArn {
            try encodeContainer.encode(tdeCredentialArn, forKey: .tdeCredentialArn)
        }
        if let timezone = timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dbSnapshotIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dbSnapshotIdentifier)
        dbSnapshotIdentifier = dbSnapshotIdentifierDecoded
        let dbInstanceIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dbInstanceIdentifier)
        dbInstanceIdentifier = dbInstanceIdentifierDecoded
        let snapshotCreateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotCreateTime)
        snapshotCreateTime = snapshotCreateTimeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let allocatedStorageDecoded = try containerValues.decode(Int.self, forKey: .allocatedStorage)
        allocatedStorage = allocatedStorageDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let portDecoded = try containerValues.decode(Int.self, forKey: .port)
        port = portDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let instanceCreateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceCreateTime)
        instanceCreateTime = instanceCreateTimeDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let licenseModelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseModel)
        licenseModel = licenseModelDecoded
        let snapshotTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotType)
        snapshotType = snapshotTypeDecoded
        let iopsDecoded = try containerValues.decode(Int.self, forKey: .iops)
        iops = iopsDecoded
        let optionGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .optionGroupName)
        optionGroupName = optionGroupNameDecoded
        let percentProgressDecoded = try containerValues.decode(Int.self, forKey: .percentProgress)
        percentProgress = percentProgressDecoded
        let sourceRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceRegion)
        sourceRegion = sourceRegionDecoded
        let sourceDbSnapshotIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceDbSnapshotIdentifier)
        sourceDbSnapshotIdentifier = sourceDbSnapshotIdentifierDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let tdeCredentialArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tdeCredentialArn)
        tdeCredentialArn = tdeCredentialArnDecoded
        let encryptedDecoded = try containerValues.decode(Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let iamDatabaseAuthenticationEnabledDecoded = try containerValues.decode(Bool.self, forKey: .iamDatabaseAuthenticationEnabled)
        iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabledDecoded
        let processorFeaturesContainer = try containerValues.decodeIfPresent([AwsRdsDbProcessorFeature].self, forKey: .processorFeatures)
        var processorFeaturesDecoded0:[AwsRdsDbProcessorFeature]? = nil
        if let processorFeaturesContainer = processorFeaturesContainer {
            processorFeaturesDecoded0 = [AwsRdsDbProcessorFeature]()
            for structure0 in processorFeaturesContainer {
                processorFeaturesDecoded0?.append(structure0)
            }
        }
        processorFeatures = processorFeaturesDecoded0
        let dbiResourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dbiResourceId)
        dbiResourceId = dbiResourceIdDecoded
    }
}
