// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Insight: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filters = "Filters"
        case groupByAttribute = "GroupByAttribute"
        case insightArn = "InsightArn"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let groupByAttribute = groupByAttribute {
            try encodeContainer.encode(groupByAttribute, forKey: .groupByAttribute)
        }
        if let insightArn = insightArn {
            try encodeContainer.encode(insightArn, forKey: .insightArn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .insightArn)
        insightArn = insightArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(AwsSecurityFindingFilters.self, forKey: .filters)
        filters = filtersDecoded
        let groupByAttributeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupByAttribute)
        groupByAttribute = groupByAttributeDecoded
    }
}
