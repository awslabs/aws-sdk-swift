// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsRedshiftClusterRestoreStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currentRestoreRateInMegaBytesPerSecond = "CurrentRestoreRateInMegaBytesPerSecond"
        case elapsedTimeInSeconds = "ElapsedTimeInSeconds"
        case estimatedTimeToCompletionInSeconds = "EstimatedTimeToCompletionInSeconds"
        case progressInMegaBytes = "ProgressInMegaBytes"
        case snapshotSizeInMegaBytes = "SnapshotSizeInMegaBytes"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if currentRestoreRateInMegaBytesPerSecond != 0.0 {
            try encodeContainer.encode(currentRestoreRateInMegaBytesPerSecond, forKey: .currentRestoreRateInMegaBytesPerSecond)
        }
        if elapsedTimeInSeconds != 0 {
            try encodeContainer.encode(elapsedTimeInSeconds, forKey: .elapsedTimeInSeconds)
        }
        if estimatedTimeToCompletionInSeconds != 0 {
            try encodeContainer.encode(estimatedTimeToCompletionInSeconds, forKey: .estimatedTimeToCompletionInSeconds)
        }
        if progressInMegaBytes != 0 {
            try encodeContainer.encode(progressInMegaBytes, forKey: .progressInMegaBytes)
        }
        if snapshotSizeInMegaBytes != 0 {
            try encodeContainer.encode(snapshotSizeInMegaBytes, forKey: .snapshotSizeInMegaBytes)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let currentRestoreRateInMegaBytesPerSecondDecoded = try containerValues.decode(Double.self, forKey: .currentRestoreRateInMegaBytesPerSecond)
        currentRestoreRateInMegaBytesPerSecond = currentRestoreRateInMegaBytesPerSecondDecoded
        let elapsedTimeInSecondsDecoded = try containerValues.decode(Int.self, forKey: .elapsedTimeInSeconds)
        elapsedTimeInSeconds = elapsedTimeInSecondsDecoded
        let estimatedTimeToCompletionInSecondsDecoded = try containerValues.decode(Int.self, forKey: .estimatedTimeToCompletionInSeconds)
        estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSecondsDecoded
        let progressInMegaBytesDecoded = try containerValues.decode(Int.self, forKey: .progressInMegaBytes)
        progressInMegaBytes = progressInMegaBytesDecoded
        let snapshotSizeInMegaBytesDecoded = try containerValues.decode(Int.self, forKey: .snapshotSizeInMegaBytes)
        snapshotSizeInMegaBytes = snapshotSizeInMegaBytesDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
    }
}
