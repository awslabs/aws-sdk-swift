// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsElbLoadBalancerListener: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instancePort = "InstancePort"
        case instanceProtocol = "InstanceProtocol"
        case loadBalancerPort = "LoadBalancerPort"
        case `protocol` = "Protocol"
        case sslCertificateId = "SslCertificateId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if instancePort != 0 {
            try encodeContainer.encode(instancePort, forKey: .instancePort)
        }
        if let instanceProtocol = instanceProtocol {
            try encodeContainer.encode(instanceProtocol, forKey: .instanceProtocol)
        }
        if loadBalancerPort != 0 {
            try encodeContainer.encode(loadBalancerPort, forKey: .loadBalancerPort)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`, forKey: .`protocol`)
        }
        if let sslCertificateId = sslCertificateId {
            try encodeContainer.encode(sslCertificateId, forKey: .sslCertificateId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancePortDecoded = try containerValues.decode(Int.self, forKey: .instancePort)
        instancePort = instancePortDecoded
        let instanceProtocolDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceProtocol)
        instanceProtocol = instanceProtocolDecoded
        let loadBalancerPortDecoded = try containerValues.decode(Int.self, forKey: .loadBalancerPort)
        loadBalancerPort = loadBalancerPortDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(String.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let sslCertificateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sslCertificateId)
        sslCertificateId = sslCertificateIdDecoded
    }
}
