// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FindingProviderSeverity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case label = "Label"
        case original = "Original"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let label = label {
            try encodeContainer.encode(label.rawValue, forKey: .label)
        }
        if let original = original {
            try encodeContainer.encode(original, forKey: .original)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelDecoded = try containerValues.decodeIfPresent(SeverityLabel.self, forKey: .label)
        label = labelDecoded
        let originalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .original)
        original = originalDecoded
    }
}
