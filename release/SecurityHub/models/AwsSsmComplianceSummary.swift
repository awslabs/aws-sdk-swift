// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Provides the details about the compliance status for a patch.</p>
public struct AwsSsmComplianceSummary: Equatable {
    /// <p>The type of resource for which the compliance was determined. For
    ///             <code>AwsSsmPatchCompliance</code>, <code>ComplianceType</code> is <code>Patch</code>. </p>
    public let complianceType: String?
    /// <p>For the patches that are compliant, the number that have a severity of
    ///             <code>CRITICAL</code>.</p>
    public let compliantCriticalCount: Int
    /// <p>For the patches that are compliant, the number that have a severity of
    ///          <code>HIGH</code>.</p>
    public let compliantHighCount: Int
    /// <p>For the patches that are compliant, the number that have a severity of
    ///             <code>INFORMATIONAL</code>.</p>
    public let compliantInformationalCount: Int
    /// <p>For the patches that are compliant, the number that have a severity of
    ///          <code>LOW</code>.</p>
    public let compliantLowCount: Int
    /// <p>For the patches that are compliant, the number that have a severity of
    ///             <code>MEDIUM</code>.</p>
    public let compliantMediumCount: Int
    /// <p>For the patches that are compliant, the number that have a severity of
    ///             <code>UNSPECIFIED</code>.</p>
    public let compliantUnspecifiedCount: Int
    /// <p>The type of execution that was used determine compliance.</p>
    public let executionType: String?
    /// <p>For the patch items that are noncompliant, the number of items that have a severity of
    ///             <code>CRITICAL</code>.</p>
    public let nonCompliantCriticalCount: Int
    /// <p>For the patches that are noncompliant, the number that have a severity of
    ///             <code>HIGH</code>.</p>
    public let nonCompliantHighCount: Int
    /// <p>For the patches that are noncompliant, the number that have a severity of
    ///             <code>INFORMATIONAL</code>.</p>
    public let nonCompliantInformationalCount: Int
    /// <p>For the patches that are noncompliant, the number that have a severity of
    ///             <code>LOW</code>.</p>
    public let nonCompliantLowCount: Int
    /// <p>For the patches that are noncompliant, the number that have a severity of
    ///             <code>MEDIUM</code>.</p>
    public let nonCompliantMediumCount: Int
    /// <p>For the patches that are noncompliant, the number that have a severity of
    ///             <code>UNSPECIFIED</code>.</p>
    public let nonCompliantUnspecifiedCount: Int
    /// <p>The highest severity for the patches.</p>
    public let overallSeverity: String?
    /// <p>The identifier of the patch baseline. The patch baseline lists the patches that are
    ///          approved for installation.</p>
    public let patchBaselineId: String?
    /// <p>The identifier of the patch group for which compliance was determined. A patch group
    ///          uses tags to group EC2 instances that should have the same patch compliance.</p>
    public let patchGroup: String?
    /// <p>The current patch compliance status.</p>
    ///          <p>The possible status values are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>COMPLIANT</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NON_COMPLIANT</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UNSPECIFIED_DATA</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let status: String?

    public init (
        complianceType: String? = nil,
        compliantCriticalCount: Int = 0,
        compliantHighCount: Int = 0,
        compliantInformationalCount: Int = 0,
        compliantLowCount: Int = 0,
        compliantMediumCount: Int = 0,
        compliantUnspecifiedCount: Int = 0,
        executionType: String? = nil,
        nonCompliantCriticalCount: Int = 0,
        nonCompliantHighCount: Int = 0,
        nonCompliantInformationalCount: Int = 0,
        nonCompliantLowCount: Int = 0,
        nonCompliantMediumCount: Int = 0,
        nonCompliantUnspecifiedCount: Int = 0,
        overallSeverity: String? = nil,
        patchBaselineId: String? = nil,
        patchGroup: String? = nil,
        status: String? = nil
    )
    {
        self.complianceType = complianceType
        self.compliantCriticalCount = compliantCriticalCount
        self.compliantHighCount = compliantHighCount
        self.compliantInformationalCount = compliantInformationalCount
        self.compliantLowCount = compliantLowCount
        self.compliantMediumCount = compliantMediumCount
        self.compliantUnspecifiedCount = compliantUnspecifiedCount
        self.executionType = executionType
        self.nonCompliantCriticalCount = nonCompliantCriticalCount
        self.nonCompliantHighCount = nonCompliantHighCount
        self.nonCompliantInformationalCount = nonCompliantInformationalCount
        self.nonCompliantLowCount = nonCompliantLowCount
        self.nonCompliantMediumCount = nonCompliantMediumCount
        self.nonCompliantUnspecifiedCount = nonCompliantUnspecifiedCount
        self.overallSeverity = overallSeverity
        self.patchBaselineId = patchBaselineId
        self.patchGroup = patchGroup
        self.status = status
    }
}
