// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsEc2VolumeDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attachments = "Attachments"
        case createTime = "CreateTime"
        case encrypted = "Encrypted"
        case kmsKeyId = "KmsKeyId"
        case size = "Size"
        case snapshotId = "SnapshotId"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachments = attachments {
            var attachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachments)
            for awsec2volumeattachmentlist0 in attachments {
                try attachmentsContainer.encode(awsec2volumeattachmentlist0)
            }
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime, forKey: .createTime)
        }
        if encrypted != false {
            try encodeContainer.encode(encrypted, forKey: .encrypted)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
        if let snapshotId = snapshotId {
            try encodeContainer.encode(snapshotId, forKey: .snapshotId)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createTime)
        createTime = createTimeDecoded
        let encryptedDecoded = try containerValues.decode(Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let sizeDecoded = try containerValues.decode(Int.self, forKey: .size)
        size = sizeDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let attachmentsContainer = try containerValues.decodeIfPresent([AwsEc2VolumeAttachment].self, forKey: .attachments)
        var attachmentsDecoded0:[AwsEc2VolumeAttachment]? = nil
        if let attachmentsContainer = attachmentsContainer {
            attachmentsDecoded0 = [AwsEc2VolumeAttachment]()
            for structure0 in attachmentsContainer {
                attachmentsDecoded0?.append(structure0)
            }
        }
        attachments = attachmentsDecoded0
    }
}
