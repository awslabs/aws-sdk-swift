// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CidrBlockAssociation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case associationId = "AssociationId"
        case cidrBlock = "CidrBlock"
        case cidrBlockState = "CidrBlockState"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationId = associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let cidrBlock = cidrBlock {
            try encodeContainer.encode(cidrBlock, forKey: .cidrBlock)
        }
        if let cidrBlockState = cidrBlockState {
            try encodeContainer.encode(cidrBlockState, forKey: .cidrBlockState)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let cidrBlockDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cidrBlock)
        cidrBlock = cidrBlockDecoded
        let cidrBlockStateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cidrBlockState)
        cidrBlockState = cidrBlockStateDecoded
    }
}
