// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsElbLoadBalancerPolicies: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appCookieStickinessPolicies = "AppCookieStickinessPolicies"
        case lbCookieStickinessPolicies = "LbCookieStickinessPolicies"
        case otherPolicies = "OtherPolicies"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appCookieStickinessPolicies = appCookieStickinessPolicies {
            var appCookieStickinessPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .appCookieStickinessPolicies)
            for awselbappcookiestickinesspolicies0 in appCookieStickinessPolicies {
                try appCookieStickinessPoliciesContainer.encode(awselbappcookiestickinesspolicies0)
            }
        }
        if let lbCookieStickinessPolicies = lbCookieStickinessPolicies {
            var lbCookieStickinessPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lbCookieStickinessPolicies)
            for awselblbcookiestickinesspolicies0 in lbCookieStickinessPolicies {
                try lbCookieStickinessPoliciesContainer.encode(awselblbcookiestickinesspolicies0)
            }
        }
        if let otherPolicies = otherPolicies {
            var otherPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .otherPolicies)
            for stringlist0 in otherPolicies {
                try otherPoliciesContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appCookieStickinessPoliciesContainer = try containerValues.decodeIfPresent([AwsElbAppCookieStickinessPolicy].self, forKey: .appCookieStickinessPolicies)
        var appCookieStickinessPoliciesDecoded0:[AwsElbAppCookieStickinessPolicy]? = nil
        if let appCookieStickinessPoliciesContainer = appCookieStickinessPoliciesContainer {
            appCookieStickinessPoliciesDecoded0 = [AwsElbAppCookieStickinessPolicy]()
            for structure0 in appCookieStickinessPoliciesContainer {
                appCookieStickinessPoliciesDecoded0?.append(structure0)
            }
        }
        appCookieStickinessPolicies = appCookieStickinessPoliciesDecoded0
        let lbCookieStickinessPoliciesContainer = try containerValues.decodeIfPresent([AwsElbLbCookieStickinessPolicy].self, forKey: .lbCookieStickinessPolicies)
        var lbCookieStickinessPoliciesDecoded0:[AwsElbLbCookieStickinessPolicy]? = nil
        if let lbCookieStickinessPoliciesContainer = lbCookieStickinessPoliciesContainer {
            lbCookieStickinessPoliciesDecoded0 = [AwsElbLbCookieStickinessPolicy]()
            for structure0 in lbCookieStickinessPoliciesContainer {
                lbCookieStickinessPoliciesDecoded0?.append(structure0)
            }
        }
        lbCookieStickinessPolicies = lbCookieStickinessPoliciesDecoded0
        let otherPoliciesContainer = try containerValues.decodeIfPresent([String].self, forKey: .otherPolicies)
        var otherPoliciesDecoded0:[String]? = nil
        if let otherPoliciesContainer = otherPoliciesContainer {
            otherPoliciesDecoded0 = [String]()
            for string0 in otherPoliciesContainer {
                otherPoliciesDecoded0?.append(string0)
            }
        }
        otherPolicies = otherPoliciesDecoded0
    }
}
