// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StringFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case comparison = "Comparison"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparison = comparison {
            try encodeContainer.encode(comparison.rawValue, forKey: .comparison)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let comparisonDecoded = try containerValues.decodeIfPresent(StringFilterComparison.self, forKey: .comparison)
        comparison = comparisonDecoded
    }
}
