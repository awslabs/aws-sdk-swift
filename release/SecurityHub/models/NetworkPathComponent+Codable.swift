// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkPathComponent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case componentId = "ComponentId"
        case componentType = "ComponentType"
        case egress = "Egress"
        case ingress = "Ingress"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let componentId = componentId {
            try encodeContainer.encode(componentId, forKey: .componentId)
        }
        if let componentType = componentType {
            try encodeContainer.encode(componentType, forKey: .componentType)
        }
        if let egress = egress {
            try encodeContainer.encode(egress, forKey: .egress)
        }
        if let ingress = ingress {
            try encodeContainer.encode(ingress, forKey: .ingress)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let componentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .componentId)
        componentId = componentIdDecoded
        let componentTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .componentType)
        componentType = componentTypeDecoded
        let egressDecoded = try containerValues.decodeIfPresent(NetworkHeader.self, forKey: .egress)
        egress = egressDecoded
        let ingressDecoded = try containerValues.decodeIfPresent(NetworkHeader.self, forKey: .ingress)
        ingress = ingressDecoded
    }
}
