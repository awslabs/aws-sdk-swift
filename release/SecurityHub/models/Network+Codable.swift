// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Network: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationDomain = "DestinationDomain"
        case destinationIpV4 = "DestinationIpV4"
        case destinationIpV6 = "DestinationIpV6"
        case destinationPort = "DestinationPort"
        case direction = "Direction"
        case openPortRange = "OpenPortRange"
        case `protocol` = "Protocol"
        case sourceDomain = "SourceDomain"
        case sourceIpV4 = "SourceIpV4"
        case sourceIpV6 = "SourceIpV6"
        case sourceMac = "SourceMac"
        case sourcePort = "SourcePort"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationDomain = destinationDomain {
            try encodeContainer.encode(destinationDomain, forKey: .destinationDomain)
        }
        if let destinationIpV4 = destinationIpV4 {
            try encodeContainer.encode(destinationIpV4, forKey: .destinationIpV4)
        }
        if let destinationIpV6 = destinationIpV6 {
            try encodeContainer.encode(destinationIpV6, forKey: .destinationIpV6)
        }
        if destinationPort != 0 {
            try encodeContainer.encode(destinationPort, forKey: .destinationPort)
        }
        if let direction = direction {
            try encodeContainer.encode(direction.rawValue, forKey: .direction)
        }
        if let openPortRange = openPortRange {
            try encodeContainer.encode(openPortRange, forKey: .openPortRange)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`, forKey: .`protocol`)
        }
        if let sourceDomain = sourceDomain {
            try encodeContainer.encode(sourceDomain, forKey: .sourceDomain)
        }
        if let sourceIpV4 = sourceIpV4 {
            try encodeContainer.encode(sourceIpV4, forKey: .sourceIpV4)
        }
        if let sourceIpV6 = sourceIpV6 {
            try encodeContainer.encode(sourceIpV6, forKey: .sourceIpV6)
        }
        if let sourceMac = sourceMac {
            try encodeContainer.encode(sourceMac, forKey: .sourceMac)
        }
        if sourcePort != 0 {
            try encodeContainer.encode(sourcePort, forKey: .sourcePort)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directionDecoded = try containerValues.decodeIfPresent(NetworkDirection.self, forKey: .direction)
        direction = directionDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(String.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let openPortRangeDecoded = try containerValues.decodeIfPresent(PortRange.self, forKey: .openPortRange)
        openPortRange = openPortRangeDecoded
        let sourceIpV4Decoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceIpV4)
        sourceIpV4 = sourceIpV4Decoded
        let sourceIpV6Decoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceIpV6)
        sourceIpV6 = sourceIpV6Decoded
        let sourcePortDecoded = try containerValues.decode(Int.self, forKey: .sourcePort)
        sourcePort = sourcePortDecoded
        let sourceDomainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceDomain)
        sourceDomain = sourceDomainDecoded
        let sourceMacDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceMac)
        sourceMac = sourceMacDecoded
        let destinationIpV4Decoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationIpV4)
        destinationIpV4 = destinationIpV4Decoded
        let destinationIpV6Decoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationIpV6)
        destinationIpV6 = destinationIpV6Decoded
        let destinationPortDecoded = try containerValues.decode(Int.self, forKey: .destinationPort)
        destinationPort = destinationPortDecoded
        let destinationDomainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationDomain)
        destinationDomain = destinationDomainDecoded
    }
}
