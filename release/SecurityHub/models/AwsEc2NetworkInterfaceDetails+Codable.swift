// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsEc2NetworkInterfaceDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attachment = "Attachment"
        case ipV6Addresses = "IpV6Addresses"
        case networkInterfaceId = "NetworkInterfaceId"
        case privateIpAddresses = "PrivateIpAddresses"
        case publicDnsName = "PublicDnsName"
        case publicIp = "PublicIp"
        case securityGroups = "SecurityGroups"
        case sourceDestCheck = "SourceDestCheck"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachment = attachment {
            try encodeContainer.encode(attachment, forKey: .attachment)
        }
        if let ipV6Addresses = ipV6Addresses {
            var ipV6AddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipV6Addresses)
            for awsec2networkinterfaceipv6addresslist0 in ipV6Addresses {
                try ipV6AddressesContainer.encode(awsec2networkinterfaceipv6addresslist0)
            }
        }
        if let networkInterfaceId = networkInterfaceId {
            try encodeContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)
        }
        if let privateIpAddresses = privateIpAddresses {
            var privateIpAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .privateIpAddresses)
            for awsec2networkinterfaceprivateipaddresslist0 in privateIpAddresses {
                try privateIpAddressesContainer.encode(awsec2networkinterfaceprivateipaddresslist0)
            }
        }
        if let publicDnsName = publicDnsName {
            try encodeContainer.encode(publicDnsName, forKey: .publicDnsName)
        }
        if let publicIp = publicIp {
            try encodeContainer.encode(publicIp, forKey: .publicIp)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for awsec2networkinterfacesecuritygrouplist0 in securityGroups {
                try securityGroupsContainer.encode(awsec2networkinterfacesecuritygrouplist0)
            }
        }
        if sourceDestCheck != false {
            try encodeContainer.encode(sourceDestCheck, forKey: .sourceDestCheck)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachmentDecoded = try containerValues.decodeIfPresent(AwsEc2NetworkInterfaceAttachment.self, forKey: .attachment)
        attachment = attachmentDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([AwsEc2NetworkInterfaceSecurityGroup].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[AwsEc2NetworkInterfaceSecurityGroup]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [AwsEc2NetworkInterfaceSecurityGroup]()
            for structure0 in securityGroupsContainer {
                securityGroupsDecoded0?.append(structure0)
            }
        }
        securityGroups = securityGroupsDecoded0
        let sourceDestCheckDecoded = try containerValues.decode(Bool.self, forKey: .sourceDestCheck)
        sourceDestCheck = sourceDestCheckDecoded
        let ipV6AddressesContainer = try containerValues.decodeIfPresent([AwsEc2NetworkInterfaceIpV6AddressDetail].self, forKey: .ipV6Addresses)
        var ipV6AddressesDecoded0:[AwsEc2NetworkInterfaceIpV6AddressDetail]? = nil
        if let ipV6AddressesContainer = ipV6AddressesContainer {
            ipV6AddressesDecoded0 = [AwsEc2NetworkInterfaceIpV6AddressDetail]()
            for structure0 in ipV6AddressesContainer {
                ipV6AddressesDecoded0?.append(structure0)
            }
        }
        ipV6Addresses = ipV6AddressesDecoded0
        let privateIpAddressesContainer = try containerValues.decodeIfPresent([AwsEc2NetworkInterfacePrivateIpAddressDetail].self, forKey: .privateIpAddresses)
        var privateIpAddressesDecoded0:[AwsEc2NetworkInterfacePrivateIpAddressDetail]? = nil
        if let privateIpAddressesContainer = privateIpAddressesContainer {
            privateIpAddressesDecoded0 = [AwsEc2NetworkInterfacePrivateIpAddressDetail]()
            for structure0 in privateIpAddressesContainer {
                privateIpAddressesDecoded0?.append(structure0)
            }
        }
        privateIpAddresses = privateIpAddressesDecoded0
        let publicDnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .publicDnsName)
        publicDnsName = publicDnsNameDecoded
        let publicIpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .publicIp)
        publicIp = publicIpDecoded
    }
}
