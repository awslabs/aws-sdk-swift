// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A rule for the network ACL. Each rule allows or denies access based on the IP address, traffic direction, port, and protocol.</p>
public struct AwsEc2NetworkAclEntry: Equatable {
    /// <p>The protocol that the rule applies to. To deny or allow access to all protocols, use the value -1.</p>
    public let `protocol`: String?
    /// <p>The IPV4 network range for which to deny or allow access.</p>
    public let cidrBlock: String?
    /// <p>Whether the rule is an egress rule. An egress rule is a rule that applies to traffic that leaves the subnet.</p>
    public let egress: Bool
    /// <p>The Internet Control Message Protocol (ICMP) type and code for which to deny or allow access.</p>
    public let icmpTypeCode: IcmpTypeCode?
    /// <p>The IPV6 network range for which to deny or allow access.</p>
    public let ipv6CidrBlock: String?
    /// <p>For TCP or UDP protocols, the range of ports that the rule applies to.</p>
    public let portRange: PortRangeFromTo?
    /// <p>Whether the rule is used to allow access or deny access.</p>
    public let ruleAction: String?
    /// <p>The rule number. The rules are processed in order by their number.</p>
    public let ruleNumber: Int

    public init (
        `protocol`: String? = nil,
        cidrBlock: String? = nil,
        egress: Bool = false,
        icmpTypeCode: IcmpTypeCode? = nil,
        ipv6CidrBlock: String? = nil,
        portRange: PortRangeFromTo? = nil,
        ruleAction: String? = nil,
        ruleNumber: Int = 0
    )
    {
        self.`protocol` = `protocol`
        self.cidrBlock = cidrBlock
        self.egress = egress
        self.icmpTypeCode = icmpTypeCode
        self.ipv6CidrBlock = ipv6CidrBlock
        self.portRange = portRange
        self.ruleAction = ruleAction
        self.ruleNumber = ruleNumber
    }
}
