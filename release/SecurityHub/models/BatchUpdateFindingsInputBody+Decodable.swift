// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchUpdateFindingsInputBody: Equatable {
    public let findingIdentifiers: [AwsSecurityFindingIdentifier]?
    public let note: NoteUpdate?
    public let severity: SeverityUpdate?
    public let verificationState: VerificationState?
    public let confidence: Int
    public let criticality: Int
    public let types: [String]?
    public let userDefinedFields: [String:String]?
    public let workflow: WorkflowUpdate?
    public let relatedFindings: [RelatedFinding]?
}

extension BatchUpdateFindingsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case confidence = "Confidence"
        case criticality = "Criticality"
        case findingIdentifiers = "FindingIdentifiers"
        case note = "Note"
        case relatedFindings = "RelatedFindings"
        case severity = "Severity"
        case types = "Types"
        case userDefinedFields = "UserDefinedFields"
        case verificationState = "VerificationState"
        case workflow = "Workflow"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingIdentifiersContainer = try containerValues.decodeIfPresent([AwsSecurityFindingIdentifier].self, forKey: .findingIdentifiers)
        var findingIdentifiersDecoded0:[AwsSecurityFindingIdentifier]? = nil
        if let findingIdentifiersContainer = findingIdentifiersContainer {
            findingIdentifiersDecoded0 = [AwsSecurityFindingIdentifier]()
            for structure0 in findingIdentifiersContainer {
                findingIdentifiersDecoded0?.append(structure0)
            }
        }
        findingIdentifiers = findingIdentifiersDecoded0
        let noteDecoded = try containerValues.decodeIfPresent(NoteUpdate.self, forKey: .note)
        note = noteDecoded
        let severityDecoded = try containerValues.decodeIfPresent(SeverityUpdate.self, forKey: .severity)
        severity = severityDecoded
        let verificationStateDecoded = try containerValues.decodeIfPresent(VerificationState.self, forKey: .verificationState)
        verificationState = verificationStateDecoded
        let confidenceDecoded = try containerValues.decode(Int.self, forKey: .confidence)
        confidence = confidenceDecoded
        let criticalityDecoded = try containerValues.decode(Int.self, forKey: .criticality)
        criticality = criticalityDecoded
        let typesContainer = try containerValues.decodeIfPresent([String].self, forKey: .types)
        var typesDecoded0:[String]? = nil
        if let typesContainer = typesContainer {
            typesDecoded0 = [String]()
            for string0 in typesContainer {
                typesDecoded0?.append(string0)
            }
        }
        types = typesDecoded0
        let userDefinedFieldsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .userDefinedFields)
        var userDefinedFieldsDecoded0: [String:String]? = nil
        if let userDefinedFieldsContainer = userDefinedFieldsContainer {
            userDefinedFieldsDecoded0 = [String:String]()
            for (key0, nonemptystring0) in userDefinedFieldsContainer {
                userDefinedFieldsDecoded0?[key0] = nonemptystring0
            }
        }
        userDefinedFields = userDefinedFieldsDecoded0
        let workflowDecoded = try containerValues.decodeIfPresent(WorkflowUpdate.self, forKey: .workflow)
        workflow = workflowDecoded
        let relatedFindingsContainer = try containerValues.decodeIfPresent([RelatedFinding].self, forKey: .relatedFindings)
        var relatedFindingsDecoded0:[RelatedFinding]? = nil
        if let relatedFindingsContainer = relatedFindingsContainer {
            relatedFindingsDecoded0 = [RelatedFinding]()
            for structure0 in relatedFindingsContainer {
                relatedFindingsDecoded0?.append(structure0)
            }
        }
        relatedFindings = relatedFindingsDecoded0
    }
}
