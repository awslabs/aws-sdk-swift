// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FindingProviderFields: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case confidence = "Confidence"
        case criticality = "Criticality"
        case relatedFindings = "RelatedFindings"
        case severity = "Severity"
        case types = "Types"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if confidence != 0 {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if criticality != 0 {
            try encodeContainer.encode(criticality, forKey: .criticality)
        }
        if let relatedFindings = relatedFindings {
            var relatedFindingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedFindings)
            for relatedfindinglist0 in relatedFindings {
                try relatedFindingsContainer.encode(relatedfindinglist0)
            }
        }
        if let severity = severity {
            try encodeContainer.encode(severity, forKey: .severity)
        }
        if let types = types {
            var typesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .types)
            for typelist0 in types {
                try typesContainer.encode(typelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let confidenceDecoded = try containerValues.decode(Int.self, forKey: .confidence)
        confidence = confidenceDecoded
        let criticalityDecoded = try containerValues.decode(Int.self, forKey: .criticality)
        criticality = criticalityDecoded
        let relatedFindingsContainer = try containerValues.decodeIfPresent([RelatedFinding].self, forKey: .relatedFindings)
        var relatedFindingsDecoded0:[RelatedFinding]? = nil
        if let relatedFindingsContainer = relatedFindingsContainer {
            relatedFindingsDecoded0 = [RelatedFinding]()
            for structure0 in relatedFindingsContainer {
                relatedFindingsDecoded0?.append(structure0)
            }
        }
        relatedFindings = relatedFindingsDecoded0
        let severityDecoded = try containerValues.decodeIfPresent(FindingProviderSeverity.self, forKey: .severity)
        severity = severityDecoded
        let typesContainer = try containerValues.decodeIfPresent([String].self, forKey: .types)
        var typesDecoded0:[String]? = nil
        if let typesContainer = typesContainer {
            typesDecoded0 = [String]()
            for string0 in typesContainer {
                typesDecoded0?.append(string0)
            }
        }
        types = typesDecoded0
    }
}
