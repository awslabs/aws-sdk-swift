// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CustomDataIdentifiersResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case detections = "Detections"
        case totalCount = "TotalCount"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let detections = detections {
            var detectionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .detections)
            for customdataidentifiersdetectionslist0 in detections {
                try detectionsContainer.encode(customdataidentifiersdetectionslist0)
            }
        }
        if totalCount != 0 {
            try encodeContainer.encode(totalCount, forKey: .totalCount)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectionsContainer = try containerValues.decodeIfPresent([CustomDataIdentifiersDetections].self, forKey: .detections)
        var detectionsDecoded0:[CustomDataIdentifiersDetections]? = nil
        if let detectionsContainer = detectionsContainer {
            detectionsDecoded0 = [CustomDataIdentifiersDetections]()
            for structure0 in detectionsContainer {
                detectionsDecoded0?.append(structure0)
            }
        }
        detections = detectionsDecoded0
        let totalCountDecoded = try containerValues.decode(Int.self, forKey: .totalCount)
        totalCount = totalCountDecoded
    }
}
