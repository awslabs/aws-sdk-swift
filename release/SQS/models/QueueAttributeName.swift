// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum QueueAttributeName {
    case all
    case approximatenumberofmessages
    case approximatenumberofmessagesdelayed
    case approximatenumberofmessagesnotvisible
    case contentbaseddeduplication
    case createdtimestamp
    case deduplicationscope
    case delayseconds
    case fifoqueue
    case fifothroughputlimit
    case kmsdatakeyreuseperiodseconds
    case kmsmasterkeyid
    case lastmodifiedtimestamp
    case maximummessagesize
    case messageretentionperiod
    case policy
    case queuearn
    case receivemessagewaittimeseconds
    case redrivepolicy
    case visibilitytimeout
    case sdkUnknown(String)
}

extension QueueAttributeName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [QueueAttributeName] {
        return [
            .all,
            .approximatenumberofmessages,
            .approximatenumberofmessagesdelayed,
            .approximatenumberofmessagesnotvisible,
            .contentbaseddeduplication,
            .createdtimestamp,
            .deduplicationscope,
            .delayseconds,
            .fifoqueue,
            .fifothroughputlimit,
            .kmsdatakeyreuseperiodseconds,
            .kmsmasterkeyid,
            .lastmodifiedtimestamp,
            .maximummessagesize,
            .messageretentionperiod,
            .policy,
            .queuearn,
            .receivemessagewaittimeseconds,
            .redrivepolicy,
            .visibilitytimeout,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .all: return "All"
        case .approximatenumberofmessages: return "ApproximateNumberOfMessages"
        case .approximatenumberofmessagesdelayed: return "ApproximateNumberOfMessagesDelayed"
        case .approximatenumberofmessagesnotvisible: return "ApproximateNumberOfMessagesNotVisible"
        case .contentbaseddeduplication: return "ContentBasedDeduplication"
        case .createdtimestamp: return "CreatedTimestamp"
        case .deduplicationscope: return "DeduplicationScope"
        case .delayseconds: return "DelaySeconds"
        case .fifoqueue: return "FifoQueue"
        case .fifothroughputlimit: return "FifoThroughputLimit"
        case .kmsdatakeyreuseperiodseconds: return "KmsDataKeyReusePeriodSeconds"
        case .kmsmasterkeyid: return "KmsMasterKeyId"
        case .lastmodifiedtimestamp: return "LastModifiedTimestamp"
        case .maximummessagesize: return "MaximumMessageSize"
        case .messageretentionperiod: return "MessageRetentionPeriod"
        case .policy: return "Policy"
        case .queuearn: return "QueueArn"
        case .receivemessagewaittimeseconds: return "ReceiveMessageWaitTimeSeconds"
        case .redrivepolicy: return "RedrivePolicy"
        case .visibilitytimeout: return "VisibilityTimeout"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = QueueAttributeName(rawValue: rawValue) ?? QueueAttributeName.sdkUnknown(rawValue)
    }
}
