// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MessageSystemAttributeValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case binaryListValues = "BinaryListValue"
        case binaryValue = "BinaryValue"
        case dataType = "DataType"
        case stringListValues = "StringListValue"
        case stringValue = "StringValue"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let binaryListValues = binaryListValues {
            if !binaryListValues.isEmpty {
                for (index0, binary0) in binaryListValues.enumerated() {
                    try container.encode(binary0.base64EncodedString(), forKey: Key("BinaryListValue.\(index0.advanced(by: 1))"))
                }
            }
        }
        if let binaryValue = binaryValue {
            try container.encode(binaryValue.base64EncodedString(), forKey: Key("BinaryValue"))
        }
        if let dataType = dataType {
            try container.encode(dataType, forKey: Key("DataType"))
        }
        if let stringListValues = stringListValues {
            if !stringListValues.isEmpty {
                for (index0, string0) in stringListValues.enumerated() {
                    var stringListValuesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("StringListValue.\(index0.advanced(by: 1))"))
                    try stringListValuesContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let stringValue = stringValue {
            try container.encode(stringValue, forKey: Key("StringValue"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stringValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stringValue)
        stringValue = stringValueDecoded
        if containerValues.contains(.binaryValue) {
            do {
                let binaryValueDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .binaryValue)
                binaryValue = binaryValueDecoded
            } catch {
                binaryValue = "".data(using: .utf8)
            }
        } else {
            binaryValue = nil
        }
        if containerValues.contains(.stringListValues) {
            let stringListValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .stringListValues)
            if stringListValuesWrappedContainer != nil {
                let stringListValuesContainer = try containerValues.decodeIfPresent([String].self, forKey: .stringListValues)
                var stringListValuesBuffer:[String]? = nil
                if let stringListValuesContainer = stringListValuesContainer {
                    stringListValuesBuffer = [String]()
                    for stringContainer0 in stringListValuesContainer {
                        stringListValuesBuffer?.append(stringContainer0)
                    }
                }
                stringListValues = stringListValuesBuffer
            } else {
                stringListValues = []
            }
        } else {
            stringListValues = nil
        }
        if containerValues.contains(.binaryListValues) {
            let binaryListValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .binaryListValues)
            if binaryListValuesWrappedContainer != nil {
                let binaryListValuesContainer = try containerValues.decodeIfPresent([Data].self, forKey: .binaryListValues)
                var binaryListValuesBuffer:[Data]? = nil
                if let binaryListValuesContainer = binaryListValuesContainer {
                    binaryListValuesBuffer = [Data]()
                    for blobContainer0 in binaryListValuesContainer {
                        binaryListValuesBuffer?.append(blobContainer0)
                    }
                }
                binaryListValues = binaryListValuesBuffer
            } else {
                binaryListValues = []
            }
        } else {
            binaryListValues = nil
        }
        let dataTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataType)
        dataType = dataTypeDecoded
    }
}
