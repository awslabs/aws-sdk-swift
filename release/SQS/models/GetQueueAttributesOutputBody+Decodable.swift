// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetQueueAttributesOutputBody: Equatable {
    public let attributes: [String:String]?
}

extension GetQueueAttributesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributes = "Attribute"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("GetQueueAttributesResult"))
        if containerValues.contains(.attributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let attributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: MapEntry<String, String, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .attributes)
            if attributesWrappedContainer != nil {
                let attributesContainer = try containerValues.decodeIfPresent([MapKeyValue<String, String, KeyVal0.Name, KeyVal0.Value>].self, forKey: .attributes)
                var attributesBuffer: [String:String]? = nil
                if let attributesContainer = attributesContainer {
                    attributesBuffer = [String:String]()
                    for stringContainer0 in attributesContainer {
                        attributesBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                attributes = attributesBuffer
            } else {
                attributes = [:]
            }
        } else {
            attributes = nil
        }
    }
}
