// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchResultErrorEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code = "Code"
        case id = "Id"
        case message = "Message"
        case senderFault = "SenderFault"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let code = code {
            try container.encode(code, forKey: Key("Code"))
        }
        if let id = id {
            try container.encode(id, forKey: Key("Id"))
        }
        if let message = message {
            try container.encode(message, forKey: Key("Message"))
        }
        if senderFault != false {
            try container.encode(senderFault, forKey: Key("SenderFault"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let senderFaultDecoded = try containerValues.decode(Bool.self, forKey: .senderFault)
        senderFault = senderFaultDecoded
        let codeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}
