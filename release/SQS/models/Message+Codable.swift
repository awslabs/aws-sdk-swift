// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Message: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributes = "Attribute"
        case body = "Body"
        case mD5OfBody = "MD5OfBody"
        case mD5OfMessageAttributes = "MD5OfMessageAttributes"
        case messageAttributes = "MessageAttribute"
        case messageId = "MessageId"
        case receiptHandle = "ReceiptHandle"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let attributes = attributes {
            if !attributes.isEmpty {
                for (index0, element0) in attributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let messagesystemattributenameKey0 = element0.key
                    let stringValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Attribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Name"))
                    try keyContainer0.encode(messagesystemattributenameKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(stringValue0, forKey: Key(""))
                }
            }
        }
        if let body = body {
            try container.encode(body, forKey: Key("Body"))
        }
        if let mD5OfBody = mD5OfBody {
            try container.encode(mD5OfBody, forKey: Key("MD5OfBody"))
        }
        if let mD5OfMessageAttributes = mD5OfMessageAttributes {
            try container.encode(mD5OfMessageAttributes, forKey: Key("MD5OfMessageAttributes"))
        }
        if let messageAttributes = messageAttributes {
            if !messageAttributes.isEmpty {
                for (index0, element0) in messageAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let stringKey0 = element0.key
                    let messageattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("MessageAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Name"))
                    try keyContainer0.encode(stringKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(messageattributevalueValue0, forKey: Key(""))
                }
            }
        }
        if let messageId = messageId {
            try container.encode(messageId, forKey: Key("MessageId"))
        }
        if let receiptHandle = receiptHandle {
            try container.encode(receiptHandle, forKey: Key("ReceiptHandle"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let receiptHandleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .receiptHandle)
        receiptHandle = receiptHandleDecoded
        let mD5OfBodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mD5OfBody)
        mD5OfBody = mD5OfBodyDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .body)
        body = bodyDecoded
        if containerValues.contains(.attributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let attributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: MapEntry<String, String, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .attributes)
            if attributesWrappedContainer != nil {
                let attributesContainer = try containerValues.decodeIfPresent([MapKeyValue<String, String, KeyVal0.Name, KeyVal0.Value>].self, forKey: .attributes)
                var attributesBuffer: [String:String]? = nil
                if let attributesContainer = attributesContainer {
                    attributesBuffer = [String:String]()
                    for stringContainer0 in attributesContainer {
                        attributesBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                attributes = attributesBuffer
            } else {
                attributes = [:]
            }
        } else {
            attributes = nil
        }
        let mD5OfMessageAttributesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mD5OfMessageAttributes)
        mD5OfMessageAttributes = mD5OfMessageAttributesDecoded
        if containerValues.contains(.messageAttributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let messageAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: MapEntry<String, MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .messageAttributes)
            if messageAttributesWrappedContainer != nil {
                let messageAttributesContainer = try containerValues.decodeIfPresent([MapKeyValue<String, MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>].self, forKey: .messageAttributes)
                var messageAttributesBuffer: [String:MessageAttributeValue]? = nil
                if let messageAttributesContainer = messageAttributesContainer {
                    messageAttributesBuffer = [String:MessageAttributeValue]()
                    for structureContainer0 in messageAttributesContainer {
                        messageAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                messageAttributes = messageAttributesBuffer
            } else {
                messageAttributes = [:]
            }
        } else {
            messageAttributes = nil
        }
    }
}
