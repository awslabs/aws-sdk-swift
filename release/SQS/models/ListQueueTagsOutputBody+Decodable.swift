// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListQueueTagsOutputBody: Equatable {
    public let tags: [String:String]?
}

extension ListQueueTagsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags = "Tag"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListQueueTagsResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Key{}; struct Value{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: MapEntry<String, String, KeyVal0.Key, KeyVal0.Value>.CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([MapKeyValue<String, String, KeyVal0.Key, KeyVal0.Value>].self, forKey: .tags)
                var tagsBuffer: [String:String]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [String:String]()
                    for stringContainer0 in tagsContainer {
                        tagsBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                tags = tagsBuffer
            } else {
                tags = [:]
            }
        } else {
            tags = nil
        }
    }
}
