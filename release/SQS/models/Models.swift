// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

public struct AddPermissionInputBodyMiddleware: Middleware {
    public let id: String = "AddPermissionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddPermissionInput>,
                  next: H) -> Swift.Result<OperationOutput<AddPermissionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddPermissionInput>
    public typealias MOutput = OperationOutput<AddPermissionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddPermissionOutputError>
}

extension AddPermissionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddPermissionInput(aWSAccountIds: \(String(describing: aWSAccountIds)), actions: \(String(describing: actions)), label: \(String(describing: label)), queueUrl: \(String(describing: queueUrl)))"}
}

extension AddPermissionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aWSAccountIds = aWSAccountIds {
            if !aWSAccountIds.isEmpty {
                for (index0, string0) in aWSAccountIds.enumerated() {
                    var aWSAccountIdsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("AWSAccountId.\(index0.advanced(by: 1))"))
                    try aWSAccountIdsContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let actions = actions {
            if !actions.isEmpty {
                for (index0, string0) in actions.enumerated() {
                    var actionsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("ActionName.\(index0.advanced(by: 1))"))
                    try actionsContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let label = label {
            try container.encode(label, forKey: Key("Label"))
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        try container.encode("AddPermission", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct AddPermissionInputHeadersMiddleware: Middleware {
    public let id: String = "AddPermissionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddPermissionInput>,
                  next: H) -> Swift.Result<OperationOutput<AddPermissionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddPermissionInput>
    public typealias MOutput = OperationOutput<AddPermissionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddPermissionOutputError>
}

public struct AddPermissionInputQueryItemMiddleware: Middleware {
    public let id: String = "AddPermissionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddPermissionInput>,
                  next: H) -> Swift.Result<OperationOutput<AddPermissionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddPermissionInput>
    public typealias MOutput = OperationOutput<AddPermissionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddPermissionOutputError>
}

/// <p></p>
public struct AddPermissionInput: Equatable {
    /// <p>The AWS account number of the <a href="https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P">principal</a> who is given permission. The principal must have an AWS account, but does not need to be signed up for Amazon SQS. For information about locating the AWS
    ///           account identification, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html#sqs-api-request-authentication">Your AWS Identifiers</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    public let aWSAccountIds: [String]?
    /// <p>The action the client wants to allow for the specified principal. Valid values: the name of any action or <code>*</code>.</p>
    ///          <p>For more information about these actions, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-overview-of-managing-access.html">Overview of Managing Access Permissions to Your Amazon Simple Queue Service Resource</a>
    ///           in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///          <p>Specifying <code>SendMessage</code>, <code>DeleteMessage</code>, or <code>ChangeMessageVisibility</code> for <code>ActionName.n</code> also grants permissions for the corresponding batch versions of those actions: <code>SendMessageBatch</code>,
    ///         <code>DeleteMessageBatch</code>, and <code>ChangeMessageVisibilityBatch</code>.</p>
    public let actions: [String]?
    /// <p>The unique identification of the permission you're setting (for example, <code>AliceSendMessage</code>). Maximum 80 characters. Allowed characters include alphanumeric characters, hyphens (<code>-</code>), and underscores (<code>_</code>).</p>
    public let label: String?
    /// <p>The URL of the Amazon SQS queue to which permissions are added.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueUrl: String?

    public init (
        aWSAccountIds: [String]? = nil,
        actions: [String]? = nil,
        label: String? = nil,
        queueUrl: String? = nil
    )
    {
        self.aWSAccountIds = aWSAccountIds
        self.actions = actions
        self.label = label
        self.queueUrl = queueUrl
    }
}

extension AddPermissionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AddPermissionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OverLimit" : self = .overLimit(try OverLimit(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddPermissionOutputError: Equatable {
    case overLimit(OverLimit)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddPermissionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddPermissionOutputResponse()"}
}

extension AddPermissionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct AddPermissionOutputResponse: Equatable {

    public init() {}
}

struct AddPermissionOutputResponseBody: Equatable {
}

extension AddPermissionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension BatchEntryIdsNotDistinct: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchEntryIdsNotDistinct()"}
}

extension BatchEntryIdsNotDistinct: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Two or more batch entries in the request have the same <code>Id</code>.</p>
public struct BatchEntryIdsNotDistinct: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

extension BatchRequestTooLong: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchRequestTooLong()"}
}

extension BatchRequestTooLong: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The length of all the messages put together is more than the limit.</p>
public struct BatchRequestTooLong: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

extension BatchResultErrorEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code = "Code"
        case id = "Id"
        case message = "Message"
        case senderFault = "SenderFault"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let code = code {
            try container.encode(code, forKey: Key("Code"))
        }
        if let id = id {
            try container.encode(id, forKey: Key("Id"))
        }
        if let message = message {
            try container.encode(message, forKey: Key("Message"))
        }
        if senderFault != false {
            try container.encode(senderFault, forKey: Key("SenderFault"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let senderFaultDecoded = try containerValues.decode(Bool.self, forKey: .senderFault)
        senderFault = senderFaultDecoded
        let codeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BatchResultErrorEntry: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchResultErrorEntry(code: \(String(describing: code)), id: \(String(describing: id)), message: \(String(describing: message)), senderFault: \(String(describing: senderFault)))"}
}

/// <p>Gives a detailed description of the result of an action on each entry in the
///             request.</p>
public struct BatchResultErrorEntry: Equatable {
    /// <p>An error code representing why the action failed on this entry.</p>
    public let code: String?
    /// <p>The <code>Id</code> of an entry in a batch request.</p>
    public let id: String?
    /// <p>A message explaining why the action failed on this entry.</p>
    public let message: String?
    /// <p>Specifies whether the error happened due to the caller of the batch API action.</p>
    public let senderFault: Bool

    public init (
        code: String? = nil,
        id: String? = nil,
        message: String? = nil,
        senderFault: Bool = false
    )
    {
        self.code = code
        self.id = id
        self.message = message
        self.senderFault = senderFault
    }
}

public struct ChangeMessageVisibilityBatchInputBodyMiddleware: Middleware {
    public let id: String = "ChangeMessageVisibilityBatchInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ChangeMessageVisibilityBatchInput>,
                  next: H) -> Swift.Result<OperationOutput<ChangeMessageVisibilityBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ChangeMessageVisibilityBatchInput>
    public typealias MOutput = OperationOutput<ChangeMessageVisibilityBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ChangeMessageVisibilityBatchOutputError>
}

extension ChangeMessageVisibilityBatchInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChangeMessageVisibilityBatchInput(entries: \(String(describing: entries)), queueUrl: \(String(describing: queueUrl)))"}
}

extension ChangeMessageVisibilityBatchInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let entries = entries {
            if !entries.isEmpty {
                for (index0, changemessagevisibilitybatchrequestentry0) in entries.enumerated() {
                    var entriesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("ChangeMessageVisibilityBatchRequestEntry.\(index0.advanced(by: 1))"))
                    try entriesContainer0.encode(changemessagevisibilitybatchrequestentry0, forKey: Key(""))
                }
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        try container.encode("ChangeMessageVisibilityBatch", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct ChangeMessageVisibilityBatchInputHeadersMiddleware: Middleware {
    public let id: String = "ChangeMessageVisibilityBatchInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ChangeMessageVisibilityBatchInput>,
                  next: H) -> Swift.Result<OperationOutput<ChangeMessageVisibilityBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ChangeMessageVisibilityBatchInput>
    public typealias MOutput = OperationOutput<ChangeMessageVisibilityBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ChangeMessageVisibilityBatchOutputError>
}

public struct ChangeMessageVisibilityBatchInputQueryItemMiddleware: Middleware {
    public let id: String = "ChangeMessageVisibilityBatchInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ChangeMessageVisibilityBatchInput>,
                  next: H) -> Swift.Result<OperationOutput<ChangeMessageVisibilityBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ChangeMessageVisibilityBatchInput>
    public typealias MOutput = OperationOutput<ChangeMessageVisibilityBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ChangeMessageVisibilityBatchOutputError>
}

/// <p></p>
public struct ChangeMessageVisibilityBatchInput: Equatable {
    /// <p>A list of receipt handles of the messages for which the visibility timeout must be changed.</p>
    public let entries: [ChangeMessageVisibilityBatchRequestEntry]?
    /// <p>The URL of the Amazon SQS queue whose messages' visibility is changed.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueUrl: String?

    public init (
        entries: [ChangeMessageVisibilityBatchRequestEntry]? = nil,
        queueUrl: String? = nil
    )
    {
        self.entries = entries
        self.queueUrl = queueUrl
    }
}

extension ChangeMessageVisibilityBatchOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ChangeMessageVisibilityBatchOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BatchEntryIdsNotDistinct" : self = .batchEntryIdsNotDistinct(try BatchEntryIdsNotDistinct(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EmptyBatchRequest" : self = .emptyBatchRequest(try EmptyBatchRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidBatchEntryId" : self = .invalidBatchEntryId(try InvalidBatchEntryId(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyEntriesInBatchRequest" : self = .tooManyEntriesInBatchRequest(try TooManyEntriesInBatchRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ChangeMessageVisibilityBatchOutputError: Equatable {
    case batchEntryIdsNotDistinct(BatchEntryIdsNotDistinct)
    case emptyBatchRequest(EmptyBatchRequest)
    case invalidBatchEntryId(InvalidBatchEntryId)
    case tooManyEntriesInBatchRequest(TooManyEntriesInBatchRequest)
    case unknown(UnknownAWSHttpServiceError)
}

extension ChangeMessageVisibilityBatchOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChangeMessageVisibilityBatchOutputResponse(failed: \(String(describing: failed)), successful: \(String(describing: successful)))"}
}

extension ChangeMessageVisibilityBatchOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ChangeMessageVisibilityBatchOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.failed = output.failed
            self.successful = output.successful
        } else {
            self.failed = nil
            self.successful = nil
        }
    }
}

/// <p>For each message in the batch, the response contains a <code>
///                <a>ChangeMessageVisibilityBatchResultEntry</a>
///             </code> tag if the message succeeds or a <code>
///                <a>BatchResultErrorEntry</a>
///             </code> tag if the message fails.</p>
public struct ChangeMessageVisibilityBatchOutputResponse: Equatable {
    /// <p>A list of <code>
    ///                <a>BatchResultErrorEntry</a>
    ///             </code> items.</p>
    public let failed: [BatchResultErrorEntry]?
    /// <p>A list of <code>
    ///                <a>ChangeMessageVisibilityBatchResultEntry</a>
    ///             </code> items.</p>
    public let successful: [ChangeMessageVisibilityBatchResultEntry]?

    public init (
        failed: [BatchResultErrorEntry]? = nil,
        successful: [ChangeMessageVisibilityBatchResultEntry]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

struct ChangeMessageVisibilityBatchOutputResponseBody: Equatable {
    public let successful: [ChangeMessageVisibilityBatchResultEntry]?
    public let failed: [BatchResultErrorEntry]?
}

extension ChangeMessageVisibilityBatchOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case failed = "BatchResultErrorEntry"
        case successful = "ChangeMessageVisibilityBatchResultEntry"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ChangeMessageVisibilityBatchResult"))
        if containerValues.contains(.successful) {
            let successfulWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .successful)
            if successfulWrappedContainer != nil {
                let successfulContainer = try containerValues.decodeIfPresent([ChangeMessageVisibilityBatchResultEntry].self, forKey: .successful)
                var successfulBuffer:[ChangeMessageVisibilityBatchResultEntry]? = nil
                if let successfulContainer = successfulContainer {
                    successfulBuffer = [ChangeMessageVisibilityBatchResultEntry]()
                    for structureContainer0 in successfulContainer {
                        successfulBuffer?.append(structureContainer0)
                    }
                }
                successful = successfulBuffer
            } else {
                successful = []
            }
        } else {
            successful = nil
        }
        if containerValues.contains(.failed) {
            let failedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .failed)
            if failedWrappedContainer != nil {
                let failedContainer = try containerValues.decodeIfPresent([BatchResultErrorEntry].self, forKey: .failed)
                var failedBuffer:[BatchResultErrorEntry]? = nil
                if let failedContainer = failedContainer {
                    failedBuffer = [BatchResultErrorEntry]()
                    for structureContainer0 in failedContainer {
                        failedBuffer?.append(structureContainer0)
                    }
                }
                failed = failedBuffer
            } else {
                failed = []
            }
        } else {
            failed = nil
        }
    }
}

extension ChangeMessageVisibilityBatchRequestEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "Id"
        case receiptHandle = "ReceiptHandle"
        case visibilityTimeout = "VisibilityTimeout"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let id = id {
            try container.encode(id, forKey: Key("Id"))
        }
        if let receiptHandle = receiptHandle {
            try container.encode(receiptHandle, forKey: Key("ReceiptHandle"))
        }
        if visibilityTimeout != 0 {
            try container.encode(visibilityTimeout, forKey: Key("VisibilityTimeout"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let receiptHandleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .receiptHandle)
        receiptHandle = receiptHandleDecoded
        let visibilityTimeoutDecoded = try containerValues.decode(Int.self, forKey: .visibilityTimeout)
        visibilityTimeout = visibilityTimeoutDecoded
    }
}

extension ChangeMessageVisibilityBatchRequestEntry: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChangeMessageVisibilityBatchRequestEntry(id: \(String(describing: id)), receiptHandle: \(String(describing: receiptHandle)), visibilityTimeout: \(String(describing: visibilityTimeout)))"}
}

/// <p>Encloses a receipt handle and an entry id for each message in <code>
///                <a>ChangeMessageVisibilityBatch</a>.</code>
///          </p>
///          <important>
///             <p>All of the following list parameters must be prefixed with <code>ChangeMessageVisibilityBatchRequestEntry.n</code>, where <code>n</code> is an integer value starting with <code>1</code>. For example, a parameter list for this action might look like this:</p>
///          </important>
///          <p>
///             <code>&ChangeMessageVisibilityBatchRequestEntry.1.Id=change_visibility_msg_2</code>
///         </p>
///          <p>
///             <code>&ChangeMessageVisibilityBatchRequestEntry.1.ReceiptHandle=your_receipt_handle</code>
///         </p>
///          <p>
///             <code>&ChangeMessageVisibilityBatchRequestEntry.1.VisibilityTimeout=45</code>
///         </p>
public struct ChangeMessageVisibilityBatchRequestEntry: Equatable {
    /// <p>An identifier for this particular receipt handle used to communicate the result.</p>
    ///          <note>
    ///             <p>The <code>Id</code>s of a batch request need to be unique within a request.</p>
    ///             <p>This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).</p>
    ///          </note>
    public let id: String?
    /// <p>A receipt handle.</p>
    public let receiptHandle: String?
    /// <p>The new value (in seconds) for the message's visibility timeout.</p>
    public let visibilityTimeout: Int

    public init (
        id: String? = nil,
        receiptHandle: String? = nil,
        visibilityTimeout: Int = 0
    )
    {
        self.id = id
        self.receiptHandle = receiptHandle
        self.visibilityTimeout = visibilityTimeout
    }
}

extension ChangeMessageVisibilityBatchResultEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "Id"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let id = id {
            try container.encode(id, forKey: Key("Id"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
    }
}

extension ChangeMessageVisibilityBatchResultEntry: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChangeMessageVisibilityBatchResultEntry(id: \(String(describing: id)))"}
}

/// <p>Encloses the <code>Id</code> of an entry in <code>
///                <a>ChangeMessageVisibilityBatch</a>.</code>
///          </p>
public struct ChangeMessageVisibilityBatchResultEntry: Equatable {
    /// <p>Represents a message whose visibility timeout has been changed successfully.</p>
    public let id: String?

    public init (
        id: String? = nil
    )
    {
        self.id = id
    }
}

public struct ChangeMessageVisibilityInputBodyMiddleware: Middleware {
    public let id: String = "ChangeMessageVisibilityInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ChangeMessageVisibilityInput>,
                  next: H) -> Swift.Result<OperationOutput<ChangeMessageVisibilityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ChangeMessageVisibilityInput>
    public typealias MOutput = OperationOutput<ChangeMessageVisibilityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ChangeMessageVisibilityOutputError>
}

extension ChangeMessageVisibilityInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChangeMessageVisibilityInput(queueUrl: \(String(describing: queueUrl)), receiptHandle: \(String(describing: receiptHandle)), visibilityTimeout: \(String(describing: visibilityTimeout)))"}
}

extension ChangeMessageVisibilityInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        if let receiptHandle = receiptHandle {
            try container.encode(receiptHandle, forKey: Key("ReceiptHandle"))
        }
        if visibilityTimeout != 0 {
            try container.encode(visibilityTimeout, forKey: Key("VisibilityTimeout"))
        }
        try container.encode("ChangeMessageVisibility", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct ChangeMessageVisibilityInputHeadersMiddleware: Middleware {
    public let id: String = "ChangeMessageVisibilityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ChangeMessageVisibilityInput>,
                  next: H) -> Swift.Result<OperationOutput<ChangeMessageVisibilityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ChangeMessageVisibilityInput>
    public typealias MOutput = OperationOutput<ChangeMessageVisibilityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ChangeMessageVisibilityOutputError>
}

public struct ChangeMessageVisibilityInputQueryItemMiddleware: Middleware {
    public let id: String = "ChangeMessageVisibilityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ChangeMessageVisibilityInput>,
                  next: H) -> Swift.Result<OperationOutput<ChangeMessageVisibilityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ChangeMessageVisibilityInput>
    public typealias MOutput = OperationOutput<ChangeMessageVisibilityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ChangeMessageVisibilityOutputError>
}

public struct ChangeMessageVisibilityInput: Equatable {
    /// <p>The URL of the Amazon SQS queue whose message's visibility is changed.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueUrl: String?
    /// <p>The receipt handle associated with the message whose visibility timeout is changed. This parameter is returned by the <code>
    ///                <a>ReceiveMessage</a>
    ///             </code> action.</p>
    public let receiptHandle: String?
    /// <p>The new value for the message's visibility timeout (in seconds). Values range: <code>0</code> to <code>43200</code>. Maximum: 12 hours.</p>
    public let visibilityTimeout: Int

    public init (
        queueUrl: String? = nil,
        receiptHandle: String? = nil,
        visibilityTimeout: Int = 0
    )
    {
        self.queueUrl = queueUrl
        self.receiptHandle = receiptHandle
        self.visibilityTimeout = visibilityTimeout
    }
}

extension ChangeMessageVisibilityOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ChangeMessageVisibilityOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "MessageNotInflight" : self = .messageNotInflight(try MessageNotInflight(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReceiptHandleIsInvalid" : self = .receiptHandleIsInvalid(try ReceiptHandleIsInvalid(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ChangeMessageVisibilityOutputError: Equatable {
    case messageNotInflight(MessageNotInflight)
    case receiptHandleIsInvalid(ReceiptHandleIsInvalid)
    case unknown(UnknownAWSHttpServiceError)
}

extension ChangeMessageVisibilityOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChangeMessageVisibilityOutputResponse()"}
}

extension ChangeMessageVisibilityOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct ChangeMessageVisibilityOutputResponse: Equatable {

    public init() {}
}

struct ChangeMessageVisibilityOutputResponseBody: Equatable {
}

extension ChangeMessageVisibilityOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct CreateQueueInputBodyMiddleware: Middleware {
    public let id: String = "CreateQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateQueueInput>
    public typealias MOutput = OperationOutput<CreateQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateQueueOutputError>
}

extension CreateQueueInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateQueueInput(attributes: \(String(describing: attributes)), queueName: \(String(describing: queueName)), tags: \(String(describing: tags)))"}
}

extension CreateQueueInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let attributes = attributes {
            if !attributes.isEmpty {
                for (index0, element0) in attributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let queueattributenameKey0 = element0.key
                    let stringValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Attribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Name"))
                    try keyContainer0.encode(queueattributenameKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(stringValue0, forKey: Key(""))
                }
            }
        }
        if let queueName = queueName {
            try container.encode(queueName, forKey: Key("QueueName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, element0) in tags.sorted(by: { $0.key < $1.key }).enumerated() {
                    let tagkeyKey0 = element0.key
                    let tagvalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tag.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Key"))
                    try keyContainer0.encode(tagkeyKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(tagvalueValue0, forKey: Key(""))
                }
            }
        }
        try container.encode("CreateQueue", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct CreateQueueInputHeadersMiddleware: Middleware {
    public let id: String = "CreateQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateQueueInput>
    public typealias MOutput = OperationOutput<CreateQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateQueueOutputError>
}

public struct CreateQueueInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateQueueInput>
    public typealias MOutput = OperationOutput<CreateQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateQueueOutputError>
}

/// <p></p>
public struct CreateQueueInput: Equatable {
    /// <p>A map of attributes with their corresponding values.</p>
    ///          <p>The following lists the names, descriptions, and values of the special request parameters that the <code>CreateQueue</code> action uses:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DelaySeconds</code> – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 seconds (15 minutes). Default: 0.
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MaximumMessageSize</code> – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MessageRetentionPeriod</code> – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days).
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Policy</code> – The queue's policy. A valid AWS policy. For more information about policy structure, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html">Overview of AWS IAM Policies</a> in the <i>Amazon IAM User Guide</i>.
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ReceiveMessageWaitTimeSeconds</code> – The length of time, in seconds, for which a <code>
    ///                      <a>ReceiveMessage</a>
    ///                   </code> action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0.
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RedrivePolicy</code> – The string that includes the parameters for the dead-letter queue functionality
    ///     of the source queue as a JSON object. For more information about the redrive policy and dead-letter queues, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">Using Amazon SQS Dead-Letter Queues</a>
    ///     in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///                         <ul>
    ///                   <li>
    ///                     <p>
    ///                         <code>deadLetterTargetArn</code> – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of <code>maxReceiveCount</code> is exceeded.</p>
    ///                   </li>
    ///                   <li>
    ///                     <p>
    ///                         <code>maxReceiveCount</code> – The number of times a message is delivered to the source queue before being moved to the dead-letter queue.
    ///                         When the <code>ReceiveCount</code> for a message exceeds the <code>maxReceiveCount</code> for a queue, Amazon SQS moves the message to the dead-letter-queue.</p>
    ///                   </li>
    ///                </ul>
    ///                <note>
    ///                   <p>The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.</p>
    ///                </note>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>VisibilityTimeout</code> – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see
    ///                     <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility Timeout</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html">server-side-encryption</a>:</p>
    ///          <ul>
    ///             <li>
    ///               <p>
    ///                   <code>KmsMasterKeyId</code> – The ID of an AWS-managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms">Key Terms</a>.
    ///                   While the alias of the AWS-managed CMK for Amazon SQS is always <code>alias/aws/sqs</code>, the alias of a custom CMK can, for example, be <code>alias/<i>MyAlias</i>
    ///                   </code>.
    ///                   For more examples, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a> in the <i>AWS Key Management Service API Reference</i>.
    ///               </p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>KmsDataKeyReusePeriodSeconds</code> – The length of time, in seconds, for which Amazon SQS can reuse a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys">data key</a> to encrypt
    ///                   or decrypt messages before calling AWS KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security
    ///                   but results in more calls to KMS which might incur charges after Free Tier. For more information, see
    ///                   <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work">How Does the Data Key Reuse Period Work?</a>.
    ///               </p>
    ///             </li>
    ///          </ul>
    ///
    ///
    ///          <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO (first-in-first-out) queues</a>:</p>
    ///          <ul>
    ///             <li>
    ///               <p>
    ///                   <code>FifoQueue</code> – Designates a queue as FIFO. Valid values are <code>true</code> and <code>false</code>. If you don't specify the <code>FifoQueue</code> attribute, Amazon SQS creates a standard queue.
    ///                   You can provide this attribute only during queue creation. You can't change it for an existing queue.
    ///                   When you set this attribute, you must also provide the <code>MessageGroupId</code> for your messages explicitly.</p>
    ///                <p>For more information, see
    ///                       <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html">FIFO queue logic</a>
    ///                   in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>ContentBasedDeduplication</code> – Enables content-based deduplication. Valid values are <code>true</code> and <code>false</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html">Exactly-once processing</a> in the
    ///                       <i>Amazon Simple Queue Service Developer Guide</i>. Note the following:
    ///               </p>
    ///               <ul>
    ///                   <li>
    ///                       <p>Every message must have a unique <code>MessageDeduplicationId</code>.</p>
    ///                       <ul>
    ///                         <li>
    ///                               <p>You may provide a <code>MessageDeduplicationId</code> explicitly.</p>
    ///                           </li>
    ///                         <li>
    ///                               <p>If you aren't able to provide a <code>MessageDeduplicationId</code> and you enable <code>ContentBasedDeduplication</code> for your queue,
    ///                                   Amazon SQS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using the body of the message (but not the attributes of the message).
    ///                               </p>
    ///                           </li>
    ///                         <li>
    ///                               <p>If you don't provide a <code>MessageDeduplicationId</code> and the queue doesn't have <code>ContentBasedDeduplication</code> set,
    ///                                   the action fails with an error.</p>
    ///                           </li>
    ///                         <li>
    ///                               <p>If the queue has <code>ContentBasedDeduplication</code> set, your <code>MessageDeduplicationId</code> overrides the generated one.</p>
    ///                           </li>
    ///                      </ul>
    ///                   </li>
    ///                   <li>
    ///                       <p>When <code>ContentBasedDeduplication</code> is in effect, messages with identical content sent within the deduplication interval are treated as duplicates
    ///                           and only one copy of the message is delivered.</p>
    ///                   </li>
    ///                   <li>
    ///                       <p>If you send one message with <code>ContentBasedDeduplication</code> enabled and then another message with a <code>MessageDeduplicationId</code> that is the same
    ///                           as the one generated for the first <code>MessageDeduplicationId</code>, the two messages are treated as duplicates and only one copy of the message is delivered.
    ///                       </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    ///
    ///
    ///          <p>The following attributes apply only to
    /// <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html">high throughput
    /// for FIFO queues</a>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DeduplicationScope</code> – Specifies whether message deduplication occurs at the
    ///       message group or queue level. Valid values are <code>messageGroup</code> and <code>queue</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FifoThroughputLimit</code> – Specifies whether the FIFO queue throughput
    ///       quota applies to the entire queue or per message group. Valid values are <code>perQueue</code> and <code>perMessageGroupId</code>.
    ///       The <code>perMessageGroupId</code> value is allowed only when the value for <code>DeduplicationScope</code> is <code>messageGroup</code>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>To enable high throughput for FIFO queues, do the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Set <code>DeduplicationScope</code> to <code>messageGroup</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Set <code>FifoThroughputLimit</code> to <code>perMessageGroupId</code>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If you set these attributes to anything other than the values shown for enabling high
    ///   throughput, normal throughput is in effect and deduplication occurs as specified.</p>
    ///          <p>For information on throughput quotas,
    ///   see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html">Quotas related to messages</a>
    ///   in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    public let attributes: [String:String]?
    /// <p>The name of the new queue. The following limits apply to this name:</p>
    ///          <ul>
    ///             <li>
    ///               <p>A queue name can have up to 80 characters.</p>
    ///             </li>
    ///             <li>
    ///               <p>Valid values: alphanumeric characters, hyphens (<code>-</code>), and underscores (<code>_</code>).</p>
    ///             </li>
    ///             <li>
    ///               <p>A FIFO queue name must end with the <code>.fifo</code> suffix.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueName: String?
    /// <p>Add cost allocation tags to the specified Amazon SQS queue. For an overview, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html">Tagging Your Amazon SQS Queues</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///
    ///          <p>When you use queue tags, keep the following guidelines in mind:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Adding more than 50 tags to a queue isn't recommended.</p>
    ///             </li>
    ///             <li>
    ///                <p>Tags don't have any semantic meaning. Amazon SQS interprets tags as character strings.</p>
    ///             </li>
    ///             <li>
    ///                <p>Tags are case-sensitive.</p>
    ///             </li>
    ///             <li>
    ///                <p>A new tag with a key identical to that of an existing tag overwrites the existing tag.</p>
    ///             </li>
    ///          </ul>
    ///          <p>For a full list of tag restrictions, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues">Limits Related to Queues</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///          <note>
    ///             <p>To be able to tag a queue on creation, you must have the
    ///                     <code>sqs:CreateQueue</code> and <code>sqs:TagQueue</code> permissions.</p>
    ///             <p>Cross-account permissions don't apply to this action. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant cross-account permissions to a role and a user name</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///          </note>
    public let tags: [String:String]?

    public init (
        attributes: [String:String]? = nil,
        queueName: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.attributes = attributes
        self.queueName = queueName
        self.tags = tags
    }
}

extension CreateQueueOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateQueueOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "QueueDeletedRecently" : self = .queueDeletedRecently(try QueueDeletedRecently(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "QueueNameExists" : self = .queueNameExists(try QueueNameExists(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateQueueOutputError: Equatable {
    case queueDeletedRecently(QueueDeletedRecently)
    case queueNameExists(QueueNameExists)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateQueueOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateQueueOutputResponse(queueUrl: \(String(describing: queueUrl)))"}
}

extension CreateQueueOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateQueueOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.queueUrl = output.queueUrl
        } else {
            self.queueUrl = nil
        }
    }
}

/// <p>Returns the <code>QueueUrl</code> attribute of the created queue.</p>
public struct CreateQueueOutputResponse: Equatable {
    /// <p>The URL of the created Amazon SQS queue.</p>
    public let queueUrl: String?

    public init (
        queueUrl: String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

struct CreateQueueOutputResponseBody: Equatable {
    public let queueUrl: String?
}

extension CreateQueueOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case queueUrl = "QueueUrl"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("CreateQueueResult"))
        let queueUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
    }
}

public struct DeleteMessageBatchInputBodyMiddleware: Middleware {
    public let id: String = "DeleteMessageBatchInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMessageBatchInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMessageBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMessageBatchInput>
    public typealias MOutput = OperationOutput<DeleteMessageBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMessageBatchOutputError>
}

extension DeleteMessageBatchInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMessageBatchInput(entries: \(String(describing: entries)), queueUrl: \(String(describing: queueUrl)))"}
}

extension DeleteMessageBatchInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let entries = entries {
            if !entries.isEmpty {
                for (index0, deletemessagebatchrequestentry0) in entries.enumerated() {
                    var entriesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("DeleteMessageBatchRequestEntry.\(index0.advanced(by: 1))"))
                    try entriesContainer0.encode(deletemessagebatchrequestentry0, forKey: Key(""))
                }
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        try container.encode("DeleteMessageBatch", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct DeleteMessageBatchInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteMessageBatchInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMessageBatchInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMessageBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMessageBatchInput>
    public typealias MOutput = OperationOutput<DeleteMessageBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMessageBatchOutputError>
}

public struct DeleteMessageBatchInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteMessageBatchInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMessageBatchInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMessageBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMessageBatchInput>
    public typealias MOutput = OperationOutput<DeleteMessageBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMessageBatchOutputError>
}

/// <p></p>
public struct DeleteMessageBatchInput: Equatable {
    /// <p>A list of receipt handles for the messages to be deleted.</p>
    public let entries: [DeleteMessageBatchRequestEntry]?
    /// <p>The URL of the Amazon SQS queue from which messages are deleted.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueUrl: String?

    public init (
        entries: [DeleteMessageBatchRequestEntry]? = nil,
        queueUrl: String? = nil
    )
    {
        self.entries = entries
        self.queueUrl = queueUrl
    }
}

extension DeleteMessageBatchOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteMessageBatchOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BatchEntryIdsNotDistinct" : self = .batchEntryIdsNotDistinct(try BatchEntryIdsNotDistinct(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EmptyBatchRequest" : self = .emptyBatchRequest(try EmptyBatchRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidBatchEntryId" : self = .invalidBatchEntryId(try InvalidBatchEntryId(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyEntriesInBatchRequest" : self = .tooManyEntriesInBatchRequest(try TooManyEntriesInBatchRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMessageBatchOutputError: Equatable {
    case batchEntryIdsNotDistinct(BatchEntryIdsNotDistinct)
    case emptyBatchRequest(EmptyBatchRequest)
    case invalidBatchEntryId(InvalidBatchEntryId)
    case tooManyEntriesInBatchRequest(TooManyEntriesInBatchRequest)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMessageBatchOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMessageBatchOutputResponse(failed: \(String(describing: failed)), successful: \(String(describing: successful)))"}
}

extension DeleteMessageBatchOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteMessageBatchOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.failed = output.failed
            self.successful = output.successful
        } else {
            self.failed = nil
            self.successful = nil
        }
    }
}

/// <p>For each message in the batch, the response contains a  <code>
///                <a>DeleteMessageBatchResultEntry</a>
///             </code> tag if the message is deleted or a <code>
///                <a>BatchResultErrorEntry</a>
///             </code> tag if the message can't be deleted.</p>
public struct DeleteMessageBatchOutputResponse: Equatable {
    /// <p>A list of <code>
    ///                <a>BatchResultErrorEntry</a>
    ///             </code> items.</p>
    public let failed: [BatchResultErrorEntry]?
    /// <p>A list of <code>
    ///                <a>DeleteMessageBatchResultEntry</a>
    ///             </code> items.</p>
    public let successful: [DeleteMessageBatchResultEntry]?

    public init (
        failed: [BatchResultErrorEntry]? = nil,
        successful: [DeleteMessageBatchResultEntry]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

struct DeleteMessageBatchOutputResponseBody: Equatable {
    public let successful: [DeleteMessageBatchResultEntry]?
    public let failed: [BatchResultErrorEntry]?
}

extension DeleteMessageBatchOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case failed = "BatchResultErrorEntry"
        case successful = "DeleteMessageBatchResultEntry"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DeleteMessageBatchResult"))
        if containerValues.contains(.successful) {
            let successfulWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .successful)
            if successfulWrappedContainer != nil {
                let successfulContainer = try containerValues.decodeIfPresent([DeleteMessageBatchResultEntry].self, forKey: .successful)
                var successfulBuffer:[DeleteMessageBatchResultEntry]? = nil
                if let successfulContainer = successfulContainer {
                    successfulBuffer = [DeleteMessageBatchResultEntry]()
                    for structureContainer0 in successfulContainer {
                        successfulBuffer?.append(structureContainer0)
                    }
                }
                successful = successfulBuffer
            } else {
                successful = []
            }
        } else {
            successful = nil
        }
        if containerValues.contains(.failed) {
            let failedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .failed)
            if failedWrappedContainer != nil {
                let failedContainer = try containerValues.decodeIfPresent([BatchResultErrorEntry].self, forKey: .failed)
                var failedBuffer:[BatchResultErrorEntry]? = nil
                if let failedContainer = failedContainer {
                    failedBuffer = [BatchResultErrorEntry]()
                    for structureContainer0 in failedContainer {
                        failedBuffer?.append(structureContainer0)
                    }
                }
                failed = failedBuffer
            } else {
                failed = []
            }
        } else {
            failed = nil
        }
    }
}

extension DeleteMessageBatchRequestEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "Id"
        case receiptHandle = "ReceiptHandle"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let id = id {
            try container.encode(id, forKey: Key("Id"))
        }
        if let receiptHandle = receiptHandle {
            try container.encode(receiptHandle, forKey: Key("ReceiptHandle"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let receiptHandleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .receiptHandle)
        receiptHandle = receiptHandleDecoded
    }
}

extension DeleteMessageBatchRequestEntry: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMessageBatchRequestEntry(id: \(String(describing: id)), receiptHandle: \(String(describing: receiptHandle)))"}
}

/// <p>Encloses a receipt handle and an identifier for it.</p>
public struct DeleteMessageBatchRequestEntry: Equatable {
    /// <p>An identifier for this particular receipt handle. This is used to communicate the result.</p>
    ///          <note>
    ///             <p>The <code>Id</code>s of a batch request need to be unique within a request.</p>
    ///             <p>This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).</p>
    ///          </note>
    public let id: String?
    /// <p>A receipt handle.</p>
    public let receiptHandle: String?

    public init (
        id: String? = nil,
        receiptHandle: String? = nil
    )
    {
        self.id = id
        self.receiptHandle = receiptHandle
    }
}

extension DeleteMessageBatchResultEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "Id"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let id = id {
            try container.encode(id, forKey: Key("Id"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
    }
}

extension DeleteMessageBatchResultEntry: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMessageBatchResultEntry(id: \(String(describing: id)))"}
}

/// <p>Encloses the <code>Id</code> of an entry in <code>
///                <a>DeleteMessageBatch</a>.</code>
///          </p>
public struct DeleteMessageBatchResultEntry: Equatable {
    /// <p>Represents a successfully deleted message.</p>
    public let id: String?

    public init (
        id: String? = nil
    )
    {
        self.id = id
    }
}

public struct DeleteMessageInputBodyMiddleware: Middleware {
    public let id: String = "DeleteMessageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMessageInput>
    public typealias MOutput = OperationOutput<DeleteMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMessageOutputError>
}

extension DeleteMessageInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMessageInput(queueUrl: \(String(describing: queueUrl)), receiptHandle: \(String(describing: receiptHandle)))"}
}

extension DeleteMessageInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        if let receiptHandle = receiptHandle {
            try container.encode(receiptHandle, forKey: Key("ReceiptHandle"))
        }
        try container.encode("DeleteMessage", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct DeleteMessageInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteMessageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMessageInput>
    public typealias MOutput = OperationOutput<DeleteMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMessageOutputError>
}

public struct DeleteMessageInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteMessageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMessageInput>
    public typealias MOutput = OperationOutput<DeleteMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMessageOutputError>
}

/// <p></p>
public struct DeleteMessageInput: Equatable {
    /// <p>The URL of the Amazon SQS queue from which messages are deleted.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueUrl: String?
    /// <p>The receipt handle associated with the message to delete.</p>
    public let receiptHandle: String?

    public init (
        queueUrl: String? = nil,
        receiptHandle: String? = nil
    )
    {
        self.queueUrl = queueUrl
        self.receiptHandle = receiptHandle
    }
}

extension DeleteMessageOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteMessageOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidIdFormat" : self = .invalidIdFormat(try InvalidIdFormat(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReceiptHandleIsInvalid" : self = .receiptHandleIsInvalid(try ReceiptHandleIsInvalid(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMessageOutputError: Equatable {
    case invalidIdFormat(InvalidIdFormat)
    case receiptHandleIsInvalid(ReceiptHandleIsInvalid)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMessageOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMessageOutputResponse()"}
}

extension DeleteMessageOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMessageOutputResponse: Equatable {

    public init() {}
}

struct DeleteMessageOutputResponseBody: Equatable {
}

extension DeleteMessageOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteQueueInputBodyMiddleware: Middleware {
    public let id: String = "DeleteQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteQueueInput>
    public typealias MOutput = OperationOutput<DeleteQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteQueueOutputError>
}

extension DeleteQueueInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteQueueInput(queueUrl: \(String(describing: queueUrl)))"}
}

extension DeleteQueueInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        try container.encode("DeleteQueue", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct DeleteQueueInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteQueueInput>
    public typealias MOutput = OperationOutput<DeleteQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteQueueOutputError>
}

public struct DeleteQueueInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteQueueInput>
    public typealias MOutput = OperationOutput<DeleteQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteQueueOutputError>
}

/// <p></p>
public struct DeleteQueueInput: Equatable {
    /// <p>The URL of the Amazon SQS queue to delete.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueUrl: String?

    public init (
        queueUrl: String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

extension DeleteQueueOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteQueueOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteQueueOutputError: Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteQueueOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteQueueOutputResponse()"}
}

extension DeleteQueueOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteQueueOutputResponse: Equatable {

    public init() {}
}

struct DeleteQueueOutputResponseBody: Equatable {
}

extension DeleteQueueOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension EmptyBatchRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EmptyBatchRequest()"}
}

extension EmptyBatchRequest: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The batch request doesn't contain any entries.</p>
public struct EmptyBatchRequest: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

public struct GetQueueAttributesInputBodyMiddleware: Middleware {
    public let id: String = "GetQueueAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetQueueAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetQueueAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetQueueAttributesInput>
    public typealias MOutput = OperationOutput<GetQueueAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetQueueAttributesOutputError>
}

extension GetQueueAttributesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetQueueAttributesInput(attributeNames: \(String(describing: attributeNames)), queueUrl: \(String(describing: queueUrl)))"}
}

extension GetQueueAttributesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let attributeNames = attributeNames {
            if !attributeNames.isEmpty {
                for (index0, queueattributename0) in attributeNames.enumerated() {
                    var attributeNamesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("AttributeName.\(index0.advanced(by: 1))"))
                    try attributeNamesContainer0.encode(queueattributename0, forKey: Key(""))
                }
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        try container.encode("GetQueueAttributes", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct GetQueueAttributesInputHeadersMiddleware: Middleware {
    public let id: String = "GetQueueAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetQueueAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetQueueAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetQueueAttributesInput>
    public typealias MOutput = OperationOutput<GetQueueAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetQueueAttributesOutputError>
}

public struct GetQueueAttributesInputQueryItemMiddleware: Middleware {
    public let id: String = "GetQueueAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetQueueAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetQueueAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetQueueAttributesInput>
    public typealias MOutput = OperationOutput<GetQueueAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetQueueAttributesOutputError>
}

/// <p></p>
public struct GetQueueAttributesInput: Equatable {
    /// <p>A list of attributes for which to retrieve information.</p>
    ///          <note>
    ///             <p>In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.</p>
    ///          </note>
    ///          <p>The following attributes are supported:</p>
    ///          <important>
    ///             <p>The <code>ApproximateNumberOfMessagesDelayed</code>, <code>ApproximateNumberOfMessagesNotVisible</code>,
    ///               and <code>ApproximateNumberOfMessagesVisible</code> metrics may not achieve consistency
    ///               until at least 1 minute after the producers stop sending messages. This period is required for
    ///               the queue metadata to reach eventual consistency. </p>
    ///          </important>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>All</code> – Returns all values. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ApproximateNumberOfMessages</code> – Returns the approximate number of
    ///                     messages available for retrieval from the queue.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ApproximateNumberOfMessagesDelayed</code> – Returns the approximate number
    ///                     of messages in the queue that are delayed and not available for reading
    ///                     immediately. This can happen when the queue is configured as a delay queue or
    ///                     when a message has been sent with a delay parameter.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ApproximateNumberOfMessagesNotVisible</code> – Returns the approximate
    ///                     number of messages that are in flight. Messages are considered to be
    ///                         <i>in flight</i> if they have been sent to a client but have
    ///                     not yet been deleted or have not yet reached the end of their visibility window. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CreatedTimestamp</code> – Returns the time when the queue was created in
    ///                     seconds (<a href="http://en.wikipedia.org/wiki/Unix_time">epoch
    ///                     time</a>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DelaySeconds</code> – Returns the default delay on the queue in
    ///                     seconds.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LastModifiedTimestamp</code> – Returns the time when the queue was last
    ///                     changed in seconds (<a href="http://en.wikipedia.org/wiki/Unix_time">epoch
    ///                         time</a>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MaximumMessageSize</code> – Returns the limit of how many bytes a message
    ///                     can contain before Amazon SQS rejects it.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MessageRetentionPeriod</code> – Returns the length of time, in seconds,
    ///                     for which Amazon SQS retains a message.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Policy</code> – Returns the policy of the queue.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>QueueArn</code> – Returns the Amazon resource name (ARN) of the
    ///                     queue.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ReceiveMessageWaitTimeSeconds</code> – Returns the length of time, in
    ///                     seconds, for which the <code>ReceiveMessage</code> action waits for a message to
    ///                     arrive. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RedrivePolicy</code> – The string that includes the parameters for the dead-letter queue functionality
    ///     of the source queue as a JSON object. For more information about the redrive policy and dead-letter queues, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">Using Amazon SQS Dead-Letter Queues</a>
    ///     in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///                         <ul>
    ///                   <li>
    ///                     <p>
    ///                         <code>deadLetterTargetArn</code> – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of <code>maxReceiveCount</code> is exceeded.</p>
    ///                   </li>
    ///                   <li>
    ///                     <p>
    ///                         <code>maxReceiveCount</code> – The number of times a message is delivered to the source queue before being moved to the dead-letter queue.
    ///                         When the <code>ReceiveCount</code> for a message exceeds the <code>maxReceiveCount</code> for a queue, Amazon SQS moves the message to the dead-letter-queue.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>VisibilityTimeout</code> – Returns the visibility timeout for the queue. For more information about the visibility timeout, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility Timeout</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.
    ///             </p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html">server-side-encryption</a>:</p>
    ///          <ul>
    ///             <li>
    ///               <p>
    ///                   <code>KmsMasterKeyId</code> – Returns the ID of an AWS-managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms">Key Terms</a>.
    ///               </p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>KmsDataKeyReusePeriodSeconds</code> – Returns the length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling AWS KMS again.
    ///                   For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work">How Does the Data Key Reuse Period Work?</a>.
    ///               </p>
    ///             </li>
    ///          </ul>
    ///
    ///
    ///          <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO (first-in-first-out) queues</a>:</p>
    ///          <ul>
    ///             <li>
    ///               <p>
    ///                   <code>FifoQueue</code> – Returns information about whether the queue is FIFO. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html">FIFO queue logic</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///               <note>
    ///                   <p>To determine whether a queue is <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO</a>, you can check whether <code>QueueName</code> ends with the <code>.fifo</code> suffix.</p>
    ///                </note>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>ContentBasedDeduplication</code> – Returns whether content-based deduplication is enabled for the queue. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html">Exactly-once processing</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.
    ///               </p>
    ///             </li>
    ///          </ul>
    ///
    ///
    ///          <p>The following attributes apply only to
    /// <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html">high throughput
    /// for FIFO queues</a>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DeduplicationScope</code> – Specifies whether message deduplication occurs at the
    ///       message group or queue level. Valid values are <code>messageGroup</code> and <code>queue</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FifoThroughputLimit</code> – Specifies whether the FIFO queue throughput
    ///       quota applies to the entire queue or per message group. Valid values are <code>perQueue</code> and <code>perMessageGroupId</code>.
    ///       The <code>perMessageGroupId</code> value is allowed only when the value for <code>DeduplicationScope</code> is <code>messageGroup</code>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>To enable high throughput for FIFO queues, do the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Set <code>DeduplicationScope</code> to <code>messageGroup</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Set <code>FifoThroughputLimit</code> to <code>perMessageGroupId</code>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If you set these attributes to anything other than the values shown for enabling high
    ///   throughput, normal throughput is in effect and deduplication occurs as specified.</p>
    ///          <p>For information on throughput quotas,
    ///   see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html">Quotas related to messages</a>
    ///   in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    public let attributeNames: [QueueAttributeName]?
    /// <p>The URL of the Amazon SQS queue whose attribute information is retrieved.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueUrl: String?

    public init (
        attributeNames: [QueueAttributeName]? = nil,
        queueUrl: String? = nil
    )
    {
        self.attributeNames = attributeNames
        self.queueUrl = queueUrl
    }
}

extension GetQueueAttributesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetQueueAttributesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidAttributeName" : self = .invalidAttributeName(try InvalidAttributeName(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetQueueAttributesOutputError: Equatable {
    case invalidAttributeName(InvalidAttributeName)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetQueueAttributesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetQueueAttributesOutputResponse(attributes: \(String(describing: attributes)))"}
}

extension GetQueueAttributesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetQueueAttributesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.attributes = output.attributes
        } else {
            self.attributes = nil
        }
    }
}

/// <p>A list of returned queue attributes.</p>
public struct GetQueueAttributesOutputResponse: Equatable {
    /// <p>A map of attributes to their respective values.</p>
    public let attributes: [String:String]?

    public init (
        attributes: [String:String]? = nil
    )
    {
        self.attributes = attributes
    }
}

struct GetQueueAttributesOutputResponseBody: Equatable {
    public let attributes: [String:String]?
}

extension GetQueueAttributesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributes = "Attribute"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("GetQueueAttributesResult"))
        if containerValues.contains(.attributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let attributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: MapEntry<String, String, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .attributes)
            if attributesWrappedContainer != nil {
                let attributesContainer = try containerValues.decodeIfPresent([MapKeyValue<String, String, KeyVal0.Name, KeyVal0.Value>].self, forKey: .attributes)
                var attributesBuffer: [String:String]? = nil
                if let attributesContainer = attributesContainer {
                    attributesBuffer = [String:String]()
                    for stringContainer0 in attributesContainer {
                        attributesBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                attributes = attributesBuffer
            } else {
                attributes = [:]
            }
        } else {
            attributes = nil
        }
    }
}

public struct GetQueueUrlInputBodyMiddleware: Middleware {
    public let id: String = "GetQueueUrlInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetQueueUrlInput>,
                  next: H) -> Swift.Result<OperationOutput<GetQueueUrlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetQueueUrlInput>
    public typealias MOutput = OperationOutput<GetQueueUrlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetQueueUrlOutputError>
}

extension GetQueueUrlInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetQueueUrlInput(queueName: \(String(describing: queueName)), queueOwnerAWSAccountId: \(String(describing: queueOwnerAWSAccountId)))"}
}

extension GetQueueUrlInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let queueName = queueName {
            try container.encode(queueName, forKey: Key("QueueName"))
        }
        if let queueOwnerAWSAccountId = queueOwnerAWSAccountId {
            try container.encode(queueOwnerAWSAccountId, forKey: Key("QueueOwnerAWSAccountId"))
        }
        try container.encode("GetQueueUrl", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct GetQueueUrlInputHeadersMiddleware: Middleware {
    public let id: String = "GetQueueUrlInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetQueueUrlInput>,
                  next: H) -> Swift.Result<OperationOutput<GetQueueUrlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetQueueUrlInput>
    public typealias MOutput = OperationOutput<GetQueueUrlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetQueueUrlOutputError>
}

public struct GetQueueUrlInputQueryItemMiddleware: Middleware {
    public let id: String = "GetQueueUrlInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetQueueUrlInput>,
                  next: H) -> Swift.Result<OperationOutput<GetQueueUrlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetQueueUrlInput>
    public typealias MOutput = OperationOutput<GetQueueUrlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetQueueUrlOutputError>
}

/// <p></p>
public struct GetQueueUrlInput: Equatable {
    /// <p>The name of the queue whose URL must be fetched. Maximum 80 characters. Valid values: alphanumeric characters, hyphens (<code>-</code>), and underscores (<code>_</code>).</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueName: String?
    /// <p>The AWS account ID of the account that created the queue.</p>
    public let queueOwnerAWSAccountId: String?

    public init (
        queueName: String? = nil,
        queueOwnerAWSAccountId: String? = nil
    )
    {
        self.queueName = queueName
        self.queueOwnerAWSAccountId = queueOwnerAWSAccountId
    }
}

extension GetQueueUrlOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetQueueUrlOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "QueueDoesNotExist" : self = .queueDoesNotExist(try QueueDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetQueueUrlOutputError: Equatable {
    case queueDoesNotExist(QueueDoesNotExist)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetQueueUrlOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetQueueUrlOutputResponse(queueUrl: \(String(describing: queueUrl)))"}
}

extension GetQueueUrlOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetQueueUrlOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.queueUrl = output.queueUrl
        } else {
            self.queueUrl = nil
        }
    }
}

/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-api-responses.html">Interpreting Responses</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
public struct GetQueueUrlOutputResponse: Equatable {
    /// <p>The URL of the queue.</p>
    public let queueUrl: String?

    public init (
        queueUrl: String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

struct GetQueueUrlOutputResponseBody: Equatable {
    public let queueUrl: String?
}

extension GetQueueUrlOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case queueUrl = "QueueUrl"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("GetQueueUrlResult"))
        let queueUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
    }
}

extension InvalidAttributeName: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidAttributeName()"}
}

extension InvalidAttributeName: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified attribute doesn't exist.</p>
public struct InvalidAttributeName: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

extension InvalidBatchEntryId: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidBatchEntryId()"}
}

extension InvalidBatchEntryId: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The <code>Id</code> of a batch entry in a batch request doesn't abide by the specification.</p>
public struct InvalidBatchEntryId: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

extension InvalidIdFormat: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidIdFormat()"}
}

extension InvalidIdFormat: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified receipt handle isn't valid for the current version.</p>
public struct InvalidIdFormat: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

extension InvalidMessageContents: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidMessageContents()"}
}

extension InvalidMessageContents: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The message contains characters outside the allowed set.</p>
public struct InvalidMessageContents: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

public struct ListDeadLetterSourceQueuesInputBodyMiddleware: Middleware {
    public let id: String = "ListDeadLetterSourceQueuesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeadLetterSourceQueuesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeadLetterSourceQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeadLetterSourceQueuesInput>
    public typealias MOutput = OperationOutput<ListDeadLetterSourceQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeadLetterSourceQueuesOutputError>
}

extension ListDeadLetterSourceQueuesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDeadLetterSourceQueuesInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), queueUrl: \(String(describing: queueUrl)))"}
}

extension ListDeadLetterSourceQueuesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        try container.encode("ListDeadLetterSourceQueues", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct ListDeadLetterSourceQueuesInputHeadersMiddleware: Middleware {
    public let id: String = "ListDeadLetterSourceQueuesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeadLetterSourceQueuesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeadLetterSourceQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeadLetterSourceQueuesInput>
    public typealias MOutput = OperationOutput<ListDeadLetterSourceQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeadLetterSourceQueuesOutputError>
}

public struct ListDeadLetterSourceQueuesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListDeadLetterSourceQueuesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeadLetterSourceQueuesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeadLetterSourceQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeadLetterSourceQueuesInput>
    public typealias MOutput = OperationOutput<ListDeadLetterSourceQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeadLetterSourceQueuesOutputError>
}

/// <p></p>
public struct ListDeadLetterSourceQueuesInput: Equatable {
    /// <p>Maximum number of results to include in the response. Value range is 1 to 1000.
    ///           You must set <code>MaxResults</code> to receive a value for <code>NextToken</code> in the response.</p>
    public let maxResults: Int?
    /// <p>Pagination token to request the next set of results.</p>
    public let nextToken: String?
    /// <p>The URL of a dead-letter queue.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueUrl: String?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil,
        queueUrl: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queueUrl = queueUrl
    }
}

extension ListDeadLetterSourceQueuesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListDeadLetterSourceQueuesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "QueueDoesNotExist" : self = .queueDoesNotExist(try QueueDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDeadLetterSourceQueuesOutputError: Equatable {
    case queueDoesNotExist(QueueDoesNotExist)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeadLetterSourceQueuesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDeadLetterSourceQueuesOutputResponse(nextToken: \(String(describing: nextToken)), queueUrls: \(String(describing: queueUrls)))"}
}

extension ListDeadLetterSourceQueuesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListDeadLetterSourceQueuesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.queueUrls = output.queueUrls
        } else {
            self.nextToken = nil
            self.queueUrls = nil
        }
    }
}

/// <p>A list of your dead letter source queues.</p>
public struct ListDeadLetterSourceQueuesOutputResponse: Equatable {
    /// <p>Pagination token to include in the next request. Token value is <code>null</code> if there are no additional
    ///           results to request, or if you did not set <code>MaxResults</code> in the request.</p>
    public let nextToken: String?
    /// <p>A list of source queue URLs that have the <code>RedrivePolicy</code> queue attribute configured with a dead-letter queue.</p>
    public let queueUrls: [String]?

    public init (
        nextToken: String? = nil,
        queueUrls: [String]? = nil
    )
    {
        self.nextToken = nextToken
        self.queueUrls = queueUrls
    }
}

struct ListDeadLetterSourceQueuesOutputResponseBody: Equatable {
    public let queueUrls: [String]?
    public let nextToken: String?
}

extension ListDeadLetterSourceQueuesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case queueUrls = "QueueUrl"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListDeadLetterSourceQueuesResult"))
        if containerValues.contains(.queueUrls) {
            let queueUrlsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .queueUrls)
            if queueUrlsWrappedContainer != nil {
                let queueUrlsContainer = try containerValues.decodeIfPresent([String].self, forKey: .queueUrls)
                var queueUrlsBuffer:[String]? = nil
                if let queueUrlsContainer = queueUrlsContainer {
                    queueUrlsBuffer = [String]()
                    for stringContainer0 in queueUrlsContainer {
                        queueUrlsBuffer?.append(stringContainer0)
                    }
                }
                queueUrls = queueUrlsBuffer
            } else {
                queueUrls = []
            }
        } else {
            queueUrls = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListQueueTagsInputBodyMiddleware: Middleware {
    public let id: String = "ListQueueTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListQueueTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListQueueTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListQueueTagsInput>
    public typealias MOutput = OperationOutput<ListQueueTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListQueueTagsOutputError>
}

extension ListQueueTagsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListQueueTagsInput(queueUrl: \(String(describing: queueUrl)))"}
}

extension ListQueueTagsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        try container.encode("ListQueueTags", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct ListQueueTagsInputHeadersMiddleware: Middleware {
    public let id: String = "ListQueueTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListQueueTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListQueueTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListQueueTagsInput>
    public typealias MOutput = OperationOutput<ListQueueTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListQueueTagsOutputError>
}

public struct ListQueueTagsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListQueueTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListQueueTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListQueueTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListQueueTagsInput>
    public typealias MOutput = OperationOutput<ListQueueTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListQueueTagsOutputError>
}

public struct ListQueueTagsInput: Equatable {
    /// <p>The URL of the queue.</p>
    public let queueUrl: String?

    public init (
        queueUrl: String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

extension ListQueueTagsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListQueueTagsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListQueueTagsOutputError: Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListQueueTagsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListQueueTagsOutputResponse(tags: \(String(describing: tags)))"}
}

extension ListQueueTagsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListQueueTagsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListQueueTagsOutputResponse: Equatable {
    /// <p>The list of all tags added to the specified queue.</p>
    public let tags: [String:String]?

    public init (
        tags: [String:String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListQueueTagsOutputResponseBody: Equatable {
    public let tags: [String:String]?
}

extension ListQueueTagsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags = "Tag"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListQueueTagsResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Key{}; struct Value{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: MapEntry<String, String, KeyVal0.Key, KeyVal0.Value>.CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([MapKeyValue<String, String, KeyVal0.Key, KeyVal0.Value>].self, forKey: .tags)
                var tagsBuffer: [String:String]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [String:String]()
                    for stringContainer0 in tagsContainer {
                        tagsBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                tags = tagsBuffer
            } else {
                tags = [:]
            }
        } else {
            tags = nil
        }
    }
}

public struct ListQueuesInputBodyMiddleware: Middleware {
    public let id: String = "ListQueuesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListQueuesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListQueuesInput>
    public typealias MOutput = OperationOutput<ListQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListQueuesOutputError>
}

extension ListQueuesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListQueuesInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), queueNamePrefix: \(String(describing: queueNamePrefix)))"}
}

extension ListQueuesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        if let queueNamePrefix = queueNamePrefix {
            try container.encode(queueNamePrefix, forKey: Key("QueueNamePrefix"))
        }
        try container.encode("ListQueues", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct ListQueuesInputHeadersMiddleware: Middleware {
    public let id: String = "ListQueuesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListQueuesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListQueuesInput>
    public typealias MOutput = OperationOutput<ListQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListQueuesOutputError>
}

public struct ListQueuesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListQueuesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListQueuesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListQueuesInput>
    public typealias MOutput = OperationOutput<ListQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListQueuesOutputError>
}

/// <p></p>
public struct ListQueuesInput: Equatable {
    /// <p>Maximum number of results to include in the response. Value range is 1 to 1000.
    ///           You must set <code>MaxResults</code> to receive a value for <code>NextToken</code> in the response.</p>
    public let maxResults: Int?
    /// <p>Pagination token to request the next set of results.</p>
    public let nextToken: String?
    /// <p>A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueNamePrefix: String?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil,
        queueNamePrefix: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queueNamePrefix = queueNamePrefix
    }
}

extension ListQueuesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListQueuesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListQueuesOutputError: Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListQueuesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListQueuesOutputResponse(nextToken: \(String(describing: nextToken)), queueUrls: \(String(describing: queueUrls)))"}
}

extension ListQueuesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListQueuesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.queueUrls = output.queueUrls
        } else {
            self.nextToken = nil
            self.queueUrls = nil
        }
    }
}

/// <p>A list of your queues.</p>
public struct ListQueuesOutputResponse: Equatable {
    /// <p>Pagination token to include in the next request. Token value is <code>null</code> if there are no additional
    ///         results to request, or if you did not set <code>MaxResults</code> in the request.</p>
    public let nextToken: String?
    /// <p>A list of queue URLs, up to 1,000 entries, or the value of MaxResults that you sent in the request.</p>
    public let queueUrls: [String]?

    public init (
        nextToken: String? = nil,
        queueUrls: [String]? = nil
    )
    {
        self.nextToken = nextToken
        self.queueUrls = queueUrls
    }
}

struct ListQueuesOutputResponseBody: Equatable {
    public let nextToken: String?
    public let queueUrls: [String]?
}

extension ListQueuesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case queueUrls = "QueueUrl"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListQueuesResult"))
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.queueUrls) {
            let queueUrlsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .queueUrls)
            if queueUrlsWrappedContainer != nil {
                let queueUrlsContainer = try containerValues.decodeIfPresent([String].self, forKey: .queueUrls)
                var queueUrlsBuffer:[String]? = nil
                if let queueUrlsContainer = queueUrlsContainer {
                    queueUrlsBuffer = [String]()
                    for stringContainer0 in queueUrlsContainer {
                        queueUrlsBuffer?.append(stringContainer0)
                    }
                }
                queueUrls = queueUrlsBuffer
            } else {
                queueUrls = []
            }
        } else {
            queueUrls = nil
        }
    }
}

extension Message: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributes = "Attribute"
        case body = "Body"
        case mD5OfBody = "MD5OfBody"
        case mD5OfMessageAttributes = "MD5OfMessageAttributes"
        case messageAttributes = "MessageAttribute"
        case messageId = "MessageId"
        case receiptHandle = "ReceiptHandle"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let attributes = attributes {
            if !attributes.isEmpty {
                for (index0, element0) in attributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let messagesystemattributenameKey0 = element0.key
                    let stringValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Attribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Name"))
                    try keyContainer0.encode(messagesystemattributenameKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(stringValue0, forKey: Key(""))
                }
            }
        }
        if let body = body {
            try container.encode(body, forKey: Key("Body"))
        }
        if let mD5OfBody = mD5OfBody {
            try container.encode(mD5OfBody, forKey: Key("MD5OfBody"))
        }
        if let mD5OfMessageAttributes = mD5OfMessageAttributes {
            try container.encode(mD5OfMessageAttributes, forKey: Key("MD5OfMessageAttributes"))
        }
        if let messageAttributes = messageAttributes {
            if !messageAttributes.isEmpty {
                for (index0, element0) in messageAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let stringKey0 = element0.key
                    let messageattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("MessageAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Name"))
                    try keyContainer0.encode(stringKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(messageattributevalueValue0, forKey: Key(""))
                }
            }
        }
        if let messageId = messageId {
            try container.encode(messageId, forKey: Key("MessageId"))
        }
        if let receiptHandle = receiptHandle {
            try container.encode(receiptHandle, forKey: Key("ReceiptHandle"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let receiptHandleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .receiptHandle)
        receiptHandle = receiptHandleDecoded
        let mD5OfBodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mD5OfBody)
        mD5OfBody = mD5OfBodyDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .body)
        body = bodyDecoded
        if containerValues.contains(.attributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let attributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: MapEntry<String, String, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .attributes)
            if attributesWrappedContainer != nil {
                let attributesContainer = try containerValues.decodeIfPresent([MapKeyValue<String, String, KeyVal0.Name, KeyVal0.Value>].self, forKey: .attributes)
                var attributesBuffer: [String:String]? = nil
                if let attributesContainer = attributesContainer {
                    attributesBuffer = [String:String]()
                    for stringContainer0 in attributesContainer {
                        attributesBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                attributes = attributesBuffer
            } else {
                attributes = [:]
            }
        } else {
            attributes = nil
        }
        let mD5OfMessageAttributesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mD5OfMessageAttributes)
        mD5OfMessageAttributes = mD5OfMessageAttributesDecoded
        if containerValues.contains(.messageAttributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let messageAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: MapEntry<String, MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .messageAttributes)
            if messageAttributesWrappedContainer != nil {
                let messageAttributesContainer = try containerValues.decodeIfPresent([MapKeyValue<String, MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>].self, forKey: .messageAttributes)
                var messageAttributesBuffer: [String:MessageAttributeValue]? = nil
                if let messageAttributesContainer = messageAttributesContainer {
                    messageAttributesBuffer = [String:MessageAttributeValue]()
                    for structureContainer0 in messageAttributesContainer {
                        messageAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                messageAttributes = messageAttributesBuffer
            } else {
                messageAttributes = [:]
            }
        } else {
            messageAttributes = nil
        }
    }
}

extension Message: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Message(attributes: \(String(describing: attributes)), body: \(String(describing: body)), mD5OfBody: \(String(describing: mD5OfBody)), mD5OfMessageAttributes: \(String(describing: mD5OfMessageAttributes)), messageAttributes: \(String(describing: messageAttributes)), messageId: \(String(describing: messageId)), receiptHandle: \(String(describing: receiptHandle)))"}
}

/// <p>An Amazon SQS message.</p>
public struct Message: Equatable {
    /// <p>A map of the attributes requested in <code>
    ///                <a>ReceiveMessage</a>
    ///             </code> to their respective values.
    ///           Supported attributes:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ApproximateReceiveCount</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ApproximateFirstReceiveTimestamp</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MessageDeduplicationId</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MessageGroupId</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SenderId</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SentTimestamp</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SequenceNumber</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>
    ///             <code>ApproximateFirstReceiveTimestamp</code> and <code>SentTimestamp</code> are each returned as an integer representing the
    ///         <a href="http://en.wikipedia.org/wiki/Unix_time">epoch time</a> in milliseconds.</p>
    public let attributes: [String:String]?
    /// <p>The message's contents (not URL-encoded).</p>
    public let body: String?
    /// <p>An MD5 digest of the non-URL-encoded message body string.</p>
    public let mD5OfBody: String?
    /// <p>An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see <a href="https://www.ietf.org/rfc/rfc1321.txt">RFC1321</a>.</p>
    public let mD5OfMessageAttributes: String?
    /// <p>Each message attribute consists of a <code>Name</code>, <code>Type</code>, and <code>Value</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes">Amazon SQS Message Attributes</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    public let messageAttributes: [String:MessageAttributeValue]?
    /// <p>A unique identifier for the message. A <code>MessageId</code>is considered unique across all AWS accounts for an extended period of time.</p>
    public let messageId: String?
    /// <p>An identifier associated with the act of receiving the message. A new receipt handle is returned every time you receive a message. When deleting a message, you provide the last received receipt handle to delete the message.</p>
    public let receiptHandle: String?

    public init (
        attributes: [String:String]? = nil,
        body: String? = nil,
        mD5OfBody: String? = nil,
        mD5OfMessageAttributes: String? = nil,
        messageAttributes: [String:MessageAttributeValue]? = nil,
        messageId: String? = nil,
        receiptHandle: String? = nil
    )
    {
        self.attributes = attributes
        self.body = body
        self.mD5OfBody = mD5OfBody
        self.mD5OfMessageAttributes = mD5OfMessageAttributes
        self.messageAttributes = messageAttributes
        self.messageId = messageId
        self.receiptHandle = receiptHandle
    }
}

extension MessageAttributeValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case binaryListValues = "BinaryListValue"
        case binaryValue = "BinaryValue"
        case dataType = "DataType"
        case stringListValues = "StringListValue"
        case stringValue = "StringValue"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let binaryListValues = binaryListValues {
            if !binaryListValues.isEmpty {
                for (index0, binary0) in binaryListValues.enumerated() {
                    try container.encode(binary0.base64EncodedString(), forKey: Key("BinaryListValue.\(index0.advanced(by: 1))"))
                }
            }
        }
        if let binaryValue = binaryValue {
            try container.encode(binaryValue.base64EncodedString(), forKey: Key("BinaryValue"))
        }
        if let dataType = dataType {
            try container.encode(dataType, forKey: Key("DataType"))
        }
        if let stringListValues = stringListValues {
            if !stringListValues.isEmpty {
                for (index0, string0) in stringListValues.enumerated() {
                    var stringListValuesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("StringListValue.\(index0.advanced(by: 1))"))
                    try stringListValuesContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let stringValue = stringValue {
            try container.encode(stringValue, forKey: Key("StringValue"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stringValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stringValue)
        stringValue = stringValueDecoded
        if containerValues.contains(.binaryValue) {
            do {
                let binaryValueDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .binaryValue)
                binaryValue = binaryValueDecoded
            } catch {
                binaryValue = "".data(using: .utf8)
            }
        } else {
            binaryValue = nil
        }
        if containerValues.contains(.stringListValues) {
            let stringListValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .stringListValues)
            if stringListValuesWrappedContainer != nil {
                let stringListValuesContainer = try containerValues.decodeIfPresent([String].self, forKey: .stringListValues)
                var stringListValuesBuffer:[String]? = nil
                if let stringListValuesContainer = stringListValuesContainer {
                    stringListValuesBuffer = [String]()
                    for stringContainer0 in stringListValuesContainer {
                        stringListValuesBuffer?.append(stringContainer0)
                    }
                }
                stringListValues = stringListValuesBuffer
            } else {
                stringListValues = []
            }
        } else {
            stringListValues = nil
        }
        if containerValues.contains(.binaryListValues) {
            let binaryListValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .binaryListValues)
            if binaryListValuesWrappedContainer != nil {
                let binaryListValuesContainer = try containerValues.decodeIfPresent([Data].self, forKey: .binaryListValues)
                var binaryListValuesBuffer:[Data]? = nil
                if let binaryListValuesContainer = binaryListValuesContainer {
                    binaryListValuesBuffer = [Data]()
                    for blobContainer0 in binaryListValuesContainer {
                        binaryListValuesBuffer?.append(blobContainer0)
                    }
                }
                binaryListValues = binaryListValuesBuffer
            } else {
                binaryListValues = []
            }
        } else {
            binaryListValues = nil
        }
        let dataTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataType)
        dataType = dataTypeDecoded
    }
}

extension MessageAttributeValue: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MessageAttributeValue(binaryListValues: \(String(describing: binaryListValues)), binaryValue: \(String(describing: binaryValue)), dataType: \(String(describing: dataType)), stringListValues: \(String(describing: stringListValues)), stringValue: \(String(describing: stringValue)))"}
}

/// <p>The user-specified message attribute value. For string data types, the <code>Value</code> attribute has the same restrictions on the content as the message body. For more information, see <code>
///                <a>SendMessage</a>.</code>
///          </p>
///          <p>
///             <code>Name</code>, <code>type</code>, <code>value</code> and the message body must not be empty or null. All parts of the message attribute, including <code>Name</code>, <code>Type</code>, and <code>Value</code>, are part of the message size restriction (256 KB or 262,144 bytes).</p>
public struct MessageAttributeValue: Equatable {
    /// <p>Not implemented. Reserved for future use.</p>
    public let binaryListValues: [Data]?
    /// <p>Binary type attributes can store any binary data, such as compressed data, encrypted data, or images.</p>
    public let binaryValue: Data?
    /// <p>Amazon SQS supports the following logical data types: <code>String</code>, <code>Number</code>, and <code>Binary</code>. For the <code>Number</code> data type, you must use <code>StringValue</code>.</p>
    ///          <p>You can also append custom labels. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes">Amazon SQS Message Attributes</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    public let dataType: String?
    /// <p>Not implemented. Reserved for future use.</p>
    public let stringListValues: [String]?
    /// <p>Strings are Unicode with UTF-8 binary encoding. For a list of code values, see <a href="http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters">ASCII Printable Characters</a>.</p>
    public let stringValue: String?

    public init (
        binaryListValues: [Data]? = nil,
        binaryValue: Data? = nil,
        dataType: String? = nil,
        stringListValues: [String]? = nil,
        stringValue: String? = nil
    )
    {
        self.binaryListValues = binaryListValues
        self.binaryValue = binaryValue
        self.dataType = dataType
        self.stringListValues = stringListValues
        self.stringValue = stringValue
    }
}

extension MessageNotInflight: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MessageNotInflight()"}
}

extension MessageNotInflight: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified message isn't in flight.</p>
public struct MessageNotInflight: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

public enum MessageSystemAttributeName {
    case awstraceheader
    case approximatefirstreceivetimestamp
    case approximatereceivecount
    case messagededuplicationid
    case messagegroupid
    case senderid
    case senttimestamp
    case sequencenumber
    case sdkUnknown(String)
}

extension MessageSystemAttributeName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MessageSystemAttributeName] {
        return [
            .awstraceheader,
            .approximatefirstreceivetimestamp,
            .approximatereceivecount,
            .messagededuplicationid,
            .messagegroupid,
            .senderid,
            .senttimestamp,
            .sequencenumber,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .awstraceheader: return "AWSTraceHeader"
        case .approximatefirstreceivetimestamp: return "ApproximateFirstReceiveTimestamp"
        case .approximatereceivecount: return "ApproximateReceiveCount"
        case .messagededuplicationid: return "MessageDeduplicationId"
        case .messagegroupid: return "MessageGroupId"
        case .senderid: return "SenderId"
        case .senttimestamp: return "SentTimestamp"
        case .sequencenumber: return "SequenceNumber"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MessageSystemAttributeName(rawValue: rawValue) ?? MessageSystemAttributeName.sdkUnknown(rawValue)
    }
}

public enum MessageSystemAttributeNameForSends {
    case awstraceheader
    case sdkUnknown(String)
}

extension MessageSystemAttributeNameForSends : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MessageSystemAttributeNameForSends] {
        return [
            .awstraceheader,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .awstraceheader: return "AWSTraceHeader"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MessageSystemAttributeNameForSends(rawValue: rawValue) ?? MessageSystemAttributeNameForSends.sdkUnknown(rawValue)
    }
}

extension MessageSystemAttributeValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case binaryListValues = "BinaryListValue"
        case binaryValue = "BinaryValue"
        case dataType = "DataType"
        case stringListValues = "StringListValue"
        case stringValue = "StringValue"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let binaryListValues = binaryListValues {
            if !binaryListValues.isEmpty {
                for (index0, binary0) in binaryListValues.enumerated() {
                    try container.encode(binary0.base64EncodedString(), forKey: Key("BinaryListValue.\(index0.advanced(by: 1))"))
                }
            }
        }
        if let binaryValue = binaryValue {
            try container.encode(binaryValue.base64EncodedString(), forKey: Key("BinaryValue"))
        }
        if let dataType = dataType {
            try container.encode(dataType, forKey: Key("DataType"))
        }
        if let stringListValues = stringListValues {
            if !stringListValues.isEmpty {
                for (index0, string0) in stringListValues.enumerated() {
                    var stringListValuesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("StringListValue.\(index0.advanced(by: 1))"))
                    try stringListValuesContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let stringValue = stringValue {
            try container.encode(stringValue, forKey: Key("StringValue"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stringValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stringValue)
        stringValue = stringValueDecoded
        if containerValues.contains(.binaryValue) {
            do {
                let binaryValueDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .binaryValue)
                binaryValue = binaryValueDecoded
            } catch {
                binaryValue = "".data(using: .utf8)
            }
        } else {
            binaryValue = nil
        }
        if containerValues.contains(.stringListValues) {
            let stringListValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .stringListValues)
            if stringListValuesWrappedContainer != nil {
                let stringListValuesContainer = try containerValues.decodeIfPresent([String].self, forKey: .stringListValues)
                var stringListValuesBuffer:[String]? = nil
                if let stringListValuesContainer = stringListValuesContainer {
                    stringListValuesBuffer = [String]()
                    for stringContainer0 in stringListValuesContainer {
                        stringListValuesBuffer?.append(stringContainer0)
                    }
                }
                stringListValues = stringListValuesBuffer
            } else {
                stringListValues = []
            }
        } else {
            stringListValues = nil
        }
        if containerValues.contains(.binaryListValues) {
            let binaryListValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .binaryListValues)
            if binaryListValuesWrappedContainer != nil {
                let binaryListValuesContainer = try containerValues.decodeIfPresent([Data].self, forKey: .binaryListValues)
                var binaryListValuesBuffer:[Data]? = nil
                if let binaryListValuesContainer = binaryListValuesContainer {
                    binaryListValuesBuffer = [Data]()
                    for blobContainer0 in binaryListValuesContainer {
                        binaryListValuesBuffer?.append(blobContainer0)
                    }
                }
                binaryListValues = binaryListValuesBuffer
            } else {
                binaryListValues = []
            }
        } else {
            binaryListValues = nil
        }
        let dataTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataType)
        dataType = dataTypeDecoded
    }
}

extension MessageSystemAttributeValue: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MessageSystemAttributeValue(binaryListValues: \(String(describing: binaryListValues)), binaryValue: \(String(describing: binaryValue)), dataType: \(String(describing: dataType)), stringListValues: \(String(describing: stringListValues)), stringValue: \(String(describing: stringValue)))"}
}

/// <p>The user-specified message system attribute value. For string data types, the <code>Value</code> attribute has the same restrictions on the content as the message body. For more information, see <code>
///                <a>SendMessage</a>.</code>
///          </p>
///          <p>
///             <code>Name</code>, <code>type</code>, <code>value</code> and the message body must not be empty or null.</p>
public struct MessageSystemAttributeValue: Equatable {
    /// <p>Not implemented. Reserved for future use.</p>
    public let binaryListValues: [Data]?
    /// <p>Binary type attributes can store any binary data, such as compressed data, encrypted data, or images.</p>
    public let binaryValue: Data?
    /// <p>Amazon SQS supports the following logical data types: <code>String</code>, <code>Number</code>, and <code>Binary</code>. For the <code>Number</code> data type, you must use <code>StringValue</code>.</p>
    ///          <p>You can also append custom labels. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes">Amazon SQS Message Attributes</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    public let dataType: String?
    /// <p>Not implemented. Reserved for future use.</p>
    public let stringListValues: [String]?
    /// <p>Strings are Unicode with UTF-8 binary encoding. For a list of code values, see <a href="http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters">ASCII Printable Characters</a>.</p>
    public let stringValue: String?

    public init (
        binaryListValues: [Data]? = nil,
        binaryValue: Data? = nil,
        dataType: String? = nil,
        stringListValues: [String]? = nil,
        stringValue: String? = nil
    )
    {
        self.binaryListValues = binaryListValues
        self.binaryValue = binaryValue
        self.dataType = dataType
        self.stringListValues = stringListValues
        self.stringValue = stringValue
    }
}

extension OverLimit: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OverLimit()"}
}

extension OverLimit: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified action violates a limit. For example, <code>ReceiveMessage</code>
///             returns this error if the maximum number of inflight messages is reached and
///                 <code>AddPermission</code> returns this error if the maximum number of permissions
///             for the queue is reached.</p>
public struct OverLimit: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

extension PurgeQueueInProgress: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PurgeQueueInProgress()"}
}

extension PurgeQueueInProgress: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the specified queue previously received a <code>PurgeQueue</code> request within the last 60 seconds (the time it can take to delete the messages in the queue).</p>
public struct PurgeQueueInProgress: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

public struct PurgeQueueInputBodyMiddleware: Middleware {
    public let id: String = "PurgeQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PurgeQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<PurgeQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PurgeQueueInput>
    public typealias MOutput = OperationOutput<PurgeQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PurgeQueueOutputError>
}

extension PurgeQueueInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PurgeQueueInput(queueUrl: \(String(describing: queueUrl)))"}
}

extension PurgeQueueInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        try container.encode("PurgeQueue", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct PurgeQueueInputHeadersMiddleware: Middleware {
    public let id: String = "PurgeQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PurgeQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<PurgeQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PurgeQueueInput>
    public typealias MOutput = OperationOutput<PurgeQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PurgeQueueOutputError>
}

public struct PurgeQueueInputQueryItemMiddleware: Middleware {
    public let id: String = "PurgeQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PurgeQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<PurgeQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PurgeQueueInput>
    public typealias MOutput = OperationOutput<PurgeQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PurgeQueueOutputError>
}

/// <p></p>
public struct PurgeQueueInput: Equatable {
    /// <p>The URL of the queue from which the <code>PurgeQueue</code> action deletes messages.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueUrl: String?

    public init (
        queueUrl: String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

extension PurgeQueueOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PurgeQueueOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "PurgeQueueInProgress" : self = .purgeQueueInProgress(try PurgeQueueInProgress(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "QueueDoesNotExist" : self = .queueDoesNotExist(try QueueDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PurgeQueueOutputError: Equatable {
    case purgeQueueInProgress(PurgeQueueInProgress)
    case queueDoesNotExist(QueueDoesNotExist)
    case unknown(UnknownAWSHttpServiceError)
}

extension PurgeQueueOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PurgeQueueOutputResponse()"}
}

extension PurgeQueueOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct PurgeQueueOutputResponse: Equatable {

    public init() {}
}

struct PurgeQueueOutputResponseBody: Equatable {
}

extension PurgeQueueOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public enum QueueAttributeName {
    case all
    case approximatenumberofmessages
    case approximatenumberofmessagesdelayed
    case approximatenumberofmessagesnotvisible
    case contentbaseddeduplication
    case createdtimestamp
    case deduplicationscope
    case delayseconds
    case fifoqueue
    case fifothroughputlimit
    case kmsdatakeyreuseperiodseconds
    case kmsmasterkeyid
    case lastmodifiedtimestamp
    case maximummessagesize
    case messageretentionperiod
    case policy
    case queuearn
    case receivemessagewaittimeseconds
    case redrivepolicy
    case visibilitytimeout
    case sdkUnknown(String)
}

extension QueueAttributeName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [QueueAttributeName] {
        return [
            .all,
            .approximatenumberofmessages,
            .approximatenumberofmessagesdelayed,
            .approximatenumberofmessagesnotvisible,
            .contentbaseddeduplication,
            .createdtimestamp,
            .deduplicationscope,
            .delayseconds,
            .fifoqueue,
            .fifothroughputlimit,
            .kmsdatakeyreuseperiodseconds,
            .kmsmasterkeyid,
            .lastmodifiedtimestamp,
            .maximummessagesize,
            .messageretentionperiod,
            .policy,
            .queuearn,
            .receivemessagewaittimeseconds,
            .redrivepolicy,
            .visibilitytimeout,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .all: return "All"
        case .approximatenumberofmessages: return "ApproximateNumberOfMessages"
        case .approximatenumberofmessagesdelayed: return "ApproximateNumberOfMessagesDelayed"
        case .approximatenumberofmessagesnotvisible: return "ApproximateNumberOfMessagesNotVisible"
        case .contentbaseddeduplication: return "ContentBasedDeduplication"
        case .createdtimestamp: return "CreatedTimestamp"
        case .deduplicationscope: return "DeduplicationScope"
        case .delayseconds: return "DelaySeconds"
        case .fifoqueue: return "FifoQueue"
        case .fifothroughputlimit: return "FifoThroughputLimit"
        case .kmsdatakeyreuseperiodseconds: return "KmsDataKeyReusePeriodSeconds"
        case .kmsmasterkeyid: return "KmsMasterKeyId"
        case .lastmodifiedtimestamp: return "LastModifiedTimestamp"
        case .maximummessagesize: return "MaximumMessageSize"
        case .messageretentionperiod: return "MessageRetentionPeriod"
        case .policy: return "Policy"
        case .queuearn: return "QueueArn"
        case .receivemessagewaittimeseconds: return "ReceiveMessageWaitTimeSeconds"
        case .redrivepolicy: return "RedrivePolicy"
        case .visibilitytimeout: return "VisibilityTimeout"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = QueueAttributeName(rawValue: rawValue) ?? QueueAttributeName.sdkUnknown(rawValue)
    }
}

extension QueueDeletedRecently: CustomDebugStringConvertible {
    public var debugDescription: String {
        "QueueDeletedRecently()"}
}

extension QueueDeletedRecently: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You must wait 60 seconds after deleting a queue before you can create another queue
///             with the same name.</p>
public struct QueueDeletedRecently: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

extension QueueDoesNotExist: CustomDebugStringConvertible {
    public var debugDescription: String {
        "QueueDoesNotExist()"}
}

extension QueueDoesNotExist: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified queue doesn't exist.</p>
public struct QueueDoesNotExist: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

extension QueueNameExists: CustomDebugStringConvertible {
    public var debugDescription: String {
        "QueueNameExists()"}
}

extension QueueNameExists: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A queue with this name already exists. Amazon SQS returns this error only if the request
///             includes attributes whose values differ from those of the existing queue.</p>
public struct QueueNameExists: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

extension ReceiptHandleIsInvalid: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReceiptHandleIsInvalid()"}
}

extension ReceiptHandleIsInvalid: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified receipt handle isn't valid.</p>
public struct ReceiptHandleIsInvalid: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

public struct ReceiveMessageInputBodyMiddleware: Middleware {
    public let id: String = "ReceiveMessageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReceiveMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<ReceiveMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReceiveMessageInput>
    public typealias MOutput = OperationOutput<ReceiveMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReceiveMessageOutputError>
}

extension ReceiveMessageInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReceiveMessageInput(attributeNames: \(String(describing: attributeNames)), maxNumberOfMessages: \(String(describing: maxNumberOfMessages)), messageAttributeNames: \(String(describing: messageAttributeNames)), queueUrl: \(String(describing: queueUrl)), receiveRequestAttemptId: \(String(describing: receiveRequestAttemptId)), visibilityTimeout: \(String(describing: visibilityTimeout)), waitTimeSeconds: \(String(describing: waitTimeSeconds)))"}
}

extension ReceiveMessageInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let attributeNames = attributeNames {
            if !attributeNames.isEmpty {
                for (index0, queueattributename0) in attributeNames.enumerated() {
                    var attributeNamesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("AttributeName.\(index0.advanced(by: 1))"))
                    try attributeNamesContainer0.encode(queueattributename0, forKey: Key(""))
                }
            }
        }
        if maxNumberOfMessages != 0 {
            try container.encode(maxNumberOfMessages, forKey: Key("MaxNumberOfMessages"))
        }
        if let messageAttributeNames = messageAttributeNames {
            if !messageAttributeNames.isEmpty {
                for (index0, messageattributename0) in messageAttributeNames.enumerated() {
                    var messageAttributeNamesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("MessageAttributeName.\(index0.advanced(by: 1))"))
                    try messageAttributeNamesContainer0.encode(messageattributename0, forKey: Key(""))
                }
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        if let receiveRequestAttemptId = receiveRequestAttemptId {
            try container.encode(receiveRequestAttemptId, forKey: Key("ReceiveRequestAttemptId"))
        }
        if visibilityTimeout != 0 {
            try container.encode(visibilityTimeout, forKey: Key("VisibilityTimeout"))
        }
        if waitTimeSeconds != 0 {
            try container.encode(waitTimeSeconds, forKey: Key("WaitTimeSeconds"))
        }
        try container.encode("ReceiveMessage", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct ReceiveMessageInputHeadersMiddleware: Middleware {
    public let id: String = "ReceiveMessageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReceiveMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<ReceiveMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReceiveMessageInput>
    public typealias MOutput = OperationOutput<ReceiveMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReceiveMessageOutputError>
}

public struct ReceiveMessageInputQueryItemMiddleware: Middleware {
    public let id: String = "ReceiveMessageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReceiveMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<ReceiveMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReceiveMessageInput>
    public typealias MOutput = OperationOutput<ReceiveMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReceiveMessageOutputError>
}

/// <p></p>
public struct ReceiveMessageInput: Equatable {
    /// <p>A list of attributes that need to be returned along with each message. These attributes
    ///             include:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>All</code> – Returns all values.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ApproximateFirstReceiveTimestamp</code> – Returns the time the message was first received from the queue (<a href="http://en.wikipedia.org/wiki/Unix_time">epoch time</a> in milliseconds).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ApproximateReceiveCount</code> – Returns the number of times a message has been received across all queues but not deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>AWSTraceHeader</code> – Returns the AWS X-Ray trace header string.
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SenderId</code>
    ///                </p>
    ///                <ul>
    ///                   <li>
    ///                        <p>For an IAM user, returns the IAM user ID, for example <code>ABCDEFGHI1JKLMNOPQ23R</code>.</p>
    ///                    </li>
    ///                   <li>
    ///                        <p>For an IAM role, returns the IAM role ID, for example <code>ABCDE1F2GH3I4JK5LMNOP:i-a123b456</code>.</p>
    ///                    </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SentTimestamp</code> – Returns the time the message was sent to the queue (<a href="http://en.wikipedia.org/wiki/Unix_time">epoch time</a> in milliseconds).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MessageDeduplicationId</code> – Returns the value provided by the
    ///                     producer that calls the <code>
    ///                      <a>SendMessage</a>
    ///                   </code>
    ///                     action.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MessageGroupId</code> – Returns the value provided by the producer that
    ///                     calls the <code>
    ///                      <a>SendMessage</a>
    ///                   </code> action. Messages with the
    ///                     same <code>MessageGroupId</code> are returned in sequence.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SequenceNumber</code> – Returns the value provided by Amazon SQS.</p>
    ///             </li>
    ///          </ul>
    public let attributeNames: [QueueAttributeName]?
    /// <p>The maximum number of messages to return. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10. Default: 1.</p>
    public let maxNumberOfMessages: Int
    /// <p>The name of the message attribute, where <i>N</i> is the index.</p>
    ///          <ul>
    ///             <li>
    ///                <p>The name can contain alphanumeric characters and the underscore (<code>_</code>), hyphen (<code>-</code>), and period (<code>.</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>The name is case-sensitive and must be unique among all attribute names for the message.</p>
    ///             </li>
    ///             <li>
    ///                <p>The name must not start with AWS-reserved prefixes such as <code>AWS.</code> or <code>Amazon.</code> (or any casing variants).</p>
    ///             </li>
    ///             <li>
    ///                <p>The name must not start or end with a period (<code>.</code>), and it should not have periods in succession (<code>..</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>The name can be up to 256 characters long.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>When using <code>ReceiveMessage</code>, you can send a list of attribute names to receive, or you can return all of the attributes by specifying <code>All</code> or <code>.*</code> in your request.
    ///           You can also use all message attributes starting with a prefix, for example <code>bar.*</code>.</p>
    public let messageAttributeNames: [String]?
    /// <p>The URL of the Amazon SQS queue from which messages are received.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueUrl: String?
    /// <p>This parameter applies only to FIFO (first-in-first-out) queues.</p>
    ///          <p>The token used for deduplication of <code>ReceiveMessage</code> calls. If a networking issue occurs after a <code>ReceiveMessage</code> action, and instead of a response you receive a generic error,
    ///           it is possible to retry the same action with an identical <code>ReceiveRequestAttemptId</code> to retrieve the same set of messages, even if their visibility timeout has not yet expired.</p>
    ///          <ul>
    ///             <li>
    ///                <p>You can use <code>ReceiveRequestAttemptId</code> only for 5 minutes after a <code>ReceiveMessage</code> action.</p>
    ///             </li>
    ///             <li>
    ///                <p>When you set <code>FifoQueue</code>, a caller of the <code>ReceiveMessage</code> action can provide a <code>ReceiveRequestAttemptId</code> explicitly.</p>
    ///             </li>
    ///             <li>
    ///                <p>If a caller of the <code>ReceiveMessage</code> action doesn't provide a <code>ReceiveRequestAttemptId</code>, Amazon SQS generates a <code>ReceiveRequestAttemptId</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>It is possible to retry the <code>ReceiveMessage</code> action with the same <code>ReceiveRequestAttemptId</code> if none of the messages have been modified (deleted or had their visibility changes).</p>
    ///             </li>
    ///             <li>
    ///                <p>During a visibility timeout, subsequent calls with the same <code>ReceiveRequestAttemptId</code> return the same messages and receipt handles. If a retry occurs within the deduplication interval,
    ///               it resets the visibility timeout. For more information, see
    ///               <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility Timeout</a>
    ///               in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///               <important>
    ///                   <p>If a caller of the <code>ReceiveMessage</code> action still processes
    ///                         messages when the visibility timeout expires and messages become visible,
    ///                         another worker consuming from the same queue can receive the same messages
    ///                         and therefore process duplicates. Also, if a consumer whose message
    ///                         processing time is longer than the visibility timeout tries to delete the
    ///                         processed messages, the action fails with an error.</p>
    ///                   <p>To mitigate this effect, ensure that your application observes a safe threshold before the visibility timeout expires and extend the visibility timeout as necessary.</p>
    ///               </important>
    ///             </li>
    ///             <li>
    ///                <p>While messages with a particular <code>MessageGroupId</code> are invisible, no more messages belonging to the same <code>MessageGroupId</code> are returned until the visibility timeout expires. You can still receive
    ///               messages with another <code>MessageGroupId</code> as long as it is also visible.</p>
    ///             </li>
    ///             <li>
    ///                <p>If a caller of <code>ReceiveMessage</code> can't track the <code>ReceiveRequestAttemptId</code>, no retries work until the original visibility timeout expires. As a result, delays might occur but
    ///               the messages in the queue remain in a strict order.</p>
    ///             </li>
    ///          </ul>
    ///          <p>The maximum length of <code>ReceiveRequestAttemptId</code> is 128 characters. <code>ReceiveRequestAttemptId</code> can contain alphanumeric characters (<code>a-z</code>, <code>A-Z</code>, <code>0-9</code>) and
    ///           punctuation (<code>!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~</code>).</p>
    ///          <p>For best practices of using <code>ReceiveRequestAttemptId</code>, see
    ///           <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-receiverequestattemptid-request-parameter.html">Using the ReceiveRequestAttemptId Request Parameter</a>
    ///           in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    public let receiveRequestAttemptId: String?
    /// <p>The duration (in seconds) that the received messages are hidden from subsequent retrieve requests after being retrieved by a <code>ReceiveMessage</code> request.</p>
    public let visibilityTimeout: Int
    /// <p>The duration (in seconds) for which the call waits for a message to arrive in the queue before returning. If a message is available, the call returns sooner than <code>WaitTimeSeconds</code>.
    ///           If no messages are available and the wait time expires, the call returns successfully with an empty list of messages.</p>
    ///          <important>
    ///             <p>To avoid HTTP errors, ensure that the HTTP response timeout for <code>ReceiveMessage</code>
    ///                 requests is longer than the <code>WaitTimeSeconds</code> parameter. For example,
    ///                 with the Java SDK, you can set HTTP transport settings using the <a href="https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.html"> NettyNioAsyncHttpClient</a> for asynchronous clients, or the <a href="https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.html"> ApacheHttpClient</a> for synchronous clients. </p>
    ///          </important>
    public let waitTimeSeconds: Int

    public init (
        attributeNames: [QueueAttributeName]? = nil,
        maxNumberOfMessages: Int = 0,
        messageAttributeNames: [String]? = nil,
        queueUrl: String? = nil,
        receiveRequestAttemptId: String? = nil,
        visibilityTimeout: Int = 0,
        waitTimeSeconds: Int = 0
    )
    {
        self.attributeNames = attributeNames
        self.maxNumberOfMessages = maxNumberOfMessages
        self.messageAttributeNames = messageAttributeNames
        self.queueUrl = queueUrl
        self.receiveRequestAttemptId = receiveRequestAttemptId
        self.visibilityTimeout = visibilityTimeout
        self.waitTimeSeconds = waitTimeSeconds
    }
}

extension ReceiveMessageOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ReceiveMessageOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OverLimit" : self = .overLimit(try OverLimit(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ReceiveMessageOutputError: Equatable {
    case overLimit(OverLimit)
    case unknown(UnknownAWSHttpServiceError)
}

extension ReceiveMessageOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReceiveMessageOutputResponse(messages: \(String(describing: messages)))"}
}

extension ReceiveMessageOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ReceiveMessageOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.messages = output.messages
        } else {
            self.messages = nil
        }
    }
}

/// <p>A list of received messages.</p>
public struct ReceiveMessageOutputResponse: Equatable {
    /// <p>A list of messages.</p>
    public let messages: [Message]?

    public init (
        messages: [Message]? = nil
    )
    {
        self.messages = messages
    }
}

struct ReceiveMessageOutputResponseBody: Equatable {
    public let messages: [Message]?
}

extension ReceiveMessageOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case messages = "Message"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ReceiveMessageResult"))
        if containerValues.contains(.messages) {
            let messagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .messages)
            if messagesWrappedContainer != nil {
                let messagesContainer = try containerValues.decodeIfPresent([Message].self, forKey: .messages)
                var messagesBuffer:[Message]? = nil
                if let messagesContainer = messagesContainer {
                    messagesBuffer = [Message]()
                    for structureContainer0 in messagesContainer {
                        messagesBuffer?.append(structureContainer0)
                    }
                }
                messages = messagesBuffer
            } else {
                messages = []
            }
        } else {
            messages = nil
        }
    }
}

public struct RemovePermissionInputBodyMiddleware: Middleware {
    public let id: String = "RemovePermissionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemovePermissionInput>,
                  next: H) -> Swift.Result<OperationOutput<RemovePermissionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemovePermissionInput>
    public typealias MOutput = OperationOutput<RemovePermissionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemovePermissionOutputError>
}

extension RemovePermissionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemovePermissionInput(label: \(String(describing: label)), queueUrl: \(String(describing: queueUrl)))"}
}

extension RemovePermissionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let label = label {
            try container.encode(label, forKey: Key("Label"))
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        try container.encode("RemovePermission", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct RemovePermissionInputHeadersMiddleware: Middleware {
    public let id: String = "RemovePermissionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemovePermissionInput>,
                  next: H) -> Swift.Result<OperationOutput<RemovePermissionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemovePermissionInput>
    public typealias MOutput = OperationOutput<RemovePermissionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemovePermissionOutputError>
}

public struct RemovePermissionInputQueryItemMiddleware: Middleware {
    public let id: String = "RemovePermissionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemovePermissionInput>,
                  next: H) -> Swift.Result<OperationOutput<RemovePermissionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemovePermissionInput>
    public typealias MOutput = OperationOutput<RemovePermissionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemovePermissionOutputError>
}

/// <p></p>
public struct RemovePermissionInput: Equatable {
    /// <p>The identification of the permission to remove. This is the label added using the <code>
    ///                <a>AddPermission</a>
    ///             </code> action.</p>
    public let label: String?
    /// <p>The URL of the Amazon SQS queue from which permissions are removed.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueUrl: String?

    public init (
        label: String? = nil,
        queueUrl: String? = nil
    )
    {
        self.label = label
        self.queueUrl = queueUrl
    }
}

extension RemovePermissionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RemovePermissionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemovePermissionOutputError: Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension RemovePermissionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemovePermissionOutputResponse()"}
}

extension RemovePermissionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RemovePermissionOutputResponse: Equatable {

    public init() {}
}

struct RemovePermissionOutputResponseBody: Equatable {
}

extension RemovePermissionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct SendMessageBatchInputBodyMiddleware: Middleware {
    public let id: String = "SendMessageBatchInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendMessageBatchInput>,
                  next: H) -> Swift.Result<OperationOutput<SendMessageBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendMessageBatchInput>
    public typealias MOutput = OperationOutput<SendMessageBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendMessageBatchOutputError>
}

extension SendMessageBatchInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SendMessageBatchInput(entries: \(String(describing: entries)), queueUrl: \(String(describing: queueUrl)))"}
}

extension SendMessageBatchInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let entries = entries {
            if !entries.isEmpty {
                for (index0, sendmessagebatchrequestentry0) in entries.enumerated() {
                    var entriesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("SendMessageBatchRequestEntry.\(index0.advanced(by: 1))"))
                    try entriesContainer0.encode(sendmessagebatchrequestentry0, forKey: Key(""))
                }
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        try container.encode("SendMessageBatch", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct SendMessageBatchInputHeadersMiddleware: Middleware {
    public let id: String = "SendMessageBatchInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendMessageBatchInput>,
                  next: H) -> Swift.Result<OperationOutput<SendMessageBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendMessageBatchInput>
    public typealias MOutput = OperationOutput<SendMessageBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendMessageBatchOutputError>
}

public struct SendMessageBatchInputQueryItemMiddleware: Middleware {
    public let id: String = "SendMessageBatchInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendMessageBatchInput>,
                  next: H) -> Swift.Result<OperationOutput<SendMessageBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendMessageBatchInput>
    public typealias MOutput = OperationOutput<SendMessageBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendMessageBatchOutputError>
}

/// <p></p>
public struct SendMessageBatchInput: Equatable {
    /// <p>A list of <code>
    ///                <a>SendMessageBatchRequestEntry</a>
    ///             </code> items.</p>
    public let entries: [SendMessageBatchRequestEntry]?
    /// <p>The URL of the Amazon SQS queue to which batched messages are sent.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueUrl: String?

    public init (
        entries: [SendMessageBatchRequestEntry]? = nil,
        queueUrl: String? = nil
    )
    {
        self.entries = entries
        self.queueUrl = queueUrl
    }
}

extension SendMessageBatchOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SendMessageBatchOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BatchEntryIdsNotDistinct" : self = .batchEntryIdsNotDistinct(try BatchEntryIdsNotDistinct(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BatchRequestTooLong" : self = .batchRequestTooLong(try BatchRequestTooLong(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EmptyBatchRequest" : self = .emptyBatchRequest(try EmptyBatchRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidBatchEntryId" : self = .invalidBatchEntryId(try InvalidBatchEntryId(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyEntriesInBatchRequest" : self = .tooManyEntriesInBatchRequest(try TooManyEntriesInBatchRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperation(try UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendMessageBatchOutputError: Equatable {
    case batchEntryIdsNotDistinct(BatchEntryIdsNotDistinct)
    case batchRequestTooLong(BatchRequestTooLong)
    case emptyBatchRequest(EmptyBatchRequest)
    case invalidBatchEntryId(InvalidBatchEntryId)
    case tooManyEntriesInBatchRequest(TooManyEntriesInBatchRequest)
    case unsupportedOperation(UnsupportedOperation)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendMessageBatchOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SendMessageBatchOutputResponse(failed: \(String(describing: failed)), successful: \(String(describing: successful)))"}
}

extension SendMessageBatchOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: SendMessageBatchOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.failed = output.failed
            self.successful = output.successful
        } else {
            self.failed = nil
            self.successful = nil
        }
    }
}

/// <p>For each message in the batch, the response contains a <code>
///                <a>SendMessageBatchResultEntry</a>
///             </code> tag if the message succeeds or a <code>
///                <a>BatchResultErrorEntry</a>
///             </code> tag if the message fails.</p>
public struct SendMessageBatchOutputResponse: Equatable {
    /// <p>A list of <code>
    ///                <a>BatchResultErrorEntry</a>
    ///             </code> items with error details about each message that can't be enqueued.</p>
    public let failed: [BatchResultErrorEntry]?
    /// <p>A list of <code>
    ///                <a>SendMessageBatchResultEntry</a>
    ///             </code> items.</p>
    public let successful: [SendMessageBatchResultEntry]?

    public init (
        failed: [BatchResultErrorEntry]? = nil,
        successful: [SendMessageBatchResultEntry]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

struct SendMessageBatchOutputResponseBody: Equatable {
    public let successful: [SendMessageBatchResultEntry]?
    public let failed: [BatchResultErrorEntry]?
}

extension SendMessageBatchOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case failed = "BatchResultErrorEntry"
        case successful = "SendMessageBatchResultEntry"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("SendMessageBatchResult"))
        if containerValues.contains(.successful) {
            let successfulWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .successful)
            if successfulWrappedContainer != nil {
                let successfulContainer = try containerValues.decodeIfPresent([SendMessageBatchResultEntry].self, forKey: .successful)
                var successfulBuffer:[SendMessageBatchResultEntry]? = nil
                if let successfulContainer = successfulContainer {
                    successfulBuffer = [SendMessageBatchResultEntry]()
                    for structureContainer0 in successfulContainer {
                        successfulBuffer?.append(structureContainer0)
                    }
                }
                successful = successfulBuffer
            } else {
                successful = []
            }
        } else {
            successful = nil
        }
        if containerValues.contains(.failed) {
            let failedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .failed)
            if failedWrappedContainer != nil {
                let failedContainer = try containerValues.decodeIfPresent([BatchResultErrorEntry].self, forKey: .failed)
                var failedBuffer:[BatchResultErrorEntry]? = nil
                if let failedContainer = failedContainer {
                    failedBuffer = [BatchResultErrorEntry]()
                    for structureContainer0 in failedContainer {
                        failedBuffer?.append(structureContainer0)
                    }
                }
                failed = failedBuffer
            } else {
                failed = []
            }
        } else {
            failed = nil
        }
    }
}

extension SendMessageBatchRequestEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case delaySeconds = "DelaySeconds"
        case id = "Id"
        case messageAttributes = "MessageAttribute"
        case messageBody = "MessageBody"
        case messageDeduplicationId = "MessageDeduplicationId"
        case messageGroupId = "MessageGroupId"
        case messageSystemAttributes = "MessageSystemAttribute"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if delaySeconds != 0 {
            try container.encode(delaySeconds, forKey: Key("DelaySeconds"))
        }
        if let id = id {
            try container.encode(id, forKey: Key("Id"))
        }
        if let messageAttributes = messageAttributes {
            if !messageAttributes.isEmpty {
                for (index0, element0) in messageAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let stringKey0 = element0.key
                    let messageattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("MessageAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Name"))
                    try keyContainer0.encode(stringKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(messageattributevalueValue0, forKey: Key(""))
                }
            }
        }
        if let messageBody = messageBody {
            try container.encode(messageBody, forKey: Key("MessageBody"))
        }
        if let messageDeduplicationId = messageDeduplicationId {
            try container.encode(messageDeduplicationId, forKey: Key("MessageDeduplicationId"))
        }
        if let messageGroupId = messageGroupId {
            try container.encode(messageGroupId, forKey: Key("MessageGroupId"))
        }
        if let messageSystemAttributes = messageSystemAttributes {
            if !messageSystemAttributes.isEmpty {
                for (index0, element0) in messageSystemAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let messagesystemattributenameforsendsKey0 = element0.key
                    let messagesystemattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("MessageSystemAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Name"))
                    try keyContainer0.encode(messagesystemattributenameforsendsKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(messagesystemattributevalueValue0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let messageBodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
        let delaySecondsDecoded = try containerValues.decode(Int.self, forKey: .delaySeconds)
        delaySeconds = delaySecondsDecoded
        if containerValues.contains(.messageAttributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let messageAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: MapEntry<String, MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .messageAttributes)
            if messageAttributesWrappedContainer != nil {
                let messageAttributesContainer = try containerValues.decodeIfPresent([MapKeyValue<String, MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>].self, forKey: .messageAttributes)
                var messageAttributesBuffer: [String:MessageAttributeValue]? = nil
                if let messageAttributesContainer = messageAttributesContainer {
                    messageAttributesBuffer = [String:MessageAttributeValue]()
                    for structureContainer0 in messageAttributesContainer {
                        messageAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                messageAttributes = messageAttributesBuffer
            } else {
                messageAttributes = [:]
            }
        } else {
            messageAttributes = nil
        }
        if containerValues.contains(.messageSystemAttributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let messageSystemAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: MapEntry<String, MessageSystemAttributeValue, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .messageSystemAttributes)
            if messageSystemAttributesWrappedContainer != nil {
                let messageSystemAttributesContainer = try containerValues.decodeIfPresent([MapKeyValue<String, MessageSystemAttributeValue, KeyVal0.Name, KeyVal0.Value>].self, forKey: .messageSystemAttributes)
                var messageSystemAttributesBuffer: [String:MessageSystemAttributeValue]? = nil
                if let messageSystemAttributesContainer = messageSystemAttributesContainer {
                    messageSystemAttributesBuffer = [String:MessageSystemAttributeValue]()
                    for structureContainer0 in messageSystemAttributesContainer {
                        messageSystemAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                messageSystemAttributes = messageSystemAttributesBuffer
            } else {
                messageSystemAttributes = [:]
            }
        } else {
            messageSystemAttributes = nil
        }
        let messageDeduplicationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .messageDeduplicationId)
        messageDeduplicationId = messageDeduplicationIdDecoded
        let messageGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .messageGroupId)
        messageGroupId = messageGroupIdDecoded
    }
}

extension SendMessageBatchRequestEntry: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SendMessageBatchRequestEntry(delaySeconds: \(String(describing: delaySeconds)), id: \(String(describing: id)), messageAttributes: \(String(describing: messageAttributes)), messageBody: \(String(describing: messageBody)), messageDeduplicationId: \(String(describing: messageDeduplicationId)), messageGroupId: \(String(describing: messageGroupId)), messageSystemAttributes: \(String(describing: messageSystemAttributes)))"}
}

/// <p>Contains the details of a single Amazon SQS message along with an <code>Id</code>.</p>
public struct SendMessageBatchRequestEntry: Equatable {
    /// <p>The length of time, in seconds, for which a specific message is delayed. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive <code>DelaySeconds</code> value become available for processing after the delay period is finished.
    ///           If you don't specify a value, the default value for the queue is applied.
    ///       </p>
    ///          <note>
    ///             <p>When you set <code>FifoQueue</code>, you can't set <code>DelaySeconds</code> per message. You can set this parameter only on a queue level.</p>
    ///          </note>
    public let delaySeconds: Int
    /// <p>An identifier for a message in this batch used to communicate the result.</p>
    ///          <note>
    ///             <p>The <code>Id</code>s of a batch request need to be unique within a request.</p>
    ///             <p>This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).</p>
    ///          </note>
    public let id: String?
    /// <p>Each message attribute consists of a <code>Name</code>, <code>Type</code>, and <code>Value</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes">Amazon SQS Message Attributes</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    public let messageAttributes: [String:MessageAttributeValue]?
    /// <p>The body of the message.</p>
    public let messageBody: String?
    /// <p>This parameter applies only to FIFO (first-in-first-out) queues.</p>
    ///          <p>The token used for deduplication of messages within a 5-minute minimum deduplication interval. If a message with a particular
    ///           <code>MessageDeduplicationId</code> is sent successfully, subsequent messages with the same <code>MessageDeduplicationId</code> are
    ///           accepted successfully but aren't delivered. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html">
    ///           Exactly-once processing</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///          <ul>
    ///             <li>
    ///               <p>Every message must have a unique <code>MessageDeduplicationId</code>,</p>
    ///               <ul>
    ///                   <li>
    ///                       <p>You may provide a <code>MessageDeduplicationId</code> explicitly.</p>
    ///                   </li>
    ///                   <li>
    ///                       <p>If you aren't able to provide a <code>MessageDeduplicationId</code> and you enable <code>ContentBasedDeduplication</code> for your queue,
    ///                           Amazon SQS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using the body of the message (but not the attributes of the message).
    ///                       </p>
    ///                   </li>
    ///                   <li>
    ///                       <p>If you don't provide a <code>MessageDeduplicationId</code> and the queue doesn't have <code>ContentBasedDeduplication</code> set,
    ///                           the action fails with an error.</p>
    ///                   </li>
    ///                   <li>
    ///                       <p>If the queue has <code>ContentBasedDeduplication</code> set, your <code>MessageDeduplicationId</code> overrides the generated one.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///               <p>When <code>ContentBasedDeduplication</code> is in effect, messages with identical content sent within the deduplication interval are treated as duplicates
    ///                   and only one copy of the message is delivered.</p>
    ///             </li>
    ///             <li>
    ///               <p>If you send one message with <code>ContentBasedDeduplication</code> enabled and then another message with a <code>MessageDeduplicationId</code> that is the same
    ///                   as the one generated for the first <code>MessageDeduplicationId</code>, the two messages are treated as duplicates and only one copy of the message is delivered.
    ///               </p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>The <code>MessageDeduplicationId</code> is available to the consumer of the
    ///                 message (this can be useful for troubleshooting delivery issues).</p>
    ///             <p>If a message is sent successfully but the acknowledgement is lost and the message is resent with the same
    ///               <code>MessageDeduplicationId</code> after the deduplication interval, Amazon SQS can't detect duplicate messages.</p>
    ///             <p>Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted.</p>
    ///          </note>
    ///          <p>The length of <code>MessageDeduplicationId</code> is 128 characters. <code>MessageDeduplicationId</code> can contain alphanumeric characters (<code>a-z</code>, <code>A-Z</code>, <code>0-9</code>) and
    ///           punctuation (<code>!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~</code>).</p>
    ///          <p>For best practices of using <code>MessageDeduplicationId</code>, see
    ///           <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html">Using the MessageDeduplicationId Property</a>
    ///           in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    public let messageDeduplicationId: String?
    /// <p>This parameter applies only to FIFO (first-in-first-out) queues.</p>
    ///          <p>The tag that specifies that a message belongs to a specific message group. Messages
    ///             that belong to the same message group are processed in a FIFO manner (however,
    ///             messages in different message groups might be processed out of order). To interleave
    ///             multiple ordered streams within a single queue, use <code>MessageGroupId</code> values
    ///             (for example, session data for multiple users). In this scenario, multiple consumers can
    ///             process the queue, but the session data of each user is processed in a FIFO
    ///             fashion.</p>
    ///          <ul>
    ///             <li>
    ///                <p>You must associate a non-empty <code>MessageGroupId</code> with a message. If you don't provide a <code>MessageGroupId</code>, the action fails.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ReceiveMessage</code> might return messages with multiple <code>MessageGroupId</code> values. For each <code>MessageGroupId</code>, the messages are sorted by time sent. The caller can't
    ///               specify a <code>MessageGroupId</code>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>The length of <code>MessageGroupId</code> is 128 characters. Valid values: alphanumeric characters and punctuation <code>(!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~)</code>.</p>
    ///          <p>For best practices of using <code>MessageGroupId</code>, see
    ///           <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagegroupid-property.html">Using the MessageGroupId Property</a>
    ///           in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///          <important>
    ///             <p>
    ///                <code>MessageGroupId</code> is required for FIFO queues. You can't use it for Standard queues.</p>
    ///          </important>
    public let messageGroupId: String?
    /// <p>The message system attribute to send Each message system attribute consists of a <code>Name</code>, <code>Type</code>, and <code>Value</code>.</p>
    ///          <important>
    ///             <ul>
    ///                <li>
    ///                   <p>Currently, the only supported message system attribute is <code>AWSTraceHeader</code>.
    ///                     Its type must be <code>String</code> and its value must be a correctly formatted
    ///                     AWS X-Ray trace header string.</p>
    ///               </li>
    ///                <li>
    ///                   <p>The size of a message system attribute doesn't count towards the total size of a message.</p>
    ///               </li>
    ///             </ul>
    ///          </important>
    public let messageSystemAttributes: [String:MessageSystemAttributeValue]?

    public init (
        delaySeconds: Int = 0,
        id: String? = nil,
        messageAttributes: [String:MessageAttributeValue]? = nil,
        messageBody: String? = nil,
        messageDeduplicationId: String? = nil,
        messageGroupId: String? = nil,
        messageSystemAttributes: [String:MessageSystemAttributeValue]? = nil
    )
    {
        self.delaySeconds = delaySeconds
        self.id = id
        self.messageAttributes = messageAttributes
        self.messageBody = messageBody
        self.messageDeduplicationId = messageDeduplicationId
        self.messageGroupId = messageGroupId
        self.messageSystemAttributes = messageSystemAttributes
    }
}

extension SendMessageBatchResultEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "Id"
        case mD5OfMessageAttributes = "MD5OfMessageAttributes"
        case mD5OfMessageBody = "MD5OfMessageBody"
        case mD5OfMessageSystemAttributes = "MD5OfMessageSystemAttributes"
        case messageId = "MessageId"
        case sequenceNumber = "SequenceNumber"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let id = id {
            try container.encode(id, forKey: Key("Id"))
        }
        if let mD5OfMessageAttributes = mD5OfMessageAttributes {
            try container.encode(mD5OfMessageAttributes, forKey: Key("MD5OfMessageAttributes"))
        }
        if let mD5OfMessageBody = mD5OfMessageBody {
            try container.encode(mD5OfMessageBody, forKey: Key("MD5OfMessageBody"))
        }
        if let mD5OfMessageSystemAttributes = mD5OfMessageSystemAttributes {
            try container.encode(mD5OfMessageSystemAttributes, forKey: Key("MD5OfMessageSystemAttributes"))
        }
        if let messageId = messageId {
            try container.encode(messageId, forKey: Key("MessageId"))
        }
        if let sequenceNumber = sequenceNumber {
            try container.encode(sequenceNumber, forKey: Key("SequenceNumber"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let messageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let mD5OfMessageBodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mD5OfMessageBody)
        mD5OfMessageBody = mD5OfMessageBodyDecoded
        let mD5OfMessageAttributesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mD5OfMessageAttributes)
        mD5OfMessageAttributes = mD5OfMessageAttributesDecoded
        let mD5OfMessageSystemAttributesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mD5OfMessageSystemAttributes)
        mD5OfMessageSystemAttributes = mD5OfMessageSystemAttributesDecoded
        let sequenceNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sequenceNumber)
        sequenceNumber = sequenceNumberDecoded
    }
}

extension SendMessageBatchResultEntry: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SendMessageBatchResultEntry(id: \(String(describing: id)), mD5OfMessageAttributes: \(String(describing: mD5OfMessageAttributes)), mD5OfMessageBody: \(String(describing: mD5OfMessageBody)), mD5OfMessageSystemAttributes: \(String(describing: mD5OfMessageSystemAttributes)), messageId: \(String(describing: messageId)), sequenceNumber: \(String(describing: sequenceNumber)))"}
}

/// <p>Encloses a <code>MessageId</code> for a successfully-enqueued message in a <code>
///                <a>SendMessageBatch</a>.</code>
///          </p>
public struct SendMessageBatchResultEntry: Equatable {
    /// <p>An identifier for the message in this batch.</p>
    public let id: String?
    /// <p>An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see <a href="https://www.ietf.org/rfc/rfc1321.txt">RFC1321</a>.</p>
    public let mD5OfMessageAttributes: String?
    /// <p>An MD5 digest of the non-URL-encoded message body string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see <a href="https://www.ietf.org/rfc/rfc1321.txt">RFC1321</a>.</p>
    public let mD5OfMessageBody: String?
    /// <p>An MD5 digest of the non-URL-encoded message system attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see <a href="https://www.ietf.org/rfc/rfc1321.txt">RFC1321</a>.</p>
    public let mD5OfMessageSystemAttributes: String?
    /// <p>An identifier for the message.</p>
    public let messageId: String?
    /// <p>This parameter applies only to FIFO (first-in-first-out) queues.</p>
    ///          <p>The large, non-consecutive number that Amazon SQS assigns to each message.</p>
    ///          <p>The length of <code>SequenceNumber</code> is 128 bits. As <code>SequenceNumber</code> continues to increase for a particular <code>MessageGroupId</code>.</p>
    public let sequenceNumber: String?

    public init (
        id: String? = nil,
        mD5OfMessageAttributes: String? = nil,
        mD5OfMessageBody: String? = nil,
        mD5OfMessageSystemAttributes: String? = nil,
        messageId: String? = nil,
        sequenceNumber: String? = nil
    )
    {
        self.id = id
        self.mD5OfMessageAttributes = mD5OfMessageAttributes
        self.mD5OfMessageBody = mD5OfMessageBody
        self.mD5OfMessageSystemAttributes = mD5OfMessageSystemAttributes
        self.messageId = messageId
        self.sequenceNumber = sequenceNumber
    }
}

public struct SendMessageInputBodyMiddleware: Middleware {
    public let id: String = "SendMessageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<SendMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendMessageInput>
    public typealias MOutput = OperationOutput<SendMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendMessageOutputError>
}

extension SendMessageInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SendMessageInput(delaySeconds: \(String(describing: delaySeconds)), messageAttributes: \(String(describing: messageAttributes)), messageBody: \(String(describing: messageBody)), messageDeduplicationId: \(String(describing: messageDeduplicationId)), messageGroupId: \(String(describing: messageGroupId)), messageSystemAttributes: \(String(describing: messageSystemAttributes)), queueUrl: \(String(describing: queueUrl)))"}
}

extension SendMessageInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if delaySeconds != 0 {
            try container.encode(delaySeconds, forKey: Key("DelaySeconds"))
        }
        if let messageAttributes = messageAttributes {
            if !messageAttributes.isEmpty {
                for (index0, element0) in messageAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let stringKey0 = element0.key
                    let messageattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("MessageAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Name"))
                    try keyContainer0.encode(stringKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(messageattributevalueValue0, forKey: Key(""))
                }
            }
        }
        if let messageBody = messageBody {
            try container.encode(messageBody, forKey: Key("MessageBody"))
        }
        if let messageDeduplicationId = messageDeduplicationId {
            try container.encode(messageDeduplicationId, forKey: Key("MessageDeduplicationId"))
        }
        if let messageGroupId = messageGroupId {
            try container.encode(messageGroupId, forKey: Key("MessageGroupId"))
        }
        if let messageSystemAttributes = messageSystemAttributes {
            if !messageSystemAttributes.isEmpty {
                for (index0, element0) in messageSystemAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let messagesystemattributenameforsendsKey0 = element0.key
                    let messagesystemattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("MessageSystemAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Name"))
                    try keyContainer0.encode(messagesystemattributenameforsendsKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(messagesystemattributevalueValue0, forKey: Key(""))
                }
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        try container.encode("SendMessage", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct SendMessageInputHeadersMiddleware: Middleware {
    public let id: String = "SendMessageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<SendMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendMessageInput>
    public typealias MOutput = OperationOutput<SendMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendMessageOutputError>
}

public struct SendMessageInputQueryItemMiddleware: Middleware {
    public let id: String = "SendMessageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<SendMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendMessageInput>
    public typealias MOutput = OperationOutput<SendMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendMessageOutputError>
}

/// <p></p>
public struct SendMessageInput: Equatable {
    /// <p>
    ///           The length of time, in seconds, for which to delay a specific message. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive <code>DelaySeconds</code> value become available for processing after the delay period is finished.
    ///           If you don't specify a value, the default value for the queue applies.
    ///     </p>
    ///          <note>
    ///             <p>When you set <code>FifoQueue</code>, you can't set <code>DelaySeconds</code> per message. You can set this parameter only on a queue level.</p>
    ///          </note>
    public let delaySeconds: Int
    /// <p>Each message attribute consists of a <code>Name</code>, <code>Type</code>, and <code>Value</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes">Amazon SQS Message Attributes</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    public let messageAttributes: [String:MessageAttributeValue]?
    /// <p>The message to send. The minimum size is one character. The maximum size is 256 KB.</p>
    ///          <important>
    ///            <p>A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:</p>
    ///            <p>
    ///                <code>#x9</code> | <code>#xA</code> | <code>#xD</code> | <code>#x20</code> to <code>#xD7FF</code> | <code>#xE000</code> to <code>#xFFFD</code> | <code>#x10000</code> to <code>#x10FFFF</code>
    ///             </p>
    /// 	           <p>Any characters not included in this list will be rejected. For more information, see the <a href="http://www.w3.org/TR/REC-xml/#charsets">W3C specification for characters</a>.</p>
    ///          </important>
    public let messageBody: String?
    /// <p>This parameter applies only to FIFO (first-in-first-out) queues.</p>
    ///          <p>The token used for deduplication of sent messages. If a message with a particular <code>MessageDeduplicationId</code> is sent successfully, any messages sent with the same <code>MessageDeduplicationId</code>
    ///           are accepted successfully but aren't delivered during the 5-minute deduplication interval. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html">
    ///           Exactly-once processing</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///          <ul>
    ///             <li>
    ///               <p>Every message must have a unique <code>MessageDeduplicationId</code>,</p>
    ///               <ul>
    ///                   <li>
    ///                       <p>You may provide a <code>MessageDeduplicationId</code> explicitly.</p>
    ///                   </li>
    ///                   <li>
    ///                       <p>If you aren't able to provide a <code>MessageDeduplicationId</code> and you enable <code>ContentBasedDeduplication</code> for your queue,
    ///                           Amazon SQS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using the body of the message (but not the attributes of the message).
    ///                       </p>
    ///                   </li>
    ///                   <li>
    ///                       <p>If you don't provide a <code>MessageDeduplicationId</code> and the queue doesn't have <code>ContentBasedDeduplication</code> set,
    ///                           the action fails with an error.</p>
    ///                   </li>
    ///                   <li>
    ///                       <p>If the queue has <code>ContentBasedDeduplication</code> set, your <code>MessageDeduplicationId</code> overrides the generated one.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///               <p>When <code>ContentBasedDeduplication</code> is in effect, messages with identical content sent within the deduplication interval are treated as duplicates
    ///                   and only one copy of the message is delivered.</p>
    ///             </li>
    ///             <li>
    ///               <p>If you send one message with <code>ContentBasedDeduplication</code> enabled and then another message with a <code>MessageDeduplicationId</code> that is the same
    ///                   as the one generated for the first <code>MessageDeduplicationId</code>, the two messages are treated as duplicates and only one copy of the message is delivered.
    ///               </p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>The <code>MessageDeduplicationId</code> is available to the consumer of the
    ///                 message (this can be useful for troubleshooting delivery issues).</p>
    ///             <p>If a message is sent successfully but the acknowledgement is lost and the message is resent with the same
    ///               <code>MessageDeduplicationId</code> after the deduplication interval, Amazon SQS can't detect duplicate messages.</p>
    ///             <p>Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted.</p>
    ///          </note>
    ///          <p>The maximum length of <code>MessageDeduplicationId</code> is 128 characters. <code>MessageDeduplicationId</code> can contain alphanumeric characters (<code>a-z</code>, <code>A-Z</code>, <code>0-9</code>) and
    ///           punctuation (<code>!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~</code>).</p>
    ///          <p>For best practices of using <code>MessageDeduplicationId</code>, see
    ///           <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html">Using the MessageDeduplicationId Property</a>
    ///           in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    public let messageDeduplicationId: String?
    /// <p>This parameter applies only to FIFO (first-in-first-out) queues.</p>
    ///          <p>The tag that specifies that a message belongs to a specific message group. Messages
    ///             that belong to the same message group are processed in a FIFO manner (however,
    ///             messages in different message groups might be processed out of order). To interleave
    ///             multiple ordered streams within a single queue, use <code>MessageGroupId</code> values
    ///             (for example, session data for multiple users). In this scenario, multiple consumers can
    ///             process the queue, but the session data of each user is processed in a FIFO
    ///             fashion.</p>
    ///          <ul>
    ///             <li>
    ///                <p>You must associate a non-empty <code>MessageGroupId</code> with a message. If you don't provide a <code>MessageGroupId</code>, the action fails.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ReceiveMessage</code> might return messages with multiple <code>MessageGroupId</code> values. For each <code>MessageGroupId</code>, the messages are sorted by time sent. The caller can't
    ///               specify a <code>MessageGroupId</code>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>The length of <code>MessageGroupId</code> is 128 characters. Valid values: alphanumeric characters and punctuation <code>(!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~)</code>.</p>
    ///          <p>For best practices of using <code>MessageGroupId</code>, see
    ///           <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagegroupid-property.html">Using the MessageGroupId Property</a>
    ///           in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///          <important>
    ///             <p>
    ///                <code>MessageGroupId</code> is required for FIFO queues. You can't use it for Standard queues.</p>
    ///          </important>
    public let messageGroupId: String?
    /// <p>The message system attribute to send. Each message system attribute consists of a <code>Name</code>, <code>Type</code>, and <code>Value</code>.</p>
    ///          <important>
    ///             <ul>
    ///                <li>
    ///                   <p>Currently, the only supported message system attribute is <code>AWSTraceHeader</code>.
    ///                     Its type must be <code>String</code> and its value must be a correctly formatted
    ///                     AWS X-Ray trace header string.</p>
    ///               </li>
    ///                <li>
    ///                   <p>The size of a message system attribute doesn't count towards the total size of a message.</p>
    ///               </li>
    ///             </ul>
    ///          </important>
    public let messageSystemAttributes: [String:MessageSystemAttributeValue]?
    /// <p>The URL of the Amazon SQS queue to which a message is sent.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueUrl: String?

    public init (
        delaySeconds: Int = 0,
        messageAttributes: [String:MessageAttributeValue]? = nil,
        messageBody: String? = nil,
        messageDeduplicationId: String? = nil,
        messageGroupId: String? = nil,
        messageSystemAttributes: [String:MessageSystemAttributeValue]? = nil,
        queueUrl: String? = nil
    )
    {
        self.delaySeconds = delaySeconds
        self.messageAttributes = messageAttributes
        self.messageBody = messageBody
        self.messageDeduplicationId = messageDeduplicationId
        self.messageGroupId = messageGroupId
        self.messageSystemAttributes = messageSystemAttributes
        self.queueUrl = queueUrl
    }
}

extension SendMessageOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SendMessageOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidMessageContents" : self = .invalidMessageContents(try InvalidMessageContents(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperation(try UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendMessageOutputError: Equatable {
    case invalidMessageContents(InvalidMessageContents)
    case unsupportedOperation(UnsupportedOperation)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendMessageOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SendMessageOutputResponse(mD5OfMessageAttributes: \(String(describing: mD5OfMessageAttributes)), mD5OfMessageBody: \(String(describing: mD5OfMessageBody)), mD5OfMessageSystemAttributes: \(String(describing: mD5OfMessageSystemAttributes)), messageId: \(String(describing: messageId)), sequenceNumber: \(String(describing: sequenceNumber)))"}
}

extension SendMessageOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: SendMessageOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.mD5OfMessageAttributes = output.mD5OfMessageAttributes
            self.mD5OfMessageBody = output.mD5OfMessageBody
            self.mD5OfMessageSystemAttributes = output.mD5OfMessageSystemAttributes
            self.messageId = output.messageId
            self.sequenceNumber = output.sequenceNumber
        } else {
            self.mD5OfMessageAttributes = nil
            self.mD5OfMessageBody = nil
            self.mD5OfMessageSystemAttributes = nil
            self.messageId = nil
            self.sequenceNumber = nil
        }
    }
}

/// <p>The <code>MD5OfMessageBody</code> and <code>MessageId</code> elements.</p>
public struct SendMessageOutputResponse: Equatable {
    /// <p>An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see <a href="https://www.ietf.org/rfc/rfc1321.txt">RFC1321</a>.</p>
    public let mD5OfMessageAttributes: String?
    /// <p>An MD5 digest of the non-URL-encoded message body string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see <a href="https://www.ietf.org/rfc/rfc1321.txt">RFC1321</a>.</p>
    public let mD5OfMessageBody: String?
    /// <p>An MD5 digest of the non-URL-encoded message system attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest.</p>
    public let mD5OfMessageSystemAttributes: String?
    /// <p>An attribute containing the <code>MessageId</code> of the message sent to the queue. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-message-identifiers.html">Queue and Message Identifiers</a>
    ///             in the <i>Amazon Simple Queue Service Developer Guide</i>.
    ///     </p>
    public let messageId: String?
    /// <p>This parameter applies only to FIFO (first-in-first-out) queues.</p>
    ///          <p>The large, non-consecutive number that Amazon SQS assigns to each message.</p>
    ///          <p>The length of <code>SequenceNumber</code> is 128 bits. <code>SequenceNumber</code> continues to increase for a particular <code>MessageGroupId</code>.</p>
    public let sequenceNumber: String?

    public init (
        mD5OfMessageAttributes: String? = nil,
        mD5OfMessageBody: String? = nil,
        mD5OfMessageSystemAttributes: String? = nil,
        messageId: String? = nil,
        sequenceNumber: String? = nil
    )
    {
        self.mD5OfMessageAttributes = mD5OfMessageAttributes
        self.mD5OfMessageBody = mD5OfMessageBody
        self.mD5OfMessageSystemAttributes = mD5OfMessageSystemAttributes
        self.messageId = messageId
        self.sequenceNumber = sequenceNumber
    }
}

struct SendMessageOutputResponseBody: Equatable {
    public let mD5OfMessageBody: String?
    public let mD5OfMessageAttributes: String?
    public let mD5OfMessageSystemAttributes: String?
    public let messageId: String?
    public let sequenceNumber: String?
}

extension SendMessageOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case mD5OfMessageAttributes = "MD5OfMessageAttributes"
        case mD5OfMessageBody = "MD5OfMessageBody"
        case mD5OfMessageSystemAttributes = "MD5OfMessageSystemAttributes"
        case messageId = "MessageId"
        case sequenceNumber = "SequenceNumber"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("SendMessageResult"))
        let mD5OfMessageBodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mD5OfMessageBody)
        mD5OfMessageBody = mD5OfMessageBodyDecoded
        let mD5OfMessageAttributesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mD5OfMessageAttributes)
        mD5OfMessageAttributes = mD5OfMessageAttributesDecoded
        let mD5OfMessageSystemAttributesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mD5OfMessageSystemAttributes)
        mD5OfMessageSystemAttributes = mD5OfMessageSystemAttributesDecoded
        let messageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let sequenceNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sequenceNumber)
        sequenceNumber = sequenceNumberDecoded
    }
}

public struct SetQueueAttributesInputBodyMiddleware: Middleware {
    public let id: String = "SetQueueAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetQueueAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<SetQueueAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetQueueAttributesInput>
    public typealias MOutput = OperationOutput<SetQueueAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetQueueAttributesOutputError>
}

extension SetQueueAttributesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SetQueueAttributesInput(attributes: \(String(describing: attributes)), queueUrl: \(String(describing: queueUrl)))"}
}

extension SetQueueAttributesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let attributes = attributes {
            if !attributes.isEmpty {
                for (index0, element0) in attributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let queueattributenameKey0 = element0.key
                    let stringValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Attribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Name"))
                    try keyContainer0.encode(queueattributenameKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(stringValue0, forKey: Key(""))
                }
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        try container.encode("SetQueueAttributes", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct SetQueueAttributesInputHeadersMiddleware: Middleware {
    public let id: String = "SetQueueAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetQueueAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<SetQueueAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetQueueAttributesInput>
    public typealias MOutput = OperationOutput<SetQueueAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetQueueAttributesOutputError>
}

public struct SetQueueAttributesInputQueryItemMiddleware: Middleware {
    public let id: String = "SetQueueAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetQueueAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<SetQueueAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetQueueAttributesInput>
    public typealias MOutput = OperationOutput<SetQueueAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetQueueAttributesOutputError>
}

/// <p></p>
public struct SetQueueAttributesInput: Equatable {
    /// <p>A map of attributes to set.</p>
    ///          <p>The following lists the names, descriptions, and values of the special request parameters that the <code>SetQueueAttributes</code> action uses:</p>
    ///          <ul>
    ///             <li>
    ///               <p>
    ///                   <code>DelaySeconds</code> – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 (15 minutes). Default: 0.
    ///               </p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>MaximumMessageSize</code> – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) up to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).
    ///               </p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>MessageRetentionPeriod</code> – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer representing seconds, from 60 (1 minute) to 1,209,600 (14 days). Default: 345,600 (4 days).
    ///               </p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>Policy</code> – The queue's policy. A valid AWS policy. For more information about policy structure, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html">Overview of AWS IAM Policies</a>
    ///                   in the <i>Amazon IAM User Guide</i>.
    ///               </p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>ReceiveMessageWaitTimeSeconds</code> – The length of time, in seconds, for which a <code>
    ///                      <a>ReceiveMessage</a>
    ///                   </code> action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0.
    ///               </p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>RedrivePolicy</code> – The string that includes the parameters for the dead-letter queue functionality
    ///     of the source queue as a JSON object. For more information about the redrive policy and dead-letter queues, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">Using Amazon SQS Dead-Letter Queues</a>
    ///     in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///                           <ul>
    ///                   <li>
    ///                     <p>
    ///                         <code>deadLetterTargetArn</code> – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of <code>maxReceiveCount</code> is exceeded.</p>
    ///                   </li>
    ///                   <li>
    ///                     <p>
    ///                         <code>maxReceiveCount</code> – The number of times a message is delivered to the source queue before being moved to the dead-letter queue.
    ///                         When the <code>ReceiveCount</code> for a message exceeds the <code>maxReceiveCount</code> for a queue, Amazon SQS moves the message to the dead-letter-queue.</p>
    ///                   </li>
    ///                </ul>
    ///               <note>
    ///                   <p>The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.</p>
    ///               </note>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>VisibilityTimeout</code> – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout,
    ///                   see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility Timeout</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html">server-side-encryption</a>:</p>
    ///          <ul>
    ///             <li>
    ///               <p>
    ///                   <code>KmsMasterKeyId</code> – The ID of an AWS-managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms">Key Terms</a>.
    ///                   While the alias of the AWS-managed CMK for Amazon SQS is always <code>alias/aws/sqs</code>, the alias of a custom CMK can, for example, be <code>alias/<i>MyAlias</i>
    ///                   </code>.
    ///                   For more examples, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a> in the <i>AWS Key Management Service API Reference</i>.
    ///               </p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>KmsDataKeyReusePeriodSeconds</code> – The length of time, in seconds, for which Amazon SQS can reuse a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys">data key</a> to encrypt
    ///                   or decrypt messages before calling AWS KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security
    ///                   but results in more calls to KMS which might incur charges after Free Tier. For more information, see
    ///                   <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work">How Does the Data Key Reuse Period Work?</a>.
    ///               </p>
    ///             </li>
    ///          </ul>
    ///
    ///
    ///          <p>The following attribute applies only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO (first-in-first-out) queues</a>:</p>
    ///          <ul>
    ///             <li>
    ///               <p>
    ///                   <code>ContentBasedDeduplication</code> – Enables content-based deduplication. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html">Exactly-once processing</a> in the
    ///                   <i>Amazon Simple Queue Service Developer Guide</i>. Note the following:
    ///               </p>
    ///               <ul>
    ///                   <li>
    ///                       <p>Every message must have a unique <code>MessageDeduplicationId</code>.</p>
    ///                       <ul>
    ///                         <li>
    ///                               <p>You may provide a <code>MessageDeduplicationId</code> explicitly.</p>
    ///                           </li>
    ///                         <li>
    ///                               <p>If you aren't able to provide a <code>MessageDeduplicationId</code> and you enable <code>ContentBasedDeduplication</code> for your queue,
    ///                                   Amazon SQS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using the body of the message (but not the attributes of the message).
    ///                               </p>
    ///                           </li>
    ///                         <li>
    ///                               <p>If you don't provide a <code>MessageDeduplicationId</code> and the queue doesn't have <code>ContentBasedDeduplication</code> set,
    ///                                   the action fails with an error.</p>
    ///                           </li>
    ///                         <li>
    ///                               <p>If the queue has <code>ContentBasedDeduplication</code> set, your <code>MessageDeduplicationId</code> overrides the generated one.</p>
    ///                           </li>
    ///                      </ul>
    ///                   </li>
    ///                   <li>
    ///                       <p>When <code>ContentBasedDeduplication</code> is in effect, messages with identical content sent within the deduplication interval are treated as duplicates
    ///                           and only one copy of the message is delivered.</p>
    ///                   </li>
    ///                   <li>
    ///                       <p>If you send one message with <code>ContentBasedDeduplication</code> enabled and then another message with a <code>MessageDeduplicationId</code> that is the same
    ///                           as the one generated for the first <code>MessageDeduplicationId</code>, the two messages are treated as duplicates and only one copy of the message is delivered.
    ///                       </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    ///
    ///
    ///          <p>The following attributes apply only to
    /// <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html">high throughput
    /// for FIFO queues</a>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DeduplicationScope</code> – Specifies whether message deduplication occurs at the
    ///       message group or queue level. Valid values are <code>messageGroup</code> and <code>queue</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FifoThroughputLimit</code> – Specifies whether the FIFO queue throughput
    ///       quota applies to the entire queue or per message group. Valid values are <code>perQueue</code> and <code>perMessageGroupId</code>.
    ///       The <code>perMessageGroupId</code> value is allowed only when the value for <code>DeduplicationScope</code> is <code>messageGroup</code>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>To enable high throughput for FIFO queues, do the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Set <code>DeduplicationScope</code> to <code>messageGroup</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Set <code>FifoThroughputLimit</code> to <code>perMessageGroupId</code>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If you set these attributes to anything other than the values shown for enabling high
    ///   throughput, normal throughput is in effect and deduplication occurs as specified.</p>
    ///          <p>For information on throughput quotas,
    ///   see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html">Quotas related to messages</a>
    ///   in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
    public let attributes: [String:String]?
    /// <p>The URL of the Amazon SQS queue whose attributes are set.</p>
    ///          <p>Queue URLs and names are case-sensitive.</p>
    public let queueUrl: String?

    public init (
        attributes: [String:String]? = nil,
        queueUrl: String? = nil
    )
    {
        self.attributes = attributes
        self.queueUrl = queueUrl
    }
}

extension SetQueueAttributesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetQueueAttributesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidAttributeName" : self = .invalidAttributeName(try InvalidAttributeName(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetQueueAttributesOutputError: Equatable {
    case invalidAttributeName(InvalidAttributeName)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetQueueAttributesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SetQueueAttributesOutputResponse()"}
}

extension SetQueueAttributesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct SetQueueAttributesOutputResponse: Equatable {

    public init() {}
}

struct SetQueueAttributesOutputResponseBody: Equatable {
}

extension SetQueueAttributesOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct TagQueueInputBodyMiddleware: Middleware {
    public let id: String = "TagQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<TagQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagQueueInput>
    public typealias MOutput = OperationOutput<TagQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagQueueOutputError>
}

extension TagQueueInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagQueueInput(queueUrl: \(String(describing: queueUrl)), tags: \(String(describing: tags)))"}
}

extension TagQueueInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, element0) in tags.sorted(by: { $0.key < $1.key }).enumerated() {
                    let tagkeyKey0 = element0.key
                    let tagvalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tag.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Key"))
                    try keyContainer0.encode(tagkeyKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(tagvalueValue0, forKey: Key(""))
                }
            }
        }
        try container.encode("TagQueue", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct TagQueueInputHeadersMiddleware: Middleware {
    public let id: String = "TagQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<TagQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagQueueInput>
    public typealias MOutput = OperationOutput<TagQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagQueueOutputError>
}

public struct TagQueueInputQueryItemMiddleware: Middleware {
    public let id: String = "TagQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<TagQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagQueueInput>
    public typealias MOutput = OperationOutput<TagQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagQueueOutputError>
}

public struct TagQueueInput: Equatable {
    /// <p>The URL of the queue.</p>
    public let queueUrl: String?
    /// <p>The list of tags to be added to the specified queue.</p>
    public let tags: [String:String]?

    public init (
        queueUrl: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.queueUrl = queueUrl
        self.tags = tags
    }
}

extension TagQueueOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TagQueueOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagQueueOutputError: Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension TagQueueOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagQueueOutputResponse()"}
}

extension TagQueueOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct TagQueueOutputResponse: Equatable {

    public init() {}
}

struct TagQueueOutputResponseBody: Equatable {
}

extension TagQueueOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension TooManyEntriesInBatchRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TooManyEntriesInBatchRequest()"}
}

extension TooManyEntriesInBatchRequest: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The batch request contains more entries than permissible.</p>
public struct TooManyEntriesInBatchRequest: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

extension UnsupportedOperation: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UnsupportedOperation()"}
}

extension UnsupportedOperation: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Error code 400. Unsupported operation.</p>
public struct UnsupportedOperation: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

public struct UntagQueueInputBodyMiddleware: Middleware {
    public let id: String = "UntagQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagQueueInput>
    public typealias MOutput = OperationOutput<UntagQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagQueueOutputError>
}

extension UntagQueueInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagQueueInput(queueUrl: \(String(describing: queueUrl)), tagKeys: \(String(describing: tagKeys)))"}
}

extension UntagQueueInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                for (index0, tagkey0) in tagKeys.enumerated() {
                    var tagKeysContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagKey.\(index0.advanced(by: 1))"))
                    try tagKeysContainer0.encode(tagkey0, forKey: Key(""))
                }
            }
        }
        try container.encode("UntagQueue", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}

public struct UntagQueueInputHeadersMiddleware: Middleware {
    public let id: String = "UntagQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagQueueInput>
    public typealias MOutput = OperationOutput<UntagQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagQueueOutputError>
}

public struct UntagQueueInputQueryItemMiddleware: Middleware {
    public let id: String = "UntagQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagQueueInput>
    public typealias MOutput = OperationOutput<UntagQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagQueueOutputError>
}

public struct UntagQueueInput: Equatable {
    /// <p>The URL of the queue.</p>
    public let queueUrl: String?
    /// <p>The list of tags to be removed from the specified queue.</p>
    public let tagKeys: [String]?

    public init (
        queueUrl: String? = nil,
        tagKeys: [String]? = nil
    )
    {
        self.queueUrl = queueUrl
        self.tagKeys = tagKeys
    }
}

extension UntagQueueOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UntagQueueOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagQueueOutputError: Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagQueueOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagQueueOutputResponse()"}
}

extension UntagQueueOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UntagQueueOutputResponse: Equatable {

    public init() {}
}

struct UntagQueueOutputResponseBody: Equatable {
}

extension UntagQueueOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}
