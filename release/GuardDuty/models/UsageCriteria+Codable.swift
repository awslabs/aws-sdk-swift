// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UsageCriteria: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountIds = "accountIds"
        case dataSources = "dataSources"
        case resources = "resources"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountids0 in accountIds {
                try accountIdsContainer.encode(accountids0)
            }
        }
        if let dataSources = dataSources {
            var dataSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataSources)
            for datasourcelist0 in dataSources {
                try dataSourcesContainer.encode(datasourcelist0.rawValue)
            }
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for resourcelist0 in resources {
                try resourcesContainer.encode(resourcelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .accountIds)
        var accountIdsDecoded0:[String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [String]()
            for string0 in accountIdsContainer {
                accountIdsDecoded0?.append(string0)
            }
        }
        accountIds = accountIdsDecoded0
        let dataSourcesContainer = try containerValues.decodeIfPresent([DataSource].self, forKey: .dataSources)
        var dataSourcesDecoded0:[DataSource]? = nil
        if let dataSourcesContainer = dataSourcesContainer {
            dataSourcesDecoded0 = [DataSource]()
            for string0 in dataSourcesContainer {
                dataSourcesDecoded0?.append(string0)
            }
        }
        dataSources = dataSourcesDecoded0
        let resourcesContainer = try containerValues.decodeIfPresent([String].self, forKey: .resources)
        var resourcesDecoded0:[String]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [String]()
            for string0 in resourcesContainer {
                resourcesDecoded0?.append(string0)
            }
        }
        resources = resourcesDecoded0
    }
}
