// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ThreatIntelligenceDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case threatListName = "threatListName"
        case threatNames = "threatNames"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let threatListName = threatListName {
            try encodeContainer.encode(threatListName, forKey: .threatListName)
        }
        if let threatNames = threatNames {
            var threatNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatNames)
            for threatnames0 in threatNames {
                try threatNamesContainer.encode(threatnames0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let threatListNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .threatListName)
        threatListName = threatListNameDecoded
        let threatNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .threatNames)
        var threatNamesDecoded0:[String]? = nil
        if let threatNamesContainer = threatNamesContainer {
            threatNamesDecoded0 = [String]()
            for string0 in threatNamesContainer {
                threatNamesDecoded0?.append(string0)
            }
        }
        threatNames = threatNamesDecoded0
    }
}
