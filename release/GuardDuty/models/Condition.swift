// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains information about the condition.</p>
public struct Condition: Equatable {
    /// <p>Represents the <i>equal</i> condition to be applied to a single field when
    ///       querying for findings.</p>
    @available(*, deprecated)
    public let eq: [String]?
    /// <p>Represents an <i>equal</i>
    ///             <b></b> condition to be applied to
    ///       a single field when querying for findings.</p>
    public let equals: [String]?
    /// <p>Represents a <i>greater than</i> condition to be applied to a single field
    ///       when querying for findings.</p>
    public let greaterThan: Int
    /// <p>Represents a <i>greater than or equal</i> condition to be applied to a
    ///       single field when querying for findings.</p>
    public let greaterThanOrEqual: Int
    /// <p>Represents a <i>greater than</i> condition to be applied to a single field
    ///       when querying for findings.</p>
    @available(*, deprecated)
    public let gt: Int
    /// <p>Represents a <i>greater than or equal</i> condition to be applied to a
    ///       single field when querying for findings.</p>
    @available(*, deprecated)
    public let gte: Int
    /// <p>Represents a <i>less than</i> condition to be applied to a single field when
    ///       querying for findings.</p>
    public let lessThan: Int
    /// <p>Represents a <i>less than or equal</i> condition to be applied to a single
    ///       field when querying for findings.</p>
    public let lessThanOrEqual: Int
    /// <p>Represents a <i>less than</i> condition to be applied to a single field when
    ///       querying for findings.</p>
    @available(*, deprecated)
    public let lt: Int
    /// <p>Represents a <i>less than or equal</i> condition to be applied to a single
    ///       field when querying for findings.</p>
    @available(*, deprecated)
    public let lte: Int
    /// <p>Represents the <i>not equal</i> condition to be applied to a single field
    ///       when querying for findings.</p>
    @available(*, deprecated)
    public let neq: [String]?
    /// <p>Represents a <i>not equal</i>
    ///             <b></b> condition to be applied
    ///       to a single field when querying for findings.</p>
    public let notEquals: [String]?

    public init (
        eq: [String]? = nil,
        equals: [String]? = nil,
        greaterThan: Int = 0,
        greaterThanOrEqual: Int = 0,
        gt: Int = 0,
        gte: Int = 0,
        lessThan: Int = 0,
        lessThanOrEqual: Int = 0,
        lt: Int = 0,
        lte: Int = 0,
        neq: [String]? = nil,
        notEquals: [String]? = nil
    )
    {
        self.eq = eq
        self.equals = equals
        self.greaterThan = greaterThan
        self.greaterThanOrEqual = greaterThanOrEqual
        self.gt = gt
        self.gte = gte
        self.lessThan = lessThan
        self.lessThanOrEqual = lessThanOrEqual
        self.lt = lt
        self.lte = lte
        self.neq = neq
        self.notEquals = notEquals
    }
}
