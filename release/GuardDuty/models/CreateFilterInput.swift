// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateFilterInput: Equatable {
    /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
    public let action: FilterAction?
    /// <p>The idempotency token for the create request.</p>
    public var clientToken: String?
    /// <p>The description of the filter.</p>
    public let description: String?
    /// <p>The ID of the detector belonging to the GuardDuty account that you want to create a filter
    ///       for.</p>
    public let detectorId: String?
    /// <p>Represents the criteria to be used in the filter for querying findings.</p>
    ///          <p>You can only use the following attributes to query findings:</p>
    ///          <ul>
    ///             <li>
    ///                <p>accountId</p>
    ///             </li>
    ///             <li>
    ///                <p>region</p>
    ///             </li>
    ///             <li>
    ///                <p>confidence</p>
    ///             </li>
    ///             <li>
    ///                <p>id</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.accessKeyDetails.accessKeyId</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.accessKeyDetails.principalId</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.accessKeyDetails.userName</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.accessKeyDetails.userType</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.instanceDetails.iamInstanceProfile.id</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.instanceDetails.imageId</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.instanceDetails.instanceId</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.instanceDetails.outpostArn</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.instanceDetails.networkInterfaces.ipv6Addresses</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.instanceDetails.networkInterfaces.publicDnsName</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.instanceDetails.networkInterfaces.publicIp</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.instanceDetails.networkInterfaces.securityGroups.groupId</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.instanceDetails.networkInterfaces.securityGroups.groupName</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.instanceDetails.networkInterfaces.subnetId</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.instanceDetails.networkInterfaces.vpcId</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.instanceDetails.tags.key</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.instanceDetails.tags.value</p>
    ///             </li>
    ///             <li>
    ///                <p>resource.resourceType</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.actionType</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.awsApiCallAction.api</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.awsApiCallAction.callerType</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.awsApiCallAction.errorCode</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.awsApiCallAction.remoteIpDetails.city.cityName</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.awsApiCallAction.remoteIpDetails.country.countryName</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.awsApiCallAction.remoteIpDetails.ipAddressV4</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.awsApiCallAction.remoteIpDetails.organization.asn</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.awsApiCallAction.serviceName</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.dnsRequestAction.domain</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.networkConnectionAction.blocked</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.networkConnectionAction.connectionDirection</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.networkConnectionAction.localPortDetails.port</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.networkConnectionAction.protocol</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.networkConnectionAction.localIpDetails.ipAddressV4</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.networkConnectionAction.remoteIpDetails.city.cityName</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.networkConnectionAction.remoteIpDetails.country.countryName</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.networkConnectionAction.remoteIpDetails.ipAddressV4</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.networkConnectionAction.remoteIpDetails.organization.asn</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg</p>
    ///             </li>
    ///             <li>
    ///                <p>service.action.networkConnectionAction.remotePortDetails.port</p>
    ///             </li>
    ///             <li>
    ///                <p>service.additionalInfo.threatListName</p>
    ///             </li>
    ///             <li>
    ///                <p>service.archived</p>
    ///                <p>When this attribute is set to TRUE, only archived findings are listed. When it's set
    ///           to FALSE, only unarchived findings are listed. When this attribute is not set, all
    ///           existing findings are listed.</p>
    ///             </li>
    ///             <li>
    ///                <p>service.resourceRole</p>
    ///             </li>
    ///             <li>
    ///                <p>severity</p>
    ///             </li>
    ///             <li>
    ///                <p>type</p>
    ///             </li>
    ///             <li>
    ///                <p>updatedAt</p>
    ///                <p>Type: ISO 8601 string format: YYYY-MM-DDTHH:MM:SS.SSSZ or YYYY-MM-DDTHH:MM:SSZ
    ///           depending on whether the value contains milliseconds.</p>
    ///             </li>
    ///          </ul>
    public let findingCriteria: FindingCriteria?
    /// <p>The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.</p>
    public let name: String?
    /// <p>Specifies the position of the filter in the list of current filters. Also specifies the
    ///       order in which this filter is applied to the findings.</p>
    public let rank: Int
    /// <p>The tags to be added to a new filter resource.</p>
    public let tags: [String:String]?

    public init (
        action: FilterAction? = nil,
        clientToken: String? = nil,
        description: String? = nil,
        detectorId: String? = nil,
        findingCriteria: FindingCriteria? = nil,
        name: String? = nil,
        rank: Int = 0,
        tags: [String:String]? = nil
    )
    {
        self.action = action
        self.clientToken = clientToken
        self.description = description
        self.detectorId = detectorId
        self.findingCriteria = findingCriteria
        self.name = name
        self.rank = rank
        self.tags = tags
    }
}
