// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UsageStatistics: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case sumByAccount = "sumByAccount"
        case sumByDataSource = "sumByDataSource"
        case sumByResource = "sumByResource"
        case topResources = "topResources"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sumByAccount = sumByAccount {
            var sumByAccountContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sumByAccount)
            for usageaccountresultlist0 in sumByAccount {
                try sumByAccountContainer.encode(usageaccountresultlist0)
            }
        }
        if let sumByDataSource = sumByDataSource {
            var sumByDataSourceContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sumByDataSource)
            for usagedatasourceresultlist0 in sumByDataSource {
                try sumByDataSourceContainer.encode(usagedatasourceresultlist0)
            }
        }
        if let sumByResource = sumByResource {
            var sumByResourceContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sumByResource)
            for usageresourceresultlist0 in sumByResource {
                try sumByResourceContainer.encode(usageresourceresultlist0)
            }
        }
        if let topResources = topResources {
            var topResourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topResources)
            for usageresourceresultlist0 in topResources {
                try topResourcesContainer.encode(usageresourceresultlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sumByAccountContainer = try containerValues.decodeIfPresent([UsageAccountResult].self, forKey: .sumByAccount)
        var sumByAccountDecoded0:[UsageAccountResult]? = nil
        if let sumByAccountContainer = sumByAccountContainer {
            sumByAccountDecoded0 = [UsageAccountResult]()
            for structure0 in sumByAccountContainer {
                sumByAccountDecoded0?.append(structure0)
            }
        }
        sumByAccount = sumByAccountDecoded0
        let sumByDataSourceContainer = try containerValues.decodeIfPresent([UsageDataSourceResult].self, forKey: .sumByDataSource)
        var sumByDataSourceDecoded0:[UsageDataSourceResult]? = nil
        if let sumByDataSourceContainer = sumByDataSourceContainer {
            sumByDataSourceDecoded0 = [UsageDataSourceResult]()
            for structure0 in sumByDataSourceContainer {
                sumByDataSourceDecoded0?.append(structure0)
            }
        }
        sumByDataSource = sumByDataSourceDecoded0
        let sumByResourceContainer = try containerValues.decodeIfPresent([UsageResourceResult].self, forKey: .sumByResource)
        var sumByResourceDecoded0:[UsageResourceResult]? = nil
        if let sumByResourceContainer = sumByResourceContainer {
            sumByResourceDecoded0 = [UsageResourceResult]()
            for structure0 in sumByResourceContainer {
                sumByResourceDecoded0?.append(structure0)
            }
        }
        sumByResource = sumByResourceDecoded0
        let topResourcesContainer = try containerValues.decodeIfPresent([UsageResourceResult].self, forKey: .topResources)
        var topResourcesDecoded0:[UsageResourceResult]? = nil
        if let topResourcesContainer = topResourcesContainer {
            topResourcesDecoded0 = [UsageResourceResult]()
            for structure0 in topResourcesContainer {
                topResourcesDecoded0?.append(structure0)
            }
        }
        topResources = topResourcesDecoded0
    }
}
