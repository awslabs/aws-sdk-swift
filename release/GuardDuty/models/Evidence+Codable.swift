// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Evidence: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case threatIntelligenceDetails = "threatIntelligenceDetails"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let threatIntelligenceDetails = threatIntelligenceDetails {
            var threatIntelligenceDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelligenceDetails)
            for threatintelligencedetails0 in threatIntelligenceDetails {
                try threatIntelligenceDetailsContainer.encode(threatintelligencedetails0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let threatIntelligenceDetailsContainer = try containerValues.decodeIfPresent([ThreatIntelligenceDetail].self, forKey: .threatIntelligenceDetails)
        var threatIntelligenceDetailsDecoded0:[ThreatIntelligenceDetail]? = nil
        if let threatIntelligenceDetailsContainer = threatIntelligenceDetailsContainer {
            threatIntelligenceDetailsDecoded0 = [ThreatIntelligenceDetail]()
            for structure0 in threatIntelligenceDetailsContainer {
                threatIntelligenceDetailsDecoded0?.append(structure0)
            }
        }
        threatIntelligenceDetails = threatIntelligenceDetailsDecoded0
    }
}
