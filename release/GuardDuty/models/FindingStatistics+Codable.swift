// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FindingStatistics: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case countBySeverity = "countBySeverity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let countBySeverity = countBySeverity {
            var countBySeverityContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .countBySeverity)
            for (dictKey0, countbyseverity0) in countBySeverity {
                try countBySeverityContainer.encode(countbyseverity0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countBySeverityContainer = try containerValues.decodeIfPresent([String:Int].self, forKey: .countBySeverity)
        var countBySeverityDecoded0: [String:Int]? = nil
        if let countBySeverityContainer = countBySeverityContainer {
            countBySeverityDecoded0 = [String:Int]()
            for (key0, integer0) in countBySeverityContainer {
                countBySeverityDecoded0?[key0] = integer0
            }
        }
        countBySeverity = countBySeverityDecoded0
    }
}
