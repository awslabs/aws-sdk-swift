// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class GuardDutyClient {
    let client: SdkHttpClient
    let config: GuardDutyClientConfiguration
    let serviceName = "GuardDuty"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: GuardDutyClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class GuardDutyClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> GuardDutyClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try GuardDutyClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension GuardDutyClient: GuardDutyClientProtocol {
    /// <p>Accepts the invitation to be monitored by a GuardDuty administrator account.</p>
    public func acceptInvitation(input: AcceptInvitationInput, completion: @escaping (SdkResult<AcceptInvitationOutputResponse, AcceptInvitationOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/master"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "acceptInvitation")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AcceptInvitationInput, AcceptInvitationOutputResponse, AcceptInvitationOutputError>(id: "acceptInvitation")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AcceptInvitationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AcceptInvitationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AcceptInvitationInput, AcceptInvitationOutputResponse, AcceptInvitationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AcceptInvitationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Archives GuardDuty findings that are specified by the list of finding IDs.</p>
    ///          <note>
    ///             <p>Only the administrator account can archive findings. Member accounts don't have permission to
    ///         archive findings from their accounts.</p>
    ///          </note>
    public func archiveFindings(input: ArchiveFindingsInput, completion: @escaping (SdkResult<ArchiveFindingsOutputResponse, ArchiveFindingsOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/findings/archive"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "archiveFindings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ArchiveFindingsInput, ArchiveFindingsOutputResponse, ArchiveFindingsOutputError>(id: "archiveFindings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ArchiveFindingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ArchiveFindingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ArchiveFindingsInput, ArchiveFindingsOutputResponse, ArchiveFindingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: ArchiveFindingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a single Amazon GuardDuty detector. A detector is a resource that represents the
    ///       GuardDuty service. To start using GuardDuty, you must create a detector in each Region where
    ///       you enable the service. You can have only one detector per account per Region. All data
    ///       sources are enabled in a new detector by default.</p>
    public func createDetector(input: CreateDetectorInput, completion: @escaping (SdkResult<CreateDetectorOutputResponse, CreateDetectorOutputError>) -> Void)
    {
        let urlPath = "/detector"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createDetector")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateDetectorInput, CreateDetectorOutputResponse, CreateDetectorOutputError>(id: "createDetector")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateDetectorOutputResponse>, SdkError<CreateDetectorOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateDetectorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateDetectorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateDetectorInput, CreateDetectorOutputResponse, CreateDetectorOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateDetectorInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a filter using the specified finding criteria.</p>
    public func createFilter(input: CreateFilterInput, completion: @escaping (SdkResult<CreateFilterOutputResponse, CreateFilterOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/filter"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createFilter")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateFilterInput, CreateFilterOutputResponse, CreateFilterOutputError>(id: "createFilter")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateFilterOutputResponse>, SdkError<CreateFilterOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateFilterInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateFilterInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateFilterInput, CreateFilterOutputResponse, CreateFilterOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateFilterInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a new IPSet, which is called a trusted IP list in the console user interface. An
    ///       IPSet is a list of IP addresses that are trusted for secure communication with AWS
    ///       infrastructure and applications. GuardDuty doesn't generate findings for IP addresses that are
    ///       included in IPSets. Only users from the administrator account can use this operation.</p>
    public func createIPSet(input: CreateIPSetInput, completion: @escaping (SdkResult<CreateIPSetOutputResponse, CreateIPSetOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/ipset"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createIPSet")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateIPSetInput, CreateIPSetOutputResponse, CreateIPSetOutputError>(id: "createIPSet")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateIPSetOutputResponse>, SdkError<CreateIPSetOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateIPSetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateIPSetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateIPSetInput, CreateIPSetOutputResponse, CreateIPSetOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateIPSetInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates member accounts of the current AWS account by specifying a list of AWS account
    ///       IDs. This step is a prerequisite for managing the associated member accounts either by
    ///       invitation or through an organization.</p>
    ///          <p>When using <code>Create Members</code> as an organizations delegated administrator this
    ///       action will enable GuardDuty in the added member accounts, with the exception of the
    ///       organization delegated administrator account, which must enable GuardDuty prior to being added as a
    ///       member.</p>
    ///          <p>If you are adding accounts by invitation use this action after GuardDuty has been enabled
    ///       in potential member accounts and before using <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_InviteMembers.html">
    ///                <code>Invite
    ///         Members</code>
    ///             </a>.</p>
    public func createMembers(input: CreateMembersInput, completion: @escaping (SdkResult<CreateMembersOutputResponse, CreateMembersOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/member"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateMembersInput, CreateMembersOutputResponse, CreateMembersOutputError>(id: "createMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateMembersInput, CreateMembersOutputResponse, CreateMembersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateMembersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a publishing destination to export findings to. The resource to export findings to
    ///       must exist before you use this operation.</p>
    public func createPublishingDestination(input: CreatePublishingDestinationInput, completion: @escaping (SdkResult<CreatePublishingDestinationOutputResponse, CreatePublishingDestinationOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/publishingDestination"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createPublishingDestination")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreatePublishingDestinationInput, CreatePublishingDestinationOutputResponse, CreatePublishingDestinationOutputError>(id: "createPublishingDestination")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreatePublishingDestinationOutputResponse>, SdkError<CreatePublishingDestinationOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreatePublishingDestinationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreatePublishingDestinationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreatePublishingDestinationInput, CreatePublishingDestinationOutputResponse, CreatePublishingDestinationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreatePublishingDestinationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Generates example findings of types specified by the list of finding types. If 'NULL' is
    ///       specified for <code>findingTypes</code>, the API generates example findings of all supported
    ///       finding types.</p>
    public func createSampleFindings(input: CreateSampleFindingsInput, completion: @escaping (SdkResult<CreateSampleFindingsOutputResponse, CreateSampleFindingsOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/findings/create"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createSampleFindings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateSampleFindingsInput, CreateSampleFindingsOutputResponse, CreateSampleFindingsOutputError>(id: "createSampleFindings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateSampleFindingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateSampleFindingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateSampleFindingsInput, CreateSampleFindingsOutputResponse, CreateSampleFindingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateSampleFindingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a new ThreatIntelSet. ThreatIntelSets consist of known malicious IP addresses.
    ///       GuardDuty generates findings based on ThreatIntelSets. Only users of the administrator account can
    ///       use this operation.</p>
    public func createThreatIntelSet(input: CreateThreatIntelSetInput, completion: @escaping (SdkResult<CreateThreatIntelSetOutputResponse, CreateThreatIntelSetOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/threatintelset"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createThreatIntelSet")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateThreatIntelSetInput, CreateThreatIntelSetOutputResponse, CreateThreatIntelSetOutputError>(id: "createThreatIntelSet")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateThreatIntelSetOutputResponse>, SdkError<CreateThreatIntelSetOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateThreatIntelSetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateThreatIntelSetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateThreatIntelSetInput, CreateThreatIntelSetOutputResponse, CreateThreatIntelSetOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateThreatIntelSetInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Declines invitations sent to the current member account by AWS accounts specified by their
    ///       account IDs.</p>
    public func declineInvitations(input: DeclineInvitationsInput, completion: @escaping (SdkResult<DeclineInvitationsOutputResponse, DeclineInvitationsOutputError>) -> Void)
    {
        let urlPath = "/invitation/decline"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "declineInvitations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeclineInvitationsInput, DeclineInvitationsOutputResponse, DeclineInvitationsOutputError>(id: "declineInvitations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeclineInvitationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeclineInvitationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeclineInvitationsInput, DeclineInvitationsOutputResponse, DeclineInvitationsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DeclineInvitationsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes an Amazon GuardDuty detector that is specified by the detector ID.</p>
    public func deleteDetector(input: DeleteDetectorInput, completion: @escaping (SdkResult<DeleteDetectorOutputResponse, DeleteDetectorOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteDetector")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteDetectorInput, DeleteDetectorOutputResponse, DeleteDetectorOutputError>(id: "deleteDetector")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteDetectorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteDetectorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteDetectorInput, DeleteDetectorOutputResponse, DeleteDetectorOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the filter specified by the filter name.</p>
    public func deleteFilter(input: DeleteFilterInput, completion: @escaping (SdkResult<DeleteFilterOutputResponse, DeleteFilterOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        guard let filterName = input.filterName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component filterName unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/filter/\(filterName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteFilter")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteFilterInput, DeleteFilterOutputResponse, DeleteFilterOutputError>(id: "deleteFilter")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteFilterInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteFilterInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteFilterInput, DeleteFilterOutputResponse, DeleteFilterOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the IPSet specified by the <code>ipSetId</code>. IPSets are called trusted IP
    ///       lists in the console user interface.</p>
    public func deleteIPSet(input: DeleteIPSetInput, completion: @escaping (SdkResult<DeleteIPSetOutputResponse, DeleteIPSetOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        guard let ipSetId = input.ipSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component ipSetId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/ipset/\(ipSetId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteIPSet")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteIPSetInput, DeleteIPSetOutputResponse, DeleteIPSetOutputError>(id: "deleteIPSet")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteIPSetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteIPSetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteIPSetInput, DeleteIPSetOutputResponse, DeleteIPSetOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes invitations sent to the current member account by AWS accounts specified by their
    ///       account IDs.</p>
    public func deleteInvitations(input: DeleteInvitationsInput, completion: @escaping (SdkResult<DeleteInvitationsOutputResponse, DeleteInvitationsOutputError>) -> Void)
    {
        let urlPath = "/invitation/delete"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteInvitations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteInvitationsInput, DeleteInvitationsOutputResponse, DeleteInvitationsOutputError>(id: "deleteInvitations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteInvitationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteInvitationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteInvitationsInput, DeleteInvitationsOutputResponse, DeleteInvitationsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteInvitationsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes GuardDuty member accounts (to the current GuardDuty administrator account) specified by
    ///       the account IDs.</p>
    public func deleteMembers(input: DeleteMembersInput, completion: @escaping (SdkResult<DeleteMembersOutputResponse, DeleteMembersOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/member/delete"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteMembersInput, DeleteMembersOutputResponse, DeleteMembersOutputError>(id: "deleteMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteMembersInput, DeleteMembersOutputResponse, DeleteMembersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteMembersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the publishing definition with the specified <code>destinationId</code>.</p>
    public func deletePublishingDestination(input: DeletePublishingDestinationInput, completion: @escaping (SdkResult<DeletePublishingDestinationOutputResponse, DeletePublishingDestinationOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        guard let destinationId = input.destinationId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component destinationId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/publishingDestination/\(destinationId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deletePublishingDestination")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeletePublishingDestinationInput, DeletePublishingDestinationOutputResponse, DeletePublishingDestinationOutputError>(id: "deletePublishingDestination")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeletePublishingDestinationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeletePublishingDestinationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeletePublishingDestinationInput, DeletePublishingDestinationOutputResponse, DeletePublishingDestinationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the ThreatIntelSet specified by the ThreatIntelSet ID.</p>
    public func deleteThreatIntelSet(input: DeleteThreatIntelSetInput, completion: @escaping (SdkResult<DeleteThreatIntelSetOutputResponse, DeleteThreatIntelSetOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        guard let threatIntelSetId = input.threatIntelSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component threatIntelSetId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/threatintelset/\(threatIntelSetId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteThreatIntelSet")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteThreatIntelSetInput, DeleteThreatIntelSetOutputResponse, DeleteThreatIntelSetOutputError>(id: "deleteThreatIntelSet")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteThreatIntelSetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteThreatIntelSetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteThreatIntelSetInput, DeleteThreatIntelSetOutputResponse, DeleteThreatIntelSetOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns information about the account selected as the delegated administrator for
    ///       GuardDuty.</p>
    public func describeOrganizationConfiguration(input: DescribeOrganizationConfigurationInput, completion: @escaping (SdkResult<DescribeOrganizationConfigurationOutputResponse, DescribeOrganizationConfigurationOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/admin"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeOrganizationConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeOrganizationConfigurationInput, DescribeOrganizationConfigurationOutputResponse, DescribeOrganizationConfigurationOutputError>(id: "describeOrganizationConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeOrganizationConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeOrganizationConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeOrganizationConfigurationInput, DescribeOrganizationConfigurationOutputResponse, DescribeOrganizationConfigurationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns information about the publishing destination specified by the provided
    ///         <code>destinationId</code>.</p>
    public func describePublishingDestination(input: DescribePublishingDestinationInput, completion: @escaping (SdkResult<DescribePublishingDestinationOutputResponse, DescribePublishingDestinationOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        guard let destinationId = input.destinationId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component destinationId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/publishingDestination/\(destinationId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describePublishingDestination")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribePublishingDestinationInput, DescribePublishingDestinationOutputResponse, DescribePublishingDestinationOutputError>(id: "describePublishingDestination")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribePublishingDestinationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribePublishingDestinationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribePublishingDestinationInput, DescribePublishingDestinationOutputResponse, DescribePublishingDestinationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disables an AWS account within the Organization as the GuardDuty delegated
    ///       administrator.</p>
    public func disableOrganizationAdminAccount(input: DisableOrganizationAdminAccountInput, completion: @escaping (SdkResult<DisableOrganizationAdminAccountOutputResponse, DisableOrganizationAdminAccountOutputError>) -> Void)
    {
        let urlPath = "/admin/disable"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disableOrganizationAdminAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisableOrganizationAdminAccountInput, DisableOrganizationAdminAccountOutputResponse, DisableOrganizationAdminAccountOutputError>(id: "disableOrganizationAdminAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisableOrganizationAdminAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisableOrganizationAdminAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisableOrganizationAdminAccountInput, DisableOrganizationAdminAccountOutputResponse, DisableOrganizationAdminAccountOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DisableOrganizationAdminAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociates the current GuardDuty member account from its administrator account.</p>
    public func disassociateFromMasterAccount(input: DisassociateFromMasterAccountInput, completion: @escaping (SdkResult<DisassociateFromMasterAccountOutputResponse, DisassociateFromMasterAccountOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/master/disassociate"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociateFromMasterAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociateFromMasterAccountInput, DisassociateFromMasterAccountOutputResponse, DisassociateFromMasterAccountOutputError>(id: "disassociateFromMasterAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociateFromMasterAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociateFromMasterAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociateFromMasterAccountInput, DisassociateFromMasterAccountOutputResponse, DisassociateFromMasterAccountOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociates GuardDuty member accounts (to the current GuardDuty administrator account)
    ///       specified by the account IDs.</p>
    public func disassociateMembers(input: DisassociateMembersInput, completion: @escaping (SdkResult<DisassociateMembersOutputResponse, DisassociateMembersOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/member/disassociate"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociateMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociateMembersInput, DisassociateMembersOutputResponse, DisassociateMembersOutputError>(id: "disassociateMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociateMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociateMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociateMembersInput, DisassociateMembersOutputResponse, DisassociateMembersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DisassociateMembersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Enables an AWS account within the organization as the GuardDuty delegated
    ///       administrator.</p>
    public func enableOrganizationAdminAccount(input: EnableOrganizationAdminAccountInput, completion: @escaping (SdkResult<EnableOrganizationAdminAccountOutputResponse, EnableOrganizationAdminAccountOutputError>) -> Void)
    {
        let urlPath = "/admin/enable"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "enableOrganizationAdminAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<EnableOrganizationAdminAccountInput, EnableOrganizationAdminAccountOutputResponse, EnableOrganizationAdminAccountOutputError>(id: "enableOrganizationAdminAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: EnableOrganizationAdminAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: EnableOrganizationAdminAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<EnableOrganizationAdminAccountInput, EnableOrganizationAdminAccountOutputResponse, EnableOrganizationAdminAccountOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: EnableOrganizationAdminAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves an Amazon GuardDuty detector specified by the detectorId.</p>
    public func getDetector(input: GetDetectorInput, completion: @escaping (SdkResult<GetDetectorOutputResponse, GetDetectorOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getDetector")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetDetectorInput, GetDetectorOutputResponse, GetDetectorOutputError>(id: "getDetector")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetDetectorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetDetectorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetDetectorInput, GetDetectorOutputResponse, GetDetectorOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the details of the filter specified by the filter name.</p>
    public func getFilter(input: GetFilterInput, completion: @escaping (SdkResult<GetFilterOutputResponse, GetFilterOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        guard let filterName = input.filterName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component filterName unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/filter/\(filterName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getFilter")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetFilterInput, GetFilterOutputResponse, GetFilterOutputError>(id: "getFilter")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetFilterInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetFilterInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetFilterInput, GetFilterOutputResponse, GetFilterOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes Amazon GuardDuty findings specified by finding IDs.</p>
    public func getFindings(input: GetFindingsInput, completion: @escaping (SdkResult<GetFindingsOutputResponse, GetFindingsOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/findings/get"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getFindings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetFindingsInput, GetFindingsOutputResponse, GetFindingsOutputError>(id: "getFindings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetFindingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetFindingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetFindingsInput, GetFindingsOutputResponse, GetFindingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GetFindingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists Amazon GuardDuty findings statistics for the specified detector ID.</p>
    public func getFindingsStatistics(input: GetFindingsStatisticsInput, completion: @escaping (SdkResult<GetFindingsStatisticsOutputResponse, GetFindingsStatisticsOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/findings/statistics"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getFindingsStatistics")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetFindingsStatisticsInput, GetFindingsStatisticsOutputResponse, GetFindingsStatisticsOutputError>(id: "getFindingsStatistics")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetFindingsStatisticsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetFindingsStatisticsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetFindingsStatisticsInput, GetFindingsStatisticsOutputResponse, GetFindingsStatisticsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GetFindingsStatisticsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves the IPSet specified by the <code>ipSetId</code>.</p>
    public func getIPSet(input: GetIPSetInput, completion: @escaping (SdkResult<GetIPSetOutputResponse, GetIPSetOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        guard let ipSetId = input.ipSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component ipSetId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/ipset/\(ipSetId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getIPSet")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetIPSetInput, GetIPSetOutputResponse, GetIPSetOutputError>(id: "getIPSet")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetIPSetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetIPSetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetIPSetInput, GetIPSetOutputResponse, GetIPSetOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the count of all GuardDuty membership invitations that were sent to the current
    ///       member account except the currently accepted invitation.</p>
    public func getInvitationsCount(input: GetInvitationsCountInput, completion: @escaping (SdkResult<GetInvitationsCountOutputResponse, GetInvitationsCountOutputError>) -> Void)
    {
        let urlPath = "/invitation/count"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getInvitationsCount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetInvitationsCountInput, GetInvitationsCountOutputResponse, GetInvitationsCountOutputError>(id: "getInvitationsCount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetInvitationsCountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetInvitationsCountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetInvitationsCountInput, GetInvitationsCountOutputResponse, GetInvitationsCountOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Provides the details for the GuardDuty administrator account associated with the current
    ///       GuardDuty member account.</p>
    public func getMasterAccount(input: GetMasterAccountInput, completion: @escaping (SdkResult<GetMasterAccountOutputResponse, GetMasterAccountOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/master"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getMasterAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetMasterAccountInput, GetMasterAccountOutputResponse, GetMasterAccountOutputError>(id: "getMasterAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetMasterAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetMasterAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetMasterAccountInput, GetMasterAccountOutputResponse, GetMasterAccountOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes which data sources are enabled for the member account's detector.</p>
    public func getMemberDetectors(input: GetMemberDetectorsInput, completion: @escaping (SdkResult<GetMemberDetectorsOutputResponse, GetMemberDetectorsOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/member/detector/get"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getMemberDetectors")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetMemberDetectorsInput, GetMemberDetectorsOutputResponse, GetMemberDetectorsOutputError>(id: "getMemberDetectors")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetMemberDetectorsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetMemberDetectorsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetMemberDetectorsInput, GetMemberDetectorsOutputResponse, GetMemberDetectorsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GetMemberDetectorsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves GuardDuty member accounts (of the current GuardDuty administrator account) specified by
    ///       the account IDs.</p>
    public func getMembers(input: GetMembersInput, completion: @escaping (SdkResult<GetMembersOutputResponse, GetMembersOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/member/get"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetMembersInput, GetMembersOutputResponse, GetMembersOutputError>(id: "getMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetMembersInput, GetMembersOutputResponse, GetMembersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GetMembersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves the ThreatIntelSet that is specified by the ThreatIntelSet ID.</p>
    public func getThreatIntelSet(input: GetThreatIntelSetInput, completion: @escaping (SdkResult<GetThreatIntelSetOutputResponse, GetThreatIntelSetOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        guard let threatIntelSetId = input.threatIntelSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component threatIntelSetId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/threatintelset/\(threatIntelSetId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getThreatIntelSet")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetThreatIntelSetInput, GetThreatIntelSetOutputResponse, GetThreatIntelSetOutputError>(id: "getThreatIntelSet")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetThreatIntelSetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetThreatIntelSetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetThreatIntelSetInput, GetThreatIntelSetOutputResponse, GetThreatIntelSetOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists Amazon GuardDuty usage statistics over the last 30 days for the specified detector
    ///       ID. For newly enabled detectors or data sources the cost returned will include only the usage
    ///       so far under 30 days, this may differ from the cost metrics in the console, which projects
    ///       usage over 30 days to provide a monthly cost estimate. For more information see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/monitoring_costs.html#usage-calculations">Understanding How Usage Costs are Calculated</a>.</p>
    public func getUsageStatistics(input: GetUsageStatisticsInput, completion: @escaping (SdkResult<GetUsageStatisticsOutputResponse, GetUsageStatisticsOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/usage/statistics"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getUsageStatistics")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetUsageStatisticsInput, GetUsageStatisticsOutputResponse, GetUsageStatisticsOutputError>(id: "getUsageStatistics")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetUsageStatisticsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetUsageStatisticsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetUsageStatisticsInput, GetUsageStatisticsOutputResponse, GetUsageStatisticsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GetUsageStatisticsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Invites other AWS accounts (created as members of the current AWS account by
    ///       CreateMembers) to enable GuardDuty, and allow the current AWS account to view and manage these
    ///       accounts' findings on their behalf as the GuardDuty administrator account.</p>
    public func inviteMembers(input: InviteMembersInput, completion: @escaping (SdkResult<InviteMembersOutputResponse, InviteMembersOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/member/invite"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "inviteMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<InviteMembersInput, InviteMembersOutputResponse, InviteMembersOutputError>(id: "inviteMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: InviteMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: InviteMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<InviteMembersInput, InviteMembersOutputResponse, InviteMembersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: InviteMembersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists detectorIds of all the existing Amazon GuardDuty detector resources.</p>
    public func listDetectors(input: ListDetectorsInput, completion: @escaping (SdkResult<ListDetectorsOutputResponse, ListDetectorsOutputError>) -> Void)
    {
        let urlPath = "/detector"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listDetectors")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListDetectorsInput, ListDetectorsOutputResponse, ListDetectorsOutputError>(id: "listDetectors")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListDetectorsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListDetectorsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListDetectorsInput, ListDetectorsOutputResponse, ListDetectorsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a paginated list of the current filters.</p>
    public func listFilters(input: ListFiltersInput, completion: @escaping (SdkResult<ListFiltersOutputResponse, ListFiltersOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/filter"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listFilters")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListFiltersInput, ListFiltersOutputResponse, ListFiltersOutputError>(id: "listFilters")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListFiltersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListFiltersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListFiltersInput, ListFiltersOutputResponse, ListFiltersOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists Amazon GuardDuty findings for the specified detector ID.</p>
    public func listFindings(input: ListFindingsInput, completion: @escaping (SdkResult<ListFindingsOutputResponse, ListFindingsOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/findings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listFindings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListFindingsInput, ListFindingsOutputResponse, ListFindingsOutputError>(id: "listFindings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListFindingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListFindingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListFindingsInput, ListFindingsOutputResponse, ListFindingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: ListFindingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the IPSets of the GuardDuty service specified by the detector ID. If you use this
    ///       operation from a member account, the IPSets returned are the IPSets from the associated administrator
    ///       account.</p>
    public func listIPSets(input: ListIPSetsInput, completion: @escaping (SdkResult<ListIPSetsOutputResponse, ListIPSetsOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/ipset"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listIPSets")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListIPSetsInput, ListIPSetsOutputResponse, ListIPSetsOutputError>(id: "listIPSets")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListIPSetsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListIPSetsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListIPSetsInput, ListIPSetsOutputResponse, ListIPSetsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all GuardDuty membership invitations that were sent to the current AWS
    ///       account.</p>
    public func listInvitations(input: ListInvitationsInput, completion: @escaping (SdkResult<ListInvitationsOutputResponse, ListInvitationsOutputError>) -> Void)
    {
        let urlPath = "/invitation"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listInvitations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListInvitationsInput, ListInvitationsOutputResponse, ListInvitationsOutputError>(id: "listInvitations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListInvitationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListInvitationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListInvitationsInput, ListInvitationsOutputResponse, ListInvitationsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists details about all member accounts for the current GuardDuty administrator account.</p>
    public func listMembers(input: ListMembersInput, completion: @escaping (SdkResult<ListMembersOutputResponse, ListMembersOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/member"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListMembersInput, ListMembersOutputResponse, ListMembersOutputError>(id: "listMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListMembersInput, ListMembersOutputResponse, ListMembersOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the accounts configured as GuardDuty delegated administrators.</p>
    public func listOrganizationAdminAccounts(input: ListOrganizationAdminAccountsInput, completion: @escaping (SdkResult<ListOrganizationAdminAccountsOutputResponse, ListOrganizationAdminAccountsOutputError>) -> Void)
    {
        let urlPath = "/admin"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listOrganizationAdminAccounts")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListOrganizationAdminAccountsInput, ListOrganizationAdminAccountsOutputResponse, ListOrganizationAdminAccountsOutputError>(id: "listOrganizationAdminAccounts")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListOrganizationAdminAccountsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListOrganizationAdminAccountsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListOrganizationAdminAccountsInput, ListOrganizationAdminAccountsOutputResponse, ListOrganizationAdminAccountsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of publishing destinations associated with the specified
    ///         <code>dectectorId</code>.</p>
    public func listPublishingDestinations(input: ListPublishingDestinationsInput, completion: @escaping (SdkResult<ListPublishingDestinationsOutputResponse, ListPublishingDestinationsOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/publishingDestination"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listPublishingDestinations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListPublishingDestinationsInput, ListPublishingDestinationsOutputResponse, ListPublishingDestinationsOutputError>(id: "listPublishingDestinations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListPublishingDestinationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListPublishingDestinationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListPublishingDestinationsInput, ListPublishingDestinationsOutputResponse, ListPublishingDestinationsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists tags for a resource. Tagging is currently supported for detectors, finding filters,
    ///       IP sets, and threat intel sets, with a limit of 50 tags per resource. When invoked, this
    ///       operation returns all assigned tags for a given resource.</p>
    public func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTagsForResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsForResourceInput, ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>(id: "listTagsForResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsForResourceInput, ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the ThreatIntelSets of the GuardDuty service specified by the detector ID. If you
    ///       use this operation from a member account, the ThreatIntelSets associated with the administrator
    ///       account are returned.</p>
    public func listThreatIntelSets(input: ListThreatIntelSetsInput, completion: @escaping (SdkResult<ListThreatIntelSetsOutputResponse, ListThreatIntelSetsOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/threatintelset"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listThreatIntelSets")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListThreatIntelSetsInput, ListThreatIntelSetsOutputResponse, ListThreatIntelSetsOutputError>(id: "listThreatIntelSets")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListThreatIntelSetsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListThreatIntelSetsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListThreatIntelSetsInput, ListThreatIntelSetsOutputResponse, ListThreatIntelSetsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Turns on GuardDuty monitoring of the specified member accounts. Use this operation to
    ///       restart monitoring of accounts that you stopped monitoring with the
    ///         <code>StopMonitoringMembers</code> operation.</p>
    public func startMonitoringMembers(input: StartMonitoringMembersInput, completion: @escaping (SdkResult<StartMonitoringMembersOutputResponse, StartMonitoringMembersOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/member/start"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "startMonitoringMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<StartMonitoringMembersInput, StartMonitoringMembersOutputResponse, StartMonitoringMembersOutputError>(id: "startMonitoringMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: StartMonitoringMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: StartMonitoringMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<StartMonitoringMembersInput, StartMonitoringMembersOutputResponse, StartMonitoringMembersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: StartMonitoringMembersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Stops GuardDuty monitoring for the specified member accounts. Use the
    ///         <code>StartMonitoringMembers</code> operation to restart monitoring for those
    ///       accounts.</p>
    public func stopMonitoringMembers(input: StopMonitoringMembersInput, completion: @escaping (SdkResult<StopMonitoringMembersOutputResponse, StopMonitoringMembersOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/member/stop"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "stopMonitoringMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<StopMonitoringMembersInput, StopMonitoringMembersOutputResponse, StopMonitoringMembersOutputError>(id: "stopMonitoringMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: StopMonitoringMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: StopMonitoringMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<StopMonitoringMembersInput, StopMonitoringMembersOutputResponse, StopMonitoringMembersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: StopMonitoringMembersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds tags to a resource.</p>
    public func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagResourceInput, TagResourceOutputResponse, TagResourceOutputError>(id: "tagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagResourceInput, TagResourceOutputResponse, TagResourceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Unarchives GuardDuty findings specified by the <code>findingIds</code>.</p>
    public func unarchiveFindings(input: UnarchiveFindingsInput, completion: @escaping (SdkResult<UnarchiveFindingsOutputResponse, UnarchiveFindingsOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/findings/unarchive"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "unarchiveFindings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UnarchiveFindingsInput, UnarchiveFindingsOutputResponse, UnarchiveFindingsOutputError>(id: "unarchiveFindings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UnarchiveFindingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UnarchiveFindingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UnarchiveFindingsInput, UnarchiveFindingsOutputResponse, UnarchiveFindingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UnarchiveFindingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes tags from a resource.</p>
    public func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagResourceInput, UntagResourceOutputResponse, UntagResourceOutputError>(id: "untagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagResourceInput, UntagResourceOutputResponse, UntagResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the Amazon GuardDuty detector specified by the detectorId.</p>
    public func updateDetector(input: UpdateDetectorInput, completion: @escaping (SdkResult<UpdateDetectorOutputResponse, UpdateDetectorOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateDetector")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateDetectorInput, UpdateDetectorOutputResponse, UpdateDetectorOutputError>(id: "updateDetector")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateDetectorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateDetectorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateDetectorInput, UpdateDetectorOutputResponse, UpdateDetectorOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateDetectorInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the filter specified by the filter name.</p>
    public func updateFilter(input: UpdateFilterInput, completion: @escaping (SdkResult<UpdateFilterOutputResponse, UpdateFilterOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        guard let filterName = input.filterName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component filterName unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/filter/\(filterName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateFilter")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateFilterInput, UpdateFilterOutputResponse, UpdateFilterOutputError>(id: "updateFilter")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateFilterInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateFilterInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateFilterInput, UpdateFilterOutputResponse, UpdateFilterOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateFilterInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Marks the specified GuardDuty findings as useful or not useful.</p>
    public func updateFindingsFeedback(input: UpdateFindingsFeedbackInput, completion: @escaping (SdkResult<UpdateFindingsFeedbackOutputResponse, UpdateFindingsFeedbackOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/findings/feedback"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateFindingsFeedback")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateFindingsFeedbackInput, UpdateFindingsFeedbackOutputResponse, UpdateFindingsFeedbackOutputError>(id: "updateFindingsFeedback")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateFindingsFeedbackInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateFindingsFeedbackInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateFindingsFeedbackInput, UpdateFindingsFeedbackOutputResponse, UpdateFindingsFeedbackOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateFindingsFeedbackInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the IPSet specified by the IPSet ID.</p>
    public func updateIPSet(input: UpdateIPSetInput, completion: @escaping (SdkResult<UpdateIPSetOutputResponse, UpdateIPSetOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        guard let ipSetId = input.ipSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component ipSetId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/ipset/\(ipSetId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateIPSet")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateIPSetInput, UpdateIPSetOutputResponse, UpdateIPSetOutputError>(id: "updateIPSet")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateIPSetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateIPSetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateIPSetInput, UpdateIPSetOutputResponse, UpdateIPSetOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateIPSetInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Contains information on member accounts to be updated.</p>
    public func updateMemberDetectors(input: UpdateMemberDetectorsInput, completion: @escaping (SdkResult<UpdateMemberDetectorsOutputResponse, UpdateMemberDetectorsOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/member/detector/update"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateMemberDetectors")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateMemberDetectorsInput, UpdateMemberDetectorsOutputResponse, UpdateMemberDetectorsOutputError>(id: "updateMemberDetectors")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateMemberDetectorsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateMemberDetectorsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateMemberDetectorsInput, UpdateMemberDetectorsOutputResponse, UpdateMemberDetectorsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateMemberDetectorsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the delegated administrator account with the values provided.</p>
    public func updateOrganizationConfiguration(input: UpdateOrganizationConfigurationInput, completion: @escaping (SdkResult<UpdateOrganizationConfigurationOutputResponse, UpdateOrganizationConfigurationOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/admin"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateOrganizationConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateOrganizationConfigurationInput, UpdateOrganizationConfigurationOutputResponse, UpdateOrganizationConfigurationOutputError>(id: "updateOrganizationConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateOrganizationConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateOrganizationConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateOrganizationConfigurationInput, UpdateOrganizationConfigurationOutputResponse, UpdateOrganizationConfigurationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateOrganizationConfigurationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates information about the publishing destination specified by the
    ///         <code>destinationId</code>.</p>
    public func updatePublishingDestination(input: UpdatePublishingDestinationInput, completion: @escaping (SdkResult<UpdatePublishingDestinationOutputResponse, UpdatePublishingDestinationOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        guard let destinationId = input.destinationId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component destinationId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/publishingDestination/\(destinationId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updatePublishingDestination")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdatePublishingDestinationInput, UpdatePublishingDestinationOutputResponse, UpdatePublishingDestinationOutputError>(id: "updatePublishingDestination")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdatePublishingDestinationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdatePublishingDestinationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdatePublishingDestinationInput, UpdatePublishingDestinationOutputResponse, UpdatePublishingDestinationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdatePublishingDestinationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the ThreatIntelSet specified by the ThreatIntelSet ID.</p>
    public func updateThreatIntelSet(input: UpdateThreatIntelSetInput, completion: @escaping (SdkResult<UpdateThreatIntelSetOutputResponse, UpdateThreatIntelSetOutputError>) -> Void)
    {
        guard let detectorId = input.detectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component detectorId unexpectedly nil"))))
            return
        }
        guard let threatIntelSetId = input.threatIntelSetId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component threatIntelSetId unexpectedly nil"))))
            return
        }
        let urlPath = "/detector/\(detectorId)/threatintelset/\(threatIntelSetId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateThreatIntelSet")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "guardduty.\(config.region).amazonaws.com")
                      .withSigningName(value: "guardduty")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateThreatIntelSetInput, UpdateThreatIntelSetOutputResponse, UpdateThreatIntelSetOutputError>(id: "updateThreatIntelSet")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateThreatIntelSetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateThreatIntelSetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateThreatIntelSetInput, UpdateThreatIntelSetOutputResponse, UpdateThreatIntelSetOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateThreatIntelSetInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
