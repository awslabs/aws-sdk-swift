// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the input for a request operation.</p>
public struct SearchGameSessionsInput: Equatable {
    /// <p>A unique identifier for the alias associated with the fleet to search for active game sessions. You can use either
    ///             the alias ID or ARN value. Each request must reference either a fleet ID or alias ID,
    ///             but not both.</p>
    public let aliasId: String?
    /// <p>String containing the search criteria for the session search. If no filter
    ///             expression is included, the request returns results for all game sessions in the fleet
    ///             that are in <code>ACTIVE</code> status.</p>
    ///         <p>A filter expression can contain one or multiple conditions. Each condition consists
    ///             of the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <b>Operand</b> -- Name of a game session
    ///                     attribute. Valid values are <code>gameSessionName</code>,
    ///                         <code>gameSessionId</code>, <code>gameSessionProperties</code>,
    ///                         <code>maximumSessions</code>, <code>creationTimeMillis</code>,
    ///                         <code>playerSessionCount</code>,
    ///                     <code>hasAvailablePlayerSessions</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Comparator</b> -- Valid comparators are:
    ///                         <code>=</code>, <code><></code>, <code><</code>, <code>></code>,
    ///                         <code><=</code>, <code>>=</code>. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Value</b> -- Value to be searched for. Values
    ///                     may be numbers, boolean values (true/false) or strings depending on the operand.
    ///                     String values are case sensitive and must be enclosed in single quotes. Special
    ///                     characters must be escaped. Boolean and string values can only be used with the
    ///                     comparators <code>=</code> and <code><></code>. For example, the following
    ///                     filter expression searches on <code>gameSessionName</code>:
    ///                         "<code>FilterExpression": "gameSessionName = 'Matt\\'s Awesome Game
    ///                         1'"</code>. </p>
    ///             </li>
    ///          </ul>
    ///         <p>To chain multiple conditions in a single expression, use the logical keywords
    ///                 <code>AND</code>, <code>OR</code>, and <code>NOT</code> and parentheses as needed.
    ///             For example: <code>x AND y AND NOT z</code>, <code>NOT (x OR y)</code>.</p>
    ///         <p>Session search evaluates conditions from left to right using the following
    ///             precedence rules:</p>
    ///         <ol>
    ///             <li>
    ///                 <p>
    ///                     <code>=</code>, <code><></code>, <code><</code>, <code>></code>,
    ///                         <code><=</code>, <code>>=</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>Parentheses</p>
    ///             </li>
    ///             <li>
    ///                 <p>NOT</p>
    ///             </li>
    ///             <li>
    ///                 <p>AND</p>
    ///             </li>
    ///             <li>
    ///                 <p>OR</p>
    ///             </li>
    ///          </ol>
    ///         <p>For example, this filter expression retrieves game sessions hosting at least ten
    ///             players that have an open player slot: <code>"maximumSessions>=10 AND
    ///                 hasAvailablePlayerSessions=true"</code>. </p>
    public let filterExpression: String?
    /// <p>A unique identifier for the fleet to search for active game sessions. You can use either the fleet ID or ARN
    ///             value. Each request must reference either a fleet ID or alias ID, but not both.</p>
    public let fleetId: String?
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. The maximum number of results returned is 20, even if this value is not set
    ///             or is set higher than 20. </p>
    public let limit: Int?
    /// <p>A fleet location to search for game sessions. You can specify a fleet's home Region or
    ///             a remote location. Use the AWS Region code format, such as <code>us-west-2</code>. </p>
    ///         <p> </p>
    public let location: String?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?
    /// <p>Instructions on how to sort the search results. If no sort expression is included,
    ///             the request returns results in random order. A sort expression consists of the following
    ///             elements:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>Operand</b> -- Name of a game session attribute.
    ///                     Valid values are <code>gameSessionName</code>, <code>gameSessionId</code>,
    ///                         <code>gameSessionProperties</code>, <code>maximumSessions</code>,
    ///                         <code>creationTimeMillis</code>, <code>playerSessionCount</code>,
    ///                         <code>hasAvailablePlayerSessions</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>Order</b> -- Valid sort orders are <code>ASC</code>
    ///                     (ascending) and <code>DESC</code> (descending).</p>
    ///             </li>
    ///          </ul>
    ///         <p>For example, this sort expression returns the oldest active sessions first:
    ///                 <code>"SortExpression": "creationTimeMillis ASC"</code>. Results with a null value
    ///             for the sort operand are returned at the end of the list.</p>
    public let sortExpression: String?

    public init (
        aliasId: String? = nil,
        filterExpression: String? = nil,
        fleetId: String? = nil,
        limit: Int? = nil,
        location: String? = nil,
        nextToken: String? = nil,
        sortExpression: String? = nil
    )
    {
        self.aliasId = aliasId
        self.filterExpression = filterExpression
        self.fleetId = fleetId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
        self.sortExpression = sortExpression
    }
}
