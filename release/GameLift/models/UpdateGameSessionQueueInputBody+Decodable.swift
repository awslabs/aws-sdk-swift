// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateGameSessionQueueInputBody: Equatable {
    public let name: String?
    public let timeoutInSeconds: Int?
    public let playerLatencyPolicies: [PlayerLatencyPolicy]?
    public let destinations: [GameSessionQueueDestination]?
    public let filterConfiguration: FilterConfiguration?
    public let priorityConfiguration: PriorityConfiguration?
    public let customEventData: String?
    public let notificationTarget: String?
}

extension UpdateGameSessionQueueInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case customEventData = "CustomEventData"
        case destinations = "Destinations"
        case filterConfiguration = "FilterConfiguration"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case playerLatencyPolicies = "PlayerLatencyPolicies"
        case priorityConfiguration = "PriorityConfiguration"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let playerLatencyPoliciesContainer = try containerValues.decodeIfPresent([PlayerLatencyPolicy].self, forKey: .playerLatencyPolicies)
        var playerLatencyPoliciesDecoded0:[PlayerLatencyPolicy]? = nil
        if let playerLatencyPoliciesContainer = playerLatencyPoliciesContainer {
            playerLatencyPoliciesDecoded0 = [PlayerLatencyPolicy]()
            for structure0 in playerLatencyPoliciesContainer {
                playerLatencyPoliciesDecoded0?.append(structure0)
            }
        }
        playerLatencyPolicies = playerLatencyPoliciesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([GameSessionQueueDestination].self, forKey: .destinations)
        var destinationsDecoded0:[GameSessionQueueDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [GameSessionQueueDestination]()
            for structure0 in destinationsContainer {
                destinationsDecoded0?.append(structure0)
            }
        }
        destinations = destinationsDecoded0
        let filterConfigurationDecoded = try containerValues.decodeIfPresent(FilterConfiguration.self, forKey: .filterConfiguration)
        filterConfiguration = filterConfigurationDecoded
        let priorityConfigurationDecoded = try containerValues.decodeIfPresent(PriorityConfiguration.self, forKey: .priorityConfiguration)
        priorityConfiguration = priorityConfigurationDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
    }
}
