// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateMatchmakingConfigurationInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let gameSessionQueueArns: [String]?
    public let requestTimeoutSeconds: Int?
    public let acceptanceTimeoutSeconds: Int?
    public let acceptanceRequired: Bool?
    public let ruleSetName: String?
    public let notificationTarget: String?
    public let additionalPlayerCount: Int?
    public let customEventData: String?
    public let gameProperties: [GameProperty]?
    public let gameSessionData: String?
    public let backfillMode: BackfillMode?
    public let flexMatchMode: FlexMatchMode?
    public let tags: [Tag]?
}

extension CreateMatchmakingConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetName = "RuleSetName"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let gameSessionQueueArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .gameSessionQueueArns)
        var gameSessionQueueArnsDecoded0:[String]? = nil
        if let gameSessionQueueArnsContainer = gameSessionQueueArnsContainer {
            gameSessionQueueArnsDecoded0 = [String]()
            for string0 in gameSessionQueueArnsContainer {
                gameSessionQueueArnsDecoded0?.append(string0)
            }
        }
        gameSessionQueueArns = gameSessionQueueArnsDecoded0
        let requestTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .requestTimeoutSeconds)
        requestTimeoutSeconds = requestTimeoutSecondsDecoded
        let acceptanceTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .acceptanceTimeoutSeconds)
        acceptanceTimeoutSeconds = acceptanceTimeoutSecondsDecoded
        let acceptanceRequiredDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .acceptanceRequired)
        acceptanceRequired = acceptanceRequiredDecoded
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
        let additionalPlayerCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .additionalPlayerCount)
        additionalPlayerCount = additionalPlayerCountDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameProperty].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameProperty]()
            for structure0 in gamePropertiesContainer {
                gamePropertiesDecoded0?.append(structure0)
            }
        }
        gameProperties = gamePropertiesDecoded0
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let backfillModeDecoded = try containerValues.decodeIfPresent(BackfillMode.self, forKey: .backfillMode)
        backfillMode = backfillModeDecoded
        let flexMatchModeDecoded = try containerValues.decodeIfPresent(FlexMatchMode.self, forKey: .flexMatchMode)
        flexMatchMode = flexMatchModeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
