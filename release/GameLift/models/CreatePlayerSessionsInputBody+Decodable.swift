// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreatePlayerSessionsInputBody: Equatable {
    public let gameSessionId: String?
    public let playerIds: [String]?
    public let playerDataMap: [String:String]?
}

extension CreatePlayerSessionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessionId = "GameSessionId"
        case playerDataMap = "PlayerDataMap"
        case playerIds = "PlayerIds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let playerIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .playerIds)
        var playerIdsDecoded0:[String]? = nil
        if let playerIdsContainer = playerIdsContainer {
            playerIdsDecoded0 = [String]()
            for string0 in playerIdsContainer {
                playerIdsDecoded0?.append(string0)
            }
        }
        playerIds = playerIdsDecoded0
        let playerDataMapContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .playerDataMap)
        var playerDataMapDecoded0: [String:String]? = nil
        if let playerDataMapContainer = playerDataMapContainer {
            playerDataMapDecoded0 = [String:String]()
            for (key0, playerdata0) in playerDataMapContainer {
                playerDataMapDecoded0?[key0] = playerdata0
            }
        }
        playerDataMap = playerDataMapDecoded0
    }
}
