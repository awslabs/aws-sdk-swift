// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateGameServerGroupInputBody: Equatable {
    public let gameServerGroupName: String?
    public let roleArn: String?
    public let minSize: Int?
    public let maxSize: Int?
    public let launchTemplate: LaunchTemplateSpecification?
    public let instanceDefinitions: [InstanceDefinition]?
    public let autoScalingPolicy: GameServerGroupAutoScalingPolicy?
    public let balancingStrategy: BalancingStrategy?
    public let gameServerProtectionPolicy: GameServerProtectionPolicy?
    public let vpcSubnets: [String]?
    public let tags: [Tag]?
}

extension CreateGameServerGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case balancingStrategy = "BalancingStrategy"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case launchTemplate = "LaunchTemplate"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case roleArn = "RoleArn"
        case tags = "Tags"
        case vpcSubnets = "VpcSubnets"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let instanceDefinitionsContainer = try containerValues.decodeIfPresent([InstanceDefinition].self, forKey: .instanceDefinitions)
        var instanceDefinitionsDecoded0:[InstanceDefinition]? = nil
        if let instanceDefinitionsContainer = instanceDefinitionsContainer {
            instanceDefinitionsDecoded0 = [InstanceDefinition]()
            for structure0 in instanceDefinitionsContainer {
                instanceDefinitionsDecoded0?.append(structure0)
            }
        }
        instanceDefinitions = instanceDefinitionsDecoded0
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(GameServerGroupAutoScalingPolicy.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
        let balancingStrategyDecoded = try containerValues.decodeIfPresent(BalancingStrategy.self, forKey: .balancingStrategy)
        balancingStrategy = balancingStrategyDecoded
        let gameServerProtectionPolicyDecoded = try containerValues.decodeIfPresent(GameServerProtectionPolicy.self, forKey: .gameServerProtectionPolicy)
        gameServerProtectionPolicy = gameServerProtectionPolicyDecoded
        let vpcSubnetsContainer = try containerValues.decodeIfPresent([String].self, forKey: .vpcSubnets)
        var vpcSubnetsDecoded0:[String]? = nil
        if let vpcSubnetsContainer = vpcSubnetsContainer {
            vpcSubnetsDecoded0 = [String]()
            for string0 in vpcSubnetsContainer {
                vpcSubnetsDecoded0?.append(string0)
            }
        }
        vpcSubnets = vpcSubnetsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
