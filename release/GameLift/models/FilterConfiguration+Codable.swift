// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FilterConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedLocations = "AllowedLocations"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedLocations = allowedLocations {
            var allowedLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedLocations)
            for locationlist0 in allowedLocations {
                try allowedLocationsContainer.encode(locationlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedLocationsContainer = try containerValues.decodeIfPresent([String].self, forKey: .allowedLocations)
        var allowedLocationsDecoded0:[String]? = nil
        if let allowedLocationsContainer = allowedLocationsContainer {
            allowedLocationsDecoded0 = [String]()
            for string0 in allowedLocationsContainer {
                allowedLocationsDecoded0?.append(string0)
            }
        }
        allowedLocations = allowedLocationsDecoded0
    }
}
