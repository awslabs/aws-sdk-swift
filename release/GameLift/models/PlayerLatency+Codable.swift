// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PlayerLatency: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case latencyInMilliseconds = "LatencyInMilliseconds"
        case playerId = "PlayerId"
        case regionIdentifier = "RegionIdentifier"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if latencyInMilliseconds != 0.0 {
            try encodeContainer.encode(latencyInMilliseconds, forKey: .latencyInMilliseconds)
        }
        if let playerId = playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let regionIdentifier = regionIdentifier {
            try encodeContainer.encode(regionIdentifier, forKey: .regionIdentifier)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let regionIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionIdentifier)
        regionIdentifier = regionIdentifierDecoded
        let latencyInMillisecondsDecoded = try containerValues.decode(Float.self, forKey: .latencyInMilliseconds)
        latencyInMilliseconds = latencyInMillisecondsDecoded
    }
}
