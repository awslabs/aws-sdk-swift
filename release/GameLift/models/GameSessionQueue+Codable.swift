// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GameSessionQueue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customEventData = "CustomEventData"
        case destinations = "Destinations"
        case filterConfiguration = "FilterConfiguration"
        case gameSessionQueueArn = "GameSessionQueueArn"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case playerLatencyPolicies = "PlayerLatencyPolicies"
        case priorityConfiguration = "PriorityConfiguration"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customEventData = customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for gamesessionqueuedestinationlist0 in destinations {
                try destinationsContainer.encode(gamesessionqueuedestinationlist0)
            }
        }
        if let filterConfiguration = filterConfiguration {
            try encodeContainer.encode(filterConfiguration, forKey: .filterConfiguration)
        }
        if let gameSessionQueueArn = gameSessionQueueArn {
            try encodeContainer.encode(gameSessionQueueArn, forKey: .gameSessionQueueArn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let playerLatencyPolicies = playerLatencyPolicies {
            var playerLatencyPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencyPolicies)
            for playerlatencypolicylist0 in playerLatencyPolicies {
                try playerLatencyPoliciesContainer.encode(playerlatencypolicylist0)
            }
        }
        if let priorityConfiguration = priorityConfiguration {
            try encodeContainer.encode(priorityConfiguration, forKey: .priorityConfiguration)
        }
        if let timeoutInSeconds = timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let gameSessionQueueArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionQueueArn)
        gameSessionQueueArn = gameSessionQueueArnDecoded
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let playerLatencyPoliciesContainer = try containerValues.decodeIfPresent([PlayerLatencyPolicy].self, forKey: .playerLatencyPolicies)
        var playerLatencyPoliciesDecoded0:[PlayerLatencyPolicy]? = nil
        if let playerLatencyPoliciesContainer = playerLatencyPoliciesContainer {
            playerLatencyPoliciesDecoded0 = [PlayerLatencyPolicy]()
            for structure0 in playerLatencyPoliciesContainer {
                playerLatencyPoliciesDecoded0?.append(structure0)
            }
        }
        playerLatencyPolicies = playerLatencyPoliciesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([GameSessionQueueDestination].self, forKey: .destinations)
        var destinationsDecoded0:[GameSessionQueueDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [GameSessionQueueDestination]()
            for structure0 in destinationsContainer {
                destinationsDecoded0?.append(structure0)
            }
        }
        destinations = destinationsDecoded0
        let filterConfigurationDecoded = try containerValues.decodeIfPresent(FilterConfiguration.self, forKey: .filterConfiguration)
        filterConfiguration = filterConfigurationDecoded
        let priorityConfigurationDecoded = try containerValues.decodeIfPresent(PriorityConfiguration.self, forKey: .priorityConfiguration)
        priorityConfiguration = priorityConfigurationDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
    }
}
