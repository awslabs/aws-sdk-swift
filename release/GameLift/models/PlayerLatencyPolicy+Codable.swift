// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PlayerLatencyPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maximumIndividualPlayerLatencyMilliseconds = "MaximumIndividualPlayerLatencyMilliseconds"
        case policyDurationSeconds = "PolicyDurationSeconds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maximumIndividualPlayerLatencyMilliseconds = maximumIndividualPlayerLatencyMilliseconds {
            try encodeContainer.encode(maximumIndividualPlayerLatencyMilliseconds, forKey: .maximumIndividualPlayerLatencyMilliseconds)
        }
        if let policyDurationSeconds = policyDurationSeconds {
            try encodeContainer.encode(policyDurationSeconds, forKey: .policyDurationSeconds)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumIndividualPlayerLatencyMillisecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumIndividualPlayerLatencyMilliseconds)
        maximumIndividualPlayerLatencyMilliseconds = maximumIndividualPlayerLatencyMillisecondsDecoded
        let policyDurationSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .policyDurationSeconds)
        policyDurationSeconds = policyDurationSecondsDecoded
    }
}
