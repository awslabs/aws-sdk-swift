// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Build: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case buildArn = "BuildArn"
        case buildId = "BuildId"
        case creationTime = "CreationTime"
        case name = "Name"
        case operatingSystem = "OperatingSystem"
        case sizeOnDisk = "SizeOnDisk"
        case status = "Status"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildArn = buildArn {
            try encodeContainer.encode(buildArn, forKey: .buildArn)
        }
        if let buildId = buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let operatingSystem = operatingSystem {
            try encodeContainer.encode(operatingSystem.rawValue, forKey: .operatingSystem)
        }
        if let sizeOnDisk = sizeOnDisk {
            try encodeContainer.encode(sizeOnDisk, forKey: .sizeOnDisk)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildId)
        buildId = buildIdDecoded
        let buildArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildArn)
        buildArn = buildArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BuildStatus.self, forKey: .status)
        status = statusDecoded
        let sizeOnDiskDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .sizeOnDisk)
        sizeOnDisk = sizeOnDiskDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
