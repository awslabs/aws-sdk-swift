// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

public struct AcceptMatchInputBodyMiddleware: Middleware {
    public let id: String = "AcceptMatchInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AcceptMatchInput>,
                  next: H) -> Swift.Result<OperationOutput<AcceptMatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AcceptMatchInput>
    public typealias MOutput = OperationOutput<AcceptMatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AcceptMatchOutputError>
}

extension AcceptMatchInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AcceptMatchInput(acceptanceType: \(String(describing: acceptanceType)), playerIds: \(String(describing: playerIds)), ticketId: \(String(describing: ticketId)))"}
}

extension AcceptMatchInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceptanceType = "AcceptanceType"
        case playerIds = "PlayerIds"
        case ticketId = "TicketId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptanceType = acceptanceType {
            try encodeContainer.encode(acceptanceType.rawValue, forKey: .acceptanceType)
        }
        if let playerIds = playerIds {
            var playerIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerIds)
            for stringlist0 in playerIds {
                try playerIdsContainer.encode(stringlist0)
            }
        }
        if let ticketId = ticketId {
            try encodeContainer.encode(ticketId, forKey: .ticketId)
        }
    }
}

public struct AcceptMatchInputHeadersMiddleware: Middleware {
    public let id: String = "AcceptMatchInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AcceptMatchInput>,
                  next: H) -> Swift.Result<OperationOutput<AcceptMatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AcceptMatchInput>
    public typealias MOutput = OperationOutput<AcceptMatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AcceptMatchOutputError>
}

public struct AcceptMatchInputQueryItemMiddleware: Middleware {
    public let id: String = "AcceptMatchInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AcceptMatchInput>,
                  next: H) -> Swift.Result<OperationOutput<AcceptMatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AcceptMatchInput>
    public typealias MOutput = OperationOutput<AcceptMatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AcceptMatchOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct AcceptMatchInput: Equatable {
    /// <p>Player response to the proposed match.</p>
    public let acceptanceType: AcceptanceType?
    /// <p>A unique identifier for a player delivering the response. This parameter can include one or multiple
    ///             player IDs.</p>
    public let playerIds: [String]?
    /// <p>A unique identifier for a matchmaking ticket. The ticket must be in status <code>REQUIRES_ACCEPTANCE</code>; otherwise this
    ///             request will fail.</p>
    public let ticketId: String?

    public init (
        acceptanceType: AcceptanceType? = nil,
        playerIds: [String]? = nil,
        ticketId: String? = nil
    )
    {
        self.acceptanceType = acceptanceType
        self.playerIds = playerIds
        self.ticketId = ticketId
    }
}

struct AcceptMatchInputBody: Equatable {
    public let ticketId: String?
    public let playerIds: [String]?
    public let acceptanceType: AcceptanceType?
}

extension AcceptMatchInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case acceptanceType = "AcceptanceType"
        case playerIds = "PlayerIds"
        case ticketId = "TicketId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ticketId)
        ticketId = ticketIdDecoded
        let playerIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .playerIds)
        var playerIdsDecoded0:[String]? = nil
        if let playerIdsContainer = playerIdsContainer {
            playerIdsDecoded0 = [String]()
            for string0 in playerIdsContainer {
                if let string0 = string0 {
                    playerIdsDecoded0?.append(string0)
                }
            }
        }
        playerIds = playerIdsDecoded0
        let acceptanceTypeDecoded = try containerValues.decodeIfPresent(AcceptanceType.self, forKey: .acceptanceType)
        acceptanceType = acceptanceTypeDecoded
    }
}

extension AcceptMatchOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptMatchOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AcceptMatchOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptMatchOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AcceptMatchOutputResponse()"}
}

extension AcceptMatchOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct AcceptMatchOutputResponse: Equatable {

    public init() {}
}

struct AcceptMatchOutputResponseBody: Equatable {
}

extension AcceptMatchOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public enum AcceptanceType {
    case accept
    case reject
    case sdkUnknown(String)
}

extension AcceptanceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AcceptanceType] {
        return [
            .accept,
            .reject,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accept: return "ACCEPT"
        case .reject: return "REJECT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AcceptanceType(rawValue: rawValue) ?? AcceptanceType.sdkUnknown(rawValue)
    }
}

extension Alias: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aliasArn = "AliasArn"
        case aliasId = "AliasId"
        case creationTime = "CreationTime"
        case description = "Description"
        case lastUpdatedTime = "LastUpdatedTime"
        case name = "Name"
        case routingStrategy = "RoutingStrategy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasArn = aliasArn {
            try encodeContainer.encode(aliasArn, forKey: .aliasArn)
        }
        if let aliasId = aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let routingStrategy = routingStrategy {
            try encodeContainer.encode(routingStrategy, forKey: .routingStrategy)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let aliasArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aliasArn)
        aliasArn = aliasArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let routingStrategyDecoded = try containerValues.decodeIfPresent(RoutingStrategy.self, forKey: .routingStrategy)
        routingStrategy = routingStrategyDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}

extension Alias: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Alias(aliasArn: \(String(describing: aliasArn)), aliasId: \(String(describing: aliasId)), creationTime: \(String(describing: creationTime)), description: \(String(describing: description)), lastUpdatedTime: \(String(describing: lastUpdatedTime)), name: \(String(describing: name)), routingStrategy: \(String(describing: routingStrategy)))"}
}

/// <p>Properties that describe an alias resource.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>CreateAlias</a> |
///                     <a>ListAliases</a> |
///                     <a>DescribeAlias</a> |
///                     <a>UpdateAlias</a> |
///                     <a>DeleteAlias</a> |
///                     <a>ResolveAlias</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a>
///          </p>
public struct Alias: Equatable {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift alias resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::alias/alias-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>. In a GameLift alias ARN, the resource ID matches the alias ID value.</p>
    public let aliasArn: String?
    /// <p>A unique identifier for the alias. Alias IDs are unique within a Region.</p>
    public let aliasId: String?
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>A human-readable description of an alias.</p>
    public let description: String?
    /// <p>The time that this data object was last modified. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let lastUpdatedTime: Date?
    /// <p>A descriptive label that is associated with an alias. Alias names do not need to be unique.</p>
    public let name: String?
    /// <p>The routing configuration, including routing type and fleet target, for the alias. </p>
    public let routingStrategy: RoutingStrategy?

    public init (
        aliasArn: String? = nil,
        aliasId: String? = nil,
        creationTime: Date? = nil,
        description: String? = nil,
        lastUpdatedTime: Date? = nil,
        name: String? = nil,
        routingStrategy: RoutingStrategy? = nil
    )
    {
        self.aliasArn = aliasArn
        self.aliasId = aliasId
        self.creationTime = creationTime
        self.description = description
        self.lastUpdatedTime = lastUpdatedTime
        self.name = name
        self.routingStrategy = routingStrategy
    }
}

extension AttributeValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case n = "N"
        case s = "S"
        case sDM = "SDM"
        case sL = "SL"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let n = n {
            try encodeContainer.encode(n, forKey: .n)
        }
        if let s = s {
            try encodeContainer.encode(s, forKey: .s)
        }
        if let sDM = sDM {
            var sDMContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .sDM)
            for (dictKey0, stringdoublemap0) in sDM {
                try sDMContainer.encode(stringdoublemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let sL = sL {
            var sLContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sL)
            for stringlist0 in sL {
                try sLContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s)
        s = sDecoded
        let nDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .n)
        n = nDecoded
        let sLContainer = try containerValues.decodeIfPresent([String?].self, forKey: .sL)
        var sLDecoded0:[String]? = nil
        if let sLContainer = sLContainer {
            sLDecoded0 = [String]()
            for string0 in sLContainer {
                if let string0 = string0 {
                    sLDecoded0?.append(string0)
                }
            }
        }
        sL = sLDecoded0
        let sDMContainer = try containerValues.decodeIfPresent([String: Double?].self, forKey: .sDM)
        var sDMDecoded0: [String:Double]? = nil
        if let sDMContainer = sDMContainer {
            sDMDecoded0 = [String:Double]()
            for (key0, doubleobject0) in sDMContainer {
                if let doubleobject0 = doubleobject0 {
                    sDMDecoded0?[key0] = doubleobject0
                }
            }
        }
        sDM = sDMDecoded0
    }
}

extension AttributeValue: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AttributeValue(n: \(String(describing: n)), s: \(String(describing: s)), sDM: \(String(describing: sDM)), sL: \(String(describing: sL)))"}
}

/// <p>Values for use in <a>Player</a> attribute key-value pairs. This object lets
///             you specify an attribute value using any of the valid data types: string, number, string
///             array, or data map. Each <code>AttributeValue</code> object can use only one of the
///             available properties.</p>
public struct AttributeValue: Equatable {
    /// <p>For number values, expressed as double.</p>
    public let n: Double?
    /// <p>For single string values. Maximum string length is 100 characters.</p>
    public let s: String?
    /// <p>For a map of up to 10 data type:value pairs. Maximum length for each string value
    ///             is 100 characters. </p>
    public let sDM: [String:Double]?
    /// <p>For a list of up to 10 strings. Maximum length for each string is 100 characters.
    ///             Duplicate values are not recognized; all occurrences of the repeated value after the
    ///             first of a repeated value are ignored.</p>
    public let sL: [String]?

    public init (
        n: Double? = nil,
        s: String? = nil,
        sDM: [String:Double]? = nil,
        sL: [String]? = nil
    )
    {
        self.n = n
        self.s = s
        self.sDM = sDM
        self.sL = sL
    }
}

extension AwsCredentials: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessKeyId = "AccessKeyId"
        case secretAccessKey = "SecretAccessKey"
        case sessionToken = "SessionToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessKeyId = accessKeyId {
            try encodeContainer.encode(accessKeyId, forKey: .accessKeyId)
        }
        if let secretAccessKey = secretAccessKey {
            try encodeContainer.encode(secretAccessKey, forKey: .secretAccessKey)
        }
        if let sessionToken = sessionToken {
            try encodeContainer.encode(sessionToken, forKey: .sessionToken)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accessKeyId)
        accessKeyId = accessKeyIdDecoded
        let secretAccessKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretAccessKey)
        secretAccessKey = secretAccessKeyDecoded
        let sessionTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sessionToken)
        sessionToken = sessionTokenDecoded
    }
}

extension AwsCredentials: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CONTENT_REDACTED"
    }
}

/// <p>Temporary access credentials used for uploading game build files to Amazon GameLift. They
///             are valid for a limited time. If they expire before you upload your game build, get a
///             new set by calling <a>RequestUploadCredentials</a>.</p>
public struct AwsCredentials: Equatable {
    /// <p>Temporary key allowing access to the Amazon GameLift S3 account.</p>
    public let accessKeyId: String?
    /// <p>Temporary secret key allowing access to the Amazon GameLift S3 account.</p>
    public let secretAccessKey: String?
    /// <p>Token used to associate a specific build ID with the files uploaded using these
    ///             credentials.</p>
    public let sessionToken: String?

    public init (
        accessKeyId: String? = nil,
        secretAccessKey: String? = nil,
        sessionToken: String? = nil
    )
    {
        self.accessKeyId = accessKeyId
        self.secretAccessKey = secretAccessKey
        self.sessionToken = sessionToken
    }
}

public enum BackfillMode {
    case automatic
    case manual
    case sdkUnknown(String)
}

extension BackfillMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BackfillMode] {
        return [
            .automatic,
            .manual,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .automatic: return "AUTOMATIC"
        case .manual: return "MANUAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BackfillMode(rawValue: rawValue) ?? BackfillMode.sdkUnknown(rawValue)
    }
}

public enum BalancingStrategy {
    case onDemandOnly
    case spotOnly
    case spotPreferred
    case sdkUnknown(String)
}

extension BalancingStrategy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BalancingStrategy] {
        return [
            .onDemandOnly,
            .spotOnly,
            .spotPreferred,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .onDemandOnly: return "ON_DEMAND_ONLY"
        case .spotOnly: return "SPOT_ONLY"
        case .spotPreferred: return "SPOT_PREFERRED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BalancingStrategy(rawValue: rawValue) ?? BalancingStrategy.sdkUnknown(rawValue)
    }
}

extension Build: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case buildArn = "BuildArn"
        case buildId = "BuildId"
        case creationTime = "CreationTime"
        case name = "Name"
        case operatingSystem = "OperatingSystem"
        case sizeOnDisk = "SizeOnDisk"
        case status = "Status"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildArn = buildArn {
            try encodeContainer.encode(buildArn, forKey: .buildArn)
        }
        if let buildId = buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let operatingSystem = operatingSystem {
            try encodeContainer.encode(operatingSystem.rawValue, forKey: .operatingSystem)
        }
        if let sizeOnDisk = sizeOnDisk {
            try encodeContainer.encode(sizeOnDisk, forKey: .sizeOnDisk)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildId)
        buildId = buildIdDecoded
        let buildArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildArn)
        buildArn = buildArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BuildStatus.self, forKey: .status)
        status = statusDecoded
        let sizeOnDiskDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .sizeOnDisk)
        sizeOnDisk = sizeOnDiskDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension Build: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Build(buildArn: \(String(describing: buildArn)), buildId: \(String(describing: buildId)), creationTime: \(String(describing: creationTime)), name: \(String(describing: name)), operatingSystem: \(String(describing: operatingSystem)), sizeOnDisk: \(String(describing: sizeOnDisk)), status: \(String(describing: status)), version: \(String(describing: version)))"}
}

/// <p>Properties describing a custom game build.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>CreateBuild</a> |
///                     <a>ListBuilds</a> |
///                     <a>DescribeBuild</a> |
///                     <a>UpdateBuild</a> |
///                     <a>DeleteBuild</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a>
///          </p>
public struct Build: Equatable {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift build resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::build/build-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>. In a GameLift build ARN, the resource ID matches the
    ///                 <i>BuildId</i> value.</p>
    public let buildArn: String?
    /// <p>A unique identifier for the build.</p>
    public let buildId: String?
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>A descriptive label that is associated with a build. Build names do not need to be unique. It can be set using <a>CreateBuild</a> or <a>UpdateBuild</a>.</p>
    public let name: String?
    /// <p>Operating system that the game server binaries are built to run on. This value
    ///             determines the type of fleet resources that you can use for this build.</p>
    public let operatingSystem: OperatingSystem?
    /// <p>File size of the uploaded game build, expressed in bytes. When the build status is
    ///                 <code>INITIALIZED</code>, this value is 0.</p>
    public let sizeOnDisk: Int?
    /// <p>Current status of the build.</p>
    ///         <p>Possible build statuses include the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>INITIALIZED</b> -- A new build has been defined,
    ///                     but no files have been uploaded. You cannot create fleets for builds that are in
    ///                     this status. When a build is successfully created, the build status is set to
    ///                     this value. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>READY</b> -- The game build has been successfully
    ///                     uploaded. You can now create new fleets for this build.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>FAILED</b> -- The game build upload failed. You
    ///                     cannot create new fleets for this build. </p>
    ///             </li>
    ///          </ul>
    public let status: BuildStatus?
    /// <p>Version information that is associated with a build or script. Version strings do not need to be unique. This value can be set using <a>CreateBuild</a> or <a>UpdateBuild</a>.</p>
    public let version: String?

    public init (
        buildArn: String? = nil,
        buildId: String? = nil,
        creationTime: Date? = nil,
        name: String? = nil,
        operatingSystem: OperatingSystem? = nil,
        sizeOnDisk: Int? = nil,
        status: BuildStatus? = nil,
        version: String? = nil
    )
    {
        self.buildArn = buildArn
        self.buildId = buildId
        self.creationTime = creationTime
        self.name = name
        self.operatingSystem = operatingSystem
        self.sizeOnDisk = sizeOnDisk
        self.status = status
        self.version = version
    }
}

public enum BuildStatus {
    case failed
    case initialized
    case ready
    case sdkUnknown(String)
}

extension BuildStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BuildStatus] {
        return [
            .failed,
            .initialized,
            .ready,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .failed: return "FAILED"
        case .initialized: return "INITIALIZED"
        case .ready: return "READY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BuildStatus(rawValue: rawValue) ?? BuildStatus.sdkUnknown(rawValue)
    }
}

extension CertificateConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateType = "CertificateType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateType = certificateType {
            try encodeContainer.encode(certificateType.rawValue, forKey: .certificateType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateTypeDecoded = try containerValues.decodeIfPresent(CertificateType.self, forKey: .certificateType)
        certificateType = certificateTypeDecoded
    }
}

extension CertificateConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CertificateConfiguration(certificateType: \(String(describing: certificateType)))"}
}

/// <p>Determines whether a TLS/SSL certificate is generated for a fleet. This feature must be
///             enabled when creating the fleet. All instances in a fleet share the same
///             certificate. The certificate can be retrieved by calling the
///                 <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk.html">GameLift Server
///                 SDK</a> operation <code>GetInstanceCertificate</code>. </p>
///         <p>A fleet's certificate configuration is part of <a>FleetAttributes</a>.</p>
public struct CertificateConfiguration: Equatable {
    /// <p>Indicates whether a TLS/SSL certificate is generated for a fleet. </p>
    ///         <p>Valid values include: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <b>GENERATED</b> - Generate a TLS/SSL certificate
    ///                     for this fleet.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>DISABLED</b> - (default) Do not generate a
    ///                     TLS/SSL certificate for this fleet. </p>
    ///             </li>
    ///          </ul>
    ///         <p> </p>
    public let certificateType: CertificateType?

    public init (
        certificateType: CertificateType? = nil
    )
    {
        self.certificateType = certificateType
    }
}

public enum CertificateType {
    case disabled
    case generated
    case sdkUnknown(String)
}

extension CertificateType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CertificateType] {
        return [
            .disabled,
            .generated,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .generated: return "GENERATED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CertificateType(rawValue: rawValue) ?? CertificateType.sdkUnknown(rawValue)
    }
}

public struct ClaimGameServerInputBodyMiddleware: Middleware {
    public let id: String = "ClaimGameServerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ClaimGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<ClaimGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ClaimGameServerInput>
    public typealias MOutput = OperationOutput<ClaimGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ClaimGameServerOutputError>
}

extension ClaimGameServerInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ClaimGameServerInput(gameServerData: \(String(describing: gameServerData)), gameServerGroupName: \(String(describing: gameServerGroupName)), gameServerId: \(String(describing: gameServerId)))"}
}

extension ClaimGameServerInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameServerData = "GameServerData"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerData = gameServerData {
            try encodeContainer.encode(gameServerData, forKey: .gameServerData)
        }
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerId = gameServerId {
            try encodeContainer.encode(gameServerId, forKey: .gameServerId)
        }
    }
}

public struct ClaimGameServerInputHeadersMiddleware: Middleware {
    public let id: String = "ClaimGameServerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ClaimGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<ClaimGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ClaimGameServerInput>
    public typealias MOutput = OperationOutput<ClaimGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ClaimGameServerOutputError>
}

public struct ClaimGameServerInputQueryItemMiddleware: Middleware {
    public let id: String = "ClaimGameServerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ClaimGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<ClaimGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ClaimGameServerInput>
    public typealias MOutput = OperationOutput<ClaimGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ClaimGameServerOutputError>
}

public struct ClaimGameServerInput: Equatable {
    /// <p>A set of custom game server properties, formatted as a single string value. This data
    ///             is passed to a game client or service when it requests information on game servers using
    ///                 <a>ListGameServers</a> or <a>ClaimGameServer</a>. </p>
    public let gameServerData: String?
    /// <p>A unique identifier for the game server group where the game server is running.
    ///             Use either the <a>GameServerGroup</a> name or ARN value. If you are not specifying a game server to claim, this value identifies
    ///             where you want GameLift FleetIQ to look for an available game server to claim. </p>
    public let gameServerGroupName: String?
    /// <p>A custom string that uniquely identifies the game server to claim. If this parameter
    ///             is left empty, GameLift FleetIQ searches for an available game server in the specified game
    ///             server group.</p>
    public let gameServerId: String?

    public init (
        gameServerData: String? = nil,
        gameServerGroupName: String? = nil,
        gameServerId: String? = nil
    )
    {
        self.gameServerData = gameServerData
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
    }
}

struct ClaimGameServerInputBody: Equatable {
    public let gameServerGroupName: String?
    public let gameServerId: String?
    public let gameServerData: String?
}

extension ClaimGameServerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerData = "GameServerData"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerId)
        gameServerId = gameServerIdDecoded
        let gameServerDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerData)
        gameServerData = gameServerDataDecoded
    }
}

extension ClaimGameServerOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ClaimGameServerOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OutOfCapacityException" : self = .outOfCapacityException(try OutOfCapacityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ClaimGameServerOutputError: Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case outOfCapacityException(OutOfCapacityException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ClaimGameServerOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ClaimGameServerOutputResponse(gameServer: \(String(describing: gameServer)))"}
}

extension ClaimGameServerOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ClaimGameServerOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameServer = output.gameServer
        } else {
            self.gameServer = nil
        }
    }
}

public struct ClaimGameServerOutputResponse: Equatable {
    /// <p>Object that describes the newly claimed game server.</p>
    public let gameServer: GameServer?

    public init (
        gameServer: GameServer? = nil
    )
    {
        self.gameServer = gameServer
    }
}

struct ClaimGameServerOutputResponseBody: Equatable {
    public let gameServer: GameServer?
}

extension ClaimGameServerOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServer = "GameServer"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerDecoded = try containerValues.decodeIfPresent(GameServer.self, forKey: .gameServer)
        gameServer = gameServerDecoded
    }
}

public enum ComparisonOperatorType {
    case greaterthanorequaltothreshold
    case greaterthanthreshold
    case lessthanorequaltothreshold
    case lessthanthreshold
    case sdkUnknown(String)
}

extension ComparisonOperatorType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ComparisonOperatorType] {
        return [
            .greaterthanorequaltothreshold,
            .greaterthanthreshold,
            .lessthanorequaltothreshold,
            .lessthanthreshold,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .greaterthanorequaltothreshold: return "GreaterThanOrEqualToThreshold"
        case .greaterthanthreshold: return "GreaterThanThreshold"
        case .lessthanorequaltothreshold: return "LessThanOrEqualToThreshold"
        case .lessthanthreshold: return "LessThanThreshold"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ComparisonOperatorType(rawValue: rawValue) ?? ComparisonOperatorType.sdkUnknown(rawValue)
    }
}

extension ConflictException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ConflictException(message: \(String(describing: message)))"}
}

extension ConflictException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested operation would cause a conflict with the current state of a service
///             resource associated with the request. Resolve the conflict before retrying this
///             request.</p>
public struct ConflictException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Equatable {
    public let message: String?
}

extension ConflictExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct CreateAliasInputBodyMiddleware: Middleware {
    public let id: String = "CreateAliasInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAliasInput>
    public typealias MOutput = OperationOutput<CreateAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAliasOutputError>
}

extension CreateAliasInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateAliasInput(description: \(String(describing: description)), name: \(String(describing: name)), routingStrategy: \(String(describing: routingStrategy)), tags: \(String(describing: tags)))"}
}

extension CreateAliasInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case name = "Name"
        case routingStrategy = "RoutingStrategy"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let routingStrategy = routingStrategy {
            try encodeContainer.encode(routingStrategy, forKey: .routingStrategy)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateAliasInputHeadersMiddleware: Middleware {
    public let id: String = "CreateAliasInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAliasInput>
    public typealias MOutput = OperationOutput<CreateAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAliasOutputError>
}

public struct CreateAliasInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateAliasInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAliasInput>
    public typealias MOutput = OperationOutput<CreateAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAliasOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct CreateAliasInput: Equatable {
    /// <p>A human-readable description of the alias.</p>
    public let description: String?
    /// <p>A descriptive label that is associated with an alias. Alias names do not need to be unique.</p>
    public let name: String?
    /// <p>The routing configuration, including routing type and fleet target, for the alias. </p>
    public let routingStrategy: RoutingStrategy?
    /// <p>A list of labels to assign to the new alias resource. Tags are developer-defined
    ///             key-value pairs. Tagging
    ///             AWS resources are useful for resource management, access management and cost allocation.
    ///             For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging AWS Resources</a> in the
    ///                 <i>AWS General Reference</i>. Once the resource is created, you can
    ///             use <a>TagResource</a>, <a>UntagResource</a>, and
    ///             <a>ListTagsForResource</a> to add, remove, and view tags. The
    ///             maximum tag limit may be lower than stated. See the AWS General Reference for actual
    ///             tagging limits.</p>
    public let tags: [Tag]?

    public init (
        description: String? = nil,
        name: String? = nil,
        routingStrategy: RoutingStrategy? = nil,
        tags: [Tag]? = nil
    )
    {
        self.description = description
        self.name = name
        self.routingStrategy = routingStrategy
        self.tags = tags
    }
}

struct CreateAliasInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let routingStrategy: RoutingStrategy?
    public let tags: [Tag]?
}

extension CreateAliasInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case name = "Name"
        case routingStrategy = "RoutingStrategy"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let routingStrategyDecoded = try containerValues.decodeIfPresent(RoutingStrategy.self, forKey: .routingStrategy)
        routingStrategy = routingStrategyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateAliasOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAliasOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAliasOutputError: Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAliasOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateAliasOutputResponse(alias: \(String(describing: alias)))"}
}

extension CreateAliasOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateAliasOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.alias = output.alias
        } else {
            self.alias = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct CreateAliasOutputResponse: Equatable {
    /// <p>The newly created alias resource.</p>
    public let alias: Alias?

    public init (
        alias: Alias? = nil
    )
    {
        self.alias = alias
    }
}

struct CreateAliasOutputResponseBody: Equatable {
    public let alias: Alias?
}

extension CreateAliasOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case alias = "Alias"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasDecoded = try containerValues.decodeIfPresent(Alias.self, forKey: .alias)
        alias = aliasDecoded
    }
}

public struct CreateBuildInputBodyMiddleware: Middleware {
    public let id: String = "CreateBuildInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateBuildInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateBuildInput>
    public typealias MOutput = OperationOutput<CreateBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateBuildOutputError>
}

extension CreateBuildInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateBuildInput(name: \(String(describing: name)), operatingSystem: \(String(describing: operatingSystem)), storageLocation: \(String(describing: storageLocation)), tags: \(String(describing: tags)), version: \(String(describing: version)))"}
}

extension CreateBuildInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case operatingSystem = "OperatingSystem"
        case storageLocation = "StorageLocation"
        case tags = "Tags"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let operatingSystem = operatingSystem {
            try encodeContainer.encode(operatingSystem.rawValue, forKey: .operatingSystem)
        }
        if let storageLocation = storageLocation {
            try encodeContainer.encode(storageLocation, forKey: .storageLocation)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

public struct CreateBuildInputHeadersMiddleware: Middleware {
    public let id: String = "CreateBuildInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateBuildInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateBuildInput>
    public typealias MOutput = OperationOutput<CreateBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateBuildOutputError>
}

public struct CreateBuildInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateBuildInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateBuildInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateBuildInput>
    public typealias MOutput = OperationOutput<CreateBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateBuildOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct CreateBuildInput: Equatable {
    /// <p>A descriptive label that is associated with a build. Build names do not need to be unique. You can use <a>UpdateBuild</a> to change this value later.
    ///         </p>
    public let name: String?
    /// <p>The operating system that the game server binaries are built to run on. This value
    ///             determines the type of fleet resources that you can use for this build. If your game
    ///             build contains multiple executables, they all must run on the same operating system. If
    ///             an operating system is not specified when creating a build, Amazon GameLift uses the
    ///             default value (WINDOWS_2012). This value cannot be changed later.</p>
    public let operatingSystem: OperatingSystem?
    /// <p>Information indicating where your game build files are stored. Use this parameter only
    ///             when creating a build with files stored in an Amazon S3 bucket that you own. The storage
    ///             location must specify an Amazon S3 bucket name and key. The location must also specify a role
    ///             ARN that you set up to allow Amazon GameLift to access your Amazon S3 bucket. The S3 bucket and your
    ///             new build must be in the same Region.</p>
    public let storageLocation: S3Location?
    /// <p>A list of labels to assign to the new build resource. Tags are developer-defined
    ///             key-value pairs. Tagging
    ///             AWS resources are useful for resource management, access management and cost allocation.
    ///             For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging AWS Resources</a> in the
    ///             <i>AWS General Reference</i>. Once the resource is created, you can
    ///             use <a>TagResource</a>, <a>UntagResource</a>, and
    ///             <a>ListTagsForResource</a> to add, remove, and view tags. The
    ///             maximum tag limit may be lower than stated. See the AWS General Reference for actual
    ///             tagging limits.</p>
    public let tags: [Tag]?
    /// <p>Version information that is associated with a build or script. Version strings do not need to be unique. You can use <a>UpdateBuild</a> to change this value later.
    ///         </p>
    public let version: String?

    public init (
        name: String? = nil,
        operatingSystem: OperatingSystem? = nil,
        storageLocation: S3Location? = nil,
        tags: [Tag]? = nil,
        version: String? = nil
    )
    {
        self.name = name
        self.operatingSystem = operatingSystem
        self.storageLocation = storageLocation
        self.tags = tags
        self.version = version
    }
}

struct CreateBuildInputBody: Equatable {
    public let name: String?
    public let version: String?
    public let storageLocation: S3Location?
    public let operatingSystem: OperatingSystem?
    public let tags: [Tag]?
}

extension CreateBuildInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case operatingSystem = "OperatingSystem"
        case storageLocation = "StorageLocation"
        case tags = "Tags"
        case version = "Version"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(S3Location.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateBuildOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateBuildOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateBuildOutputError: Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateBuildOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateBuildOutputResponse(build: \(String(describing: build)), storageLocation: \(String(describing: storageLocation)), uploadCredentials: \(String(describing: uploadCredentials)))"}
}

extension CreateBuildOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateBuildOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.build = output.build
            self.storageLocation = output.storageLocation
            self.uploadCredentials = output.uploadCredentials
        } else {
            self.build = nil
            self.storageLocation = nil
            self.uploadCredentials = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct CreateBuildOutputResponse: Equatable {
    /// <p>The newly created build resource, including a unique build IDs and status. </p>
    public let build: Build?
    /// <p>Amazon S3 location for your game build file, including bucket name and
    ///             key.</p>
    public let storageLocation: S3Location?
    /// <p>This element is returned only when the operation is called without a storage
    ///             location. It contains credentials to use when you are uploading a build file to an Amazon S3
    ///             bucket that is owned by Amazon GameLift. Credentials have a limited life span. To refresh these
    ///             credentials, call <a>RequestUploadCredentials</a>. </p>
    public let uploadCredentials: AwsCredentials?

    public init (
        build: Build? = nil,
        storageLocation: S3Location? = nil,
        uploadCredentials: AwsCredentials? = nil
    )
    {
        self.build = build
        self.storageLocation = storageLocation
        self.uploadCredentials = uploadCredentials
    }
}

struct CreateBuildOutputResponseBody: Equatable {
    public let build: Build?
    public let uploadCredentials: AwsCredentials?
    public let storageLocation: S3Location?
}

extension CreateBuildOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case build = "Build"
        case storageLocation = "StorageLocation"
        case uploadCredentials = "UploadCredentials"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildDecoded = try containerValues.decodeIfPresent(Build.self, forKey: .build)
        build = buildDecoded
        let uploadCredentialsDecoded = try containerValues.decodeIfPresent(AwsCredentials.self, forKey: .uploadCredentials)
        uploadCredentials = uploadCredentialsDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(S3Location.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
    }
}

public struct CreateFleetInputBodyMiddleware: Middleware {
    public let id: String = "CreateFleetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFleetInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFleetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFleetInput>
    public typealias MOutput = OperationOutput<CreateFleetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFleetOutputError>
}

extension CreateFleetInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateFleetInput(buildId: \(String(describing: buildId)), certificateConfiguration: \(String(describing: certificateConfiguration)), description: \(String(describing: description)), eC2InboundPermissions: \(String(describing: eC2InboundPermissions)), eC2InstanceType: \(String(describing: eC2InstanceType)), fleetType: \(String(describing: fleetType)), instanceRoleArn: \(String(describing: instanceRoleArn)), locations: \(String(describing: locations)), logPaths: \(String(describing: logPaths)), metricGroups: \(String(describing: metricGroups)), name: \(String(describing: name)), newGameSessionProtectionPolicy: \(String(describing: newGameSessionProtectionPolicy)), peerVpcAwsAccountId: \(String(describing: peerVpcAwsAccountId)), peerVpcId: \(String(describing: peerVpcId)), resourceCreationLimitPolicy: \(String(describing: resourceCreationLimitPolicy)), runtimeConfiguration: \(String(describing: runtimeConfiguration)), scriptId: \(String(describing: scriptId)), serverLaunchParameters: \(String(describing: serverLaunchParameters)), serverLaunchPath: \(String(describing: serverLaunchPath)), tags: \(String(describing: tags)))"}
}

extension CreateFleetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case buildId = "BuildId"
        case certificateConfiguration = "CertificateConfiguration"
        case description = "Description"
        case eC2InboundPermissions = "EC2InboundPermissions"
        case eC2InstanceType = "EC2InstanceType"
        case fleetType = "FleetType"
        case instanceRoleArn = "InstanceRoleArn"
        case locations = "Locations"
        case logPaths = "LogPaths"
        case metricGroups = "MetricGroups"
        case name = "Name"
        case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
        case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
        case peerVpcId = "PeerVpcId"
        case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
        case runtimeConfiguration = "RuntimeConfiguration"
        case scriptId = "ScriptId"
        case serverLaunchParameters = "ServerLaunchParameters"
        case serverLaunchPath = "ServerLaunchPath"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildId = buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
        if let certificateConfiguration = certificateConfiguration {
            try encodeContainer.encode(certificateConfiguration, forKey: .certificateConfiguration)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eC2InboundPermissions = eC2InboundPermissions {
            var eC2InboundPermissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eC2InboundPermissions)
            for ippermissionslist0 in eC2InboundPermissions {
                try eC2InboundPermissionsContainer.encode(ippermissionslist0)
            }
        }
        if let eC2InstanceType = eC2InstanceType {
            try encodeContainer.encode(eC2InstanceType.rawValue, forKey: .eC2InstanceType)
        }
        if let fleetType = fleetType {
            try encodeContainer.encode(fleetType.rawValue, forKey: .fleetType)
        }
        if let instanceRoleArn = instanceRoleArn {
            try encodeContainer.encode(instanceRoleArn, forKey: .instanceRoleArn)
        }
        if let locations = locations {
            var locationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .locations)
            for locationconfigurationlist0 in locations {
                try locationsContainer.encode(locationconfigurationlist0)
            }
        }
        if let logPaths = logPaths {
            var logPathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logPaths)
            for stringlist0 in logPaths {
                try logPathsContainer.encode(stringlist0)
            }
        }
        if let metricGroups = metricGroups {
            var metricGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricGroups)
            for metricgrouplist0 in metricGroups {
                try metricGroupsContainer.encode(metricgrouplist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let newGameSessionProtectionPolicy = newGameSessionProtectionPolicy {
            try encodeContainer.encode(newGameSessionProtectionPolicy.rawValue, forKey: .newGameSessionProtectionPolicy)
        }
        if let peerVpcAwsAccountId = peerVpcAwsAccountId {
            try encodeContainer.encode(peerVpcAwsAccountId, forKey: .peerVpcAwsAccountId)
        }
        if let peerVpcId = peerVpcId {
            try encodeContainer.encode(peerVpcId, forKey: .peerVpcId)
        }
        if let resourceCreationLimitPolicy = resourceCreationLimitPolicy {
            try encodeContainer.encode(resourceCreationLimitPolicy, forKey: .resourceCreationLimitPolicy)
        }
        if let runtimeConfiguration = runtimeConfiguration {
            try encodeContainer.encode(runtimeConfiguration, forKey: .runtimeConfiguration)
        }
        if let scriptId = scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
        if let serverLaunchParameters = serverLaunchParameters {
            try encodeContainer.encode(serverLaunchParameters, forKey: .serverLaunchParameters)
        }
        if let serverLaunchPath = serverLaunchPath {
            try encodeContainer.encode(serverLaunchPath, forKey: .serverLaunchPath)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateFleetInputHeadersMiddleware: Middleware {
    public let id: String = "CreateFleetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFleetInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFleetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFleetInput>
    public typealias MOutput = OperationOutput<CreateFleetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFleetOutputError>
}

public struct CreateFleetInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateFleetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFleetInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFleetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFleetInput>
    public typealias MOutput = OperationOutput<CreateFleetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFleetOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct CreateFleetInput: Equatable {
    /// <p>The unique identifier for a custom game server build to be deployed on fleet
    ///             instances. You can use either the build ID or ARN. The build must be uploaded to GameLift
    ///             and in <code>READY</code> status. This fleet property cannot be changed later.</p>
    public let buildId: String?
    /// <p>Prompts GameLift to generate a TLS/SSL certificate for the fleet. TLS certificates are
    ///             used for encrypting traffic between game clients and the game servers that are running
    ///             on GameLift. By default, the <code>CertificateConfiguration</code> is set to
    ///                 <code>DISABLED</code>. Learn more at <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-howitworks.html#gamelift-howitworks-security">Securing Client/Server Communication</a>. This property cannot be changed after
    ///             the fleet is created. </p>
    ///         <p>Note: This feature requires the AWS Certificate Manager (ACM) service, which is not
    ///             available in all AWS regions. When working in a region that does not support this
    ///             feature, a fleet creation request with certificate generation fails with a 4xx
    ///             error.</p>
    public let certificateConfiguration: CertificateConfiguration?
    /// <p>A human-readable description of the fleet.</p>
    public let description: String?
    /// <p>The allowed IP address ranges and port settings that allow inbound traffic to access
    ///             game sessions on this fleet. If the fleet is hosting a custom game build, this property
    ///             must be set before players can connect to game sessions. For Realtime Servers fleets, GameLift
    ///             automatically sets TCP and UDP ranges. </p>
    public let eC2InboundPermissions: [IpPermission]?
    /// <p>The GameLift-supported EC2 instance type to use for all fleet instances. Instance
    ///             type determines the computing resources that will be used to host your game servers,
    ///             including CPU, memory, storage, and networking capacity. See <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 Instance Types</a> for detailed descriptions
    ///             of EC2 instance types.</p>
    public let eC2InstanceType: EC2InstanceType?
    /// <p>Indicates whether to use On-Demand or Spot instances for this fleet. By default, this
    ///             property is set to <code>ON_DEMAND</code>. Learn more about when to use <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot"> On-Demand versus Spot Instances</a>. This property cannot be changed after the
    ///             fleet is created.</p>
    public let fleetType: FleetType?
    /// <p>A unique identifier for an AWS IAM role that manages access to your AWS services.
    ///         With an instance role ARN set, any application that runs on an instance in this fleet can assume the role,
    ///         including install scripts, server processes, and daemons (background processes). Create a role or look up a role's
    ///         ARN by using the <a href="https://console.aws.amazon.com/iam/">IAM dashboard</a> in the AWS Management Console.
    ///         Learn more about using on-box credentials for your game servers at
    ///         <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html">
    ///         Access external resources from a game server</a>.  This property cannot be changed after the fleet is created.</p>
    public let instanceRoleArn: String?
    /// <p>A set of remote locations to deploy additional instances to and manage as part of the
    ///             fleet. This parameter can only be used when creating fleets in AWS Regions that support
    ///             multiple locations. You can add any GameLift-supported AWS Region as a remote location,
    ///             in the form of an AWS Region code such as <code>us-west-2</code>. To create a fleet with
    ///             instances in the home Region only, omit this parameter. </p>
    public let locations: [LocationConfiguration]?
    /// <p>
    ///             <b>This parameter is no longer used.</b> To specify where
    ///             GameLift should store log files once a server process shuts down, use the GameLift server
    ///             API <code>ProcessReady()</code> and specify one or more directory paths in
    ///                 <code>logParameters</code>. See more information in the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api-ref.html#gamelift-sdk-server-api-ref-dataypes-process">Server API Reference</a>. </p>
    public let logPaths: [String]?
    /// <p>The name of an AWS CloudWatch metric group to add this fleet to. A metric group is
    ///             used to aggregate the metrics for multiple fleets. You can specify an existing metric
    ///             group name or set a new name to create a new metric group. A fleet can be included in
    ///             only one metric group at a time. </p>
    public let metricGroups: [String]?
    /// <p>A descriptive label that is associated with a fleet. Fleet names do not need to be unique.</p>
    public let name: String?
    /// <p>The status of termination protection for active game sessions on the fleet. By
    ///             default, this property is set to <code>NoProtection</code>. You can also set game
    ///             session protection for an individual game session by calling <a>UpdateGameSession</a>.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>NoProtection</b> - Game sessions can be terminated
    ///                     during active gameplay as a result of a scale-down event. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>FullProtection</b> - Game sessions in
    ///                         <code>ACTIVE</code> status cannot be terminated during a scale-down
    ///                     event.</p>
    ///             </li>
    ///          </ul>
    public let newGameSessionProtectionPolicy: ProtectionPolicy?
    /// <p>Used when peering your GameLift fleet with a VPC, the unique identifier for the AWS
    ///             account that owns the VPC. You can find your account ID in the AWS Management Console under account
    ///             settings. </p>
    public let peerVpcAwsAccountId: String?
    /// <p>A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The
    ///             VPC must be in the same Region as your fleet. To look up a VPC ID, use the
    ///             <a href="https://console.aws.amazon.com/vpc/">VPC Dashboard</a> in the AWS Management Console.
    ///             Learn more about VPC peering in <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html">VPC Peering with GameLift Fleets</a>. </p>
    public let peerVpcId: String?
    /// <p>A policy that limits the number of game sessions that an individual player can create
    ///             on instances in this fleet within a specified span of time.</p>
    public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
    /// <p>Instructions for how to launch and maintain server processes on instances in the
    ///             fleet. The runtime configuration defines one or more server process configurations, each
    ///             identifying a build executable or Realtime script file and the number of processes of
    ///             that type to run concurrently. </p>
    ///         <note>
    ///             <p>The <code>RuntimeConfiguration</code> parameter is required unless the fleet is
    ///                 being configured using the older parameters <code>ServerLaunchPath</code> and
    ///                     <code>ServerLaunchParameters</code>, which are still supported for backward
    ///                 compatibility.</p>
    ///         </note>
    public let runtimeConfiguration: RuntimeConfiguration?
    /// <p>The unique identifier for a Realtime configuration script to be deployed on fleet
    ///             instances. You can use either the script ID or ARN. Scripts must be uploaded to GameLift
    ///             prior to creating the fleet. This fleet property cannot be changed later.</p>
    public let scriptId: String?
    /// <p>
    ///             <b>This parameter is no longer used.</b> Specify server
    ///             launch parameters using the <code>RuntimeConfiguration</code> parameter. Requests that
    ///             use this parameter instead continue to be valid.</p>
    public let serverLaunchParameters: String?
    /// <p>
    ///             <b>This parameter is no longer used.</b> Specify a server
    ///             launch path using the <code>RuntimeConfiguration</code> parameter. Requests that use
    ///             this parameter instead continue to be valid.</p>
    public let serverLaunchPath: String?
    /// <p>A list of labels to assign to the new fleet resource. Tags are developer-defined
    ///             key-value pairs. Tagging AWS resources are useful for resource management, access
    ///             management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging AWS Resources</a> in the
    ///                 <i>AWS General Reference</i>. Once the fleet is created, you can use
    ///                 <a>TagResource</a>, <a>UntagResource</a>, and <a>ListTagsForResource</a> to add, remove, and view tags. The maximum tag limit
    ///             may be lower than stated. See the <i>AWS General Reference</i> for actual
    ///             tagging limits.</p>
    public let tags: [Tag]?

    public init (
        buildId: String? = nil,
        certificateConfiguration: CertificateConfiguration? = nil,
        description: String? = nil,
        eC2InboundPermissions: [IpPermission]? = nil,
        eC2InstanceType: EC2InstanceType? = nil,
        fleetType: FleetType? = nil,
        instanceRoleArn: String? = nil,
        locations: [LocationConfiguration]? = nil,
        logPaths: [String]? = nil,
        metricGroups: [String]? = nil,
        name: String? = nil,
        newGameSessionProtectionPolicy: ProtectionPolicy? = nil,
        peerVpcAwsAccountId: String? = nil,
        peerVpcId: String? = nil,
        resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil,
        runtimeConfiguration: RuntimeConfiguration? = nil,
        scriptId: String? = nil,
        serverLaunchParameters: String? = nil,
        serverLaunchPath: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.buildId = buildId
        self.certificateConfiguration = certificateConfiguration
        self.description = description
        self.eC2InboundPermissions = eC2InboundPermissions
        self.eC2InstanceType = eC2InstanceType
        self.fleetType = fleetType
        self.instanceRoleArn = instanceRoleArn
        self.locations = locations
        self.logPaths = logPaths
        self.metricGroups = metricGroups
        self.name = name
        self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
        self.peerVpcAwsAccountId = peerVpcAwsAccountId
        self.peerVpcId = peerVpcId
        self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
        self.runtimeConfiguration = runtimeConfiguration
        self.scriptId = scriptId
        self.serverLaunchParameters = serverLaunchParameters
        self.serverLaunchPath = serverLaunchPath
        self.tags = tags
    }
}

struct CreateFleetInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let buildId: String?
    public let scriptId: String?
    public let serverLaunchPath: String?
    public let serverLaunchParameters: String?
    public let logPaths: [String]?
    public let eC2InstanceType: EC2InstanceType?
    public let eC2InboundPermissions: [IpPermission]?
    public let newGameSessionProtectionPolicy: ProtectionPolicy?
    public let runtimeConfiguration: RuntimeConfiguration?
    public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
    public let metricGroups: [String]?
    public let peerVpcAwsAccountId: String?
    public let peerVpcId: String?
    public let fleetType: FleetType?
    public let instanceRoleArn: String?
    public let certificateConfiguration: CertificateConfiguration?
    public let locations: [LocationConfiguration]?
    public let tags: [Tag]?
}

extension CreateFleetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case buildId = "BuildId"
        case certificateConfiguration = "CertificateConfiguration"
        case description = "Description"
        case eC2InboundPermissions = "EC2InboundPermissions"
        case eC2InstanceType = "EC2InstanceType"
        case fleetType = "FleetType"
        case instanceRoleArn = "InstanceRoleArn"
        case locations = "Locations"
        case logPaths = "LogPaths"
        case metricGroups = "MetricGroups"
        case name = "Name"
        case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
        case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
        case peerVpcId = "PeerVpcId"
        case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
        case runtimeConfiguration = "RuntimeConfiguration"
        case scriptId = "ScriptId"
        case serverLaunchParameters = "ServerLaunchParameters"
        case serverLaunchPath = "ServerLaunchPath"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let buildIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildId)
        buildId = buildIdDecoded
        let scriptIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
        let serverLaunchPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverLaunchPath)
        serverLaunchPath = serverLaunchPathDecoded
        let serverLaunchParametersDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverLaunchParameters)
        serverLaunchParameters = serverLaunchParametersDecoded
        let logPathsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .logPaths)
        var logPathsDecoded0:[String]? = nil
        if let logPathsContainer = logPathsContainer {
            logPathsDecoded0 = [String]()
            for string0 in logPathsContainer {
                if let string0 = string0 {
                    logPathsDecoded0?.append(string0)
                }
            }
        }
        logPaths = logPathsDecoded0
        let eC2InstanceTypeDecoded = try containerValues.decodeIfPresent(EC2InstanceType.self, forKey: .eC2InstanceType)
        eC2InstanceType = eC2InstanceTypeDecoded
        let eC2InboundPermissionsContainer = try containerValues.decodeIfPresent([IpPermission?].self, forKey: .eC2InboundPermissions)
        var eC2InboundPermissionsDecoded0:[IpPermission]? = nil
        if let eC2InboundPermissionsContainer = eC2InboundPermissionsContainer {
            eC2InboundPermissionsDecoded0 = [IpPermission]()
            for structure0 in eC2InboundPermissionsContainer {
                if let structure0 = structure0 {
                    eC2InboundPermissionsDecoded0?.append(structure0)
                }
            }
        }
        eC2InboundPermissions = eC2InboundPermissionsDecoded0
        let newGameSessionProtectionPolicyDecoded = try containerValues.decodeIfPresent(ProtectionPolicy.self, forKey: .newGameSessionProtectionPolicy)
        newGameSessionProtectionPolicy = newGameSessionProtectionPolicyDecoded
        let runtimeConfigurationDecoded = try containerValues.decodeIfPresent(RuntimeConfiguration.self, forKey: .runtimeConfiguration)
        runtimeConfiguration = runtimeConfigurationDecoded
        let resourceCreationLimitPolicyDecoded = try containerValues.decodeIfPresent(ResourceCreationLimitPolicy.self, forKey: .resourceCreationLimitPolicy)
        resourceCreationLimitPolicy = resourceCreationLimitPolicyDecoded
        let metricGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .metricGroups)
        var metricGroupsDecoded0:[String]? = nil
        if let metricGroupsContainer = metricGroupsContainer {
            metricGroupsDecoded0 = [String]()
            for string0 in metricGroupsContainer {
                if let string0 = string0 {
                    metricGroupsDecoded0?.append(string0)
                }
            }
        }
        metricGroups = metricGroupsDecoded0
        let peerVpcAwsAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .peerVpcAwsAccountId)
        peerVpcAwsAccountId = peerVpcAwsAccountIdDecoded
        let peerVpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .peerVpcId)
        peerVpcId = peerVpcIdDecoded
        let fleetTypeDecoded = try containerValues.decodeIfPresent(FleetType.self, forKey: .fleetType)
        fleetType = fleetTypeDecoded
        let instanceRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceRoleArn)
        instanceRoleArn = instanceRoleArnDecoded
        let certificateConfigurationDecoded = try containerValues.decodeIfPresent(CertificateConfiguration.self, forKey: .certificateConfiguration)
        certificateConfiguration = certificateConfigurationDecoded
        let locationsContainer = try containerValues.decodeIfPresent([LocationConfiguration?].self, forKey: .locations)
        var locationsDecoded0:[LocationConfiguration]? = nil
        if let locationsContainer = locationsContainer {
            locationsDecoded0 = [LocationConfiguration]()
            for structure0 in locationsContainer {
                if let structure0 = structure0 {
                    locationsDecoded0?.append(structure0)
                }
            }
        }
        locations = locationsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public struct CreateFleetLocationsInputBodyMiddleware: Middleware {
    public let id: String = "CreateFleetLocationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFleetLocationsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFleetLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFleetLocationsInput>
    public typealias MOutput = OperationOutput<CreateFleetLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFleetLocationsOutputError>
}

extension CreateFleetLocationsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateFleetLocationsInput(fleetId: \(String(describing: fleetId)), locations: \(String(describing: locations)))"}
}

extension CreateFleetLocationsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case locations = "Locations"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let locations = locations {
            var locationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .locations)
            for locationconfigurationlist0 in locations {
                try locationsContainer.encode(locationconfigurationlist0)
            }
        }
    }
}

public struct CreateFleetLocationsInputHeadersMiddleware: Middleware {
    public let id: String = "CreateFleetLocationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFleetLocationsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFleetLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFleetLocationsInput>
    public typealias MOutput = OperationOutput<CreateFleetLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFleetLocationsOutputError>
}

public struct CreateFleetLocationsInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateFleetLocationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFleetLocationsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFleetLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFleetLocationsInput>
    public typealias MOutput = OperationOutput<CreateFleetLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFleetLocationsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct CreateFleetLocationsInput: Equatable {
    /// <p>A unique identifier for the fleet to add locations to. You can use either the fleet ID or ARN value.</p>
    public let fleetId: String?
    /// <p>A list of locations to deploy additional instances to and manage as part of the fleet.
    ///             You can add any GameLift-supported AWS Region as a remote location, in the form of an AWS
    ///             Region code such as <code>us-west-2</code>. </p>
    public let locations: [LocationConfiguration]?

    public init (
        fleetId: String? = nil,
        locations: [LocationConfiguration]? = nil
    )
    {
        self.fleetId = fleetId
        self.locations = locations
    }
}

struct CreateFleetLocationsInputBody: Equatable {
    public let fleetId: String?
    public let locations: [LocationConfiguration]?
}

extension CreateFleetLocationsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case locations = "Locations"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let locationsContainer = try containerValues.decodeIfPresent([LocationConfiguration?].self, forKey: .locations)
        var locationsDecoded0:[LocationConfiguration]? = nil
        if let locationsContainer = locationsContainer {
            locationsDecoded0 = [LocationConfiguration]()
            for structure0 in locationsContainer {
                if let structure0 = structure0 {
                    locationsDecoded0?.append(structure0)
                }
            }
        }
        locations = locationsDecoded0
    }
}

extension CreateFleetLocationsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateFleetLocationsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFleetStatusException" : self = .invalidFleetStatusException(try InvalidFleetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateFleetLocationsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidFleetStatusException(InvalidFleetStatusException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateFleetLocationsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateFleetLocationsOutputResponse(fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)), locationStates: \(String(describing: locationStates)))"}
}

extension CreateFleetLocationsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateFleetLocationsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
            self.locationStates = output.locationStates
        } else {
            self.fleetArn = nil
            self.fleetId = nil
            self.locationStates = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation. </p>
public struct CreateFleetLocationsOutputResponse: Equatable {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>. </p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet that was updated with new locations.</p>
    public let fleetId: String?
    /// <p>The remote locations that are being added to the fleet, and the life-cycle status of each location.
    ///             For new locations, the status is set to <code>NEW</code>.
    ///             During location creation, GameLift updates each location's status as instances
    ///             are deployed there and prepared for game hosting.
    ///         This list does not include the fleet home Region or any remote locations that were already
    ///         added to the fleet.</p>
    public let locationStates: [LocationState]?

    public init (
        fleetArn: String? = nil,
        fleetId: String? = nil,
        locationStates: [LocationState]? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.locationStates = locationStates
    }
}

struct CreateFleetLocationsOutputResponseBody: Equatable {
    public let fleetId: String?
    public let fleetArn: String?
    public let locationStates: [LocationState]?
}

extension CreateFleetLocationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case locationStates = "LocationStates"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let locationStatesContainer = try containerValues.decodeIfPresent([LocationState?].self, forKey: .locationStates)
        var locationStatesDecoded0:[LocationState]? = nil
        if let locationStatesContainer = locationStatesContainer {
            locationStatesDecoded0 = [LocationState]()
            for structure0 in locationStatesContainer {
                if let structure0 = structure0 {
                    locationStatesDecoded0?.append(structure0)
                }
            }
        }
        locationStates = locationStatesDecoded0
    }
}

extension CreateFleetOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateFleetOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateFleetOutputError: Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateFleetOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateFleetOutputResponse(fleetAttributes: \(String(describing: fleetAttributes)), locationStates: \(String(describing: locationStates)))"}
}

extension CreateFleetOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateFleetOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetAttributes = output.fleetAttributes
            self.locationStates = output.locationStates
        } else {
            self.fleetAttributes = nil
            self.locationStates = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct CreateFleetOutputResponse: Equatable {
    /// <p>The properties for the new fleet, including the current status. All fleets are placed
    ///             in <code>NEW</code> status on creation. </p>
    public let fleetAttributes: FleetAttributes?
    /// <p>The fleet's locations and life-cycle status of each location. For new fleets, the
    ///             status of all locations is set to <code>NEW</code>. During fleet creation, GameLift
    ///             updates each location status as instances are deployed there and prepared for game
    ///             hosting. This list includes an entry for the fleet's home Region. For fleets with no
    ///             remote locations, only one entry, representing the home Region, is returned.</p>
    public let locationStates: [LocationState]?

    public init (
        fleetAttributes: FleetAttributes? = nil,
        locationStates: [LocationState]? = nil
    )
    {
        self.fleetAttributes = fleetAttributes
        self.locationStates = locationStates
    }
}

struct CreateFleetOutputResponseBody: Equatable {
    public let fleetAttributes: FleetAttributes?
    public let locationStates: [LocationState]?
}

extension CreateFleetOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetAttributes = "FleetAttributes"
        case locationStates = "LocationStates"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetAttributesDecoded = try containerValues.decodeIfPresent(FleetAttributes.self, forKey: .fleetAttributes)
        fleetAttributes = fleetAttributesDecoded
        let locationStatesContainer = try containerValues.decodeIfPresent([LocationState?].self, forKey: .locationStates)
        var locationStatesDecoded0:[LocationState]? = nil
        if let locationStatesContainer = locationStatesContainer {
            locationStatesDecoded0 = [LocationState]()
            for structure0 in locationStatesContainer {
                if let structure0 = structure0 {
                    locationStatesDecoded0?.append(structure0)
                }
            }
        }
        locationStates = locationStatesDecoded0
    }
}

public struct CreateGameServerGroupInputBodyMiddleware: Middleware {
    public let id: String = "CreateGameServerGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGameServerGroupInput>
    public typealias MOutput = OperationOutput<CreateGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGameServerGroupOutputError>
}

extension CreateGameServerGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateGameServerGroupInput(autoScalingPolicy: \(String(describing: autoScalingPolicy)), balancingStrategy: \(String(describing: balancingStrategy)), gameServerGroupName: \(String(describing: gameServerGroupName)), gameServerProtectionPolicy: \(String(describing: gameServerProtectionPolicy)), instanceDefinitions: \(String(describing: instanceDefinitions)), launchTemplate: \(String(describing: launchTemplate)), maxSize: \(String(describing: maxSize)), minSize: \(String(describing: minSize)), roleArn: \(String(describing: roleArn)), tags: \(String(describing: tags)), vpcSubnets: \(String(describing: vpcSubnets)))"}
}

extension CreateGameServerGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case balancingStrategy = "BalancingStrategy"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case launchTemplate = "LaunchTemplate"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case roleArn = "RoleArn"
        case tags = "Tags"
        case vpcSubnets = "VpcSubnets"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingPolicy = autoScalingPolicy {
            try encodeContainer.encode(autoScalingPolicy, forKey: .autoScalingPolicy)
        }
        if let balancingStrategy = balancingStrategy {
            try encodeContainer.encode(balancingStrategy.rawValue, forKey: .balancingStrategy)
        }
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerProtectionPolicy = gameServerProtectionPolicy {
            try encodeContainer.encode(gameServerProtectionPolicy.rawValue, forKey: .gameServerProtectionPolicy)
        }
        if let instanceDefinitions = instanceDefinitions {
            var instanceDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceDefinitions)
            for instancedefinitions0 in instanceDefinitions {
                try instanceDefinitionsContainer.encode(instancedefinitions0)
            }
        }
        if let launchTemplate = launchTemplate {
            try encodeContainer.encode(launchTemplate, forKey: .launchTemplate)
        }
        if let maxSize = maxSize {
            try encodeContainer.encode(maxSize, forKey: .maxSize)
        }
        if let minSize = minSize {
            try encodeContainer.encode(minSize, forKey: .minSize)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let vpcSubnets = vpcSubnets {
            var vpcSubnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcSubnets)
            for vpcsubnets0 in vpcSubnets {
                try vpcSubnetsContainer.encode(vpcsubnets0)
            }
        }
    }
}

public struct CreateGameServerGroupInputHeadersMiddleware: Middleware {
    public let id: String = "CreateGameServerGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGameServerGroupInput>
    public typealias MOutput = OperationOutput<CreateGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGameServerGroupOutputError>
}

public struct CreateGameServerGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateGameServerGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGameServerGroupInput>
    public typealias MOutput = OperationOutput<CreateGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGameServerGroupOutputError>
}

public struct CreateGameServerGroupInput: Equatable {
    /// <p>Configuration settings to define a scaling policy for the Auto Scaling group that is
    ///             optimized for game hosting. The scaling policy uses the metric
    ///                 <code>"PercentUtilizedGameServers"</code> to maintain a buffer of idle game servers
    ///             that can immediately accommodate new games and players. After the Auto Scaling group is
    ///             created, update this value directly in the Auto Scaling group using the AWS console or
    ///             APIs.</p>
    public let autoScalingPolicy: GameServerGroupAutoScalingPolicy?
    /// <p>Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the
    ///             game server group. Method options include the following:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>SPOT_ONLY</code> - Only Spot Instances are used in the game server group. If Spot
    ///                     Instances are unavailable or not viable for game hosting, the game server group
    ///                     provides no hosting capacity until Spot Instances can again be used. Until then,
    ///                     no new instances are started, and the existing nonviable Spot Instances are
    ///                     terminated (after current gameplay ends) and are not replaced.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>SPOT_PREFERRED</code> - (default value) Spot Instances are used whenever available in
    ///                     the game server group. If Spot Instances are unavailable, the game server group
    ///                     continues to provide hosting capacity by falling back to On-Demand Instances.
    ///                     Existing nonviable Spot Instances are terminated (after current gameplay ends)
    ///                     and are replaced with new On-Demand Instances.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ON_DEMAND_ONLY</code> - Only On-Demand Instances are used in the game
    ///                     server group. No Spot Instances are used, even when available, while this
    ///                     balancing strategy is in force.</p>
    ///             </li>
    ///          </ul>
    public let balancingStrategy: BalancingStrategy?
    /// <p>An identifier for the new game server group. This value is used to generate unique ARN
    ///             identifiers for the EC2 Auto Scaling group and the GameLift FleetIQ game server group. The name
    ///             must be unique per Region per AWS account.</p>
    public let gameServerGroupName: String?
    /// <p>A flag that indicates whether instances in the game server group are protected
    ///             from early termination. Unprotected instances that have active game servers running might
    ///             be terminated during a scale-down event, causing players to be dropped from the game.
    ///             Protected instances cannot be terminated while there are active game servers running except
    ///             in the event of a forced game server group deletion (see ). An exception to this is with Spot
    ///             Instances, which can be terminated by AWS regardless of protection status. This property is set to <code>NO_PROTECTION</code> by default.</p>
    public let gameServerProtectionPolicy: GameServerProtectionPolicy?
    /// <p>The EC2 instance types and sizes to use in the Auto Scaling group. The instance
    ///             definitions must specify at least two different instance types that are supported by
    ///             GameLift FleetIQ. For more information on instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">EC2 Instance Types</a> in the
    ///                 <i>Amazon EC2 User Guide</i>. You can optionally specify capacity
    ///             weighting for each instance type. If no weight value is specified for an instance type,
    ///             it is set to the default value "1". For more information about capacity weighting, see
    ///                 <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html"> Instance Weighting for
    ///                 Amazon EC2 Auto Scaling</a> in the Amazon EC2 Auto Scaling User Guide.</p>
    public let instanceDefinitions: [InstanceDefinition]?
    /// <p>The EC2 launch template that contains configuration settings and game server code to
    ///             be deployed to all instances in the game server group. You can specify the template
    ///             using either the template name or ID. For help with creating a launch template, see
    ///                 <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch
    ///                 Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling
    ///                 User Guide</i>. After the Auto Scaling group is created, update this value
    ///             directly in the Auto Scaling group using the AWS console or APIs.</p>
    ///         <note>
    ///             <p>If you specify network interfaces in your launch template, you must explicitly set
    ///                 the property <code>AssociatePublicIpAddress</code> to "true". If no network
    ///                 interface is specified in the launch template,  GameLift FleetIQ uses your account's default
    ///                 VPC.</p>
    ///         </note>
    public let launchTemplate: LaunchTemplateSpecification?
    /// <p>The maximum number of instances allowed in the EC2 Auto Scaling group. During
    ///             automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum.
    ///             After the Auto Scaling group is created, update this value directly in the Auto Scaling
    ///             group using the AWS console or APIs.</p>
    public let maxSize: Int?
    /// <p>The minimum number of instances allowed in the EC2 Auto Scaling group. During
    ///             automatic scaling events, GameLift FleetIQ and EC2 do not scale down the group below this
    ///             minimum. In production, this value should be set to at least 1. After the Auto Scaling
    ///             group is created, update this value directly in the Auto Scaling group using the AWS
    ///             console or APIs.</p>
    public let minSize: Int?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) for an IAM role that
    ///             allows Amazon GameLift to access your EC2 Auto Scaling groups.</p>
    public let roleArn: String?
    /// <p>A list of labels to assign to the new game server group resource. Tags are
    ///             developer-defined key-value pairs. Tagging AWS resources is useful for resource
    ///             management, access management, and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging AWS
    ///                 Resources</a> in the <i>AWS General Reference</i>. Once the
    ///             resource is created, you can use <a>TagResource</a>, <a>UntagResource</a>, and <a>ListTagsForResource</a> to add, remove,
    ///             and view tags, respectively. The maximum tag limit may be lower than stated. See the
    ///             AWS General Reference for actual tagging limits.</p>
    public let tags: [Tag]?
    /// <p>A list of virtual private cloud (VPC) subnets to use with instances in the game server
    ///             group. By default, all GameLift FleetIQ-supported Availability Zones are used. You can use this
    ///             parameter to specify VPCs that you've set up. This property cannot be updated after the
    ///             game server group is created, and the corresponding Auto Scaling group will always use
    ///             the property value that is set with this request, even if the Auto Scaling group is
    ///             updated directly.</p>
    public let vpcSubnets: [String]?

    public init (
        autoScalingPolicy: GameServerGroupAutoScalingPolicy? = nil,
        balancingStrategy: BalancingStrategy? = nil,
        gameServerGroupName: String? = nil,
        gameServerProtectionPolicy: GameServerProtectionPolicy? = nil,
        instanceDefinitions: [InstanceDefinition]? = nil,
        launchTemplate: LaunchTemplateSpecification? = nil,
        maxSize: Int? = nil,
        minSize: Int? = nil,
        roleArn: String? = nil,
        tags: [Tag]? = nil,
        vpcSubnets: [String]? = nil
    )
    {
        self.autoScalingPolicy = autoScalingPolicy
        self.balancingStrategy = balancingStrategy
        self.gameServerGroupName = gameServerGroupName
        self.gameServerProtectionPolicy = gameServerProtectionPolicy
        self.instanceDefinitions = instanceDefinitions
        self.launchTemplate = launchTemplate
        self.maxSize = maxSize
        self.minSize = minSize
        self.roleArn = roleArn
        self.tags = tags
        self.vpcSubnets = vpcSubnets
    }
}

struct CreateGameServerGroupInputBody: Equatable {
    public let gameServerGroupName: String?
    public let roleArn: String?
    public let minSize: Int?
    public let maxSize: Int?
    public let launchTemplate: LaunchTemplateSpecification?
    public let instanceDefinitions: [InstanceDefinition]?
    public let autoScalingPolicy: GameServerGroupAutoScalingPolicy?
    public let balancingStrategy: BalancingStrategy?
    public let gameServerProtectionPolicy: GameServerProtectionPolicy?
    public let vpcSubnets: [String]?
    public let tags: [Tag]?
}

extension CreateGameServerGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case balancingStrategy = "BalancingStrategy"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case launchTemplate = "LaunchTemplate"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case roleArn = "RoleArn"
        case tags = "Tags"
        case vpcSubnets = "VpcSubnets"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let instanceDefinitionsContainer = try containerValues.decodeIfPresent([InstanceDefinition?].self, forKey: .instanceDefinitions)
        var instanceDefinitionsDecoded0:[InstanceDefinition]? = nil
        if let instanceDefinitionsContainer = instanceDefinitionsContainer {
            instanceDefinitionsDecoded0 = [InstanceDefinition]()
            for structure0 in instanceDefinitionsContainer {
                if let structure0 = structure0 {
                    instanceDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        instanceDefinitions = instanceDefinitionsDecoded0
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(GameServerGroupAutoScalingPolicy.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
        let balancingStrategyDecoded = try containerValues.decodeIfPresent(BalancingStrategy.self, forKey: .balancingStrategy)
        balancingStrategy = balancingStrategyDecoded
        let gameServerProtectionPolicyDecoded = try containerValues.decodeIfPresent(GameServerProtectionPolicy.self, forKey: .gameServerProtectionPolicy)
        gameServerProtectionPolicy = gameServerProtectionPolicyDecoded
        let vpcSubnetsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .vpcSubnets)
        var vpcSubnetsDecoded0:[String]? = nil
        if let vpcSubnetsContainer = vpcSubnetsContainer {
            vpcSubnetsDecoded0 = [String]()
            for string0 in vpcSubnetsContainer {
                if let string0 = string0 {
                    vpcSubnetsDecoded0?.append(string0)
                }
            }
        }
        vpcSubnets = vpcSubnetsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateGameServerGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGameServerGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateGameServerGroupOutputError: Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGameServerGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateGameServerGroupOutputResponse(gameServerGroup: \(String(describing: gameServerGroup)))"}
}

extension CreateGameServerGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateGameServerGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameServerGroup = output.gameServerGroup
        } else {
            self.gameServerGroup = nil
        }
    }
}

public struct CreateGameServerGroupOutputResponse: Equatable {
    /// <p>The newly created game server group object, including the new ARN value for the GameLift FleetIQ
    ///             game server group and the object's status. The EC2 Auto Scaling group ARN is initially
    ///             null, since the group has not yet been created. This value is added once the game server
    ///             group status reaches <code>ACTIVE</code>. </p>
    public let gameServerGroup: GameServerGroup?

    public init (
        gameServerGroup: GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

struct CreateGameServerGroupOutputResponseBody: Equatable {
    public let gameServerGroup: GameServerGroup?
}

extension CreateGameServerGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerGroup = "GameServerGroup"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupDecoded = try containerValues.decodeIfPresent(GameServerGroup.self, forKey: .gameServerGroup)
        gameServerGroup = gameServerGroupDecoded
    }
}

public struct CreateGameSessionInputBodyMiddleware: Middleware {
    public let id: String = "CreateGameSessionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGameSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGameSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGameSessionInput>
    public typealias MOutput = OperationOutput<CreateGameSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGameSessionOutputError>
}

extension CreateGameSessionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateGameSessionInput(aliasId: \(String(describing: aliasId)), creatorId: \(String(describing: creatorId)), fleetId: \(String(describing: fleetId)), gameProperties: \(String(describing: gameProperties)), gameSessionData: \(String(describing: gameSessionData)), gameSessionId: \(String(describing: gameSessionId)), idempotencyToken: \(String(describing: idempotencyToken)), location: \(String(describing: location)), maximumPlayerSessionCount: \(String(describing: maximumPlayerSessionCount)), name: \(String(describing: name)))"}
}

extension CreateGameSessionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
        case creatorId = "CreatorId"
        case fleetId = "FleetId"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionId = "GameSessionId"
        case idempotencyToken = "IdempotencyToken"
        case location = "Location"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
        if let creatorId = creatorId {
            try encodeContainer.encode(creatorId, forKey: .creatorId)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gamepropertylist0 in gameProperties {
                try gamePropertiesContainer.encode(gamepropertylist0)
            }
        }
        if let gameSessionData = gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let maximumPlayerSessionCount = maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct CreateGameSessionInputHeadersMiddleware: Middleware {
    public let id: String = "CreateGameSessionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGameSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGameSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGameSessionInput>
    public typealias MOutput = OperationOutput<CreateGameSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGameSessionOutputError>
}

public struct CreateGameSessionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateGameSessionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGameSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGameSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGameSessionInput>
    public typealias MOutput = OperationOutput<CreateGameSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGameSessionOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct CreateGameSessionInput: Equatable {
    /// <p>A unique identifier for the alias associated with the fleet to create a game session in. You can use either the
    ///             alias ID or ARN value. Each request must reference either a fleet ID or alias ID, but
    ///             not both.</p>
    public let aliasId: String?
    /// <p>A unique identifier for a player or entity creating the game session. This parameter is required when
    ///             requesting a new game session on a fleet with a resource creation limit policy. This
    ///             type of policy limits the number of concurrent active game sessions that one player can
    ///             create within a certain time span. GameLift uses the CreatorId to evaluate the new
    ///             request against the policy.</p>
    public let creatorId: String?
    /// <p>A unique identifier for the fleet to create a game session in. You can use either the fleet ID or ARN value. Each
    ///             request must reference either a fleet ID or alias ID, but not both.</p>
    public let fleetId: String?
    /// <p>A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session.</p>
    public let gameProperties: [GameProperty]?
    /// <p>A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session.</p>
    public let gameSessionData: String?
    /// <p>
    ///             <i>This parameter is no longer preferred. Please use
    ///                     <code>IdempotencyToken</code> instead.</i> Custom string that uniquely
    ///             identifies a request for a new game session. Maximum token length is 48 characters. If
    ///             provided, this string is included in the new game session's ID.</p>
    public let gameSessionId: String?
    /// <p>Custom string that uniquely identifies the new game session request.  This is useful
    ///             for ensuring that game session requests with the same idempotency token are processed
    ///             only once. Subsequent requests with the same string return the original
    ///                 <code>GameSession</code> object, with an updated status. Maximum token length is 48
    ///             characters. If provided, this string is included in the new game session's ID.
    ///             A game session ARN has the following format:
    ///     <code>arn:aws:gamelift:<region>::gamesession/<fleet ID>/<custom ID string or idempotency token></code>. Idempotency tokens remain in use for 30 days after a game session has ended;
    ///             game session objects are retained for this time period and then deleted.</p>
    public let idempotencyToken: String?
    /// <p>A fleet's remote location to place the new game session in. If this parameter is not
    ///             set, the new game session is placed in the fleet's home Region. Specify a remote
    ///             location with an AWS Region code such as <code>us-west-2</code>.  </p>
    public let location: String?
    /// <p>The maximum number of players that can be connected simultaneously to the game session.</p>
    public let maximumPlayerSessionCount: Int?
    /// <p>A descriptive label that is associated with a game session. Session names do not need to be unique.</p>
    public let name: String?

    public init (
        aliasId: String? = nil,
        creatorId: String? = nil,
        fleetId: String? = nil,
        gameProperties: [GameProperty]? = nil,
        gameSessionData: String? = nil,
        gameSessionId: String? = nil,
        idempotencyToken: String? = nil,
        location: String? = nil,
        maximumPlayerSessionCount: Int? = nil,
        name: String? = nil
    )
    {
        self.aliasId = aliasId
        self.creatorId = creatorId
        self.fleetId = fleetId
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionId = gameSessionId
        self.idempotencyToken = idempotencyToken
        self.location = location
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
        self.name = name
    }
}

struct CreateGameSessionInputBody: Equatable {
    public let fleetId: String?
    public let aliasId: String?
    public let maximumPlayerSessionCount: Int?
    public let name: String?
    public let gameProperties: [GameProperty]?
    public let creatorId: String?
    public let gameSessionId: String?
    public let idempotencyToken: String?
    public let gameSessionData: String?
    public let location: String?
}

extension CreateGameSessionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
        case creatorId = "CreatorId"
        case fleetId = "FleetId"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionId = "GameSessionId"
        case idempotencyToken = "IdempotencyToken"
        case location = "Location"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case name = "Name"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let aliasIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let creatorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creatorId)
        creatorId = creatorIdDecoded
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension CreateGameSessionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGameSessionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FleetCapacityExceededException" : self = .fleetCapacityExceededException(try FleetCapacityExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFleetStatusException" : self = .invalidFleetStatusException(try InvalidFleetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalRoutingStrategyException" : self = .terminalRoutingStrategyException(try TerminalRoutingStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateGameSessionOutputError: Equatable {
    case conflictException(ConflictException)
    case fleetCapacityExceededException(FleetCapacityExceededException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServiceException(InternalServiceException)
    case invalidFleetStatusException(InvalidFleetStatusException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case terminalRoutingStrategyException(TerminalRoutingStrategyException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGameSessionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateGameSessionOutputResponse(gameSession: \(String(describing: gameSession)))"}
}

extension CreateGameSessionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateGameSessionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameSession = output.gameSession
        } else {
            self.gameSession = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct CreateGameSessionOutputResponse: Equatable {
    /// <p>Object that describes the newly created game session record.</p>
    public let gameSession: GameSession?

    public init (
        gameSession: GameSession? = nil
    )
    {
        self.gameSession = gameSession
    }
}

struct CreateGameSessionOutputResponseBody: Equatable {
    public let gameSession: GameSession?
}

extension CreateGameSessionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSession = "GameSession"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionDecoded = try containerValues.decodeIfPresent(GameSession.self, forKey: .gameSession)
        gameSession = gameSessionDecoded
    }
}

public struct CreateGameSessionQueueInputBodyMiddleware: Middleware {
    public let id: String = "CreateGameSessionQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGameSessionQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGameSessionQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGameSessionQueueInput>
    public typealias MOutput = OperationOutput<CreateGameSessionQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGameSessionQueueOutputError>
}

extension CreateGameSessionQueueInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateGameSessionQueueInput(customEventData: \(String(describing: customEventData)), destinations: \(String(describing: destinations)), filterConfiguration: \(String(describing: filterConfiguration)), name: \(String(describing: name)), notificationTarget: \(String(describing: notificationTarget)), playerLatencyPolicies: \(String(describing: playerLatencyPolicies)), priorityConfiguration: \(String(describing: priorityConfiguration)), tags: \(String(describing: tags)), timeoutInSeconds: \(String(describing: timeoutInSeconds)))"}
}

extension CreateGameSessionQueueInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customEventData = "CustomEventData"
        case destinations = "Destinations"
        case filterConfiguration = "FilterConfiguration"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case playerLatencyPolicies = "PlayerLatencyPolicies"
        case priorityConfiguration = "PriorityConfiguration"
        case tags = "Tags"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customEventData = customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for gamesessionqueuedestinationlist0 in destinations {
                try destinationsContainer.encode(gamesessionqueuedestinationlist0)
            }
        }
        if let filterConfiguration = filterConfiguration {
            try encodeContainer.encode(filterConfiguration, forKey: .filterConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let playerLatencyPolicies = playerLatencyPolicies {
            var playerLatencyPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencyPolicies)
            for playerlatencypolicylist0 in playerLatencyPolicies {
                try playerLatencyPoliciesContainer.encode(playerlatencypolicylist0)
            }
        }
        if let priorityConfiguration = priorityConfiguration {
            try encodeContainer.encode(priorityConfiguration, forKey: .priorityConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let timeoutInSeconds = timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }
}

public struct CreateGameSessionQueueInputHeadersMiddleware: Middleware {
    public let id: String = "CreateGameSessionQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGameSessionQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGameSessionQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGameSessionQueueInput>
    public typealias MOutput = OperationOutput<CreateGameSessionQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGameSessionQueueOutputError>
}

public struct CreateGameSessionQueueInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateGameSessionQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGameSessionQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGameSessionQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGameSessionQueueInput>
    public typealias MOutput = OperationOutput<CreateGameSessionQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGameSessionQueueOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct CreateGameSessionQueueInput: Equatable {
    /// <p>
    ///             Information to be added to all events that are related to this game session queue.
    ///         </p>
    public let customEventData: String?
    /// <p>A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.
    ///     Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.</p>
    public let destinations: [GameSessionQueueDestination]?
    /// <p>A list of locations where a queue is allowed to place new game sessions. Locations
    ///             are specified in the form of AWS Region codes, such as <code>us-west-2</code>. If this parameter is
    ///             not set, game sessions can be placed in any queue location. </p>
    public let filterConfiguration: FilterConfiguration?
    /// <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region.</p>
    public let name: String?
    /// <p>An SNS topic ARN that is set up to receive game session placement notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html">
    ///             Setting up notifications for game session placement</a>.</p>
    public let notificationTarget: String?
    /// <p>A set of policies that act as a sliding cap on player latency. FleetIQ works to
    ///             deliver low latency for most players in a game session. These policies ensure that no
    ///             individual player can be placed into a game with unreasonably high latency. Use multiple
    ///             policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their
    ///             maximum allowed latency, starting with the lowest value.</p>
    public let playerLatencyPolicies: [PlayerLatencyPolicy]?
    /// <p>Custom settings to use when prioritizing destinations and locations for game session placements. This
    ///             configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly
    ///             named will be automatically applied at the end of the prioritization process. </p>
    public let priorityConfiguration: PriorityConfiguration?
    /// <p>A list of labels to assign to the new game session queue resource. Tags are developer-defined
    ///             key-value pairs. Tagging
    ///             AWS resources are useful for resource management, access management and cost allocation.
    ///             For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging AWS Resources</a> in the
    ///             <i>AWS General Reference</i>. Once the resource is created, you can
    ///             use <a>TagResource</a>, <a>UntagResource</a>, and
    ///             <a>ListTagsForResource</a> to add, remove, and view tags. The
    ///             maximum tag limit may be lower than stated. See the AWS General Reference for actual
    ///             tagging limits.</p>
    public let tags: [Tag]?
    /// <p>The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a <code>TIMED_OUT</code> status.</p>
    public let timeoutInSeconds: Int?

    public init (
        customEventData: String? = nil,
        destinations: [GameSessionQueueDestination]? = nil,
        filterConfiguration: FilterConfiguration? = nil,
        name: String? = nil,
        notificationTarget: String? = nil,
        playerLatencyPolicies: [PlayerLatencyPolicy]? = nil,
        priorityConfiguration: PriorityConfiguration? = nil,
        tags: [Tag]? = nil,
        timeoutInSeconds: Int? = nil
    )
    {
        self.customEventData = customEventData
        self.destinations = destinations
        self.filterConfiguration = filterConfiguration
        self.name = name
        self.notificationTarget = notificationTarget
        self.playerLatencyPolicies = playerLatencyPolicies
        self.priorityConfiguration = priorityConfiguration
        self.tags = tags
        self.timeoutInSeconds = timeoutInSeconds
    }
}

struct CreateGameSessionQueueInputBody: Equatable {
    public let name: String?
    public let timeoutInSeconds: Int?
    public let playerLatencyPolicies: [PlayerLatencyPolicy]?
    public let destinations: [GameSessionQueueDestination]?
    public let filterConfiguration: FilterConfiguration?
    public let priorityConfiguration: PriorityConfiguration?
    public let customEventData: String?
    public let notificationTarget: String?
    public let tags: [Tag]?
}

extension CreateGameSessionQueueInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case customEventData = "CustomEventData"
        case destinations = "Destinations"
        case filterConfiguration = "FilterConfiguration"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case playerLatencyPolicies = "PlayerLatencyPolicies"
        case priorityConfiguration = "PriorityConfiguration"
        case tags = "Tags"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let playerLatencyPoliciesContainer = try containerValues.decodeIfPresent([PlayerLatencyPolicy?].self, forKey: .playerLatencyPolicies)
        var playerLatencyPoliciesDecoded0:[PlayerLatencyPolicy]? = nil
        if let playerLatencyPoliciesContainer = playerLatencyPoliciesContainer {
            playerLatencyPoliciesDecoded0 = [PlayerLatencyPolicy]()
            for structure0 in playerLatencyPoliciesContainer {
                if let structure0 = structure0 {
                    playerLatencyPoliciesDecoded0?.append(structure0)
                }
            }
        }
        playerLatencyPolicies = playerLatencyPoliciesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([GameSessionQueueDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[GameSessionQueueDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [GameSessionQueueDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let filterConfigurationDecoded = try containerValues.decodeIfPresent(FilterConfiguration.self, forKey: .filterConfiguration)
        filterConfiguration = filterConfigurationDecoded
        let priorityConfigurationDecoded = try containerValues.decodeIfPresent(PriorityConfiguration.self, forKey: .priorityConfiguration)
        priorityConfiguration = priorityConfigurationDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateGameSessionQueueOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGameSessionQueueOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateGameSessionQueueOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGameSessionQueueOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateGameSessionQueueOutputResponse(gameSessionQueue: \(String(describing: gameSessionQueue)))"}
}

extension CreateGameSessionQueueOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateGameSessionQueueOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameSessionQueue = output.gameSessionQueue
        } else {
            self.gameSessionQueue = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct CreateGameSessionQueueOutputResponse: Equatable {
    /// <p>An object that describes the newly created game session queue.</p>
    public let gameSessionQueue: GameSessionQueue?

    public init (
        gameSessionQueue: GameSessionQueue? = nil
    )
    {
        self.gameSessionQueue = gameSessionQueue
    }
}

struct CreateGameSessionQueueOutputResponseBody: Equatable {
    public let gameSessionQueue: GameSessionQueue?
}

extension CreateGameSessionQueueOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessionQueue = "GameSessionQueue"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionQueueDecoded = try containerValues.decodeIfPresent(GameSessionQueue.self, forKey: .gameSessionQueue)
        gameSessionQueue = gameSessionQueueDecoded
    }
}

public struct CreateMatchmakingConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "CreateMatchmakingConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMatchmakingConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMatchmakingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMatchmakingConfigurationInput>
    public typealias MOutput = OperationOutput<CreateMatchmakingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMatchmakingConfigurationOutputError>
}

extension CreateMatchmakingConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateMatchmakingConfigurationInput(acceptanceRequired: \(String(describing: acceptanceRequired)), acceptanceTimeoutSeconds: \(String(describing: acceptanceTimeoutSeconds)), additionalPlayerCount: \(String(describing: additionalPlayerCount)), backfillMode: \(String(describing: backfillMode)), customEventData: \(String(describing: customEventData)), description: \(String(describing: description)), flexMatchMode: \(String(describing: flexMatchMode)), gameProperties: \(String(describing: gameProperties)), gameSessionData: \(String(describing: gameSessionData)), gameSessionQueueArns: \(String(describing: gameSessionQueueArns)), name: \(String(describing: name)), notificationTarget: \(String(describing: notificationTarget)), requestTimeoutSeconds: \(String(describing: requestTimeoutSeconds)), ruleSetName: \(String(describing: ruleSetName)), tags: \(String(describing: tags)))"}
}

extension CreateMatchmakingConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetName = "RuleSetName"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptanceRequired = acceptanceRequired {
            try encodeContainer.encode(acceptanceRequired, forKey: .acceptanceRequired)
        }
        if let acceptanceTimeoutSeconds = acceptanceTimeoutSeconds {
            try encodeContainer.encode(acceptanceTimeoutSeconds, forKey: .acceptanceTimeoutSeconds)
        }
        if let additionalPlayerCount = additionalPlayerCount {
            try encodeContainer.encode(additionalPlayerCount, forKey: .additionalPlayerCount)
        }
        if let backfillMode = backfillMode {
            try encodeContainer.encode(backfillMode.rawValue, forKey: .backfillMode)
        }
        if let customEventData = customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let flexMatchMode = flexMatchMode {
            try encodeContainer.encode(flexMatchMode.rawValue, forKey: .flexMatchMode)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gamepropertylist0 in gameProperties {
                try gamePropertiesContainer.encode(gamepropertylist0)
            }
        }
        if let gameSessionData = gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionQueueArns = gameSessionQueueArns {
            var gameSessionQueueArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameSessionQueueArns)
            for queuearnslist0 in gameSessionQueueArns {
                try gameSessionQueueArnsContainer.encode(queuearnslist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let requestTimeoutSeconds = requestTimeoutSeconds {
            try encodeContainer.encode(requestTimeoutSeconds, forKey: .requestTimeoutSeconds)
        }
        if let ruleSetName = ruleSetName {
            try encodeContainer.encode(ruleSetName, forKey: .ruleSetName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateMatchmakingConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "CreateMatchmakingConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMatchmakingConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMatchmakingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMatchmakingConfigurationInput>
    public typealias MOutput = OperationOutput<CreateMatchmakingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMatchmakingConfigurationOutputError>
}

public struct CreateMatchmakingConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateMatchmakingConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMatchmakingConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMatchmakingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMatchmakingConfigurationInput>
    public typealias MOutput = OperationOutput<CreateMatchmakingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMatchmakingConfigurationOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct CreateMatchmakingConfigurationInput: Equatable {
    /// <p>A flag that determines whether a match that was created with this configuration must
    ///             be accepted by the matched players. To require acceptance, set to <code>TRUE</code>.
    ///             With this option enabled, matchmaking tickets use the status
    ///             <code>REQUIRES_ACCEPTANCE</code> to indicate when a completed potential match is
    ///             waiting for player acceptance. </p>
    public let acceptanceRequired: Bool?
    /// <p>The length of time (in seconds) to wait for players to accept a proposed match, if
    ///             acceptance is required. </p>
    public let acceptanceTimeoutSeconds: Int?
    /// <p>The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies
    ///             a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match. This parameter is not used if <code>FlexMatchMode</code> is set to
    ///             <code>STANDALONE</code>.</p>
    public let additionalPlayerCount: Int?
    /// <p>The method used to backfill game sessions that are created with this matchmaking
    ///             configuration. Specify <code>MANUAL</code> when your game manages backfill requests
    ///             manually or does not use the match backfill feature. Specify <code>AUTOMATIC</code> to
    ///             have GameLift create a <a>StartMatchBackfill</a> request whenever a game
    ///             session has one or more open slots. Learn more about manual and automatic backfill in
    ///             <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html"> Backfill Existing Games with FlexMatch</a>. Automatic backfill is not
    ///             available when <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    public let backfillMode: BackfillMode?
    /// <p>Information to be added to all events related to this matchmaking configuration.
    ///         </p>
    public let customEventData: String?
    /// <p>A human-readable description of the matchmaking configuration. </p>
    public let description: String?
    /// <p>Indicates whether this matchmaking configuration is being used with GameLift hosting or
    ///             as a standalone matchmaking solution. </p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <b>STANDALONE</b> - FlexMatch forms matches and returns
    ///                 match information, including players and team assignments, in a
    ///                 <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html#match-events-matchmakingsucceeded">
    ///                     MatchmakingSucceeded</a> event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>WITH_QUEUE</b> - FlexMatch forms matches and uses the specified GameLift queue to
    ///                 start a game session for the match. </p>
    ///             </li>
    ///          </ul>
    public let flexMatchMode: FlexMatchMode?
    /// <p>A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <a>GameSession</a>
    ///             object that is created for a successful match. This parameter is not used if
    ///             <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    public let gameProperties: [GameProperty]?
    /// <p>A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <a>GameSession</a> object
    ///             that is created for a successful match. This parameter is not used if
    ///             <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    public let gameSessionData: String?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::gamesessionqueue/<queue name></code>. Queues can be located in any Region. Queues are used to start new
    ///             GameLift-hosted game sessions for matches that are created with this matchmaking
    ///             configuration. If <code>FlexMatchMode</code> is set to <code>STANDALONE</code>, do not
    ///             set this parameter.  </p>
    public let gameSessionQueueArns: [String]?
    /// <p>A unique identifier for the matchmaking configuration. This name is used to identify the configuration associated with a
    ///             matchmaking request or ticket.</p>
    public let name: String?
    /// <p>An SNS topic ARN that is set up to receive matchmaking notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-notification.html">
    ///             Setting up notifications for matchmaking</a> for more information.</p>
    public let notificationTarget: String?
    /// <p>The maximum duration, in seconds, that a matchmaking ticket can remain in process
    ///             before timing out. Requests that fail due to timing out can be resubmitted as
    ///             needed.</p>
    public let requestTimeoutSeconds: Int?
    /// <p>A unique identifier for the matchmaking rule set to use with this configuration. You can use either the rule set name or ARN
    ///             value. A matchmaking configuration can only use rule sets that are defined in the same
    ///             Region.</p>
    public let ruleSetName: String?
    /// <p>A list of labels to assign to the new matchmaking configuration resource. Tags are developer-defined
    ///             key-value pairs. Tagging
    ///             AWS resources are useful for resource management, access management and cost allocation.
    ///             For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging AWS Resources</a> in the
    ///             <i>AWS General Reference</i>. Once the resource is created, you can
    ///             use <a>TagResource</a>, <a>UntagResource</a>, and
    ///             <a>ListTagsForResource</a> to add, remove, and view tags. The
    ///             maximum tag limit may be lower than stated. See the AWS General Reference for actual
    ///             tagging limits.</p>
    public let tags: [Tag]?

    public init (
        acceptanceRequired: Bool? = nil,
        acceptanceTimeoutSeconds: Int? = nil,
        additionalPlayerCount: Int? = nil,
        backfillMode: BackfillMode? = nil,
        customEventData: String? = nil,
        description: String? = nil,
        flexMatchMode: FlexMatchMode? = nil,
        gameProperties: [GameProperty]? = nil,
        gameSessionData: String? = nil,
        gameSessionQueueArns: [String]? = nil,
        name: String? = nil,
        notificationTarget: String? = nil,
        requestTimeoutSeconds: Int? = nil,
        ruleSetName: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.acceptanceRequired = acceptanceRequired
        self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
        self.additionalPlayerCount = additionalPlayerCount
        self.backfillMode = backfillMode
        self.customEventData = customEventData
        self.description = description
        self.flexMatchMode = flexMatchMode
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionQueueArns = gameSessionQueueArns
        self.name = name
        self.notificationTarget = notificationTarget
        self.requestTimeoutSeconds = requestTimeoutSeconds
        self.ruleSetName = ruleSetName
        self.tags = tags
    }
}

struct CreateMatchmakingConfigurationInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let gameSessionQueueArns: [String]?
    public let requestTimeoutSeconds: Int?
    public let acceptanceTimeoutSeconds: Int?
    public let acceptanceRequired: Bool?
    public let ruleSetName: String?
    public let notificationTarget: String?
    public let additionalPlayerCount: Int?
    public let customEventData: String?
    public let gameProperties: [GameProperty]?
    public let gameSessionData: String?
    public let backfillMode: BackfillMode?
    public let flexMatchMode: FlexMatchMode?
    public let tags: [Tag]?
}

extension CreateMatchmakingConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetName = "RuleSetName"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let gameSessionQueueArnsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .gameSessionQueueArns)
        var gameSessionQueueArnsDecoded0:[String]? = nil
        if let gameSessionQueueArnsContainer = gameSessionQueueArnsContainer {
            gameSessionQueueArnsDecoded0 = [String]()
            for string0 in gameSessionQueueArnsContainer {
                if let string0 = string0 {
                    gameSessionQueueArnsDecoded0?.append(string0)
                }
            }
        }
        gameSessionQueueArns = gameSessionQueueArnsDecoded0
        let requestTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .requestTimeoutSeconds)
        requestTimeoutSeconds = requestTimeoutSecondsDecoded
        let acceptanceTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .acceptanceTimeoutSeconds)
        acceptanceTimeoutSeconds = acceptanceTimeoutSecondsDecoded
        let acceptanceRequiredDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .acceptanceRequired)
        acceptanceRequired = acceptanceRequiredDecoded
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
        let additionalPlayerCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .additionalPlayerCount)
        additionalPlayerCount = additionalPlayerCountDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let backfillModeDecoded = try containerValues.decodeIfPresent(BackfillMode.self, forKey: .backfillMode)
        backfillMode = backfillModeDecoded
        let flexMatchModeDecoded = try containerValues.decodeIfPresent(FlexMatchMode.self, forKey: .flexMatchMode)
        flexMatchMode = flexMatchModeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateMatchmakingConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMatchmakingConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMatchmakingConfigurationOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMatchmakingConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateMatchmakingConfigurationOutputResponse(configuration: \(String(describing: configuration)))"}
}

extension CreateMatchmakingConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateMatchmakingConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.configuration = output.configuration
        } else {
            self.configuration = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct CreateMatchmakingConfigurationOutputResponse: Equatable {
    /// <p>Object that describes the newly created matchmaking configuration.</p>
    public let configuration: MatchmakingConfiguration?

    public init (
        configuration: MatchmakingConfiguration? = nil
    )
    {
        self.configuration = configuration
    }
}

struct CreateMatchmakingConfigurationOutputResponseBody: Equatable {
    public let configuration: MatchmakingConfiguration?
}

extension CreateMatchmakingConfigurationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configuration = "Configuration"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationDecoded = try containerValues.decodeIfPresent(MatchmakingConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
    }
}

public struct CreateMatchmakingRuleSetInputBodyMiddleware: Middleware {
    public let id: String = "CreateMatchmakingRuleSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMatchmakingRuleSetInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMatchmakingRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMatchmakingRuleSetInput>
    public typealias MOutput = OperationOutput<CreateMatchmakingRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMatchmakingRuleSetOutputError>
}

extension CreateMatchmakingRuleSetInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateMatchmakingRuleSetInput(name: \(String(describing: name)), ruleSetBody: \(String(describing: ruleSetBody)), tags: \(String(describing: tags)))"}
}

extension CreateMatchmakingRuleSetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case ruleSetBody = "RuleSetBody"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleSetBody = ruleSetBody {
            try encodeContainer.encode(ruleSetBody, forKey: .ruleSetBody)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateMatchmakingRuleSetInputHeadersMiddleware: Middleware {
    public let id: String = "CreateMatchmakingRuleSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMatchmakingRuleSetInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMatchmakingRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMatchmakingRuleSetInput>
    public typealias MOutput = OperationOutput<CreateMatchmakingRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMatchmakingRuleSetOutputError>
}

public struct CreateMatchmakingRuleSetInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateMatchmakingRuleSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMatchmakingRuleSetInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMatchmakingRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMatchmakingRuleSetInput>
    public typealias MOutput = OperationOutput<CreateMatchmakingRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMatchmakingRuleSetOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct CreateMatchmakingRuleSetInput: Equatable {
    /// <p>A unique identifier for the matchmaking rule set. A matchmaking configuration identifies the rule set it uses by this name
    ///             value. Note that the rule set name is different from the optional <code>name</code>
    ///             field in the rule set body.</p>
    public let name: String?
    /// <p>A collection of matchmaking rules, formatted as a JSON string. Comments are not
    ///             allowed in JSON, but most elements support a description field.</p>
    public let ruleSetBody: String?
    /// <p>A list of labels to assign to the new matchmaking rule set resource. Tags are developer-defined
    ///             key-value pairs. Tagging
    ///             AWS resources are useful for resource management, access management and cost allocation.
    ///             For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging AWS Resources</a> in the
    ///             <i>AWS General Reference</i>. Once the resource is created, you can
    ///             use <a>TagResource</a>, <a>UntagResource</a>, and
    ///             <a>ListTagsForResource</a> to add, remove, and view tags. The
    ///             maximum tag limit may be lower than stated. See the AWS General Reference for actual
    ///             tagging limits.</p>
    public let tags: [Tag]?

    public init (
        name: String? = nil,
        ruleSetBody: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.name = name
        self.ruleSetBody = ruleSetBody
        self.tags = tags
    }
}

struct CreateMatchmakingRuleSetInputBody: Equatable {
    public let name: String?
    public let ruleSetBody: String?
    public let tags: [Tag]?
}

extension CreateMatchmakingRuleSetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case ruleSetBody = "RuleSetBody"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let ruleSetBodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleSetBody)
        ruleSetBody = ruleSetBodyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateMatchmakingRuleSetOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMatchmakingRuleSetOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMatchmakingRuleSetOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case taggingFailedException(TaggingFailedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMatchmakingRuleSetOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateMatchmakingRuleSetOutputResponse(ruleSet: \(String(describing: ruleSet)))"}
}

extension CreateMatchmakingRuleSetOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateMatchmakingRuleSetOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.ruleSet = output.ruleSet
        } else {
            self.ruleSet = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct CreateMatchmakingRuleSetOutputResponse: Equatable {
    /// <p>The newly created matchmaking rule set.</p>
    public let ruleSet: MatchmakingRuleSet?

    public init (
        ruleSet: MatchmakingRuleSet? = nil
    )
    {
        self.ruleSet = ruleSet
    }
}

struct CreateMatchmakingRuleSetOutputResponseBody: Equatable {
    public let ruleSet: MatchmakingRuleSet?
}

extension CreateMatchmakingRuleSetOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case ruleSet = "RuleSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetDecoded = try containerValues.decodeIfPresent(MatchmakingRuleSet.self, forKey: .ruleSet)
        ruleSet = ruleSetDecoded
    }
}

public struct CreatePlayerSessionInputBodyMiddleware: Middleware {
    public let id: String = "CreatePlayerSessionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePlayerSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePlayerSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePlayerSessionInput>
    public typealias MOutput = OperationOutput<CreatePlayerSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePlayerSessionOutputError>
}

extension CreatePlayerSessionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreatePlayerSessionInput(gameSessionId: \(String(describing: gameSessionId)), playerData: \(String(describing: playerData)), playerId: \(String(describing: playerId)))"}
}

extension CreatePlayerSessionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameSessionId = "GameSessionId"
        case playerData = "PlayerData"
        case playerId = "PlayerId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let playerData = playerData {
            try encodeContainer.encode(playerData, forKey: .playerData)
        }
        if let playerId = playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
    }
}

public struct CreatePlayerSessionInputHeadersMiddleware: Middleware {
    public let id: String = "CreatePlayerSessionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePlayerSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePlayerSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePlayerSessionInput>
    public typealias MOutput = OperationOutput<CreatePlayerSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePlayerSessionOutputError>
}

public struct CreatePlayerSessionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreatePlayerSessionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePlayerSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePlayerSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePlayerSessionInput>
    public typealias MOutput = OperationOutput<CreatePlayerSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePlayerSessionOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct CreatePlayerSessionInput: Equatable {
    /// <p>A unique identifier for the game session to add a player to.</p>
    public let gameSessionId: String?
    /// <p>Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.</p>
    public let playerData: String?
    /// <p>A unique identifier for a player. Player IDs are developer-defined.</p>
    public let playerId: String?

    public init (
        gameSessionId: String? = nil,
        playerData: String? = nil,
        playerId: String? = nil
    )
    {
        self.gameSessionId = gameSessionId
        self.playerData = playerData
        self.playerId = playerId
    }
}

struct CreatePlayerSessionInputBody: Equatable {
    public let gameSessionId: String?
    public let playerId: String?
    public let playerData: String?
}

extension CreatePlayerSessionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessionId = "GameSessionId"
        case playerData = "PlayerData"
        case playerId = "PlayerId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let playerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let playerDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerData)
        playerData = playerDataDecoded
    }
}

extension CreatePlayerSessionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePlayerSessionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GameSessionFullException" : self = .gameSessionFullException(try GameSessionFullException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGameSessionStatusException" : self = .invalidGameSessionStatusException(try InvalidGameSessionStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalRoutingStrategyException" : self = .terminalRoutingStrategyException(try TerminalRoutingStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePlayerSessionOutputError: Equatable {
    case gameSessionFullException(GameSessionFullException)
    case internalServiceException(InternalServiceException)
    case invalidGameSessionStatusException(InvalidGameSessionStatusException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case terminalRoutingStrategyException(TerminalRoutingStrategyException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePlayerSessionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreatePlayerSessionOutputResponse(playerSession: \(String(describing: playerSession)))"}
}

extension CreatePlayerSessionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreatePlayerSessionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.playerSession = output.playerSession
        } else {
            self.playerSession = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct CreatePlayerSessionOutputResponse: Equatable {
    /// <p>Object that describes the newly created player session record.</p>
    public let playerSession: PlayerSession?

    public init (
        playerSession: PlayerSession? = nil
    )
    {
        self.playerSession = playerSession
    }
}

struct CreatePlayerSessionOutputResponseBody: Equatable {
    public let playerSession: PlayerSession?
}

extension CreatePlayerSessionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case playerSession = "PlayerSession"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerSessionDecoded = try containerValues.decodeIfPresent(PlayerSession.self, forKey: .playerSession)
        playerSession = playerSessionDecoded
    }
}

public struct CreatePlayerSessionsInputBodyMiddleware: Middleware {
    public let id: String = "CreatePlayerSessionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePlayerSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePlayerSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePlayerSessionsInput>
    public typealias MOutput = OperationOutput<CreatePlayerSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePlayerSessionsOutputError>
}

extension CreatePlayerSessionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreatePlayerSessionsInput(gameSessionId: \(String(describing: gameSessionId)), playerDataMap: \(String(describing: playerDataMap)), playerIds: \(String(describing: playerIds)))"}
}

extension CreatePlayerSessionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameSessionId = "GameSessionId"
        case playerDataMap = "PlayerDataMap"
        case playerIds = "PlayerIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let playerDataMap = playerDataMap {
            var playerDataMapContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .playerDataMap)
            for (dictKey0, playerdatamap0) in playerDataMap {
                try playerDataMapContainer.encode(playerdatamap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let playerIds = playerIds {
            var playerIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerIds)
            for playeridlist0 in playerIds {
                try playerIdsContainer.encode(playeridlist0)
            }
        }
    }
}

public struct CreatePlayerSessionsInputHeadersMiddleware: Middleware {
    public let id: String = "CreatePlayerSessionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePlayerSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePlayerSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePlayerSessionsInput>
    public typealias MOutput = OperationOutput<CreatePlayerSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePlayerSessionsOutputError>
}

public struct CreatePlayerSessionsInputQueryItemMiddleware: Middleware {
    public let id: String = "CreatePlayerSessionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePlayerSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePlayerSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePlayerSessionsInput>
    public typealias MOutput = OperationOutput<CreatePlayerSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePlayerSessionsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct CreatePlayerSessionsInput: Equatable {
    /// <p>A unique identifier for the game session to add players to.</p>
    public let gameSessionId: String?
    /// <p>Map of string pairs, each specifying a player ID and a set of developer-defined
    ///             information related to the player. Amazon GameLift does not use this data, so it can be formatted
    ///             as needed for use in the game. Any player data strings for player IDs that are not
    ///             included in the <code>PlayerIds</code> parameter are ignored. </p>
    public let playerDataMap: [String:String]?
    /// <p>List of unique identifiers for the players to be added.</p>
    public let playerIds: [String]?

    public init (
        gameSessionId: String? = nil,
        playerDataMap: [String:String]? = nil,
        playerIds: [String]? = nil
    )
    {
        self.gameSessionId = gameSessionId
        self.playerDataMap = playerDataMap
        self.playerIds = playerIds
    }
}

struct CreatePlayerSessionsInputBody: Equatable {
    public let gameSessionId: String?
    public let playerIds: [String]?
    public let playerDataMap: [String:String]?
}

extension CreatePlayerSessionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessionId = "GameSessionId"
        case playerDataMap = "PlayerDataMap"
        case playerIds = "PlayerIds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let playerIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .playerIds)
        var playerIdsDecoded0:[String]? = nil
        if let playerIdsContainer = playerIdsContainer {
            playerIdsDecoded0 = [String]()
            for string0 in playerIdsContainer {
                if let string0 = string0 {
                    playerIdsDecoded0?.append(string0)
                }
            }
        }
        playerIds = playerIdsDecoded0
        let playerDataMapContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .playerDataMap)
        var playerDataMapDecoded0: [String:String]? = nil
        if let playerDataMapContainer = playerDataMapContainer {
            playerDataMapDecoded0 = [String:String]()
            for (key0, playerdata0) in playerDataMapContainer {
                if let playerdata0 = playerdata0 {
                    playerDataMapDecoded0?[key0] = playerdata0
                }
            }
        }
        playerDataMap = playerDataMapDecoded0
    }
}

extension CreatePlayerSessionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePlayerSessionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GameSessionFullException" : self = .gameSessionFullException(try GameSessionFullException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGameSessionStatusException" : self = .invalidGameSessionStatusException(try InvalidGameSessionStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalRoutingStrategyException" : self = .terminalRoutingStrategyException(try TerminalRoutingStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePlayerSessionsOutputError: Equatable {
    case gameSessionFullException(GameSessionFullException)
    case internalServiceException(InternalServiceException)
    case invalidGameSessionStatusException(InvalidGameSessionStatusException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case terminalRoutingStrategyException(TerminalRoutingStrategyException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePlayerSessionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreatePlayerSessionsOutputResponse(playerSessions: \(String(describing: playerSessions)))"}
}

extension CreatePlayerSessionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreatePlayerSessionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.playerSessions = output.playerSessions
        } else {
            self.playerSessions = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct CreatePlayerSessionsOutputResponse: Equatable {
    /// <p>A collection of player session objects created for the added players.</p>
    public let playerSessions: [PlayerSession]?

    public init (
        playerSessions: [PlayerSession]? = nil
    )
    {
        self.playerSessions = playerSessions
    }
}

struct CreatePlayerSessionsOutputResponseBody: Equatable {
    public let playerSessions: [PlayerSession]?
}

extension CreatePlayerSessionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case playerSessions = "PlayerSessions"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerSessionsContainer = try containerValues.decodeIfPresent([PlayerSession?].self, forKey: .playerSessions)
        var playerSessionsDecoded0:[PlayerSession]? = nil
        if let playerSessionsContainer = playerSessionsContainer {
            playerSessionsDecoded0 = [PlayerSession]()
            for structure0 in playerSessionsContainer {
                if let structure0 = structure0 {
                    playerSessionsDecoded0?.append(structure0)
                }
            }
        }
        playerSessions = playerSessionsDecoded0
    }
}

public struct CreateScriptInputBodyMiddleware: Middleware {
    public let id: String = "CreateScriptInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateScriptInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateScriptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateScriptInput>
    public typealias MOutput = OperationOutput<CreateScriptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateScriptOutputError>
}

extension CreateScriptInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateScriptInput(name: \(String(describing: name)), storageLocation: \(String(describing: storageLocation)), tags: \(String(describing: tags)), version: \(String(describing: version)), zipFile: \(String(describing: zipFile)))"}
}

extension CreateScriptInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case storageLocation = "StorageLocation"
        case tags = "Tags"
        case version = "Version"
        case zipFile = "ZipFile"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let storageLocation = storageLocation {
            try encodeContainer.encode(storageLocation, forKey: .storageLocation)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let zipFile = zipFile {
            try encodeContainer.encode(zipFile.base64EncodedString(), forKey: .zipFile)
        }
    }
}

public struct CreateScriptInputHeadersMiddleware: Middleware {
    public let id: String = "CreateScriptInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateScriptInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateScriptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateScriptInput>
    public typealias MOutput = OperationOutput<CreateScriptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateScriptOutputError>
}

public struct CreateScriptInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateScriptInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateScriptInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateScriptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateScriptInput>
    public typealias MOutput = OperationOutput<CreateScriptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateScriptOutputError>
}

public struct CreateScriptInput: Equatable {
    /// <p>A descriptive label that is associated with a script. Script names do not need to be unique. You can use <a>UpdateScript</a> to change this value later.
    ///         </p>
    public let name: String?
    /// <p>The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is
    ///             stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the
    ///             "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3
    ///             bucket must be in the same Region where you want to create a new script. By default,
    ///             Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning
    ///             turned on, you can use the <code>ObjectVersion</code> parameter to specify an earlier
    ///             version. </p>
    public let storageLocation: S3Location?
    /// <p>A list of labels to assign to the new script resource. Tags are developer-defined
    ///             key-value pairs. Tagging
    ///             AWS resources are useful for resource management, access management and cost allocation.
    ///             For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging AWS Resources</a> in the
    ///             <i>AWS General Reference</i>. Once the resource is created, you can
    ///             use <a>TagResource</a>, <a>UntagResource</a>, and
    ///             <a>ListTagsForResource</a> to add, remove, and view tags. The
    ///             maximum tag limit may be lower than stated. See the AWS General Reference for actual
    ///             tagging limits.</p>
    public let tags: [Tag]?
    /// <p>Version information that is associated with a build or script. Version strings do not need to be unique. You can use <a>UpdateScript</a> to change this value later.
    ///         </p>
    public let version: String?
    /// <p>A data object containing your Realtime scripts and dependencies as a zip file. The zip
    ///             file can have one or multiple files. Maximum size of a zip file is 5 MB.</p>
    ///         <p>When using the AWS CLI tool to create a script, this parameter is set to the zip file name. It must be prepended with the
    ///             string "fileb://" to indicate that the file data is a binary object. For example: <code>--zip-file fileb://myRealtimeScript.zip</code>.</p>
    public let zipFile: Data?

    public init (
        name: String? = nil,
        storageLocation: S3Location? = nil,
        tags: [Tag]? = nil,
        version: String? = nil,
        zipFile: Data? = nil
    )
    {
        self.name = name
        self.storageLocation = storageLocation
        self.tags = tags
        self.version = version
        self.zipFile = zipFile
    }
}

struct CreateScriptInputBody: Equatable {
    public let name: String?
    public let version: String?
    public let storageLocation: S3Location?
    public let zipFile: Data?
    public let tags: [Tag]?
}

extension CreateScriptInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case storageLocation = "StorageLocation"
        case tags = "Tags"
        case version = "Version"
        case zipFile = "ZipFile"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(S3Location.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
        let zipFileDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .zipFile)
        zipFile = zipFileDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateScriptOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateScriptOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateScriptOutputError: Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateScriptOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateScriptOutputResponse(script: \(String(describing: script)))"}
}

extension CreateScriptOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateScriptOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.script = output.script
        } else {
            self.script = nil
        }
    }
}

public struct CreateScriptOutputResponse: Equatable {
    /// <p>The newly created script record with a unique script ID and ARN. The new script's
    ///             storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3
    ///             bucket under your account, the storage location reflects the information that was
    ///             provided in the <i>CreateScript</i> request; (2) If the script file was
    ///             uploaded from a local zip file, the storage location reflects an S3 location controls by
    ///             the Amazon GameLift service.</p>
    public let script: Script?

    public init (
        script: Script? = nil
    )
    {
        self.script = script
    }
}

struct CreateScriptOutputResponseBody: Equatable {
    public let script: Script?
}

extension CreateScriptOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case script = "Script"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptDecoded = try containerValues.decodeIfPresent(Script.self, forKey: .script)
        script = scriptDecoded
    }
}

public struct CreateVpcPeeringAuthorizationInputBodyMiddleware: Middleware {
    public let id: String = "CreateVpcPeeringAuthorizationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVpcPeeringAuthorizationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVpcPeeringAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVpcPeeringAuthorizationInput>
    public typealias MOutput = OperationOutput<CreateVpcPeeringAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVpcPeeringAuthorizationOutputError>
}

extension CreateVpcPeeringAuthorizationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateVpcPeeringAuthorizationInput(gameLiftAwsAccountId: \(String(describing: gameLiftAwsAccountId)), peerVpcId: \(String(describing: peerVpcId)))"}
}

extension CreateVpcPeeringAuthorizationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameLiftAwsAccountId = "GameLiftAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameLiftAwsAccountId = gameLiftAwsAccountId {
            try encodeContainer.encode(gameLiftAwsAccountId, forKey: .gameLiftAwsAccountId)
        }
        if let peerVpcId = peerVpcId {
            try encodeContainer.encode(peerVpcId, forKey: .peerVpcId)
        }
    }
}

public struct CreateVpcPeeringAuthorizationInputHeadersMiddleware: Middleware {
    public let id: String = "CreateVpcPeeringAuthorizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVpcPeeringAuthorizationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVpcPeeringAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVpcPeeringAuthorizationInput>
    public typealias MOutput = OperationOutput<CreateVpcPeeringAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVpcPeeringAuthorizationOutputError>
}

public struct CreateVpcPeeringAuthorizationInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateVpcPeeringAuthorizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVpcPeeringAuthorizationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVpcPeeringAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVpcPeeringAuthorizationInput>
    public typealias MOutput = OperationOutput<CreateVpcPeeringAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVpcPeeringAuthorizationOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct CreateVpcPeeringAuthorizationInput: Equatable {
    /// <p>A unique identifier for the AWS account that you use to manage your GameLift fleet.
    ///             You can find your Account ID in the AWS Management Console under account settings.</p>
    public let gameLiftAwsAccountId: String?
    /// <p>A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The
    ///             VPC must be in the same Region as your fleet. To look up a VPC ID, use the
    ///             <a href="https://console.aws.amazon.com/vpc/">VPC Dashboard</a> in the AWS Management Console.
    ///             Learn more about VPC peering in <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html">VPC Peering with GameLift Fleets</a>.</p>
    public let peerVpcId: String?

    public init (
        gameLiftAwsAccountId: String? = nil,
        peerVpcId: String? = nil
    )
    {
        self.gameLiftAwsAccountId = gameLiftAwsAccountId
        self.peerVpcId = peerVpcId
    }
}

struct CreateVpcPeeringAuthorizationInputBody: Equatable {
    public let gameLiftAwsAccountId: String?
    public let peerVpcId: String?
}

extension CreateVpcPeeringAuthorizationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameLiftAwsAccountId = "GameLiftAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameLiftAwsAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameLiftAwsAccountId)
        gameLiftAwsAccountId = gameLiftAwsAccountIdDecoded
        let peerVpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .peerVpcId)
        peerVpcId = peerVpcIdDecoded
    }
}

extension CreateVpcPeeringAuthorizationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVpcPeeringAuthorizationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateVpcPeeringAuthorizationOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVpcPeeringAuthorizationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateVpcPeeringAuthorizationOutputResponse(vpcPeeringAuthorization: \(String(describing: vpcPeeringAuthorization)))"}
}

extension CreateVpcPeeringAuthorizationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateVpcPeeringAuthorizationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.vpcPeeringAuthorization = output.vpcPeeringAuthorization
        } else {
            self.vpcPeeringAuthorization = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct CreateVpcPeeringAuthorizationOutputResponse: Equatable {
    /// <p>Details on the requested VPC peering authorization, including expiration.</p>
    public let vpcPeeringAuthorization: VpcPeeringAuthorization?

    public init (
        vpcPeeringAuthorization: VpcPeeringAuthorization? = nil
    )
    {
        self.vpcPeeringAuthorization = vpcPeeringAuthorization
    }
}

struct CreateVpcPeeringAuthorizationOutputResponseBody: Equatable {
    public let vpcPeeringAuthorization: VpcPeeringAuthorization?
}

extension CreateVpcPeeringAuthorizationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case vpcPeeringAuthorization = "VpcPeeringAuthorization"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcPeeringAuthorizationDecoded = try containerValues.decodeIfPresent(VpcPeeringAuthorization.self, forKey: .vpcPeeringAuthorization)
        vpcPeeringAuthorization = vpcPeeringAuthorizationDecoded
    }
}

public struct CreateVpcPeeringConnectionInputBodyMiddleware: Middleware {
    public let id: String = "CreateVpcPeeringConnectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVpcPeeringConnectionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVpcPeeringConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVpcPeeringConnectionInput>
    public typealias MOutput = OperationOutput<CreateVpcPeeringConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVpcPeeringConnectionOutputError>
}

extension CreateVpcPeeringConnectionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateVpcPeeringConnectionInput(fleetId: \(String(describing: fleetId)), peerVpcAwsAccountId: \(String(describing: peerVpcAwsAccountId)), peerVpcId: \(String(describing: peerVpcId)))"}
}

extension CreateVpcPeeringConnectionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let peerVpcAwsAccountId = peerVpcAwsAccountId {
            try encodeContainer.encode(peerVpcAwsAccountId, forKey: .peerVpcAwsAccountId)
        }
        if let peerVpcId = peerVpcId {
            try encodeContainer.encode(peerVpcId, forKey: .peerVpcId)
        }
    }
}

public struct CreateVpcPeeringConnectionInputHeadersMiddleware: Middleware {
    public let id: String = "CreateVpcPeeringConnectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVpcPeeringConnectionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVpcPeeringConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVpcPeeringConnectionInput>
    public typealias MOutput = OperationOutput<CreateVpcPeeringConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVpcPeeringConnectionOutputError>
}

public struct CreateVpcPeeringConnectionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateVpcPeeringConnectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVpcPeeringConnectionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVpcPeeringConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVpcPeeringConnectionInput>
    public typealias MOutput = OperationOutput<CreateVpcPeeringConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVpcPeeringConnectionOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct CreateVpcPeeringConnectionInput: Equatable {
    /// <p>A unique identifier for the fleet. You can use either the fleet ID or ARN value. This tells Amazon GameLift which GameLift
    ///             VPC to peer with. </p>
    public let fleetId: String?
    /// <p>A unique identifier for the AWS account with the VPC that you want to peer your
    ///             Amazon GameLift fleet with. You can find your Account ID in the AWS Management Console under account
    ///             settings.</p>
    public let peerVpcAwsAccountId: String?
    /// <p>A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The
    ///             VPC must be in the same Region as your fleet. To look up a VPC ID, use the
    ///             <a href="https://console.aws.amazon.com/vpc/">VPC Dashboard</a> in the AWS Management Console.
    ///             Learn more about VPC peering in <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html">VPC Peering with GameLift Fleets</a>.</p>
    public let peerVpcId: String?

    public init (
        fleetId: String? = nil,
        peerVpcAwsAccountId: String? = nil,
        peerVpcId: String? = nil
    )
    {
        self.fleetId = fleetId
        self.peerVpcAwsAccountId = peerVpcAwsAccountId
        self.peerVpcId = peerVpcId
    }
}

struct CreateVpcPeeringConnectionInputBody: Equatable {
    public let fleetId: String?
    public let peerVpcAwsAccountId: String?
    public let peerVpcId: String?
}

extension CreateVpcPeeringConnectionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let peerVpcAwsAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .peerVpcAwsAccountId)
        peerVpcAwsAccountId = peerVpcAwsAccountIdDecoded
        let peerVpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .peerVpcId)
        peerVpcId = peerVpcIdDecoded
    }
}

extension CreateVpcPeeringConnectionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVpcPeeringConnectionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateVpcPeeringConnectionOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVpcPeeringConnectionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateVpcPeeringConnectionOutputResponse()"}
}

extension CreateVpcPeeringConnectionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct CreateVpcPeeringConnectionOutputResponse: Equatable {

    public init() {}
}

struct CreateVpcPeeringConnectionOutputResponseBody: Equatable {
}

extension CreateVpcPeeringConnectionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteAliasInputBodyMiddleware: Middleware {
    public let id: String = "DeleteAliasInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteAliasInput>
    public typealias MOutput = OperationOutput<DeleteAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteAliasOutputError>
}

extension DeleteAliasInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteAliasInput(aliasId: \(String(describing: aliasId)))"}
}

extension DeleteAliasInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
    }
}

public struct DeleteAliasInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteAliasInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteAliasInput>
    public typealias MOutput = OperationOutput<DeleteAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteAliasOutputError>
}

public struct DeleteAliasInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteAliasInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteAliasInput>
    public typealias MOutput = OperationOutput<DeleteAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteAliasOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DeleteAliasInput: Equatable {
    /// <p>A unique identifier of the alias that you want to delete. You can use either the alias
    ///             ID or ARN value.</p>
    public let aliasId: String?

    public init (
        aliasId: String? = nil
    )
    {
        self.aliasId = aliasId
    }
}

struct DeleteAliasInputBody: Equatable {
    public let aliasId: String?
}

extension DeleteAliasInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
    }
}

extension DeleteAliasOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAliasOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAliasOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAliasOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteAliasOutputResponse()"}
}

extension DeleteAliasOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAliasOutputResponse: Equatable {

    public init() {}
}

struct DeleteAliasOutputResponseBody: Equatable {
}

extension DeleteAliasOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteBuildInputBodyMiddleware: Middleware {
    public let id: String = "DeleteBuildInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteBuildInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteBuildInput>
    public typealias MOutput = OperationOutput<DeleteBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteBuildOutputError>
}

extension DeleteBuildInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteBuildInput(buildId: \(String(describing: buildId)))"}
}

extension DeleteBuildInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case buildId = "BuildId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildId = buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
    }
}

public struct DeleteBuildInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteBuildInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteBuildInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteBuildInput>
    public typealias MOutput = OperationOutput<DeleteBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteBuildOutputError>
}

public struct DeleteBuildInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteBuildInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteBuildInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteBuildInput>
    public typealias MOutput = OperationOutput<DeleteBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteBuildOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DeleteBuildInput: Equatable {
    /// <p>A unique identifier for the build to delete. You can use either the build ID or ARN value. </p>
    public let buildId: String?

    public init (
        buildId: String? = nil
    )
    {
        self.buildId = buildId
    }
}

struct DeleteBuildInputBody: Equatable {
    public let buildId: String?
}

extension DeleteBuildInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case buildId = "BuildId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildId)
        buildId = buildIdDecoded
    }
}

extension DeleteBuildOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBuildOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBuildOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBuildOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteBuildOutputResponse()"}
}

extension DeleteBuildOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBuildOutputResponse: Equatable {

    public init() {}
}

struct DeleteBuildOutputResponseBody: Equatable {
}

extension DeleteBuildOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteFleetInputBodyMiddleware: Middleware {
    public let id: String = "DeleteFleetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteFleetInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteFleetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteFleetInput>
    public typealias MOutput = OperationOutput<DeleteFleetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteFleetOutputError>
}

extension DeleteFleetInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteFleetInput(fleetId: \(String(describing: fleetId)))"}
}

extension DeleteFleetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
    }
}

public struct DeleteFleetInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteFleetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteFleetInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteFleetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteFleetInput>
    public typealias MOutput = OperationOutput<DeleteFleetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteFleetOutputError>
}

public struct DeleteFleetInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteFleetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteFleetInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteFleetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteFleetInput>
    public typealias MOutput = OperationOutput<DeleteFleetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteFleetOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DeleteFleetInput: Equatable {
    /// <p>A unique identifier for the fleet to be deleted. You can use either the fleet ID or ARN value.</p>
    public let fleetId: String?

    public init (
        fleetId: String? = nil
    )
    {
        self.fleetId = fleetId
    }
}

struct DeleteFleetInputBody: Equatable {
    public let fleetId: String?
}

extension DeleteFleetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
    }
}

public struct DeleteFleetLocationsInputBodyMiddleware: Middleware {
    public let id: String = "DeleteFleetLocationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteFleetLocationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteFleetLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteFleetLocationsInput>
    public typealias MOutput = OperationOutput<DeleteFleetLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteFleetLocationsOutputError>
}

extension DeleteFleetLocationsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteFleetLocationsInput(fleetId: \(String(describing: fleetId)), locations: \(String(describing: locations)))"}
}

extension DeleteFleetLocationsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case locations = "Locations"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let locations = locations {
            var locationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .locations)
            for locationlist0 in locations {
                try locationsContainer.encode(locationlist0)
            }
        }
    }
}

public struct DeleteFleetLocationsInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteFleetLocationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteFleetLocationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteFleetLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteFleetLocationsInput>
    public typealias MOutput = OperationOutput<DeleteFleetLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteFleetLocationsOutputError>
}

public struct DeleteFleetLocationsInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteFleetLocationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteFleetLocationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteFleetLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteFleetLocationsInput>
    public typealias MOutput = OperationOutput<DeleteFleetLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteFleetLocationsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DeleteFleetLocationsInput: Equatable {
    /// <p>A unique identifier for the fleet to delete locations for.
    ///             You can use either the fleet ID or ARN value.</p>
    public let fleetId: String?
    /// <p>The list of fleet locations to delete. Specify locations in the form of an AWS Region code, such as
    ///                 <code>us-west-2</code>.</p>
    public let locations: [String]?

    public init (
        fleetId: String? = nil,
        locations: [String]? = nil
    )
    {
        self.fleetId = fleetId
        self.locations = locations
    }
}

struct DeleteFleetLocationsInputBody: Equatable {
    public let fleetId: String?
    public let locations: [String]?
}

extension DeleteFleetLocationsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case locations = "Locations"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let locationsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .locations)
        var locationsDecoded0:[String]? = nil
        if let locationsContainer = locationsContainer {
            locationsDecoded0 = [String]()
            for string0 in locationsContainer {
                if let string0 = string0 {
                    locationsDecoded0?.append(string0)
                }
            }
        }
        locations = locationsDecoded0
    }
}

extension DeleteFleetLocationsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFleetLocationsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteFleetLocationsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFleetLocationsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteFleetLocationsOutputResponse(fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)), locationStates: \(String(describing: locationStates)))"}
}

extension DeleteFleetLocationsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteFleetLocationsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
            self.locationStates = output.locationStates
        } else {
            self.fleetArn = nil
            self.fleetId = nil
            self.locationStates = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DeleteFleetLocationsOutputResponse: Equatable {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>.</p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet that location attributes are being deleted for.</p>
    public let fleetId: String?
    /// <p>The remote locations that are being deleted, with each location status set to
    ///                 <code>DELETING</code>.</p>
    public let locationStates: [LocationState]?

    public init (
        fleetArn: String? = nil,
        fleetId: String? = nil,
        locationStates: [LocationState]? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.locationStates = locationStates
    }
}

struct DeleteFleetLocationsOutputResponseBody: Equatable {
    public let fleetId: String?
    public let fleetArn: String?
    public let locationStates: [LocationState]?
}

extension DeleteFleetLocationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case locationStates = "LocationStates"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let locationStatesContainer = try containerValues.decodeIfPresent([LocationState?].self, forKey: .locationStates)
        var locationStatesDecoded0:[LocationState]? = nil
        if let locationStatesContainer = locationStatesContainer {
            locationStatesDecoded0 = [LocationState]()
            for structure0 in locationStatesContainer {
                if let structure0 = structure0 {
                    locationStatesDecoded0?.append(structure0)
                }
            }
        }
        locationStates = locationStatesDecoded0
    }
}

extension DeleteFleetOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFleetOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFleetStatusException" : self = .invalidFleetStatusException(try InvalidFleetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteFleetOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidFleetStatusException(InvalidFleetStatusException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFleetOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteFleetOutputResponse()"}
}

extension DeleteFleetOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteFleetOutputResponse: Equatable {

    public init() {}
}

struct DeleteFleetOutputResponseBody: Equatable {
}

extension DeleteFleetOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteGameServerGroupInputBodyMiddleware: Middleware {
    public let id: String = "DeleteGameServerGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteGameServerGroupInput>
    public typealias MOutput = OperationOutput<DeleteGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteGameServerGroupOutputError>
}

extension DeleteGameServerGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteGameServerGroupInput(deleteOption: \(String(describing: deleteOption)), gameServerGroupName: \(String(describing: gameServerGroupName)))"}
}

extension DeleteGameServerGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deleteOption = "DeleteOption"
        case gameServerGroupName = "GameServerGroupName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deleteOption = deleteOption {
            try encodeContainer.encode(deleteOption.rawValue, forKey: .deleteOption)
        }
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
    }
}

public struct DeleteGameServerGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteGameServerGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteGameServerGroupInput>
    public typealias MOutput = OperationOutput<DeleteGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteGameServerGroupOutputError>
}

public struct DeleteGameServerGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteGameServerGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteGameServerGroupInput>
    public typealias MOutput = OperationOutput<DeleteGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteGameServerGroupOutputError>
}

public struct DeleteGameServerGroupInput: Equatable {
    /// <p>The type of delete to perform. Options include the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>SAFE_DELETE</code> – (default) Terminates the game server group and
    ///                     EC2 Auto Scaling group only when it has no game servers that are in
    ///                         <code>UTILIZED</code> status.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>FORCE_DELETE</code> – Terminates the game server group, including all
    ///                     active game servers regardless of their utilization status, and the EC2 Auto
    ///                     Scaling group. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>RETAIN</code> – Does a safe delete of the game server group but retains
    ///                     the EC2 Auto Scaling group as is.</p>
    ///             </li>
    ///          </ul>
    public let deleteOption: GameServerGroupDeleteOption?
    /// <p>A unique identifier for the game server group. Use either the <a>GameServerGroup</a> name or ARN value.</p>
    public let gameServerGroupName: String?

    public init (
        deleteOption: GameServerGroupDeleteOption? = nil,
        gameServerGroupName: String? = nil
    )
    {
        self.deleteOption = deleteOption
        self.gameServerGroupName = gameServerGroupName
    }
}

struct DeleteGameServerGroupInputBody: Equatable {
    public let gameServerGroupName: String?
    public let deleteOption: GameServerGroupDeleteOption?
}

extension DeleteGameServerGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deleteOption = "DeleteOption"
        case gameServerGroupName = "GameServerGroupName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let deleteOptionDecoded = try containerValues.decodeIfPresent(GameServerGroupDeleteOption.self, forKey: .deleteOption)
        deleteOption = deleteOptionDecoded
    }
}

extension DeleteGameServerGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteGameServerGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteGameServerGroupOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGameServerGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteGameServerGroupOutputResponse(gameServerGroup: \(String(describing: gameServerGroup)))"}
}

extension DeleteGameServerGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteGameServerGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameServerGroup = output.gameServerGroup
        } else {
            self.gameServerGroup = nil
        }
    }
}

public struct DeleteGameServerGroupOutputResponse: Equatable {
    /// <p>An object that describes the deleted game server group resource, with status updated
    ///             to <code>DELETE_SCHEDULED</code>. </p>
    public let gameServerGroup: GameServerGroup?

    public init (
        gameServerGroup: GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

struct DeleteGameServerGroupOutputResponseBody: Equatable {
    public let gameServerGroup: GameServerGroup?
}

extension DeleteGameServerGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerGroup = "GameServerGroup"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupDecoded = try containerValues.decodeIfPresent(GameServerGroup.self, forKey: .gameServerGroup)
        gameServerGroup = gameServerGroupDecoded
    }
}

public struct DeleteGameSessionQueueInputBodyMiddleware: Middleware {
    public let id: String = "DeleteGameSessionQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteGameSessionQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteGameSessionQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteGameSessionQueueInput>
    public typealias MOutput = OperationOutput<DeleteGameSessionQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteGameSessionQueueOutputError>
}

extension DeleteGameSessionQueueInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteGameSessionQueueInput(name: \(String(describing: name)))"}
}

extension DeleteGameSessionQueueInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct DeleteGameSessionQueueInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteGameSessionQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteGameSessionQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteGameSessionQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteGameSessionQueueInput>
    public typealias MOutput = OperationOutput<DeleteGameSessionQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteGameSessionQueueOutputError>
}

public struct DeleteGameSessionQueueInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteGameSessionQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteGameSessionQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteGameSessionQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteGameSessionQueueInput>
    public typealias MOutput = OperationOutput<DeleteGameSessionQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteGameSessionQueueOutputError>
}

/// <p>Represents the input for a request operation. </p>
public struct DeleteGameSessionQueueInput: Equatable {
    /// <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region. You can use either the queue ID or ARN value. </p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteGameSessionQueueInputBody: Equatable {
    public let name: String?
}

extension DeleteGameSessionQueueInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteGameSessionQueueOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteGameSessionQueueOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteGameSessionQueueOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGameSessionQueueOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteGameSessionQueueOutputResponse()"}
}

extension DeleteGameSessionQueueOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteGameSessionQueueOutputResponse: Equatable {

    public init() {}
}

struct DeleteGameSessionQueueOutputResponseBody: Equatable {
}

extension DeleteGameSessionQueueOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteMatchmakingConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "DeleteMatchmakingConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMatchmakingConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMatchmakingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMatchmakingConfigurationInput>
    public typealias MOutput = OperationOutput<DeleteMatchmakingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMatchmakingConfigurationOutputError>
}

extension DeleteMatchmakingConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMatchmakingConfigurationInput(name: \(String(describing: name)))"}
}

extension DeleteMatchmakingConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct DeleteMatchmakingConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteMatchmakingConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMatchmakingConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMatchmakingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMatchmakingConfigurationInput>
    public typealias MOutput = OperationOutput<DeleteMatchmakingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMatchmakingConfigurationOutputError>
}

public struct DeleteMatchmakingConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteMatchmakingConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMatchmakingConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMatchmakingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMatchmakingConfigurationInput>
    public typealias MOutput = OperationOutput<DeleteMatchmakingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMatchmakingConfigurationOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DeleteMatchmakingConfigurationInput: Equatable {
    /// <p>A unique identifier for the matchmaking configuration.  You can use either the configuration name or ARN value.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteMatchmakingConfigurationInputBody: Equatable {
    public let name: String?
}

extension DeleteMatchmakingConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteMatchmakingConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMatchmakingConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMatchmakingConfigurationOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMatchmakingConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMatchmakingConfigurationOutputResponse()"}
}

extension DeleteMatchmakingConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMatchmakingConfigurationOutputResponse: Equatable {

    public init() {}
}

struct DeleteMatchmakingConfigurationOutputResponseBody: Equatable {
}

extension DeleteMatchmakingConfigurationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteMatchmakingRuleSetInputBodyMiddleware: Middleware {
    public let id: String = "DeleteMatchmakingRuleSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMatchmakingRuleSetInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMatchmakingRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMatchmakingRuleSetInput>
    public typealias MOutput = OperationOutput<DeleteMatchmakingRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMatchmakingRuleSetOutputError>
}

extension DeleteMatchmakingRuleSetInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMatchmakingRuleSetInput(name: \(String(describing: name)))"}
}

extension DeleteMatchmakingRuleSetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct DeleteMatchmakingRuleSetInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteMatchmakingRuleSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMatchmakingRuleSetInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMatchmakingRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMatchmakingRuleSetInput>
    public typealias MOutput = OperationOutput<DeleteMatchmakingRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMatchmakingRuleSetOutputError>
}

public struct DeleteMatchmakingRuleSetInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteMatchmakingRuleSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMatchmakingRuleSetInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMatchmakingRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMatchmakingRuleSetInput>
    public typealias MOutput = OperationOutput<DeleteMatchmakingRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMatchmakingRuleSetOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DeleteMatchmakingRuleSetInput: Equatable {
    /// <p>A unique identifier for the matchmaking rule set to be deleted. (Note: The rule set name is different from the optional "name"
    ///             field in the rule set body.)  You can use either the rule set name or ARN value.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteMatchmakingRuleSetInputBody: Equatable {
    public let name: String?
}

extension DeleteMatchmakingRuleSetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteMatchmakingRuleSetOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMatchmakingRuleSetOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMatchmakingRuleSetOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMatchmakingRuleSetOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMatchmakingRuleSetOutputResponse()"}
}

extension DeleteMatchmakingRuleSetOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DeleteMatchmakingRuleSetOutputResponse: Equatable {

    public init() {}
}

struct DeleteMatchmakingRuleSetOutputResponseBody: Equatable {
}

extension DeleteMatchmakingRuleSetOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteScalingPolicyInputBodyMiddleware: Middleware {
    public let id: String = "DeleteScalingPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteScalingPolicyInput>
    public typealias MOutput = OperationOutput<DeleteScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteScalingPolicyOutputError>
}

extension DeleteScalingPolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteScalingPolicyInput(fleetId: \(String(describing: fleetId)), name: \(String(describing: name)))"}
}

extension DeleteScalingPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct DeleteScalingPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteScalingPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteScalingPolicyInput>
    public typealias MOutput = OperationOutput<DeleteScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteScalingPolicyOutputError>
}

public struct DeleteScalingPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteScalingPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteScalingPolicyInput>
    public typealias MOutput = OperationOutput<DeleteScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteScalingPolicyOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DeleteScalingPolicyInput: Equatable {
    /// <p>A unique identifier for the fleet to be deleted. You can use either the fleet ID or ARN value.</p>
    public let fleetId: String?
    /// <p>A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.</p>
    public let name: String?

    public init (
        fleetId: String? = nil,
        name: String? = nil
    )
    {
        self.fleetId = fleetId
        self.name = name
    }
}

struct DeleteScalingPolicyInputBody: Equatable {
    public let name: String?
    public let fleetId: String?
}

extension DeleteScalingPolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case name = "Name"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
    }
}

extension DeleteScalingPolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteScalingPolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteScalingPolicyOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteScalingPolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteScalingPolicyOutputResponse()"}
}

extension DeleteScalingPolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteScalingPolicyOutputResponse: Equatable {

    public init() {}
}

struct DeleteScalingPolicyOutputResponseBody: Equatable {
}

extension DeleteScalingPolicyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteScriptInputBodyMiddleware: Middleware {
    public let id: String = "DeleteScriptInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteScriptInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteScriptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteScriptInput>
    public typealias MOutput = OperationOutput<DeleteScriptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteScriptOutputError>
}

extension DeleteScriptInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteScriptInput(scriptId: \(String(describing: scriptId)))"}
}

extension DeleteScriptInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case scriptId = "ScriptId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scriptId = scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
    }
}

public struct DeleteScriptInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteScriptInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteScriptInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteScriptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteScriptInput>
    public typealias MOutput = OperationOutput<DeleteScriptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteScriptOutputError>
}

public struct DeleteScriptInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteScriptInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteScriptInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteScriptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteScriptInput>
    public typealias MOutput = OperationOutput<DeleteScriptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteScriptOutputError>
}

public struct DeleteScriptInput: Equatable {
    /// <p>A unique identifier for the Realtime script to delete. You can use either the script ID or ARN value.</p>
    public let scriptId: String?

    public init (
        scriptId: String? = nil
    )
    {
        self.scriptId = scriptId
    }
}

struct DeleteScriptInputBody: Equatable {
    public let scriptId: String?
}

extension DeleteScriptInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case scriptId = "ScriptId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
    }
}

extension DeleteScriptOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteScriptOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteScriptOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteScriptOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteScriptOutputResponse()"}
}

extension DeleteScriptOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteScriptOutputResponse: Equatable {

    public init() {}
}

struct DeleteScriptOutputResponseBody: Equatable {
}

extension DeleteScriptOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteVpcPeeringAuthorizationInputBodyMiddleware: Middleware {
    public let id: String = "DeleteVpcPeeringAuthorizationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteVpcPeeringAuthorizationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteVpcPeeringAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteVpcPeeringAuthorizationInput>
    public typealias MOutput = OperationOutput<DeleteVpcPeeringAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteVpcPeeringAuthorizationOutputError>
}

extension DeleteVpcPeeringAuthorizationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteVpcPeeringAuthorizationInput(gameLiftAwsAccountId: \(String(describing: gameLiftAwsAccountId)), peerVpcId: \(String(describing: peerVpcId)))"}
}

extension DeleteVpcPeeringAuthorizationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameLiftAwsAccountId = "GameLiftAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameLiftAwsAccountId = gameLiftAwsAccountId {
            try encodeContainer.encode(gameLiftAwsAccountId, forKey: .gameLiftAwsAccountId)
        }
        if let peerVpcId = peerVpcId {
            try encodeContainer.encode(peerVpcId, forKey: .peerVpcId)
        }
    }
}

public struct DeleteVpcPeeringAuthorizationInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteVpcPeeringAuthorizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteVpcPeeringAuthorizationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteVpcPeeringAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteVpcPeeringAuthorizationInput>
    public typealias MOutput = OperationOutput<DeleteVpcPeeringAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteVpcPeeringAuthorizationOutputError>
}

public struct DeleteVpcPeeringAuthorizationInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteVpcPeeringAuthorizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteVpcPeeringAuthorizationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteVpcPeeringAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteVpcPeeringAuthorizationInput>
    public typealias MOutput = OperationOutput<DeleteVpcPeeringAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteVpcPeeringAuthorizationOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DeleteVpcPeeringAuthorizationInput: Equatable {
    /// <p>A unique identifier for the AWS account that you use to manage your GameLift fleet.
    ///             You can find your Account ID in the AWS Management Console under account settings.</p>
    public let gameLiftAwsAccountId: String?
    /// <p>A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The
    ///             VPC must be in the same Region as your fleet. To look up a VPC ID, use the
    ///             <a href="https://console.aws.amazon.com/vpc/">VPC Dashboard</a> in the AWS Management Console.
    ///             Learn more about VPC peering in <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html">VPC Peering with GameLift Fleets</a>.</p>
    public let peerVpcId: String?

    public init (
        gameLiftAwsAccountId: String? = nil,
        peerVpcId: String? = nil
    )
    {
        self.gameLiftAwsAccountId = gameLiftAwsAccountId
        self.peerVpcId = peerVpcId
    }
}

struct DeleteVpcPeeringAuthorizationInputBody: Equatable {
    public let gameLiftAwsAccountId: String?
    public let peerVpcId: String?
}

extension DeleteVpcPeeringAuthorizationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameLiftAwsAccountId = "GameLiftAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameLiftAwsAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameLiftAwsAccountId)
        gameLiftAwsAccountId = gameLiftAwsAccountIdDecoded
        let peerVpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .peerVpcId)
        peerVpcId = peerVpcIdDecoded
    }
}

extension DeleteVpcPeeringAuthorizationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVpcPeeringAuthorizationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteVpcPeeringAuthorizationOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVpcPeeringAuthorizationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteVpcPeeringAuthorizationOutputResponse()"}
}

extension DeleteVpcPeeringAuthorizationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteVpcPeeringAuthorizationOutputResponse: Equatable {

    public init() {}
}

struct DeleteVpcPeeringAuthorizationOutputResponseBody: Equatable {
}

extension DeleteVpcPeeringAuthorizationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteVpcPeeringConnectionInputBodyMiddleware: Middleware {
    public let id: String = "DeleteVpcPeeringConnectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteVpcPeeringConnectionInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteVpcPeeringConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteVpcPeeringConnectionInput>
    public typealias MOutput = OperationOutput<DeleteVpcPeeringConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteVpcPeeringConnectionOutputError>
}

extension DeleteVpcPeeringConnectionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteVpcPeeringConnectionInput(fleetId: \(String(describing: fleetId)), vpcPeeringConnectionId: \(String(describing: vpcPeeringConnectionId)))"}
}

extension DeleteVpcPeeringConnectionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case vpcPeeringConnectionId = "VpcPeeringConnectionId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let vpcPeeringConnectionId = vpcPeeringConnectionId {
            try encodeContainer.encode(vpcPeeringConnectionId, forKey: .vpcPeeringConnectionId)
        }
    }
}

public struct DeleteVpcPeeringConnectionInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteVpcPeeringConnectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteVpcPeeringConnectionInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteVpcPeeringConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteVpcPeeringConnectionInput>
    public typealias MOutput = OperationOutput<DeleteVpcPeeringConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteVpcPeeringConnectionOutputError>
}

public struct DeleteVpcPeeringConnectionInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteVpcPeeringConnectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteVpcPeeringConnectionInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteVpcPeeringConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteVpcPeeringConnectionInput>
    public typealias MOutput = OperationOutput<DeleteVpcPeeringConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteVpcPeeringConnectionOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DeleteVpcPeeringConnectionInput: Equatable {
    /// <p>A unique identifier for the fleet. This fleet specified must match the fleet referenced in the VPC peering
    ///             connection record. You can use either the fleet ID or ARN value.</p>
    public let fleetId: String?
    /// <p>A unique identifier for a VPC peering connection. This value is included in the <a>VpcPeeringConnection</a> object, which can be retrieved by calling <a>DescribeVpcPeeringConnections</a>.</p>
    public let vpcPeeringConnectionId: String?

    public init (
        fleetId: String? = nil,
        vpcPeeringConnectionId: String? = nil
    )
    {
        self.fleetId = fleetId
        self.vpcPeeringConnectionId = vpcPeeringConnectionId
    }
}

struct DeleteVpcPeeringConnectionInputBody: Equatable {
    public let fleetId: String?
    public let vpcPeeringConnectionId: String?
}

extension DeleteVpcPeeringConnectionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case vpcPeeringConnectionId = "VpcPeeringConnectionId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let vpcPeeringConnectionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcPeeringConnectionId)
        vpcPeeringConnectionId = vpcPeeringConnectionIdDecoded
    }
}

extension DeleteVpcPeeringConnectionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVpcPeeringConnectionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteVpcPeeringConnectionOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVpcPeeringConnectionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteVpcPeeringConnectionOutputResponse()"}
}

extension DeleteVpcPeeringConnectionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteVpcPeeringConnectionOutputResponse: Equatable {

    public init() {}
}

struct DeleteVpcPeeringConnectionOutputResponseBody: Equatable {
}

extension DeleteVpcPeeringConnectionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeregisterGameServerInputBodyMiddleware: Middleware {
    public let id: String = "DeregisterGameServerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeregisterGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<DeregisterGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeregisterGameServerInput>
    public typealias MOutput = OperationOutput<DeregisterGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeregisterGameServerOutputError>
}

extension DeregisterGameServerInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeregisterGameServerInput(gameServerGroupName: \(String(describing: gameServerGroupName)), gameServerId: \(String(describing: gameServerId)))"}
}

extension DeregisterGameServerInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerId = gameServerId {
            try encodeContainer.encode(gameServerId, forKey: .gameServerId)
        }
    }
}

public struct DeregisterGameServerInputHeadersMiddleware: Middleware {
    public let id: String = "DeregisterGameServerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeregisterGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<DeregisterGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeregisterGameServerInput>
    public typealias MOutput = OperationOutput<DeregisterGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeregisterGameServerOutputError>
}

public struct DeregisterGameServerInputQueryItemMiddleware: Middleware {
    public let id: String = "DeregisterGameServerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeregisterGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<DeregisterGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeregisterGameServerInput>
    public typealias MOutput = OperationOutput<DeregisterGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeregisterGameServerOutputError>
}

public struct DeregisterGameServerInput: Equatable {
    /// <p>A unique identifier for the game server group where the game server is running.
    ///             Use either the <a>GameServerGroup</a> name or ARN value.</p>
    public let gameServerGroupName: String?
    /// <p>A custom string that uniquely identifies the game server to deregister.</p>
    public let gameServerId: String?

    public init (
        gameServerGroupName: String? = nil,
        gameServerId: String? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
    }
}

struct DeregisterGameServerInputBody: Equatable {
    public let gameServerGroupName: String?
    public let gameServerId: String?
}

extension DeregisterGameServerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerId)
        gameServerId = gameServerIdDecoded
    }
}

extension DeregisterGameServerOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterGameServerOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeregisterGameServerOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterGameServerOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeregisterGameServerOutputResponse()"}
}

extension DeregisterGameServerOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterGameServerOutputResponse: Equatable {

    public init() {}
}

struct DeregisterGameServerOutputResponseBody: Equatable {
}

extension DeregisterGameServerOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DescribeAliasInputBodyMiddleware: Middleware {
    public let id: String = "DescribeAliasInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAliasInput>
    public typealias MOutput = OperationOutput<DescribeAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAliasOutputError>
}

extension DescribeAliasInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAliasInput(aliasId: \(String(describing: aliasId)))"}
}

extension DescribeAliasInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
    }
}

public struct DescribeAliasInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeAliasInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAliasInput>
    public typealias MOutput = OperationOutput<DescribeAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAliasOutputError>
}

public struct DescribeAliasInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeAliasInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAliasInput>
    public typealias MOutput = OperationOutput<DescribeAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAliasOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeAliasInput: Equatable {
    /// <p>The unique identifier for the fleet alias that you want to retrieve. You can use
    ///             either the alias ID or ARN value. </p>
    public let aliasId: String?

    public init (
        aliasId: String? = nil
    )
    {
        self.aliasId = aliasId
    }
}

struct DescribeAliasInputBody: Equatable {
    public let aliasId: String?
}

extension DescribeAliasInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
    }
}

extension DescribeAliasOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAliasOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAliasOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAliasOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAliasOutputResponse(alias: \(String(describing: alias)))"}
}

extension DescribeAliasOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeAliasOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.alias = output.alias
        } else {
            self.alias = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeAliasOutputResponse: Equatable {
    /// <p>The requested alias resource.</p>
    public let alias: Alias?

    public init (
        alias: Alias? = nil
    )
    {
        self.alias = alias
    }
}

struct DescribeAliasOutputResponseBody: Equatable {
    public let alias: Alias?
}

extension DescribeAliasOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case alias = "Alias"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasDecoded = try containerValues.decodeIfPresent(Alias.self, forKey: .alias)
        alias = aliasDecoded
    }
}

public struct DescribeBuildInputBodyMiddleware: Middleware {
    public let id: String = "DescribeBuildInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeBuildInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeBuildInput>
    public typealias MOutput = OperationOutput<DescribeBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeBuildOutputError>
}

extension DescribeBuildInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeBuildInput(buildId: \(String(describing: buildId)))"}
}

extension DescribeBuildInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case buildId = "BuildId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildId = buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
    }
}

public struct DescribeBuildInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeBuildInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeBuildInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeBuildInput>
    public typealias MOutput = OperationOutput<DescribeBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeBuildOutputError>
}

public struct DescribeBuildInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeBuildInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeBuildInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeBuildInput>
    public typealias MOutput = OperationOutput<DescribeBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeBuildOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeBuildInput: Equatable {
    /// <p>A unique identifier for the build to retrieve properties for. You can use either the build ID or ARN value. </p>
    public let buildId: String?

    public init (
        buildId: String? = nil
    )
    {
        self.buildId = buildId
    }
}

struct DescribeBuildInputBody: Equatable {
    public let buildId: String?
}

extension DescribeBuildInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case buildId = "BuildId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildId)
        buildId = buildIdDecoded
    }
}

extension DescribeBuildOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeBuildOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeBuildOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeBuildOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeBuildOutputResponse(build: \(String(describing: build)))"}
}

extension DescribeBuildOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeBuildOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.build = output.build
        } else {
            self.build = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeBuildOutputResponse: Equatable {
    /// <p>Set of properties describing the requested build.</p>
    public let build: Build?

    public init (
        build: Build? = nil
    )
    {
        self.build = build
    }
}

struct DescribeBuildOutputResponseBody: Equatable {
    public let build: Build?
}

extension DescribeBuildOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case build = "Build"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildDecoded = try containerValues.decodeIfPresent(Build.self, forKey: .build)
        build = buildDecoded
    }
}

public struct DescribeEC2InstanceLimitsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeEC2InstanceLimitsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEC2InstanceLimitsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEC2InstanceLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEC2InstanceLimitsInput>
    public typealias MOutput = OperationOutput<DescribeEC2InstanceLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEC2InstanceLimitsOutputError>
}

extension DescribeEC2InstanceLimitsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeEC2InstanceLimitsInput(eC2InstanceType: \(String(describing: eC2InstanceType)), location: \(String(describing: location)))"}
}

extension DescribeEC2InstanceLimitsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eC2InstanceType = "EC2InstanceType"
        case location = "Location"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eC2InstanceType = eC2InstanceType {
            try encodeContainer.encode(eC2InstanceType.rawValue, forKey: .eC2InstanceType)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }
}

public struct DescribeEC2InstanceLimitsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeEC2InstanceLimitsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEC2InstanceLimitsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEC2InstanceLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEC2InstanceLimitsInput>
    public typealias MOutput = OperationOutput<DescribeEC2InstanceLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEC2InstanceLimitsOutputError>
}

public struct DescribeEC2InstanceLimitsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeEC2InstanceLimitsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEC2InstanceLimitsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEC2InstanceLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEC2InstanceLimitsInput>
    public typealias MOutput = OperationOutput<DescribeEC2InstanceLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEC2InstanceLimitsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeEC2InstanceLimitsInput: Equatable {
    /// <p>Name of an EC2 instance type that is supported in GameLift. A fleet instance type
    ///             determines the computing resources of each instance in the fleet, including CPU, memory,
    ///             storage, and networking capacity. Do not specify a value for this parameter to retrieve
    ///             limits for all instance types.</p>
    public let eC2InstanceType: EC2InstanceType?
    /// <p>The name of a remote location to request instance limits for, in the form of an AWS
    ///             Region code such as <code>us-west-2</code>.</p>
    public let location: String?

    public init (
        eC2InstanceType: EC2InstanceType? = nil,
        location: String? = nil
    )
    {
        self.eC2InstanceType = eC2InstanceType
        self.location = location
    }
}

struct DescribeEC2InstanceLimitsInputBody: Equatable {
    public let eC2InstanceType: EC2InstanceType?
    public let location: String?
}

extension DescribeEC2InstanceLimitsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case eC2InstanceType = "EC2InstanceType"
        case location = "Location"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eC2InstanceTypeDecoded = try containerValues.decodeIfPresent(EC2InstanceType.self, forKey: .eC2InstanceType)
        eC2InstanceType = eC2InstanceTypeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension DescribeEC2InstanceLimitsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEC2InstanceLimitsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEC2InstanceLimitsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEC2InstanceLimitsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeEC2InstanceLimitsOutputResponse(eC2InstanceLimits: \(String(describing: eC2InstanceLimits)))"}
}

extension DescribeEC2InstanceLimitsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeEC2InstanceLimitsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.eC2InstanceLimits = output.eC2InstanceLimits
        } else {
            self.eC2InstanceLimits = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeEC2InstanceLimitsOutputResponse: Equatable {
    /// <p>The maximum number of instances for the specified instance
    ///             type.</p>
    public let eC2InstanceLimits: [EC2InstanceLimit]?

    public init (
        eC2InstanceLimits: [EC2InstanceLimit]? = nil
    )
    {
        self.eC2InstanceLimits = eC2InstanceLimits
    }
}

struct DescribeEC2InstanceLimitsOutputResponseBody: Equatable {
    public let eC2InstanceLimits: [EC2InstanceLimit]?
}

extension DescribeEC2InstanceLimitsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case eC2InstanceLimits = "EC2InstanceLimits"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eC2InstanceLimitsContainer = try containerValues.decodeIfPresent([EC2InstanceLimit?].self, forKey: .eC2InstanceLimits)
        var eC2InstanceLimitsDecoded0:[EC2InstanceLimit]? = nil
        if let eC2InstanceLimitsContainer = eC2InstanceLimitsContainer {
            eC2InstanceLimitsDecoded0 = [EC2InstanceLimit]()
            for structure0 in eC2InstanceLimitsContainer {
                if let structure0 = structure0 {
                    eC2InstanceLimitsDecoded0?.append(structure0)
                }
            }
        }
        eC2InstanceLimits = eC2InstanceLimitsDecoded0
    }
}

public struct DescribeFleetAttributesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeFleetAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetAttributesInput>
    public typealias MOutput = OperationOutput<DescribeFleetAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetAttributesOutputError>
}

extension DescribeFleetAttributesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetAttributesInput(fleetIds: \(String(describing: fleetIds)), limit: \(String(describing: limit)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeFleetAttributesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetIds = "FleetIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetIds = fleetIds {
            var fleetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fleetIds)
            for fleetidorarnlist0 in fleetIds {
                try fleetIdsContainer.encode(fleetidorarnlist0)
            }
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeFleetAttributesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeFleetAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetAttributesInput>
    public typealias MOutput = OperationOutput<DescribeFleetAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetAttributesOutputError>
}

public struct DescribeFleetAttributesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeFleetAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetAttributesInput>
    public typealias MOutput = OperationOutput<DescribeFleetAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetAttributesOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeFleetAttributesInput: Equatable {
    /// <p>A list of unique fleet identifiers to retrieve attributes for. You can use either the
    ///             fleet ID or ARN value. To retrieve attributes for all current fleets, do not include
    ///             this parameter. </p>
    public let fleetIds: [String]?
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet
    ///             IDs.</p>
    public let limit: Int?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet
    ///             IDs.</p>
    public let nextToken: String?

    public init (
        fleetIds: [String]? = nil,
        limit: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.fleetIds = fleetIds
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeFleetAttributesInputBody: Equatable {
    public let fleetIds: [String]?
    public let limit: Int?
    public let nextToken: String?
}

extension DescribeFleetAttributesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetIds = "FleetIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .fleetIds)
        var fleetIdsDecoded0:[String]? = nil
        if let fleetIdsContainer = fleetIdsContainer {
            fleetIdsDecoded0 = [String]()
            for string0 in fleetIdsContainer {
                if let string0 = string0 {
                    fleetIdsDecoded0?.append(string0)
                }
            }
        }
        fleetIds = fleetIdsDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFleetAttributesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetAttributesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeFleetAttributesOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetAttributesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetAttributesOutputResponse(fleetAttributes: \(String(describing: fleetAttributes)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeFleetAttributesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeFleetAttributesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetAttributes = output.fleetAttributes
            self.nextToken = output.nextToken
        } else {
            self.fleetAttributes = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeFleetAttributesOutputResponse: Equatable {
    /// <p>A collection of objects containing attribute metadata for each requested fleet ID.
    ///             Attribute objects are returned only for fleets that currently exist.</p>
    public let fleetAttributes: [FleetAttributes]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        fleetAttributes: [FleetAttributes]? = nil,
        nextToken: String? = nil
    )
    {
        self.fleetAttributes = fleetAttributes
        self.nextToken = nextToken
    }
}

struct DescribeFleetAttributesOutputResponseBody: Equatable {
    public let fleetAttributes: [FleetAttributes]?
    public let nextToken: String?
}

extension DescribeFleetAttributesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetAttributes = "FleetAttributes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetAttributesContainer = try containerValues.decodeIfPresent([FleetAttributes?].self, forKey: .fleetAttributes)
        var fleetAttributesDecoded0:[FleetAttributes]? = nil
        if let fleetAttributesContainer = fleetAttributesContainer {
            fleetAttributesDecoded0 = [FleetAttributes]()
            for structure0 in fleetAttributesContainer {
                if let structure0 = structure0 {
                    fleetAttributesDecoded0?.append(structure0)
                }
            }
        }
        fleetAttributes = fleetAttributesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeFleetCapacityInputBodyMiddleware: Middleware {
    public let id: String = "DescribeFleetCapacityInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetCapacityInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetCapacityInput>
    public typealias MOutput = OperationOutput<DescribeFleetCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetCapacityOutputError>
}

extension DescribeFleetCapacityInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetCapacityInput(fleetIds: \(String(describing: fleetIds)), limit: \(String(describing: limit)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeFleetCapacityInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetIds = "FleetIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetIds = fleetIds {
            var fleetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fleetIds)
            for fleetidorarnlist0 in fleetIds {
                try fleetIdsContainer.encode(fleetidorarnlist0)
            }
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeFleetCapacityInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeFleetCapacityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetCapacityInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetCapacityInput>
    public typealias MOutput = OperationOutput<DescribeFleetCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetCapacityOutputError>
}

public struct DescribeFleetCapacityInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeFleetCapacityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetCapacityInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetCapacityInput>
    public typealias MOutput = OperationOutput<DescribeFleetCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetCapacityOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeFleetCapacityInput: Equatable {
    /// <p>A unique identifier for the fleet(s) to retrieve capacity information for. You can use either the fleet ID or ARN
    ///             value. Leave this parameter empty to retrieve capacity information for all
    ///             fleets.</p>
    public let fleetIds: [String]?
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet
    ///             IDs.</p>
    public let limit: Int?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet
    ///             IDs.</p>
    public let nextToken: String?

    public init (
        fleetIds: [String]? = nil,
        limit: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.fleetIds = fleetIds
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeFleetCapacityInputBody: Equatable {
    public let fleetIds: [String]?
    public let limit: Int?
    public let nextToken: String?
}

extension DescribeFleetCapacityInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetIds = "FleetIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .fleetIds)
        var fleetIdsDecoded0:[String]? = nil
        if let fleetIdsContainer = fleetIdsContainer {
            fleetIdsDecoded0 = [String]()
            for string0 in fleetIdsContainer {
                if let string0 = string0 {
                    fleetIdsDecoded0?.append(string0)
                }
            }
        }
        fleetIds = fleetIdsDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFleetCapacityOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetCapacityOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeFleetCapacityOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetCapacityOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetCapacityOutputResponse(fleetCapacity: \(String(describing: fleetCapacity)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeFleetCapacityOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeFleetCapacityOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetCapacity = output.fleetCapacity
            self.nextToken = output.nextToken
        } else {
            self.fleetCapacity = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeFleetCapacityOutputResponse: Equatable {
    /// <p>A collection of objects that contains capacity information for each requested fleet
    ///             ID. Capacity objects are returned only for fleets that currently exist.</p>
    public let fleetCapacity: [FleetCapacity]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        fleetCapacity: [FleetCapacity]? = nil,
        nextToken: String? = nil
    )
    {
        self.fleetCapacity = fleetCapacity
        self.nextToken = nextToken
    }
}

struct DescribeFleetCapacityOutputResponseBody: Equatable {
    public let fleetCapacity: [FleetCapacity]?
    public let nextToken: String?
}

extension DescribeFleetCapacityOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetCapacity = "FleetCapacity"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetCapacityContainer = try containerValues.decodeIfPresent([FleetCapacity?].self, forKey: .fleetCapacity)
        var fleetCapacityDecoded0:[FleetCapacity]? = nil
        if let fleetCapacityContainer = fleetCapacityContainer {
            fleetCapacityDecoded0 = [FleetCapacity]()
            for structure0 in fleetCapacityContainer {
                if let structure0 = structure0 {
                    fleetCapacityDecoded0?.append(structure0)
                }
            }
        }
        fleetCapacity = fleetCapacityDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeFleetEventsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeFleetEventsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetEventsInput>
    public typealias MOutput = OperationOutput<DescribeFleetEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetEventsOutputError>
}

extension DescribeFleetEventsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetEventsInput(endTime: \(String(describing: endTime)), fleetId: \(String(describing: fleetId)), limit: \(String(describing: limit)), nextToken: \(String(describing: nextToken)), startTime: \(String(describing: startTime)))"}
}

extension DescribeFleetEventsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endTime = "EndTime"
        case fleetId = "FleetId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }
}

public struct DescribeFleetEventsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeFleetEventsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetEventsInput>
    public typealias MOutput = OperationOutput<DescribeFleetEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetEventsOutputError>
}

public struct DescribeFleetEventsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeFleetEventsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetEventsInput>
    public typealias MOutput = OperationOutput<DescribeFleetEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetEventsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeFleetEventsInput: Equatable {
    /// <p>The most recent date to retrieve event logs for. If no end time is specified, this
    ///             call returns entries from the specified start time up to the present. Format is a number
    ///             expressed in Unix time as milliseconds (ex: "1469498468.057").</p>
    public let endTime: Date?
    /// <p>A unique identifier for the fleet to get event logs for.  You can use either the fleet ID or ARN value.</p>
    public let fleetId: String?
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    public let limit: Int?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?
    /// <p>The earliest date to retrieve event logs for. If no start time is specified, this call
    ///             returns entries starting from when the fleet was created to the specified end time.
    ///             Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").</p>
    public let startTime: Date?

    public init (
        endTime: Date? = nil,
        fleetId: String? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        startTime: Date? = nil
    )
    {
        self.endTime = endTime
        self.fleetId = fleetId
        self.limit = limit
        self.nextToken = nextToken
        self.startTime = startTime
    }
}

struct DescribeFleetEventsInputBody: Equatable {
    public let fleetId: String?
    public let startTime: Date?
    public let endTime: Date?
    public let limit: Int?
    public let nextToken: String?
}

extension DescribeFleetEventsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endTime = "EndTime"
        case fleetId = "FleetId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case startTime = "StartTime"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFleetEventsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetEventsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeFleetEventsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetEventsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetEventsOutputResponse(events: \(String(describing: events)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeFleetEventsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeFleetEventsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.events = output.events
            self.nextToken = output.nextToken
        } else {
            self.events = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeFleetEventsOutputResponse: Equatable {
    /// <p>A collection of objects containing event log entries for the specified
    ///             fleet.</p>
    public let events: [Event]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        events: [Event]? = nil,
        nextToken: String? = nil
    )
    {
        self.events = events
        self.nextToken = nextToken
    }
}

struct DescribeFleetEventsOutputResponseBody: Equatable {
    public let events: [Event]?
    public let nextToken: String?
}

extension DescribeFleetEventsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case events = "Events"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([Event?].self, forKey: .events)
        var eventsDecoded0:[Event]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [Event]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeFleetLocationAttributesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeFleetLocationAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetLocationAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetLocationAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetLocationAttributesInput>
    public typealias MOutput = OperationOutput<DescribeFleetLocationAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetLocationAttributesOutputError>
}

extension DescribeFleetLocationAttributesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetLocationAttributesInput(fleetId: \(String(describing: fleetId)), limit: \(String(describing: limit)), locations: \(String(describing: locations)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeFleetLocationAttributesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case limit = "Limit"
        case locations = "Locations"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let locations = locations {
            var locationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .locations)
            for locationlist0 in locations {
                try locationsContainer.encode(locationlist0)
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeFleetLocationAttributesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeFleetLocationAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetLocationAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetLocationAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetLocationAttributesInput>
    public typealias MOutput = OperationOutput<DescribeFleetLocationAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetLocationAttributesOutputError>
}

public struct DescribeFleetLocationAttributesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeFleetLocationAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetLocationAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetLocationAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetLocationAttributesInput>
    public typealias MOutput = OperationOutput<DescribeFleetLocationAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetLocationAttributesOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeFleetLocationAttributesInput: Equatable {
    /// <p>A unique identifier for the fleet to retrieve remote locations for. You can use either the fleet ID or ARN
    ///             value.</p>
    public let fleetId: String?
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This limit is not currently enforced. </p>
    public let limit: Int?
    /// <p>A list of fleet locations to retrieve information for. Specify locations in the form of an AWS Region code, such as
    ///                 <code>us-west-2</code>.</p>
    public let locations: [String]?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?

    public init (
        fleetId: String? = nil,
        limit: Int? = nil,
        locations: [String]? = nil,
        nextToken: String? = nil
    )
    {
        self.fleetId = fleetId
        self.limit = limit
        self.locations = locations
        self.nextToken = nextToken
    }
}

struct DescribeFleetLocationAttributesInputBody: Equatable {
    public let fleetId: String?
    public let locations: [String]?
    public let limit: Int?
    public let nextToken: String?
}

extension DescribeFleetLocationAttributesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case limit = "Limit"
        case locations = "Locations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let locationsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .locations)
        var locationsDecoded0:[String]? = nil
        if let locationsContainer = locationsContainer {
            locationsDecoded0 = [String]()
            for string0 in locationsContainer {
                if let string0 = string0 {
                    locationsDecoded0?.append(string0)
                }
            }
        }
        locations = locationsDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFleetLocationAttributesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetLocationAttributesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeFleetLocationAttributesOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetLocationAttributesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetLocationAttributesOutputResponse(fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)), locationAttributes: \(String(describing: locationAttributes)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeFleetLocationAttributesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeFleetLocationAttributesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
            self.locationAttributes = output.locationAttributes
            self.nextToken = output.nextToken
        } else {
            self.fleetArn = nil
            self.fleetId = nil
            self.locationAttributes = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation. </p>
public struct DescribeFleetLocationAttributesOutputResponse: Equatable {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>. </p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet that location attributes were requested for.</p>
    public let fleetId: String?
    /// <p> Location-specific information on the requested fleet's remote locations. </p>
    public let locationAttributes: [LocationAttributes]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        fleetArn: String? = nil,
        fleetId: String? = nil,
        locationAttributes: [LocationAttributes]? = nil,
        nextToken: String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.locationAttributes = locationAttributes
        self.nextToken = nextToken
    }
}

struct DescribeFleetLocationAttributesOutputResponseBody: Equatable {
    public let fleetId: String?
    public let fleetArn: String?
    public let locationAttributes: [LocationAttributes]?
    public let nextToken: String?
}

extension DescribeFleetLocationAttributesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case locationAttributes = "LocationAttributes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let locationAttributesContainer = try containerValues.decodeIfPresent([LocationAttributes?].self, forKey: .locationAttributes)
        var locationAttributesDecoded0:[LocationAttributes]? = nil
        if let locationAttributesContainer = locationAttributesContainer {
            locationAttributesDecoded0 = [LocationAttributes]()
            for structure0 in locationAttributesContainer {
                if let structure0 = structure0 {
                    locationAttributesDecoded0?.append(structure0)
                }
            }
        }
        locationAttributes = locationAttributesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeFleetLocationCapacityInputBodyMiddleware: Middleware {
    public let id: String = "DescribeFleetLocationCapacityInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetLocationCapacityInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetLocationCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetLocationCapacityInput>
    public typealias MOutput = OperationOutput<DescribeFleetLocationCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetLocationCapacityOutputError>
}

extension DescribeFleetLocationCapacityInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetLocationCapacityInput(fleetId: \(String(describing: fleetId)), location: \(String(describing: location)))"}
}

extension DescribeFleetLocationCapacityInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case location = "Location"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }
}

public struct DescribeFleetLocationCapacityInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeFleetLocationCapacityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetLocationCapacityInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetLocationCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetLocationCapacityInput>
    public typealias MOutput = OperationOutput<DescribeFleetLocationCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetLocationCapacityOutputError>
}

public struct DescribeFleetLocationCapacityInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeFleetLocationCapacityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetLocationCapacityInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetLocationCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetLocationCapacityInput>
    public typealias MOutput = OperationOutput<DescribeFleetLocationCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetLocationCapacityOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeFleetLocationCapacityInput: Equatable {
    /// <p>A unique identifier for the fleet to request location capacity for.
    ///             You can use either the fleet ID or ARN value.</p>
    public let fleetId: String?
    /// <p>The fleet location to retrieve capacity information for. Specify a location in the form of an AWS Region code, such as
    ///                 <code>us-west-2</code>.</p>
    public let location: String?

    public init (
        fleetId: String? = nil,
        location: String? = nil
    )
    {
        self.fleetId = fleetId
        self.location = location
    }
}

struct DescribeFleetLocationCapacityInputBody: Equatable {
    public let fleetId: String?
    public let location: String?
}

extension DescribeFleetLocationCapacityInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case location = "Location"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension DescribeFleetLocationCapacityOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetLocationCapacityOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeFleetLocationCapacityOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetLocationCapacityOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetLocationCapacityOutputResponse(fleetCapacity: \(String(describing: fleetCapacity)))"}
}

extension DescribeFleetLocationCapacityOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeFleetLocationCapacityOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetCapacity = output.fleetCapacity
        } else {
            self.fleetCapacity = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeFleetLocationCapacityOutputResponse: Equatable {
    /// <p>Resource capacity information for the requested fleet location. Capacity objects are
    ///             returned only for fleets and locations that currently exist.</p>
    public let fleetCapacity: FleetCapacity?

    public init (
        fleetCapacity: FleetCapacity? = nil
    )
    {
        self.fleetCapacity = fleetCapacity
    }
}

struct DescribeFleetLocationCapacityOutputResponseBody: Equatable {
    public let fleetCapacity: FleetCapacity?
}

extension DescribeFleetLocationCapacityOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetCapacity = "FleetCapacity"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetCapacityDecoded = try containerValues.decodeIfPresent(FleetCapacity.self, forKey: .fleetCapacity)
        fleetCapacity = fleetCapacityDecoded
    }
}

public struct DescribeFleetLocationUtilizationInputBodyMiddleware: Middleware {
    public let id: String = "DescribeFleetLocationUtilizationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetLocationUtilizationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetLocationUtilizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetLocationUtilizationInput>
    public typealias MOutput = OperationOutput<DescribeFleetLocationUtilizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetLocationUtilizationOutputError>
}

extension DescribeFleetLocationUtilizationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetLocationUtilizationInput(fleetId: \(String(describing: fleetId)), location: \(String(describing: location)))"}
}

extension DescribeFleetLocationUtilizationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case location = "Location"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }
}

public struct DescribeFleetLocationUtilizationInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeFleetLocationUtilizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetLocationUtilizationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetLocationUtilizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetLocationUtilizationInput>
    public typealias MOutput = OperationOutput<DescribeFleetLocationUtilizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetLocationUtilizationOutputError>
}

public struct DescribeFleetLocationUtilizationInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeFleetLocationUtilizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetLocationUtilizationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetLocationUtilizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetLocationUtilizationInput>
    public typealias MOutput = OperationOutput<DescribeFleetLocationUtilizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetLocationUtilizationOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeFleetLocationUtilizationInput: Equatable {
    /// <p>A unique identifier for the fleet to request location utilization for.
    ///             You can use either the fleet ID or ARN value.</p>
    public let fleetId: String?
    /// <p>The fleet location to retrieve utilization information for. Specify a location in the form of an AWS Region code, such as
    ///                 <code>us-west-2</code>.</p>
    public let location: String?

    public init (
        fleetId: String? = nil,
        location: String? = nil
    )
    {
        self.fleetId = fleetId
        self.location = location
    }
}

struct DescribeFleetLocationUtilizationInputBody: Equatable {
    public let fleetId: String?
    public let location: String?
}

extension DescribeFleetLocationUtilizationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case location = "Location"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension DescribeFleetLocationUtilizationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetLocationUtilizationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeFleetLocationUtilizationOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetLocationUtilizationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetLocationUtilizationOutputResponse(fleetUtilization: \(String(describing: fleetUtilization)))"}
}

extension DescribeFleetLocationUtilizationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeFleetLocationUtilizationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetUtilization = output.fleetUtilization
        } else {
            self.fleetUtilization = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeFleetLocationUtilizationOutputResponse: Equatable {
    /// <p>Utilization information for the requested fleet location. Utilization objects are
    ///             returned only for fleets and locations that currently exist.</p>
    public let fleetUtilization: FleetUtilization?

    public init (
        fleetUtilization: FleetUtilization? = nil
    )
    {
        self.fleetUtilization = fleetUtilization
    }
}

struct DescribeFleetLocationUtilizationOutputResponseBody: Equatable {
    public let fleetUtilization: FleetUtilization?
}

extension DescribeFleetLocationUtilizationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetUtilization = "FleetUtilization"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetUtilizationDecoded = try containerValues.decodeIfPresent(FleetUtilization.self, forKey: .fleetUtilization)
        fleetUtilization = fleetUtilizationDecoded
    }
}

public struct DescribeFleetPortSettingsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeFleetPortSettingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetPortSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetPortSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetPortSettingsInput>
    public typealias MOutput = OperationOutput<DescribeFleetPortSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetPortSettingsOutputError>
}

extension DescribeFleetPortSettingsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetPortSettingsInput(fleetId: \(String(describing: fleetId)), location: \(String(describing: location)))"}
}

extension DescribeFleetPortSettingsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case location = "Location"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }
}

public struct DescribeFleetPortSettingsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeFleetPortSettingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetPortSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetPortSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetPortSettingsInput>
    public typealias MOutput = OperationOutput<DescribeFleetPortSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetPortSettingsOutputError>
}

public struct DescribeFleetPortSettingsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeFleetPortSettingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetPortSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetPortSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetPortSettingsInput>
    public typealias MOutput = OperationOutput<DescribeFleetPortSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetPortSettingsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeFleetPortSettingsInput: Equatable {
    /// <p>A unique identifier for the fleet to retrieve port settings for. You can use either the fleet ID or ARN
    ///             value.</p>
    public let fleetId: String?
    /// <p>A remote location to check for status of port setting updates. Use the AWS Region code
    ///             format, such as <code>us-west-2</code>.</p>
    public let location: String?

    public init (
        fleetId: String? = nil,
        location: String? = nil
    )
    {
        self.fleetId = fleetId
        self.location = location
    }
}

struct DescribeFleetPortSettingsInputBody: Equatable {
    public let fleetId: String?
    public let location: String?
}

extension DescribeFleetPortSettingsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case location = "Location"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension DescribeFleetPortSettingsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetPortSettingsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeFleetPortSettingsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetPortSettingsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetPortSettingsOutputResponse(fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)), inboundPermissions: \(String(describing: inboundPermissions)), location: \(String(describing: location)), updateStatus: \(String(describing: updateStatus)))"}
}

extension DescribeFleetPortSettingsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeFleetPortSettingsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
            self.inboundPermissions = output.inboundPermissions
            self.location = output.location
            self.updateStatus = output.updateStatus
        } else {
            self.fleetArn = nil
            self.fleetId = nil
            self.inboundPermissions = nil
            self.location = nil
            self.updateStatus = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeFleetPortSettingsOutputResponse: Equatable {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>.</p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet that was requested. </p>
    public let fleetId: String?
    /// <p>The port settings for the requested fleet ID.</p>
    public let inboundPermissions: [IpPermission]?
    /// <p>The requested fleet location, expressed as an AWS Region code,
    ///             such as <code>us-west-2</code>. </p>
    public let location: String?
    /// <p>The current status of updates to the fleet's port settings in the requested fleet
    ///             location. A status of <code>PENDING_UPDATE</code> indicates that an update was requested
    ///             for the fleet but has not yet been completed for the location.</p>
    public let updateStatus: LocationUpdateStatus?

    public init (
        fleetArn: String? = nil,
        fleetId: String? = nil,
        inboundPermissions: [IpPermission]? = nil,
        location: String? = nil,
        updateStatus: LocationUpdateStatus? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.inboundPermissions = inboundPermissions
        self.location = location
        self.updateStatus = updateStatus
    }
}

struct DescribeFleetPortSettingsOutputResponseBody: Equatable {
    public let fleetId: String?
    public let fleetArn: String?
    public let inboundPermissions: [IpPermission]?
    public let updateStatus: LocationUpdateStatus?
    public let location: String?
}

extension DescribeFleetPortSettingsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case inboundPermissions = "InboundPermissions"
        case location = "Location"
        case updateStatus = "UpdateStatus"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let inboundPermissionsContainer = try containerValues.decodeIfPresent([IpPermission?].self, forKey: .inboundPermissions)
        var inboundPermissionsDecoded0:[IpPermission]? = nil
        if let inboundPermissionsContainer = inboundPermissionsContainer {
            inboundPermissionsDecoded0 = [IpPermission]()
            for structure0 in inboundPermissionsContainer {
                if let structure0 = structure0 {
                    inboundPermissionsDecoded0?.append(structure0)
                }
            }
        }
        inboundPermissions = inboundPermissionsDecoded0
        let updateStatusDecoded = try containerValues.decodeIfPresent(LocationUpdateStatus.self, forKey: .updateStatus)
        updateStatus = updateStatusDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

public struct DescribeFleetUtilizationInputBodyMiddleware: Middleware {
    public let id: String = "DescribeFleetUtilizationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetUtilizationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetUtilizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetUtilizationInput>
    public typealias MOutput = OperationOutput<DescribeFleetUtilizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetUtilizationOutputError>
}

extension DescribeFleetUtilizationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetUtilizationInput(fleetIds: \(String(describing: fleetIds)), limit: \(String(describing: limit)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeFleetUtilizationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetIds = "FleetIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetIds = fleetIds {
            var fleetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fleetIds)
            for fleetidorarnlist0 in fleetIds {
                try fleetIdsContainer.encode(fleetidorarnlist0)
            }
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeFleetUtilizationInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeFleetUtilizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetUtilizationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetUtilizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetUtilizationInput>
    public typealias MOutput = OperationOutput<DescribeFleetUtilizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetUtilizationOutputError>
}

public struct DescribeFleetUtilizationInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeFleetUtilizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFleetUtilizationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFleetUtilizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFleetUtilizationInput>
    public typealias MOutput = OperationOutput<DescribeFleetUtilizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFleetUtilizationOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeFleetUtilizationInput: Equatable {
    /// <p>A unique identifier for the fleet(s) to retrieve utilization data for. You can use either the fleet ID or ARN
    ///             value. To retrieve attributes for all current fleets, do not include this parameter. </p>
    public let fleetIds: [String]?
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet
    ///             IDs.</p>
    public let limit: Int?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet
    ///             IDs.</p>
    public let nextToken: String?

    public init (
        fleetIds: [String]? = nil,
        limit: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.fleetIds = fleetIds
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeFleetUtilizationInputBody: Equatable {
    public let fleetIds: [String]?
    public let limit: Int?
    public let nextToken: String?
}

extension DescribeFleetUtilizationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetIds = "FleetIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .fleetIds)
        var fleetIdsDecoded0:[String]? = nil
        if let fleetIdsContainer = fleetIdsContainer {
            fleetIdsDecoded0 = [String]()
            for string0 in fleetIdsContainer {
                if let string0 = string0 {
                    fleetIdsDecoded0?.append(string0)
                }
            }
        }
        fleetIds = fleetIdsDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFleetUtilizationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetUtilizationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeFleetUtilizationOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetUtilizationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFleetUtilizationOutputResponse(fleetUtilization: \(String(describing: fleetUtilization)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeFleetUtilizationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeFleetUtilizationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetUtilization = output.fleetUtilization
            self.nextToken = output.nextToken
        } else {
            self.fleetUtilization = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeFleetUtilizationOutputResponse: Equatable {
    /// <p>A collection of objects containing utilization information for each requested fleet
    ///             ID. Utilization objects are returned only for fleets that currently exist.</p>
    public let fleetUtilization: [FleetUtilization]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        fleetUtilization: [FleetUtilization]? = nil,
        nextToken: String? = nil
    )
    {
        self.fleetUtilization = fleetUtilization
        self.nextToken = nextToken
    }
}

struct DescribeFleetUtilizationOutputResponseBody: Equatable {
    public let fleetUtilization: [FleetUtilization]?
    public let nextToken: String?
}

extension DescribeFleetUtilizationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetUtilization = "FleetUtilization"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetUtilizationContainer = try containerValues.decodeIfPresent([FleetUtilization?].self, forKey: .fleetUtilization)
        var fleetUtilizationDecoded0:[FleetUtilization]? = nil
        if let fleetUtilizationContainer = fleetUtilizationContainer {
            fleetUtilizationDecoded0 = [FleetUtilization]()
            for structure0 in fleetUtilizationContainer {
                if let structure0 = structure0 {
                    fleetUtilizationDecoded0?.append(structure0)
                }
            }
        }
        fleetUtilization = fleetUtilizationDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeGameServerGroupInputBodyMiddleware: Middleware {
    public let id: String = "DescribeGameServerGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameServerGroupInput>
    public typealias MOutput = OperationOutput<DescribeGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameServerGroupOutputError>
}

extension DescribeGameServerGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGameServerGroupInput(gameServerGroupName: \(String(describing: gameServerGroupName)))"}
}

extension DescribeGameServerGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupName = "GameServerGroupName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
    }
}

public struct DescribeGameServerGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeGameServerGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameServerGroupInput>
    public typealias MOutput = OperationOutput<DescribeGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameServerGroupOutputError>
}

public struct DescribeGameServerGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeGameServerGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameServerGroupInput>
    public typealias MOutput = OperationOutput<DescribeGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameServerGroupOutputError>
}

public struct DescribeGameServerGroupInput: Equatable {
    /// <p>A unique identifier for the game server group. Use either the <a>GameServerGroup</a> name or ARN value.</p>
    public let gameServerGroupName: String?

    public init (
        gameServerGroupName: String? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
    }
}

struct DescribeGameServerGroupInputBody: Equatable {
    public let gameServerGroupName: String?
}

extension DescribeGameServerGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupName = "GameServerGroupName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
    }
}

extension DescribeGameServerGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGameServerGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeGameServerGroupOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGameServerGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGameServerGroupOutputResponse(gameServerGroup: \(String(describing: gameServerGroup)))"}
}

extension DescribeGameServerGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeGameServerGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameServerGroup = output.gameServerGroup
        } else {
            self.gameServerGroup = nil
        }
    }
}

public struct DescribeGameServerGroupOutputResponse: Equatable {
    /// <p>An object with the property settings for the requested game server group resource. </p>
    public let gameServerGroup: GameServerGroup?

    public init (
        gameServerGroup: GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

struct DescribeGameServerGroupOutputResponseBody: Equatable {
    public let gameServerGroup: GameServerGroup?
}

extension DescribeGameServerGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerGroup = "GameServerGroup"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupDecoded = try containerValues.decodeIfPresent(GameServerGroup.self, forKey: .gameServerGroup)
        gameServerGroup = gameServerGroupDecoded
    }
}

public struct DescribeGameServerInputBodyMiddleware: Middleware {
    public let id: String = "DescribeGameServerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameServerInput>
    public typealias MOutput = OperationOutput<DescribeGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameServerOutputError>
}

extension DescribeGameServerInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGameServerInput(gameServerGroupName: \(String(describing: gameServerGroupName)), gameServerId: \(String(describing: gameServerId)))"}
}

extension DescribeGameServerInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerId = gameServerId {
            try encodeContainer.encode(gameServerId, forKey: .gameServerId)
        }
    }
}

public struct DescribeGameServerInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeGameServerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameServerInput>
    public typealias MOutput = OperationOutput<DescribeGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameServerOutputError>
}

public struct DescribeGameServerInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeGameServerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameServerInput>
    public typealias MOutput = OperationOutput<DescribeGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameServerOutputError>
}

public struct DescribeGameServerInput: Equatable {
    /// <p>A unique identifier for the game server group where the game server is running.
    ///             Use either the <a>GameServerGroup</a> name or ARN value.</p>
    public let gameServerGroupName: String?
    /// <p>A custom string that uniquely identifies the game server information to be retrieved.</p>
    public let gameServerId: String?

    public init (
        gameServerGroupName: String? = nil,
        gameServerId: String? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
    }
}

struct DescribeGameServerInputBody: Equatable {
    public let gameServerGroupName: String?
    public let gameServerId: String?
}

extension DescribeGameServerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerId)
        gameServerId = gameServerIdDecoded
    }
}

public struct DescribeGameServerInstancesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeGameServerInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameServerInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameServerInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameServerInstancesInput>
    public typealias MOutput = OperationOutput<DescribeGameServerInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameServerInstancesOutputError>
}

extension DescribeGameServerInstancesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGameServerInstancesInput(gameServerGroupName: \(String(describing: gameServerGroupName)), instanceIds: \(String(describing: instanceIds)), limit: \(String(describing: limit)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeGameServerInstancesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case instanceIds = "InstanceIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceIds)
            for gameserverinstanceids0 in instanceIds {
                try instanceIdsContainer.encode(gameserverinstanceids0)
            }
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeGameServerInstancesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeGameServerInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameServerInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameServerInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameServerInstancesInput>
    public typealias MOutput = OperationOutput<DescribeGameServerInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameServerInstancesOutputError>
}

public struct DescribeGameServerInstancesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeGameServerInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameServerInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameServerInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameServerInstancesInput>
    public typealias MOutput = OperationOutput<DescribeGameServerInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameServerInstancesOutputError>
}

public struct DescribeGameServerInstancesInput: Equatable {
    /// <p>A unique identifier for the game server group. Use either the <a>GameServerGroup</a> name or ARN value.</p>
    public let gameServerGroupName: String?
    /// <p>The EC2 instance IDs that you want to retrieve status on. EC2 instance IDs use a
    ///             17-character format, for example: <code>i-1234567890abcdef0</code>. To retrieve all
    ///             instances in the game server group, leave this parameter empty. </p>
    public let instanceIds: [String]?
    /// <p>
    ///             The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.
    ///         </p>
    public let limit: Int?
    /// <p>
    ///             A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    ///         </p>
    public let nextToken: String?

    public init (
        gameServerGroupName: String? = nil,
        instanceIds: [String]? = nil,
        limit: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.instanceIds = instanceIds
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeGameServerInstancesInputBody: Equatable {
    public let gameServerGroupName: String?
    public let instanceIds: [String]?
    public let limit: Int?
    public let nextToken: String?
}

extension DescribeGameServerInstancesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case instanceIds = "InstanceIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let instanceIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .instanceIds)
        var instanceIdsDecoded0:[String]? = nil
        if let instanceIdsContainer = instanceIdsContainer {
            instanceIdsDecoded0 = [String]()
            for string0 in instanceIdsContainer {
                if let string0 = string0 {
                    instanceIdsDecoded0?.append(string0)
                }
            }
        }
        instanceIds = instanceIdsDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeGameServerInstancesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGameServerInstancesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeGameServerInstancesOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGameServerInstancesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGameServerInstancesOutputResponse(gameServerInstances: \(String(describing: gameServerInstances)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeGameServerInstancesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeGameServerInstancesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameServerInstances = output.gameServerInstances
            self.nextToken = output.nextToken
        } else {
            self.gameServerInstances = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeGameServerInstancesOutputResponse: Equatable {
    /// <p>
    ///             The collection of requested game server instances.
    ///         </p>
    public let gameServerInstances: [GameServerInstance]?
    /// <p>
    ///             A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    ///         </p>
    public let nextToken: String?

    public init (
        gameServerInstances: [GameServerInstance]? = nil,
        nextToken: String? = nil
    )
    {
        self.gameServerInstances = gameServerInstances
        self.nextToken = nextToken
    }
}

struct DescribeGameServerInstancesOutputResponseBody: Equatable {
    public let gameServerInstances: [GameServerInstance]?
    public let nextToken: String?
}

extension DescribeGameServerInstancesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerInstances = "GameServerInstances"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerInstancesContainer = try containerValues.decodeIfPresent([GameServerInstance?].self, forKey: .gameServerInstances)
        var gameServerInstancesDecoded0:[GameServerInstance]? = nil
        if let gameServerInstancesContainer = gameServerInstancesContainer {
            gameServerInstancesDecoded0 = [GameServerInstance]()
            for structure0 in gameServerInstancesContainer {
                if let structure0 = structure0 {
                    gameServerInstancesDecoded0?.append(structure0)
                }
            }
        }
        gameServerInstances = gameServerInstancesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeGameServerOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGameServerOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeGameServerOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGameServerOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGameServerOutputResponse(gameServer: \(String(describing: gameServer)))"}
}

extension DescribeGameServerOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeGameServerOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameServer = output.gameServer
        } else {
            self.gameServer = nil
        }
    }
}

public struct DescribeGameServerOutputResponse: Equatable {
    /// <p>Object that describes the requested game server.</p>
    public let gameServer: GameServer?

    public init (
        gameServer: GameServer? = nil
    )
    {
        self.gameServer = gameServer
    }
}

struct DescribeGameServerOutputResponseBody: Equatable {
    public let gameServer: GameServer?
}

extension DescribeGameServerOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServer = "GameServer"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerDecoded = try containerValues.decodeIfPresent(GameServer.self, forKey: .gameServer)
        gameServer = gameServerDecoded
    }
}

public struct DescribeGameSessionDetailsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeGameSessionDetailsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameSessionDetailsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameSessionDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameSessionDetailsInput>
    public typealias MOutput = OperationOutput<DescribeGameSessionDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameSessionDetailsOutputError>
}

extension DescribeGameSessionDetailsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGameSessionDetailsInput(aliasId: \(String(describing: aliasId)), fleetId: \(String(describing: fleetId)), gameSessionId: \(String(describing: gameSessionId)), limit: \(String(describing: limit)), location: \(String(describing: location)), nextToken: \(String(describing: nextToken)), statusFilter: \(String(describing: statusFilter)))"}
}

extension DescribeGameSessionDetailsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
        case fleetId = "FleetId"
        case gameSessionId = "GameSessionId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case statusFilter = "StatusFilter"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let statusFilter = statusFilter {
            try encodeContainer.encode(statusFilter, forKey: .statusFilter)
        }
    }
}

public struct DescribeGameSessionDetailsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeGameSessionDetailsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameSessionDetailsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameSessionDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameSessionDetailsInput>
    public typealias MOutput = OperationOutput<DescribeGameSessionDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameSessionDetailsOutputError>
}

public struct DescribeGameSessionDetailsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeGameSessionDetailsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameSessionDetailsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameSessionDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameSessionDetailsInput>
    public typealias MOutput = OperationOutput<DescribeGameSessionDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameSessionDetailsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeGameSessionDetailsInput: Equatable {
    /// <p>A unique identifier for the alias associated with the fleet to retrieve all game sessions for. You can use either
    ///             the alias ID or ARN value.</p>
    public let aliasId: String?
    /// <p>A unique identifier for the fleet to retrieve all game sessions active on the fleet. You can use either the fleet
    ///             ID or ARN value.</p>
    public let fleetId: String?
    /// <p>A unique identifier for the game session to retrieve. </p>
    public let gameSessionId: String?
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    public let limit: Int?
    /// <p>A fleet location to get game sessions for. You can specify a fleet's home Region or a
    ///             remote location. Use the AWS Region code format, such as <code>us-west-2</code>. </p>
    public let location: String?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?
    /// <p>Game session status to filter results on. Possible game session statuses include
    ///                 <code>ACTIVE</code>, <code>TERMINATED</code>, <code>ACTIVATING</code> and
    ///                 <code>TERMINATING</code> (the last two are transitory). </p>
    public let statusFilter: String?

    public init (
        aliasId: String? = nil,
        fleetId: String? = nil,
        gameSessionId: String? = nil,
        limit: Int? = nil,
        location: String? = nil,
        nextToken: String? = nil,
        statusFilter: String? = nil
    )
    {
        self.aliasId = aliasId
        self.fleetId = fleetId
        self.gameSessionId = gameSessionId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
        self.statusFilter = statusFilter
    }
}

struct DescribeGameSessionDetailsInputBody: Equatable {
    public let fleetId: String?
    public let gameSessionId: String?
    public let aliasId: String?
    public let location: String?
    public let statusFilter: String?
    public let limit: Int?
    public let nextToken: String?
}

extension DescribeGameSessionDetailsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
        case fleetId = "FleetId"
        case gameSessionId = "GameSessionId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case statusFilter = "StatusFilter"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let aliasIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
        let statusFilterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusFilter)
        statusFilter = statusFilterDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeGameSessionDetailsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGameSessionDetailsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalRoutingStrategyException" : self = .terminalRoutingStrategyException(try TerminalRoutingStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeGameSessionDetailsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case terminalRoutingStrategyException(TerminalRoutingStrategyException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGameSessionDetailsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGameSessionDetailsOutputResponse(gameSessionDetails: \(String(describing: gameSessionDetails)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeGameSessionDetailsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeGameSessionDetailsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameSessionDetails = output.gameSessionDetails
            self.nextToken = output.nextToken
        } else {
            self.gameSessionDetails = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeGameSessionDetailsOutputResponse: Equatable {
    /// <p>A collection of properties for each game session that matches the request.</p>
    public let gameSessionDetails: [GameSessionDetail]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        gameSessionDetails: [GameSessionDetail]? = nil,
        nextToken: String? = nil
    )
    {
        self.gameSessionDetails = gameSessionDetails
        self.nextToken = nextToken
    }
}

struct DescribeGameSessionDetailsOutputResponseBody: Equatable {
    public let gameSessionDetails: [GameSessionDetail]?
    public let nextToken: String?
}

extension DescribeGameSessionDetailsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessionDetails = "GameSessionDetails"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionDetailsContainer = try containerValues.decodeIfPresent([GameSessionDetail?].self, forKey: .gameSessionDetails)
        var gameSessionDetailsDecoded0:[GameSessionDetail]? = nil
        if let gameSessionDetailsContainer = gameSessionDetailsContainer {
            gameSessionDetailsDecoded0 = [GameSessionDetail]()
            for structure0 in gameSessionDetailsContainer {
                if let structure0 = structure0 {
                    gameSessionDetailsDecoded0?.append(structure0)
                }
            }
        }
        gameSessionDetails = gameSessionDetailsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeGameSessionPlacementInputBodyMiddleware: Middleware {
    public let id: String = "DescribeGameSessionPlacementInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameSessionPlacementInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameSessionPlacementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameSessionPlacementInput>
    public typealias MOutput = OperationOutput<DescribeGameSessionPlacementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameSessionPlacementOutputError>
}

extension DescribeGameSessionPlacementInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGameSessionPlacementInput(placementId: \(String(describing: placementId)))"}
}

extension DescribeGameSessionPlacementInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case placementId = "PlacementId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let placementId = placementId {
            try encodeContainer.encode(placementId, forKey: .placementId)
        }
    }
}

public struct DescribeGameSessionPlacementInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeGameSessionPlacementInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameSessionPlacementInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameSessionPlacementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameSessionPlacementInput>
    public typealias MOutput = OperationOutput<DescribeGameSessionPlacementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameSessionPlacementOutputError>
}

public struct DescribeGameSessionPlacementInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeGameSessionPlacementInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameSessionPlacementInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameSessionPlacementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameSessionPlacementInput>
    public typealias MOutput = OperationOutput<DescribeGameSessionPlacementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameSessionPlacementOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeGameSessionPlacementInput: Equatable {
    /// <p>A unique identifier for a game session placement to retrieve.</p>
    public let placementId: String?

    public init (
        placementId: String? = nil
    )
    {
        self.placementId = placementId
    }
}

struct DescribeGameSessionPlacementInputBody: Equatable {
    public let placementId: String?
}

extension DescribeGameSessionPlacementInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case placementId = "PlacementId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let placementIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .placementId)
        placementId = placementIdDecoded
    }
}

extension DescribeGameSessionPlacementOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGameSessionPlacementOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeGameSessionPlacementOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGameSessionPlacementOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGameSessionPlacementOutputResponse(gameSessionPlacement: \(String(describing: gameSessionPlacement)))"}
}

extension DescribeGameSessionPlacementOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeGameSessionPlacementOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameSessionPlacement = output.gameSessionPlacement
        } else {
            self.gameSessionPlacement = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeGameSessionPlacementOutputResponse: Equatable {
    /// <p>Object that describes the requested game session placement.</p>
    public let gameSessionPlacement: GameSessionPlacement?

    public init (
        gameSessionPlacement: GameSessionPlacement? = nil
    )
    {
        self.gameSessionPlacement = gameSessionPlacement
    }
}

struct DescribeGameSessionPlacementOutputResponseBody: Equatable {
    public let gameSessionPlacement: GameSessionPlacement?
}

extension DescribeGameSessionPlacementOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessionPlacement = "GameSessionPlacement"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionPlacementDecoded = try containerValues.decodeIfPresent(GameSessionPlacement.self, forKey: .gameSessionPlacement)
        gameSessionPlacement = gameSessionPlacementDecoded
    }
}

public struct DescribeGameSessionQueuesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeGameSessionQueuesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameSessionQueuesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameSessionQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameSessionQueuesInput>
    public typealias MOutput = OperationOutput<DescribeGameSessionQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameSessionQueuesOutputError>
}

extension DescribeGameSessionQueuesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGameSessionQueuesInput(limit: \(String(describing: limit)), names: \(String(describing: names)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeGameSessionQueuesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case names = "Names"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let names = names {
            var namesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .names)
            for gamesessionqueuenameorarnlist0 in names {
                try namesContainer.encode(gamesessionqueuenameorarnlist0)
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeGameSessionQueuesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeGameSessionQueuesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameSessionQueuesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameSessionQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameSessionQueuesInput>
    public typealias MOutput = OperationOutput<DescribeGameSessionQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameSessionQueuesOutputError>
}

public struct DescribeGameSessionQueuesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeGameSessionQueuesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameSessionQueuesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameSessionQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameSessionQueuesInput>
    public typealias MOutput = OperationOutput<DescribeGameSessionQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameSessionQueuesOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeGameSessionQueuesInput: Equatable {
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. You can request up to 50 results.</p>
    public let limit: Int?
    /// <p>A list of queue names to retrieve information for. You can use either the queue ID or
    ///             ARN value. To request settings for all queues, leave this parameter empty. </p>
    public let names: [String]?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?

    public init (
        limit: Int? = nil,
        names: [String]? = nil,
        nextToken: String? = nil
    )
    {
        self.limit = limit
        self.names = names
        self.nextToken = nextToken
    }
}

struct DescribeGameSessionQueuesInputBody: Equatable {
    public let names: [String]?
    public let limit: Int?
    public let nextToken: String?
}

extension DescribeGameSessionQueuesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case names = "Names"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .names)
        var namesDecoded0:[String]? = nil
        if let namesContainer = namesContainer {
            namesDecoded0 = [String]()
            for string0 in namesContainer {
                if let string0 = string0 {
                    namesDecoded0?.append(string0)
                }
            }
        }
        names = namesDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeGameSessionQueuesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGameSessionQueuesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeGameSessionQueuesOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGameSessionQueuesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGameSessionQueuesOutputResponse(gameSessionQueues: \(String(describing: gameSessionQueues)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeGameSessionQueuesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeGameSessionQueuesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameSessionQueues = output.gameSessionQueues
            self.nextToken = output.nextToken
        } else {
            self.gameSessionQueues = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeGameSessionQueuesOutputResponse: Equatable {
    /// <p>A collection of objects that describe the requested game session queues.</p>
    public let gameSessionQueues: [GameSessionQueue]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        gameSessionQueues: [GameSessionQueue]? = nil,
        nextToken: String? = nil
    )
    {
        self.gameSessionQueues = gameSessionQueues
        self.nextToken = nextToken
    }
}

struct DescribeGameSessionQueuesOutputResponseBody: Equatable {
    public let gameSessionQueues: [GameSessionQueue]?
    public let nextToken: String?
}

extension DescribeGameSessionQueuesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessionQueues = "GameSessionQueues"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionQueuesContainer = try containerValues.decodeIfPresent([GameSessionQueue?].self, forKey: .gameSessionQueues)
        var gameSessionQueuesDecoded0:[GameSessionQueue]? = nil
        if let gameSessionQueuesContainer = gameSessionQueuesContainer {
            gameSessionQueuesDecoded0 = [GameSessionQueue]()
            for structure0 in gameSessionQueuesContainer {
                if let structure0 = structure0 {
                    gameSessionQueuesDecoded0?.append(structure0)
                }
            }
        }
        gameSessionQueues = gameSessionQueuesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeGameSessionsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeGameSessionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameSessionsInput>
    public typealias MOutput = OperationOutput<DescribeGameSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameSessionsOutputError>
}

extension DescribeGameSessionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGameSessionsInput(aliasId: \(String(describing: aliasId)), fleetId: \(String(describing: fleetId)), gameSessionId: \(String(describing: gameSessionId)), limit: \(String(describing: limit)), location: \(String(describing: location)), nextToken: \(String(describing: nextToken)), statusFilter: \(String(describing: statusFilter)))"}
}

extension DescribeGameSessionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
        case fleetId = "FleetId"
        case gameSessionId = "GameSessionId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case statusFilter = "StatusFilter"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let statusFilter = statusFilter {
            try encodeContainer.encode(statusFilter, forKey: .statusFilter)
        }
    }
}

public struct DescribeGameSessionsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeGameSessionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameSessionsInput>
    public typealias MOutput = OperationOutput<DescribeGameSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameSessionsOutputError>
}

public struct DescribeGameSessionsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeGameSessionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGameSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGameSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGameSessionsInput>
    public typealias MOutput = OperationOutput<DescribeGameSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGameSessionsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeGameSessionsInput: Equatable {
    /// <p>A unique identifier for the alias associated with the fleet to retrieve game sessions for. You can use either the
    ///             alias ID or ARN value.</p>
    public let aliasId: String?
    /// <p>A unique identifier for the fleet to retrieve game sessions for. You can use either the fleet ID or ARN value. </p>
    public let fleetId: String?
    /// <p>A unique identifier for the game session to retrieve. </p>
    public let gameSessionId: String?
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    public let limit: Int?
    /// <p>A fleet location to get game session details for. You can specify a fleet's home
    ///             Region or a remote location. Use the AWS Region code format, such as
    ///                 <code>us-west-2</code>. </p>
    public let location: String?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?
    /// <p>Game session status to filter results on. You can filter on the following states:
    ///                 <code>ACTIVE</code>, <code>TERMINATED</code>, <code>ACTIVATING</code>, and
    ///                 <code>TERMINATING</code>. The last two are transitory and used for only very brief
    ///             periods of time. </p>
    public let statusFilter: String?

    public init (
        aliasId: String? = nil,
        fleetId: String? = nil,
        gameSessionId: String? = nil,
        limit: Int? = nil,
        location: String? = nil,
        nextToken: String? = nil,
        statusFilter: String? = nil
    )
    {
        self.aliasId = aliasId
        self.fleetId = fleetId
        self.gameSessionId = gameSessionId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
        self.statusFilter = statusFilter
    }
}

struct DescribeGameSessionsInputBody: Equatable {
    public let fleetId: String?
    public let gameSessionId: String?
    public let aliasId: String?
    public let location: String?
    public let statusFilter: String?
    public let limit: Int?
    public let nextToken: String?
}

extension DescribeGameSessionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
        case fleetId = "FleetId"
        case gameSessionId = "GameSessionId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case statusFilter = "StatusFilter"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let aliasIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
        let statusFilterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusFilter)
        statusFilter = statusFilterDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeGameSessionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGameSessionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalRoutingStrategyException" : self = .terminalRoutingStrategyException(try TerminalRoutingStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeGameSessionsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case terminalRoutingStrategyException(TerminalRoutingStrategyException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGameSessionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGameSessionsOutputResponse(gameSessions: \(String(describing: gameSessions)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeGameSessionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeGameSessionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameSessions = output.gameSessions
            self.nextToken = output.nextToken
        } else {
            self.gameSessions = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeGameSessionsOutputResponse: Equatable {
    /// <p>A collection of properties for each game session that matches the request.</p>
    public let gameSessions: [GameSession]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        gameSessions: [GameSession]? = nil,
        nextToken: String? = nil
    )
    {
        self.gameSessions = gameSessions
        self.nextToken = nextToken
    }
}

struct DescribeGameSessionsOutputResponseBody: Equatable {
    public let gameSessions: [GameSession]?
    public let nextToken: String?
}

extension DescribeGameSessionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessions = "GameSessions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionsContainer = try containerValues.decodeIfPresent([GameSession?].self, forKey: .gameSessions)
        var gameSessionsDecoded0:[GameSession]? = nil
        if let gameSessionsContainer = gameSessionsContainer {
            gameSessionsDecoded0 = [GameSession]()
            for structure0 in gameSessionsContainer {
                if let structure0 = structure0 {
                    gameSessionsDecoded0?.append(structure0)
                }
            }
        }
        gameSessions = gameSessionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeInstancesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeInstancesInput>
    public typealias MOutput = OperationOutput<DescribeInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeInstancesOutputError>
}

extension DescribeInstancesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeInstancesInput(fleetId: \(String(describing: fleetId)), instanceId: \(String(describing: instanceId)), limit: \(String(describing: limit)), location: \(String(describing: location)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeInstancesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case instanceId = "InstanceId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeInstancesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeInstancesInput>
    public typealias MOutput = OperationOutput<DescribeInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeInstancesOutputError>
}

public struct DescribeInstancesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeInstancesInput>
    public typealias MOutput = OperationOutput<DescribeInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeInstancesOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeInstancesInput: Equatable {
    /// <p>A unique identifier for the fleet to retrieve instance information for.  You can use either the fleet ID or ARN
    ///             value.</p>
    public let fleetId: String?
    /// <p>A unique identifier for an instance to retrieve. Specify an instance ID or leave
    ///             blank to retrieve all instances in the fleet.</p>
    public let instanceId: String?
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    public let limit: Int?
    /// <p>The name of a location to retrieve instance information for, in the form of an AWS
    ///             Region code such as <code>us-west-2</code>. </p>
    public let location: String?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?

    public init (
        fleetId: String? = nil,
        instanceId: String? = nil,
        limit: Int? = nil,
        location: String? = nil,
        nextToken: String? = nil
    )
    {
        self.fleetId = fleetId
        self.instanceId = instanceId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
    }
}

struct DescribeInstancesInputBody: Equatable {
    public let fleetId: String?
    public let instanceId: String?
    public let limit: Int?
    public let nextToken: String?
    public let location: String?
}

extension DescribeInstancesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case instanceId = "InstanceId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension DescribeInstancesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInstancesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInstancesOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInstancesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeInstancesOutputResponse(instances: \(String(describing: instances)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeInstancesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeInstancesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.instances = output.instances
            self.nextToken = output.nextToken
        } else {
            self.instances = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeInstancesOutputResponse: Equatable {
    /// <p>A collection of objects containing properties for each instance returned.</p>
    public let instances: [Instance]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        instances: [Instance]? = nil,
        nextToken: String? = nil
    )
    {
        self.instances = instances
        self.nextToken = nextToken
    }
}

struct DescribeInstancesOutputResponseBody: Equatable {
    public let instances: [Instance]?
    public let nextToken: String?
}

extension DescribeInstancesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instances = "Instances"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesContainer = try containerValues.decodeIfPresent([Instance?].self, forKey: .instances)
        var instancesDecoded0:[Instance]? = nil
        if let instancesContainer = instancesContainer {
            instancesDecoded0 = [Instance]()
            for structure0 in instancesContainer {
                if let structure0 = structure0 {
                    instancesDecoded0?.append(structure0)
                }
            }
        }
        instances = instancesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeMatchmakingConfigurationsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeMatchmakingConfigurationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMatchmakingConfigurationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMatchmakingConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMatchmakingConfigurationsInput>
    public typealias MOutput = OperationOutput<DescribeMatchmakingConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMatchmakingConfigurationsOutputError>
}

extension DescribeMatchmakingConfigurationsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeMatchmakingConfigurationsInput(limit: \(String(describing: limit)), names: \(String(describing: names)), nextToken: \(String(describing: nextToken)), ruleSetName: \(String(describing: ruleSetName)))"}
}

extension DescribeMatchmakingConfigurationsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case names = "Names"
        case nextToken = "NextToken"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let names = names {
            var namesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .names)
            for matchmakingconfigurationnamelist0 in names {
                try namesContainer.encode(matchmakingconfigurationnamelist0)
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let ruleSetName = ruleSetName {
            try encodeContainer.encode(ruleSetName, forKey: .ruleSetName)
        }
    }
}

public struct DescribeMatchmakingConfigurationsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeMatchmakingConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMatchmakingConfigurationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMatchmakingConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMatchmakingConfigurationsInput>
    public typealias MOutput = OperationOutput<DescribeMatchmakingConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMatchmakingConfigurationsOutputError>
}

public struct DescribeMatchmakingConfigurationsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeMatchmakingConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMatchmakingConfigurationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMatchmakingConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMatchmakingConfigurationsInput>
    public typealias MOutput = OperationOutput<DescribeMatchmakingConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMatchmakingConfigurationsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeMatchmakingConfigurationsInput: Equatable {
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This parameter is limited to 10.</p>
    public let limit: Int?
    /// <p>A unique identifier for the matchmaking configuration(s) to retrieve. You can use either the configuration name or ARN value. To
    ///             request all existing configurations, leave this parameter empty.</p>
    public let names: [String]?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?
    /// <p>A unique identifier for the matchmaking rule set. You can use either the rule set name or ARN value. Use this parameter to
    ///             retrieve all matchmaking configurations that use this rule set.</p>
    public let ruleSetName: String?

    public init (
        limit: Int? = nil,
        names: [String]? = nil,
        nextToken: String? = nil,
        ruleSetName: String? = nil
    )
    {
        self.limit = limit
        self.names = names
        self.nextToken = nextToken
        self.ruleSetName = ruleSetName
    }
}

struct DescribeMatchmakingConfigurationsInputBody: Equatable {
    public let names: [String]?
    public let ruleSetName: String?
    public let limit: Int?
    public let nextToken: String?
}

extension DescribeMatchmakingConfigurationsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case names = "Names"
        case nextToken = "NextToken"
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .names)
        var namesDecoded0:[String]? = nil
        if let namesContainer = namesContainer {
            namesDecoded0 = [String]()
            for string0 in namesContainer {
                if let string0 = string0 {
                    namesDecoded0?.append(string0)
                }
            }
        }
        names = namesDecoded0
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeMatchmakingConfigurationsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMatchmakingConfigurationsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeMatchmakingConfigurationsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMatchmakingConfigurationsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeMatchmakingConfigurationsOutputResponse(configurations: \(String(describing: configurations)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeMatchmakingConfigurationsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeMatchmakingConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.configurations = output.configurations
            self.nextToken = output.nextToken
        } else {
            self.configurations = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeMatchmakingConfigurationsOutputResponse: Equatable {
    /// <p>A collection of requested matchmaking configurations.</p>
    public let configurations: [MatchmakingConfiguration]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        configurations: [MatchmakingConfiguration]? = nil,
        nextToken: String? = nil
    )
    {
        self.configurations = configurations
        self.nextToken = nextToken
    }
}

struct DescribeMatchmakingConfigurationsOutputResponseBody: Equatable {
    public let configurations: [MatchmakingConfiguration]?
    public let nextToken: String?
}

extension DescribeMatchmakingConfigurationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configurations = "Configurations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationsContainer = try containerValues.decodeIfPresent([MatchmakingConfiguration?].self, forKey: .configurations)
        var configurationsDecoded0:[MatchmakingConfiguration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [MatchmakingConfiguration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeMatchmakingInputBodyMiddleware: Middleware {
    public let id: String = "DescribeMatchmakingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMatchmakingInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMatchmakingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMatchmakingInput>
    public typealias MOutput = OperationOutput<DescribeMatchmakingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMatchmakingOutputError>
}

extension DescribeMatchmakingInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeMatchmakingInput(ticketIds: \(String(describing: ticketIds)))"}
}

extension DescribeMatchmakingInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ticketIds = "TicketIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ticketIds = ticketIds {
            var ticketIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ticketIds)
            for matchmakingidlist0 in ticketIds {
                try ticketIdsContainer.encode(matchmakingidlist0)
            }
        }
    }
}

public struct DescribeMatchmakingInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeMatchmakingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMatchmakingInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMatchmakingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMatchmakingInput>
    public typealias MOutput = OperationOutput<DescribeMatchmakingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMatchmakingOutputError>
}

public struct DescribeMatchmakingInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeMatchmakingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMatchmakingInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMatchmakingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMatchmakingInput>
    public typealias MOutput = OperationOutput<DescribeMatchmakingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMatchmakingOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeMatchmakingInput: Equatable {
    /// <p>A unique identifier for a matchmaking ticket. You can include up to 10 ID values. </p>
    public let ticketIds: [String]?

    public init (
        ticketIds: [String]? = nil
    )
    {
        self.ticketIds = ticketIds
    }
}

struct DescribeMatchmakingInputBody: Equatable {
    public let ticketIds: [String]?
}

extension DescribeMatchmakingInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case ticketIds = "TicketIds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .ticketIds)
        var ticketIdsDecoded0:[String]? = nil
        if let ticketIdsContainer = ticketIdsContainer {
            ticketIdsDecoded0 = [String]()
            for string0 in ticketIdsContainer {
                if let string0 = string0 {
                    ticketIdsDecoded0?.append(string0)
                }
            }
        }
        ticketIds = ticketIdsDecoded0
    }
}

extension DescribeMatchmakingOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMatchmakingOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeMatchmakingOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMatchmakingOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeMatchmakingOutputResponse(ticketList: \(String(describing: ticketList)))"}
}

extension DescribeMatchmakingOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeMatchmakingOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.ticketList = output.ticketList
        } else {
            self.ticketList = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeMatchmakingOutputResponse: Equatable {
    /// <p>A collection of existing matchmaking ticket objects matching the request.</p>
    public let ticketList: [MatchmakingTicket]?

    public init (
        ticketList: [MatchmakingTicket]? = nil
    )
    {
        self.ticketList = ticketList
    }
}

struct DescribeMatchmakingOutputResponseBody: Equatable {
    public let ticketList: [MatchmakingTicket]?
}

extension DescribeMatchmakingOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case ticketList = "TicketList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketListContainer = try containerValues.decodeIfPresent([MatchmakingTicket?].self, forKey: .ticketList)
        var ticketListDecoded0:[MatchmakingTicket]? = nil
        if let ticketListContainer = ticketListContainer {
            ticketListDecoded0 = [MatchmakingTicket]()
            for structure0 in ticketListContainer {
                if let structure0 = structure0 {
                    ticketListDecoded0?.append(structure0)
                }
            }
        }
        ticketList = ticketListDecoded0
    }
}

public struct DescribeMatchmakingRuleSetsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeMatchmakingRuleSetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMatchmakingRuleSetsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMatchmakingRuleSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMatchmakingRuleSetsInput>
    public typealias MOutput = OperationOutput<DescribeMatchmakingRuleSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMatchmakingRuleSetsOutputError>
}

extension DescribeMatchmakingRuleSetsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeMatchmakingRuleSetsInput(limit: \(String(describing: limit)), names: \(String(describing: names)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeMatchmakingRuleSetsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case names = "Names"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let names = names {
            var namesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .names)
            for matchmakingrulesetnamelist0 in names {
                try namesContainer.encode(matchmakingrulesetnamelist0)
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeMatchmakingRuleSetsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeMatchmakingRuleSetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMatchmakingRuleSetsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMatchmakingRuleSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMatchmakingRuleSetsInput>
    public typealias MOutput = OperationOutput<DescribeMatchmakingRuleSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMatchmakingRuleSetsOutputError>
}

public struct DescribeMatchmakingRuleSetsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeMatchmakingRuleSetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMatchmakingRuleSetsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMatchmakingRuleSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMatchmakingRuleSetsInput>
    public typealias MOutput = OperationOutput<DescribeMatchmakingRuleSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMatchmakingRuleSetsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeMatchmakingRuleSetsInput: Equatable {
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    public let limit: Int?
    /// <p>A list of one or more matchmaking rule set names to retrieve details for. (Note: The
    ///             rule set name is different from the optional "name" field in the rule set body.) You can
    ///             use either the rule set name or ARN value. </p>
    public let names: [String]?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?

    public init (
        limit: Int? = nil,
        names: [String]? = nil,
        nextToken: String? = nil
    )
    {
        self.limit = limit
        self.names = names
        self.nextToken = nextToken
    }
}

struct DescribeMatchmakingRuleSetsInputBody: Equatable {
    public let names: [String]?
    public let limit: Int?
    public let nextToken: String?
}

extension DescribeMatchmakingRuleSetsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case names = "Names"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .names)
        var namesDecoded0:[String]? = nil
        if let namesContainer = namesContainer {
            namesDecoded0 = [String]()
            for string0 in namesContainer {
                if let string0 = string0 {
                    namesDecoded0?.append(string0)
                }
            }
        }
        names = namesDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeMatchmakingRuleSetsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMatchmakingRuleSetsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeMatchmakingRuleSetsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMatchmakingRuleSetsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeMatchmakingRuleSetsOutputResponse(nextToken: \(String(describing: nextToken)), ruleSets: \(String(describing: ruleSets)))"}
}

extension DescribeMatchmakingRuleSetsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeMatchmakingRuleSetsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.ruleSets = output.ruleSets
        } else {
            self.nextToken = nil
            self.ruleSets = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeMatchmakingRuleSetsOutputResponse: Equatable {
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?
    /// <p>A collection of requested matchmaking rule set objects. </p>
    public let ruleSets: [MatchmakingRuleSet]?

    public init (
        nextToken: String? = nil,
        ruleSets: [MatchmakingRuleSet]? = nil
    )
    {
        self.nextToken = nextToken
        self.ruleSets = ruleSets
    }
}

struct DescribeMatchmakingRuleSetsOutputResponseBody: Equatable {
    public let ruleSets: [MatchmakingRuleSet]?
    public let nextToken: String?
}

extension DescribeMatchmakingRuleSetsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case ruleSets = "RuleSets"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetsContainer = try containerValues.decodeIfPresent([MatchmakingRuleSet?].self, forKey: .ruleSets)
        var ruleSetsDecoded0:[MatchmakingRuleSet]? = nil
        if let ruleSetsContainer = ruleSetsContainer {
            ruleSetsDecoded0 = [MatchmakingRuleSet]()
            for structure0 in ruleSetsContainer {
                if let structure0 = structure0 {
                    ruleSetsDecoded0?.append(structure0)
                }
            }
        }
        ruleSets = ruleSetsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribePlayerSessionsInputBodyMiddleware: Middleware {
    public let id: String = "DescribePlayerSessionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribePlayerSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribePlayerSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribePlayerSessionsInput>
    public typealias MOutput = OperationOutput<DescribePlayerSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribePlayerSessionsOutputError>
}

extension DescribePlayerSessionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribePlayerSessionsInput(gameSessionId: \(String(describing: gameSessionId)), limit: \(String(describing: limit)), nextToken: \(String(describing: nextToken)), playerId: \(String(describing: playerId)), playerSessionId: \(String(describing: playerSessionId)), playerSessionStatusFilter: \(String(describing: playerSessionStatusFilter)))"}
}

extension DescribePlayerSessionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameSessionId = "GameSessionId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case playerId = "PlayerId"
        case playerSessionId = "PlayerSessionId"
        case playerSessionStatusFilter = "PlayerSessionStatusFilter"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let playerId = playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let playerSessionId = playerSessionId {
            try encodeContainer.encode(playerSessionId, forKey: .playerSessionId)
        }
        if let playerSessionStatusFilter = playerSessionStatusFilter {
            try encodeContainer.encode(playerSessionStatusFilter, forKey: .playerSessionStatusFilter)
        }
    }
}

public struct DescribePlayerSessionsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribePlayerSessionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribePlayerSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribePlayerSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribePlayerSessionsInput>
    public typealias MOutput = OperationOutput<DescribePlayerSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribePlayerSessionsOutputError>
}

public struct DescribePlayerSessionsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribePlayerSessionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribePlayerSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribePlayerSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribePlayerSessionsInput>
    public typealias MOutput = OperationOutput<DescribePlayerSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribePlayerSessionsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribePlayerSessionsInput: Equatable {
    /// <p>A unique identifier for the game session to retrieve player sessions for.</p>
    public let gameSessionId: String?
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. If a player session ID is specified, this parameter is ignored.</p>
    public let limit: Int?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. If a player session ID is specified, this parameter is ignored.</p>
    public let nextToken: String?
    /// <p>A unique identifier for a player to retrieve player sessions for.</p>
    public let playerId: String?
    /// <p>A unique identifier for a player session to retrieve.</p>
    public let playerSessionId: String?
    /// <p>Player session status to filter results on.</p>
    ///          <p>Possible player session statuses include the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>RESERVED</b> -- The player session request has been
    ///                 received, but the player has not yet connected to the server process and/or been
    ///                 validated. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>ACTIVE</b> -- The player has been validated by the
    ///                 server process and is currently connected.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>COMPLETED</b> -- The player connection has been
    ///                 dropped.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>TIMEDOUT</b> -- A player session request was
    ///                 received, but the player did not connect and/or was not validated within the
    ///                 timeout limit (60 seconds).</p>
    ///             </li>
    ///          </ul>
    public let playerSessionStatusFilter: String?

    public init (
        gameSessionId: String? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        playerId: String? = nil,
        playerSessionId: String? = nil,
        playerSessionStatusFilter: String? = nil
    )
    {
        self.gameSessionId = gameSessionId
        self.limit = limit
        self.nextToken = nextToken
        self.playerId = playerId
        self.playerSessionId = playerSessionId
        self.playerSessionStatusFilter = playerSessionStatusFilter
    }
}

struct DescribePlayerSessionsInputBody: Equatable {
    public let gameSessionId: String?
    public let playerId: String?
    public let playerSessionId: String?
    public let playerSessionStatusFilter: String?
    public let limit: Int?
    public let nextToken: String?
}

extension DescribePlayerSessionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessionId = "GameSessionId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case playerId = "PlayerId"
        case playerSessionId = "PlayerSessionId"
        case playerSessionStatusFilter = "PlayerSessionStatusFilter"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let playerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let playerSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerSessionId)
        playerSessionId = playerSessionIdDecoded
        let playerSessionStatusFilterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerSessionStatusFilter)
        playerSessionStatusFilter = playerSessionStatusFilterDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribePlayerSessionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePlayerSessionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribePlayerSessionsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePlayerSessionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribePlayerSessionsOutputResponse(nextToken: \(String(describing: nextToken)), playerSessions: \(String(describing: playerSessions)))"}
}

extension DescribePlayerSessionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribePlayerSessionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.playerSessions = output.playerSessions
        } else {
            self.nextToken = nil
            self.playerSessions = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribePlayerSessionsOutputResponse: Equatable {
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?
    /// <p>A collection of objects containing properties for each player session that matches
    ///         the request.</p>
    public let playerSessions: [PlayerSession]?

    public init (
        nextToken: String? = nil,
        playerSessions: [PlayerSession]? = nil
    )
    {
        self.nextToken = nextToken
        self.playerSessions = playerSessions
    }
}

struct DescribePlayerSessionsOutputResponseBody: Equatable {
    public let playerSessions: [PlayerSession]?
    public let nextToken: String?
}

extension DescribePlayerSessionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case playerSessions = "PlayerSessions"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerSessionsContainer = try containerValues.decodeIfPresent([PlayerSession?].self, forKey: .playerSessions)
        var playerSessionsDecoded0:[PlayerSession]? = nil
        if let playerSessionsContainer = playerSessionsContainer {
            playerSessionsDecoded0 = [PlayerSession]()
            for structure0 in playerSessionsContainer {
                if let structure0 = structure0 {
                    playerSessionsDecoded0?.append(structure0)
                }
            }
        }
        playerSessions = playerSessionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeRuntimeConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "DescribeRuntimeConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeRuntimeConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeRuntimeConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeRuntimeConfigurationInput>
    public typealias MOutput = OperationOutput<DescribeRuntimeConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeRuntimeConfigurationOutputError>
}

extension DescribeRuntimeConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeRuntimeConfigurationInput(fleetId: \(String(describing: fleetId)))"}
}

extension DescribeRuntimeConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
    }
}

public struct DescribeRuntimeConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeRuntimeConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeRuntimeConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeRuntimeConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeRuntimeConfigurationInput>
    public typealias MOutput = OperationOutput<DescribeRuntimeConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeRuntimeConfigurationOutputError>
}

public struct DescribeRuntimeConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeRuntimeConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeRuntimeConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeRuntimeConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeRuntimeConfigurationInput>
    public typealias MOutput = OperationOutput<DescribeRuntimeConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeRuntimeConfigurationOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeRuntimeConfigurationInput: Equatable {
    /// <p>A unique identifier for the fleet to get the runtime configuration for. You can use either the fleet ID or ARN
    ///             value.</p>
    public let fleetId: String?

    public init (
        fleetId: String? = nil
    )
    {
        self.fleetId = fleetId
    }
}

struct DescribeRuntimeConfigurationInputBody: Equatable {
    public let fleetId: String?
}

extension DescribeRuntimeConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
    }
}

extension DescribeRuntimeConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRuntimeConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeRuntimeConfigurationOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRuntimeConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeRuntimeConfigurationOutputResponse(runtimeConfiguration: \(String(describing: runtimeConfiguration)))"}
}

extension DescribeRuntimeConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeRuntimeConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.runtimeConfiguration = output.runtimeConfiguration
        } else {
            self.runtimeConfiguration = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeRuntimeConfigurationOutputResponse: Equatable {
    /// <p>Instructions that describe how server processes should be launched and maintained on
    ///             each instance in the fleet.</p>
    public let runtimeConfiguration: RuntimeConfiguration?

    public init (
        runtimeConfiguration: RuntimeConfiguration? = nil
    )
    {
        self.runtimeConfiguration = runtimeConfiguration
    }
}

struct DescribeRuntimeConfigurationOutputResponseBody: Equatable {
    public let runtimeConfiguration: RuntimeConfiguration?
}

extension DescribeRuntimeConfigurationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case runtimeConfiguration = "RuntimeConfiguration"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runtimeConfigurationDecoded = try containerValues.decodeIfPresent(RuntimeConfiguration.self, forKey: .runtimeConfiguration)
        runtimeConfiguration = runtimeConfigurationDecoded
    }
}

public struct DescribeScalingPoliciesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeScalingPoliciesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScalingPoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScalingPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScalingPoliciesInput>
    public typealias MOutput = OperationOutput<DescribeScalingPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScalingPoliciesOutputError>
}

extension DescribeScalingPoliciesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeScalingPoliciesInput(fleetId: \(String(describing: fleetId)), limit: \(String(describing: limit)), location: \(String(describing: location)), nextToken: \(String(describing: nextToken)), statusFilter: \(String(describing: statusFilter)))"}
}

extension DescribeScalingPoliciesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case statusFilter = "StatusFilter"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let statusFilter = statusFilter {
            try encodeContainer.encode(statusFilter.rawValue, forKey: .statusFilter)
        }
    }
}

public struct DescribeScalingPoliciesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeScalingPoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScalingPoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScalingPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScalingPoliciesInput>
    public typealias MOutput = OperationOutput<DescribeScalingPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScalingPoliciesOutputError>
}

public struct DescribeScalingPoliciesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeScalingPoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScalingPoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScalingPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScalingPoliciesInput>
    public typealias MOutput = OperationOutput<DescribeScalingPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScalingPoliciesOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeScalingPoliciesInput: Equatable {
    /// <p>A unique identifier for the fleet to retrieve scaling policies for. You can use either the fleet ID or ARN
    ///             value.</p>
    public let fleetId: String?
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    public let limit: Int?
    /// <p>
    ///             CONTENT TODO
    ///         </p>
    public let location: String?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?
    /// <p>Scaling policy status to filter results on. A scaling policy is only in force when
    ///             in an <code>ACTIVE</code> status.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>ACTIVE</b> -- The scaling policy is currently in
    ///                     force.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>UPDATEREQUESTED</b> -- A request to update the
    ///                     scaling policy has been received.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>UPDATING</b> -- A change is being made to the
    ///                     scaling policy.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>DELETEREQUESTED</b> -- A request to delete the
    ///                     scaling policy has been received.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>DELETING</b> -- The scaling policy is being
    ///                     deleted.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>DELETED</b> -- The scaling policy has been
    ///                     deleted.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>ERROR</b> -- An error occurred in creating the
    ///                     policy. It should be removed and recreated.</p>
    ///             </li>
    ///          </ul>
    public let statusFilter: ScalingStatusType?

    public init (
        fleetId: String? = nil,
        limit: Int? = nil,
        location: String? = nil,
        nextToken: String? = nil,
        statusFilter: ScalingStatusType? = nil
    )
    {
        self.fleetId = fleetId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
        self.statusFilter = statusFilter
    }
}

struct DescribeScalingPoliciesInputBody: Equatable {
    public let fleetId: String?
    public let statusFilter: ScalingStatusType?
    public let limit: Int?
    public let nextToken: String?
    public let location: String?
}

extension DescribeScalingPoliciesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case statusFilter = "StatusFilter"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let statusFilterDecoded = try containerValues.decodeIfPresent(ScalingStatusType.self, forKey: .statusFilter)
        statusFilter = statusFilterDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension DescribeScalingPoliciesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeScalingPoliciesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScalingPoliciesOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScalingPoliciesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeScalingPoliciesOutputResponse(nextToken: \(String(describing: nextToken)), scalingPolicies: \(String(describing: scalingPolicies)))"}
}

extension DescribeScalingPoliciesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeScalingPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.scalingPolicies = output.scalingPolicies
        } else {
            self.nextToken = nil
            self.scalingPolicies = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeScalingPoliciesOutputResponse: Equatable {
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?
    /// <p>A collection of objects containing the scaling policies matching the
    ///             request.</p>
    public let scalingPolicies: [ScalingPolicy]?

    public init (
        nextToken: String? = nil,
        scalingPolicies: [ScalingPolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.scalingPolicies = scalingPolicies
    }
}

struct DescribeScalingPoliciesOutputResponseBody: Equatable {
    public let scalingPolicies: [ScalingPolicy]?
    public let nextToken: String?
}

extension DescribeScalingPoliciesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case scalingPolicies = "ScalingPolicies"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPoliciesContainer = try containerValues.decodeIfPresent([ScalingPolicy?].self, forKey: .scalingPolicies)
        var scalingPoliciesDecoded0:[ScalingPolicy]? = nil
        if let scalingPoliciesContainer = scalingPoliciesContainer {
            scalingPoliciesDecoded0 = [ScalingPolicy]()
            for structure0 in scalingPoliciesContainer {
                if let structure0 = structure0 {
                    scalingPoliciesDecoded0?.append(structure0)
                }
            }
        }
        scalingPolicies = scalingPoliciesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeScriptInputBodyMiddleware: Middleware {
    public let id: String = "DescribeScriptInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScriptInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScriptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScriptInput>
    public typealias MOutput = OperationOutput<DescribeScriptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScriptOutputError>
}

extension DescribeScriptInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeScriptInput(scriptId: \(String(describing: scriptId)))"}
}

extension DescribeScriptInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case scriptId = "ScriptId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scriptId = scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
    }
}

public struct DescribeScriptInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeScriptInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScriptInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScriptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScriptInput>
    public typealias MOutput = OperationOutput<DescribeScriptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScriptOutputError>
}

public struct DescribeScriptInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeScriptInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScriptInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScriptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScriptInput>
    public typealias MOutput = OperationOutput<DescribeScriptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScriptOutputError>
}

public struct DescribeScriptInput: Equatable {
    /// <p>A unique identifier for the Realtime script to retrieve properties for. You can use either the script ID or ARN
    ///             value.</p>
    public let scriptId: String?

    public init (
        scriptId: String? = nil
    )
    {
        self.scriptId = scriptId
    }
}

struct DescribeScriptInputBody: Equatable {
    public let scriptId: String?
}

extension DescribeScriptInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case scriptId = "ScriptId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
    }
}

extension DescribeScriptOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeScriptOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScriptOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScriptOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeScriptOutputResponse(script: \(String(describing: script)))"}
}

extension DescribeScriptOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeScriptOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.script = output.script
        } else {
            self.script = nil
        }
    }
}

public struct DescribeScriptOutputResponse: Equatable {
    /// <p>A set of properties describing the requested script.</p>
    public let script: Script?

    public init (
        script: Script? = nil
    )
    {
        self.script = script
    }
}

struct DescribeScriptOutputResponseBody: Equatable {
    public let script: Script?
}

extension DescribeScriptOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case script = "Script"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptDecoded = try containerValues.decodeIfPresent(Script.self, forKey: .script)
        script = scriptDecoded
    }
}

extension DescribeVpcPeeringAuthorizationsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeVpcPeeringAuthorizationsInput()"}
}

extension DescribeVpcPeeringAuthorizationsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeVpcPeeringAuthorizationsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeVpcPeeringAuthorizationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeVpcPeeringAuthorizationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeVpcPeeringAuthorizationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeVpcPeeringAuthorizationsInput>
    public typealias MOutput = OperationOutput<DescribeVpcPeeringAuthorizationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeVpcPeeringAuthorizationsOutputError>
}

public struct DescribeVpcPeeringAuthorizationsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeVpcPeeringAuthorizationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeVpcPeeringAuthorizationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeVpcPeeringAuthorizationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeVpcPeeringAuthorizationsInput>
    public typealias MOutput = OperationOutput<DescribeVpcPeeringAuthorizationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeVpcPeeringAuthorizationsOutputError>
}

public struct DescribeVpcPeeringAuthorizationsInput: Equatable {

    public init() {}
}

struct DescribeVpcPeeringAuthorizationsInputBody: Equatable {
}

extension DescribeVpcPeeringAuthorizationsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeVpcPeeringAuthorizationsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeVpcPeeringAuthorizationsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeVpcPeeringAuthorizationsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeVpcPeeringAuthorizationsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeVpcPeeringAuthorizationsOutputResponse(vpcPeeringAuthorizations: \(String(describing: vpcPeeringAuthorizations)))"}
}

extension DescribeVpcPeeringAuthorizationsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeVpcPeeringAuthorizationsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.vpcPeeringAuthorizations = output.vpcPeeringAuthorizations
        } else {
            self.vpcPeeringAuthorizations = nil
        }
    }
}

public struct DescribeVpcPeeringAuthorizationsOutputResponse: Equatable {
    /// <p>A collection of objects that describe all valid VPC peering operations for the
    ///             current AWS account.</p>
    public let vpcPeeringAuthorizations: [VpcPeeringAuthorization]?

    public init (
        vpcPeeringAuthorizations: [VpcPeeringAuthorization]? = nil
    )
    {
        self.vpcPeeringAuthorizations = vpcPeeringAuthorizations
    }
}

struct DescribeVpcPeeringAuthorizationsOutputResponseBody: Equatable {
    public let vpcPeeringAuthorizations: [VpcPeeringAuthorization]?
}

extension DescribeVpcPeeringAuthorizationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case vpcPeeringAuthorizations = "VpcPeeringAuthorizations"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcPeeringAuthorizationsContainer = try containerValues.decodeIfPresent([VpcPeeringAuthorization?].self, forKey: .vpcPeeringAuthorizations)
        var vpcPeeringAuthorizationsDecoded0:[VpcPeeringAuthorization]? = nil
        if let vpcPeeringAuthorizationsContainer = vpcPeeringAuthorizationsContainer {
            vpcPeeringAuthorizationsDecoded0 = [VpcPeeringAuthorization]()
            for structure0 in vpcPeeringAuthorizationsContainer {
                if let structure0 = structure0 {
                    vpcPeeringAuthorizationsDecoded0?.append(structure0)
                }
            }
        }
        vpcPeeringAuthorizations = vpcPeeringAuthorizationsDecoded0
    }
}

public struct DescribeVpcPeeringConnectionsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeVpcPeeringConnectionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeVpcPeeringConnectionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeVpcPeeringConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeVpcPeeringConnectionsInput>
    public typealias MOutput = OperationOutput<DescribeVpcPeeringConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeVpcPeeringConnectionsOutputError>
}

extension DescribeVpcPeeringConnectionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeVpcPeeringConnectionsInput(fleetId: \(String(describing: fleetId)))"}
}

extension DescribeVpcPeeringConnectionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
    }
}

public struct DescribeVpcPeeringConnectionsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeVpcPeeringConnectionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeVpcPeeringConnectionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeVpcPeeringConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeVpcPeeringConnectionsInput>
    public typealias MOutput = OperationOutput<DescribeVpcPeeringConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeVpcPeeringConnectionsOutputError>
}

public struct DescribeVpcPeeringConnectionsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeVpcPeeringConnectionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeVpcPeeringConnectionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeVpcPeeringConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeVpcPeeringConnectionsInput>
    public typealias MOutput = OperationOutput<DescribeVpcPeeringConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeVpcPeeringConnectionsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct DescribeVpcPeeringConnectionsInput: Equatable {
    /// <p>A unique identifier for the fleet. You can use either the fleet ID or ARN value.</p>
    public let fleetId: String?

    public init (
        fleetId: String? = nil
    )
    {
        self.fleetId = fleetId
    }
}

struct DescribeVpcPeeringConnectionsInputBody: Equatable {
    public let fleetId: String?
}

extension DescribeVpcPeeringConnectionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
    }
}

extension DescribeVpcPeeringConnectionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeVpcPeeringConnectionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeVpcPeeringConnectionsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeVpcPeeringConnectionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeVpcPeeringConnectionsOutputResponse(vpcPeeringConnections: \(String(describing: vpcPeeringConnections)))"}
}

extension DescribeVpcPeeringConnectionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeVpcPeeringConnectionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.vpcPeeringConnections = output.vpcPeeringConnections
        } else {
            self.vpcPeeringConnections = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct DescribeVpcPeeringConnectionsOutputResponse: Equatable {
    /// <p>A collection of VPC peering connection records that match the request.</p>
    public let vpcPeeringConnections: [VpcPeeringConnection]?

    public init (
        vpcPeeringConnections: [VpcPeeringConnection]? = nil
    )
    {
        self.vpcPeeringConnections = vpcPeeringConnections
    }
}

struct DescribeVpcPeeringConnectionsOutputResponseBody: Equatable {
    public let vpcPeeringConnections: [VpcPeeringConnection]?
}

extension DescribeVpcPeeringConnectionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case vpcPeeringConnections = "VpcPeeringConnections"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcPeeringConnectionsContainer = try containerValues.decodeIfPresent([VpcPeeringConnection?].self, forKey: .vpcPeeringConnections)
        var vpcPeeringConnectionsDecoded0:[VpcPeeringConnection]? = nil
        if let vpcPeeringConnectionsContainer = vpcPeeringConnectionsContainer {
            vpcPeeringConnectionsDecoded0 = [VpcPeeringConnection]()
            for structure0 in vpcPeeringConnectionsContainer {
                if let structure0 = structure0 {
                    vpcPeeringConnectionsDecoded0?.append(structure0)
                }
            }
        }
        vpcPeeringConnections = vpcPeeringConnectionsDecoded0
    }
}

extension DesiredPlayerSession: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case playerData = "PlayerData"
        case playerId = "PlayerId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let playerData = playerData {
            try encodeContainer.encode(playerData, forKey: .playerData)
        }
        if let playerId = playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let playerDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerData)
        playerData = playerDataDecoded
    }
}

extension DesiredPlayerSession: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DesiredPlayerSession(playerData: \(String(describing: playerData)), playerId: \(String(describing: playerId)))"}
}

/// <p>Player information for use when creating player sessions using a game session
///         placement request with <a>StartGameSessionPlacement</a>.</p>
public struct DesiredPlayerSession: Equatable {
    /// <p>Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.</p>
    public let playerData: String?
    /// <p>A unique identifier for a player to associate with the player session.</p>
    public let playerId: String?

    public init (
        playerData: String? = nil,
        playerId: String? = nil
    )
    {
        self.playerData = playerData
        self.playerId = playerId
    }
}

extension EC2InstanceCounts: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aCTIVE = "ACTIVE"
        case dESIRED = "DESIRED"
        case iDLE = "IDLE"
        case mAXIMUM = "MAXIMUM"
        case mINIMUM = "MINIMUM"
        case pENDING = "PENDING"
        case tERMINATING = "TERMINATING"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aCTIVE = aCTIVE {
            try encodeContainer.encode(aCTIVE, forKey: .aCTIVE)
        }
        if let dESIRED = dESIRED {
            try encodeContainer.encode(dESIRED, forKey: .dESIRED)
        }
        if let iDLE = iDLE {
            try encodeContainer.encode(iDLE, forKey: .iDLE)
        }
        if let mAXIMUM = mAXIMUM {
            try encodeContainer.encode(mAXIMUM, forKey: .mAXIMUM)
        }
        if let mINIMUM = mINIMUM {
            try encodeContainer.encode(mINIMUM, forKey: .mINIMUM)
        }
        if let pENDING = pENDING {
            try encodeContainer.encode(pENDING, forKey: .pENDING)
        }
        if let tERMINATING = tERMINATING {
            try encodeContainer.encode(tERMINATING, forKey: .tERMINATING)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dESIREDDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .dESIRED)
        dESIRED = dESIREDDecoded
        let mINIMUMDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .mINIMUM)
        mINIMUM = mINIMUMDecoded
        let mAXIMUMDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .mAXIMUM)
        mAXIMUM = mAXIMUMDecoded
        let pENDINGDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .pENDING)
        pENDING = pENDINGDecoded
        let aCTIVEDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .aCTIVE)
        aCTIVE = aCTIVEDecoded
        let iDLEDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .iDLE)
        iDLE = iDLEDecoded
        let tERMINATINGDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tERMINATING)
        tERMINATING = tERMINATINGDecoded
    }
}

extension EC2InstanceCounts: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EC2InstanceCounts(aCTIVE: \(String(describing: aCTIVE)), dESIRED: \(String(describing: dESIRED)), iDLE: \(String(describing: iDLE)), mAXIMUM: \(String(describing: mAXIMUM)), mINIMUM: \(String(describing: mINIMUM)), pENDING: \(String(describing: pENDING)), tERMINATING: \(String(describing: tERMINATING)))"}
}

/// <p>Resource capacity settings. Fleet capacity is measured in EC2 instances. Pending and
///             terminating counts are non-zero when the fleet capacity is adjusting to a scaling event
///             or if access to resources is temporarily affected.</p>
///         <p>EC2 instance counts are part of <a>FleetCapacity</a>.</p>
public struct EC2InstanceCounts: Equatable {
    /// <p>Actual number of instances that are ready to host game sessions.</p>
    public let aCTIVE: Int?
    /// <p>Ideal number of active instances. GameLift will always try to maintain the desired
    ///             number of instances. Capacity is scaled up or down by changing the desired instances. </p>
    public let dESIRED: Int?
    /// <p>Number of active instances that are not currently hosting a game session.</p>
    public let iDLE: Int?
    /// <p>The maximum instance count value allowed.</p>
    public let mAXIMUM: Int?
    /// <p>The minimum instance count value allowed.</p>
    public let mINIMUM: Int?
    /// <p>Number of instances that are starting but not yet active.</p>
    public let pENDING: Int?
    /// <p>Number of instances that are no longer active but haven't yet been terminated.</p>
    public let tERMINATING: Int?

    public init (
        aCTIVE: Int? = nil,
        dESIRED: Int? = nil,
        iDLE: Int? = nil,
        mAXIMUM: Int? = nil,
        mINIMUM: Int? = nil,
        pENDING: Int? = nil,
        tERMINATING: Int? = nil
    )
    {
        self.aCTIVE = aCTIVE
        self.dESIRED = dESIRED
        self.iDLE = iDLE
        self.mAXIMUM = mAXIMUM
        self.mINIMUM = mINIMUM
        self.pENDING = pENDING
        self.tERMINATING = tERMINATING
    }
}

extension EC2InstanceLimit: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currentInstances = "CurrentInstances"
        case eC2InstanceType = "EC2InstanceType"
        case instanceLimit = "InstanceLimit"
        case location = "Location"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentInstances = currentInstances {
            try encodeContainer.encode(currentInstances, forKey: .currentInstances)
        }
        if let eC2InstanceType = eC2InstanceType {
            try encodeContainer.encode(eC2InstanceType.rawValue, forKey: .eC2InstanceType)
        }
        if let instanceLimit = instanceLimit {
            try encodeContainer.encode(instanceLimit, forKey: .instanceLimit)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eC2InstanceTypeDecoded = try containerValues.decodeIfPresent(EC2InstanceType.self, forKey: .eC2InstanceType)
        eC2InstanceType = eC2InstanceTypeDecoded
        let currentInstancesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .currentInstances)
        currentInstances = currentInstancesDecoded
        let instanceLimitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceLimit)
        instanceLimit = instanceLimitDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension EC2InstanceLimit: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EC2InstanceLimit(currentInstances: \(String(describing: currentInstances)), eC2InstanceType: \(String(describing: eC2InstanceType)), instanceLimit: \(String(describing: instanceLimit)), location: \(String(describing: location)))"}
}

/// <p>The GameLift service limits for an EC2 instance type and current utilization. GameLift
///             allows AWS accounts a maximum number of instances, per instance type, per AWS Region or
///             location, for use with GameLift. You can request an limit increase for your account by
///             using the <b>Service limits</b> page in the GameLift
///             console.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///         <p>
///             <a>DescribeEC2InstanceLimits</a>
///          </p>
public struct EC2InstanceLimit: Equatable {
    /// <p>The number of instances for the specified type and location that are currently being
    ///             used by the AWS account. </p>
    public let currentInstances: Int?
    /// <p>The name of an EC2 instance type. See <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 Instance Types</a> for detailed
    ///             descriptions. </p>
    public let eC2InstanceType: EC2InstanceType?
    /// <p>The number of instances that is allowed for the specified instance type and
    ///             location.</p>
    public let instanceLimit: Int?
    /// <p>An AWS Region code, such as <code>us-west-2</code>. </p>
    public let location: String?

    public init (
        currentInstances: Int? = nil,
        eC2InstanceType: EC2InstanceType? = nil,
        instanceLimit: Int? = nil,
        location: String? = nil
    )
    {
        self.currentInstances = currentInstances
        self.eC2InstanceType = eC2InstanceType
        self.instanceLimit = instanceLimit
        self.location = location
    }
}

public enum EC2InstanceType {
    case c32xlarge
    case c34xlarge
    case c38xlarge
    case c3Large
    case c3Xlarge
    case c42xlarge
    case c44xlarge
    case c48xlarge
    case c4Large
    case c4Xlarge
    case c512xlarge
    case c518xlarge
    case c524xlarge
    case c52xlarge
    case c54xlarge
    case c59xlarge
    case c5Large
    case c5Xlarge
    case c5a12xlarge
    case c5a16xlarge
    case c5a24xlarge
    case c5a2xlarge
    case c5a4xlarge
    case c5a8xlarge
    case c5aLarge
    case c5aXlarge
    case m32xlarge
    case m3Large
    case m3Medium
    case m3Xlarge
    case m410xlarge
    case m42xlarge
    case m44xlarge
    case m4Large
    case m4Xlarge
    case m512xlarge
    case m516xlarge
    case m524xlarge
    case m52xlarge
    case m54xlarge
    case m58xlarge
    case m5Large
    case m5Xlarge
    case m5a12xlarge
    case m5a16xlarge
    case m5a24xlarge
    case m5a2xlarge
    case m5a4xlarge
    case m5a8xlarge
    case m5aLarge
    case m5aXlarge
    case r32xlarge
    case r34xlarge
    case r38xlarge
    case r3Large
    case r3Xlarge
    case r416xlarge
    case r42xlarge
    case r44xlarge
    case r48xlarge
    case r4Large
    case r4Xlarge
    case r512xlarge
    case r516xlarge
    case r524xlarge
    case r52xlarge
    case r54xlarge
    case r58xlarge
    case r5Large
    case r5Xlarge
    case r5a12xlarge
    case r5a16xlarge
    case r5a24xlarge
    case r5a2xlarge
    case r5a4xlarge
    case r5a8xlarge
    case r5aLarge
    case r5aXlarge
    case t2Large
    case t2Medium
    case t2Micro
    case t2Small
    case sdkUnknown(String)
}

extension EC2InstanceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EC2InstanceType] {
        return [
            .c32xlarge,
            .c34xlarge,
            .c38xlarge,
            .c3Large,
            .c3Xlarge,
            .c42xlarge,
            .c44xlarge,
            .c48xlarge,
            .c4Large,
            .c4Xlarge,
            .c512xlarge,
            .c518xlarge,
            .c524xlarge,
            .c52xlarge,
            .c54xlarge,
            .c59xlarge,
            .c5Large,
            .c5Xlarge,
            .c5a12xlarge,
            .c5a16xlarge,
            .c5a24xlarge,
            .c5a2xlarge,
            .c5a4xlarge,
            .c5a8xlarge,
            .c5aLarge,
            .c5aXlarge,
            .m32xlarge,
            .m3Large,
            .m3Medium,
            .m3Xlarge,
            .m410xlarge,
            .m42xlarge,
            .m44xlarge,
            .m4Large,
            .m4Xlarge,
            .m512xlarge,
            .m516xlarge,
            .m524xlarge,
            .m52xlarge,
            .m54xlarge,
            .m58xlarge,
            .m5Large,
            .m5Xlarge,
            .m5a12xlarge,
            .m5a16xlarge,
            .m5a24xlarge,
            .m5a2xlarge,
            .m5a4xlarge,
            .m5a8xlarge,
            .m5aLarge,
            .m5aXlarge,
            .r32xlarge,
            .r34xlarge,
            .r38xlarge,
            .r3Large,
            .r3Xlarge,
            .r416xlarge,
            .r42xlarge,
            .r44xlarge,
            .r48xlarge,
            .r4Large,
            .r4Xlarge,
            .r512xlarge,
            .r516xlarge,
            .r524xlarge,
            .r52xlarge,
            .r54xlarge,
            .r58xlarge,
            .r5Large,
            .r5Xlarge,
            .r5a12xlarge,
            .r5a16xlarge,
            .r5a24xlarge,
            .r5a2xlarge,
            .r5a4xlarge,
            .r5a8xlarge,
            .r5aLarge,
            .r5aXlarge,
            .t2Large,
            .t2Medium,
            .t2Micro,
            .t2Small,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .c32xlarge: return "c3.2xlarge"
        case .c34xlarge: return "c3.4xlarge"
        case .c38xlarge: return "c3.8xlarge"
        case .c3Large: return "c3.large"
        case .c3Xlarge: return "c3.xlarge"
        case .c42xlarge: return "c4.2xlarge"
        case .c44xlarge: return "c4.4xlarge"
        case .c48xlarge: return "c4.8xlarge"
        case .c4Large: return "c4.large"
        case .c4Xlarge: return "c4.xlarge"
        case .c512xlarge: return "c5.12xlarge"
        case .c518xlarge: return "c5.18xlarge"
        case .c524xlarge: return "c5.24xlarge"
        case .c52xlarge: return "c5.2xlarge"
        case .c54xlarge: return "c5.4xlarge"
        case .c59xlarge: return "c5.9xlarge"
        case .c5Large: return "c5.large"
        case .c5Xlarge: return "c5.xlarge"
        case .c5a12xlarge: return "c5a.12xlarge"
        case .c5a16xlarge: return "c5a.16xlarge"
        case .c5a24xlarge: return "c5a.24xlarge"
        case .c5a2xlarge: return "c5a.2xlarge"
        case .c5a4xlarge: return "c5a.4xlarge"
        case .c5a8xlarge: return "c5a.8xlarge"
        case .c5aLarge: return "c5a.large"
        case .c5aXlarge: return "c5a.xlarge"
        case .m32xlarge: return "m3.2xlarge"
        case .m3Large: return "m3.large"
        case .m3Medium: return "m3.medium"
        case .m3Xlarge: return "m3.xlarge"
        case .m410xlarge: return "m4.10xlarge"
        case .m42xlarge: return "m4.2xlarge"
        case .m44xlarge: return "m4.4xlarge"
        case .m4Large: return "m4.large"
        case .m4Xlarge: return "m4.xlarge"
        case .m512xlarge: return "m5.12xlarge"
        case .m516xlarge: return "m5.16xlarge"
        case .m524xlarge: return "m5.24xlarge"
        case .m52xlarge: return "m5.2xlarge"
        case .m54xlarge: return "m5.4xlarge"
        case .m58xlarge: return "m5.8xlarge"
        case .m5Large: return "m5.large"
        case .m5Xlarge: return "m5.xlarge"
        case .m5a12xlarge: return "m5a.12xlarge"
        case .m5a16xlarge: return "m5a.16xlarge"
        case .m5a24xlarge: return "m5a.24xlarge"
        case .m5a2xlarge: return "m5a.2xlarge"
        case .m5a4xlarge: return "m5a.4xlarge"
        case .m5a8xlarge: return "m5a.8xlarge"
        case .m5aLarge: return "m5a.large"
        case .m5aXlarge: return "m5a.xlarge"
        case .r32xlarge: return "r3.2xlarge"
        case .r34xlarge: return "r3.4xlarge"
        case .r38xlarge: return "r3.8xlarge"
        case .r3Large: return "r3.large"
        case .r3Xlarge: return "r3.xlarge"
        case .r416xlarge: return "r4.16xlarge"
        case .r42xlarge: return "r4.2xlarge"
        case .r44xlarge: return "r4.4xlarge"
        case .r48xlarge: return "r4.8xlarge"
        case .r4Large: return "r4.large"
        case .r4Xlarge: return "r4.xlarge"
        case .r512xlarge: return "r5.12xlarge"
        case .r516xlarge: return "r5.16xlarge"
        case .r524xlarge: return "r5.24xlarge"
        case .r52xlarge: return "r5.2xlarge"
        case .r54xlarge: return "r5.4xlarge"
        case .r58xlarge: return "r5.8xlarge"
        case .r5Large: return "r5.large"
        case .r5Xlarge: return "r5.xlarge"
        case .r5a12xlarge: return "r5a.12xlarge"
        case .r5a16xlarge: return "r5a.16xlarge"
        case .r5a24xlarge: return "r5a.24xlarge"
        case .r5a2xlarge: return "r5a.2xlarge"
        case .r5a4xlarge: return "r5a.4xlarge"
        case .r5a8xlarge: return "r5a.8xlarge"
        case .r5aLarge: return "r5a.large"
        case .r5aXlarge: return "r5a.xlarge"
        case .t2Large: return "t2.large"
        case .t2Medium: return "t2.medium"
        case .t2Micro: return "t2.micro"
        case .t2Small: return "t2.small"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EC2InstanceType(rawValue: rawValue) ?? EC2InstanceType.sdkUnknown(rawValue)
    }
}

extension Event: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eventCode = "EventCode"
        case eventId = "EventId"
        case eventTime = "EventTime"
        case message = "Message"
        case preSignedLogUrl = "PreSignedLogUrl"
        case resourceId = "ResourceId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventCode = eventCode {
            try encodeContainer.encode(eventCode.rawValue, forKey: .eventCode)
        }
        if let eventId = eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventTime = eventTime {
            try encodeContainer.encode(eventTime.timeIntervalSince1970, forKey: .eventTime)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let preSignedLogUrl = preSignedLogUrl {
            try encodeContainer.encode(preSignedLogUrl, forKey: .preSignedLogUrl)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let eventCodeDecoded = try containerValues.decodeIfPresent(EventCode.self, forKey: .eventCode)
        eventCode = eventCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let eventTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .eventTime)
        eventTime = eventTimeDecoded
        let preSignedLogUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preSignedLogUrl)
        preSignedLogUrl = preSignedLogUrlDecoded
    }
}

extension Event: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Event(eventCode: \(String(describing: eventCode)), eventId: \(String(describing: eventId)), eventTime: \(String(describing: eventTime)), message: \(String(describing: message)), preSignedLogUrl: \(String(describing: preSignedLogUrl)), resourceId: \(String(describing: resourceId)))"}
}

/// <p>Log entry describing an event that involves GameLift resources (such as a fleet). In
///             addition to tracking activity, event codes and messages can provide additional
///             information for troubleshooting and debugging problems.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///         <p>
///             <a>DescribeFleetEvents</a>
///          </p>
public struct Event: Equatable {
    /// <p>The type of event being logged. </p>
    ///         <p>
    ///             <b>Fleet creation events (ordered by fleet creation activity):</b>
    ///          </p>
    ///         <ul>
    ///             <li>
    ///                 <p>FLEET_CREATED -- A fleet resource was successfully created with a status of
    ///                         <code>NEW</code>. Event messaging includes the fleet ID.</p>
    ///             </li>
    ///             <li>
    ///                 <p>FLEET_STATE_DOWNLOADING -- Fleet status changed from <code>NEW</code> to
    ///                         <code>DOWNLOADING</code>. The compressed build has started downloading to a
    ///                     fleet instance for installation.</p>
    ///             </li>
    ///             <li>
    ///                 <p> FLEET_BINARY_DOWNLOAD_FAILED -- The build failed to download to the fleet
    ///                     instance.</p>
    ///             </li>
    ///             <li>
    ///                 <p>FLEET_CREATION_EXTRACTING_BUILD – The game server build was successfully
    ///                     downloaded to an instance, and the build files are now being extracted from the
    ///                     uploaded build and saved to an instance. Failure at this stage prevents a fleet
    ///                     from moving to <code>ACTIVE</code> status. Logs for this stage display a list of
    ///                     the files that are extracted and saved on the instance. Access the logs by using
    ///                     the URL in <i>PreSignedLogUrl</i>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>FLEET_CREATION_RUNNING_INSTALLER – The game server build files were
    ///                     successfully extracted, and the GameLift is now running the build's install
    ///                     script (if one is included). Failure in this stage prevents a fleet from moving
    ///                     to <code>ACTIVE</code> status. Logs for this stage list the installation steps
    ///                     and whether or not the install completed successfully. Access the logs by using
    ///                     the URL in <i>PreSignedLogUrl</i>. </p>
    ///             </li>
    ///             <li>
    ///                 <p>FLEET_CREATION_VALIDATING_RUNTIME_CONFIG -- The build process was successful,
    ///                     and the GameLift is now verifying that the game server launch paths, which are
    ///                     specified in the fleet's runtime configuration, exist. If any listed launch path
    ///                     exists, GameLift tries to launch a game server process and waits for the process
    ///                     to report ready. Failures in this stage prevent a fleet from moving to
    ///                         <code>ACTIVE</code> status. Logs for this stage list the launch paths in the
    ///                     runtime configuration and indicate whether each is found. Access the logs by
    ///                     using the URL in <i>PreSignedLogUrl</i>.
    ///
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>FLEET_STATE_VALIDATING -- Fleet status changed from
    ///                         <code>DOWNLOADING</code> to <code>VALIDATING</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p> FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND -- Validation of the runtime
    ///                     configuration failed because the executable specified in a launch path does not
    ///                     exist on the instance.</p>
    ///             </li>
    ///             <li>
    ///                 <p>FLEET_STATE_BUILDING -- Fleet status changed from <code>VALIDATING</code>
    ///                     to <code>BUILDING</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE -- Validation of the runtime
    ///                     configuration failed because the executable specified in a launch path failed to
    ///                     run on the fleet instance.</p>
    ///             </li>
    ///             <li>
    ///                 <p>FLEET_STATE_ACTIVATING -- Fleet status changed from <code>BUILDING</code>
    ///                     to <code>ACTIVATING</code>. </p>
    ///             </li>
    ///             <li>
    ///                 <p> FLEET_ACTIVATION_FAILED - The fleet failed to successfully complete one of
    ///                     the steps in the fleet activation process. This event code indicates that the
    ///                     game build was successfully downloaded to a fleet instance, built, and
    ///                     validated, but was not able to start a server process. Learn more at
    ///                     <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-creating-debug.html#fleets-creating-debug-creation"> Debug Fleet
    ///                         Creation Issues</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>FLEET_STATE_ACTIVE -- The fleet's status changed from
    ///                         <code>ACTIVATING</code> to <code>ACTIVE</code>. The fleet is now ready to
    ///                     host game sessions.</p>
    ///             </li>
    ///          </ul>
    ///         <p>
    ///             <b>VPC peering events:</b>
    ///          </p>
    ///         <ul>
    ///             <li>
    ///                 <p>FLEET_VPC_PEERING_SUCCEEDED -- A VPC peering connection has been
    ///                     established between the VPC for an GameLift fleet and a VPC in your AWS
    ///                     account.</p>
    ///             </li>
    ///             <li>
    ///                 <p>FLEET_VPC_PEERING_FAILED -- A requested VPC peering connection has failed.
    ///                     Event details and status information (see <a>DescribeVpcPeeringConnections</a>) provide additional detail. A
    ///                     common reason for peering failure is that the two VPCs have overlapping CIDR
    ///                     blocks of IPv4 addresses. To resolve this, change the CIDR block for the VPC in
    ///                     your AWS account. For more information on VPC peering failures, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/invalid-peering-configurations.html">https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/invalid-peering-configurations.html</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>FLEET_VPC_PEERING_DELETED -- A VPC peering connection has been successfully
    ///                     deleted.</p>
    ///             </li>
    ///          </ul>
    ///         <p>
    ///             <b>Spot instance events:</b>
    ///          </p>
    ///         <ul>
    ///             <li>
    ///                 <p> INSTANCE_INTERRUPTED -- A spot instance was interrupted by EC2 with a
    ///                     two-minute notification.</p>
    ///             </li>
    ///          </ul>
    ///         <p>
    ///             <b>Other fleet events:</b>
    ///          </p>
    ///         <ul>
    ///             <li>
    ///                 <p>FLEET_SCALING_EVENT -- A change was made to the fleet's capacity settings
    ///                     (desired instances, minimum/maximum scaling limits). Event messaging includes
    ///                     the new capacity settings.</p>
    ///             </li>
    ///             <li>
    ///                 <p>FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED -- A change was made to
    ///                     the fleet's game session protection policy setting. Event messaging includes
    ///                     both the old and new policy setting. </p>
    ///             </li>
    ///             <li>
    ///                 <p>FLEET_DELETED -- A request to delete a fleet was initiated.</p>
    ///             </li>
    ///             <li>
    ///                 <p> GENERIC_EVENT -- An unspecified event has occurred.</p>
    ///             </li>
    ///          </ul>
    public let eventCode: EventCode?
    /// <p>A unique identifier for a fleet event.</p>
    public let eventId: String?
    /// <p>Time stamp indicating when this event occurred. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let eventTime: Date?
    /// <p>Additional information related to the event.</p>
    public let message: String?
    /// <p>Location of stored logs with additional detail that is related to the event. This
    ///             is useful for debugging issues. The URL is valid for 15 minutes. You can also access
    ///             fleet creation logs through the GameLift console.</p>
    public let preSignedLogUrl: String?
    /// <p>A unique identifier for an event resource, such as a fleet ID.</p>
    public let resourceId: String?

    public init (
        eventCode: EventCode? = nil,
        eventId: String? = nil,
        eventTime: Date? = nil,
        message: String? = nil,
        preSignedLogUrl: String? = nil,
        resourceId: String? = nil
    )
    {
        self.eventCode = eventCode
        self.eventId = eventId
        self.eventTime = eventTime
        self.message = message
        self.preSignedLogUrl = preSignedLogUrl
        self.resourceId = resourceId
    }
}

public enum EventCode {
    case fleetActivationFailed
    case fleetActivationFailedNoInstances
    case fleetBinaryDownloadFailed
    case fleetCreated
    case fleetCreationExtractingBuild
    case fleetCreationRunningInstaller
    case fleetCreationValidatingRuntimeConfig
    case fleetDeleted
    case fleetInitializationFailed
    case fleetNewGameSessionProtectionPolicyUpdated
    case fleetScalingEvent
    case fleetStateActivating
    case fleetStateActive
    case fleetStateBuilding
    case fleetStateDownloading
    case fleetStateError
    case fleetStateValidating
    case fleetValidationExecutableRuntimeFailure
    case fleetValidationLaunchPathNotFound
    case fleetValidationTimedOut
    case fleetVpcPeeringDeleted
    case fleetVpcPeeringFailed
    case fleetVpcPeeringSucceeded
    case gameSessionActivationTimeout
    case genericEvent
    case instanceInterrupted
    case serverProcessCrashed
    case serverProcessForceTerminated
    case serverProcessInvalidPath
    case serverProcessProcessExitTimeout
    case serverProcessProcessReadyTimeout
    case serverProcessSdkInitializationTimeout
    case serverProcessTerminatedUnhealthy
    case sdkUnknown(String)
}

extension EventCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EventCode] {
        return [
            .fleetActivationFailed,
            .fleetActivationFailedNoInstances,
            .fleetBinaryDownloadFailed,
            .fleetCreated,
            .fleetCreationExtractingBuild,
            .fleetCreationRunningInstaller,
            .fleetCreationValidatingRuntimeConfig,
            .fleetDeleted,
            .fleetInitializationFailed,
            .fleetNewGameSessionProtectionPolicyUpdated,
            .fleetScalingEvent,
            .fleetStateActivating,
            .fleetStateActive,
            .fleetStateBuilding,
            .fleetStateDownloading,
            .fleetStateError,
            .fleetStateValidating,
            .fleetValidationExecutableRuntimeFailure,
            .fleetValidationLaunchPathNotFound,
            .fleetValidationTimedOut,
            .fleetVpcPeeringDeleted,
            .fleetVpcPeeringFailed,
            .fleetVpcPeeringSucceeded,
            .gameSessionActivationTimeout,
            .genericEvent,
            .instanceInterrupted,
            .serverProcessCrashed,
            .serverProcessForceTerminated,
            .serverProcessInvalidPath,
            .serverProcessProcessExitTimeout,
            .serverProcessProcessReadyTimeout,
            .serverProcessSdkInitializationTimeout,
            .serverProcessTerminatedUnhealthy,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .fleetActivationFailed: return "FLEET_ACTIVATION_FAILED"
        case .fleetActivationFailedNoInstances: return "FLEET_ACTIVATION_FAILED_NO_INSTANCES"
        case .fleetBinaryDownloadFailed: return "FLEET_BINARY_DOWNLOAD_FAILED"
        case .fleetCreated: return "FLEET_CREATED"
        case .fleetCreationExtractingBuild: return "FLEET_CREATION_EXTRACTING_BUILD"
        case .fleetCreationRunningInstaller: return "FLEET_CREATION_RUNNING_INSTALLER"
        case .fleetCreationValidatingRuntimeConfig: return "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG"
        case .fleetDeleted: return "FLEET_DELETED"
        case .fleetInitializationFailed: return "FLEET_INITIALIZATION_FAILED"
        case .fleetNewGameSessionProtectionPolicyUpdated: return "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED"
        case .fleetScalingEvent: return "FLEET_SCALING_EVENT"
        case .fleetStateActivating: return "FLEET_STATE_ACTIVATING"
        case .fleetStateActive: return "FLEET_STATE_ACTIVE"
        case .fleetStateBuilding: return "FLEET_STATE_BUILDING"
        case .fleetStateDownloading: return "FLEET_STATE_DOWNLOADING"
        case .fleetStateError: return "FLEET_STATE_ERROR"
        case .fleetStateValidating: return "FLEET_STATE_VALIDATING"
        case .fleetValidationExecutableRuntimeFailure: return "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE"
        case .fleetValidationLaunchPathNotFound: return "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND"
        case .fleetValidationTimedOut: return "FLEET_VALIDATION_TIMED_OUT"
        case .fleetVpcPeeringDeleted: return "FLEET_VPC_PEERING_DELETED"
        case .fleetVpcPeeringFailed: return "FLEET_VPC_PEERING_FAILED"
        case .fleetVpcPeeringSucceeded: return "FLEET_VPC_PEERING_SUCCEEDED"
        case .gameSessionActivationTimeout: return "GAME_SESSION_ACTIVATION_TIMEOUT"
        case .genericEvent: return "GENERIC_EVENT"
        case .instanceInterrupted: return "INSTANCE_INTERRUPTED"
        case .serverProcessCrashed: return "SERVER_PROCESS_CRASHED"
        case .serverProcessForceTerminated: return "SERVER_PROCESS_FORCE_TERMINATED"
        case .serverProcessInvalidPath: return "SERVER_PROCESS_INVALID_PATH"
        case .serverProcessProcessExitTimeout: return "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT"
        case .serverProcessProcessReadyTimeout: return "SERVER_PROCESS_PROCESS_READY_TIMEOUT"
        case .serverProcessSdkInitializationTimeout: return "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT"
        case .serverProcessTerminatedUnhealthy: return "SERVER_PROCESS_TERMINATED_UNHEALTHY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EventCode(rawValue: rawValue) ?? EventCode.sdkUnknown(rawValue)
    }
}

extension FilterConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedLocations = "AllowedLocations"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedLocations = allowedLocations {
            var allowedLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedLocations)
            for locationlist0 in allowedLocations {
                try allowedLocationsContainer.encode(locationlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedLocationsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .allowedLocations)
        var allowedLocationsDecoded0:[String]? = nil
        if let allowedLocationsContainer = allowedLocationsContainer {
            allowedLocationsDecoded0 = [String]()
            for string0 in allowedLocationsContainer {
                if let string0 = string0 {
                    allowedLocationsDecoded0?.append(string0)
                }
            }
        }
        allowedLocations = allowedLocationsDecoded0
    }
}

extension FilterConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FilterConfiguration(allowedLocations: \(String(describing: allowedLocations)))"}
}

/// <p>A list of fleet locations where a game session queue can place new game sessions. You
///             can use a filter to temporarily turn off placements for specific locations. For queues
///             that have multi-location fleets, you can use a filter configuration allow placement with
///             some, but not all of these locations.</p>
///         <p>Filter configurations are part of a <a>GameSessionQueue</a>.</p>
public struct FilterConfiguration: Equatable {
    /// <p> A list of locations to allow game session placement in, in the form of AWS Region
    ///             codes such as <code>us-west-2</code>. </p>
    public let allowedLocations: [String]?

    public init (
        allowedLocations: [String]? = nil
    )
    {
        self.allowedLocations = allowedLocations
    }
}

public enum FleetAction {
    case autoscaling
    case sdkUnknown(String)
}

extension FleetAction : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FleetAction] {
        return [
            .autoscaling,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .autoscaling: return "AUTO_SCALING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FleetAction(rawValue: rawValue) ?? FleetAction.sdkUnknown(rawValue)
    }
}

extension FleetAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case buildArn = "BuildArn"
        case buildId = "BuildId"
        case certificateConfiguration = "CertificateConfiguration"
        case creationTime = "CreationTime"
        case description = "Description"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case fleetType = "FleetType"
        case instanceRoleArn = "InstanceRoleArn"
        case instanceType = "InstanceType"
        case logPaths = "LogPaths"
        case metricGroups = "MetricGroups"
        case name = "Name"
        case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
        case operatingSystem = "OperatingSystem"
        case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
        case scriptArn = "ScriptArn"
        case scriptId = "ScriptId"
        case serverLaunchParameters = "ServerLaunchParameters"
        case serverLaunchPath = "ServerLaunchPath"
        case status = "Status"
        case stoppedActions = "StoppedActions"
        case terminationTime = "TerminationTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildArn = buildArn {
            try encodeContainer.encode(buildArn, forKey: .buildArn)
        }
        if let buildId = buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
        if let certificateConfiguration = certificateConfiguration {
            try encodeContainer.encode(certificateConfiguration, forKey: .certificateConfiguration)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let fleetArn = fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let fleetType = fleetType {
            try encodeContainer.encode(fleetType.rawValue, forKey: .fleetType)
        }
        if let instanceRoleArn = instanceRoleArn {
            try encodeContainer.encode(instanceRoleArn, forKey: .instanceRoleArn)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let logPaths = logPaths {
            var logPathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logPaths)
            for stringlist0 in logPaths {
                try logPathsContainer.encode(stringlist0)
            }
        }
        if let metricGroups = metricGroups {
            var metricGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricGroups)
            for metricgrouplist0 in metricGroups {
                try metricGroupsContainer.encode(metricgrouplist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let newGameSessionProtectionPolicy = newGameSessionProtectionPolicy {
            try encodeContainer.encode(newGameSessionProtectionPolicy.rawValue, forKey: .newGameSessionProtectionPolicy)
        }
        if let operatingSystem = operatingSystem {
            try encodeContainer.encode(operatingSystem.rawValue, forKey: .operatingSystem)
        }
        if let resourceCreationLimitPolicy = resourceCreationLimitPolicy {
            try encodeContainer.encode(resourceCreationLimitPolicy, forKey: .resourceCreationLimitPolicy)
        }
        if let scriptArn = scriptArn {
            try encodeContainer.encode(scriptArn, forKey: .scriptArn)
        }
        if let scriptId = scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
        if let serverLaunchParameters = serverLaunchParameters {
            try encodeContainer.encode(serverLaunchParameters, forKey: .serverLaunchParameters)
        }
        if let serverLaunchPath = serverLaunchPath {
            try encodeContainer.encode(serverLaunchPath, forKey: .serverLaunchPath)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let stoppedActions = stoppedActions {
            var stoppedActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stoppedActions)
            for fleetactionlist0 in stoppedActions {
                try stoppedActionsContainer.encode(fleetactionlist0.rawValue)
            }
        }
        if let terminationTime = terminationTime {
            try encodeContainer.encode(terminationTime.timeIntervalSince1970, forKey: .terminationTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let fleetTypeDecoded = try containerValues.decodeIfPresent(FleetType.self, forKey: .fleetType)
        fleetType = fleetTypeDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(EC2InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let terminationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .terminationTime)
        terminationTime = terminationTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(FleetStatus.self, forKey: .status)
        status = statusDecoded
        let buildIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildId)
        buildId = buildIdDecoded
        let buildArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildArn)
        buildArn = buildArnDecoded
        let scriptIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
        let scriptArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scriptArn)
        scriptArn = scriptArnDecoded
        let serverLaunchPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverLaunchPath)
        serverLaunchPath = serverLaunchPathDecoded
        let serverLaunchParametersDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverLaunchParameters)
        serverLaunchParameters = serverLaunchParametersDecoded
        let logPathsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .logPaths)
        var logPathsDecoded0:[String]? = nil
        if let logPathsContainer = logPathsContainer {
            logPathsDecoded0 = [String]()
            for string0 in logPathsContainer {
                if let string0 = string0 {
                    logPathsDecoded0?.append(string0)
                }
            }
        }
        logPaths = logPathsDecoded0
        let newGameSessionProtectionPolicyDecoded = try containerValues.decodeIfPresent(ProtectionPolicy.self, forKey: .newGameSessionProtectionPolicy)
        newGameSessionProtectionPolicy = newGameSessionProtectionPolicyDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let resourceCreationLimitPolicyDecoded = try containerValues.decodeIfPresent(ResourceCreationLimitPolicy.self, forKey: .resourceCreationLimitPolicy)
        resourceCreationLimitPolicy = resourceCreationLimitPolicyDecoded
        let metricGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .metricGroups)
        var metricGroupsDecoded0:[String]? = nil
        if let metricGroupsContainer = metricGroupsContainer {
            metricGroupsDecoded0 = [String]()
            for string0 in metricGroupsContainer {
                if let string0 = string0 {
                    metricGroupsDecoded0?.append(string0)
                }
            }
        }
        metricGroups = metricGroupsDecoded0
        let stoppedActionsContainer = try containerValues.decodeIfPresent([FleetAction?].self, forKey: .stoppedActions)
        var stoppedActionsDecoded0:[FleetAction]? = nil
        if let stoppedActionsContainer = stoppedActionsContainer {
            stoppedActionsDecoded0 = [FleetAction]()
            for string0 in stoppedActionsContainer {
                if let string0 = string0 {
                    stoppedActionsDecoded0?.append(string0)
                }
            }
        }
        stoppedActions = stoppedActionsDecoded0
        let instanceRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceRoleArn)
        instanceRoleArn = instanceRoleArnDecoded
        let certificateConfigurationDecoded = try containerValues.decodeIfPresent(CertificateConfiguration.self, forKey: .certificateConfiguration)
        certificateConfiguration = certificateConfigurationDecoded
    }
}

extension FleetAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FleetAttributes(buildArn: \(String(describing: buildArn)), buildId: \(String(describing: buildId)), certificateConfiguration: \(String(describing: certificateConfiguration)), creationTime: \(String(describing: creationTime)), description: \(String(describing: description)), fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)), fleetType: \(String(describing: fleetType)), instanceRoleArn: \(String(describing: instanceRoleArn)), instanceType: \(String(describing: instanceType)), logPaths: \(String(describing: logPaths)), metricGroups: \(String(describing: metricGroups)), name: \(String(describing: name)), newGameSessionProtectionPolicy: \(String(describing: newGameSessionProtectionPolicy)), operatingSystem: \(String(describing: operatingSystem)), resourceCreationLimitPolicy: \(String(describing: resourceCreationLimitPolicy)), scriptArn: \(String(describing: scriptArn)), scriptId: \(String(describing: scriptId)), serverLaunchParameters: \(String(describing: serverLaunchParameters)), serverLaunchPath: \(String(describing: serverLaunchPath)), status: \(String(describing: status)), stoppedActions: \(String(describing: stoppedActions)), terminationTime: \(String(describing: terminationTime)))"}
}

/// <p>Describes a GameLift fleet of game hosting resources.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///         <p>
///             <a>CreateFleet</a> | <a>DescribeFleetAttributes</a>
///          </p>
public struct FleetAttributes: Equatable {
    /// <p> The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) associated with the GameLift build resource that is deployed on instances in
    ///             this fleet. In a GameLift build ARN, the resource ID matches the <code>BuildId</code>
    ///             value.</p>
    public let buildArn: String?
    /// <p>A unique identifier for the build resource that is deployed on instances in this fleet.</p>
    public let buildId: String?
    /// <p>Indicates whether a TLS/SSL certificate was generated for the fleet. </p>
    public let certificateConfiguration: CertificateConfiguration?
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>A human-readable description of the fleet.</p>
    public let description: String?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>. In a GameLift fleet ARN, the resource ID matches the <code>FleetId</code>
    ///             value.</p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet.</p>
    public let fleetId: String?
    /// <p>The kind of instances, On-Demand or Spot, that this fleet uses.</p>
    public let fleetType: FleetType?
    /// <p>A unique identifier for an AWS IAM role that manages access to your AWS services.
    ///         With an instance role ARN set, any application that runs on an instance in this fleet can assume the role,
    ///         including install scripts, server processes, and daemons (background processes). Create a role or look up a role's
    ///         ARN by using the <a href="https://console.aws.amazon.com/iam/">IAM dashboard</a> in the AWS Management Console.
    ///         Learn more about using on-box credentials for your game servers at
    ///         <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html">
    ///         Access external resources from a game server</a>.</p>
    public let instanceRoleArn: String?
    /// <p>The EC2 instance type that determines the computing resources of each instance in
    ///             the fleet. Instance type defines the CPU, memory, storage, and networking capacity. See
    ///                 <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 Instance Types</a>
    ///             for detailed descriptions.</p>
    public let instanceType: EC2InstanceType?
    /// <p>
    ///             <b>This parameter is no longer used.</b> Game session log
    ///             paths are now defined using the GameLift server API <code>ProcessReady()</code>
    ///             <code>logParameters</code>. See more information in the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api-ref.html#gamelift-sdk-server-api-ref-dataypes-process">Server API Reference</a>. </p>
    public let logPaths: [String]?
    /// <p>Name of a metric group that metrics for this fleet are added to. In Amazon CloudWatch,
    ///             you can view aggregated metrics for fleets that are in a metric group. A fleet can be
    ///             included in only one metric group at a time.</p>
    public let metricGroups: [String]?
    /// <p>A descriptive label that is associated with a fleet. Fleet names do not need to be unique.</p>
    public let name: String?
    /// <p>The type of game session protection to set on all new instances that are started in
    ///             the fleet.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>NoProtection</b> -- The game session can be
    ///                     terminated during a scale-down event.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>FullProtection</b> -- If the game session is in an
    ///                         <code>ACTIVE</code> status, it cannot be terminated during a scale-down
    ///                     event.</p>
    ///             </li>
    ///          </ul>
    public let newGameSessionProtectionPolicy: ProtectionPolicy?
    /// <p>The operating system of the fleet's computing resources. A fleet's operating system is
    ///             determined by the OS of the build or script that is deployed on this fleet.</p>
    public let operatingSystem: OperatingSystem?
    /// <p>The fleet policy that limits the number of game sessions an individual player can
    ///             create over a span of time.</p>
    public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
    /// <p> The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) associated with the GameLift script resource that is deployed on instances
    ///             in this fleet. In a GameLift script ARN, the resource ID matches the
    ///                 <code>ScriptId</code> value.</p>
    public let scriptArn: String?
    /// <p>A unique identifier for the Realtime script resource that is deployed on instances in this fleet.</p>
    public let scriptId: String?
    /// <p>
    ///             <b>This parameter is no longer used.</b> Server launch
    ///             parameters are now defined  using the fleet's <a>RuntimeConfiguration</a>
    ///             parameter. Requests that use this parameter instead continue to be valid.</p>
    public let serverLaunchParameters: String?
    /// <p>
    ///             <b>This parameter is no longer used.</b> Server launch paths
    ///             are now defined  using the fleet's <a>RuntimeConfiguration</a> parameter.
    ///             Requests that use this parameter instead continue to be valid.</p>
    public let serverLaunchPath: String?
    /// <p>Current status of the fleet. Possible fleet statuses include the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>NEW</b> -- A new fleet has been defined and desired
    ///                     instances is set to 1. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>DOWNLOADING/VALIDATING/BUILDING/ACTIVATING</b> --
    ///                     GameLift is setting up the new fleet, creating new instances with the game build
    ///                     or Realtime script and starting server processes.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>ACTIVE</b> -- Hosts can now accept game
    ///                     sessions.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>ERROR</b> -- An error occurred when downloading,
    ///                     validating, building, or activating the fleet.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>DELETING</b> -- Hosts are responding to a delete
    ///                     fleet request.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>TERMINATED</b> -- The fleet no longer
    ///                     exists.</p>
    ///             </li>
    ///          </ul>
    public let status: FleetStatus?
    /// <p>A list of fleet activity that has been suspended using <a>StopFleetActions</a>. This includes fleet auto-scaling.</p>
    public let stoppedActions: [FleetAction]?
    /// <p>A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let terminationTime: Date?

    public init (
        buildArn: String? = nil,
        buildId: String? = nil,
        certificateConfiguration: CertificateConfiguration? = nil,
        creationTime: Date? = nil,
        description: String? = nil,
        fleetArn: String? = nil,
        fleetId: String? = nil,
        fleetType: FleetType? = nil,
        instanceRoleArn: String? = nil,
        instanceType: EC2InstanceType? = nil,
        logPaths: [String]? = nil,
        metricGroups: [String]? = nil,
        name: String? = nil,
        newGameSessionProtectionPolicy: ProtectionPolicy? = nil,
        operatingSystem: OperatingSystem? = nil,
        resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil,
        scriptArn: String? = nil,
        scriptId: String? = nil,
        serverLaunchParameters: String? = nil,
        serverLaunchPath: String? = nil,
        status: FleetStatus? = nil,
        stoppedActions: [FleetAction]? = nil,
        terminationTime: Date? = nil
    )
    {
        self.buildArn = buildArn
        self.buildId = buildId
        self.certificateConfiguration = certificateConfiguration
        self.creationTime = creationTime
        self.description = description
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.fleetType = fleetType
        self.instanceRoleArn = instanceRoleArn
        self.instanceType = instanceType
        self.logPaths = logPaths
        self.metricGroups = metricGroups
        self.name = name
        self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
        self.operatingSystem = operatingSystem
        self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
        self.scriptArn = scriptArn
        self.scriptId = scriptId
        self.serverLaunchParameters = serverLaunchParameters
        self.serverLaunchPath = serverLaunchPath
        self.status = status
        self.stoppedActions = stoppedActions
        self.terminationTime = terminationTime
    }
}

extension FleetCapacity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case instanceCounts = "InstanceCounts"
        case instanceType = "InstanceType"
        case location = "Location"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetArn = fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let instanceCounts = instanceCounts {
            try encodeContainer.encode(instanceCounts, forKey: .instanceCounts)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(EC2InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceCountsDecoded = try containerValues.decodeIfPresent(EC2InstanceCounts.self, forKey: .instanceCounts)
        instanceCounts = instanceCountsDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension FleetCapacity: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FleetCapacity(fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)), instanceCounts: \(String(describing: instanceCounts)), instanceType: \(String(describing: instanceType)), location: \(String(describing: location)))"}
}

/// <p>Current resource capacity settings in a specified fleet or location. The location
///             value might refer to a fleet's remote location or its home Region. </p>
///         <p>
///             <b>Related actions</b>
///          </p>
///         <p>
///             <a>DescribeFleetCapacity</a> |
///             <a>DescribeFleetLocationCapacity</a> |
///             <a>UpdateFleetCapacity</a>
///         </p>
public struct FleetCapacity: Equatable {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>.</p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet associated with the location.</p>
    public let fleetId: String?
    /// <p>The current instance count and capacity settings for the fleet location. </p>
    public let instanceCounts: EC2InstanceCounts?
    /// <p>The EC2 instance type that is used for all instances in a fleet. The instance type
    ///             determines the computing resources in use, including CPU, memory, storage, and
    ///             networking capacity. See <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2
    ///                 Instance Types</a> for detailed descriptions.</p>
    public let instanceType: EC2InstanceType?
    /// <p>The fleet location for the instance count information, expressed as an AWS Region
    ///             code, such as <code>us-west-2</code>. </p>
    public let location: String?

    public init (
        fleetArn: String? = nil,
        fleetId: String? = nil,
        instanceCounts: EC2InstanceCounts? = nil,
        instanceType: EC2InstanceType? = nil,
        location: String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.instanceCounts = instanceCounts
        self.instanceType = instanceType
        self.location = location
    }
}

extension FleetCapacityExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FleetCapacityExceededException(message: \(String(describing: message)))"}
}

extension FleetCapacityExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: FleetCapacityExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified fleet has no available instances to fulfill a
///                 <code>CreateGameSession</code> request. Clients can retry such requests immediately
///             or after a waiting period.</p>
public struct FleetCapacityExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct FleetCapacityExceededExceptionBody: Equatable {
    public let message: String?
}

extension FleetCapacityExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum FleetStatus {
    case activating
    case active
    case building
    case deleting
    case downloading
    case error
    case new
    case terminated
    case validating
    case sdkUnknown(String)
}

extension FleetStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FleetStatus] {
        return [
            .activating,
            .active,
            .building,
            .deleting,
            .downloading,
            .error,
            .new,
            .terminated,
            .validating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .activating: return "ACTIVATING"
        case .active: return "ACTIVE"
        case .building: return "BUILDING"
        case .deleting: return "DELETING"
        case .downloading: return "DOWNLOADING"
        case .error: return "ERROR"
        case .new: return "NEW"
        case .terminated: return "TERMINATED"
        case .validating: return "VALIDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FleetStatus(rawValue: rawValue) ?? FleetStatus.sdkUnknown(rawValue)
    }
}

public enum FleetType {
    case ondemand
    case spot
    case sdkUnknown(String)
}

extension FleetType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FleetType] {
        return [
            .ondemand,
            .spot,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ondemand: return "ON_DEMAND"
        case .spot: return "SPOT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FleetType(rawValue: rawValue) ?? FleetType.sdkUnknown(rawValue)
    }
}

extension FleetUtilization: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activeGameSessionCount = "ActiveGameSessionCount"
        case activeServerProcessCount = "ActiveServerProcessCount"
        case currentPlayerSessionCount = "CurrentPlayerSessionCount"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case location = "Location"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeGameSessionCount = activeGameSessionCount {
            try encodeContainer.encode(activeGameSessionCount, forKey: .activeGameSessionCount)
        }
        if let activeServerProcessCount = activeServerProcessCount {
            try encodeContainer.encode(activeServerProcessCount, forKey: .activeServerProcessCount)
        }
        if let currentPlayerSessionCount = currentPlayerSessionCount {
            try encodeContainer.encode(currentPlayerSessionCount, forKey: .currentPlayerSessionCount)
        }
        if let fleetArn = fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let maximumPlayerSessionCount = maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let activeServerProcessCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .activeServerProcessCount)
        activeServerProcessCount = activeServerProcessCountDecoded
        let activeGameSessionCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .activeGameSessionCount)
        activeGameSessionCount = activeGameSessionCountDecoded
        let currentPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .currentPlayerSessionCount)
        currentPlayerSessionCount = currentPlayerSessionCountDecoded
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension FleetUtilization: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FleetUtilization(activeGameSessionCount: \(String(describing: activeGameSessionCount)), activeServerProcessCount: \(String(describing: activeServerProcessCount)), currentPlayerSessionCount: \(String(describing: currentPlayerSessionCount)), fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)), location: \(String(describing: location)), maximumPlayerSessionCount: \(String(describing: maximumPlayerSessionCount)))"}
}

/// <p>Current resource utilization statistics in a specified fleet or location. The location
///             value might refer to a fleet's remote location or its home Region.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///         <p>
///             <a>DescribeFleetUtilization</a> | <a>DescribeFleetLocationUtilization</a>
///          </p>
public struct FleetUtilization: Equatable {
    /// <p>The number of active game sessions that are currently being hosted across all
    ///             instances in the fleet location.</p>
    public let activeGameSessionCount: Int?
    /// <p>The number of server processes in <code>ACTIVE</code> status that are currently
    ///             running across all instances in the fleet location. </p>
    public let activeServerProcessCount: Int?
    /// <p>The number of active player sessions that are currently being hosted across all
    ///             instances in the fleet location.</p>
    public let currentPlayerSessionCount: Int?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>.</p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet associated with the location.</p>
    public let fleetId: String?
    /// <p>The fleet location for the fleet utilization information, expressed as an AWS Region
    ///             code, such as <code>us-west-2</code>. </p>
    public let location: String?
    /// <p>The maximum number of players allowed across all game sessions that are currently
    ///             being hosted across all instances in the fleet location.</p>
    public let maximumPlayerSessionCount: Int?

    public init (
        activeGameSessionCount: Int? = nil,
        activeServerProcessCount: Int? = nil,
        currentPlayerSessionCount: Int? = nil,
        fleetArn: String? = nil,
        fleetId: String? = nil,
        location: String? = nil,
        maximumPlayerSessionCount: Int? = nil
    )
    {
        self.activeGameSessionCount = activeGameSessionCount
        self.activeServerProcessCount = activeServerProcessCount
        self.currentPlayerSessionCount = currentPlayerSessionCount
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.location = location
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
    }
}

public enum FlexMatchMode {
    case standalone
    case withQueue
    case sdkUnknown(String)
}

extension FlexMatchMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FlexMatchMode] {
        return [
            .standalone,
            .withQueue,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .standalone: return "STANDALONE"
        case .withQueue: return "WITH_QUEUE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FlexMatchMode(rawValue: rawValue) ?? FlexMatchMode.sdkUnknown(rawValue)
    }
}

extension GameProperty: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}

extension GameProperty: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GameProperty(key: \(String(describing: key)), value: \(String(describing: value)))"}
}

/// <p>Set of key-value pairs that contain information about a game session. When included in
///             a game session request, these properties communicate details to be used when setting up
///             the new game session. For example, a game property might specify a game mode, level, or
///             map. Game properties are passed to the game server process when initiating a new game
///             session. For more information, see the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-client-api.html#gamelift-sdk-client-api-create"> GameLift Developer Guide</a>.</p>
public struct GameProperty: Equatable {
    /// <p>The game property identifier.</p>
    public let key: String?
    /// <p>The game property value.</p>
    public let value: String?

    public init (
        key: String? = nil,
        value: String? = nil
    )
    {
        self.key = key
        self.value = value
    }
}

extension GameServer: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case claimStatus = "ClaimStatus"
        case connectionInfo = "ConnectionInfo"
        case gameServerData = "GameServerData"
        case gameServerGroupArn = "GameServerGroupArn"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
        case instanceId = "InstanceId"
        case lastClaimTime = "LastClaimTime"
        case lastHealthCheckTime = "LastHealthCheckTime"
        case registrationTime = "RegistrationTime"
        case utilizationStatus = "UtilizationStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let claimStatus = claimStatus {
            try encodeContainer.encode(claimStatus.rawValue, forKey: .claimStatus)
        }
        if let connectionInfo = connectionInfo {
            try encodeContainer.encode(connectionInfo, forKey: .connectionInfo)
        }
        if let gameServerData = gameServerData {
            try encodeContainer.encode(gameServerData, forKey: .gameServerData)
        }
        if let gameServerGroupArn = gameServerGroupArn {
            try encodeContainer.encode(gameServerGroupArn, forKey: .gameServerGroupArn)
        }
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerId = gameServerId {
            try encodeContainer.encode(gameServerId, forKey: .gameServerId)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let lastClaimTime = lastClaimTime {
            try encodeContainer.encode(lastClaimTime.timeIntervalSince1970, forKey: .lastClaimTime)
        }
        if let lastHealthCheckTime = lastHealthCheckTime {
            try encodeContainer.encode(lastHealthCheckTime.timeIntervalSince1970, forKey: .lastHealthCheckTime)
        }
        if let registrationTime = registrationTime {
            try encodeContainer.encode(registrationTime.timeIntervalSince1970, forKey: .registrationTime)
        }
        if let utilizationStatus = utilizationStatus {
            try encodeContainer.encode(utilizationStatus.rawValue, forKey: .utilizationStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupArn)
        gameServerGroupArn = gameServerGroupArnDecoded
        let gameServerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerId)
        gameServerId = gameServerIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let connectionInfoDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionInfo)
        connectionInfo = connectionInfoDecoded
        let gameServerDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerData)
        gameServerData = gameServerDataDecoded
        let claimStatusDecoded = try containerValues.decodeIfPresent(GameServerClaimStatus.self, forKey: .claimStatus)
        claimStatus = claimStatusDecoded
        let utilizationStatusDecoded = try containerValues.decodeIfPresent(GameServerUtilizationStatus.self, forKey: .utilizationStatus)
        utilizationStatus = utilizationStatusDecoded
        let registrationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .registrationTime)
        registrationTime = registrationTimeDecoded
        let lastClaimTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastClaimTime)
        lastClaimTime = lastClaimTimeDecoded
        let lastHealthCheckTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastHealthCheckTime)
        lastHealthCheckTime = lastHealthCheckTimeDecoded
    }
}

extension GameServer: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GameServer(claimStatus: \(String(describing: claimStatus)), connectionInfo: \(String(describing: connectionInfo)), gameServerData: \(String(describing: gameServerData)), gameServerGroupArn: \(String(describing: gameServerGroupArn)), gameServerGroupName: \(String(describing: gameServerGroupName)), gameServerId: \(String(describing: gameServerId)), instanceId: \(String(describing: instanceId)), lastClaimTime: \(String(describing: lastClaimTime)), lastHealthCheckTime: \(String(describing: lastHealthCheckTime)), registrationTime: \(String(describing: registrationTime)), utilizationStatus: \(String(describing: utilizationStatus)))"}
}

/// <p>
///             <b>This data type is used with the GameLift FleetIQ and game server groups.</b>
///          </p>
///         <p>Properties describing a game server that is running on an instance in a <a>GameServerGroup</a>. </p>
///          <p>A game server is created by a successful call to <code>RegisterGameServer</code> and
///             deleted by calling <code>DeregisterGameServer</code>. A game server is claimed to host a
///             game session by calling <code>ClaimGameServer</code>. </p>
///         <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>RegisterGameServer</a> |
///                     <a>ListGameServers</a> |
///                     <a>ClaimGameServer</a> |
///                     <a>DescribeGameServer</a> |
///                     <a>UpdateGameServer</a> |
///                     <a>DeregisterGameServer</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/fleetiqguide/reference-awssdk-fleetiq.html">All APIs by task</a>
///          </p>
public struct GameServer: Equatable {
    /// <p>Indicates when an available game server has been reserved for gameplay but has not yet
    ///             started hosting a game. Once it is claimed, the game server remains in
    ///                 <code>CLAIMED</code> status for a maximum of one minute. During this time, game
    ///             clients connect to the game server to start the game and trigger the game server to
    ///             update its utilization status. After one minute, the game server claim status reverts to
    ///             null.</p>
    public let claimStatus: GameServerClaimStatus?
    /// <p>The port and IP address that must be used to establish a client connection to the game server.</p>
    public let connectionInfo: String?
    /// <p>A set of custom game server properties, formatted as a single string value. This data
    ///             is passed to a game client or service when it requests information on game servers using
    ///                 <a>ListGameServers</a> or <a>ClaimGameServer</a>.</p>
    public let gameServerData: String?
    /// <p>The ARN identifier for the game server group where the game server is located.</p>
    public let gameServerGroupArn: String?
    /// <p>A unique identifier for the game server group where the game server is running.
    ///             Use either the <a>GameServerGroup</a> name or ARN value.</p>
    public let gameServerGroupName: String?
    /// <p>A custom string that uniquely identifies the game server. Game server IDs are
    ///             developer-defined and are unique across all game server groups in an AWS
    ///             account.</p>
    public let gameServerId: String?
    /// <p>The unique identifier for the instance where the game server is running. This ID is
    ///             available in the instance metadata. EC2 instance IDs
    ///             use a 17-character format, for example: <code>i-1234567890abcdef0</code>.</p>
    public let instanceId: String?
    /// <p>Timestamp that indicates the last time the game server was claimed with a <a>ClaimGameServer</a> request. The format is a number expressed in Unix time
    ///             as milliseconds (for example <code>"1469498468.057"</code>). This value is used to
    ///             calculate when a claimed game server's status should revert to null.</p>
    public let lastClaimTime: Date?
    /// <p>Timestamp that indicates the last time the game server was updated with health status
    ///             using an <a>UpdateGameServer</a> request. The format is a number expressed in
    ///             Unix time as milliseconds (for example <code>"1469498468.057"</code>). After game server
    ///             registration, this property is only changed when a game server update specifies a health
    ///             check value.</p>
    public let lastHealthCheckTime: Date?
    /// <p>Timestamp that indicates when the game server was created with a <a>RegisterGameServer</a> request. The format is a number expressed in Unix
    ///             time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let registrationTime: Date?
    /// <p>Indicates whether the game server is currently available for new games or is busy. Possible statuses include:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>AVAILABLE</code> - The game server is available to be claimed. A game server that has
    ///                     been claimed remains in this status until it reports game hosting activity. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UTILIZED</code> - The game server is currently hosting a game session with players. </p>
    ///             </li>
    ///          </ul>
    public let utilizationStatus: GameServerUtilizationStatus?

    public init (
        claimStatus: GameServerClaimStatus? = nil,
        connectionInfo: String? = nil,
        gameServerData: String? = nil,
        gameServerGroupArn: String? = nil,
        gameServerGroupName: String? = nil,
        gameServerId: String? = nil,
        instanceId: String? = nil,
        lastClaimTime: Date? = nil,
        lastHealthCheckTime: Date? = nil,
        registrationTime: Date? = nil,
        utilizationStatus: GameServerUtilizationStatus? = nil
    )
    {
        self.claimStatus = claimStatus
        self.connectionInfo = connectionInfo
        self.gameServerData = gameServerData
        self.gameServerGroupArn = gameServerGroupArn
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
        self.instanceId = instanceId
        self.lastClaimTime = lastClaimTime
        self.lastHealthCheckTime = lastHealthCheckTime
        self.registrationTime = registrationTime
        self.utilizationStatus = utilizationStatus
    }
}

public enum GameServerClaimStatus {
    case claimed
    case sdkUnknown(String)
}

extension GameServerClaimStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GameServerClaimStatus] {
        return [
            .claimed,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .claimed: return "CLAIMED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GameServerClaimStatus(rawValue: rawValue) ?? GameServerClaimStatus.sdkUnknown(rawValue)
    }
}

extension GameServerGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingGroupArn = "AutoScalingGroupArn"
        case balancingStrategy = "BalancingStrategy"
        case creationTime = "CreationTime"
        case gameServerGroupArn = "GameServerGroupArn"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case lastUpdatedTime = "LastUpdatedTime"
        case roleArn = "RoleArn"
        case status = "Status"
        case statusReason = "StatusReason"
        case suspendedActions = "SuspendedActions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingGroupArn = autoScalingGroupArn {
            try encodeContainer.encode(autoScalingGroupArn, forKey: .autoScalingGroupArn)
        }
        if let balancingStrategy = balancingStrategy {
            try encodeContainer.encode(balancingStrategy.rawValue, forKey: .balancingStrategy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let gameServerGroupArn = gameServerGroupArn {
            try encodeContainer.encode(gameServerGroupArn, forKey: .gameServerGroupArn)
        }
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerProtectionPolicy = gameServerProtectionPolicy {
            try encodeContainer.encode(gameServerProtectionPolicy.rawValue, forKey: .gameServerProtectionPolicy)
        }
        if let instanceDefinitions = instanceDefinitions {
            var instanceDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceDefinitions)
            for instancedefinitions0 in instanceDefinitions {
                try instanceDefinitionsContainer.encode(instancedefinitions0)
            }
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let suspendedActions = suspendedActions {
            var suspendedActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suspendedActions)
            for gameservergroupactions0 in suspendedActions {
                try suspendedActionsContainer.encode(gameservergroupactions0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupArn)
        gameServerGroupArn = gameServerGroupArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let instanceDefinitionsContainer = try containerValues.decodeIfPresent([InstanceDefinition?].self, forKey: .instanceDefinitions)
        var instanceDefinitionsDecoded0:[InstanceDefinition]? = nil
        if let instanceDefinitionsContainer = instanceDefinitionsContainer {
            instanceDefinitionsDecoded0 = [InstanceDefinition]()
            for structure0 in instanceDefinitionsContainer {
                if let structure0 = structure0 {
                    instanceDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        instanceDefinitions = instanceDefinitionsDecoded0
        let balancingStrategyDecoded = try containerValues.decodeIfPresent(BalancingStrategy.self, forKey: .balancingStrategy)
        balancingStrategy = balancingStrategyDecoded
        let gameServerProtectionPolicyDecoded = try containerValues.decodeIfPresent(GameServerProtectionPolicy.self, forKey: .gameServerProtectionPolicy)
        gameServerProtectionPolicy = gameServerProtectionPolicyDecoded
        let autoScalingGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupArn)
        autoScalingGroupArn = autoScalingGroupArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameServerGroupStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let suspendedActionsContainer = try containerValues.decodeIfPresent([GameServerGroupAction?].self, forKey: .suspendedActions)
        var suspendedActionsDecoded0:[GameServerGroupAction]? = nil
        if let suspendedActionsContainer = suspendedActionsContainer {
            suspendedActionsDecoded0 = [GameServerGroupAction]()
            for string0 in suspendedActionsContainer {
                if let string0 = string0 {
                    suspendedActionsDecoded0?.append(string0)
                }
            }
        }
        suspendedActions = suspendedActionsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}

extension GameServerGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GameServerGroup(autoScalingGroupArn: \(String(describing: autoScalingGroupArn)), balancingStrategy: \(String(describing: balancingStrategy)), creationTime: \(String(describing: creationTime)), gameServerGroupArn: \(String(describing: gameServerGroupArn)), gameServerGroupName: \(String(describing: gameServerGroupName)), gameServerProtectionPolicy: \(String(describing: gameServerProtectionPolicy)), instanceDefinitions: \(String(describing: instanceDefinitions)), lastUpdatedTime: \(String(describing: lastUpdatedTime)), roleArn: \(String(describing: roleArn)), status: \(String(describing: status)), statusReason: \(String(describing: statusReason)), suspendedActions: \(String(describing: suspendedActions)))"}
}

/// <p>
///             <b>This data type is used with the GameLift FleetIQ and game server groups.</b>
///          </p>
///         <p>Properties that describe a game server group resource. A game server group manages
///             certain properties related to a corresponding EC2 Auto Scaling group. </p>
///         <p>A game server group is created by a successful call to
///                 <code>CreateGameServerGroup</code> and deleted by calling
///                 <code>DeleteGameServerGroup</code>. Game server group activity can be temporarily
///             suspended and resumed by calling <code>SuspendGameServerGroup</code> and
///                 <code>ResumeGameServerGroup</code>, respectively. </p>
///          <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>CreateGameServerGroup</a> |
///                     <a>ListGameServerGroups</a> |
///                     <a>DescribeGameServerGroup</a> |
///                     <a>UpdateGameServerGroup</a> |
///                     <a>DeleteGameServerGroup</a> |
///                     <a>ResumeGameServerGroup</a> |
///                     <a>SuspendGameServerGroup</a> |
///                     <a>DescribeGameServerInstances</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/fleetiqguide/reference-awssdk-fleetiq.html">All APIs by task</a>
///          </p>
public struct GameServerGroup: Equatable {
    /// <p>A generated unique ID for the EC2 Auto Scaling group that is associated with this
    ///             game server group.</p>
    public let autoScalingGroupArn: String?
    /// <p>Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the
    ///             game server group. Method options include the following:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>SPOT_ONLY</code> - Only Spot Instances are used in the game server group. If Spot
    ///                     Instances are unavailable or not viable for game hosting, the game server group
    ///                     provides no hosting capacity until Spot Instances can again be used. Until then,
    ///                     no new instances are started, and the existing nonviable Spot Instances are
    ///                     terminated (after current gameplay ends) and are not replaced.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>SPOT_PREFERRED</code> - (default value) Spot Instances are used whenever available in
    ///                     the game server group. If Spot Instances are unavailable, the game server group
    ///                     continues to provide hosting capacity by falling back to On-Demand Instances.
    ///                     Existing nonviable Spot Instances are terminated (after current gameplay ends)
    ///                     and are replaced with new On-Demand Instances.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ON_DEMAND_ONLY</code> - Only On-Demand Instances are used in the game
    ///                     server group. No Spot Instances are used, even when available, while this
    ///                     balancing strategy is in force.</p>
    ///             </li>
    ///          </ul>
    public let balancingStrategy: BalancingStrategy?
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>A generated unique ID for the game server group.</p>
    public let gameServerGroupArn: String?
    /// <p>A developer-defined identifier for the game server group. The name is unique for each
    ///             Region in each AWS account.</p>
    public let gameServerGroupName: String?
    /// <p>A flag that indicates whether instances in the game server group are protected
    ///             from early termination. Unprotected instances that have active game servers running might
    ///             be terminated during a scale-down event, causing players to be dropped from the game.
    ///             Protected instances cannot be terminated while there are active game servers running except
    ///             in the event of a forced game server group deletion (see ). An exception to this is with Spot
    ///             Instances, which can be terminated by AWS regardless of protection status. </p>
    public let gameServerProtectionPolicy: GameServerProtectionPolicy?
    /// <p>The set of EC2 instance types that GameLift FleetIQ can use when balancing and automatically
    ///             scaling instances in the corresponding Auto Scaling group. </p>
    public let instanceDefinitions: [InstanceDefinition]?
    /// <p>A timestamp that indicates when this game server group was last updated.</p>
    public let lastUpdatedTime: Date?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) for an IAM role that
    ///             allows Amazon GameLift to access your EC2 Auto Scaling groups.</p>
    public let roleArn: String?
    /// <p>The current status of the game server group. Possible statuses include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>NEW</code> - GameLift FleetIQ has validated the <code>CreateGameServerGroup()</code>
    ///                     request. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ACTIVATING</code> - GameLift FleetIQ is setting up a game server group, which
    ///                     includes creating an Auto Scaling group in your AWS account. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ACTIVE</code> - The game server group has been successfully created. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>DELETE_SCHEDULED</code> - A request to delete the game server group has
    ///                     been received. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>DELETING</code> - GameLift FleetIQ has received a valid
    ///                         <code>DeleteGameServerGroup()</code> request and is processing it. GameLift FleetIQ
    ///                     must first complete and release hosts before it deletes the Auto Scaling group
    ///                     and the game server group. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>DELETED</code> - The game server group has been successfully deleted. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ERROR</code> - The asynchronous processes of activating or deleting a game server group
    ///                     has failed, resulting in an error state.</p>
    ///             </li>
    ///          </ul>
    public let status: GameServerGroupStatus?
    /// <p>Additional information about the current game server group status. This information
    ///             might provide additional insight on groups that are in <code>ERROR</code> status.</p>
    public let statusReason: String?
    /// <p>A list of activities that are currently suspended for this game server group.
    ///         If this property is empty, all activities are occurring.</p>
    public let suspendedActions: [GameServerGroupAction]?

    public init (
        autoScalingGroupArn: String? = nil,
        balancingStrategy: BalancingStrategy? = nil,
        creationTime: Date? = nil,
        gameServerGroupArn: String? = nil,
        gameServerGroupName: String? = nil,
        gameServerProtectionPolicy: GameServerProtectionPolicy? = nil,
        instanceDefinitions: [InstanceDefinition]? = nil,
        lastUpdatedTime: Date? = nil,
        roleArn: String? = nil,
        status: GameServerGroupStatus? = nil,
        statusReason: String? = nil,
        suspendedActions: [GameServerGroupAction]? = nil
    )
    {
        self.autoScalingGroupArn = autoScalingGroupArn
        self.balancingStrategy = balancingStrategy
        self.creationTime = creationTime
        self.gameServerGroupArn = gameServerGroupArn
        self.gameServerGroupName = gameServerGroupName
        self.gameServerProtectionPolicy = gameServerProtectionPolicy
        self.instanceDefinitions = instanceDefinitions
        self.lastUpdatedTime = lastUpdatedTime
        self.roleArn = roleArn
        self.status = status
        self.statusReason = statusReason
        self.suspendedActions = suspendedActions
    }
}

public enum GameServerGroupAction {
    case replaceInstanceTypes
    case sdkUnknown(String)
}

extension GameServerGroupAction : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GameServerGroupAction] {
        return [
            .replaceInstanceTypes,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .replaceInstanceTypes: return "REPLACE_INSTANCE_TYPES"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GameServerGroupAction(rawValue: rawValue) ?? GameServerGroupAction.sdkUnknown(rawValue)
    }
}

extension GameServerGroupAutoScalingPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
        case targetTrackingConfiguration = "TargetTrackingConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let estimatedInstanceWarmup = estimatedInstanceWarmup {
            try encodeContainer.encode(estimatedInstanceWarmup, forKey: .estimatedInstanceWarmup)
        }
        if let targetTrackingConfiguration = targetTrackingConfiguration {
            try encodeContainer.encode(targetTrackingConfiguration, forKey: .targetTrackingConfiguration)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let estimatedInstanceWarmupDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .estimatedInstanceWarmup)
        estimatedInstanceWarmup = estimatedInstanceWarmupDecoded
        let targetTrackingConfigurationDecoded = try containerValues.decodeIfPresent(TargetTrackingConfiguration.self, forKey: .targetTrackingConfiguration)
        targetTrackingConfiguration = targetTrackingConfigurationDecoded
    }
}

extension GameServerGroupAutoScalingPolicy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GameServerGroupAutoScalingPolicy(estimatedInstanceWarmup: \(String(describing: estimatedInstanceWarmup)), targetTrackingConfiguration: \(String(describing: targetTrackingConfiguration)))"}
}

/// <p>
///             <b>This data type is used with the GameLift FleetIQ and game server groups.</b>
///          </p>
///         <p>Configuration settings for intelligent automatic scaling that uses target tracking.
///             These settings are used to add an Auto Scaling policy when creating the corresponding
///             Auto Scaling group with <a>CreateGameServerGroup</a>. After the Auto Scaling
///             group is created, all updates to Auto Scaling policies, including changing this policy
///             and adding or removing other policies, is done directly on the Auto Scaling group. </p>
public struct GameServerGroupAutoScalingPolicy: Equatable {
    /// <p>Length of time, in seconds, it takes for a new instance to start new game server
    ///             processes and register with GameLift FleetIQ. Specifying a warm-up time can be useful, particularly
    ///             with game servers that take a long time to start up, because it avoids prematurely
    ///             starting new instances. </p>
    public let estimatedInstanceWarmup: Int?
    /// <p>Settings for a target-based scaling policy applied to Auto Scaling group. These
    ///             settings are used to create a target-based policy that tracks the GameLift FleetIQ metric
    ///                 <code>"PercentUtilizedGameServers"</code> and specifies a target value for the
    ///             metric. As player usage changes, the policy triggers to adjust the game server group
    ///             capacity so that the metric returns to the target value. </p>
    public let targetTrackingConfiguration: TargetTrackingConfiguration?

    public init (
        estimatedInstanceWarmup: Int? = nil,
        targetTrackingConfiguration: TargetTrackingConfiguration? = nil
    )
    {
        self.estimatedInstanceWarmup = estimatedInstanceWarmup
        self.targetTrackingConfiguration = targetTrackingConfiguration
    }
}

public enum GameServerGroupDeleteOption {
    case forceDelete
    case retain
    case safeDelete
    case sdkUnknown(String)
}

extension GameServerGroupDeleteOption : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GameServerGroupDeleteOption] {
        return [
            .forceDelete,
            .retain,
            .safeDelete,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .forceDelete: return "FORCE_DELETE"
        case .retain: return "RETAIN"
        case .safeDelete: return "SAFE_DELETE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GameServerGroupDeleteOption(rawValue: rawValue) ?? GameServerGroupDeleteOption.sdkUnknown(rawValue)
    }
}

public enum GameServerGroupInstanceType {
    case c42xlarge
    case c44xlarge
    case c48xlarge
    case c4Large
    case c4Xlarge
    case c512xlarge
    case c518xlarge
    case c524xlarge
    case c52xlarge
    case c54xlarge
    case c59xlarge
    case c5Large
    case c5Xlarge
    case c5a12xlarge
    case c5a16xlarge
    case c5a24xlarge
    case c5a2xlarge
    case c5a4xlarge
    case c5a8xlarge
    case c5aLarge
    case c5aXlarge
    case m410xlarge
    case m42xlarge
    case m44xlarge
    case m4Large
    case m4Xlarge
    case m512xlarge
    case m516xlarge
    case m524xlarge
    case m52xlarge
    case m54xlarge
    case m58xlarge
    case m5Large
    case m5Xlarge
    case m5a12xlarge
    case m5a16xlarge
    case m5a24xlarge
    case m5a2xlarge
    case m5a4xlarge
    case m5a8xlarge
    case m5aLarge
    case m5aXlarge
    case r416xlarge
    case r42xlarge
    case r44xlarge
    case r48xlarge
    case r4Large
    case r4Xlarge
    case r512xlarge
    case r516xlarge
    case r524xlarge
    case r52xlarge
    case r54xlarge
    case r58xlarge
    case r5Large
    case r5Xlarge
    case r5a12xlarge
    case r5a16xlarge
    case r5a24xlarge
    case r5a2xlarge
    case r5a4xlarge
    case r5a8xlarge
    case r5aLarge
    case r5aXlarge
    case sdkUnknown(String)
}

extension GameServerGroupInstanceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GameServerGroupInstanceType] {
        return [
            .c42xlarge,
            .c44xlarge,
            .c48xlarge,
            .c4Large,
            .c4Xlarge,
            .c512xlarge,
            .c518xlarge,
            .c524xlarge,
            .c52xlarge,
            .c54xlarge,
            .c59xlarge,
            .c5Large,
            .c5Xlarge,
            .c5a12xlarge,
            .c5a16xlarge,
            .c5a24xlarge,
            .c5a2xlarge,
            .c5a4xlarge,
            .c5a8xlarge,
            .c5aLarge,
            .c5aXlarge,
            .m410xlarge,
            .m42xlarge,
            .m44xlarge,
            .m4Large,
            .m4Xlarge,
            .m512xlarge,
            .m516xlarge,
            .m524xlarge,
            .m52xlarge,
            .m54xlarge,
            .m58xlarge,
            .m5Large,
            .m5Xlarge,
            .m5a12xlarge,
            .m5a16xlarge,
            .m5a24xlarge,
            .m5a2xlarge,
            .m5a4xlarge,
            .m5a8xlarge,
            .m5aLarge,
            .m5aXlarge,
            .r416xlarge,
            .r42xlarge,
            .r44xlarge,
            .r48xlarge,
            .r4Large,
            .r4Xlarge,
            .r512xlarge,
            .r516xlarge,
            .r524xlarge,
            .r52xlarge,
            .r54xlarge,
            .r58xlarge,
            .r5Large,
            .r5Xlarge,
            .r5a12xlarge,
            .r5a16xlarge,
            .r5a24xlarge,
            .r5a2xlarge,
            .r5a4xlarge,
            .r5a8xlarge,
            .r5aLarge,
            .r5aXlarge,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .c42xlarge: return "c4.2xlarge"
        case .c44xlarge: return "c4.4xlarge"
        case .c48xlarge: return "c4.8xlarge"
        case .c4Large: return "c4.large"
        case .c4Xlarge: return "c4.xlarge"
        case .c512xlarge: return "c5.12xlarge"
        case .c518xlarge: return "c5.18xlarge"
        case .c524xlarge: return "c5.24xlarge"
        case .c52xlarge: return "c5.2xlarge"
        case .c54xlarge: return "c5.4xlarge"
        case .c59xlarge: return "c5.9xlarge"
        case .c5Large: return "c5.large"
        case .c5Xlarge: return "c5.xlarge"
        case .c5a12xlarge: return "c5a.12xlarge"
        case .c5a16xlarge: return "c5a.16xlarge"
        case .c5a24xlarge: return "c5a.24xlarge"
        case .c5a2xlarge: return "c5a.2xlarge"
        case .c5a4xlarge: return "c5a.4xlarge"
        case .c5a8xlarge: return "c5a.8xlarge"
        case .c5aLarge: return "c5a.large"
        case .c5aXlarge: return "c5a.xlarge"
        case .m410xlarge: return "m4.10xlarge"
        case .m42xlarge: return "m4.2xlarge"
        case .m44xlarge: return "m4.4xlarge"
        case .m4Large: return "m4.large"
        case .m4Xlarge: return "m4.xlarge"
        case .m512xlarge: return "m5.12xlarge"
        case .m516xlarge: return "m5.16xlarge"
        case .m524xlarge: return "m5.24xlarge"
        case .m52xlarge: return "m5.2xlarge"
        case .m54xlarge: return "m5.4xlarge"
        case .m58xlarge: return "m5.8xlarge"
        case .m5Large: return "m5.large"
        case .m5Xlarge: return "m5.xlarge"
        case .m5a12xlarge: return "m5a.12xlarge"
        case .m5a16xlarge: return "m5a.16xlarge"
        case .m5a24xlarge: return "m5a.24xlarge"
        case .m5a2xlarge: return "m5a.2xlarge"
        case .m5a4xlarge: return "m5a.4xlarge"
        case .m5a8xlarge: return "m5a.8xlarge"
        case .m5aLarge: return "m5a.large"
        case .m5aXlarge: return "m5a.xlarge"
        case .r416xlarge: return "r4.16xlarge"
        case .r42xlarge: return "r4.2xlarge"
        case .r44xlarge: return "r4.4xlarge"
        case .r48xlarge: return "r4.8xlarge"
        case .r4Large: return "r4.large"
        case .r4Xlarge: return "r4.xlarge"
        case .r512xlarge: return "r5.12xlarge"
        case .r516xlarge: return "r5.16xlarge"
        case .r524xlarge: return "r5.24xlarge"
        case .r52xlarge: return "r5.2xlarge"
        case .r54xlarge: return "r5.4xlarge"
        case .r58xlarge: return "r5.8xlarge"
        case .r5Large: return "r5.large"
        case .r5Xlarge: return "r5.xlarge"
        case .r5a12xlarge: return "r5a.12xlarge"
        case .r5a16xlarge: return "r5a.16xlarge"
        case .r5a24xlarge: return "r5a.24xlarge"
        case .r5a2xlarge: return "r5a.2xlarge"
        case .r5a4xlarge: return "r5a.4xlarge"
        case .r5a8xlarge: return "r5a.8xlarge"
        case .r5aLarge: return "r5a.large"
        case .r5aXlarge: return "r5a.xlarge"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GameServerGroupInstanceType(rawValue: rawValue) ?? GameServerGroupInstanceType.sdkUnknown(rawValue)
    }
}

public enum GameServerGroupStatus {
    case activating
    case active
    case deleted
    case deleteScheduled
    case deleting
    case error
    case new
    case sdkUnknown(String)
}

extension GameServerGroupStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GameServerGroupStatus] {
        return [
            .activating,
            .active,
            .deleted,
            .deleteScheduled,
            .deleting,
            .error,
            .new,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .activating: return "ACTIVATING"
        case .active: return "ACTIVE"
        case .deleted: return "DELETED"
        case .deleteScheduled: return "DELETE_SCHEDULED"
        case .deleting: return "DELETING"
        case .error: return "ERROR"
        case .new: return "NEW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GameServerGroupStatus(rawValue: rawValue) ?? GameServerGroupStatus.sdkUnknown(rawValue)
    }
}

public enum GameServerHealthCheck {
    case healthy
    case sdkUnknown(String)
}

extension GameServerHealthCheck : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GameServerHealthCheck] {
        return [
            .healthy,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .healthy: return "HEALTHY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GameServerHealthCheck(rawValue: rawValue) ?? GameServerHealthCheck.sdkUnknown(rawValue)
    }
}

extension GameServerInstance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupArn = "GameServerGroupArn"
        case gameServerGroupName = "GameServerGroupName"
        case instanceId = "InstanceId"
        case instanceStatus = "InstanceStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupArn = gameServerGroupArn {
            try encodeContainer.encode(gameServerGroupArn, forKey: .gameServerGroupArn)
        }
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let instanceStatus = instanceStatus {
            try encodeContainer.encode(instanceStatus.rawValue, forKey: .instanceStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupArn)
        gameServerGroupArn = gameServerGroupArnDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceStatusDecoded = try containerValues.decodeIfPresent(GameServerInstanceStatus.self, forKey: .instanceStatus)
        instanceStatus = instanceStatusDecoded
    }
}

extension GameServerInstance: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GameServerInstance(gameServerGroupArn: \(String(describing: gameServerGroupArn)), gameServerGroupName: \(String(describing: gameServerGroupName)), instanceId: \(String(describing: instanceId)), instanceStatus: \(String(describing: instanceStatus)))"}
}

/// <p>
///             <b>This data type is used with the GameLift FleetIQ and game server groups.</b>
///          </p>
///             <p> Additional properties, including status, that describe an EC2 instance in a game
///             server group. Instance configurations are set with game server group properties (see
///                 <code>DescribeGameServerGroup</code> and with the EC2 launch template that was used
///             when creating the game server group. </p>
///             <p>Retrieve game server instances for a game server group by calling
///                 <code>DescribeGameServerInstances</code>. </p>
///             <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>CreateGameServerGroup</a> |
///                     <a>ListGameServerGroups</a> |
///                     <a>DescribeGameServerGroup</a> |
///                     <a>UpdateGameServerGroup</a> |
///                     <a>DeleteGameServerGroup</a> |
///                     <a>ResumeGameServerGroup</a> |
///                     <a>SuspendGameServerGroup</a> |
///                     <a>DescribeGameServerInstances</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/fleetiqguide/reference-awssdk-fleetiq.html">All APIs by task</a>
///          </p>
public struct GameServerInstance: Equatable {
    /// <p>A generated unique identifier for the game server group that includes the game
    ///             server instance. </p>
    public let gameServerGroupArn: String?
    /// <p>A developer-defined identifier for the game server group that includes the game
    ///             server instance. The name is unique for each Region in each AWS account.</p>
    public let gameServerGroupName: String?
    /// <p>The unique identifier for the instance where the game server is running. This ID is
    ///             available in the instance metadata. EC2 instance IDs
    ///             use a 17-character format, for example: <code>i-1234567890abcdef0</code>.</p>
    public let instanceId: String?
    /// <p>
    ///                 Current status of the game server instance.
    ///             </p>
    ///             <ul>
    ///             <li>
    ///                     <p>
    ///                         <b>ACTIVE</b> -- The instance is viable for hosting
    ///                         game servers. </p>
    ///                 </li>
    ///             <li>
    ///                     <p>
    ///                     <b>DRAINING</b> -- The instance is not viable for
    ///                     hosting game servers. Existing game servers are in the process of ending, and
    ///                     new game servers are not started on this instance unless no other resources are
    ///                     available. When the instance is put in DRAINING, a new instance is started up to
    ///                     replace it. Once the instance has no UTILIZED game servers, it will be terminated
    ///                     in favor of the new instance.</p>
    ///                 </li>
    ///             <li>
    ///                     <p>
    ///                     <b>SPOT_TERMINATING</b> -- The instance is in the
    ///                     process of shutting down due to a Spot instance interruption. No new game
    ///                     servers are started on this instance.</p>
    ///                 </li>
    ///          </ul>
    public let instanceStatus: GameServerInstanceStatus?

    public init (
        gameServerGroupArn: String? = nil,
        gameServerGroupName: String? = nil,
        instanceId: String? = nil,
        instanceStatus: GameServerInstanceStatus? = nil
    )
    {
        self.gameServerGroupArn = gameServerGroupArn
        self.gameServerGroupName = gameServerGroupName
        self.instanceId = instanceId
        self.instanceStatus = instanceStatus
    }
}

public enum GameServerInstanceStatus {
    case active
    case draining
    case spotTerminating
    case sdkUnknown(String)
}

extension GameServerInstanceStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GameServerInstanceStatus] {
        return [
            .active,
            .draining,
            .spotTerminating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .draining: return "DRAINING"
        case .spotTerminating: return "SPOT_TERMINATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GameServerInstanceStatus(rawValue: rawValue) ?? GameServerInstanceStatus.sdkUnknown(rawValue)
    }
}

public enum GameServerProtectionPolicy {
    case fullProtection
    case noProtection
    case sdkUnknown(String)
}

extension GameServerProtectionPolicy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GameServerProtectionPolicy] {
        return [
            .fullProtection,
            .noProtection,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .fullProtection: return "FULL_PROTECTION"
        case .noProtection: return "NO_PROTECTION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GameServerProtectionPolicy(rawValue: rawValue) ?? GameServerProtectionPolicy.sdkUnknown(rawValue)
    }
}

public enum GameServerUtilizationStatus {
    case available
    case utilized
    case sdkUnknown(String)
}

extension GameServerUtilizationStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GameServerUtilizationStatus] {
        return [
            .available,
            .utilized,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .available: return "AVAILABLE"
        case .utilized: return "UTILIZED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GameServerUtilizationStatus(rawValue: rawValue) ?? GameServerUtilizationStatus.sdkUnknown(rawValue)
    }
}

extension GameSession: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case creatorId = "CreatorId"
        case currentPlayerSessionCount = "CurrentPlayerSessionCount"
        case dnsName = "DnsName"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionId = "GameSessionId"
        case ipAddress = "IpAddress"
        case location = "Location"
        case matchmakerData = "MatchmakerData"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case name = "Name"
        case playerSessionCreationPolicy = "PlayerSessionCreationPolicy"
        case port = "Port"
        case status = "Status"
        case statusReason = "StatusReason"
        case terminationTime = "TerminationTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let creatorId = creatorId {
            try encodeContainer.encode(creatorId, forKey: .creatorId)
        }
        if let currentPlayerSessionCount = currentPlayerSessionCount {
            try encodeContainer.encode(currentPlayerSessionCount, forKey: .currentPlayerSessionCount)
        }
        if let dnsName = dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let fleetArn = fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gamepropertylist0 in gameProperties {
                try gamePropertiesContainer.encode(gamepropertylist0)
            }
        }
        if let gameSessionData = gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let matchmakerData = matchmakerData {
            try encodeContainer.encode(matchmakerData, forKey: .matchmakerData)
        }
        if let maximumPlayerSessionCount = maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let playerSessionCreationPolicy = playerSessionCreationPolicy {
            try encodeContainer.encode(playerSessionCreationPolicy.rawValue, forKey: .playerSessionCreationPolicy)
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason.rawValue, forKey: .statusReason)
        }
        if let terminationTime = terminationTime {
            try encodeContainer.encode(terminationTime.timeIntervalSince1970, forKey: .terminationTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let terminationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .terminationTime)
        terminationTime = terminationTimeDecoded
        let currentPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .currentPlayerSessionCount)
        currentPlayerSessionCount = currentPlayerSessionCountDecoded
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameSessionStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(GameSessionStatusReason.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let ipAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let playerSessionCreationPolicyDecoded = try containerValues.decodeIfPresent(PlayerSessionCreationPolicy.self, forKey: .playerSessionCreationPolicy)
        playerSessionCreationPolicy = playerSessionCreationPolicyDecoded
        let creatorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creatorId)
        creatorId = creatorIdDecoded
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let matchmakerDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .matchmakerData)
        matchmakerData = matchmakerDataDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension GameSession: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GameSession(creationTime: \(String(describing: creationTime)), creatorId: \(String(describing: creatorId)), currentPlayerSessionCount: \(String(describing: currentPlayerSessionCount)), dnsName: \(String(describing: dnsName)), fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)), gameProperties: \(String(describing: gameProperties)), gameSessionData: \(String(describing: gameSessionData)), gameSessionId: \(String(describing: gameSessionId)), ipAddress: \(String(describing: ipAddress)), location: \(String(describing: location)), matchmakerData: \(String(describing: matchmakerData)), maximumPlayerSessionCount: \(String(describing: maximumPlayerSessionCount)), name: \(String(describing: name)), playerSessionCreationPolicy: \(String(describing: playerSessionCreationPolicy)), port: \(String(describing: port)), status: \(String(describing: status)), statusReason: \(String(describing: statusReason)), terminationTime: \(String(describing: terminationTime)))"}
}

/// <p>Properties describing a game session.</p>
///         <p>A game session in ACTIVE status can host players. When a game session ends, its
///             status is set to <code>TERMINATED</code>. </p>
///         <p>Once the session ends, the game session object is retained for 30 days. This means
///             you can reuse idempotency token values after this time. Game session logs are retained
///             for 14 days.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>CreateGameSession</a> |
///                     <a>DescribeGameSessions</a> |
///                     <a>DescribeGameSessionDetails</a> |
///                     <a>SearchGameSessions</a> |
///                     <a>UpdateGameSession</a> |
///                     <a>GetGameSessionLogUrl</a> |
///                     <a>StartGameSessionPlacement</a> |
///                     <a>DescribeGameSessionPlacement</a> |
///                     <a>StopGameSessionPlacement</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a>
///          </p>
public struct GameSession: Equatable {
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>A unique identifier for a player. This ID is used to enforce a resource protection policy (if one
    ///             exists), that limits the number of game sessions a player can create.</p>
    public let creatorId: String?
    /// <p>Number of players currently in the game session.</p>
    public let currentPlayerSessionCount: Int?
    /// <p>The DNS identifier assigned to the instance that is running the game session. Values have
    ///             the following format:</p>
    ///          <ul>
    ///             <li>
    ///                <p>TLS-enabled fleets: <code><unique identifier>.<region identifier>.amazongamelift.com</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Non-TLS-enabled fleets: <code>ec2-<unique identifier>.compute.amazonaws.com</code>. (See
    ///             <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses">Amazon EC2 Instance IP Addressing</a>.)</p>
    ///             </li>
    ///          </ul>
    ///             <p>When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.</p>
    public let dnsName: String?
    /// <p>
    ///             The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) associated with the GameLift fleet that this game session is running on.
    ///         </p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet that the game session is running on.</p>
    public let fleetId: String?
    /// <p>A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session. You can search for active game sessions based on this custom data
    ///             with <a>SearchGameSessions</a>.</p>
    public let gameProperties: [GameProperty]?
    /// <p>A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session.</p>
    public let gameSessionData: String?
    /// <p>A unique identifier for the game session. A game session ARN has the following format:
    ///     <code>arn:aws:gamelift:<region>::gamesession/<fleet ID>/<custom ID string or idempotency token></code>.</p>
    public let gameSessionId: String?
    /// <p>The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.</p>
    public let ipAddress: String?
    /// <p>The fleet location where the game session is running. This value might specify the
    ///             fleet's home Region or a remote location. Location is expressed as an AWS Region code
    ///             such as <code>us-west-2</code>. </p>
    public let location: String?
    /// <p>Information about the matchmaking process that was used to create the game session.
    ///             It is in JSON syntax, formatted as a string. In addition the matchmaking configuration
    ///             used, it contains data on all players assigned to the match, including player attributes
    ///             and team assignments. For more details on matchmaker data, see <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data">Match
    ///                 Data</a>. Matchmaker data is useful when requesting match backfills, and is
    ///             updated whenever new players are added during a successful backfill (see <a>StartMatchBackfill</a>). </p>
    public let matchmakerData: String?
    /// <p>The maximum number of players that can be connected simultaneously to the game session.</p>
    public let maximumPlayerSessionCount: Int?
    /// <p>A descriptive label that is associated with a game session. Session names do not need to be unique.</p>
    public let name: String?
    /// <p>Indicates whether or not the game session is accepting new players.</p>
    public let playerSessionCreationPolicy: PlayerSessionCreationPolicy?
    /// <p>The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number.</p>
    public let port: Int?
    /// <p>Current status of the game session. A game session must have an <code>ACTIVE</code>
    ///             status to have player sessions.</p>
    public let status: GameSessionStatus?
    /// <p>Provides additional information about game session status. <code>INTERRUPTED</code>
    ///             indicates that the game session was hosted on a spot instance that was reclaimed,
    ///             causing the active game session to be terminated.</p>
    public let statusReason: GameSessionStatusReason?
    /// <p>A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let terminationTime: Date?

    public init (
        creationTime: Date? = nil,
        creatorId: String? = nil,
        currentPlayerSessionCount: Int? = nil,
        dnsName: String? = nil,
        fleetArn: String? = nil,
        fleetId: String? = nil,
        gameProperties: [GameProperty]? = nil,
        gameSessionData: String? = nil,
        gameSessionId: String? = nil,
        ipAddress: String? = nil,
        location: String? = nil,
        matchmakerData: String? = nil,
        maximumPlayerSessionCount: Int? = nil,
        name: String? = nil,
        playerSessionCreationPolicy: PlayerSessionCreationPolicy? = nil,
        port: Int? = nil,
        status: GameSessionStatus? = nil,
        statusReason: GameSessionStatusReason? = nil,
        terminationTime: Date? = nil
    )
    {
        self.creationTime = creationTime
        self.creatorId = creatorId
        self.currentPlayerSessionCount = currentPlayerSessionCount
        self.dnsName = dnsName
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionId = gameSessionId
        self.ipAddress = ipAddress
        self.location = location
        self.matchmakerData = matchmakerData
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
        self.name = name
        self.playerSessionCreationPolicy = playerSessionCreationPolicy
        self.port = port
        self.status = status
        self.statusReason = statusReason
        self.terminationTime = terminationTime
    }
}

extension GameSessionConnectionInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dnsName = "DnsName"
        case gameSessionArn = "GameSessionArn"
        case ipAddress = "IpAddress"
        case matchedPlayerSessions = "MatchedPlayerSessions"
        case port = "Port"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsName = dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let gameSessionArn = gameSessionArn {
            try encodeContainer.encode(gameSessionArn, forKey: .gameSessionArn)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let matchedPlayerSessions = matchedPlayerSessions {
            var matchedPlayerSessionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .matchedPlayerSessions)
            for matchedplayersessionlist0 in matchedPlayerSessions {
                try matchedPlayerSessionsContainer.encode(matchedplayersessionlist0)
            }
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionArn)
        gameSessionArn = gameSessionArnDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let matchedPlayerSessionsContainer = try containerValues.decodeIfPresent([MatchedPlayerSession?].self, forKey: .matchedPlayerSessions)
        var matchedPlayerSessionsDecoded0:[MatchedPlayerSession]? = nil
        if let matchedPlayerSessionsContainer = matchedPlayerSessionsContainer {
            matchedPlayerSessionsDecoded0 = [MatchedPlayerSession]()
            for structure0 in matchedPlayerSessionsContainer {
                if let structure0 = structure0 {
                    matchedPlayerSessionsDecoded0?.append(structure0)
                }
            }
        }
        matchedPlayerSessions = matchedPlayerSessionsDecoded0
    }
}

extension GameSessionConnectionInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GameSessionConnectionInfo(dnsName: \(String(describing: dnsName)), gameSessionArn: \(String(describing: gameSessionArn)), ipAddress: \(String(describing: ipAddress)), matchedPlayerSessions: \(String(describing: matchedPlayerSessions)), port: \(String(describing: port)))"}
}

/// <p>Connection information for a new game session that is created in response to a <a>StartMatchmaking</a> request. Once a match is made, the FlexMatch engine
///             creates a new game session for it. This information, including the game session endpoint
///             and player sessions for each player in the original matchmaking request, is added to the
///             <a>MatchmakingTicket</a>, which can be retrieved by calling <a>DescribeMatchmaking</a>.</p>
public struct GameSessionConnectionInfo: Equatable {
    /// <p>The DNS identifier assigned to the instance that is running the game session. Values have
    ///             the following format:</p>
    ///          <ul>
    ///             <li>
    ///                <p>TLS-enabled fleets: <code><unique identifier>.<region identifier>.amazongamelift.com</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Non-TLS-enabled fleets: <code>ec2-<unique identifier>.compute.amazonaws.com</code>. (See
    ///             <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses">Amazon EC2 Instance IP Addressing</a>.)</p>
    ///             </li>
    ///          </ul>
    ///             <p>When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.</p>
    public let dnsName: String?
    /// <p>A unique identifier for the game session. Use the game session ID.</p>
    public let gameSessionArn: String?
    /// <p>The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.</p>
    public let ipAddress: String?
    /// <p>A collection of player session IDs, one for each player ID that was included in the
    ///             original matchmaking request. </p>
    public let matchedPlayerSessions: [MatchedPlayerSession]?
    /// <p>The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number.</p>
    public let port: Int?

    public init (
        dnsName: String? = nil,
        gameSessionArn: String? = nil,
        ipAddress: String? = nil,
        matchedPlayerSessions: [MatchedPlayerSession]? = nil,
        port: Int? = nil
    )
    {
        self.dnsName = dnsName
        self.gameSessionArn = gameSessionArn
        self.ipAddress = ipAddress
        self.matchedPlayerSessions = matchedPlayerSessions
        self.port = port
    }
}

extension GameSessionDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameSession = "GameSession"
        case protectionPolicy = "ProtectionPolicy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSession = gameSession {
            try encodeContainer.encode(gameSession, forKey: .gameSession)
        }
        if let protectionPolicy = protectionPolicy {
            try encodeContainer.encode(protectionPolicy.rawValue, forKey: .protectionPolicy)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionDecoded = try containerValues.decodeIfPresent(GameSession.self, forKey: .gameSession)
        gameSession = gameSessionDecoded
        let protectionPolicyDecoded = try containerValues.decodeIfPresent(ProtectionPolicy.self, forKey: .protectionPolicy)
        protectionPolicy = protectionPolicyDecoded
    }
}

extension GameSessionDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GameSessionDetail(gameSession: \(String(describing: gameSession)), protectionPolicy: \(String(describing: protectionPolicy)))"}
}

/// <p>A game session's properties plus the protection policy currently in
///             force.</p>
public struct GameSessionDetail: Equatable {
    /// <p>Object that describes a game session.</p>
    public let gameSession: GameSession?
    /// <p>Current status of protection for the game session.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>NoProtection</b> -- The game session can be
    ///                     terminated during a scale-down event.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>FullProtection</b> -- If the game session is in an
    ///                     <code>ACTIVE</code> status, it cannot be terminated during a scale-down
    ///                     event.</p>
    ///             </li>
    ///          </ul>
    public let protectionPolicy: ProtectionPolicy?

    public init (
        gameSession: GameSession? = nil,
        protectionPolicy: ProtectionPolicy? = nil
    )
    {
        self.gameSession = gameSession
        self.protectionPolicy = protectionPolicy
    }
}

extension GameSessionFullException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GameSessionFullException(message: \(String(describing: message)))"}
}

extension GameSessionFullException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GameSessionFullExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The game instance is currently full and cannot allow the requested player(s) to
///             join. Clients can retry such requests immediately or after a waiting period.</p>
public struct GameSessionFullException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct GameSessionFullExceptionBody: Equatable {
    public let message: String?
}

extension GameSessionFullExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GameSessionPlacement: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dnsName = "DnsName"
        case endTime = "EndTime"
        case gameProperties = "GameProperties"
        case gameSessionArn = "GameSessionArn"
        case gameSessionData = "GameSessionData"
        case gameSessionId = "GameSessionId"
        case gameSessionName = "GameSessionName"
        case gameSessionQueueName = "GameSessionQueueName"
        case gameSessionRegion = "GameSessionRegion"
        case ipAddress = "IpAddress"
        case matchmakerData = "MatchmakerData"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case placedPlayerSessions = "PlacedPlayerSessions"
        case placementId = "PlacementId"
        case playerLatencies = "PlayerLatencies"
        case port = "Port"
        case startTime = "StartTime"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsName = dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gamepropertylist0 in gameProperties {
                try gamePropertiesContainer.encode(gamepropertylist0)
            }
        }
        if let gameSessionArn = gameSessionArn {
            try encodeContainer.encode(gameSessionArn, forKey: .gameSessionArn)
        }
        if let gameSessionData = gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let gameSessionName = gameSessionName {
            try encodeContainer.encode(gameSessionName, forKey: .gameSessionName)
        }
        if let gameSessionQueueName = gameSessionQueueName {
            try encodeContainer.encode(gameSessionQueueName, forKey: .gameSessionQueueName)
        }
        if let gameSessionRegion = gameSessionRegion {
            try encodeContainer.encode(gameSessionRegion, forKey: .gameSessionRegion)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let matchmakerData = matchmakerData {
            try encodeContainer.encode(matchmakerData, forKey: .matchmakerData)
        }
        if let maximumPlayerSessionCount = maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
        if let placedPlayerSessions = placedPlayerSessions {
            var placedPlayerSessionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placedPlayerSessions)
            for placedplayersessionlist0 in placedPlayerSessions {
                try placedPlayerSessionsContainer.encode(placedplayersessionlist0)
            }
        }
        if let placementId = placementId {
            try encodeContainer.encode(placementId, forKey: .placementId)
        }
        if let playerLatencies = playerLatencies {
            var playerLatenciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencies)
            for playerlatencylist0 in playerLatencies {
                try playerLatenciesContainer.encode(playerlatencylist0)
            }
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let placementIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .placementId)
        placementId = placementIdDecoded
        let gameSessionQueueNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionQueueName)
        gameSessionQueueName = gameSessionQueueNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameSessionPlacementState.self, forKey: .status)
        status = statusDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let gameSessionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionName)
        gameSessionName = gameSessionNameDecoded
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let gameSessionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionArn)
        gameSessionArn = gameSessionArnDecoded
        let gameSessionRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionRegion)
        gameSessionRegion = gameSessionRegionDecoded
        let playerLatenciesContainer = try containerValues.decodeIfPresent([PlayerLatency?].self, forKey: .playerLatencies)
        var playerLatenciesDecoded0:[PlayerLatency]? = nil
        if let playerLatenciesContainer = playerLatenciesContainer {
            playerLatenciesDecoded0 = [PlayerLatency]()
            for structure0 in playerLatenciesContainer {
                if let structure0 = structure0 {
                    playerLatenciesDecoded0?.append(structure0)
                }
            }
        }
        playerLatencies = playerLatenciesDecoded0
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let placedPlayerSessionsContainer = try containerValues.decodeIfPresent([PlacedPlayerSession?].self, forKey: .placedPlayerSessions)
        var placedPlayerSessionsDecoded0:[PlacedPlayerSession]? = nil
        if let placedPlayerSessionsContainer = placedPlayerSessionsContainer {
            placedPlayerSessionsDecoded0 = [PlacedPlayerSession]()
            for structure0 in placedPlayerSessionsContainer {
                if let structure0 = structure0 {
                    placedPlayerSessionsDecoded0?.append(structure0)
                }
            }
        }
        placedPlayerSessions = placedPlayerSessionsDecoded0
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let matchmakerDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .matchmakerData)
        matchmakerData = matchmakerDataDecoded
    }
}

extension GameSessionPlacement: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GameSessionPlacement(dnsName: \(String(describing: dnsName)), endTime: \(String(describing: endTime)), gameProperties: \(String(describing: gameProperties)), gameSessionArn: \(String(describing: gameSessionArn)), gameSessionData: \(String(describing: gameSessionData)), gameSessionId: \(String(describing: gameSessionId)), gameSessionName: \(String(describing: gameSessionName)), gameSessionQueueName: \(String(describing: gameSessionQueueName)), gameSessionRegion: \(String(describing: gameSessionRegion)), ipAddress: \(String(describing: ipAddress)), matchmakerData: \(String(describing: matchmakerData)), maximumPlayerSessionCount: \(String(describing: maximumPlayerSessionCount)), placedPlayerSessions: \(String(describing: placedPlayerSessions)), placementId: \(String(describing: placementId)), playerLatencies: \(String(describing: playerLatencies)), port: \(String(describing: port)), startTime: \(String(describing: startTime)), status: \(String(describing: status)))"}
}

/// <p>Object that describes a <a>StartGameSessionPlacement</a> request. This
///         object includes the full details of the original request plus the current status and
///         start/end time stamps.</p>
///          <p>Game session placement-related operations include:</p>
///          <ul>
///             <li>
///                <p>
///                   <a>StartGameSessionPlacement</a>
///                </p>
///             </li>
///             <li>
///                <p>
///                   <a>DescribeGameSessionPlacement</a>
///                </p>
///             </li>
///             <li>
///                <p>
///                   <a>StopGameSessionPlacement</a>
///                </p>
///             </li>
///          </ul>
public struct GameSessionPlacement: Equatable {
    /// <p>The DNS identifier assigned to the instance that is running the game session. Values have
    ///             the following format:</p>
    ///          <ul>
    ///             <li>
    ///                <p>TLS-enabled fleets: <code><unique identifier>.<region identifier>.amazongamelift.com</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Non-TLS-enabled fleets: <code>ec2-<unique identifier>.compute.amazonaws.com</code>. (See
    ///             <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses">Amazon EC2 Instance IP Addressing</a>.)</p>
    ///             </li>
    ///          </ul>
    ///             <p>When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.</p>
    public let dnsName: String?
    /// <p>Time stamp indicating when this request was completed, canceled, or timed
    ///         out.</p>
    public let endTime: Date?
    /// <p>A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).</p>
    public let gameProperties: [GameProperty]?
    /// <p>Identifier for the game session created by this placement request. This value is
    ///         set once the new game session is placed (placement status is <code>FULFILLED</code>).
    ///         This identifier is unique across all Regions. You can use this value as a
    ///         <code>GameSessionId</code> value as needed.</p>
    public let gameSessionArn: String?
    /// <p>A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).</p>
    public let gameSessionData: String?
    /// <p>A unique identifier for the game session. This value is set once the new game session is placed (placement status is
    ///         <code>FULFILLED</code>).</p>
    public let gameSessionId: String?
    /// <p>A descriptive label that is associated with a game session. Session names do not need to be unique.</p>
    public let gameSessionName: String?
    /// <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region.</p>
    public let gameSessionQueueName: String?
    /// <p>Name of the Region where the game session created by this placement request is
    ///         running. This value is set once the new game session is placed (placement status is
    ///         <code>FULFILLED</code>).</p>
    public let gameSessionRegion: String?
    /// <p>The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is
    ///         <code>FULFILLED</code>). </p>
    public let ipAddress: String?
    /// <p>Information on the matchmaking process for this game. Data is in JSON syntax,
    ///         formatted as a string. It identifies the matchmaking configuration used to create the
    ///         match, and contains data on all players assigned to the match, including player
    ///         attributes and team assignments. For more details on matchmaker data, see <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data">Match
    ///             Data</a>.</p>
    public let matchmakerData: String?
    /// <p>The maximum number of players that can be connected simultaneously to the game session.</p>
    public let maximumPlayerSessionCount: Int?
    /// <p>A collection of information on player sessions created in response to the game
    ///         session placement request. These player sessions are created only once a new game
    ///         session is successfully placed (placement status is <code>FULFILLED</code>). This
    ///         information includes the player ID (as provided in the placement request) and the
    ///         corresponding player session ID. Retrieve full player sessions by calling <a>DescribePlayerSessions</a> with the player session ID.</p>
    public let placedPlayerSessions: [PlacedPlayerSession]?
    /// <p>A unique identifier for a game session placement.</p>
    public let placementId: String?
    /// <p>A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to AWS Regions.</p>
    public let playerLatencies: [PlayerLatency]?
    /// <p>The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is
    ///         <code>FULFILLED</code>).</p>
    public let port: Int?
    /// <p>Time stamp indicating when this request was placed in the queue. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let startTime: Date?
    /// <p>Current status of the game session placement request.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>PENDING</b> -- The placement request is currently
    ///                 in the queue waiting to be processed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>FULFILLED</b> -- A new game session and player
    ///                 sessions (if requested) have been successfully created. Values for
    ///                 <i>GameSessionArn</i> and
    ///                 <i>GameSessionRegion</i> are available. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>CANCELLED</b> -- The placement request was canceled
    ///                 with a call to <a>StopGameSessionPlacement</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>TIMED_OUT</b> -- A new game session was not
    ///                 successfully created before the time limit expired. You can resubmit the
    ///                 placement request as needed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>FAILED</b> -- GameLift is not able to complete the
    ///             process of placing the game session. Common reasons are the
    ///             game session terminated before the placement process was completed, or an unexpected
    ///             internal error.</p>
    ///             </li>
    ///          </ul>
    public let status: GameSessionPlacementState?

    public init (
        dnsName: String? = nil,
        endTime: Date? = nil,
        gameProperties: [GameProperty]? = nil,
        gameSessionArn: String? = nil,
        gameSessionData: String? = nil,
        gameSessionId: String? = nil,
        gameSessionName: String? = nil,
        gameSessionQueueName: String? = nil,
        gameSessionRegion: String? = nil,
        ipAddress: String? = nil,
        matchmakerData: String? = nil,
        maximumPlayerSessionCount: Int? = nil,
        placedPlayerSessions: [PlacedPlayerSession]? = nil,
        placementId: String? = nil,
        playerLatencies: [PlayerLatency]? = nil,
        port: Int? = nil,
        startTime: Date? = nil,
        status: GameSessionPlacementState? = nil
    )
    {
        self.dnsName = dnsName
        self.endTime = endTime
        self.gameProperties = gameProperties
        self.gameSessionArn = gameSessionArn
        self.gameSessionData = gameSessionData
        self.gameSessionId = gameSessionId
        self.gameSessionName = gameSessionName
        self.gameSessionQueueName = gameSessionQueueName
        self.gameSessionRegion = gameSessionRegion
        self.ipAddress = ipAddress
        self.matchmakerData = matchmakerData
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
        self.placedPlayerSessions = placedPlayerSessions
        self.placementId = placementId
        self.playerLatencies = playerLatencies
        self.port = port
        self.startTime = startTime
        self.status = status
    }
}

public enum GameSessionPlacementState {
    case cancelled
    case failed
    case fulfilled
    case pending
    case timedOut
    case sdkUnknown(String)
}

extension GameSessionPlacementState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GameSessionPlacementState] {
        return [
            .cancelled,
            .failed,
            .fulfilled,
            .pending,
            .timedOut,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cancelled: return "CANCELLED"
        case .failed: return "FAILED"
        case .fulfilled: return "FULFILLED"
        case .pending: return "PENDING"
        case .timedOut: return "TIMED_OUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GameSessionPlacementState(rawValue: rawValue) ?? GameSessionPlacementState.sdkUnknown(rawValue)
    }
}

extension GameSessionQueue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customEventData = "CustomEventData"
        case destinations = "Destinations"
        case filterConfiguration = "FilterConfiguration"
        case gameSessionQueueArn = "GameSessionQueueArn"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case playerLatencyPolicies = "PlayerLatencyPolicies"
        case priorityConfiguration = "PriorityConfiguration"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customEventData = customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for gamesessionqueuedestinationlist0 in destinations {
                try destinationsContainer.encode(gamesessionqueuedestinationlist0)
            }
        }
        if let filterConfiguration = filterConfiguration {
            try encodeContainer.encode(filterConfiguration, forKey: .filterConfiguration)
        }
        if let gameSessionQueueArn = gameSessionQueueArn {
            try encodeContainer.encode(gameSessionQueueArn, forKey: .gameSessionQueueArn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let playerLatencyPolicies = playerLatencyPolicies {
            var playerLatencyPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencyPolicies)
            for playerlatencypolicylist0 in playerLatencyPolicies {
                try playerLatencyPoliciesContainer.encode(playerlatencypolicylist0)
            }
        }
        if let priorityConfiguration = priorityConfiguration {
            try encodeContainer.encode(priorityConfiguration, forKey: .priorityConfiguration)
        }
        if let timeoutInSeconds = timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let gameSessionQueueArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionQueueArn)
        gameSessionQueueArn = gameSessionQueueArnDecoded
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let playerLatencyPoliciesContainer = try containerValues.decodeIfPresent([PlayerLatencyPolicy?].self, forKey: .playerLatencyPolicies)
        var playerLatencyPoliciesDecoded0:[PlayerLatencyPolicy]? = nil
        if let playerLatencyPoliciesContainer = playerLatencyPoliciesContainer {
            playerLatencyPoliciesDecoded0 = [PlayerLatencyPolicy]()
            for structure0 in playerLatencyPoliciesContainer {
                if let structure0 = structure0 {
                    playerLatencyPoliciesDecoded0?.append(structure0)
                }
            }
        }
        playerLatencyPolicies = playerLatencyPoliciesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([GameSessionQueueDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[GameSessionQueueDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [GameSessionQueueDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let filterConfigurationDecoded = try containerValues.decodeIfPresent(FilterConfiguration.self, forKey: .filterConfiguration)
        filterConfiguration = filterConfigurationDecoded
        let priorityConfigurationDecoded = try containerValues.decodeIfPresent(PriorityConfiguration.self, forKey: .priorityConfiguration)
        priorityConfiguration = priorityConfigurationDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
    }
}

extension GameSessionQueue: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GameSessionQueue(customEventData: \(String(describing: customEventData)), destinations: \(String(describing: destinations)), filterConfiguration: \(String(describing: filterConfiguration)), gameSessionQueueArn: \(String(describing: gameSessionQueueArn)), name: \(String(describing: name)), notificationTarget: \(String(describing: notificationTarget)), playerLatencyPolicies: \(String(describing: playerLatencyPolicies)), priorityConfiguration: \(String(describing: priorityConfiguration)), timeoutInSeconds: \(String(describing: timeoutInSeconds)))"}
}

/// <p>Configuration for a game session placement mechanism that processes requests for new
///             game sessions. A queue can be used on its own or as part of a matchmaking
///             solution.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///         <p>
///             <a>CreateGameSessionQueue</a> | <a>DescribeGameSessionQueues</a> | <a>UpdateGameSessionQueue</a>
///          </p>
public struct GameSessionQueue: Equatable {
    /// <p>
    ///             Information that is added to all events that are related to this game session queue.
    ///         </p>
    public let customEventData: String?
    /// <p>A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.
    ///     Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.</p>
    public let destinations: [GameSessionQueueDestination]?
    /// <p>A list of locations where a queue is allowed to place new game sessions. Locations
    ///             are specified in the form of AWS Region codes, such as <code>us-west-2</code>. If this parameter is
    ///             not set, game sessions can be placed in any queue location. </p>
    public let filterConfiguration: FilterConfiguration?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::gamesessionqueue/<queue name></code>.   In a GameLift game session queue ARN, the resource ID matches the
    ///                 <i>Name</i> value.</p>
    public let gameSessionQueueArn: String?
    /// <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region.</p>
    public let name: String?
    /// <p>An SNS topic ARN that is set up to receive game session placement notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html">
    ///             Setting up notifications for game session placement</a>.</p>
    public let notificationTarget: String?
    /// <p>A set of policies that act as a sliding cap on player latency. FleetIQ works to
    ///             deliver low latency for most players in a game session. These policies ensure that no
    ///             individual player can be placed into a game with unreasonably high latency. Use multiple
    ///             policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their
    ///             maximum allowed latency, starting with the lowest value. </p>
    public let playerLatencyPolicies: [PlayerLatencyPolicy]?
    /// <p>Custom settings to use when prioritizing destinations and locations for game session placements. This
    ///             configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly
    ///             named will be automatically applied at the end of the prioritization process. </p>
    public let priorityConfiguration: PriorityConfiguration?
    /// <p>The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a <code>TIMED_OUT</code> status.</p>
    public let timeoutInSeconds: Int?

    public init (
        customEventData: String? = nil,
        destinations: [GameSessionQueueDestination]? = nil,
        filterConfiguration: FilterConfiguration? = nil,
        gameSessionQueueArn: String? = nil,
        name: String? = nil,
        notificationTarget: String? = nil,
        playerLatencyPolicies: [PlayerLatencyPolicy]? = nil,
        priorityConfiguration: PriorityConfiguration? = nil,
        timeoutInSeconds: Int? = nil
    )
    {
        self.customEventData = customEventData
        self.destinations = destinations
        self.filterConfiguration = filterConfiguration
        self.gameSessionQueueArn = gameSessionQueueArn
        self.name = name
        self.notificationTarget = notificationTarget
        self.playerLatencyPolicies = playerLatencyPolicies
        self.priorityConfiguration = priorityConfiguration
        self.timeoutInSeconds = timeoutInSeconds
    }
}

extension GameSessionQueueDestination: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationArn = "DestinationArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationArn = destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
    }
}

extension GameSessionQueueDestination: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GameSessionQueueDestination(destinationArn: \(String(describing: destinationArn)))"}
}

/// <p>A fleet or alias designated in a game session queue. Queues fulfill requests for new
///             game sessions by placing a new game session on any of the queue's destinations. </p>
///         <p>Destinations are part of a <a>GameSessionQueue</a>.</p>
public struct GameSessionQueueDestination: Equatable {
    /// <p>The Amazon Resource Name (ARN) that is assigned to fleet or fleet alias. ARNs, which
    ///             include a fleet ID or alias ID and a Region name, provide a unique identifier across all
    ///             Regions. </p>
    public let destinationArn: String?

    public init (
        destinationArn: String? = nil
    )
    {
        self.destinationArn = destinationArn
    }
}

public enum GameSessionStatus {
    case activating
    case active
    case error
    case terminated
    case terminating
    case sdkUnknown(String)
}

extension GameSessionStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GameSessionStatus] {
        return [
            .activating,
            .active,
            .error,
            .terminated,
            .terminating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .activating: return "ACTIVATING"
        case .active: return "ACTIVE"
        case .error: return "ERROR"
        case .terminated: return "TERMINATED"
        case .terminating: return "TERMINATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GameSessionStatus(rawValue: rawValue) ?? GameSessionStatus.sdkUnknown(rawValue)
    }
}

public enum GameSessionStatusReason {
    case interrupted
    case sdkUnknown(String)
}

extension GameSessionStatusReason : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GameSessionStatusReason] {
        return [
            .interrupted,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .interrupted: return "INTERRUPTED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GameSessionStatusReason(rawValue: rawValue) ?? GameSessionStatusReason.sdkUnknown(rawValue)
    }
}

public struct GetGameSessionLogUrlInputBodyMiddleware: Middleware {
    public let id: String = "GetGameSessionLogUrlInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetGameSessionLogUrlInput>,
                  next: H) -> Swift.Result<OperationOutput<GetGameSessionLogUrlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetGameSessionLogUrlInput>
    public typealias MOutput = OperationOutput<GetGameSessionLogUrlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetGameSessionLogUrlOutputError>
}

extension GetGameSessionLogUrlInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetGameSessionLogUrlInput(gameSessionId: \(String(describing: gameSessionId)))"}
}

extension GetGameSessionLogUrlInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameSessionId = "GameSessionId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
    }
}

public struct GetGameSessionLogUrlInputHeadersMiddleware: Middleware {
    public let id: String = "GetGameSessionLogUrlInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetGameSessionLogUrlInput>,
                  next: H) -> Swift.Result<OperationOutput<GetGameSessionLogUrlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetGameSessionLogUrlInput>
    public typealias MOutput = OperationOutput<GetGameSessionLogUrlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetGameSessionLogUrlOutputError>
}

public struct GetGameSessionLogUrlInputQueryItemMiddleware: Middleware {
    public let id: String = "GetGameSessionLogUrlInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetGameSessionLogUrlInput>,
                  next: H) -> Swift.Result<OperationOutput<GetGameSessionLogUrlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetGameSessionLogUrlInput>
    public typealias MOutput = OperationOutput<GetGameSessionLogUrlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetGameSessionLogUrlOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct GetGameSessionLogUrlInput: Equatable {
    /// <p>A unique identifier for the game session to get logs for. </p>
    public let gameSessionId: String?

    public init (
        gameSessionId: String? = nil
    )
    {
        self.gameSessionId = gameSessionId
    }
}

struct GetGameSessionLogUrlInputBody: Equatable {
    public let gameSessionId: String?
}

extension GetGameSessionLogUrlInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessionId = "GameSessionId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
    }
}

extension GetGameSessionLogUrlOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetGameSessionLogUrlOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetGameSessionLogUrlOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetGameSessionLogUrlOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetGameSessionLogUrlOutputResponse(preSignedUrl: \(String(describing: preSignedUrl)))"}
}

extension GetGameSessionLogUrlOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetGameSessionLogUrlOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.preSignedUrl = output.preSignedUrl
        } else {
            self.preSignedUrl = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct GetGameSessionLogUrlOutputResponse: Equatable {
    /// <p>Location of the requested game session logs, available for download. This URL is
    ///             valid for 15 minutes, after which S3 will reject any download request using this URL.
    ///             You can request a new URL any time within the 14-day period that the logs are
    ///             retained.</p>
    public let preSignedUrl: String?

    public init (
        preSignedUrl: String? = nil
    )
    {
        self.preSignedUrl = preSignedUrl
    }
}

struct GetGameSessionLogUrlOutputResponseBody: Equatable {
    public let preSignedUrl: String?
}

extension GetGameSessionLogUrlOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case preSignedUrl = "PreSignedUrl"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let preSignedUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preSignedUrl)
        preSignedUrl = preSignedUrlDecoded
    }
}

public struct GetInstanceAccessInputBodyMiddleware: Middleware {
    public let id: String = "GetInstanceAccessInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetInstanceAccessInput>,
                  next: H) -> Swift.Result<OperationOutput<GetInstanceAccessOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetInstanceAccessInput>
    public typealias MOutput = OperationOutput<GetInstanceAccessOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetInstanceAccessOutputError>
}

extension GetInstanceAccessInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetInstanceAccessInput(fleetId: \(String(describing: fleetId)), instanceId: \(String(describing: instanceId)))"}
}

extension GetInstanceAccessInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case instanceId = "InstanceId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
    }
}

public struct GetInstanceAccessInputHeadersMiddleware: Middleware {
    public let id: String = "GetInstanceAccessInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetInstanceAccessInput>,
                  next: H) -> Swift.Result<OperationOutput<GetInstanceAccessOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetInstanceAccessInput>
    public typealias MOutput = OperationOutput<GetInstanceAccessOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetInstanceAccessOutputError>
}

public struct GetInstanceAccessInputQueryItemMiddleware: Middleware {
    public let id: String = "GetInstanceAccessInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetInstanceAccessInput>,
                  next: H) -> Swift.Result<OperationOutput<GetInstanceAccessOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetInstanceAccessInput>
    public typealias MOutput = OperationOutput<GetInstanceAccessOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetInstanceAccessOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct GetInstanceAccessInput: Equatable {
    /// <p>A unique identifier for the fleet that contains the instance you want access to. You can use either the fleet ID
    ///             or ARN value. The fleet can be in any of the following statuses:
    ///             <code>ACTIVATING</code>, <code>ACTIVE</code>, or <code>ERROR</code>. Fleets with an
    ///                 <code>ERROR</code> status may be accessible for a short time before they are
    ///             deleted.</p>
    public let fleetId: String?
    /// <p>A unique identifier for the instance you want to get access to. You can access an instance in any
    ///             status.</p>
    public let instanceId: String?

    public init (
        fleetId: String? = nil,
        instanceId: String? = nil
    )
    {
        self.fleetId = fleetId
        self.instanceId = instanceId
    }
}

struct GetInstanceAccessInputBody: Equatable {
    public let fleetId: String?
    public let instanceId: String?
}

extension GetInstanceAccessInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case instanceId = "InstanceId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
    }
}

extension GetInstanceAccessOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstanceAccessOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetInstanceAccessOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceAccessOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetInstanceAccessOutputResponse(instanceAccess: \(String(describing: instanceAccess)))"}
}

extension GetInstanceAccessOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetInstanceAccessOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.instanceAccess = output.instanceAccess
        } else {
            self.instanceAccess = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct GetInstanceAccessOutputResponse: Equatable {
    /// <p>The connection information for a fleet instance, including IP
    ///             address and access credentials.</p>
    public let instanceAccess: InstanceAccess?

    public init (
        instanceAccess: InstanceAccess? = nil
    )
    {
        self.instanceAccess = instanceAccess
    }
}

struct GetInstanceAccessOutputResponseBody: Equatable {
    public let instanceAccess: InstanceAccess?
}

extension GetInstanceAccessOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceAccess = "InstanceAccess"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceAccessDecoded = try containerValues.decodeIfPresent(InstanceAccess.self, forKey: .instanceAccess)
        instanceAccess = instanceAccessDecoded
    }
}

extension IdempotentParameterMismatchException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IdempotentParameterMismatchException(message: \(String(describing: message)))"}
}

extension IdempotentParameterMismatchException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: IdempotentParameterMismatchExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A game session with this custom ID string already exists in this fleet. Resolve
///             this conflict before retrying this request.</p>
public struct IdempotentParameterMismatchException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct IdempotentParameterMismatchExceptionBody: Equatable {
    public let message: String?
}

extension IdempotentParameterMismatchExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Instance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case dnsName = "DnsName"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case instanceId = "InstanceId"
        case ipAddress = "IpAddress"
        case location = "Location"
        case operatingSystem = "OperatingSystem"
        case status = "Status"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dnsName = dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let fleetArn = fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let operatingSystem = operatingSystem {
            try encodeContainer.encode(operatingSystem.rawValue, forKey: .operatingSystem)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let typeDecoded = try containerValues.decodeIfPresent(EC2InstanceType.self, forKey: .type)
        type = typeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InstanceStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension Instance: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Instance(creationTime: \(String(describing: creationTime)), dnsName: \(String(describing: dnsName)), fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)), instanceId: \(String(describing: instanceId)), ipAddress: \(String(describing: ipAddress)), location: \(String(describing: location)), operatingSystem: \(String(describing: operatingSystem)), status: \(String(describing: status)), type: \(String(describing: type)))"}
}

/// <p>Represents an EC2 instance of virtual computing resources that hosts one or more game
///             servers. In GameLift, a fleet can contain zero or more instances.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///         <p>
///             <a>DescribeInstances</a>
///          </p>
public struct Instance: Equatable {
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>The DNS identifier assigned to the instance that is running the game session. Values have
    ///             the following format:</p>
    ///          <ul>
    ///             <li>
    ///                <p>TLS-enabled fleets: <code><unique identifier>.<region identifier>.amazongamelift.com</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Non-TLS-enabled fleets: <code>ec2-<unique identifier>.compute.amazonaws.com</code>. (See
    ///             <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses">Amazon EC2 Instance IP Addressing</a>.)</p>
    ///             </li>
    ///          </ul>
    ///             <p>When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.</p>
    public let dnsName: String?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>.</p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet that the instance is in.</p>
    public let fleetId: String?
    /// <p>A unique identifier for the instance.</p>
    public let instanceId: String?
    /// <p>IP address that is assigned to the instance.</p>
    public let ipAddress: String?
    /// <p>The fleet location of the instance, expressed as an AWS Region
    ///             code, such as <code>us-west-2</code>. </p>
    public let location: String?
    /// <p>Operating system that is running on this instance. </p>
    public let operatingSystem: OperatingSystem?
    /// <p>Current status of the instance. Possible statuses include the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>PENDING</b> -- The instance is in the process of
    ///                 being created and launching server processes as defined in the fleet's run-time
    ///                 configuration. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>ACTIVE</b> -- The instance has been successfully
    ///                 created and at least one server process has successfully launched and reported
    ///                 back to GameLift that it is ready to host a game session. The instance is now
    ///                 considered ready to host game sessions. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>TERMINATING</b> -- The instance is in the process
    ///                 of shutting down. This may happen to reduce capacity during a scaling down event
    ///                 or to recycle resources in the event of a problem.</p>
    ///             </li>
    ///          </ul>
    public let status: InstanceStatus?
    /// <p>EC2 instance type that defines the computing resources of this instance.
    ///     </p>
    public let type: EC2InstanceType?

    public init (
        creationTime: Date? = nil,
        dnsName: String? = nil,
        fleetArn: String? = nil,
        fleetId: String? = nil,
        instanceId: String? = nil,
        ipAddress: String? = nil,
        location: String? = nil,
        operatingSystem: OperatingSystem? = nil,
        status: InstanceStatus? = nil,
        type: EC2InstanceType? = nil
    )
    {
        self.creationTime = creationTime
        self.dnsName = dnsName
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.instanceId = instanceId
        self.ipAddress = ipAddress
        self.location = location
        self.operatingSystem = operatingSystem
        self.status = status
        self.type = type
    }
}

extension InstanceAccess: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case credentials = "Credentials"
        case fleetId = "FleetId"
        case instanceId = "InstanceId"
        case ipAddress = "IpAddress"
        case operatingSystem = "OperatingSystem"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let credentials = credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let operatingSystem = operatingSystem {
            try encodeContainer.encode(operatingSystem.rawValue, forKey: .operatingSystem)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let credentialsDecoded = try containerValues.decodeIfPresent(InstanceCredentials.self, forKey: .credentials)
        credentials = credentialsDecoded
    }
}

extension InstanceAccess: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceAccess(credentials: \(String(describing: credentials)), fleetId: \(String(describing: fleetId)), instanceId: \(String(describing: instanceId)), ipAddress: \(String(describing: ipAddress)), operatingSystem: \(String(describing: operatingSystem)))"}
}

/// <p>Information required to remotely connect to a fleet instance. Access is requested
///         by calling <a>GetInstanceAccess</a>. </p>
public struct InstanceAccess: Equatable {
    /// <p>Credentials required to access the instance.</p>
    public let credentials: InstanceCredentials?
    /// <p>A unique identifier for the fleet containing the instance being accessed.</p>
    public let fleetId: String?
    /// <p>A unique identifier for the instance being accessed.</p>
    public let instanceId: String?
    /// <p>IP address that is assigned to the instance.</p>
    public let ipAddress: String?
    /// <p>Operating system that is running on the instance.</p>
    public let operatingSystem: OperatingSystem?

    public init (
        credentials: InstanceCredentials? = nil,
        fleetId: String? = nil,
        instanceId: String? = nil,
        ipAddress: String? = nil,
        operatingSystem: OperatingSystem? = nil
    )
    {
        self.credentials = credentials
        self.fleetId = fleetId
        self.instanceId = instanceId
        self.ipAddress = ipAddress
        self.operatingSystem = operatingSystem
    }
}

extension InstanceCredentials: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case secret = "Secret"
        case userName = "UserName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let secret = secret {
            try encodeContainer.encode(secret, forKey: .secret)
        }
        if let userName = userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userName)
        userName = userNameDecoded
        let secretDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secret)
        secret = secretDecoded
    }
}

extension InstanceCredentials: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CONTENT_REDACTED"
    }
}

/// <p>Set of credentials required to remotely access a fleet instance. Access credentials
///         are requested by calling <a>GetInstanceAccess</a> and returned in an <a>InstanceAccess</a> object.</p>
public struct InstanceCredentials: Equatable {
    /// <p>Secret string. For Windows instances, the secret is a password for use with Windows
    ///         Remote Desktop. For Linux instances, it is a private key (which must be saved as a
    ///         <code>.pem</code> file) for use with SSH.</p>
    public let secret: String?
    /// <p>User login string.</p>
    public let userName: String?

    public init (
        secret: String? = nil,
        userName: String? = nil
    )
    {
        self.secret = secret
        self.userName = userName
    }
}

extension InstanceDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceType = "InstanceType"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let weightedCapacity = weightedCapacity {
            try encodeContainer.encode(weightedCapacity, forKey: .weightedCapacity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(GameServerGroupInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
    }
}

extension InstanceDefinition: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceDefinition(instanceType: \(String(describing: instanceType)), weightedCapacity: \(String(describing: weightedCapacity)))"}
}

/// <p>
///             <b>This data type is used with the GameLift FleetIQ and game server groups.</b>
///          </p>
///         <p>An allowed instance type for a <a>GameServerGroup</a>. All game server groups must have at least two
///             instance types defined for it. GameLift FleetIQ periodically evaluates each defined instance type
///             for viability. It then updates the Auto Scaling group with the list of viable instance
///             types.</p>
public struct InstanceDefinition: Equatable {
    /// <p>An EC2 instance type designation.</p>
    public let instanceType: GameServerGroupInstanceType?
    /// <p>Instance weighting that indicates how much this instance type contributes to the total
    ///             capacity of a game server group. Instance weights are used by GameLift FleetIQ to calculate the
    ///             instance type's cost per unit hour and better identify the most cost-effective options.
    ///             For detailed information on weighting instance capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html">Instance
    ///                 Weighting</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
    ///             Default value is "1".</p>
    public let weightedCapacity: String?

    public init (
        instanceType: GameServerGroupInstanceType? = nil,
        weightedCapacity: String? = nil
    )
    {
        self.instanceType = instanceType
        self.weightedCapacity = weightedCapacity
    }
}

public enum InstanceStatus {
    case active
    case pending
    case terminating
    case sdkUnknown(String)
}

extension InstanceStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceStatus] {
        return [
            .active,
            .pending,
            .terminating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .pending: return "PENDING"
        case .terminating: return "TERMINATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceStatus(rawValue: rawValue) ?? InstanceStatus.sdkUnknown(rawValue)
    }
}

extension InternalServiceException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InternalServiceException(message: \(String(describing: message)))"}
}

extension InternalServiceException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InternalServiceExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The service encountered an unrecoverable internal failure while processing the
///             request. Clients can retry such requests immediately or after a waiting
///             period.</p>
public struct InternalServiceException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServiceExceptionBody: Equatable {
    public let message: String?
}

extension InternalServiceExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidFleetStatusException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidFleetStatusException(message: \(String(describing: message)))"}
}

extension InvalidFleetStatusException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidFleetStatusExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested operation would cause a conflict with the current state of a resource
///             associated with the request and/or the fleet. Resolve the conflict before
///             retrying.</p>
public struct InvalidFleetStatusException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidFleetStatusExceptionBody: Equatable {
    public let message: String?
}

extension InvalidFleetStatusExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidGameSessionStatusException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidGameSessionStatusException(message: \(String(describing: message)))"}
}

extension InvalidGameSessionStatusException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidGameSessionStatusExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested operation would cause a conflict with the current state of a resource
///             associated with the request and/or the game instance. Resolve the conflict before
///             retrying.</p>
public struct InvalidGameSessionStatusException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidGameSessionStatusExceptionBody: Equatable {
    public let message: String?
}

extension InvalidGameSessionStatusExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRequestException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidRequestException(message: \(String(describing: message)))"}
}

extension InvalidRequestException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>One or more parameter values in the request are invalid. Correct the invalid
///             parameter values before retrying.</p>
public struct InvalidRequestException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Equatable {
    public let message: String?
}

extension InvalidRequestExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IpPermission: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fromPort = "FromPort"
        case ipRange = "IpRange"
        case `protocol` = "Protocol"
        case toPort = "ToPort"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fromPort = fromPort {
            try encodeContainer.encode(fromPort, forKey: .fromPort)
        }
        if let ipRange = ipRange {
            try encodeContainer.encode(ipRange, forKey: .ipRange)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let toPort = toPort {
            try encodeContainer.encode(toPort, forKey: .toPort)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromPortDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .fromPort)
        fromPort = fromPortDecoded
        let toPortDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .toPort)
        toPort = toPortDecoded
        let ipRangeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipRange)
        ipRange = ipRangeDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(IpProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}

extension IpPermission: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IpPermission(fromPort: \(String(describing: fromPort)), ipRange: \(String(describing: ipRange)), protocol: \(String(describing: `protocol`)), toPort: \(String(describing: toPort)))"}
}

/// <p>A range of IP addresses and port settings that allow inbound traffic to connect to
///             server processes on an instance in a fleet. New game sessions are assigned an IP
///             address/port number combination, which must fall into the fleet's allowed ranges. Fleets
///             with custom game builds must have permissions explicitly set. For Realtime Servers fleets, GameLift
///             automatically opens two port ranges, one for TCP messaging and one for UDP.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///         <p>
///             <a>DescribeFleetPortSettings</a>
///          </p>
public struct IpPermission: Equatable {
    /// <p>The network communication protocol used by the fleet.</p>
    public let `protocol`: IpProtocol?
    /// <p>A starting value for a range of allowed port numbers.</p>
    public let fromPort: Int?
    /// <p>A range of allowed IP addresses. This value must be expressed in CIDR notation.
    ///             Example: "<code>000.000.000.000/[subnet mask]</code>" or optionally the shortened
    ///             version "<code>0.0.0.0/[subnet mask]</code>".</p>
    public let ipRange: String?
    /// <p>An ending value for a range of allowed port numbers. Port numbers are end-inclusive.
    ///             This value must be higher than <code>FromPort</code>.</p>
    public let toPort: Int?

    public init (
        `protocol`: IpProtocol? = nil,
        fromPort: Int? = nil,
        ipRange: String? = nil,
        toPort: Int? = nil
    )
    {
        self.`protocol` = `protocol`
        self.fromPort = fromPort
        self.ipRange = ipRange
        self.toPort = toPort
    }
}

public enum IpProtocol {
    case tcp
    case udp
    case sdkUnknown(String)
}

extension IpProtocol : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [IpProtocol] {
        return [
            .tcp,
            .udp,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .tcp: return "TCP"
        case .udp: return "UDP"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = IpProtocol(rawValue: rawValue) ?? IpProtocol.sdkUnknown(rawValue)
    }
}

extension LaunchTemplateSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case launchTemplateId = "LaunchTemplateId"
        case launchTemplateName = "LaunchTemplateName"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let launchTemplateId = launchTemplateId {
            try encodeContainer.encode(launchTemplateId, forKey: .launchTemplateId)
        }
        if let launchTemplateName = launchTemplateName {
            try encodeContainer.encode(launchTemplateName, forKey: .launchTemplateName)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchTemplateId)
        launchTemplateId = launchTemplateIdDecoded
        let launchTemplateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchTemplateName)
        launchTemplateName = launchTemplateNameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
    }
}

extension LaunchTemplateSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LaunchTemplateSpecification(launchTemplateId: \(String(describing: launchTemplateId)), launchTemplateName: \(String(describing: launchTemplateName)), version: \(String(describing: version)))"}
}

/// <p>
///             <b>This data type is used with the GameLift FleetIQ and game server groups.</b>
///          </p>
///         <p>An EC2 launch template that contains configuration settings and game server code to
///             be deployed to all instances in a game server group. The launch template is specified
///             when creating a new game server group with <a>CreateGameServerGroup</a>. </p>
public struct LaunchTemplateSpecification: Equatable {
    /// <p>A unique identifier for an existing EC2 launch template.</p>
    public let launchTemplateId: String?
    /// <p>A readable identifier for an existing EC2 launch template. </p>
    public let launchTemplateName: String?
    /// <p>The version of the EC2 launch template to use. If no version is specified, the
    ///             default version will be used. With Amazon EC2, you can specify a default version for a
    ///             launch template. If none is set, the default is the first version created.</p>
    public let version: String?

    public init (
        launchTemplateId: String? = nil,
        launchTemplateName: String? = nil,
        version: String? = nil
    )
    {
        self.launchTemplateId = launchTemplateId
        self.launchTemplateName = launchTemplateName
        self.version = version
    }
}

extension LimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LimitExceededException(message: \(String(describing: message)))"}
}

extension LimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested operation would cause the resource to exceed the allowed service
///             limit. Resolve the issue before retrying.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension LimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ListAliasesInputBodyMiddleware: Middleware {
    public let id: String = "ListAliasesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAliasesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAliasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAliasesInput>
    public typealias MOutput = OperationOutput<ListAliasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAliasesOutputError>
}

extension ListAliasesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListAliasesInput(limit: \(String(describing: limit)), name: \(String(describing: name)), nextToken: \(String(describing: nextToken)), routingStrategyType: \(String(describing: routingStrategyType)))"}
}

extension ListAliasesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case name = "Name"
        case nextToken = "NextToken"
        case routingStrategyType = "RoutingStrategyType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let routingStrategyType = routingStrategyType {
            try encodeContainer.encode(routingStrategyType.rawValue, forKey: .routingStrategyType)
        }
    }
}

public struct ListAliasesInputHeadersMiddleware: Middleware {
    public let id: String = "ListAliasesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAliasesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAliasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAliasesInput>
    public typealias MOutput = OperationOutput<ListAliasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAliasesOutputError>
}

public struct ListAliasesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListAliasesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAliasesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAliasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAliasesInput>
    public typealias MOutput = OperationOutput<ListAliasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAliasesOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct ListAliasesInput: Equatable {
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    public let limit: Int?
    /// <p>A descriptive label that is associated with an alias. Alias names do not need to be unique.</p>
    public let name: String?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?
    /// <p>The routing type to filter results on. Use this parameter to retrieve only aliases
    ///             with a certain routing type. To retrieve all aliases, leave this parameter empty.</p>
    ///         <p>Possible routing types include the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>SIMPLE</b> -- The alias resolves to one specific
    ///                     fleet. Use this type when routing to active fleets.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>TERMINAL</b> -- The alias does not resolve to a
    ///                     fleet but instead can be used to display a message to the user. A terminal alias
    ///                     throws a TerminalRoutingStrategyException with the <a>RoutingStrategy</a> message embedded.</p>
    ///             </li>
    ///          </ul>
    public let routingStrategyType: RoutingStrategyType?

    public init (
        limit: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        routingStrategyType: RoutingStrategyType? = nil
    )
    {
        self.limit = limit
        self.name = name
        self.nextToken = nextToken
        self.routingStrategyType = routingStrategyType
    }
}

struct ListAliasesInputBody: Equatable {
    public let routingStrategyType: RoutingStrategyType?
    public let name: String?
    public let limit: Int?
    public let nextToken: String?
}

extension ListAliasesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case name = "Name"
        case nextToken = "NextToken"
        case routingStrategyType = "RoutingStrategyType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingStrategyTypeDecoded = try containerValues.decodeIfPresent(RoutingStrategyType.self, forKey: .routingStrategyType)
        routingStrategyType = routingStrategyTypeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAliasesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAliasesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAliasesOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAliasesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListAliasesOutputResponse(aliases: \(String(describing: aliases)), nextToken: \(String(describing: nextToken)))"}
}

extension ListAliasesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListAliasesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.aliases = output.aliases
            self.nextToken = output.nextToken
        } else {
            self.aliases = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct ListAliasesOutputResponse: Equatable {
    /// <p>A collection of alias resources that match the request parameters.</p>
    public let aliases: [Alias]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        aliases: [Alias]? = nil,
        nextToken: String? = nil
    )
    {
        self.aliases = aliases
        self.nextToken = nextToken
    }
}

struct ListAliasesOutputResponseBody: Equatable {
    public let aliases: [Alias]?
    public let nextToken: String?
}

extension ListAliasesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aliases = "Aliases"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasesContainer = try containerValues.decodeIfPresent([Alias?].self, forKey: .aliases)
        var aliasesDecoded0:[Alias]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [Alias]()
            for structure0 in aliasesContainer {
                if let structure0 = structure0 {
                    aliasesDecoded0?.append(structure0)
                }
            }
        }
        aliases = aliasesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListBuildsInputBodyMiddleware: Middleware {
    public let id: String = "ListBuildsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListBuildsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListBuildsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListBuildsInput>
    public typealias MOutput = OperationOutput<ListBuildsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListBuildsOutputError>
}

extension ListBuildsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListBuildsInput(limit: \(String(describing: limit)), nextToken: \(String(describing: nextToken)), status: \(String(describing: status)))"}
}

extension ListBuildsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

public struct ListBuildsInputHeadersMiddleware: Middleware {
    public let id: String = "ListBuildsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListBuildsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListBuildsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListBuildsInput>
    public typealias MOutput = OperationOutput<ListBuildsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListBuildsOutputError>
}

public struct ListBuildsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListBuildsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListBuildsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListBuildsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListBuildsInput>
    public typealias MOutput = OperationOutput<ListBuildsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListBuildsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct ListBuildsInput: Equatable {
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    public let limit: Int?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?
    /// <p>Build status to filter results by. To retrieve all builds, leave this parameter
    ///             empty.</p>
    ///         <p>Possible build statuses include the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>INITIALIZED</b> -- A new build has been defined,
    ///                     but no files have been uploaded. You cannot create fleets for builds that are in
    ///                     this status. When a build is successfully created, the build status is set to
    ///                     this value. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>READY</b> -- The game build has been successfully
    ///                     uploaded. You can now create new fleets for this build.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>FAILED</b> -- The game build upload failed. You
    ///                     cannot create new fleets for this build. </p>
    ///             </li>
    ///          </ul>
    public let status: BuildStatus?

    public init (
        limit: Int? = nil,
        nextToken: String? = nil,
        status: BuildStatus? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListBuildsInputBody: Equatable {
    public let status: BuildStatus?
    public let limit: Int?
    public let nextToken: String?
}

extension ListBuildsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(BuildStatus.self, forKey: .status)
        status = statusDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListBuildsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListBuildsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBuildsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBuildsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListBuildsOutputResponse(builds: \(String(describing: builds)), nextToken: \(String(describing: nextToken)))"}
}

extension ListBuildsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListBuildsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.builds = output.builds
            self.nextToken = output.nextToken
        } else {
            self.builds = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct ListBuildsOutputResponse: Equatable {
    /// <p>A collection of build resources that match the request.</p>
    public let builds: [Build]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        builds: [Build]? = nil,
        nextToken: String? = nil
    )
    {
        self.builds = builds
        self.nextToken = nextToken
    }
}

struct ListBuildsOutputResponseBody: Equatable {
    public let builds: [Build]?
    public let nextToken: String?
}

extension ListBuildsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case builds = "Builds"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildsContainer = try containerValues.decodeIfPresent([Build?].self, forKey: .builds)
        var buildsDecoded0:[Build]? = nil
        if let buildsContainer = buildsContainer {
            buildsDecoded0 = [Build]()
            for structure0 in buildsContainer {
                if let structure0 = structure0 {
                    buildsDecoded0?.append(structure0)
                }
            }
        }
        builds = buildsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListFleetsInputBodyMiddleware: Middleware {
    public let id: String = "ListFleetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListFleetsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListFleetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListFleetsInput>
    public typealias MOutput = OperationOutput<ListFleetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListFleetsOutputError>
}

extension ListFleetsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListFleetsInput(buildId: \(String(describing: buildId)), limit: \(String(describing: limit)), nextToken: \(String(describing: nextToken)), scriptId: \(String(describing: scriptId)))"}
}

extension ListFleetsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case buildId = "BuildId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case scriptId = "ScriptId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildId = buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let scriptId = scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
    }
}

public struct ListFleetsInputHeadersMiddleware: Middleware {
    public let id: String = "ListFleetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListFleetsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListFleetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListFleetsInput>
    public typealias MOutput = OperationOutput<ListFleetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListFleetsOutputError>
}

public struct ListFleetsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListFleetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListFleetsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListFleetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListFleetsInput>
    public typealias MOutput = OperationOutput<ListFleetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListFleetsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct ListFleetsInput: Equatable {
    /// <p>A unique identifier for the build to request fleets for. Use this parameter to return only fleets using a
    ///             specified build. Use either the build ID or ARN value.</p>
    public let buildId: String?
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    public let limit: Int?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?
    /// <p>A unique identifier for the Realtime script to request fleets for. Use this parameter to return only fleets using a
    ///             specified script. Use either the script ID or ARN value.</p>
    public let scriptId: String?

    public init (
        buildId: String? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        scriptId: String? = nil
    )
    {
        self.buildId = buildId
        self.limit = limit
        self.nextToken = nextToken
        self.scriptId = scriptId
    }
}

struct ListFleetsInputBody: Equatable {
    public let buildId: String?
    public let scriptId: String?
    public let limit: Int?
    public let nextToken: String?
}

extension ListFleetsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case buildId = "BuildId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case scriptId = "ScriptId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildId)
        buildId = buildIdDecoded
        let scriptIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListFleetsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListFleetsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListFleetsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListFleetsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListFleetsOutputResponse(fleetIds: \(String(describing: fleetIds)), nextToken: \(String(describing: nextToken)))"}
}

extension ListFleetsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListFleetsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetIds = output.fleetIds
            self.nextToken = output.nextToken
        } else {
            self.fleetIds = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct ListFleetsOutputResponse: Equatable {
    /// <p>A set of fleet IDs that match the list request.
    ///             You can retrieve additional information about all
    ///             returned fleets by passing this result set to a <a>DescribeFleetAttributes</a>, <a>DescribeFleetCapacity</a>, or
    ///                 <a>DescribeFleetUtilization</a> call.</p>
    public let fleetIds: [String]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        fleetIds: [String]? = nil,
        nextToken: String? = nil
    )
    {
        self.fleetIds = fleetIds
        self.nextToken = nextToken
    }
}

struct ListFleetsOutputResponseBody: Equatable {
    public let fleetIds: [String]?
    public let nextToken: String?
}

extension ListFleetsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetIds = "FleetIds"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .fleetIds)
        var fleetIdsDecoded0:[String]? = nil
        if let fleetIdsContainer = fleetIdsContainer {
            fleetIdsDecoded0 = [String]()
            for string0 in fleetIdsContainer {
                if let string0 = string0 {
                    fleetIdsDecoded0?.append(string0)
                }
            }
        }
        fleetIds = fleetIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListGameServerGroupsInputBodyMiddleware: Middleware {
    public let id: String = "ListGameServerGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListGameServerGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListGameServerGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListGameServerGroupsInput>
    public typealias MOutput = OperationOutput<ListGameServerGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListGameServerGroupsOutputError>
}

extension ListGameServerGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListGameServerGroupsInput(limit: \(String(describing: limit)), nextToken: \(String(describing: nextToken)))"}
}

extension ListGameServerGroupsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListGameServerGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "ListGameServerGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListGameServerGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListGameServerGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListGameServerGroupsInput>
    public typealias MOutput = OperationOutput<ListGameServerGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListGameServerGroupsOutputError>
}

public struct ListGameServerGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListGameServerGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListGameServerGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListGameServerGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListGameServerGroupsInput>
    public typealias MOutput = OperationOutput<ListGameServerGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListGameServerGroupsOutputError>
}

public struct ListGameServerGroupsInput: Equatable {
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    public let limit: Int?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?

    public init (
        limit: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct ListGameServerGroupsInputBody: Equatable {
    public let limit: Int?
    public let nextToken: String?
}

extension ListGameServerGroupsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListGameServerGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGameServerGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListGameServerGroupsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGameServerGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListGameServerGroupsOutputResponse(gameServerGroups: \(String(describing: gameServerGroups)), nextToken: \(String(describing: nextToken)))"}
}

extension ListGameServerGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListGameServerGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameServerGroups = output.gameServerGroups
            self.nextToken = output.nextToken
        } else {
            self.gameServerGroups = nil
            self.nextToken = nil
        }
    }
}

public struct ListGameServerGroupsOutputResponse: Equatable {
    /// <p>A collection of game server group objects that match the request.</p>
    public let gameServerGroups: [GameServerGroup]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        gameServerGroups: [GameServerGroup]? = nil,
        nextToken: String? = nil
    )
    {
        self.gameServerGroups = gameServerGroups
        self.nextToken = nextToken
    }
}

struct ListGameServerGroupsOutputResponseBody: Equatable {
    public let gameServerGroups: [GameServerGroup]?
    public let nextToken: String?
}

extension ListGameServerGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerGroups = "GameServerGroups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupsContainer = try containerValues.decodeIfPresent([GameServerGroup?].self, forKey: .gameServerGroups)
        var gameServerGroupsDecoded0:[GameServerGroup]? = nil
        if let gameServerGroupsContainer = gameServerGroupsContainer {
            gameServerGroupsDecoded0 = [GameServerGroup]()
            for structure0 in gameServerGroupsContainer {
                if let structure0 = structure0 {
                    gameServerGroupsDecoded0?.append(structure0)
                }
            }
        }
        gameServerGroups = gameServerGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListGameServersInputBodyMiddleware: Middleware {
    public let id: String = "ListGameServersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListGameServersInput>,
                  next: H) -> Swift.Result<OperationOutput<ListGameServersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListGameServersInput>
    public typealias MOutput = OperationOutput<ListGameServersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListGameServersOutputError>
}

extension ListGameServersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListGameServersInput(gameServerGroupName: \(String(describing: gameServerGroupName)), limit: \(String(describing: limit)), nextToken: \(String(describing: nextToken)), sortOrder: \(String(describing: sortOrder)))"}
}

extension ListGameServersInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct ListGameServersInputHeadersMiddleware: Middleware {
    public let id: String = "ListGameServersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListGameServersInput>,
                  next: H) -> Swift.Result<OperationOutput<ListGameServersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListGameServersInput>
    public typealias MOutput = OperationOutput<ListGameServersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListGameServersOutputError>
}

public struct ListGameServersInputQueryItemMiddleware: Middleware {
    public let id: String = "ListGameServersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListGameServersInput>,
                  next: H) -> Swift.Result<OperationOutput<ListGameServersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListGameServersInput>
    public typealias MOutput = OperationOutput<ListGameServersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListGameServersOutputError>
}

public struct ListGameServersInput: Equatable {
    /// <p>An identifier for the game server group to retrieve a list of game servers from.
    ///             Use either the <a>GameServerGroup</a> name or ARN value.</p>
    public let gameServerGroupName: String?
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    public let limit: Int?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?
    /// <p>Indicates how to sort the returned data based on game server registration timestamp.
    ///             Use <code>ASCENDING</code> to retrieve oldest game servers first, or use
    ///                 <code>DESCENDING</code> to retrieve newest game servers first. If this parameter is
    ///             left empty, game servers are returned in no particular order.</p>
    public let sortOrder: SortOrder?

    public init (
        gameServerGroupName: String? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        sortOrder: SortOrder? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.limit = limit
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}

struct ListGameServersInputBody: Equatable {
    public let gameServerGroupName: String?
    public let sortOrder: SortOrder?
    public let limit: Int?
    public let nextToken: String?
}

extension ListGameServersInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListGameServersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGameServersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListGameServersOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGameServersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListGameServersOutputResponse(gameServers: \(String(describing: gameServers)), nextToken: \(String(describing: nextToken)))"}
}

extension ListGameServersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListGameServersOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameServers = output.gameServers
            self.nextToken = output.nextToken
        } else {
            self.gameServers = nil
            self.nextToken = nil
        }
    }
}

public struct ListGameServersOutputResponse: Equatable {
    /// <p>A collection of game server objects that match the request.</p>
    public let gameServers: [GameServer]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        gameServers: [GameServer]? = nil,
        nextToken: String? = nil
    )
    {
        self.gameServers = gameServers
        self.nextToken = nextToken
    }
}

struct ListGameServersOutputResponseBody: Equatable {
    public let gameServers: [GameServer]?
    public let nextToken: String?
}

extension ListGameServersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServers = "GameServers"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServersContainer = try containerValues.decodeIfPresent([GameServer?].self, forKey: .gameServers)
        var gameServersDecoded0:[GameServer]? = nil
        if let gameServersContainer = gameServersContainer {
            gameServersDecoded0 = [GameServer]()
            for structure0 in gameServersContainer {
                if let structure0 = structure0 {
                    gameServersDecoded0?.append(structure0)
                }
            }
        }
        gameServers = gameServersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListScriptsInputBodyMiddleware: Middleware {
    public let id: String = "ListScriptsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListScriptsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListScriptsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListScriptsInput>
    public typealias MOutput = OperationOutput<ListScriptsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListScriptsOutputError>
}

extension ListScriptsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListScriptsInput(limit: \(String(describing: limit)), nextToken: \(String(describing: nextToken)))"}
}

extension ListScriptsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListScriptsInputHeadersMiddleware: Middleware {
    public let id: String = "ListScriptsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListScriptsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListScriptsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListScriptsInput>
    public typealias MOutput = OperationOutput<ListScriptsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListScriptsOutputError>
}

public struct ListScriptsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListScriptsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListScriptsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListScriptsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListScriptsInput>
    public typealias MOutput = OperationOutput<ListScriptsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListScriptsOutputError>
}

public struct ListScriptsInput: Equatable {
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    public let limit: Int?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?

    public init (
        limit: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct ListScriptsInputBody: Equatable {
    public let limit: Int?
    public let nextToken: String?
}

extension ListScriptsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListScriptsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListScriptsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListScriptsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListScriptsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListScriptsOutputResponse(nextToken: \(String(describing: nextToken)), scripts: \(String(describing: scripts)))"}
}

extension ListScriptsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListScriptsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.scripts = output.scripts
        } else {
            self.nextToken = nil
            self.scripts = nil
        }
    }
}

public struct ListScriptsOutputResponse: Equatable {
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?
    /// <p>A set of properties describing the requested script.</p>
    public let scripts: [Script]?

    public init (
        nextToken: String? = nil,
        scripts: [Script]? = nil
    )
    {
        self.nextToken = nextToken
        self.scripts = scripts
    }
}

struct ListScriptsOutputResponseBody: Equatable {
    public let scripts: [Script]?
    public let nextToken: String?
}

extension ListScriptsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case scripts = "Scripts"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptsContainer = try containerValues.decodeIfPresent([Script?].self, forKey: .scripts)
        var scriptsDecoded0:[Script]? = nil
        if let scriptsContainer = scriptsContainer {
            scriptsDecoded0 = [Script]()
            for structure0 in scriptsContainer {
                if let structure0 = structure0 {
                    scriptsDecoded0?.append(structure0)
                }
            }
        }
        scripts = scriptsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListTagsForResourceInputBodyMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

extension ListTagsForResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceInput(resourceARN: \(String(describing: resourceARN)))"}
}

extension ListTagsForResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceARN = "ResourceARN"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Equatable {
    /// <p>
    ///             The Amazon Resource Name
    ///             (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>)
    ///             that is assigned to and uniquely identifies the GameLift resource that you want to retrieve
    ///             tags for. GameLift resource ARNs are included in the data object for the resource, which
    ///             can be retrieved by calling a List or Describe operation for the resource type. </p>
    public let resourceARN: String?

    public init (
        resourceARN: String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

struct ListTagsForResourceInputBody: Equatable {
    public let resourceARN: String?
}

extension ListTagsForResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceARN = "ResourceARN"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
    }
}

extension ListTagsForResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceOutputResponse(tags: \(String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Equatable {
    /// <p>
    ///             The collection of tags that have been assigned to the specified resource.
    ///         </p>
    public let tags: [Tag]?

    public init (
        tags: [Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Equatable {
    public let tags: [Tag]?
}

extension ListTagsForResourceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension LocationAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case locationState = "LocationState"
        case stoppedActions = "StoppedActions"
        case updateStatus = "UpdateStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationState = locationState {
            try encodeContainer.encode(locationState, forKey: .locationState)
        }
        if let stoppedActions = stoppedActions {
            var stoppedActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stoppedActions)
            for fleetactionlist0 in stoppedActions {
                try stoppedActionsContainer.encode(fleetactionlist0.rawValue)
            }
        }
        if let updateStatus = updateStatus {
            try encodeContainer.encode(updateStatus.rawValue, forKey: .updateStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationStateDecoded = try containerValues.decodeIfPresent(LocationState.self, forKey: .locationState)
        locationState = locationStateDecoded
        let stoppedActionsContainer = try containerValues.decodeIfPresent([FleetAction?].self, forKey: .stoppedActions)
        var stoppedActionsDecoded0:[FleetAction]? = nil
        if let stoppedActionsContainer = stoppedActionsContainer {
            stoppedActionsDecoded0 = [FleetAction]()
            for string0 in stoppedActionsContainer {
                if let string0 = string0 {
                    stoppedActionsDecoded0?.append(string0)
                }
            }
        }
        stoppedActions = stoppedActionsDecoded0
        let updateStatusDecoded = try containerValues.decodeIfPresent(LocationUpdateStatus.self, forKey: .updateStatus)
        updateStatus = updateStatusDecoded
    }
}

extension LocationAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LocationAttributes(locationState: \(String(describing: locationState)), stoppedActions: \(String(describing: stoppedActions)), updateStatus: \(String(describing: updateStatus)))"}
}

/// <p>Represents a location in a multi-location fleet.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///         <p>
///             <a>DescribeFleetLocationAttributes</a>
///         </p>
public struct LocationAttributes: Equatable {
    /// <p>A fleet location and its current life-cycle state.</p>
    public let locationState: LocationState?
    /// <p>A list of fleet actions that have been suspended in the fleet location.</p>
    public let stoppedActions: [FleetAction]?
    /// <p>The status of fleet activity updates to the location. The status
    ///             <code>PENDING_UPDATE</code> indicates that <a>StopFleetActions</a> or <a>StartFleetActions</a>
    ///             has been requested but the update has not yet been completed for the location.</p>
    public let updateStatus: LocationUpdateStatus?

    public init (
        locationState: LocationState? = nil,
        stoppedActions: [FleetAction]? = nil,
        updateStatus: LocationUpdateStatus? = nil
    )
    {
        self.locationState = locationState
        self.stoppedActions = stoppedActions
        self.updateStatus = updateStatus
    }
}

extension LocationConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case location = "Location"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension LocationConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LocationConfiguration(location: \(String(describing: location)))"}
}

/// <p>A remote location where a multi-location fleet can deploy EC2 instances for game
///             hosting. </p>
///         <p>
///             <b>Related actions</b>
///          </p>
///         <p>
///             <a>CreateFleet</a>
///          </p>
public struct LocationConfiguration: Equatable {
    /// <p>An AWS Region code, such as <code>us-west-2</code>. </p>
    public let location: String?

    public init (
        location: String? = nil
    )
    {
        self.location = location
    }
}

extension LocationState: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case location = "Location"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(FleetStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension LocationState: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LocationState(location: \(String(describing: location)), status: \(String(describing: status)))"}
}

/// <p>A fleet location and its life-cycle state. A location state object might
///             be used to describe a fleet's remote location or home Region.
///             Life-cycle state tracks the progress of launching the first instance in a new
///             location and preparing it for game hosting, and then removing all instances and
///             deleting the location from the fleet.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///         <p>
///             <a>CreateFleet</a> |
///             <a>CreateFleetLocations</a> |
///             <a>DeleteFleetLocations</a>
///         </p>
public struct LocationState: Equatable {
    /// <p>The fleet location, expressed as an AWS Region code such as <code>us-west-2</code>. </p>
    public let location: String?
    /// <p>The life-cycle status of a fleet location. </p>
    public let status: FleetStatus?

    public init (
        location: String? = nil,
        status: FleetStatus? = nil
    )
    {
        self.location = location
        self.status = status
    }
}

public enum LocationUpdateStatus {
    case pendingUpdate
    case sdkUnknown(String)
}

extension LocationUpdateStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LocationUpdateStatus] {
        return [
            .pendingUpdate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .pendingUpdate: return "PENDING_UPDATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LocationUpdateStatus(rawValue: rawValue) ?? LocationUpdateStatus.sdkUnknown(rawValue)
    }
}

extension MatchedPlayerSession: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case playerId = "PlayerId"
        case playerSessionId = "PlayerSessionId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let playerId = playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let playerSessionId = playerSessionId {
            try encodeContainer.encode(playerSessionId, forKey: .playerSessionId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let playerSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerSessionId)
        playerSessionId = playerSessionIdDecoded
    }
}

extension MatchedPlayerSession: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MatchedPlayerSession(playerId: \(String(describing: playerId)), playerSessionId: \(String(describing: playerSessionId)))"}
}

/// <p>Represents a new player session that is created as a result of a successful FlexMatch
///             match. A successful match automatically creates new player sessions for every player ID
///             in the original matchmaking request. </p>
///         <p>When players connect to the match's game session, they must include both player ID
///             and player session ID in order to claim their assigned player slot.</p>
public struct MatchedPlayerSession: Equatable {
    /// <p>A unique identifier for a player </p>
    public let playerId: String?
    /// <p>A unique identifier for a player session</p>
    public let playerSessionId: String?

    public init (
        playerId: String? = nil,
        playerSessionId: String? = nil
    )
    {
        self.playerId = playerId
        self.playerSessionId = playerSessionId
    }
}

extension MatchmakingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case configurationArn = "ConfigurationArn"
        case creationTime = "CreationTime"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetArn = "RuleSetArn"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptanceRequired = acceptanceRequired {
            try encodeContainer.encode(acceptanceRequired, forKey: .acceptanceRequired)
        }
        if let acceptanceTimeoutSeconds = acceptanceTimeoutSeconds {
            try encodeContainer.encode(acceptanceTimeoutSeconds, forKey: .acceptanceTimeoutSeconds)
        }
        if let additionalPlayerCount = additionalPlayerCount {
            try encodeContainer.encode(additionalPlayerCount, forKey: .additionalPlayerCount)
        }
        if let backfillMode = backfillMode {
            try encodeContainer.encode(backfillMode.rawValue, forKey: .backfillMode)
        }
        if let configurationArn = configurationArn {
            try encodeContainer.encode(configurationArn, forKey: .configurationArn)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let customEventData = customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let flexMatchMode = flexMatchMode {
            try encodeContainer.encode(flexMatchMode.rawValue, forKey: .flexMatchMode)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gamepropertylist0 in gameProperties {
                try gamePropertiesContainer.encode(gamepropertylist0)
            }
        }
        if let gameSessionData = gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionQueueArns = gameSessionQueueArns {
            var gameSessionQueueArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameSessionQueueArns)
            for queuearnslist0 in gameSessionQueueArns {
                try gameSessionQueueArnsContainer.encode(queuearnslist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let requestTimeoutSeconds = requestTimeoutSeconds {
            try encodeContainer.encode(requestTimeoutSeconds, forKey: .requestTimeoutSeconds)
        }
        if let ruleSetArn = ruleSetArn {
            try encodeContainer.encode(ruleSetArn, forKey: .ruleSetArn)
        }
        if let ruleSetName = ruleSetName {
            try encodeContainer.encode(ruleSetName, forKey: .ruleSetName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let configurationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configurationArn)
        configurationArn = configurationArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let gameSessionQueueArnsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .gameSessionQueueArns)
        var gameSessionQueueArnsDecoded0:[String]? = nil
        if let gameSessionQueueArnsContainer = gameSessionQueueArnsContainer {
            gameSessionQueueArnsDecoded0 = [String]()
            for string0 in gameSessionQueueArnsContainer {
                if let string0 = string0 {
                    gameSessionQueueArnsDecoded0?.append(string0)
                }
            }
        }
        gameSessionQueueArns = gameSessionQueueArnsDecoded0
        let requestTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .requestTimeoutSeconds)
        requestTimeoutSeconds = requestTimeoutSecondsDecoded
        let acceptanceTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .acceptanceTimeoutSeconds)
        acceptanceTimeoutSeconds = acceptanceTimeoutSecondsDecoded
        let acceptanceRequiredDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .acceptanceRequired)
        acceptanceRequired = acceptanceRequiredDecoded
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let ruleSetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleSetArn)
        ruleSetArn = ruleSetArnDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
        let additionalPlayerCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .additionalPlayerCount)
        additionalPlayerCount = additionalPlayerCountDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let backfillModeDecoded = try containerValues.decodeIfPresent(BackfillMode.self, forKey: .backfillMode)
        backfillMode = backfillModeDecoded
        let flexMatchModeDecoded = try containerValues.decodeIfPresent(FlexMatchMode.self, forKey: .flexMatchMode)
        flexMatchMode = flexMatchModeDecoded
    }
}

extension MatchmakingConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MatchmakingConfiguration(acceptanceRequired: \(String(describing: acceptanceRequired)), acceptanceTimeoutSeconds: \(String(describing: acceptanceTimeoutSeconds)), additionalPlayerCount: \(String(describing: additionalPlayerCount)), backfillMode: \(String(describing: backfillMode)), configurationArn: \(String(describing: configurationArn)), creationTime: \(String(describing: creationTime)), customEventData: \(String(describing: customEventData)), description: \(String(describing: description)), flexMatchMode: \(String(describing: flexMatchMode)), gameProperties: \(String(describing: gameProperties)), gameSessionData: \(String(describing: gameSessionData)), gameSessionQueueArns: \(String(describing: gameSessionQueueArns)), name: \(String(describing: name)), notificationTarget: \(String(describing: notificationTarget)), requestTimeoutSeconds: \(String(describing: requestTimeoutSeconds)), ruleSetArn: \(String(describing: ruleSetArn)), ruleSetName: \(String(describing: ruleSetName)))"}
}

/// <p>Guidelines for use with FlexMatch to match players into games. All matchmaking
///             requests must specify a matchmaking configuration.</p>
public struct MatchmakingConfiguration: Equatable {
    /// <p>A flag that indicates whether a match that was created with this configuration must be
    ///             accepted by the matched players. To require acceptance, set to TRUE. When this option is
    ///             enabled, matchmaking tickets use the status <code>REQUIRES_ACCEPTANCE</code> to indicate
    ///             when a completed potential match is waiting for player acceptance.</p>
    public let acceptanceRequired: Bool?
    /// <p>The length of time (in seconds) to wait for players to accept a proposed match, if
    ///             acceptance is required. If any player rejects the match or fails to accept before the
    ///             timeout, the ticket continues to look for an acceptable match.</p>
    public let acceptanceTimeoutSeconds: Int?
    /// <p>The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies
    ///             a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match. This parameter is not used when <code>FlexMatchMode</code> is set to
    ///             <code>STANDALONE</code>.</p>
    public let additionalPlayerCount: Int?
    /// <p>The method used to backfill game sessions created with this matchmaking configuration.
    ///             MANUAL indicates that the game makes backfill requests or does not use the match
    ///             backfill feature. AUTOMATIC indicates that GameLift creates <a>StartMatchBackfill</a> requests whenever a game session has one or more open
    ///             slots. Learn more about manual and automatic backfill in <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html">Backfill existing games
    ///                 with FlexMatch</a>. Automatic backfill is not available when
    ///             <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    public let backfillMode: BackfillMode?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift matchmaking configuration resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::matchmakingconfiguration/<matchmaking configuration name></code>. In a GameLift configuration ARN, the resource ID matches the
    ///                 <i>Name</i> value.</p>
    public let configurationArn: String?
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>Information to attach to all events related to the matchmaking configuration. </p>
    public let customEventData: String?
    /// <p>A descriptive label that is associated with matchmaking configuration.</p>
    public let description: String?
    /// <p>Indicates whether this matchmaking configuration is being used with GameLift hosting or
    ///             as a standalone matchmaking solution. </p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <b>STANDALONE</b> - FlexMatch forms matches and returns
    ///                 match information, including players and team assignments, in a
    ///                 <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html#match-events-matchmakingsucceeded">
    ///                     MatchmakingSucceeded</a> event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>WITH_QUEUE</b> - FlexMatch forms matches and uses the specified GameLift queue to
    ///                 start a game session for the match. </p>
    ///             </li>
    ///          </ul>
    public let flexMatchMode: FlexMatchMode?
    /// <p>A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <a>GameSession</a>
    ///             object that is created for a successful match. This parameter is not used when
    ///             <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    public let gameProperties: [GameProperty]?
    /// <p>A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <a>GameSession</a> object
    ///             that is created for a successful match. This parameter is not used when
    ///             <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    public let gameSessionData: String?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::gamesessionqueue/<queue name></code>. Queues can be located in any Region. Queues are used to start new
    ///             GameLift-hosted game sessions for matches that are created with this matchmaking
    ///             configuration. This property is not set when <code>FlexMatchMode</code> is set to
    ///             <code>STANDALONE</code>.</p>
    public let gameSessionQueueArns: [String]?
    /// <p>A unique identifier for the matchmaking configuration. This name is used to identify the configuration associated with a
    ///             matchmaking request or ticket.</p>
    public let name: String?
    /// <p>An SNS topic ARN that is set up to receive matchmaking notifications.</p>
    public let notificationTarget: String?
    /// <p>The maximum duration, in seconds, that a matchmaking ticket can remain in process
    ///             before timing out. Requests that fail due to timing out can be resubmitted as
    ///             needed.</p>
    public let requestTimeoutSeconds: Int?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) associated with the GameLift matchmaking rule set resource that this configuration uses.</p>
    public let ruleSetArn: String?
    /// <p>A unique identifier for the matchmaking rule set to use with this configuration. A matchmaking configuration can only use
    ///             rule sets that are defined in the same Region.</p>
    public let ruleSetName: String?

    public init (
        acceptanceRequired: Bool? = nil,
        acceptanceTimeoutSeconds: Int? = nil,
        additionalPlayerCount: Int? = nil,
        backfillMode: BackfillMode? = nil,
        configurationArn: String? = nil,
        creationTime: Date? = nil,
        customEventData: String? = nil,
        description: String? = nil,
        flexMatchMode: FlexMatchMode? = nil,
        gameProperties: [GameProperty]? = nil,
        gameSessionData: String? = nil,
        gameSessionQueueArns: [String]? = nil,
        name: String? = nil,
        notificationTarget: String? = nil,
        requestTimeoutSeconds: Int? = nil,
        ruleSetArn: String? = nil,
        ruleSetName: String? = nil
    )
    {
        self.acceptanceRequired = acceptanceRequired
        self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
        self.additionalPlayerCount = additionalPlayerCount
        self.backfillMode = backfillMode
        self.configurationArn = configurationArn
        self.creationTime = creationTime
        self.customEventData = customEventData
        self.description = description
        self.flexMatchMode = flexMatchMode
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionQueueArns = gameSessionQueueArns
        self.name = name
        self.notificationTarget = notificationTarget
        self.requestTimeoutSeconds = requestTimeoutSeconds
        self.ruleSetArn = ruleSetArn
        self.ruleSetName = ruleSetName
    }
}

public enum MatchmakingConfigurationStatus {
    case cancelled
    case completed
    case failed
    case placing
    case queued
    case requiresAcceptance
    case searching
    case timedOut
    case sdkUnknown(String)
}

extension MatchmakingConfigurationStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MatchmakingConfigurationStatus] {
        return [
            .cancelled,
            .completed,
            .failed,
            .placing,
            .queued,
            .requiresAcceptance,
            .searching,
            .timedOut,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cancelled: return "CANCELLED"
        case .completed: return "COMPLETED"
        case .failed: return "FAILED"
        case .placing: return "PLACING"
        case .queued: return "QUEUED"
        case .requiresAcceptance: return "REQUIRES_ACCEPTANCE"
        case .searching: return "SEARCHING"
        case .timedOut: return "TIMED_OUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MatchmakingConfigurationStatus(rawValue: rawValue) ?? MatchmakingConfigurationStatus.sdkUnknown(rawValue)
    }
}

extension MatchmakingRuleSet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case ruleSetArn = "RuleSetArn"
        case ruleSetBody = "RuleSetBody"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let ruleSetArn = ruleSetArn {
            try encodeContainer.encode(ruleSetArn, forKey: .ruleSetArn)
        }
        if let ruleSetBody = ruleSetBody {
            try encodeContainer.encode(ruleSetBody, forKey: .ruleSetBody)
        }
        if let ruleSetName = ruleSetName {
            try encodeContainer.encode(ruleSetName, forKey: .ruleSetName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let ruleSetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleSetArn)
        ruleSetArn = ruleSetArnDecoded
        let ruleSetBodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleSetBody)
        ruleSetBody = ruleSetBodyDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension MatchmakingRuleSet: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MatchmakingRuleSet(creationTime: \(String(describing: creationTime)), ruleSetArn: \(String(describing: ruleSetArn)), ruleSetBody: \(String(describing: ruleSetBody)), ruleSetName: \(String(describing: ruleSetName)))"}
}

/// <p>Set of rule statements, used with FlexMatch, that determine how to build your player
///             matches. Each rule set describes a type of group to be created and defines the
///             parameters for acceptable player matches. Rule sets are used in <a>MatchmakingConfiguration</a> objects.</p>
///         <p>A rule set may define the following elements for a match. For detailed information
///             and examples showing how to construct a rule set, see <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-rulesets.html">Build a FlexMatch rule
///                 set</a>. </p>
///         <ul>
///             <li>
///                 <p>Teams -- Required. A rule set must define one or multiple teams for the
///                     match and set minimum and maximum team sizes. For example, a rule set might
///                     describe a 4x4 match that requires all eight slots to be filled. </p>
///             </li>
///             <li>
///                 <p>Player attributes -- Optional. These attributes specify a set of player
///                     characteristics to evaluate when looking for a match. Matchmaking requests that
///                     use a rule set with player attributes must provide the corresponding attribute
///                     values. For example, an attribute might specify a player's skill or
///                     level.</p>
///             </li>
///             <li>
///                 <p>Rules -- Optional. Rules define how to evaluate potential players for a
///                     match based on player attributes. A rule might specify minimum requirements for
///                     individual players, teams, or entire matches. For example, a rule might require
///                     each player to meet a certain skill level, each team to have at least one player
///                     in a certain role, or the match to have a minimum average skill level. or may
///                     describe an entire group--such as all teams must be evenly matched or have at
///                     least one player in a certain role. </p>
///             </li>
///             <li>
///                 <p>Expansions -- Optional. Expansions allow you to relax the rules after a
///                     period of time when no acceptable matches are found. This feature lets you
///                     balance getting players into games in a reasonable amount of time instead of
///                     making them wait indefinitely for the best possible match. For example, you
///                     might use an expansion to increase the maximum skill variance between players
///                     after 30 seconds.</p>
///             </li>
///          </ul>
public struct MatchmakingRuleSet: Equatable {
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift matchmaking rule set resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::matchmakingruleset/<ruleset name></code>.  In a GameLift rule set ARN, the resource ID matches the
    ///                 <i>RuleSetName</i> value.</p>
    public let ruleSetArn: String?
    /// <p>A collection of matchmaking rules, formatted as a JSON string. Comments are not
    ///             allowed in JSON, but most elements support a description field.</p>
    public let ruleSetBody: String?
    /// <p>A unique identifier for the matchmaking rule set</p>
    public let ruleSetName: String?

    public init (
        creationTime: Date? = nil,
        ruleSetArn: String? = nil,
        ruleSetBody: String? = nil,
        ruleSetName: String? = nil
    )
    {
        self.creationTime = creationTime
        self.ruleSetArn = ruleSetArn
        self.ruleSetBody = ruleSetBody
        self.ruleSetName = ruleSetName
    }
}

extension MatchmakingTicket: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configurationArn = "ConfigurationArn"
        case configurationName = "ConfigurationName"
        case endTime = "EndTime"
        case estimatedWaitTime = "EstimatedWaitTime"
        case gameSessionConnectionInfo = "GameSessionConnectionInfo"
        case players = "Players"
        case startTime = "StartTime"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case statusReason = "StatusReason"
        case ticketId = "TicketId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationArn = configurationArn {
            try encodeContainer.encode(configurationArn, forKey: .configurationArn)
        }
        if let configurationName = configurationName {
            try encodeContainer.encode(configurationName, forKey: .configurationName)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let estimatedWaitTime = estimatedWaitTime {
            try encodeContainer.encode(estimatedWaitTime, forKey: .estimatedWaitTime)
        }
        if let gameSessionConnectionInfo = gameSessionConnectionInfo {
            try encodeContainer.encode(gameSessionConnectionInfo, forKey: .gameSessionConnectionInfo)
        }
        if let players = players {
            var playersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .players)
            for playerlist0 in players {
                try playersContainer.encode(playerlist0)
            }
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let ticketId = ticketId {
            try encodeContainer.encode(ticketId, forKey: .ticketId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ticketId)
        ticketId = ticketIdDecoded
        let configurationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configurationName)
        configurationName = configurationNameDecoded
        let configurationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configurationArn)
        configurationArn = configurationArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MatchmakingConfigurationStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let playersContainer = try containerValues.decodeIfPresent([Player?].self, forKey: .players)
        var playersDecoded0:[Player]? = nil
        if let playersContainer = playersContainer {
            playersDecoded0 = [Player]()
            for structure0 in playersContainer {
                if let structure0 = structure0 {
                    playersDecoded0?.append(structure0)
                }
            }
        }
        players = playersDecoded0
        let gameSessionConnectionInfoDecoded = try containerValues.decodeIfPresent(GameSessionConnectionInfo.self, forKey: .gameSessionConnectionInfo)
        gameSessionConnectionInfo = gameSessionConnectionInfoDecoded
        let estimatedWaitTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .estimatedWaitTime)
        estimatedWaitTime = estimatedWaitTimeDecoded
    }
}

extension MatchmakingTicket: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MatchmakingTicket(configurationArn: \(String(describing: configurationArn)), configurationName: \(String(describing: configurationName)), endTime: \(String(describing: endTime)), estimatedWaitTime: \(String(describing: estimatedWaitTime)), gameSessionConnectionInfo: \(String(describing: gameSessionConnectionInfo)), players: \(String(describing: players)), startTime: \(String(describing: startTime)), status: \(String(describing: status)), statusMessage: \(String(describing: statusMessage)), statusReason: \(String(describing: statusReason)), ticketId: \(String(describing: ticketId)))"}
}

/// <p>Ticket generated to track the progress of a matchmaking request. Each ticket is
///             uniquely identified by a ticket ID, supplied by the requester, when creating a
///             matchmaking request with <a>StartMatchmaking</a>. Tickets can be retrieved by
///             calling <a>DescribeMatchmaking</a> with the ticket ID.</p>
public struct MatchmakingTicket: Equatable {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) associated with the GameLift matchmaking configuration resource that is used with this ticket.</p>
    public let configurationArn: String?
    /// <p>Name of the <a>MatchmakingConfiguration</a> that is used with this
    ///             ticket. Matchmaking configurations determine how players are grouped into a match and
    ///             how a new game session is created for the match.</p>
    public let configurationName: String?
    /// <p>Time stamp indicating when this matchmaking request stopped being processed due to
    ///             success, failure, or cancellation. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let endTime: Date?
    /// <p>Average amount of time (in seconds) that players are currently waiting for a match.
    ///             If there is not enough recent data, this property may be empty.</p>
    public let estimatedWaitTime: Int?
    /// <p>Identifier and connection information of the game session created for the match. This
    ///             information is added to the ticket only after the matchmaking request has been
    ///             successfully completed. This parameter is not set when FlexMatch is being used without
    ///             GameLift hosting.</p>
    public let gameSessionConnectionInfo: GameSessionConnectionInfo?
    /// <p>A set of <code>Player</code> objects, each representing a player to find matches
    ///             for. Players are identified by a unique player ID and may include latency data for use
    ///             during matchmaking. If the ticket is in status <code>COMPLETED</code>, the
    ///             <code>Player</code> objects include the team the players were assigned to in the
    ///             resulting match.</p>
    public let players: [Player]?
    /// <p>Time stamp indicating when this matchmaking request was received. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let startTime: Date?
    /// <p>Current status of the matchmaking request.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>QUEUED</b> -- The matchmaking request has been
    ///                     received and is currently waiting to be processed.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>SEARCHING</b> -- The matchmaking request is
    ///                     currently being processed. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>REQUIRES_ACCEPTANCE</b> -- A match has been
    ///                     proposed and the players must accept the match (see <a>AcceptMatch</a>). This status is used only with requests that use a matchmaking configuration
    ///                     with a player acceptance requirement.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>PLACING</b> -- The FlexMatch engine has matched
    ///                     players and is in the process of placing a new game session for the
    ///                     match.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>COMPLETED</b> -- Players have been matched and a
    ///                     game session is ready to host the players. A ticket in this state contains the
    ///                     necessary connection information for players.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>FAILED</b> -- The matchmaking request was not
    ///                     completed.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>CANCELLED</b> -- The matchmaking request was
    ///                     canceled. This may be the result of a call to <a>StopMatchmaking</a>
    ///                     or a proposed match that one or more players failed to accept.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>TIMED_OUT</b> -- The matchmaking request was not
    ///                     successful within the duration specified in the matchmaking configuration.
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <note>
    ///             <p>Matchmaking requests that fail to successfully complete (statuses FAILED,
    ///                 CANCELLED, TIMED_OUT) can be resubmitted as new requests with new ticket
    ///                 IDs.</p>
    ///         </note>
    public let status: MatchmakingConfigurationStatus?
    /// <p>Additional information about the current status.</p>
    public let statusMessage: String?
    /// <p>Code to explain the current status. For example, a status reason may indicate when
    ///             a ticket has returned to <code>SEARCHING</code> status after a proposed match fails to
    ///             receive player acceptances.</p>
    public let statusReason: String?
    /// <p>A unique identifier for a matchmaking ticket.</p>
    public let ticketId: String?

    public init (
        configurationArn: String? = nil,
        configurationName: String? = nil,
        endTime: Date? = nil,
        estimatedWaitTime: Int? = nil,
        gameSessionConnectionInfo: GameSessionConnectionInfo? = nil,
        players: [Player]? = nil,
        startTime: Date? = nil,
        status: MatchmakingConfigurationStatus? = nil,
        statusMessage: String? = nil,
        statusReason: String? = nil,
        ticketId: String? = nil
    )
    {
        self.configurationArn = configurationArn
        self.configurationName = configurationName
        self.endTime = endTime
        self.estimatedWaitTime = estimatedWaitTime
        self.gameSessionConnectionInfo = gameSessionConnectionInfo
        self.players = players
        self.startTime = startTime
        self.status = status
        self.statusMessage = statusMessage
        self.statusReason = statusReason
        self.ticketId = ticketId
    }
}

public enum MetricName {
    case activatinggamesessions
    case activegamesessions
    case activeinstances
    case availablegamesessions
    case availableplayersessions
    case currentplayersessions
    case idleinstances
    case percentavailablegamesessions
    case percentidleinstances
    case queuedepth
    case waittime
    case sdkUnknown(String)
}

extension MetricName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MetricName] {
        return [
            .activatinggamesessions,
            .activegamesessions,
            .activeinstances,
            .availablegamesessions,
            .availableplayersessions,
            .currentplayersessions,
            .idleinstances,
            .percentavailablegamesessions,
            .percentidleinstances,
            .queuedepth,
            .waittime,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .activatinggamesessions: return "ActivatingGameSessions"
        case .activegamesessions: return "ActiveGameSessions"
        case .activeinstances: return "ActiveInstances"
        case .availablegamesessions: return "AvailableGameSessions"
        case .availableplayersessions: return "AvailablePlayerSessions"
        case .currentplayersessions: return "CurrentPlayerSessions"
        case .idleinstances: return "IdleInstances"
        case .percentavailablegamesessions: return "PercentAvailableGameSessions"
        case .percentidleinstances: return "PercentIdleInstances"
        case .queuedepth: return "QueueDepth"
        case .waittime: return "WaitTime"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MetricName(rawValue: rawValue) ?? MetricName.sdkUnknown(rawValue)
    }
}

extension NotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NotFoundException(message: \(String(describing: message)))"}
}

extension NotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A service resource associated with the request could not be found. Clients should
///             not retry such requests.</p>
public struct NotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Equatable {
    public let message: String?
}

extension NotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum OperatingSystem {
    case amazonLinux
    case amazonLinux2
    case windows2012
    case sdkUnknown(String)
}

extension OperatingSystem : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OperatingSystem] {
        return [
            .amazonLinux,
            .amazonLinux2,
            .windows2012,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .amazonLinux: return "AMAZON_LINUX"
        case .amazonLinux2: return "AMAZON_LINUX_2"
        case .windows2012: return "WINDOWS_2012"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OperatingSystem(rawValue: rawValue) ?? OperatingSystem.sdkUnknown(rawValue)
    }
}

extension OutOfCapacityException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OutOfCapacityException(message: \(String(describing: message)))"}
}

extension OutOfCapacityException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: OutOfCapacityExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified game server group has no available game servers to fulfill a
///             <code>ClaimGameServer</code> request. Clients can retry such requests immediately
///             or after a waiting period.
///
///         </p>
public struct OutOfCapacityException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct OutOfCapacityExceptionBody: Equatable {
    public let message: String?
}

extension OutOfCapacityExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PlacedPlayerSession: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case playerId = "PlayerId"
        case playerSessionId = "PlayerSessionId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let playerId = playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let playerSessionId = playerSessionId {
            try encodeContainer.encode(playerSessionId, forKey: .playerSessionId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let playerSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerSessionId)
        playerSessionId = playerSessionIdDecoded
    }
}

extension PlacedPlayerSession: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PlacedPlayerSession(playerId: \(String(describing: playerId)), playerSessionId: \(String(describing: playerSessionId)))"}
}

/// <p>Information about a player session that was created as part of a <a>StartGameSessionPlacement</a> request. This object contains only the player
///         ID and player session ID. To retrieve full details on a player session, call <a>DescribePlayerSessions</a> with the player session ID.</p>
///          <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>CreatePlayerSession</a> |
///                     <a>CreatePlayerSessions</a> |
///                     <a>DescribePlayerSessions</a> |
///                     <a>StartGameSessionPlacement</a> |
///                     <a>DescribeGameSessionPlacement</a> |
///                     <a>StopGameSessionPlacement</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a>
///          </p>
public struct PlacedPlayerSession: Equatable {
    /// <p>A unique identifier for a player that is associated with this player session.</p>
    public let playerId: String?
    /// <p>A unique identifier for a player session.</p>
    public let playerSessionId: String?

    public init (
        playerId: String? = nil,
        playerSessionId: String? = nil
    )
    {
        self.playerId = playerId
        self.playerSessionId = playerSessionId
    }
}

extension Player: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case latencyInMs = "LatencyInMs"
        case playerAttributes = "PlayerAttributes"
        case playerId = "PlayerId"
        case team = "Team"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let latencyInMs = latencyInMs {
            var latencyInMsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .latencyInMs)
            for (dictKey0, latencymap0) in latencyInMs {
                try latencyInMsContainer.encode(latencymap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let playerAttributes = playerAttributes {
            var playerAttributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .playerAttributes)
            for (dictKey0, playerattributemap0) in playerAttributes {
                try playerAttributesContainer.encode(playerattributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let playerId = playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let team = team {
            try encodeContainer.encode(team, forKey: .team)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let playerAttributesContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .playerAttributes)
        var playerAttributesDecoded0: [String:AttributeValue]? = nil
        if let playerAttributesContainer = playerAttributesContainer {
            playerAttributesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in playerAttributesContainer {
                if let attributevalue0 = attributevalue0 {
                    playerAttributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        playerAttributes = playerAttributesDecoded0
        let teamDecoded = try containerValues.decodeIfPresent(String.self, forKey: .team)
        team = teamDecoded
        let latencyInMsContainer = try containerValues.decodeIfPresent([String: Int?].self, forKey: .latencyInMs)
        var latencyInMsDecoded0: [String:Int]? = nil
        if let latencyInMsContainer = latencyInMsContainer {
            latencyInMsDecoded0 = [String:Int]()
            for (key0, positiveinteger0) in latencyInMsContainer {
                if let positiveinteger0 = positiveinteger0 {
                    latencyInMsDecoded0?[key0] = positiveinteger0
                }
            }
        }
        latencyInMs = latencyInMsDecoded0
    }
}

extension Player: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Player(latencyInMs: \(String(describing: latencyInMs)), playerAttributes: \(String(describing: playerAttributes)), playerId: \(String(describing: playerId)), team: \(String(describing: team)))"}
}

/// <p>Represents a player in matchmaking. When starting a matchmaking request, a player
///             has a player ID, attributes, and may have latency data. Team information is added after
///             a match has been successfully completed.</p>
public struct Player: Equatable {
    /// <p>A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to AWS Regions. If this property is present, FlexMatch considers placing the match only
    ///             in Regions for which latency is reported. </p>
    ///         <p>If a matchmaker has a rule that evaluates player latency, players must report
    ///             latency in order to be matched. If no latency is reported in this scenario, FlexMatch
    ///             assumes that no Regions are available to the player and the ticket is not matchable.
    ///         </p>
    public let latencyInMs: [String:Int]?
    /// <p>A collection of key:value pairs containing player information for use in matchmaking.
    ///             Player attribute keys must match the <i>playerAttributes</i> used in a
    ///             matchmaking rule set. Example: <code>"PlayerAttributes": {"skill": {"N": "23"},
    ///                 "gameMode": {"S": "deathmatch"}}</code>.</p>
    public let playerAttributes: [String:AttributeValue]?
    /// <p>A unique identifier for a player</p>
    public let playerId: String?
    /// <p>Name of the team that the player is assigned to in a match. Team names are defined
    ///             in a matchmaking rule set.</p>
    public let team: String?

    public init (
        latencyInMs: [String:Int]? = nil,
        playerAttributes: [String:AttributeValue]? = nil,
        playerId: String? = nil,
        team: String? = nil
    )
    {
        self.latencyInMs = latencyInMs
        self.playerAttributes = playerAttributes
        self.playerId = playerId
        self.team = team
    }
}

extension PlayerLatency: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case latencyInMilliseconds = "LatencyInMilliseconds"
        case playerId = "PlayerId"
        case regionIdentifier = "RegionIdentifier"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if latencyInMilliseconds != 0.0 {
            try encodeContainer.encode(latencyInMilliseconds, forKey: .latencyInMilliseconds)
        }
        if let playerId = playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let regionIdentifier = regionIdentifier {
            try encodeContainer.encode(regionIdentifier, forKey: .regionIdentifier)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let regionIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionIdentifier)
        regionIdentifier = regionIdentifierDecoded
        let latencyInMillisecondsDecoded = try containerValues.decode(Float.self, forKey: .latencyInMilliseconds)
        latencyInMilliseconds = latencyInMillisecondsDecoded
    }
}

extension PlayerLatency: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PlayerLatency(latencyInMilliseconds: \(String(describing: latencyInMilliseconds)), playerId: \(String(describing: playerId)), regionIdentifier: \(String(describing: regionIdentifier)))"}
}

/// <p>Regional latency information for a player, used when requesting a new game session
///         with <a>StartGameSessionPlacement</a>. This value indicates the amount of
///         time lag that exists when the player is connected to a fleet in the specified Region.
///         The relative difference between a player's latency values for multiple Regions are used
///         to determine which fleets are best suited to place a new game session for the player.
///     </p>
public struct PlayerLatency: Equatable {
    /// <p>Amount of time that represents the time lag experienced by the player when
    ///         connected to the specified Region.</p>
    public let latencyInMilliseconds: Float
    /// <p>A unique identifier for a player associated with the latency data.</p>
    public let playerId: String?
    /// <p>Name of the Region that is associated with the latency value.</p>
    public let regionIdentifier: String?

    public init (
        latencyInMilliseconds: Float = 0.0,
        playerId: String? = nil,
        regionIdentifier: String? = nil
    )
    {
        self.latencyInMilliseconds = latencyInMilliseconds
        self.playerId = playerId
        self.regionIdentifier = regionIdentifier
    }
}

extension PlayerLatencyPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maximumIndividualPlayerLatencyMilliseconds = "MaximumIndividualPlayerLatencyMilliseconds"
        case policyDurationSeconds = "PolicyDurationSeconds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maximumIndividualPlayerLatencyMilliseconds = maximumIndividualPlayerLatencyMilliseconds {
            try encodeContainer.encode(maximumIndividualPlayerLatencyMilliseconds, forKey: .maximumIndividualPlayerLatencyMilliseconds)
        }
        if let policyDurationSeconds = policyDurationSeconds {
            try encodeContainer.encode(policyDurationSeconds, forKey: .policyDurationSeconds)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumIndividualPlayerLatencyMillisecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumIndividualPlayerLatencyMilliseconds)
        maximumIndividualPlayerLatencyMilliseconds = maximumIndividualPlayerLatencyMillisecondsDecoded
        let policyDurationSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .policyDurationSeconds)
        policyDurationSeconds = policyDurationSecondsDecoded
    }
}

extension PlayerLatencyPolicy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PlayerLatencyPolicy(maximumIndividualPlayerLatencyMilliseconds: \(String(describing: maximumIndividualPlayerLatencyMilliseconds)), policyDurationSeconds: \(String(describing: policyDurationSeconds)))"}
}

/// <p>Sets a latency cap for individual players when placing a game session. With a latency
///             policy in force, a game session cannot be placed in a fleet location where a player
///             reports latency higher than the cap. Latency policies are used only with placement
///             request that provide player latency information. Player latency policies can be stacked
///             to gradually relax latency requirements over time. </p>
///         <p>Latency policies are part of a <a>GameSessionQueue</a>.</p>
public struct PlayerLatencyPolicy: Equatable {
    /// <p>The maximum latency value that is allowed for any player, in milliseconds. All
    ///             policies must have a value set for this property.</p>
    public let maximumIndividualPlayerLatencyMilliseconds: Int?
    /// <p>The length of time, in seconds, that the policy is enforced while placing a new
    ///             game session. A null value for this property means that the policy is enforced until the
    ///             queue times out.</p>
    public let policyDurationSeconds: Int?

    public init (
        maximumIndividualPlayerLatencyMilliseconds: Int? = nil,
        policyDurationSeconds: Int? = nil
    )
    {
        self.maximumIndividualPlayerLatencyMilliseconds = maximumIndividualPlayerLatencyMilliseconds
        self.policyDurationSeconds = policyDurationSeconds
    }
}

extension PlayerSession: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case dnsName = "DnsName"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case gameSessionId = "GameSessionId"
        case ipAddress = "IpAddress"
        case playerData = "PlayerData"
        case playerId = "PlayerId"
        case playerSessionId = "PlayerSessionId"
        case port = "Port"
        case status = "Status"
        case terminationTime = "TerminationTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dnsName = dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let fleetArn = fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let playerData = playerData {
            try encodeContainer.encode(playerData, forKey: .playerData)
        }
        if let playerId = playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let playerSessionId = playerSessionId {
            try encodeContainer.encode(playerSessionId, forKey: .playerSessionId)
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let terminationTime = terminationTime {
            try encodeContainer.encode(terminationTime.timeIntervalSince1970, forKey: .terminationTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerSessionId)
        playerSessionId = playerSessionIdDecoded
        let playerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let terminationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .terminationTime)
        terminationTime = terminationTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PlayerSessionStatus.self, forKey: .status)
        status = statusDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let playerDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerData)
        playerData = playerDataDecoded
    }
}

extension PlayerSession: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PlayerSession(creationTime: \(String(describing: creationTime)), dnsName: \(String(describing: dnsName)), fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)), gameSessionId: \(String(describing: gameSessionId)), ipAddress: \(String(describing: ipAddress)), playerData: \(String(describing: playerData)), playerId: \(String(describing: playerId)), playerSessionId: \(String(describing: playerSessionId)), port: \(String(describing: port)), status: \(String(describing: status)), terminationTime: \(String(describing: terminationTime)))"}
}

/// <p>Represents a player session. Player sessions are created either for a specific game
///             session, or as part of a game session placement or matchmaking request. A player session
///             can represents a reserved player slot in a game session (when status is
///                 <code>RESERVED</code>) or actual player activity in a game session (when status is
///                 <code>ACTIVE</code>). A player session object, including player data, is
///             automatically passed to a game session when the player connects to the game session and
///             is validated. After the game session ends, player sessions information is retained for
///             30 days and then removed.</p>
///          <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>CreatePlayerSession</a> |
///                     <a>CreatePlayerSessions</a> |
///                     <a>DescribePlayerSessions</a> |
///                     <a>StartGameSessionPlacement</a> |
///                     <a>DescribeGameSessionPlacement</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a>
///          </p>
public struct PlayerSession: Equatable {
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>The DNS identifier assigned to the instance that is running the game session. Values have
    ///             the following format:</p>
    ///          <ul>
    ///             <li>
    ///                <p>TLS-enabled fleets: <code><unique identifier>.<region identifier>.amazongamelift.com</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Non-TLS-enabled fleets: <code>ec2-<unique identifier>.compute.amazonaws.com</code>. (See
    ///             <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses">Amazon EC2 Instance IP Addressing</a>.)</p>
    ///             </li>
    ///          </ul>
    ///             <p>When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.</p>
    public let dnsName: String?
    /// <p>
    ///             The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) associated with the GameLift fleet that the player's game session is running on.
    ///         </p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet that the player's game session is running on.</p>
    public let fleetId: String?
    /// <p>A unique identifier for the game session that the player session is connected to.</p>
    public let gameSessionId: String?
    /// <p>The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.</p>
    public let ipAddress: String?
    /// <p>Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game. </p>
    public let playerData: String?
    /// <p>A unique identifier for a player that is associated with this player session.</p>
    public let playerId: String?
    /// <p>A unique identifier for a player session.</p>
    public let playerSessionId: String?
    /// <p>Port number for the game session. To connect to a Amazon GameLift server process, an app
    ///         needs both the IP address and port number.</p>
    public let port: Int?
    /// <p>Current status of the player session.</p>
    ///          <p>Possible player session statuses include the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>RESERVED</b> -- The player session request has been
    ///                 received, but the player has not yet connected to the server process and/or been
    ///                 validated. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>ACTIVE</b> -- The player has been validated by the
    ///                 server process and is currently connected.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>COMPLETED</b> -- The player connection has been
    ///                 dropped.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>TIMEDOUT</b> -- A player session request was
    ///                 received, but the player did not connect and/or was not validated within the
    ///                 timeout limit (60 seconds).</p>
    ///             </li>
    ///          </ul>
    public let status: PlayerSessionStatus?
    /// <p>A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let terminationTime: Date?

    public init (
        creationTime: Date? = nil,
        dnsName: String? = nil,
        fleetArn: String? = nil,
        fleetId: String? = nil,
        gameSessionId: String? = nil,
        ipAddress: String? = nil,
        playerData: String? = nil,
        playerId: String? = nil,
        playerSessionId: String? = nil,
        port: Int? = nil,
        status: PlayerSessionStatus? = nil,
        terminationTime: Date? = nil
    )
    {
        self.creationTime = creationTime
        self.dnsName = dnsName
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.gameSessionId = gameSessionId
        self.ipAddress = ipAddress
        self.playerData = playerData
        self.playerId = playerId
        self.playerSessionId = playerSessionId
        self.port = port
        self.status = status
        self.terminationTime = terminationTime
    }
}

public enum PlayerSessionCreationPolicy {
    case acceptAll
    case denyAll
    case sdkUnknown(String)
}

extension PlayerSessionCreationPolicy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PlayerSessionCreationPolicy] {
        return [
            .acceptAll,
            .denyAll,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .acceptAll: return "ACCEPT_ALL"
        case .denyAll: return "DENY_ALL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PlayerSessionCreationPolicy(rawValue: rawValue) ?? PlayerSessionCreationPolicy.sdkUnknown(rawValue)
    }
}

public enum PlayerSessionStatus {
    case active
    case completed
    case reserved
    case timedout
    case sdkUnknown(String)
}

extension PlayerSessionStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PlayerSessionStatus] {
        return [
            .active,
            .completed,
            .reserved,
            .timedout,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .completed: return "COMPLETED"
        case .reserved: return "RESERVED"
        case .timedout: return "TIMEDOUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PlayerSessionStatus(rawValue: rawValue) ?? PlayerSessionStatus.sdkUnknown(rawValue)
    }
}

public enum PolicyType {
    case rulebased
    case targetbased
    case sdkUnknown(String)
}

extension PolicyType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PolicyType] {
        return [
            .rulebased,
            .targetbased,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .rulebased: return "RuleBased"
        case .targetbased: return "TargetBased"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PolicyType(rawValue: rawValue) ?? PolicyType.sdkUnknown(rawValue)
    }
}

extension PriorityConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case locationOrder = "LocationOrder"
        case priorityOrder = "PriorityOrder"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationOrder = locationOrder {
            var locationOrderContainer = encodeContainer.nestedUnkeyedContainer(forKey: .locationOrder)
            for locationlist0 in locationOrder {
                try locationOrderContainer.encode(locationlist0)
            }
        }
        if let priorityOrder = priorityOrder {
            var priorityOrderContainer = encodeContainer.nestedUnkeyedContainer(forKey: .priorityOrder)
            for prioritytypelist0 in priorityOrder {
                try priorityOrderContainer.encode(prioritytypelist0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let priorityOrderContainer = try containerValues.decodeIfPresent([PriorityType?].self, forKey: .priorityOrder)
        var priorityOrderDecoded0:[PriorityType]? = nil
        if let priorityOrderContainer = priorityOrderContainer {
            priorityOrderDecoded0 = [PriorityType]()
            for string0 in priorityOrderContainer {
                if let string0 = string0 {
                    priorityOrderDecoded0?.append(string0)
                }
            }
        }
        priorityOrder = priorityOrderDecoded0
        let locationOrderContainer = try containerValues.decodeIfPresent([String?].self, forKey: .locationOrder)
        var locationOrderDecoded0:[String]? = nil
        if let locationOrderContainer = locationOrderContainer {
            locationOrderDecoded0 = [String]()
            for string0 in locationOrderContainer {
                if let string0 = string0 {
                    locationOrderDecoded0?.append(string0)
                }
            }
        }
        locationOrder = locationOrderDecoded0
    }
}

extension PriorityConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PriorityConfiguration(locationOrder: \(String(describing: locationOrder)), priorityOrder: \(String(describing: priorityOrder)))"}
}

/// <p>Custom prioritization settings for use by a game session queue when placing new game
///             sessions with available game servers. When defined, this configuration replaces the
///             default FleetIQ prioritization process, which is as follows:</p>
///         <ul>
///             <li>
///                 <p>If player latency data is included in a game session request, destinations and
///                     locations are prioritized first based on lowest average latency (1), then on
///                     lowest hosting cost (2), then on destination list order (3), and finally on
///                     location (alphabetical) (4). This approach ensures that the queue's top priority
///                     is to place game sessions where average player latency is lowest, and--if
///                     latency is the same--where the hosting cost is less, etc.</p>
///             </li>
///             <li>
///                 <p>If player latency data is not included, destinations and locations are
///                     prioritized first on destination list order (1), and then on location
///                     (alphabetical) (2). This approach ensures that the queue's top priority is to
///                     place game sessions on the first destination fleet listed. If that fleet has
///                     multiple locations, the game session is placed on the first location (when
///                     listed alphabetically).</p>
///             </li>
///          </ul>
///         <p>Changing the priority order will affect how game sessions are placed.</p>
///         <p>Priority configurations are part of a <a>GameSessionQueue</a>.</p>
public struct PriorityConfiguration: Equatable {
    /// <p>The prioritization order to use for fleet locations, when the
    ///                 <code>PriorityOrder</code> property includes <code>LOCATION</code>. Locations are
    ///             identified by AWS Region codes such as <code>us-west-2</code>. Each location can only be
    ///             listed once. </p>
    public let locationOrder: [String]?
    /// <p>The recommended sequence to use when prioritizing where to place new game sessions.
    ///             Each type can only be listed once.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>LATENCY</code> -- FleetIQ prioritizes locations where the average player
    ///                     latency (provided in each game session request) is lowest. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>COST</code> -- FleetIQ prioritizes destinations with the lowest current
    ///                     hosting costs. Cost is evaluated based on the location, instance type, and fleet
    ///                     type (Spot or On-Demand) for each destination in the queue.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>DESTINATION</code> -- FleetIQ prioritizes based on the order that
    ///                     destinations are listed in the queue configuration.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>LOCATION</code> -- FleetIQ prioritizes based on the provided order of
    ///                     locations, as defined in <code>LocationOrder</code>. </p>
    ///             </li>
    ///          </ul>
    public let priorityOrder: [PriorityType]?

    public init (
        locationOrder: [String]? = nil,
        priorityOrder: [PriorityType]? = nil
    )
    {
        self.locationOrder = locationOrder
        self.priorityOrder = priorityOrder
    }
}

public enum PriorityType {
    case cost
    case destination
    case latency
    case location
    case sdkUnknown(String)
}

extension PriorityType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PriorityType] {
        return [
            .cost,
            .destination,
            .latency,
            .location,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cost: return "COST"
        case .destination: return "DESTINATION"
        case .latency: return "LATENCY"
        case .location: return "LOCATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PriorityType(rawValue: rawValue) ?? PriorityType.sdkUnknown(rawValue)
    }
}

public enum ProtectionPolicy {
    case fullprotection
    case noprotection
    case sdkUnknown(String)
}

extension ProtectionPolicy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ProtectionPolicy] {
        return [
            .fullprotection,
            .noprotection,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .fullprotection: return "FullProtection"
        case .noprotection: return "NoProtection"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ProtectionPolicy(rawValue: rawValue) ?? ProtectionPolicy.sdkUnknown(rawValue)
    }
}

public struct PutScalingPolicyInputBodyMiddleware: Middleware {
    public let id: String = "PutScalingPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutScalingPolicyOutputError>
}

extension PutScalingPolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutScalingPolicyInput(comparisonOperator: \(String(describing: comparisonOperator)), evaluationPeriods: \(String(describing: evaluationPeriods)), fleetId: \(String(describing: fleetId)), metricName: \(String(describing: metricName)), name: \(String(describing: name)), policyType: \(String(describing: policyType)), scalingAdjustment: \(String(describing: scalingAdjustment)), scalingAdjustmentType: \(String(describing: scalingAdjustmentType)), targetConfiguration: \(String(describing: targetConfiguration)), threshold: \(String(describing: threshold)))"}
}

extension PutScalingPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case evaluationPeriods = "EvaluationPeriods"
        case fleetId = "FleetId"
        case metricName = "MetricName"
        case name = "Name"
        case policyType = "PolicyType"
        case scalingAdjustment = "ScalingAdjustment"
        case scalingAdjustmentType = "ScalingAdjustmentType"
        case targetConfiguration = "TargetConfiguration"
        case threshold = "Threshold"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let evaluationPeriods = evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policyType = policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if scalingAdjustment != 0 {
            try encodeContainer.encode(scalingAdjustment, forKey: .scalingAdjustment)
        }
        if let scalingAdjustmentType = scalingAdjustmentType {
            try encodeContainer.encode(scalingAdjustmentType.rawValue, forKey: .scalingAdjustmentType)
        }
        if let targetConfiguration = targetConfiguration {
            try encodeContainer.encode(targetConfiguration, forKey: .targetConfiguration)
        }
        if threshold != 0.0 {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
    }
}

public struct PutScalingPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "PutScalingPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutScalingPolicyOutputError>
}

public struct PutScalingPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "PutScalingPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutScalingPolicyOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct PutScalingPolicyInput: Equatable {
    /// <p>Comparison operator to use when measuring the metric against the threshold
    ///             value.</p>
    public let comparisonOperator: ComparisonOperatorType?
    /// <p>Length of time (in minutes) the metric must be at or beyond the threshold before a
    ///             scaling event is triggered.</p>
    public let evaluationPeriods: Int?
    /// <p>A unique identifier for the fleet to apply this policy to. You can use either the fleet ID or ARN value. The fleet
    ///             cannot be in any of the following statuses: ERROR or DELETING.</p>
    public let fleetId: String?
    /// <p>Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment. For
    ///             detailed descriptions of fleet metrics, see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/monitoring-cloudwatch.html">Monitor Amazon GameLift
    ///                 with Amazon CloudWatch</a>. </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <b>ActivatingGameSessions</b> -- Game sessions in
    ///                     the process of being created.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>ActiveGameSessions</b> -- Game sessions that
    ///                     are currently running.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>ActiveInstances</b> -- Fleet instances that
    ///                     are currently running at least one game session.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>AvailableGameSessions</b> -- Additional game
    ///                     sessions that fleet could host simultaneously, given current capacity.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>AvailablePlayerSessions</b> -- Empty player
    ///                     slots in currently active game sessions. This includes game sessions that are
    ///                     not currently accepting players. Reserved player slots are not
    ///                     included.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>CurrentPlayerSessions</b> -- Player slots in
    ///                     active game sessions that are being used by a player or are reserved for a
    ///                     player. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>IdleInstances</b> -- Active instances that are
    ///                     currently hosting zero game sessions. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>PercentAvailableGameSessions</b> -- Unused
    ///                     percentage of the total number of game sessions that a fleet could host
    ///                     simultaneously, given current capacity. Use this metric for a target-based
    ///                     scaling policy.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>PercentIdleInstances</b> -- Percentage of the
    ///                     total number of active instances that are hosting zero game sessions.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>QueueDepth</b> -- Pending game session
    ///                     placement requests, in any queue, where the current fleet is the top-priority
    ///                     destination.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>WaitTime</b> -- Current wait time for pending
    ///                     game session placement requests, in any queue, where the current fleet is the
    ///                     top-priority destination. </p>
    ///             </li>
    ///          </ul>
    public let metricName: MetricName?
    /// <p>A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique. A fleet can have only one scaling policy with the same name.</p>
    public let name: String?
    /// <p>The type of scaling policy to create. For a target-based policy, set the parameter
    ///                 <i>MetricName</i> to 'PercentAvailableGameSessions' and specify a
    ///                 <i>TargetConfiguration</i>. For a rule-based policy set the following
    ///             parameters: <i>MetricName</i>, <i>ComparisonOperator</i>,
    ///                 <i>Threshold</i>, <i>EvaluationPeriods</i>,
    ///                 <i>ScalingAdjustmentType</i>, and
    ///                 <i>ScalingAdjustment</i>.</p>
    public let policyType: PolicyType?
    /// <p>Amount of adjustment to make, based on the scaling adjustment type.</p>
    public let scalingAdjustment: Int
    /// <p>The type of adjustment to make to a fleet's instance count (see <a>FleetCapacity</a>):</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>ChangeInCapacity</b> -- add (or subtract) the
    ///                     scaling adjustment value from the current instance count. Positive values scale
    ///                     up while negative values scale down.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>ExactCapacity</b> -- set the instance count to the
    ///                     scaling adjustment value.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>PercentChangeInCapacity</b> -- increase or reduce
    ///                     the current instance count by the scaling adjustment, read as a percentage.
    ///                     Positive values scale up while negative values scale down; for example, a value
    ///                     of "-10" scales the fleet down by 10%.</p>
    ///             </li>
    ///          </ul>
    public let scalingAdjustmentType: ScalingAdjustmentType?
    /// <p>An object that contains settings for a target-based scaling policy.</p>
    public let targetConfiguration: TargetConfiguration?
    /// <p>Metric value used to trigger a scaling event.</p>
    public let threshold: Double

    public init (
        comparisonOperator: ComparisonOperatorType? = nil,
        evaluationPeriods: Int? = nil,
        fleetId: String? = nil,
        metricName: MetricName? = nil,
        name: String? = nil,
        policyType: PolicyType? = nil,
        scalingAdjustment: Int = 0,
        scalingAdjustmentType: ScalingAdjustmentType? = nil,
        targetConfiguration: TargetConfiguration? = nil,
        threshold: Double = 0.0
    )
    {
        self.comparisonOperator = comparisonOperator
        self.evaluationPeriods = evaluationPeriods
        self.fleetId = fleetId
        self.metricName = metricName
        self.name = name
        self.policyType = policyType
        self.scalingAdjustment = scalingAdjustment
        self.scalingAdjustmentType = scalingAdjustmentType
        self.targetConfiguration = targetConfiguration
        self.threshold = threshold
    }
}

struct PutScalingPolicyInputBody: Equatable {
    public let name: String?
    public let fleetId: String?
    public let scalingAdjustment: Int
    public let scalingAdjustmentType: ScalingAdjustmentType?
    public let threshold: Double
    public let comparisonOperator: ComparisonOperatorType?
    public let evaluationPeriods: Int?
    public let metricName: MetricName?
    public let policyType: PolicyType?
    public let targetConfiguration: TargetConfiguration?
}

extension PutScalingPolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case evaluationPeriods = "EvaluationPeriods"
        case fleetId = "FleetId"
        case metricName = "MetricName"
        case name = "Name"
        case policyType = "PolicyType"
        case scalingAdjustment = "ScalingAdjustment"
        case scalingAdjustmentType = "ScalingAdjustmentType"
        case targetConfiguration = "TargetConfiguration"
        case threshold = "Threshold"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let scalingAdjustmentDecoded = try containerValues.decode(Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
        let scalingAdjustmentTypeDecoded = try containerValues.decodeIfPresent(ScalingAdjustmentType.self, forKey: .scalingAdjustmentType)
        scalingAdjustmentType = scalingAdjustmentTypeDecoded
        let thresholdDecoded = try containerValues.decode(Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(ComparisonOperatorType.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(MetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let targetConfigurationDecoded = try containerValues.decodeIfPresent(TargetConfiguration.self, forKey: .targetConfiguration)
        targetConfiguration = targetConfigurationDecoded
    }
}

extension PutScalingPolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutScalingPolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutScalingPolicyOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutScalingPolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutScalingPolicyOutputResponse(name: \(String(describing: name)))"}
}

extension PutScalingPolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PutScalingPolicyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.name = output.name
        } else {
            self.name = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct PutScalingPolicyOutputResponse: Equatable {
    /// <p>A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct PutScalingPolicyOutputResponseBody: Equatable {
    public let name: String?
}

extension PutScalingPolicyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

public struct RegisterGameServerInputBodyMiddleware: Middleware {
    public let id: String = "RegisterGameServerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterGameServerInput>
    public typealias MOutput = OperationOutput<RegisterGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterGameServerOutputError>
}

extension RegisterGameServerInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterGameServerInput(connectionInfo: \(String(describing: connectionInfo)), gameServerData: \(String(describing: gameServerData)), gameServerGroupName: \(String(describing: gameServerGroupName)), gameServerId: \(String(describing: gameServerId)), instanceId: \(String(describing: instanceId)))"}
}

extension RegisterGameServerInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectionInfo = "ConnectionInfo"
        case gameServerData = "GameServerData"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
        case instanceId = "InstanceId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionInfo = connectionInfo {
            try encodeContainer.encode(connectionInfo, forKey: .connectionInfo)
        }
        if let gameServerData = gameServerData {
            try encodeContainer.encode(gameServerData, forKey: .gameServerData)
        }
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerId = gameServerId {
            try encodeContainer.encode(gameServerId, forKey: .gameServerId)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
    }
}

public struct RegisterGameServerInputHeadersMiddleware: Middleware {
    public let id: String = "RegisterGameServerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterGameServerInput>
    public typealias MOutput = OperationOutput<RegisterGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterGameServerOutputError>
}

public struct RegisterGameServerInputQueryItemMiddleware: Middleware {
    public let id: String = "RegisterGameServerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterGameServerInput>
    public typealias MOutput = OperationOutput<RegisterGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterGameServerOutputError>
}

public struct RegisterGameServerInput: Equatable {
    /// <p>Information that is needed to make inbound client connections to the game server. This
    ///             might include the IP address and port, DNS name, and other information.</p>
    public let connectionInfo: String?
    /// <p>A set of custom game server properties, formatted as a single string value. This data
    ///             is passed to a game client or service when it requests information on game servers using
    ///                 <a>ListGameServers</a> or <a>ClaimGameServer</a>. </p>
    public let gameServerData: String?
    /// <p>A unique identifier for the game server group where the game server is running.
    ///             Use either the <a>GameServerGroup</a> name or ARN value.</p>
    public let gameServerGroupName: String?
    /// <p>A custom string that uniquely identifies the game server to register.
    ///             Game server IDs are developer-defined and must be unique across all game server groups in your AWS account.</p>
    public let gameServerId: String?
    /// <p>The unique identifier for the instance where the game server is running. This ID is
    ///             available in the instance metadata. EC2 instance IDs
    ///             use a 17-character format, for example: <code>i-1234567890abcdef0</code>.</p>
    public let instanceId: String?

    public init (
        connectionInfo: String? = nil,
        gameServerData: String? = nil,
        gameServerGroupName: String? = nil,
        gameServerId: String? = nil,
        instanceId: String? = nil
    )
    {
        self.connectionInfo = connectionInfo
        self.gameServerData = gameServerData
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
        self.instanceId = instanceId
    }
}

struct RegisterGameServerInputBody: Equatable {
    public let gameServerGroupName: String?
    public let gameServerId: String?
    public let instanceId: String?
    public let connectionInfo: String?
    public let gameServerData: String?
}

extension RegisterGameServerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case connectionInfo = "ConnectionInfo"
        case gameServerData = "GameServerData"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
        case instanceId = "InstanceId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerId)
        gameServerId = gameServerIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let connectionInfoDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionInfo)
        connectionInfo = connectionInfoDecoded
        let gameServerDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerData)
        gameServerData = gameServerDataDecoded
    }
}

extension RegisterGameServerOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterGameServerOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterGameServerOutputError: Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterGameServerOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterGameServerOutputResponse(gameServer: \(String(describing: gameServer)))"}
}

extension RegisterGameServerOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RegisterGameServerOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameServer = output.gameServer
        } else {
            self.gameServer = nil
        }
    }
}

public struct RegisterGameServerOutputResponse: Equatable {
    /// <p>Object that describes the newly registered game server.</p>
    public let gameServer: GameServer?

    public init (
        gameServer: GameServer? = nil
    )
    {
        self.gameServer = gameServer
    }
}

struct RegisterGameServerOutputResponseBody: Equatable {
    public let gameServer: GameServer?
}

extension RegisterGameServerOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServer = "GameServer"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerDecoded = try containerValues.decodeIfPresent(GameServer.self, forKey: .gameServer)
        gameServer = gameServerDecoded
    }
}

public struct RequestUploadCredentialsInputBodyMiddleware: Middleware {
    public let id: String = "RequestUploadCredentialsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RequestUploadCredentialsInput>,
                  next: H) -> Swift.Result<OperationOutput<RequestUploadCredentialsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RequestUploadCredentialsInput>
    public typealias MOutput = OperationOutput<RequestUploadCredentialsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RequestUploadCredentialsOutputError>
}

extension RequestUploadCredentialsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RequestUploadCredentialsInput(buildId: \(String(describing: buildId)))"}
}

extension RequestUploadCredentialsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case buildId = "BuildId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildId = buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
    }
}

public struct RequestUploadCredentialsInputHeadersMiddleware: Middleware {
    public let id: String = "RequestUploadCredentialsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RequestUploadCredentialsInput>,
                  next: H) -> Swift.Result<OperationOutput<RequestUploadCredentialsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RequestUploadCredentialsInput>
    public typealias MOutput = OperationOutput<RequestUploadCredentialsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RequestUploadCredentialsOutputError>
}

public struct RequestUploadCredentialsInputQueryItemMiddleware: Middleware {
    public let id: String = "RequestUploadCredentialsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RequestUploadCredentialsInput>,
                  next: H) -> Swift.Result<OperationOutput<RequestUploadCredentialsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RequestUploadCredentialsInput>
    public typealias MOutput = OperationOutput<RequestUploadCredentialsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RequestUploadCredentialsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct RequestUploadCredentialsInput: Equatable {
    /// <p>A unique identifier for the build to get credentials for. You can use either the build ID or ARN value. </p>
    public let buildId: String?

    public init (
        buildId: String? = nil
    )
    {
        self.buildId = buildId
    }
}

struct RequestUploadCredentialsInputBody: Equatable {
    public let buildId: String?
}

extension RequestUploadCredentialsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case buildId = "BuildId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildId)
        buildId = buildIdDecoded
    }
}

extension RequestUploadCredentialsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RequestUploadCredentialsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RequestUploadCredentialsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RequestUploadCredentialsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RequestUploadCredentialsOutputResponse(storageLocation: \(String(describing: storageLocation)), uploadCredentials: \(String(describing: uploadCredentials)))"}
}

extension RequestUploadCredentialsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RequestUploadCredentialsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.storageLocation = output.storageLocation
            self.uploadCredentials = output.uploadCredentials
        } else {
            self.storageLocation = nil
            self.uploadCredentials = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct RequestUploadCredentialsOutputResponse: Equatable {
    /// <p>Amazon S3 path and key, identifying where the game build files are
    ///             stored.</p>
    public let storageLocation: S3Location?
    /// <p>AWS credentials required when uploading a game build to the storage location.
    ///             These credentials have a limited lifespan and are valid only for the build they were
    ///             issued for.</p>
    public let uploadCredentials: AwsCredentials?

    public init (
        storageLocation: S3Location? = nil,
        uploadCredentials: AwsCredentials? = nil
    )
    {
        self.storageLocation = storageLocation
        self.uploadCredentials = uploadCredentials
    }
}

struct RequestUploadCredentialsOutputResponseBody: Equatable {
    public let uploadCredentials: AwsCredentials?
    public let storageLocation: S3Location?
}

extension RequestUploadCredentialsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case storageLocation = "StorageLocation"
        case uploadCredentials = "UploadCredentials"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uploadCredentialsDecoded = try containerValues.decodeIfPresent(AwsCredentials.self, forKey: .uploadCredentials)
        uploadCredentials = uploadCredentialsDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(S3Location.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
    }
}

public struct ResolveAliasInputBodyMiddleware: Middleware {
    public let id: String = "ResolveAliasInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResolveAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<ResolveAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResolveAliasInput>
    public typealias MOutput = OperationOutput<ResolveAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResolveAliasOutputError>
}

extension ResolveAliasInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResolveAliasInput(aliasId: \(String(describing: aliasId)))"}
}

extension ResolveAliasInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
    }
}

public struct ResolveAliasInputHeadersMiddleware: Middleware {
    public let id: String = "ResolveAliasInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResolveAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<ResolveAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResolveAliasInput>
    public typealias MOutput = OperationOutput<ResolveAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResolveAliasOutputError>
}

public struct ResolveAliasInputQueryItemMiddleware: Middleware {
    public let id: String = "ResolveAliasInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResolveAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<ResolveAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResolveAliasInput>
    public typealias MOutput = OperationOutput<ResolveAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResolveAliasOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct ResolveAliasInput: Equatable {
    /// <p>The unique identifier of the alias that you want to retrieve a fleet ID for. You can
    ///             use either the alias ID or ARN value.</p>
    public let aliasId: String?

    public init (
        aliasId: String? = nil
    )
    {
        self.aliasId = aliasId
    }
}

struct ResolveAliasInputBody: Equatable {
    public let aliasId: String?
}

extension ResolveAliasInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
    }
}

extension ResolveAliasOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ResolveAliasOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalRoutingStrategyException" : self = .terminalRoutingStrategyException(try TerminalRoutingStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ResolveAliasOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case terminalRoutingStrategyException(TerminalRoutingStrategyException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResolveAliasOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResolveAliasOutputResponse(fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)))"}
}

extension ResolveAliasOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResolveAliasOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
        } else {
            self.fleetArn = nil
            self.fleetId = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct ResolveAliasOutputResponse: Equatable {
    /// <p>
    ///            The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) associated with the GameLift fleet resource that this alias points to.
    ///         </p>
    public let fleetArn: String?
    /// <p>The fleet identifier that the alias is pointing to.</p>
    public let fleetId: String?

    public init (
        fleetArn: String? = nil,
        fleetId: String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

struct ResolveAliasOutputResponseBody: Equatable {
    public let fleetId: String?
    public let fleetArn: String?
}

extension ResolveAliasOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
    }
}

extension ResourceCreationLimitPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case newGameSessionsPerCreator = "NewGameSessionsPerCreator"
        case policyPeriodInMinutes = "PolicyPeriodInMinutes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let newGameSessionsPerCreator = newGameSessionsPerCreator {
            try encodeContainer.encode(newGameSessionsPerCreator, forKey: .newGameSessionsPerCreator)
        }
        if let policyPeriodInMinutes = policyPeriodInMinutes {
            try encodeContainer.encode(policyPeriodInMinutes, forKey: .policyPeriodInMinutes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let newGameSessionsPerCreatorDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .newGameSessionsPerCreator)
        newGameSessionsPerCreator = newGameSessionsPerCreatorDecoded
        let policyPeriodInMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .policyPeriodInMinutes)
        policyPeriodInMinutes = policyPeriodInMinutesDecoded
    }
}

extension ResourceCreationLimitPolicy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceCreationLimitPolicy(newGameSessionsPerCreator: \(String(describing: newGameSessionsPerCreator)), policyPeriodInMinutes: \(String(describing: policyPeriodInMinutes)))"}
}

/// <p>A policy that puts limits on the number of game sessions that a player can create
///             within a specified span of time. With this policy, you can control players' ability to
///             consume available resources.</p>
///         <p>The policy is evaluated when a player tries to create a new game session. On receiving
///             a <code>CreateGameSession</code> request, GameLift checks that the player (identified by
///                 <code>CreatorId</code>) has created fewer than game session limit in the specified
///             time period.</p>
///         <p>The resource creation limit policy is included in <a>FleetAttributes</a>.</p>
public struct ResourceCreationLimitPolicy: Equatable {
    /// <p>The maximum number of game sessions that an individual can create during the policy
    ///             period. </p>
    public let newGameSessionsPerCreator: Int?
    /// <p>The time span used in evaluating the resource creation limit policy. </p>
    public let policyPeriodInMinutes: Int?

    public init (
        newGameSessionsPerCreator: Int? = nil,
        policyPeriodInMinutes: Int? = nil
    )
    {
        self.newGameSessionsPerCreator = newGameSessionsPerCreator
        self.policyPeriodInMinutes = policyPeriodInMinutes
    }
}

public struct ResumeGameServerGroupInputBodyMiddleware: Middleware {
    public let id: String = "ResumeGameServerGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResumeGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ResumeGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResumeGameServerGroupInput>
    public typealias MOutput = OperationOutput<ResumeGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResumeGameServerGroupOutputError>
}

extension ResumeGameServerGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResumeGameServerGroupInput(gameServerGroupName: \(String(describing: gameServerGroupName)), resumeActions: \(String(describing: resumeActions)))"}
}

extension ResumeGameServerGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case resumeActions = "ResumeActions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let resumeActions = resumeActions {
            var resumeActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resumeActions)
            for gameservergroupactions0 in resumeActions {
                try resumeActionsContainer.encode(gameservergroupactions0.rawValue)
            }
        }
    }
}

public struct ResumeGameServerGroupInputHeadersMiddleware: Middleware {
    public let id: String = "ResumeGameServerGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResumeGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ResumeGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResumeGameServerGroupInput>
    public typealias MOutput = OperationOutput<ResumeGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResumeGameServerGroupOutputError>
}

public struct ResumeGameServerGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "ResumeGameServerGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResumeGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ResumeGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResumeGameServerGroupInput>
    public typealias MOutput = OperationOutput<ResumeGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResumeGameServerGroupOutputError>
}

public struct ResumeGameServerGroupInput: Equatable {
    /// <p>A unique identifier for the game server group. Use either the <a>GameServerGroup</a> name or ARN value.</p>
    public let gameServerGroupName: String?
    /// <p>The activity to resume for this game server group.</p>
    public let resumeActions: [GameServerGroupAction]?

    public init (
        gameServerGroupName: String? = nil,
        resumeActions: [GameServerGroupAction]? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.resumeActions = resumeActions
    }
}

struct ResumeGameServerGroupInputBody: Equatable {
    public let gameServerGroupName: String?
    public let resumeActions: [GameServerGroupAction]?
}

extension ResumeGameServerGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case resumeActions = "ResumeActions"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let resumeActionsContainer = try containerValues.decodeIfPresent([GameServerGroupAction?].self, forKey: .resumeActions)
        var resumeActionsDecoded0:[GameServerGroupAction]? = nil
        if let resumeActionsContainer = resumeActionsContainer {
            resumeActionsDecoded0 = [GameServerGroupAction]()
            for string0 in resumeActionsContainer {
                if let string0 = string0 {
                    resumeActionsDecoded0?.append(string0)
                }
            }
        }
        resumeActions = resumeActionsDecoded0
    }
}

extension ResumeGameServerGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ResumeGameServerGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ResumeGameServerGroupOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResumeGameServerGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResumeGameServerGroupOutputResponse(gameServerGroup: \(String(describing: gameServerGroup)))"}
}

extension ResumeGameServerGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResumeGameServerGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameServerGroup = output.gameServerGroup
        } else {
            self.gameServerGroup = nil
        }
    }
}

public struct ResumeGameServerGroupOutputResponse: Equatable {
    /// <p>An object that describes the game server group resource, with the
    ///                 <code>SuspendedActions</code> property updated to reflect the resumed
    ///             activity.</p>
    public let gameServerGroup: GameServerGroup?

    public init (
        gameServerGroup: GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

struct ResumeGameServerGroupOutputResponseBody: Equatable {
    public let gameServerGroup: GameServerGroup?
}

extension ResumeGameServerGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerGroup = "GameServerGroup"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupDecoded = try containerValues.decodeIfPresent(GameServerGroup.self, forKey: .gameServerGroup)
        gameServerGroup = gameServerGroupDecoded
    }
}

extension RoutingStrategy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case message = "Message"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(RoutingStrategyType.self, forKey: .type)
        type = typeDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RoutingStrategy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RoutingStrategy(fleetId: \(String(describing: fleetId)), message: \(String(describing: message)), type: \(String(describing: type)))"}
}

/// <p>The routing configuration for a fleet alias.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>CreateAlias</a> |
///                     <a>ListAliases</a> |
///                     <a>DescribeAlias</a> |
///                     <a>UpdateAlias</a> |
///                     <a>DeleteAlias</a> |
///                     <a>ResolveAlias</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a>
///          </p>
public struct RoutingStrategy: Equatable {
    /// <p>A unique identifier for the fleet that the alias points to. This value is the fleet ID, not the fleet ARN.</p>
    public let fleetId: String?
    /// <p>The message text to be used with a terminal routing strategy.</p>
    public let message: String?
    /// <p>The type of routing strategy for the alias.</p>
    ///         <p>Possible routing types include the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>SIMPLE</b> - The alias resolves to one specific
    ///                     fleet. Use this type when routing to active fleets.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>TERMINAL</b> - The alias does not resolve to a
    ///                     fleet but instead can be used to display a message to the user. A terminal alias
    ///                     throws a TerminalRoutingStrategyException with the <a>RoutingStrategy</a> message embedded.</p>
    ///             </li>
    ///          </ul>
    public let type: RoutingStrategyType?

    public init (
        fleetId: String? = nil,
        message: String? = nil,
        type: RoutingStrategyType? = nil
    )
    {
        self.fleetId = fleetId
        self.message = message
        self.type = type
    }
}

public enum RoutingStrategyType {
    case simple
    case terminal
    case sdkUnknown(String)
}

extension RoutingStrategyType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RoutingStrategyType] {
        return [
            .simple,
            .terminal,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .simple: return "SIMPLE"
        case .terminal: return "TERMINAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RoutingStrategyType(rawValue: rawValue) ?? RoutingStrategyType.sdkUnknown(rawValue)
    }
}

extension RuntimeConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameSessionActivationTimeoutSeconds = "GameSessionActivationTimeoutSeconds"
        case maxConcurrentGameSessionActivations = "MaxConcurrentGameSessionActivations"
        case serverProcesses = "ServerProcesses"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSessionActivationTimeoutSeconds = gameSessionActivationTimeoutSeconds {
            try encodeContainer.encode(gameSessionActivationTimeoutSeconds, forKey: .gameSessionActivationTimeoutSeconds)
        }
        if let maxConcurrentGameSessionActivations = maxConcurrentGameSessionActivations {
            try encodeContainer.encode(maxConcurrentGameSessionActivations, forKey: .maxConcurrentGameSessionActivations)
        }
        if let serverProcesses = serverProcesses {
            var serverProcessesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serverProcesses)
            for serverprocesslist0 in serverProcesses {
                try serverProcessesContainer.encode(serverprocesslist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverProcessesContainer = try containerValues.decodeIfPresent([ServerProcess?].self, forKey: .serverProcesses)
        var serverProcessesDecoded0:[ServerProcess]? = nil
        if let serverProcessesContainer = serverProcessesContainer {
            serverProcessesDecoded0 = [ServerProcess]()
            for structure0 in serverProcessesContainer {
                if let structure0 = structure0 {
                    serverProcessesDecoded0?.append(structure0)
                }
            }
        }
        serverProcesses = serverProcessesDecoded0
        let maxConcurrentGameSessionActivationsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxConcurrentGameSessionActivations)
        maxConcurrentGameSessionActivations = maxConcurrentGameSessionActivationsDecoded
        let gameSessionActivationTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .gameSessionActivationTimeoutSeconds)
        gameSessionActivationTimeoutSeconds = gameSessionActivationTimeoutSecondsDecoded
    }
}

extension RuntimeConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RuntimeConfiguration(gameSessionActivationTimeoutSeconds: \(String(describing: gameSessionActivationTimeoutSeconds)), maxConcurrentGameSessionActivations: \(String(describing: maxConcurrentGameSessionActivations)), serverProcesses: \(String(describing: serverProcesses)))"}
}

/// <p>A collection of server process configurations that describe the set of processes to
///             run on each instance in a fleet. Server processes run either an executable in a custom
///             game build or a Realtime Servers script. GameLift launches the configured processes, manages their
///             life cycle, and replaces them as needed. Each instance checks regularly for an updated
///             runtime configuration. </p>
///         <p>A GameLift instance is limited to 50 processes running concurrently. To calculate the
///             total number of processes in a runtime configuration, add the values of the
///                 <code>ConcurrentExecutions</code> parameter for each <a>ServerProcess</a>. Learn more about <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-multiprocess.html"> Running Multiple
///                 Processes on a Fleet</a>.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///         <p>
///             <a>DescribeRuntimeConfiguration</a> | <a>UpdateRuntimeConfiguration</a>
///          </p>
public struct RuntimeConfiguration: Equatable {
    /// <p>The maximum amount of time (in seconds) allowed to launch a new game session and have
    ///             it report ready to host players. During this time, the game session is in status
    ///                 <code>ACTIVATING</code>. If the game session does not become active before the
    ///             timeout, it is ended and the game session status is changed to
    ///             <code>TERMINATED</code>.</p>
    public let gameSessionActivationTimeoutSeconds: Int?
    /// <p>The number of game sessions in status <code>ACTIVATING</code> to allow on an instance.
    ///             This setting limits the instance resources that can be used for new game activations at
    ///             any one time.</p>
    public let maxConcurrentGameSessionActivations: Int?
    /// <p>A collection of server process configurations that identify what server processes to
    ///             run on each instance in a fleet.</p>
    public let serverProcesses: [ServerProcess]?

    public init (
        gameSessionActivationTimeoutSeconds: Int? = nil,
        maxConcurrentGameSessionActivations: Int? = nil,
        serverProcesses: [ServerProcess]? = nil
    )
    {
        self.gameSessionActivationTimeoutSeconds = gameSessionActivationTimeoutSeconds
        self.maxConcurrentGameSessionActivations = maxConcurrentGameSessionActivations
        self.serverProcesses = serverProcesses
    }
}

extension S3Location: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bucket = "Bucket"
        case key = "Key"
        case objectVersion = "ObjectVersion"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let objectVersion = objectVersion {
            try encodeContainer.encode(objectVersion, forKey: .objectVersion)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let objectVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .objectVersion)
        objectVersion = objectVersionDecoded
    }
}

extension S3Location: CustomDebugStringConvertible {
    public var debugDescription: String {
        "S3Location(bucket: \(String(describing: bucket)), key: \(String(describing: key)), objectVersion: \(String(describing: objectVersion)), roleArn: \(String(describing: roleArn)))"}
}

/// <p>The location in Amazon S3 where build or script files are stored for access by Amazon GameLift. This
///             location is specified in <a>CreateBuild</a>, <a>CreateScript</a>,
///             and <a>UpdateScript</a> requests. </p>
public struct S3Location: Equatable {
    /// <p>An Amazon S3 bucket identifier. This is the name of the S3 bucket.</p>
    ///         <note>
    ///             <p>GameLift currently does not support uploading from Amazon S3 buckets with names that contain a dot (.).</p>
    ///          </note>
    public let bucket: String?
    /// <p>The name of the zip file that contains the build files or script files. </p>
    public let key: String?
    /// <p>The version of the file, if object versioning is turned on for the bucket. Amazon GameLift uses
    ///             this information when retrieving files from an S3 bucket that you own. Use this
    ///             parameter to specify a specific version of the file. If not set, the latest version of
    ///             the file is retrieved. </p>
    public let objectVersion: String?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) for an IAM role that
    ///             allows Amazon GameLift to access the S3 bucket.</p>
    public let roleArn: String?

    public init (
        bucket: String? = nil,
        key: String? = nil,
        objectVersion: String? = nil,
        roleArn: String? = nil
    )
    {
        self.bucket = bucket
        self.key = key
        self.objectVersion = objectVersion
        self.roleArn = roleArn
    }
}

public enum ScalingAdjustmentType {
    case changeincapacity
    case exactcapacity
    case percentchangeincapacity
    case sdkUnknown(String)
}

extension ScalingAdjustmentType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ScalingAdjustmentType] {
        return [
            .changeincapacity,
            .exactcapacity,
            .percentchangeincapacity,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .changeincapacity: return "ChangeInCapacity"
        case .exactcapacity: return "ExactCapacity"
        case .percentchangeincapacity: return "PercentChangeInCapacity"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ScalingAdjustmentType(rawValue: rawValue) ?? ScalingAdjustmentType.sdkUnknown(rawValue)
    }
}

extension ScalingPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case evaluationPeriods = "EvaluationPeriods"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case location = "Location"
        case metricName = "MetricName"
        case name = "Name"
        case policyType = "PolicyType"
        case scalingAdjustment = "ScalingAdjustment"
        case scalingAdjustmentType = "ScalingAdjustmentType"
        case status = "Status"
        case targetConfiguration = "TargetConfiguration"
        case threshold = "Threshold"
        case updateStatus = "UpdateStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let evaluationPeriods = evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let fleetArn = fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policyType = policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if scalingAdjustment != 0 {
            try encodeContainer.encode(scalingAdjustment, forKey: .scalingAdjustment)
        }
        if let scalingAdjustmentType = scalingAdjustmentType {
            try encodeContainer.encode(scalingAdjustmentType.rawValue, forKey: .scalingAdjustmentType)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetConfiguration = targetConfiguration {
            try encodeContainer.encode(targetConfiguration, forKey: .targetConfiguration)
        }
        if threshold != 0.0 {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let updateStatus = updateStatus {
            try encodeContainer.encode(updateStatus.rawValue, forKey: .updateStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ScalingStatusType.self, forKey: .status)
        status = statusDecoded
        let scalingAdjustmentDecoded = try containerValues.decode(Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
        let scalingAdjustmentTypeDecoded = try containerValues.decodeIfPresent(ScalingAdjustmentType.self, forKey: .scalingAdjustmentType)
        scalingAdjustmentType = scalingAdjustmentTypeDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(ComparisonOperatorType.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let thresholdDecoded = try containerValues.decode(Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(MetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let targetConfigurationDecoded = try containerValues.decodeIfPresent(TargetConfiguration.self, forKey: .targetConfiguration)
        targetConfiguration = targetConfigurationDecoded
        let updateStatusDecoded = try containerValues.decodeIfPresent(LocationUpdateStatus.self, forKey: .updateStatus)
        updateStatus = updateStatusDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension ScalingPolicy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScalingPolicy(comparisonOperator: \(String(describing: comparisonOperator)), evaluationPeriods: \(String(describing: evaluationPeriods)), fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)), location: \(String(describing: location)), metricName: \(String(describing: metricName)), name: \(String(describing: name)), policyType: \(String(describing: policyType)), scalingAdjustment: \(String(describing: scalingAdjustment)), scalingAdjustmentType: \(String(describing: scalingAdjustmentType)), status: \(String(describing: status)), targetConfiguration: \(String(describing: targetConfiguration)), threshold: \(String(describing: threshold)), updateStatus: \(String(describing: updateStatus)))"}
}

/// <p>Rule that controls how a fleet is scaled. Scaling policies are uniquely identified
///         by the combination of name and fleet ID.</p>
///          <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>DescribeFleetCapacity</a> |
///                     <a>UpdateFleetCapacity</a> |
///                     <a>DescribeEC2InstanceLimits</a> |
///                     <a>PutScalingPolicy</a> |
///                     <a>DescribeScalingPolicies</a> |
///                     <a>DeleteScalingPolicy</a> |
///                     <a>StopFleetActions</a> |
///                     <a>StartFleetActions</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a>
///          </p>
public struct ScalingPolicy: Equatable {
    /// <p>Comparison operator to use when measuring a metric against the threshold
    ///         value.</p>
    public let comparisonOperator: ComparisonOperatorType?
    /// <p>Length of time (in minutes) the metric must be at or beyond the threshold before a
    ///         scaling event is triggered.</p>
    public let evaluationPeriods: Int?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>.</p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet that is associated with this scaling policy.</p>
    public let fleetId: String?
    /// <p>
    ///
    ///         </p>
    public let location: String?
    /// <p>Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment. For
    ///             detailed descriptions of fleet metrics, see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/monitoring-cloudwatch.html">Monitor Amazon GameLift
    ///                 with Amazon CloudWatch</a>. </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <b>ActivatingGameSessions</b> -- Game sessions in
    ///                     the process of being created.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>ActiveGameSessions</b> -- Game sessions that
    ///                     are currently running.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>ActiveInstances</b> -- Fleet instances that
    ///                     are currently running at least one game session.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>AvailableGameSessions</b> -- Additional game
    ///                     sessions that fleet could host simultaneously, given current capacity.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>AvailablePlayerSessions</b> -- Empty player
    ///                     slots in currently active game sessions. This includes game sessions that are
    ///                     not currently accepting players. Reserved player slots are not
    ///                     included.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>CurrentPlayerSessions</b> -- Player slots in
    ///                     active game sessions that are being used by a player or are reserved for a
    ///                     player. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>IdleInstances</b> -- Active instances that are
    ///                     currently hosting zero game sessions. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>PercentAvailableGameSessions</b> -- Unused
    ///                     percentage of the total number of game sessions that a fleet could host
    ///                     simultaneously, given current capacity. Use this metric for a target-based
    ///                     scaling policy.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>PercentIdleInstances</b> -- Percentage of the
    ///                     total number of active instances that are hosting zero game sessions.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>QueueDepth</b> -- Pending game session
    ///                     placement requests, in any queue, where the current fleet is the top-priority
    ///                     destination.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>WaitTime</b> -- Current wait time for pending
    ///                     game session placement requests, in any queue, where the current fleet is the
    ///                     top-priority destination. </p>
    ///             </li>
    ///          </ul>
    public let metricName: MetricName?
    /// <p>A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.</p>
    public let name: String?
    /// <p>The type of scaling policy to create. For a target-based policy, set the parameter
    ///                 <i>MetricName</i> to 'PercentAvailableGameSessions' and specify a
    ///                 <i>TargetConfiguration</i>. For a rule-based policy set the following
    ///             parameters: <i>MetricName</i>, <i>ComparisonOperator</i>,
    ///                 <i>Threshold</i>, <i>EvaluationPeriods</i>,
    ///                 <i>ScalingAdjustmentType</i>, and
    ///                 <i>ScalingAdjustment</i>.</p>
    public let policyType: PolicyType?
    /// <p>Amount of adjustment to make, based on the scaling adjustment type.</p>
    public let scalingAdjustment: Int
    /// <p>The type of adjustment to make to a fleet's instance count (see <a>FleetCapacity</a>):</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>ChangeInCapacity</b> -- add (or subtract) the
    ///                 scaling adjustment value from the current instance count. Positive values scale
    ///                 up while negative values scale down.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>ExactCapacity</b> -- set the instance count to the
    ///                 scaling adjustment value.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>PercentChangeInCapacity</b> -- increase or reduce
    ///                 the current instance count by the scaling adjustment, read as a percentage.
    ///                 Positive values scale up while negative values scale down.</p>
    ///             </li>
    ///          </ul>
    public let scalingAdjustmentType: ScalingAdjustmentType?
    /// <p>Current status of the scaling policy. The scaling policy can be in force only when
    ///         in an <code>ACTIVE</code> status. Scaling policies can be suspended for individual
    ///         fleets (see <a>StopFleetActions</a>; if suspended for a fleet, the policy
    ///         status does not change. View a fleet's stopped actions by calling <a>DescribeFleetCapacity</a>.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>ACTIVE</b> -- The scaling policy can be used for
    ///                 auto-scaling a fleet.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>UPDATE_REQUESTED</b> -- A request to update the
    ///                 scaling policy has been received.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>UPDATING</b> -- A change is being made to the
    ///                 scaling policy.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>DELETE_REQUESTED</b> -- A request to delete the
    ///                 scaling policy has been received.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>DELETING</b> -- The scaling policy is being
    ///                 deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>DELETED</b> -- The scaling policy has been
    ///                 deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>ERROR</b> -- An error occurred in creating the
    ///                 policy. It should be removed and recreated.</p>
    ///             </li>
    ///          </ul>
    public let status: ScalingStatusType?
    /// <p>An object that contains settings for a target-based scaling policy.</p>
    public let targetConfiguration: TargetConfiguration?
    /// <p>Metric value used to trigger a scaling event.</p>
    public let threshold: Double
    /// <p>The current status of the fleet's scaling policies in a requested fleet location. The
    ///                 status <code>PENDING_UPDATE</code> indicates that an update was requested for the fleet
    ///                 but has not yet been completed for the location.</p>
    public let updateStatus: LocationUpdateStatus?

    public init (
        comparisonOperator: ComparisonOperatorType? = nil,
        evaluationPeriods: Int? = nil,
        fleetArn: String? = nil,
        fleetId: String? = nil,
        location: String? = nil,
        metricName: MetricName? = nil,
        name: String? = nil,
        policyType: PolicyType? = nil,
        scalingAdjustment: Int = 0,
        scalingAdjustmentType: ScalingAdjustmentType? = nil,
        status: ScalingStatusType? = nil,
        targetConfiguration: TargetConfiguration? = nil,
        threshold: Double = 0.0,
        updateStatus: LocationUpdateStatus? = nil
    )
    {
        self.comparisonOperator = comparisonOperator
        self.evaluationPeriods = evaluationPeriods
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.location = location
        self.metricName = metricName
        self.name = name
        self.policyType = policyType
        self.scalingAdjustment = scalingAdjustment
        self.scalingAdjustmentType = scalingAdjustmentType
        self.status = status
        self.targetConfiguration = targetConfiguration
        self.threshold = threshold
        self.updateStatus = updateStatus
    }
}

public enum ScalingStatusType {
    case active
    case deleted
    case deleteRequested
    case deleting
    case error
    case updateRequested
    case updating
    case sdkUnknown(String)
}

extension ScalingStatusType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ScalingStatusType] {
        return [
            .active,
            .deleted,
            .deleteRequested,
            .deleting,
            .error,
            .updateRequested,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .deleted: return "DELETED"
        case .deleteRequested: return "DELETE_REQUESTED"
        case .deleting: return "DELETING"
        case .error: return "ERROR"
        case .updateRequested: return "UPDATE_REQUESTED"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ScalingStatusType(rawValue: rawValue) ?? ScalingStatusType.sdkUnknown(rawValue)
    }
}

extension Script: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case name = "Name"
        case scriptArn = "ScriptArn"
        case scriptId = "ScriptId"
        case sizeOnDisk = "SizeOnDisk"
        case storageLocation = "StorageLocation"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scriptArn = scriptArn {
            try encodeContainer.encode(scriptArn, forKey: .scriptArn)
        }
        if let scriptId = scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
        if let sizeOnDisk = sizeOnDisk {
            try encodeContainer.encode(sizeOnDisk, forKey: .sizeOnDisk)
        }
        if let storageLocation = storageLocation {
            try encodeContainer.encode(storageLocation, forKey: .storageLocation)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
        let scriptArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scriptArn)
        scriptArn = scriptArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let sizeOnDiskDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .sizeOnDisk)
        sizeOnDisk = sizeOnDiskDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(S3Location.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
    }
}

extension Script: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Script(creationTime: \(String(describing: creationTime)), name: \(String(describing: name)), scriptArn: \(String(describing: scriptArn)), scriptId: \(String(describing: scriptId)), sizeOnDisk: \(String(describing: sizeOnDisk)), storageLocation: \(String(describing: storageLocation)), version: \(String(describing: version)))"}
}

/// <p>Properties describing a Realtime script.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>CreateScript</a> |
///                     <a>ListScripts</a> |
///                     <a>DescribeScript</a> |
///                     <a>UpdateScript</a> |
///                     <a>DeleteScript</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a>
///          </p>
public struct Script: Equatable {
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>A descriptive label that is associated with a script. Script names do not need to be unique.</p>
    public let name: String?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift script resource and uniquely identifies it. ARNs are unique across all Regions.  In a GameLift script ARN, the resource ID matches the
    ///                 <i>ScriptId</i> value.</p>
    public let scriptArn: String?
    /// <p>A unique identifier for the Realtime script</p>
    public let scriptId: String?
    /// <p>The file size of the uploaded Realtime script, expressed in bytes. When files are
    ///             uploaded from an S3 location, this value remains at "0".</p>
    public let sizeOnDisk: Int?
    /// <p>The location in Amazon S3 where build or script files are stored for access by Amazon GameLift. This
    ///             location is specified in <a>CreateBuild</a>, <a>CreateScript</a>,
    ///             and <a>UpdateScript</a> requests. </p>
    public let storageLocation: S3Location?
    /// <p>Version information that is associated with a build or script. Version strings do not need to be unique.</p>
    public let version: String?

    public init (
        creationTime: Date? = nil,
        name: String? = nil,
        scriptArn: String? = nil,
        scriptId: String? = nil,
        sizeOnDisk: Int? = nil,
        storageLocation: S3Location? = nil,
        version: String? = nil
    )
    {
        self.creationTime = creationTime
        self.name = name
        self.scriptArn = scriptArn
        self.scriptId = scriptId
        self.sizeOnDisk = sizeOnDisk
        self.storageLocation = storageLocation
        self.version = version
    }
}

public struct SearchGameSessionsInputBodyMiddleware: Middleware {
    public let id: String = "SearchGameSessionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SearchGameSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<SearchGameSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SearchGameSessionsInput>
    public typealias MOutput = OperationOutput<SearchGameSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SearchGameSessionsOutputError>
}

extension SearchGameSessionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SearchGameSessionsInput(aliasId: \(String(describing: aliasId)), filterExpression: \(String(describing: filterExpression)), fleetId: \(String(describing: fleetId)), limit: \(String(describing: limit)), location: \(String(describing: location)), nextToken: \(String(describing: nextToken)), sortExpression: \(String(describing: sortExpression)))"}
}

extension SearchGameSessionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
        case filterExpression = "FilterExpression"
        case fleetId = "FleetId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case sortExpression = "SortExpression"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
        if let filterExpression = filterExpression {
            try encodeContainer.encode(filterExpression, forKey: .filterExpression)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortExpression = sortExpression {
            try encodeContainer.encode(sortExpression, forKey: .sortExpression)
        }
    }
}

public struct SearchGameSessionsInputHeadersMiddleware: Middleware {
    public let id: String = "SearchGameSessionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SearchGameSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<SearchGameSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SearchGameSessionsInput>
    public typealias MOutput = OperationOutput<SearchGameSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SearchGameSessionsOutputError>
}

public struct SearchGameSessionsInputQueryItemMiddleware: Middleware {
    public let id: String = "SearchGameSessionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SearchGameSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<SearchGameSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SearchGameSessionsInput>
    public typealias MOutput = OperationOutput<SearchGameSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SearchGameSessionsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct SearchGameSessionsInput: Equatable {
    /// <p>A unique identifier for the alias associated with the fleet to search for active game sessions. You can use either
    ///             the alias ID or ARN value. Each request must reference either a fleet ID or alias ID,
    ///             but not both.</p>
    public let aliasId: String?
    /// <p>String containing the search criteria for the session search. If no filter
    ///             expression is included, the request returns results for all game sessions in the fleet
    ///             that are in <code>ACTIVE</code> status.</p>
    ///         <p>A filter expression can contain one or multiple conditions. Each condition consists
    ///             of the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <b>Operand</b> -- Name of a game session
    ///                     attribute. Valid values are <code>gameSessionName</code>,
    ///                         <code>gameSessionId</code>, <code>gameSessionProperties</code>,
    ///                         <code>maximumSessions</code>, <code>creationTimeMillis</code>,
    ///                         <code>playerSessionCount</code>,
    ///                     <code>hasAvailablePlayerSessions</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Comparator</b> -- Valid comparators are:
    ///                         <code>=</code>, <code><></code>, <code><</code>, <code>></code>,
    ///                         <code><=</code>, <code>>=</code>. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Value</b> -- Value to be searched for. Values
    ///                     may be numbers, boolean values (true/false) or strings depending on the operand.
    ///                     String values are case sensitive and must be enclosed in single quotes. Special
    ///                     characters must be escaped. Boolean and string values can only be used with the
    ///                     comparators <code>=</code> and <code><></code>. For example, the following
    ///                     filter expression searches on <code>gameSessionName</code>:
    ///                         "<code>FilterExpression": "gameSessionName = 'Matt\\'s Awesome Game
    ///                         1'"</code>. </p>
    ///             </li>
    ///          </ul>
    ///         <p>To chain multiple conditions in a single expression, use the logical keywords
    ///                 <code>AND</code>, <code>OR</code>, and <code>NOT</code> and parentheses as needed.
    ///             For example: <code>x AND y AND NOT z</code>, <code>NOT (x OR y)</code>.</p>
    ///         <p>Session search evaluates conditions from left to right using the following
    ///             precedence rules:</p>
    ///         <ol>
    ///             <li>
    ///                 <p>
    ///                     <code>=</code>, <code><></code>, <code><</code>, <code>></code>,
    ///                         <code><=</code>, <code>>=</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>Parentheses</p>
    ///             </li>
    ///             <li>
    ///                 <p>NOT</p>
    ///             </li>
    ///             <li>
    ///                 <p>AND</p>
    ///             </li>
    ///             <li>
    ///                 <p>OR</p>
    ///             </li>
    ///          </ol>
    ///         <p>For example, this filter expression retrieves game sessions hosting at least ten
    ///             players that have an open player slot: <code>"maximumSessions>=10 AND
    ///                 hasAvailablePlayerSessions=true"</code>. </p>
    public let filterExpression: String?
    /// <p>A unique identifier for the fleet to search for active game sessions. You can use either the fleet ID or ARN
    ///             value. Each request must reference either a fleet ID or alias ID, but not both.</p>
    public let fleetId: String?
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. The maximum number of results returned is 20, even if this value is not set
    ///             or is set higher than 20. </p>
    public let limit: Int?
    /// <p>A fleet location to search for game sessions. You can specify a fleet's home Region or
    ///             a remote location. Use the AWS Region code format, such as <code>us-west-2</code>. </p>
    ///         <p> </p>
    public let location: String?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?
    /// <p>Instructions on how to sort the search results. If no sort expression is included,
    ///             the request returns results in random order. A sort expression consists of the following
    ///             elements:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>Operand</b> -- Name of a game session attribute.
    ///                     Valid values are <code>gameSessionName</code>, <code>gameSessionId</code>,
    ///                         <code>gameSessionProperties</code>, <code>maximumSessions</code>,
    ///                         <code>creationTimeMillis</code>, <code>playerSessionCount</code>,
    ///                         <code>hasAvailablePlayerSessions</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>Order</b> -- Valid sort orders are <code>ASC</code>
    ///                     (ascending) and <code>DESC</code> (descending).</p>
    ///             </li>
    ///          </ul>
    ///         <p>For example, this sort expression returns the oldest active sessions first:
    ///                 <code>"SortExpression": "creationTimeMillis ASC"</code>. Results with a null value
    ///             for the sort operand are returned at the end of the list.</p>
    public let sortExpression: String?

    public init (
        aliasId: String? = nil,
        filterExpression: String? = nil,
        fleetId: String? = nil,
        limit: Int? = nil,
        location: String? = nil,
        nextToken: String? = nil,
        sortExpression: String? = nil
    )
    {
        self.aliasId = aliasId
        self.filterExpression = filterExpression
        self.fleetId = fleetId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
        self.sortExpression = sortExpression
    }
}

struct SearchGameSessionsInputBody: Equatable {
    public let fleetId: String?
    public let aliasId: String?
    public let location: String?
    public let filterExpression: String?
    public let sortExpression: String?
    public let limit: Int?
    public let nextToken: String?
}

extension SearchGameSessionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
        case filterExpression = "FilterExpression"
        case fleetId = "FleetId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case sortExpression = "SortExpression"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let aliasIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
        let filterExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterExpression)
        filterExpression = filterExpressionDecoded
        let sortExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sortExpression)
        sortExpression = sortExpressionDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SearchGameSessionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SearchGameSessionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalRoutingStrategyException" : self = .terminalRoutingStrategyException(try TerminalRoutingStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SearchGameSessionsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case terminalRoutingStrategyException(TerminalRoutingStrategyException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SearchGameSessionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SearchGameSessionsOutputResponse(gameSessions: \(String(describing: gameSessions)), nextToken: \(String(describing: nextToken)))"}
}

extension SearchGameSessionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: SearchGameSessionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameSessions = output.gameSessions
            self.nextToken = output.nextToken
        } else {
            self.gameSessions = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct SearchGameSessionsOutputResponse: Equatable {
    /// <p>A collection of objects containing game session properties for each session that
    ///             matches the request.</p>
    public let gameSessions: [GameSession]?
    /// <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    public let nextToken: String?

    public init (
        gameSessions: [GameSession]? = nil,
        nextToken: String? = nil
    )
    {
        self.gameSessions = gameSessions
        self.nextToken = nextToken
    }
}

struct SearchGameSessionsOutputResponseBody: Equatable {
    public let gameSessions: [GameSession]?
    public let nextToken: String?
}

extension SearchGameSessionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessions = "GameSessions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionsContainer = try containerValues.decodeIfPresent([GameSession?].self, forKey: .gameSessions)
        var gameSessionsDecoded0:[GameSession]? = nil
        if let gameSessionsContainer = gameSessionsContainer {
            gameSessionsDecoded0 = [GameSession]()
            for structure0 in gameSessionsContainer {
                if let structure0 = structure0 {
                    gameSessionsDecoded0?.append(structure0)
                }
            }
        }
        gameSessions = gameSessionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ServerProcess: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case concurrentExecutions = "ConcurrentExecutions"
        case launchPath = "LaunchPath"
        case parameters = "Parameters"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let concurrentExecutions = concurrentExecutions {
            try encodeContainer.encode(concurrentExecutions, forKey: .concurrentExecutions)
        }
        if let launchPath = launchPath {
            try encodeContainer.encode(launchPath, forKey: .launchPath)
        }
        if let parameters = parameters {
            try encodeContainer.encode(parameters, forKey: .parameters)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchPath)
        launchPath = launchPathDecoded
        let parametersDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameters)
        parameters = parametersDecoded
        let concurrentExecutionsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .concurrentExecutions)
        concurrentExecutions = concurrentExecutionsDecoded
    }
}

extension ServerProcess: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ServerProcess(concurrentExecutions: \(String(describing: concurrentExecutions)), launchPath: \(String(describing: launchPath)), parameters: \(String(describing: parameters)))"}
}

/// <p>A set of instructions for launching server processes on each instance in a fleet.
///             Server processes run either an executable in a custom game build or a Realtime Servers script.
///             Server process configurations are part of a fleet's <a>RuntimeConfiguration</a>.</p>
public struct ServerProcess: Equatable {
    /// <p>The number of server processes using this configuration that run concurrently on each
    ///             instance.</p>
    public let concurrentExecutions: Int?
    /// <p>The location of a game build executable or the Realtime script file that contains the
    ///                 <code>Init()</code> function. Game builds and Realtime scripts are installed on
    ///             instances at the root: </p>
    ///         <ul>
    ///             <li>
    ///                <p>Windows (custom game builds only): <code>C:\game</code>. Example:
    ///                         "<code>C:\game\MyGame\server.exe</code>" </p>
    ///             </li>
    ///             <li>
    ///                <p>Linux: <code>/local/game</code>. Examples: "<code>/local/game/MyGame/server.exe</code>" or
    ///                         "<code>/local/game/MyRealtimeScript.js</code>"</p>
    ///             </li>
    ///          </ul>
    public let launchPath: String?
    /// <p>An optional list of parameters to pass to the server executable or Realtime script on
    ///             launch.</p>
    public let parameters: String?

    public init (
        concurrentExecutions: Int? = nil,
        launchPath: String? = nil,
        parameters: String? = nil
    )
    {
        self.concurrentExecutions = concurrentExecutions
        self.launchPath = launchPath
        self.parameters = parameters
    }
}

public enum SortOrder {
    case ascending
    case descending
    case sdkUnknown(String)
}

extension SortOrder : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SortOrder] {
        return [
            .ascending,
            .descending,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ascending: return "ASCENDING"
        case .descending: return "DESCENDING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SortOrder(rawValue: rawValue) ?? SortOrder.sdkUnknown(rawValue)
    }
}

public struct StartFleetActionsInputBodyMiddleware: Middleware {
    public let id: String = "StartFleetActionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartFleetActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<StartFleetActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartFleetActionsInput>
    public typealias MOutput = OperationOutput<StartFleetActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartFleetActionsOutputError>
}

extension StartFleetActionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartFleetActionsInput(actions: \(String(describing: actions)), fleetId: \(String(describing: fleetId)), location: \(String(describing: location)))"}
}

extension StartFleetActionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case fleetId = "FleetId"
        case location = "Location"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for fleetactionlist0 in actions {
                try actionsContainer.encode(fleetactionlist0.rawValue)
            }
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }
}

public struct StartFleetActionsInputHeadersMiddleware: Middleware {
    public let id: String = "StartFleetActionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartFleetActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<StartFleetActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartFleetActionsInput>
    public typealias MOutput = OperationOutput<StartFleetActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartFleetActionsOutputError>
}

public struct StartFleetActionsInputQueryItemMiddleware: Middleware {
    public let id: String = "StartFleetActionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartFleetActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<StartFleetActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartFleetActionsInput>
    public typealias MOutput = OperationOutput<StartFleetActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartFleetActionsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct StartFleetActionsInput: Equatable {
    /// <p>List of actions to restart on the fleet.</p>
    public let actions: [FleetAction]?
    /// <p>A unique identifier for the fleet to restart actions on.  You can use either the fleet ID or ARN value.</p>
    public let fleetId: String?
    /// <p>The fleet location to restart fleet actions for. Specify a location in the form of
    ///             an AWS Region code, such as <code>us-west-2</code>.</p>
    public let location: String?

    public init (
        actions: [FleetAction]? = nil,
        fleetId: String? = nil,
        location: String? = nil
    )
    {
        self.actions = actions
        self.fleetId = fleetId
        self.location = location
    }
}

struct StartFleetActionsInputBody: Equatable {
    public let fleetId: String?
    public let actions: [FleetAction]?
    public let location: String?
}

extension StartFleetActionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case fleetId = "FleetId"
        case location = "Location"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let actionsContainer = try containerValues.decodeIfPresent([FleetAction?].self, forKey: .actions)
        var actionsDecoded0:[FleetAction]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [FleetAction]()
            for string0 in actionsContainer {
                if let string0 = string0 {
                    actionsDecoded0?.append(string0)
                }
            }
        }
        actions = actionsDecoded0
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension StartFleetActionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartFleetActionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartFleetActionsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartFleetActionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartFleetActionsOutputResponse(fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)))"}
}

extension StartFleetActionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StartFleetActionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
        } else {
            self.fleetArn = nil
            self.fleetId = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct StartFleetActionsOutputResponse: Equatable {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>.</p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet to restart actions on.</p>
    public let fleetId: String?

    public init (
        fleetArn: String? = nil,
        fleetId: String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

struct StartFleetActionsOutputResponseBody: Equatable {
    public let fleetId: String?
    public let fleetArn: String?
}

extension StartFleetActionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
    }
}

public struct StartGameSessionPlacementInputBodyMiddleware: Middleware {
    public let id: String = "StartGameSessionPlacementInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartGameSessionPlacementInput>,
                  next: H) -> Swift.Result<OperationOutput<StartGameSessionPlacementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartGameSessionPlacementInput>
    public typealias MOutput = OperationOutput<StartGameSessionPlacementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartGameSessionPlacementOutputError>
}

extension StartGameSessionPlacementInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartGameSessionPlacementInput(desiredPlayerSessions: \(String(describing: desiredPlayerSessions)), gameProperties: \(String(describing: gameProperties)), gameSessionData: \(String(describing: gameSessionData)), gameSessionName: \(String(describing: gameSessionName)), gameSessionQueueName: \(String(describing: gameSessionQueueName)), maximumPlayerSessionCount: \(String(describing: maximumPlayerSessionCount)), placementId: \(String(describing: placementId)), playerLatencies: \(String(describing: playerLatencies)))"}
}

extension StartGameSessionPlacementInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case desiredPlayerSessions = "DesiredPlayerSessions"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionName = "GameSessionName"
        case gameSessionQueueName = "GameSessionQueueName"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case placementId = "PlacementId"
        case playerLatencies = "PlayerLatencies"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredPlayerSessions = desiredPlayerSessions {
            var desiredPlayerSessionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .desiredPlayerSessions)
            for desiredplayersessionlist0 in desiredPlayerSessions {
                try desiredPlayerSessionsContainer.encode(desiredplayersessionlist0)
            }
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gamepropertylist0 in gameProperties {
                try gamePropertiesContainer.encode(gamepropertylist0)
            }
        }
        if let gameSessionData = gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionName = gameSessionName {
            try encodeContainer.encode(gameSessionName, forKey: .gameSessionName)
        }
        if let gameSessionQueueName = gameSessionQueueName {
            try encodeContainer.encode(gameSessionQueueName, forKey: .gameSessionQueueName)
        }
        if let maximumPlayerSessionCount = maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
        if let placementId = placementId {
            try encodeContainer.encode(placementId, forKey: .placementId)
        }
        if let playerLatencies = playerLatencies {
            var playerLatenciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencies)
            for playerlatencylist0 in playerLatencies {
                try playerLatenciesContainer.encode(playerlatencylist0)
            }
        }
    }
}

public struct StartGameSessionPlacementInputHeadersMiddleware: Middleware {
    public let id: String = "StartGameSessionPlacementInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartGameSessionPlacementInput>,
                  next: H) -> Swift.Result<OperationOutput<StartGameSessionPlacementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartGameSessionPlacementInput>
    public typealias MOutput = OperationOutput<StartGameSessionPlacementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartGameSessionPlacementOutputError>
}

public struct StartGameSessionPlacementInputQueryItemMiddleware: Middleware {
    public let id: String = "StartGameSessionPlacementInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartGameSessionPlacementInput>,
                  next: H) -> Swift.Result<OperationOutput<StartGameSessionPlacementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartGameSessionPlacementInput>
    public typealias MOutput = OperationOutput<StartGameSessionPlacementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartGameSessionPlacementOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct StartGameSessionPlacementInput: Equatable {
    /// <p>Set of information on each player to create a player session for.</p>
    public let desiredPlayerSessions: [DesiredPlayerSession]?
    /// <p>A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).</p>
    public let gameProperties: [GameProperty]?
    /// <p>A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).</p>
    public let gameSessionData: String?
    /// <p>A descriptive label that is associated with a game session. Session names do not need to be unique.</p>
    public let gameSessionName: String?
    /// <p>Name of the queue to use to place the new game session. You can use either the queue name
    ///             or ARN value. </p>
    public let gameSessionQueueName: String?
    /// <p>The maximum number of players that can be connected simultaneously to the game session.</p>
    public let maximumPlayerSessionCount: Int?
    /// <p>A unique identifier to assign to the new game session placement. This value is
    ///         developer-defined. The value must be unique across all Regions and cannot be reused
    ///         unless you are resubmitting a canceled or timed-out placement request.</p>
    public let placementId: String?
    /// <p>A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to AWS Regions. This information is used to try to place the new game session where
    ///         it can offer the best possible gameplay experience for the players. </p>
    public let playerLatencies: [PlayerLatency]?

    public init (
        desiredPlayerSessions: [DesiredPlayerSession]? = nil,
        gameProperties: [GameProperty]? = nil,
        gameSessionData: String? = nil,
        gameSessionName: String? = nil,
        gameSessionQueueName: String? = nil,
        maximumPlayerSessionCount: Int? = nil,
        placementId: String? = nil,
        playerLatencies: [PlayerLatency]? = nil
    )
    {
        self.desiredPlayerSessions = desiredPlayerSessions
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionName = gameSessionName
        self.gameSessionQueueName = gameSessionQueueName
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
        self.placementId = placementId
        self.playerLatencies = playerLatencies
    }
}

struct StartGameSessionPlacementInputBody: Equatable {
    public let placementId: String?
    public let gameSessionQueueName: String?
    public let gameProperties: [GameProperty]?
    public let maximumPlayerSessionCount: Int?
    public let gameSessionName: String?
    public let playerLatencies: [PlayerLatency]?
    public let desiredPlayerSessions: [DesiredPlayerSession]?
    public let gameSessionData: String?
}

extension StartGameSessionPlacementInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case desiredPlayerSessions = "DesiredPlayerSessions"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionName = "GameSessionName"
        case gameSessionQueueName = "GameSessionQueueName"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case placementId = "PlacementId"
        case playerLatencies = "PlayerLatencies"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let placementIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .placementId)
        placementId = placementIdDecoded
        let gameSessionQueueNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionQueueName)
        gameSessionQueueName = gameSessionQueueNameDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let gameSessionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionName)
        gameSessionName = gameSessionNameDecoded
        let playerLatenciesContainer = try containerValues.decodeIfPresent([PlayerLatency?].self, forKey: .playerLatencies)
        var playerLatenciesDecoded0:[PlayerLatency]? = nil
        if let playerLatenciesContainer = playerLatenciesContainer {
            playerLatenciesDecoded0 = [PlayerLatency]()
            for structure0 in playerLatenciesContainer {
                if let structure0 = structure0 {
                    playerLatenciesDecoded0?.append(structure0)
                }
            }
        }
        playerLatencies = playerLatenciesDecoded0
        let desiredPlayerSessionsContainer = try containerValues.decodeIfPresent([DesiredPlayerSession?].self, forKey: .desiredPlayerSessions)
        var desiredPlayerSessionsDecoded0:[DesiredPlayerSession]? = nil
        if let desiredPlayerSessionsContainer = desiredPlayerSessionsContainer {
            desiredPlayerSessionsDecoded0 = [DesiredPlayerSession]()
            for structure0 in desiredPlayerSessionsContainer {
                if let structure0 = structure0 {
                    desiredPlayerSessionsDecoded0?.append(structure0)
                }
            }
        }
        desiredPlayerSessions = desiredPlayerSessionsDecoded0
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
    }
}

extension StartGameSessionPlacementOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartGameSessionPlacementOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartGameSessionPlacementOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartGameSessionPlacementOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartGameSessionPlacementOutputResponse(gameSessionPlacement: \(String(describing: gameSessionPlacement)))"}
}

extension StartGameSessionPlacementOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StartGameSessionPlacementOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameSessionPlacement = output.gameSessionPlacement
        } else {
            self.gameSessionPlacement = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct StartGameSessionPlacementOutputResponse: Equatable {
    /// <p>Object that describes the newly created game session placement. This object
    ///         includes all the information provided in the request, as well as start/end time stamps
    ///         and placement status. </p>
    public let gameSessionPlacement: GameSessionPlacement?

    public init (
        gameSessionPlacement: GameSessionPlacement? = nil
    )
    {
        self.gameSessionPlacement = gameSessionPlacement
    }
}

struct StartGameSessionPlacementOutputResponseBody: Equatable {
    public let gameSessionPlacement: GameSessionPlacement?
}

extension StartGameSessionPlacementOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessionPlacement = "GameSessionPlacement"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionPlacementDecoded = try containerValues.decodeIfPresent(GameSessionPlacement.self, forKey: .gameSessionPlacement)
        gameSessionPlacement = gameSessionPlacementDecoded
    }
}

public struct StartMatchBackfillInputBodyMiddleware: Middleware {
    public let id: String = "StartMatchBackfillInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMatchBackfillInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMatchBackfillOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMatchBackfillInput>
    public typealias MOutput = OperationOutput<StartMatchBackfillOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartMatchBackfillOutputError>
}

extension StartMatchBackfillInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartMatchBackfillInput(configurationName: \(String(describing: configurationName)), gameSessionArn: \(String(describing: gameSessionArn)), players: \(String(describing: players)), ticketId: \(String(describing: ticketId)))"}
}

extension StartMatchBackfillInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configurationName = "ConfigurationName"
        case gameSessionArn = "GameSessionArn"
        case players = "Players"
        case ticketId = "TicketId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationName = configurationName {
            try encodeContainer.encode(configurationName, forKey: .configurationName)
        }
        if let gameSessionArn = gameSessionArn {
            try encodeContainer.encode(gameSessionArn, forKey: .gameSessionArn)
        }
        if let players = players {
            var playersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .players)
            for playerlist0 in players {
                try playersContainer.encode(playerlist0)
            }
        }
        if let ticketId = ticketId {
            try encodeContainer.encode(ticketId, forKey: .ticketId)
        }
    }
}

public struct StartMatchBackfillInputHeadersMiddleware: Middleware {
    public let id: String = "StartMatchBackfillInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMatchBackfillInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMatchBackfillOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMatchBackfillInput>
    public typealias MOutput = OperationOutput<StartMatchBackfillOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartMatchBackfillOutputError>
}

public struct StartMatchBackfillInputQueryItemMiddleware: Middleware {
    public let id: String = "StartMatchBackfillInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMatchBackfillInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMatchBackfillOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMatchBackfillInput>
    public typealias MOutput = OperationOutput<StartMatchBackfillOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartMatchBackfillOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct StartMatchBackfillInput: Equatable {
    /// <p>Name of the matchmaker to use for this request. You can use either the configuration
    ///             name or ARN value. The ARN of the matchmaker that was used with the original game
    ///             session is listed in the <a>GameSession</a> object,
    ///                 <code>MatchmakerData</code> property.</p>
    public let configurationName: String?
    /// <p>A unique identifier for the game session. Use the game session ID. When using FlexMatch as a standalone matchmaking
    ///             solution, this parameter is not needed. </p>
    public let gameSessionArn: String?
    /// <p>Match information on all players that are currently assigned to the game session.
    ///             This information is used by the matchmaker to find new players and add them to the
    ///             existing game.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>PlayerID, PlayerAttributes, Team -- This information is maintained in the
    ///                     <a>GameSession</a> object, <code>MatchmakerData</code> property,
    ///                     for all players who are currently assigned to the game session. The matchmaker
    ///                     data is in JSON syntax, formatted as a string. For more details, see <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data">
    ///                         Match Data</a>. </p>
    ///             </li>
    ///             <li>
    ///                 <p>LatencyInMs -- If the matchmaker uses player latency, include a latency
    ///                     value, in milliseconds, for the Region that the game session is currently in. Do
    ///                     not include latency values for any other Region.</p>
    ///             </li>
    ///          </ul>
    public let players: [Player]?
    /// <p>A unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of
    ///             a UUID. Use this identifier to track the match backfill ticket status and retrieve match
    ///             results.</p>
    public let ticketId: String?

    public init (
        configurationName: String? = nil,
        gameSessionArn: String? = nil,
        players: [Player]? = nil,
        ticketId: String? = nil
    )
    {
        self.configurationName = configurationName
        self.gameSessionArn = gameSessionArn
        self.players = players
        self.ticketId = ticketId
    }
}

struct StartMatchBackfillInputBody: Equatable {
    public let ticketId: String?
    public let configurationName: String?
    public let gameSessionArn: String?
    public let players: [Player]?
}

extension StartMatchBackfillInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configurationName = "ConfigurationName"
        case gameSessionArn = "GameSessionArn"
        case players = "Players"
        case ticketId = "TicketId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ticketId)
        ticketId = ticketIdDecoded
        let configurationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configurationName)
        configurationName = configurationNameDecoded
        let gameSessionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionArn)
        gameSessionArn = gameSessionArnDecoded
        let playersContainer = try containerValues.decodeIfPresent([Player?].self, forKey: .players)
        var playersDecoded0:[Player]? = nil
        if let playersContainer = playersContainer {
            playersDecoded0 = [Player]()
            for structure0 in playersContainer {
                if let structure0 = structure0 {
                    playersDecoded0?.append(structure0)
                }
            }
        }
        players = playersDecoded0
    }
}

extension StartMatchBackfillOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartMatchBackfillOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartMatchBackfillOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMatchBackfillOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartMatchBackfillOutputResponse(matchmakingTicket: \(String(describing: matchmakingTicket)))"}
}

extension StartMatchBackfillOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StartMatchBackfillOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.matchmakingTicket = output.matchmakingTicket
        } else {
            self.matchmakingTicket = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct StartMatchBackfillOutputResponse: Equatable {
    /// <p>Ticket representing the backfill matchmaking request. This object includes the
    ///             information in the request, ticket status, and match results as generated during the
    ///             matchmaking process.</p>
    public let matchmakingTicket: MatchmakingTicket?

    public init (
        matchmakingTicket: MatchmakingTicket? = nil
    )
    {
        self.matchmakingTicket = matchmakingTicket
    }
}

struct StartMatchBackfillOutputResponseBody: Equatable {
    public let matchmakingTicket: MatchmakingTicket?
}

extension StartMatchBackfillOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case matchmakingTicket = "MatchmakingTicket"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchmakingTicketDecoded = try containerValues.decodeIfPresent(MatchmakingTicket.self, forKey: .matchmakingTicket)
        matchmakingTicket = matchmakingTicketDecoded
    }
}

public struct StartMatchmakingInputBodyMiddleware: Middleware {
    public let id: String = "StartMatchmakingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMatchmakingInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMatchmakingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMatchmakingInput>
    public typealias MOutput = OperationOutput<StartMatchmakingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartMatchmakingOutputError>
}

extension StartMatchmakingInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartMatchmakingInput(configurationName: \(String(describing: configurationName)), players: \(String(describing: players)), ticketId: \(String(describing: ticketId)))"}
}

extension StartMatchmakingInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configurationName = "ConfigurationName"
        case players = "Players"
        case ticketId = "TicketId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationName = configurationName {
            try encodeContainer.encode(configurationName, forKey: .configurationName)
        }
        if let players = players {
            var playersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .players)
            for playerlist0 in players {
                try playersContainer.encode(playerlist0)
            }
        }
        if let ticketId = ticketId {
            try encodeContainer.encode(ticketId, forKey: .ticketId)
        }
    }
}

public struct StartMatchmakingInputHeadersMiddleware: Middleware {
    public let id: String = "StartMatchmakingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMatchmakingInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMatchmakingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMatchmakingInput>
    public typealias MOutput = OperationOutput<StartMatchmakingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartMatchmakingOutputError>
}

public struct StartMatchmakingInputQueryItemMiddleware: Middleware {
    public let id: String = "StartMatchmakingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMatchmakingInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMatchmakingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMatchmakingInput>
    public typealias MOutput = OperationOutput<StartMatchmakingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartMatchmakingOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct StartMatchmakingInput: Equatable {
    /// <p>Name of the matchmaking configuration to use for this request. Matchmaking
    ///             configurations must exist in the same Region as this request. You can use either the
    ///             configuration name or ARN value.</p>
    public let configurationName: String?
    /// <p>Information on each player to be matched. This information must include a player
    ///             ID, and may contain player attributes and latency data to be used in the matchmaking
    ///             process. After a successful match, <code>Player</code> objects contain the name of the
    ///             team the player is assigned to.</p>
    public let players: [Player]?
    /// <p>A unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of
    ///             a UUID. Use this identifier to track the matchmaking ticket status and retrieve match
    ///             results.</p>
    public let ticketId: String?

    public init (
        configurationName: String? = nil,
        players: [Player]? = nil,
        ticketId: String? = nil
    )
    {
        self.configurationName = configurationName
        self.players = players
        self.ticketId = ticketId
    }
}

struct StartMatchmakingInputBody: Equatable {
    public let ticketId: String?
    public let configurationName: String?
    public let players: [Player]?
}

extension StartMatchmakingInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configurationName = "ConfigurationName"
        case players = "Players"
        case ticketId = "TicketId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ticketId)
        ticketId = ticketIdDecoded
        let configurationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configurationName)
        configurationName = configurationNameDecoded
        let playersContainer = try containerValues.decodeIfPresent([Player?].self, forKey: .players)
        var playersDecoded0:[Player]? = nil
        if let playersContainer = playersContainer {
            playersDecoded0 = [Player]()
            for structure0 in playersContainer {
                if let structure0 = structure0 {
                    playersDecoded0?.append(structure0)
                }
            }
        }
        players = playersDecoded0
    }
}

extension StartMatchmakingOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartMatchmakingOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartMatchmakingOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMatchmakingOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartMatchmakingOutputResponse(matchmakingTicket: \(String(describing: matchmakingTicket)))"}
}

extension StartMatchmakingOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StartMatchmakingOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.matchmakingTicket = output.matchmakingTicket
        } else {
            self.matchmakingTicket = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct StartMatchmakingOutputResponse: Equatable {
    /// <p>Ticket representing the matchmaking request. This object include the information
    ///             included in the request, ticket status, and match results as generated during the
    ///             matchmaking process.</p>
    public let matchmakingTicket: MatchmakingTicket?

    public init (
        matchmakingTicket: MatchmakingTicket? = nil
    )
    {
        self.matchmakingTicket = matchmakingTicket
    }
}

struct StartMatchmakingOutputResponseBody: Equatable {
    public let matchmakingTicket: MatchmakingTicket?
}

extension StartMatchmakingOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case matchmakingTicket = "MatchmakingTicket"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchmakingTicketDecoded = try containerValues.decodeIfPresent(MatchmakingTicket.self, forKey: .matchmakingTicket)
        matchmakingTicket = matchmakingTicketDecoded
    }
}

public struct StopFleetActionsInputBodyMiddleware: Middleware {
    public let id: String = "StopFleetActionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopFleetActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<StopFleetActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopFleetActionsInput>
    public typealias MOutput = OperationOutput<StopFleetActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopFleetActionsOutputError>
}

extension StopFleetActionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopFleetActionsInput(actions: \(String(describing: actions)), fleetId: \(String(describing: fleetId)), location: \(String(describing: location)))"}
}

extension StopFleetActionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case fleetId = "FleetId"
        case location = "Location"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for fleetactionlist0 in actions {
                try actionsContainer.encode(fleetactionlist0.rawValue)
            }
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }
}

public struct StopFleetActionsInputHeadersMiddleware: Middleware {
    public let id: String = "StopFleetActionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopFleetActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<StopFleetActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopFleetActionsInput>
    public typealias MOutput = OperationOutput<StopFleetActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopFleetActionsOutputError>
}

public struct StopFleetActionsInputQueryItemMiddleware: Middleware {
    public let id: String = "StopFleetActionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopFleetActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<StopFleetActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopFleetActionsInput>
    public typealias MOutput = OperationOutput<StopFleetActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopFleetActionsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct StopFleetActionsInput: Equatable {
    /// <p>List of actions to suspend on the fleet. </p>
    public let actions: [FleetAction]?
    /// <p>A unique identifier for the fleet to stop actions on.  You can use either the fleet ID or ARN value.</p>
    public let fleetId: String?
    /// <p>The fleet location to stop fleet actions for. Specify a location in the form of an AWS Region code, such as
    ///             <code>us-west-2</code>.</p>
    public let location: String?

    public init (
        actions: [FleetAction]? = nil,
        fleetId: String? = nil,
        location: String? = nil
    )
    {
        self.actions = actions
        self.fleetId = fleetId
        self.location = location
    }
}

struct StopFleetActionsInputBody: Equatable {
    public let fleetId: String?
    public let actions: [FleetAction]?
    public let location: String?
}

extension StopFleetActionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case fleetId = "FleetId"
        case location = "Location"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let actionsContainer = try containerValues.decodeIfPresent([FleetAction?].self, forKey: .actions)
        var actionsDecoded0:[FleetAction]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [FleetAction]()
            for string0 in actionsContainer {
                if let string0 = string0 {
                    actionsDecoded0?.append(string0)
                }
            }
        }
        actions = actionsDecoded0
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension StopFleetActionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopFleetActionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopFleetActionsOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopFleetActionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopFleetActionsOutputResponse(fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)))"}
}

extension StopFleetActionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StopFleetActionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
        } else {
            self.fleetArn = nil
            self.fleetId = nil
        }
    }
}

/// <p>Represents the input for a request operation.</p>
public struct StopFleetActionsOutputResponse: Equatable {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>.</p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet to stop actions on.</p>
    public let fleetId: String?

    public init (
        fleetArn: String? = nil,
        fleetId: String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

struct StopFleetActionsOutputResponseBody: Equatable {
    public let fleetId: String?
    public let fleetArn: String?
}

extension StopFleetActionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
    }
}

public struct StopGameSessionPlacementInputBodyMiddleware: Middleware {
    public let id: String = "StopGameSessionPlacementInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopGameSessionPlacementInput>,
                  next: H) -> Swift.Result<OperationOutput<StopGameSessionPlacementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopGameSessionPlacementInput>
    public typealias MOutput = OperationOutput<StopGameSessionPlacementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopGameSessionPlacementOutputError>
}

extension StopGameSessionPlacementInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopGameSessionPlacementInput(placementId: \(String(describing: placementId)))"}
}

extension StopGameSessionPlacementInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case placementId = "PlacementId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let placementId = placementId {
            try encodeContainer.encode(placementId, forKey: .placementId)
        }
    }
}

public struct StopGameSessionPlacementInputHeadersMiddleware: Middleware {
    public let id: String = "StopGameSessionPlacementInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopGameSessionPlacementInput>,
                  next: H) -> Swift.Result<OperationOutput<StopGameSessionPlacementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopGameSessionPlacementInput>
    public typealias MOutput = OperationOutput<StopGameSessionPlacementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopGameSessionPlacementOutputError>
}

public struct StopGameSessionPlacementInputQueryItemMiddleware: Middleware {
    public let id: String = "StopGameSessionPlacementInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopGameSessionPlacementInput>,
                  next: H) -> Swift.Result<OperationOutput<StopGameSessionPlacementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopGameSessionPlacementInput>
    public typealias MOutput = OperationOutput<StopGameSessionPlacementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopGameSessionPlacementOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct StopGameSessionPlacementInput: Equatable {
    /// <p>A unique identifier for a game session placement to cancel.</p>
    public let placementId: String?

    public init (
        placementId: String? = nil
    )
    {
        self.placementId = placementId
    }
}

struct StopGameSessionPlacementInputBody: Equatable {
    public let placementId: String?
}

extension StopGameSessionPlacementInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case placementId = "PlacementId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let placementIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .placementId)
        placementId = placementIdDecoded
    }
}

extension StopGameSessionPlacementOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopGameSessionPlacementOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopGameSessionPlacementOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopGameSessionPlacementOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopGameSessionPlacementOutputResponse(gameSessionPlacement: \(String(describing: gameSessionPlacement)))"}
}

extension StopGameSessionPlacementOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StopGameSessionPlacementOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameSessionPlacement = output.gameSessionPlacement
        } else {
            self.gameSessionPlacement = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct StopGameSessionPlacementOutputResponse: Equatable {
    /// <p>Object that describes the canceled game session placement, with
    ///         <code>CANCELLED</code> status and an end time stamp. </p>
    public let gameSessionPlacement: GameSessionPlacement?

    public init (
        gameSessionPlacement: GameSessionPlacement? = nil
    )
    {
        self.gameSessionPlacement = gameSessionPlacement
    }
}

struct StopGameSessionPlacementOutputResponseBody: Equatable {
    public let gameSessionPlacement: GameSessionPlacement?
}

extension StopGameSessionPlacementOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessionPlacement = "GameSessionPlacement"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionPlacementDecoded = try containerValues.decodeIfPresent(GameSessionPlacement.self, forKey: .gameSessionPlacement)
        gameSessionPlacement = gameSessionPlacementDecoded
    }
}

public struct StopMatchmakingInputBodyMiddleware: Middleware {
    public let id: String = "StopMatchmakingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopMatchmakingInput>,
                  next: H) -> Swift.Result<OperationOutput<StopMatchmakingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopMatchmakingInput>
    public typealias MOutput = OperationOutput<StopMatchmakingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopMatchmakingOutputError>
}

extension StopMatchmakingInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopMatchmakingInput(ticketId: \(String(describing: ticketId)))"}
}

extension StopMatchmakingInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ticketId = "TicketId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ticketId = ticketId {
            try encodeContainer.encode(ticketId, forKey: .ticketId)
        }
    }
}

public struct StopMatchmakingInputHeadersMiddleware: Middleware {
    public let id: String = "StopMatchmakingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopMatchmakingInput>,
                  next: H) -> Swift.Result<OperationOutput<StopMatchmakingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopMatchmakingInput>
    public typealias MOutput = OperationOutput<StopMatchmakingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopMatchmakingOutputError>
}

public struct StopMatchmakingInputQueryItemMiddleware: Middleware {
    public let id: String = "StopMatchmakingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopMatchmakingInput>,
                  next: H) -> Swift.Result<OperationOutput<StopMatchmakingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopMatchmakingInput>
    public typealias MOutput = OperationOutput<StopMatchmakingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopMatchmakingOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct StopMatchmakingInput: Equatable {
    /// <p>A unique identifier for a matchmaking ticket.</p>
    public let ticketId: String?

    public init (
        ticketId: String? = nil
    )
    {
        self.ticketId = ticketId
    }
}

struct StopMatchmakingInputBody: Equatable {
    public let ticketId: String?
}

extension StopMatchmakingInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case ticketId = "TicketId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ticketId)
        ticketId = ticketIdDecoded
    }
}

extension StopMatchmakingOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopMatchmakingOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopMatchmakingOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopMatchmakingOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopMatchmakingOutputResponse()"}
}

extension StopMatchmakingOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct StopMatchmakingOutputResponse: Equatable {

    public init() {}
}

struct StopMatchmakingOutputResponseBody: Equatable {
}

extension StopMatchmakingOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct SuspendGameServerGroupInputBodyMiddleware: Middleware {
    public let id: String = "SuspendGameServerGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SuspendGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<SuspendGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SuspendGameServerGroupInput>
    public typealias MOutput = OperationOutput<SuspendGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SuspendGameServerGroupOutputError>
}

extension SuspendGameServerGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SuspendGameServerGroupInput(gameServerGroupName: \(String(describing: gameServerGroupName)), suspendActions: \(String(describing: suspendActions)))"}
}

extension SuspendGameServerGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case suspendActions = "SuspendActions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let suspendActions = suspendActions {
            var suspendActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suspendActions)
            for gameservergroupactions0 in suspendActions {
                try suspendActionsContainer.encode(gameservergroupactions0.rawValue)
            }
        }
    }
}

public struct SuspendGameServerGroupInputHeadersMiddleware: Middleware {
    public let id: String = "SuspendGameServerGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SuspendGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<SuspendGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SuspendGameServerGroupInput>
    public typealias MOutput = OperationOutput<SuspendGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SuspendGameServerGroupOutputError>
}

public struct SuspendGameServerGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "SuspendGameServerGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SuspendGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<SuspendGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SuspendGameServerGroupInput>
    public typealias MOutput = OperationOutput<SuspendGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SuspendGameServerGroupOutputError>
}

public struct SuspendGameServerGroupInput: Equatable {
    /// <p>A unique identifier for the game server group. Use either the <a>GameServerGroup</a> name or ARN value.</p>
    public let gameServerGroupName: String?
    /// <p>The activity to suspend for this game server group.</p>
    public let suspendActions: [GameServerGroupAction]?

    public init (
        gameServerGroupName: String? = nil,
        suspendActions: [GameServerGroupAction]? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.suspendActions = suspendActions
    }
}

struct SuspendGameServerGroupInputBody: Equatable {
    public let gameServerGroupName: String?
    public let suspendActions: [GameServerGroupAction]?
}

extension SuspendGameServerGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case suspendActions = "SuspendActions"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let suspendActionsContainer = try containerValues.decodeIfPresent([GameServerGroupAction?].self, forKey: .suspendActions)
        var suspendActionsDecoded0:[GameServerGroupAction]? = nil
        if let suspendActionsContainer = suspendActionsContainer {
            suspendActionsDecoded0 = [GameServerGroupAction]()
            for string0 in suspendActionsContainer {
                if let string0 = string0 {
                    suspendActionsDecoded0?.append(string0)
                }
            }
        }
        suspendActions = suspendActionsDecoded0
    }
}

extension SuspendGameServerGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SuspendGameServerGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SuspendGameServerGroupOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SuspendGameServerGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SuspendGameServerGroupOutputResponse(gameServerGroup: \(String(describing: gameServerGroup)))"}
}

extension SuspendGameServerGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: SuspendGameServerGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameServerGroup = output.gameServerGroup
        } else {
            self.gameServerGroup = nil
        }
    }
}

public struct SuspendGameServerGroupOutputResponse: Equatable {
    /// <p>An object that describes the game server group resource, with the
    ///                 <code>SuspendedActions</code> property updated to reflect the suspended
    ///             activity.</p>
    public let gameServerGroup: GameServerGroup?

    public init (
        gameServerGroup: GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

struct SuspendGameServerGroupOutputResponseBody: Equatable {
    public let gameServerGroup: GameServerGroup?
}

extension SuspendGameServerGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerGroup = "GameServerGroup"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupDecoded = try containerValues.decodeIfPresent(GameServerGroup.self, forKey: .gameServerGroup)
        gameServerGroup = gameServerGroupDecoded
    }
}

extension Tag: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}

extension Tag: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Tag(key: \(String(describing: key)), value: \(String(describing: value)))"}
}

/// <p>
///             A label that can be assigned to a GameLift resource.
///         </p>
///         <p>
///             <b>Learn more</b>
///          </p>
///         <p>
///             <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> in the
///             <i>AWS General Reference</i>
///          </p>
///         <p>
///             <a href="http://aws.amazon.com/answers/account-management/aws-tagging-strategies/">
///             AWS Tagging Strategies</a>
///          </p>
///         <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>TagResource</a> |
///                     <a>UntagResource</a> |
///                     <a>ListTagsForResource</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a>
///          </p>
public struct Tag: Equatable {
    /// <p>
    ///             The key for a developer-defined key:value pair for tagging an AWS resource.
    ///         </p>
    public let key: String?
    /// <p>
    ///             The value for a developer-defined key:value pair for tagging an AWS resource.
    ///         </p>
    public let value: String?

    public init (
        key: String? = nil,
        value: String? = nil
    )
    {
        self.key = key
        self.value = value
    }
}

public struct TagResourceInputBodyMiddleware: Middleware {
    public let id: String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

extension TagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceInput(resourceARN: \(String(describing: resourceARN)), tags: \(String(describing: tags)))"}
}

extension TagResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Equatable {
    /// <p>
    ///             The Amazon Resource Name
    ///             (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>)
    ///             that is assigned to and uniquely identifies the GameLift resource that you want to assign
    ///             tags to. GameLift resource ARNs are included in the data object for the resource, which
    ///             can be retrieved by calling a List or Describe operation for the resource type. </p>
    public let resourceARN: String?
    /// <p>A list of one or more tags to assign to the specified GameLift resource.
    ///             Tags are developer-defined and structured as key-value pairs.
    ///             The maximum tag limit may be lower than stated. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging AWS Resources</a>
    ///             for actual tagging limits.</p>
    public let tags: [Tag]?

    public init (
        resourceARN: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

struct TagResourceInputBody: Equatable {
    public let resourceARN: String?
    public let tags: [Tag]?
}

extension TagResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Equatable {
}

extension TagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension TaggingFailedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TaggingFailedException(message: \(String(describing: message)))"}
}

extension TaggingFailedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TaggingFailedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>
///             The requested tagging operation did not succeed. This may be due to invalid tag format
///             or the maximum tag limit may have been exceeded. Resolve the issue before retrying.
///         </p>
public struct TaggingFailedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TaggingFailedExceptionBody: Equatable {
    public let message: String?
}

extension TaggingFailedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TargetConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if targetValue != 0.0 {
            try encodeContainer.encode(targetValue, forKey: .targetValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetValueDecoded = try containerValues.decode(Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
    }
}

extension TargetConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TargetConfiguration(targetValue: \(String(describing: targetValue)))"}
}

/// <p>Settings for a target-based scaling policy (see <a>ScalingPolicy</a>. A
///         target-based policy tracks a particular fleet metric specifies a target value for the
///         metric. As player usage changes, the policy triggers Amazon GameLift to adjust capacity so
///         that the metric returns to the target value. The target configuration specifies settings
///         as needed for the target based policy, including the target value. </p>
///          <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>DescribeFleetCapacity</a> |
///                     <a>UpdateFleetCapacity</a> |
///                     <a>DescribeEC2InstanceLimits</a> |
///                     <a>PutScalingPolicy</a> |
///                     <a>DescribeScalingPolicies</a> |
///                     <a>DeleteScalingPolicy</a> |
///                     <a>StopFleetActions</a> |
///                     <a>StartFleetActions</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a>
///          </p>
public struct TargetConfiguration: Equatable {
    /// <p>Desired value to use with a target-based scaling policy. The value must be relevant
    ///         for whatever metric the scaling policy is using. For example, in a policy using the
    ///         metric PercentAvailableGameSessions, the target value should be the preferred size of
    ///         the fleet's buffer (the percent of capacity that should be idle and ready for new game
    ///         sessions).</p>
    public let targetValue: Double

    public init (
        targetValue: Double = 0.0
    )
    {
        self.targetValue = targetValue
    }
}

extension TargetTrackingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let targetValue = targetValue {
            try encodeContainer.encode(targetValue, forKey: .targetValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetValueDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
    }
}

extension TargetTrackingConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TargetTrackingConfiguration(targetValue: \(String(describing: targetValue)))"}
}

/// <p>
///             <b>This data type is used with the GameLift FleetIQ and game server groups.</b>
///          </p>
///         <p>Settings for a target-based scaling policy as part of a <a>GameServerGroupAutoScalingPolicy</a>.
///             These settings are used to
///             create a target-based policy that tracks the GameLift FleetIQ metric
///                 <code>"PercentUtilizedGameServers"</code> and specifies a target value for the
///             metric. As player usage changes, the policy triggers to adjust the game server group
///             capacity so that the metric returns to the target value. </p>
public struct TargetTrackingConfiguration: Equatable {
    /// <p>Desired value to use with a game server group target-based scaling policy.  </p>
    public let targetValue: Double?

    public init (
        targetValue: Double? = nil
    )
    {
        self.targetValue = targetValue
    }
}

extension TerminalRoutingStrategyException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TerminalRoutingStrategyException(message: \(String(describing: message)))"}
}

extension TerminalRoutingStrategyException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TerminalRoutingStrategyExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The service is unable to resolve the routing for a particular alias because it has
///             a terminal <a>RoutingStrategy</a> associated with it. The message returned in
///             this exception is the message defined in the routing strategy itself. Such requests
///             should only be retried if the routing strategy for the specified alias is modified.
///         </p>
public struct TerminalRoutingStrategyException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TerminalRoutingStrategyExceptionBody: Equatable {
    public let message: String?
}

extension TerminalRoutingStrategyExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnauthorizedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UnauthorizedException(message: \(String(describing: message)))"}
}

extension UnauthorizedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UnauthorizedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The client failed authentication. Clients should not retry such requests.</p>
public struct UnauthorizedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct UnauthorizedExceptionBody: Equatable {
    public let message: String?
}

extension UnauthorizedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnsupportedRegionException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UnsupportedRegionException(message: \(String(describing: message)))"}
}

extension UnsupportedRegionException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UnsupportedRegionExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested operation is not supported in the Region specified.</p>
public struct UnsupportedRegionException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedRegionExceptionBody: Equatable {
    public let message: String?
}

extension UnsupportedRegionExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UntagResourceInputBodyMiddleware: Middleware {
    public let id: String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceInput(resourceARN: \(String(describing: resourceARN)), tagKeys: \(String(describing: tagKeys)))"}
}

extension UntagResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Equatable {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to and
    ///             uniquely identifies the GameLift resource that you want to remove tags from. GameLift
    ///             resource ARNs are included in the data object for the resource, which can be retrieved
    ///             by calling a List or Describe operation for the resource type. </p>
    public let resourceARN: String?
    /// <p>A list of one or more tag keys to remove from the specified GameLift resource. An
    ///             AWS resource can have only one tag with a specific tag key, so specifying the tag key
    ///             identifies which tag to remove. </p>
    public let tagKeys: [String]?

    public init (
        resourceARN: String? = nil,
        tagKeys: [String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Equatable {
    public let resourceARN: String?
    public let tagKeys: [String]?
}

extension UntagResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Equatable {
}

extension UntagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct UpdateAliasInputBodyMiddleware: Middleware {
    public let id: String = "UpdateAliasInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateAliasInput>
    public typealias MOutput = OperationOutput<UpdateAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateAliasOutputError>
}

extension UpdateAliasInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateAliasInput(aliasId: \(String(describing: aliasId)), description: \(String(describing: description)), name: \(String(describing: name)), routingStrategy: \(String(describing: routingStrategy)))"}
}

extension UpdateAliasInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
        case description = "Description"
        case name = "Name"
        case routingStrategy = "RoutingStrategy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let routingStrategy = routingStrategy {
            try encodeContainer.encode(routingStrategy, forKey: .routingStrategy)
        }
    }
}

public struct UpdateAliasInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateAliasInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateAliasInput>
    public typealias MOutput = OperationOutput<UpdateAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateAliasOutputError>
}

public struct UpdateAliasInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateAliasInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateAliasInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateAliasInput>
    public typealias MOutput = OperationOutput<UpdateAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateAliasOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct UpdateAliasInput: Equatable {
    /// <p>A unique identifier for the alias that you want to update. You can use either the
    ///             alias ID or ARN value.</p>
    public let aliasId: String?
    /// <p>A human-readable description of the alias.</p>
    public let description: String?
    /// <p>A descriptive label that is associated with an alias. Alias names do not need to be unique.</p>
    public let name: String?
    /// <p>The routing configuration, including routing type and fleet target, for the
    ///             alias.</p>
    public let routingStrategy: RoutingStrategy?

    public init (
        aliasId: String? = nil,
        description: String? = nil,
        name: String? = nil,
        routingStrategy: RoutingStrategy? = nil
    )
    {
        self.aliasId = aliasId
        self.description = description
        self.name = name
        self.routingStrategy = routingStrategy
    }
}

struct UpdateAliasInputBody: Equatable {
    public let aliasId: String?
    public let name: String?
    public let description: String?
    public let routingStrategy: RoutingStrategy?
}

extension UpdateAliasInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
        case description = "Description"
        case name = "Name"
        case routingStrategy = "RoutingStrategy"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let routingStrategyDecoded = try containerValues.decodeIfPresent(RoutingStrategy.self, forKey: .routingStrategy)
        routingStrategy = routingStrategyDecoded
    }
}

extension UpdateAliasOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateAliasOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateAliasOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAliasOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateAliasOutputResponse(alias: \(String(describing: alias)))"}
}

extension UpdateAliasOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateAliasOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.alias = output.alias
        } else {
            self.alias = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct UpdateAliasOutputResponse: Equatable {
    /// <p>The updated alias resource.</p>
    public let alias: Alias?

    public init (
        alias: Alias? = nil
    )
    {
        self.alias = alias
    }
}

struct UpdateAliasOutputResponseBody: Equatable {
    public let alias: Alias?
}

extension UpdateAliasOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case alias = "Alias"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasDecoded = try containerValues.decodeIfPresent(Alias.self, forKey: .alias)
        alias = aliasDecoded
    }
}

public struct UpdateBuildInputBodyMiddleware: Middleware {
    public let id: String = "UpdateBuildInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateBuildInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateBuildInput>
    public typealias MOutput = OperationOutput<UpdateBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateBuildOutputError>
}

extension UpdateBuildInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateBuildInput(buildId: \(String(describing: buildId)), name: \(String(describing: name)), version: \(String(describing: version)))"}
}

extension UpdateBuildInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case buildId = "BuildId"
        case name = "Name"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildId = buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

public struct UpdateBuildInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateBuildInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateBuildInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateBuildInput>
    public typealias MOutput = OperationOutput<UpdateBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateBuildOutputError>
}

public struct UpdateBuildInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateBuildInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateBuildInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateBuildInput>
    public typealias MOutput = OperationOutput<UpdateBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateBuildOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct UpdateBuildInput: Equatable {
    /// <p>A unique identifier for the build to update. You can use either the build ID or ARN value.  </p>
    public let buildId: String?
    /// <p>A descriptive label that is associated with a build. Build names do not need to be unique. </p>
    public let name: String?
    /// <p>Version information that is associated with a build or script. Version strings do not need to be unique.</p>
    public let version: String?

    public init (
        buildId: String? = nil,
        name: String? = nil,
        version: String? = nil
    )
    {
        self.buildId = buildId
        self.name = name
        self.version = version
    }
}

struct UpdateBuildInputBody: Equatable {
    public let buildId: String?
    public let name: String?
    public let version: String?
}

extension UpdateBuildInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case buildId = "BuildId"
        case name = "Name"
        case version = "Version"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildId)
        buildId = buildIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
    }
}

extension UpdateBuildOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateBuildOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateBuildOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateBuildOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateBuildOutputResponse(build: \(String(describing: build)))"}
}

extension UpdateBuildOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateBuildOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.build = output.build
        } else {
            self.build = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct UpdateBuildOutputResponse: Equatable {
    /// <p>The updated build resource.</p>
    public let build: Build?

    public init (
        build: Build? = nil
    )
    {
        self.build = build
    }
}

struct UpdateBuildOutputResponseBody: Equatable {
    public let build: Build?
}

extension UpdateBuildOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case build = "Build"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildDecoded = try containerValues.decodeIfPresent(Build.self, forKey: .build)
        build = buildDecoded
    }
}

public struct UpdateFleetAttributesInputBodyMiddleware: Middleware {
    public let id: String = "UpdateFleetAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFleetAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFleetAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFleetAttributesInput>
    public typealias MOutput = OperationOutput<UpdateFleetAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFleetAttributesOutputError>
}

extension UpdateFleetAttributesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateFleetAttributesInput(description: \(String(describing: description)), fleetId: \(String(describing: fleetId)), metricGroups: \(String(describing: metricGroups)), name: \(String(describing: name)), newGameSessionProtectionPolicy: \(String(describing: newGameSessionProtectionPolicy)), resourceCreationLimitPolicy: \(String(describing: resourceCreationLimitPolicy)))"}
}

extension UpdateFleetAttributesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case fleetId = "FleetId"
        case metricGroups = "MetricGroups"
        case name = "Name"
        case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
        case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let metricGroups = metricGroups {
            var metricGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricGroups)
            for metricgrouplist0 in metricGroups {
                try metricGroupsContainer.encode(metricgrouplist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let newGameSessionProtectionPolicy = newGameSessionProtectionPolicy {
            try encodeContainer.encode(newGameSessionProtectionPolicy.rawValue, forKey: .newGameSessionProtectionPolicy)
        }
        if let resourceCreationLimitPolicy = resourceCreationLimitPolicy {
            try encodeContainer.encode(resourceCreationLimitPolicy, forKey: .resourceCreationLimitPolicy)
        }
    }
}

public struct UpdateFleetAttributesInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateFleetAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFleetAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFleetAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFleetAttributesInput>
    public typealias MOutput = OperationOutput<UpdateFleetAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFleetAttributesOutputError>
}

public struct UpdateFleetAttributesInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateFleetAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFleetAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFleetAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFleetAttributesInput>
    public typealias MOutput = OperationOutput<UpdateFleetAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFleetAttributesOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct UpdateFleetAttributesInput: Equatable {
    /// <p>A human-readable description of a fleet.</p>
    public let description: String?
    /// <p>A unique identifier for the fleet to update attribute metadata for. You can use either the fleet ID or ARN
    ///             value.</p>
    public let fleetId: String?
    /// <p>The name of a metric group to add this fleet to. Use a metric group in Amazon
    ///             CloudWatch to aggregate the metrics from multiple fleets. Provide an existing metric
    ///             group name, or create a new metric group by providing a new name. A fleet can only be in
    ///             one metric group at a time.</p>
    public let metricGroups: [String]?
    /// <p>A descriptive label that is associated with a fleet. Fleet names do not need to be unique.</p>
    public let name: String?
    /// <p>The game session protection policy to apply to all new instances created in this
    ///             fleet. Instances that already exist are not affected. You can set protection for
    ///             individual instances using <a>UpdateGameSession</a>.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>NoProtection</b> -- The game session can be
    ///                     terminated during a scale-down event.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>FullProtection</b> -- If the game session is in an
    ///                     <code>ACTIVE</code> status, it cannot be terminated during a scale-down
    ///                     event.</p>
    ///             </li>
    ///          </ul>
    public let newGameSessionProtectionPolicy: ProtectionPolicy?
    /// <p>Policy settings that limit the number of game sessions an individual player can create
    ///             over a span of time. </p>
    public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?

    public init (
        description: String? = nil,
        fleetId: String? = nil,
        metricGroups: [String]? = nil,
        name: String? = nil,
        newGameSessionProtectionPolicy: ProtectionPolicy? = nil,
        resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil
    )
    {
        self.description = description
        self.fleetId = fleetId
        self.metricGroups = metricGroups
        self.name = name
        self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
        self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
    }
}

struct UpdateFleetAttributesInputBody: Equatable {
    public let fleetId: String?
    public let name: String?
    public let description: String?
    public let newGameSessionProtectionPolicy: ProtectionPolicy?
    public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
    public let metricGroups: [String]?
}

extension UpdateFleetAttributesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case fleetId = "FleetId"
        case metricGroups = "MetricGroups"
        case name = "Name"
        case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
        case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let newGameSessionProtectionPolicyDecoded = try containerValues.decodeIfPresent(ProtectionPolicy.self, forKey: .newGameSessionProtectionPolicy)
        newGameSessionProtectionPolicy = newGameSessionProtectionPolicyDecoded
        let resourceCreationLimitPolicyDecoded = try containerValues.decodeIfPresent(ResourceCreationLimitPolicy.self, forKey: .resourceCreationLimitPolicy)
        resourceCreationLimitPolicy = resourceCreationLimitPolicyDecoded
        let metricGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .metricGroups)
        var metricGroupsDecoded0:[String]? = nil
        if let metricGroupsContainer = metricGroupsContainer {
            metricGroupsDecoded0 = [String]()
            for string0 in metricGroupsContainer {
                if let string0 = string0 {
                    metricGroupsDecoded0?.append(string0)
                }
            }
        }
        metricGroups = metricGroupsDecoded0
    }
}

extension UpdateFleetAttributesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateFleetAttributesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFleetStatusException" : self = .invalidFleetStatusException(try InvalidFleetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateFleetAttributesOutputError: Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidFleetStatusException(InvalidFleetStatusException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateFleetAttributesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateFleetAttributesOutputResponse(fleetId: \(String(describing: fleetId)))"}
}

extension UpdateFleetAttributesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateFleetAttributesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetId = output.fleetId
        } else {
            self.fleetId = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct UpdateFleetAttributesOutputResponse: Equatable {
    /// <p>A unique identifier for the fleet that was updated.</p>
    public let fleetId: String?

    public init (
        fleetId: String? = nil
    )
    {
        self.fleetId = fleetId
    }
}

struct UpdateFleetAttributesOutputResponseBody: Equatable {
    public let fleetId: String?
}

extension UpdateFleetAttributesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
    }
}

public struct UpdateFleetCapacityInputBodyMiddleware: Middleware {
    public let id: String = "UpdateFleetCapacityInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFleetCapacityInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFleetCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFleetCapacityInput>
    public typealias MOutput = OperationOutput<UpdateFleetCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFleetCapacityOutputError>
}

extension UpdateFleetCapacityInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateFleetCapacityInput(desiredInstances: \(String(describing: desiredInstances)), fleetId: \(String(describing: fleetId)), location: \(String(describing: location)), maxSize: \(String(describing: maxSize)), minSize: \(String(describing: minSize)))"}
}

extension UpdateFleetCapacityInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case desiredInstances = "DesiredInstances"
        case fleetId = "FleetId"
        case location = "Location"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredInstances = desiredInstances {
            try encodeContainer.encode(desiredInstances, forKey: .desiredInstances)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let maxSize = maxSize {
            try encodeContainer.encode(maxSize, forKey: .maxSize)
        }
        if let minSize = minSize {
            try encodeContainer.encode(minSize, forKey: .minSize)
        }
    }
}

public struct UpdateFleetCapacityInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateFleetCapacityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFleetCapacityInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFleetCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFleetCapacityInput>
    public typealias MOutput = OperationOutput<UpdateFleetCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFleetCapacityOutputError>
}

public struct UpdateFleetCapacityInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateFleetCapacityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFleetCapacityInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFleetCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFleetCapacityInput>
    public typealias MOutput = OperationOutput<UpdateFleetCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFleetCapacityOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct UpdateFleetCapacityInput: Equatable {
    /// <p>The number of EC2 instances you want to maintain in the specified fleet location.
    ///             This value must fall between the minimum and maximum size limits.</p>
    public let desiredInstances: Int?
    /// <p>A unique identifier for the fleet to update capacity settings for. You can use either the fleet ID or ARN
    ///             value.</p>
    public let fleetId: String?
    /// <p>The name of a remote location to update fleet capacity settings for, in the form of an
    ///             AWS Region code such as <code>us-west-2</code>.</p>
    public let location: String?
    /// <p>The maximum number of instances that are allowed in the specified fleet location. If
    ///             this parameter is not set, the default is 1.</p>
    public let maxSize: Int?
    /// <p>The minimum number of instances that are allowed in the specified fleet location. If
    ///             this parameter is not set, the default is 0.</p>
    public let minSize: Int?

    public init (
        desiredInstances: Int? = nil,
        fleetId: String? = nil,
        location: String? = nil,
        maxSize: Int? = nil,
        minSize: Int? = nil
    )
    {
        self.desiredInstances = desiredInstances
        self.fleetId = fleetId
        self.location = location
        self.maxSize = maxSize
        self.minSize = minSize
    }
}

struct UpdateFleetCapacityInputBody: Equatable {
    public let fleetId: String?
    public let desiredInstances: Int?
    public let minSize: Int?
    public let maxSize: Int?
    public let location: String?
}

extension UpdateFleetCapacityInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case desiredInstances = "DesiredInstances"
        case fleetId = "FleetId"
        case location = "Location"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let desiredInstancesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .desiredInstances)
        desiredInstances = desiredInstancesDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

extension UpdateFleetCapacityOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateFleetCapacityOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFleetStatusException" : self = .invalidFleetStatusException(try InvalidFleetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateFleetCapacityOutputError: Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidFleetStatusException(InvalidFleetStatusException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateFleetCapacityOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateFleetCapacityOutputResponse(fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)), location: \(String(describing: location)))"}
}

extension UpdateFleetCapacityOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateFleetCapacityOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
            self.location = output.location
        } else {
            self.fleetArn = nil
            self.fleetId = nil
            self.location = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct UpdateFleetCapacityOutputResponse: Equatable {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>. </p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet that was updated.</p>
    public let fleetId: String?
    /// <p>The remote location being updated, expressed as an AWS Region code,
    ///             such as <code>us-west-2</code>.</p>
    public let location: String?

    public init (
        fleetArn: String? = nil,
        fleetId: String? = nil,
        location: String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.location = location
    }
}

struct UpdateFleetCapacityOutputResponseBody: Equatable {
    public let fleetId: String?
    public let fleetArn: String?
    public let location: String?
}

extension UpdateFleetCapacityOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case location = "Location"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}

public struct UpdateFleetPortSettingsInputBodyMiddleware: Middleware {
    public let id: String = "UpdateFleetPortSettingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFleetPortSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFleetPortSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFleetPortSettingsInput>
    public typealias MOutput = OperationOutput<UpdateFleetPortSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFleetPortSettingsOutputError>
}

extension UpdateFleetPortSettingsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateFleetPortSettingsInput(fleetId: \(String(describing: fleetId)), inboundPermissionAuthorizations: \(String(describing: inboundPermissionAuthorizations)), inboundPermissionRevocations: \(String(describing: inboundPermissionRevocations)))"}
}

extension UpdateFleetPortSettingsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case inboundPermissionAuthorizations = "InboundPermissionAuthorizations"
        case inboundPermissionRevocations = "InboundPermissionRevocations"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let inboundPermissionAuthorizations = inboundPermissionAuthorizations {
            var inboundPermissionAuthorizationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inboundPermissionAuthorizations)
            for ippermissionslist0 in inboundPermissionAuthorizations {
                try inboundPermissionAuthorizationsContainer.encode(ippermissionslist0)
            }
        }
        if let inboundPermissionRevocations = inboundPermissionRevocations {
            var inboundPermissionRevocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inboundPermissionRevocations)
            for ippermissionslist0 in inboundPermissionRevocations {
                try inboundPermissionRevocationsContainer.encode(ippermissionslist0)
            }
        }
    }
}

public struct UpdateFleetPortSettingsInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateFleetPortSettingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFleetPortSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFleetPortSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFleetPortSettingsInput>
    public typealias MOutput = OperationOutput<UpdateFleetPortSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFleetPortSettingsOutputError>
}

public struct UpdateFleetPortSettingsInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateFleetPortSettingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFleetPortSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFleetPortSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFleetPortSettingsInput>
    public typealias MOutput = OperationOutput<UpdateFleetPortSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFleetPortSettingsOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct UpdateFleetPortSettingsInput: Equatable {
    /// <p>A unique identifier for the fleet to update port settings for. You can use either the fleet ID or ARN
    ///             value.</p>
    public let fleetId: String?
    /// <p>A collection of port settings to be added to the fleet resource.</p>
    public let inboundPermissionAuthorizations: [IpPermission]?
    /// <p>A collection of port settings to be removed from the fleet resource.</p>
    public let inboundPermissionRevocations: [IpPermission]?

    public init (
        fleetId: String? = nil,
        inboundPermissionAuthorizations: [IpPermission]? = nil,
        inboundPermissionRevocations: [IpPermission]? = nil
    )
    {
        self.fleetId = fleetId
        self.inboundPermissionAuthorizations = inboundPermissionAuthorizations
        self.inboundPermissionRevocations = inboundPermissionRevocations
    }
}

struct UpdateFleetPortSettingsInputBody: Equatable {
    public let fleetId: String?
    public let inboundPermissionAuthorizations: [IpPermission]?
    public let inboundPermissionRevocations: [IpPermission]?
}

extension UpdateFleetPortSettingsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case inboundPermissionAuthorizations = "InboundPermissionAuthorizations"
        case inboundPermissionRevocations = "InboundPermissionRevocations"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let inboundPermissionAuthorizationsContainer = try containerValues.decodeIfPresent([IpPermission?].self, forKey: .inboundPermissionAuthorizations)
        var inboundPermissionAuthorizationsDecoded0:[IpPermission]? = nil
        if let inboundPermissionAuthorizationsContainer = inboundPermissionAuthorizationsContainer {
            inboundPermissionAuthorizationsDecoded0 = [IpPermission]()
            for structure0 in inboundPermissionAuthorizationsContainer {
                if let structure0 = structure0 {
                    inboundPermissionAuthorizationsDecoded0?.append(structure0)
                }
            }
        }
        inboundPermissionAuthorizations = inboundPermissionAuthorizationsDecoded0
        let inboundPermissionRevocationsContainer = try containerValues.decodeIfPresent([IpPermission?].self, forKey: .inboundPermissionRevocations)
        var inboundPermissionRevocationsDecoded0:[IpPermission]? = nil
        if let inboundPermissionRevocationsContainer = inboundPermissionRevocationsContainer {
            inboundPermissionRevocationsDecoded0 = [IpPermission]()
            for structure0 in inboundPermissionRevocationsContainer {
                if let structure0 = structure0 {
                    inboundPermissionRevocationsDecoded0?.append(structure0)
                }
            }
        }
        inboundPermissionRevocations = inboundPermissionRevocationsDecoded0
    }
}

extension UpdateFleetPortSettingsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateFleetPortSettingsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFleetStatusException" : self = .invalidFleetStatusException(try InvalidFleetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateFleetPortSettingsOutputError: Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidFleetStatusException(InvalidFleetStatusException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateFleetPortSettingsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateFleetPortSettingsOutputResponse(fleetId: \(String(describing: fleetId)))"}
}

extension UpdateFleetPortSettingsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateFleetPortSettingsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fleetId = output.fleetId
        } else {
            self.fleetId = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct UpdateFleetPortSettingsOutputResponse: Equatable {
    /// <p>A unique identifier for the fleet that was updated.</p>
    public let fleetId: String?

    public init (
        fleetId: String? = nil
    )
    {
        self.fleetId = fleetId
    }
}

struct UpdateFleetPortSettingsOutputResponseBody: Equatable {
    public let fleetId: String?
}

extension UpdateFleetPortSettingsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
    }
}

public struct UpdateGameServerGroupInputBodyMiddleware: Middleware {
    public let id: String = "UpdateGameServerGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameServerGroupInput>
    public typealias MOutput = OperationOutput<UpdateGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameServerGroupOutputError>
}

extension UpdateGameServerGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateGameServerGroupInput(balancingStrategy: \(String(describing: balancingStrategy)), gameServerGroupName: \(String(describing: gameServerGroupName)), gameServerProtectionPolicy: \(String(describing: gameServerProtectionPolicy)), instanceDefinitions: \(String(describing: instanceDefinitions)), roleArn: \(String(describing: roleArn)))"}
}

extension UpdateGameServerGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case balancingStrategy = "BalancingStrategy"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let balancingStrategy = balancingStrategy {
            try encodeContainer.encode(balancingStrategy.rawValue, forKey: .balancingStrategy)
        }
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerProtectionPolicy = gameServerProtectionPolicy {
            try encodeContainer.encode(gameServerProtectionPolicy.rawValue, forKey: .gameServerProtectionPolicy)
        }
        if let instanceDefinitions = instanceDefinitions {
            var instanceDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceDefinitions)
            for instancedefinitions0 in instanceDefinitions {
                try instanceDefinitionsContainer.encode(instancedefinitions0)
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

public struct UpdateGameServerGroupInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateGameServerGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameServerGroupInput>
    public typealias MOutput = OperationOutput<UpdateGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameServerGroupOutputError>
}

public struct UpdateGameServerGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateGameServerGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameServerGroupInput>
    public typealias MOutput = OperationOutput<UpdateGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameServerGroupOutputError>
}

public struct UpdateGameServerGroupInput: Equatable {
    /// <p>Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the
    ///             game server group. Method options include the following:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>SPOT_ONLY</code> - Only Spot Instances are used in the game server group. If Spot
    ///                     Instances are unavailable or not viable for game hosting, the game server group
    ///                     provides no hosting capacity until Spot Instances can again be used. Until then,
    ///                     no new instances are started, and the existing nonviable Spot Instances are
    ///                     terminated (after current gameplay ends) and are not replaced.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>SPOT_PREFERRED</code> - (default value) Spot Instances are used whenever available in
    ///                     the game server group. If Spot Instances are unavailable, the game server group
    ///                     continues to provide hosting capacity by falling back to On-Demand Instances.
    ///                     Existing nonviable Spot Instances are terminated (after current gameplay ends)
    ///                     and are replaced with new On-Demand Instances.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ON_DEMAND_ONLY</code> - Only On-Demand Instances are used in the game
    ///                     server group. No Spot Instances are used, even when available, while this
    ///                     balancing strategy is in force.</p>
    ///             </li>
    ///          </ul>
    public let balancingStrategy: BalancingStrategy?
    /// <p>A unique identifier for the game server group. Use either the <a>GameServerGroup</a> name or ARN value.</p>
    public let gameServerGroupName: String?
    /// <p>A flag that indicates whether instances in the game server group are protected
    ///             from early termination. Unprotected instances that have active game servers running might
    ///             be terminated during a scale-down event, causing players to be dropped from the game.
    ///             Protected instances cannot be terminated while there are active game servers running except
    ///             in the event of a forced game server group deletion (see ). An exception to this is with Spot
    ///             Instances, which can be terminated by AWS regardless of protection status. This property is set to <code>NO_PROTECTION</code> by default.</p>
    public let gameServerProtectionPolicy: GameServerProtectionPolicy?
    /// <p>An updated list of EC2 instance types to use in the Auto Scaling group. The instance
    ///             definitions must specify at least two different instance types that are supported by
    ///             GameLift FleetIQ. This updated list replaces the entire current list of instance definitions for
    ///             the game server group. For more information on instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">EC2 Instance
    ///                 Types</a> in the <i>Amazon EC2 User Guide</i>. You can optionally
    ///             specify capacity weighting for each instance type. If no weight value is specified for
    ///             an instance type, it is set to the default value "1". For more information about
    ///             capacity weighting, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html"> Instance Weighting for
    ///                 Amazon EC2 Auto Scaling</a> in the Amazon EC2 Auto Scaling User Guide.</p>
    public let instanceDefinitions: [InstanceDefinition]?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) for an IAM role that
    ///             allows Amazon GameLift to access your EC2 Auto Scaling groups.</p>
    public let roleArn: String?

    public init (
        balancingStrategy: BalancingStrategy? = nil,
        gameServerGroupName: String? = nil,
        gameServerProtectionPolicy: GameServerProtectionPolicy? = nil,
        instanceDefinitions: [InstanceDefinition]? = nil,
        roleArn: String? = nil
    )
    {
        self.balancingStrategy = balancingStrategy
        self.gameServerGroupName = gameServerGroupName
        self.gameServerProtectionPolicy = gameServerProtectionPolicy
        self.instanceDefinitions = instanceDefinitions
        self.roleArn = roleArn
    }
}

struct UpdateGameServerGroupInputBody: Equatable {
    public let gameServerGroupName: String?
    public let roleArn: String?
    public let instanceDefinitions: [InstanceDefinition]?
    public let gameServerProtectionPolicy: GameServerProtectionPolicy?
    public let balancingStrategy: BalancingStrategy?
}

extension UpdateGameServerGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case balancingStrategy = "BalancingStrategy"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let instanceDefinitionsContainer = try containerValues.decodeIfPresent([InstanceDefinition?].self, forKey: .instanceDefinitions)
        var instanceDefinitionsDecoded0:[InstanceDefinition]? = nil
        if let instanceDefinitionsContainer = instanceDefinitionsContainer {
            instanceDefinitionsDecoded0 = [InstanceDefinition]()
            for structure0 in instanceDefinitionsContainer {
                if let structure0 = structure0 {
                    instanceDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        instanceDefinitions = instanceDefinitionsDecoded0
        let gameServerProtectionPolicyDecoded = try containerValues.decodeIfPresent(GameServerProtectionPolicy.self, forKey: .gameServerProtectionPolicy)
        gameServerProtectionPolicy = gameServerProtectionPolicyDecoded
        let balancingStrategyDecoded = try containerValues.decodeIfPresent(BalancingStrategy.self, forKey: .balancingStrategy)
        balancingStrategy = balancingStrategyDecoded
    }
}

extension UpdateGameServerGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGameServerGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateGameServerGroupOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGameServerGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateGameServerGroupOutputResponse(gameServerGroup: \(String(describing: gameServerGroup)))"}
}

extension UpdateGameServerGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateGameServerGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameServerGroup = output.gameServerGroup
        } else {
            self.gameServerGroup = nil
        }
    }
}

public struct UpdateGameServerGroupOutputResponse: Equatable {
    /// <p>An object that describes the game server group resource with updated properties. </p>
    public let gameServerGroup: GameServerGroup?

    public init (
        gameServerGroup: GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

struct UpdateGameServerGroupOutputResponseBody: Equatable {
    public let gameServerGroup: GameServerGroup?
}

extension UpdateGameServerGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerGroup = "GameServerGroup"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupDecoded = try containerValues.decodeIfPresent(GameServerGroup.self, forKey: .gameServerGroup)
        gameServerGroup = gameServerGroupDecoded
    }
}

public struct UpdateGameServerInputBodyMiddleware: Middleware {
    public let id: String = "UpdateGameServerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameServerInput>
    public typealias MOutput = OperationOutput<UpdateGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameServerOutputError>
}

extension UpdateGameServerInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateGameServerInput(gameServerData: \(String(describing: gameServerData)), gameServerGroupName: \(String(describing: gameServerGroupName)), gameServerId: \(String(describing: gameServerId)), healthCheck: \(String(describing: healthCheck)), utilizationStatus: \(String(describing: utilizationStatus)))"}
}

extension UpdateGameServerInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameServerData = "GameServerData"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
        case healthCheck = "HealthCheck"
        case utilizationStatus = "UtilizationStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerData = gameServerData {
            try encodeContainer.encode(gameServerData, forKey: .gameServerData)
        }
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerId = gameServerId {
            try encodeContainer.encode(gameServerId, forKey: .gameServerId)
        }
        if let healthCheck = healthCheck {
            try encodeContainer.encode(healthCheck.rawValue, forKey: .healthCheck)
        }
        if let utilizationStatus = utilizationStatus {
            try encodeContainer.encode(utilizationStatus.rawValue, forKey: .utilizationStatus)
        }
    }
}

public struct UpdateGameServerInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateGameServerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameServerInput>
    public typealias MOutput = OperationOutput<UpdateGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameServerOutputError>
}

public struct UpdateGameServerInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateGameServerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameServerInput>
    public typealias MOutput = OperationOutput<UpdateGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameServerOutputError>
}

public struct UpdateGameServerInput: Equatable {
    /// <p>A set of custom game server properties, formatted as a single string value. This data
    ///             is passed to a game client or service when it requests information on game servers using
    ///                 <a>ListGameServers</a> or <a>ClaimGameServer</a>. </p>
    public let gameServerData: String?
    /// <p>A unique identifier for the game server group where the game server is running.
    ///             Use either the <a>GameServerGroup</a> name or ARN value.</p>
    public let gameServerGroupName: String?
    /// <p>A custom string that uniquely identifies the game server to update.</p>
    public let gameServerId: String?
    /// <p>Indicates health status of the game server. A request that includes this parameter
    ///             updates the game server's <i>LastHealthCheckTime</i> timestamp. </p>
    public let healthCheck: GameServerHealthCheck?
    /// <p>Indicates whether the game server is available or is currently hosting
    ///             gameplay.</p>
    public let utilizationStatus: GameServerUtilizationStatus?

    public init (
        gameServerData: String? = nil,
        gameServerGroupName: String? = nil,
        gameServerId: String? = nil,
        healthCheck: GameServerHealthCheck? = nil,
        utilizationStatus: GameServerUtilizationStatus? = nil
    )
    {
        self.gameServerData = gameServerData
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
        self.healthCheck = healthCheck
        self.utilizationStatus = utilizationStatus
    }
}

struct UpdateGameServerInputBody: Equatable {
    public let gameServerGroupName: String?
    public let gameServerId: String?
    public let gameServerData: String?
    public let utilizationStatus: GameServerUtilizationStatus?
    public let healthCheck: GameServerHealthCheck?
}

extension UpdateGameServerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServerData = "GameServerData"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
        case healthCheck = "HealthCheck"
        case utilizationStatus = "UtilizationStatus"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerId)
        gameServerId = gameServerIdDecoded
        let gameServerDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameServerData)
        gameServerData = gameServerDataDecoded
        let utilizationStatusDecoded = try containerValues.decodeIfPresent(GameServerUtilizationStatus.self, forKey: .utilizationStatus)
        utilizationStatus = utilizationStatusDecoded
        let healthCheckDecoded = try containerValues.decodeIfPresent(GameServerHealthCheck.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
    }
}

extension UpdateGameServerOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGameServerOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateGameServerOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGameServerOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateGameServerOutputResponse(gameServer: \(String(describing: gameServer)))"}
}

extension UpdateGameServerOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateGameServerOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameServer = output.gameServer
        } else {
            self.gameServer = nil
        }
    }
}

public struct UpdateGameServerOutputResponse: Equatable {
    /// <p>Object that describes the newly updated game server.</p>
    public let gameServer: GameServer?

    public init (
        gameServer: GameServer? = nil
    )
    {
        self.gameServer = gameServer
    }
}

struct UpdateGameServerOutputResponseBody: Equatable {
    public let gameServer: GameServer?
}

extension UpdateGameServerOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameServer = "GameServer"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerDecoded = try containerValues.decodeIfPresent(GameServer.self, forKey: .gameServer)
        gameServer = gameServerDecoded
    }
}

public struct UpdateGameSessionInputBodyMiddleware: Middleware {
    public let id: String = "UpdateGameSessionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameSessionInput>
    public typealias MOutput = OperationOutput<UpdateGameSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameSessionOutputError>
}

extension UpdateGameSessionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateGameSessionInput(gameSessionId: \(String(describing: gameSessionId)), maximumPlayerSessionCount: \(String(describing: maximumPlayerSessionCount)), name: \(String(describing: name)), playerSessionCreationPolicy: \(String(describing: playerSessionCreationPolicy)), protectionPolicy: \(String(describing: protectionPolicy)))"}
}

extension UpdateGameSessionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameSessionId = "GameSessionId"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case name = "Name"
        case playerSessionCreationPolicy = "PlayerSessionCreationPolicy"
        case protectionPolicy = "ProtectionPolicy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let maximumPlayerSessionCount = maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let playerSessionCreationPolicy = playerSessionCreationPolicy {
            try encodeContainer.encode(playerSessionCreationPolicy.rawValue, forKey: .playerSessionCreationPolicy)
        }
        if let protectionPolicy = protectionPolicy {
            try encodeContainer.encode(protectionPolicy.rawValue, forKey: .protectionPolicy)
        }
    }
}

public struct UpdateGameSessionInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateGameSessionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameSessionInput>
    public typealias MOutput = OperationOutput<UpdateGameSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameSessionOutputError>
}

public struct UpdateGameSessionInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateGameSessionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameSessionInput>
    public typealias MOutput = OperationOutput<UpdateGameSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameSessionOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct UpdateGameSessionInput: Equatable {
    /// <p>A unique identifier for the game session to update. </p>
    public let gameSessionId: String?
    /// <p>The maximum number of players that can be connected simultaneously to the game session.</p>
    public let maximumPlayerSessionCount: Int?
    /// <p>A descriptive label that is associated with a game session. Session names do not need to be unique.</p>
    public let name: String?
    /// <p>A policy that determines whether the game session is accepting new players.</p>
    public let playerSessionCreationPolicy: PlayerSessionCreationPolicy?
    /// <p>Game session protection policy to apply to this game session only.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>NoProtection</b> -- The game session can be
    ///                     terminated during a scale-down event.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>FullProtection</b> -- If the game session is in an
    ///                     <code>ACTIVE</code> status, it cannot be terminated during a scale-down
    ///                     event.</p>
    ///             </li>
    ///          </ul>
    public let protectionPolicy: ProtectionPolicy?

    public init (
        gameSessionId: String? = nil,
        maximumPlayerSessionCount: Int? = nil,
        name: String? = nil,
        playerSessionCreationPolicy: PlayerSessionCreationPolicy? = nil,
        protectionPolicy: ProtectionPolicy? = nil
    )
    {
        self.gameSessionId = gameSessionId
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
        self.name = name
        self.playerSessionCreationPolicy = playerSessionCreationPolicy
        self.protectionPolicy = protectionPolicy
    }
}

struct UpdateGameSessionInputBody: Equatable {
    public let gameSessionId: String?
    public let maximumPlayerSessionCount: Int?
    public let name: String?
    public let playerSessionCreationPolicy: PlayerSessionCreationPolicy?
    public let protectionPolicy: ProtectionPolicy?
}

extension UpdateGameSessionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessionId = "GameSessionId"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case name = "Name"
        case playerSessionCreationPolicy = "PlayerSessionCreationPolicy"
        case protectionPolicy = "ProtectionPolicy"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let playerSessionCreationPolicyDecoded = try containerValues.decodeIfPresent(PlayerSessionCreationPolicy.self, forKey: .playerSessionCreationPolicy)
        playerSessionCreationPolicy = playerSessionCreationPolicyDecoded
        let protectionPolicyDecoded = try containerValues.decodeIfPresent(ProtectionPolicy.self, forKey: .protectionPolicy)
        protectionPolicy = protectionPolicyDecoded
    }
}

extension UpdateGameSessionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGameSessionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGameSessionStatusException" : self = .invalidGameSessionStatusException(try InvalidGameSessionStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateGameSessionOutputError: Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidGameSessionStatusException(InvalidGameSessionStatusException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGameSessionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateGameSessionOutputResponse(gameSession: \(String(describing: gameSession)))"}
}

extension UpdateGameSessionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateGameSessionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameSession = output.gameSession
        } else {
            self.gameSession = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct UpdateGameSessionOutputResponse: Equatable {
    /// <p>The updated game session properties.</p>
    public let gameSession: GameSession?

    public init (
        gameSession: GameSession? = nil
    )
    {
        self.gameSession = gameSession
    }
}

struct UpdateGameSessionOutputResponseBody: Equatable {
    public let gameSession: GameSession?
}

extension UpdateGameSessionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSession = "GameSession"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionDecoded = try containerValues.decodeIfPresent(GameSession.self, forKey: .gameSession)
        gameSession = gameSessionDecoded
    }
}

public struct UpdateGameSessionQueueInputBodyMiddleware: Middleware {
    public let id: String = "UpdateGameSessionQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameSessionQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameSessionQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameSessionQueueInput>
    public typealias MOutput = OperationOutput<UpdateGameSessionQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameSessionQueueOutputError>
}

extension UpdateGameSessionQueueInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateGameSessionQueueInput(customEventData: \(String(describing: customEventData)), destinations: \(String(describing: destinations)), filterConfiguration: \(String(describing: filterConfiguration)), name: \(String(describing: name)), notificationTarget: \(String(describing: notificationTarget)), playerLatencyPolicies: \(String(describing: playerLatencyPolicies)), priorityConfiguration: \(String(describing: priorityConfiguration)), timeoutInSeconds: \(String(describing: timeoutInSeconds)))"}
}

extension UpdateGameSessionQueueInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customEventData = "CustomEventData"
        case destinations = "Destinations"
        case filterConfiguration = "FilterConfiguration"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case playerLatencyPolicies = "PlayerLatencyPolicies"
        case priorityConfiguration = "PriorityConfiguration"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customEventData = customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for gamesessionqueuedestinationlist0 in destinations {
                try destinationsContainer.encode(gamesessionqueuedestinationlist0)
            }
        }
        if let filterConfiguration = filterConfiguration {
            try encodeContainer.encode(filterConfiguration, forKey: .filterConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let playerLatencyPolicies = playerLatencyPolicies {
            var playerLatencyPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencyPolicies)
            for playerlatencypolicylist0 in playerLatencyPolicies {
                try playerLatencyPoliciesContainer.encode(playerlatencypolicylist0)
            }
        }
        if let priorityConfiguration = priorityConfiguration {
            try encodeContainer.encode(priorityConfiguration, forKey: .priorityConfiguration)
        }
        if let timeoutInSeconds = timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }
}

public struct UpdateGameSessionQueueInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateGameSessionQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameSessionQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameSessionQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameSessionQueueInput>
    public typealias MOutput = OperationOutput<UpdateGameSessionQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameSessionQueueOutputError>
}

public struct UpdateGameSessionQueueInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateGameSessionQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameSessionQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameSessionQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameSessionQueueInput>
    public typealias MOutput = OperationOutput<UpdateGameSessionQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameSessionQueueOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct UpdateGameSessionQueueInput: Equatable {
    /// <p>
    ///             Information to be added to all events that are related to this game session queue.
    ///         </p>
    public let customEventData: String?
    /// <p>A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.
    ///     Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference. When updating this list, provide a complete list of destinations.</p>
    public let destinations: [GameSessionQueueDestination]?
    /// <p>A list of locations where a queue is allowed to place new game sessions. Locations
    ///             are specified in the form of AWS Region codes, such as <code>us-west-2</code>. If this parameter is
    ///             not set, game sessions can be placed in any queue location. To remove an existing filter configuration, pass in an empty set.</p>
    public let filterConfiguration: FilterConfiguration?
    /// <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region. You can use either the queue ID or ARN value. </p>
    public let name: String?
    /// <p>An SNS topic ARN that is set up to receive game session placement notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html">
    ///             Setting up notifications for game session placement</a>.</p>
    public let notificationTarget: String?
    /// <p>A set of policies that act as a sliding cap on player latency. FleetIQ works to
    ///             deliver low latency for most players in a game session. These policies ensure that no
    ///             individual player can be placed into a game with unreasonably high latency. Use multiple
    ///             policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their
    ///             maximum allowed latency, starting with the lowest value. When updating policies, provide a complete collection of
    ///             policies.</p>
    public let playerLatencyPolicies: [PlayerLatencyPolicy]?
    /// <p>Custom settings to use when prioritizing destinations and locations for game session placements. This
    ///             configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly
    ///             named will be automatically applied at the end of the prioritization process. To remove an existing priority configuration, pass in an empty set.</p>
    public let priorityConfiguration: PriorityConfiguration?
    /// <p>The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a <code>TIMED_OUT</code> status.</p>
    public let timeoutInSeconds: Int?

    public init (
        customEventData: String? = nil,
        destinations: [GameSessionQueueDestination]? = nil,
        filterConfiguration: FilterConfiguration? = nil,
        name: String? = nil,
        notificationTarget: String? = nil,
        playerLatencyPolicies: [PlayerLatencyPolicy]? = nil,
        priorityConfiguration: PriorityConfiguration? = nil,
        timeoutInSeconds: Int? = nil
    )
    {
        self.customEventData = customEventData
        self.destinations = destinations
        self.filterConfiguration = filterConfiguration
        self.name = name
        self.notificationTarget = notificationTarget
        self.playerLatencyPolicies = playerLatencyPolicies
        self.priorityConfiguration = priorityConfiguration
        self.timeoutInSeconds = timeoutInSeconds
    }
}

struct UpdateGameSessionQueueInputBody: Equatable {
    public let name: String?
    public let timeoutInSeconds: Int?
    public let playerLatencyPolicies: [PlayerLatencyPolicy]?
    public let destinations: [GameSessionQueueDestination]?
    public let filterConfiguration: FilterConfiguration?
    public let priorityConfiguration: PriorityConfiguration?
    public let customEventData: String?
    public let notificationTarget: String?
}

extension UpdateGameSessionQueueInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case customEventData = "CustomEventData"
        case destinations = "Destinations"
        case filterConfiguration = "FilterConfiguration"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case playerLatencyPolicies = "PlayerLatencyPolicies"
        case priorityConfiguration = "PriorityConfiguration"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let playerLatencyPoliciesContainer = try containerValues.decodeIfPresent([PlayerLatencyPolicy?].self, forKey: .playerLatencyPolicies)
        var playerLatencyPoliciesDecoded0:[PlayerLatencyPolicy]? = nil
        if let playerLatencyPoliciesContainer = playerLatencyPoliciesContainer {
            playerLatencyPoliciesDecoded0 = [PlayerLatencyPolicy]()
            for structure0 in playerLatencyPoliciesContainer {
                if let structure0 = structure0 {
                    playerLatencyPoliciesDecoded0?.append(structure0)
                }
            }
        }
        playerLatencyPolicies = playerLatencyPoliciesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([GameSessionQueueDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[GameSessionQueueDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [GameSessionQueueDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let filterConfigurationDecoded = try containerValues.decodeIfPresent(FilterConfiguration.self, forKey: .filterConfiguration)
        filterConfiguration = filterConfigurationDecoded
        let priorityConfigurationDecoded = try containerValues.decodeIfPresent(PriorityConfiguration.self, forKey: .priorityConfiguration)
        priorityConfiguration = priorityConfigurationDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
    }
}

extension UpdateGameSessionQueueOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGameSessionQueueOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateGameSessionQueueOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGameSessionQueueOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateGameSessionQueueOutputResponse(gameSessionQueue: \(String(describing: gameSessionQueue)))"}
}

extension UpdateGameSessionQueueOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateGameSessionQueueOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.gameSessionQueue = output.gameSessionQueue
        } else {
            self.gameSessionQueue = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct UpdateGameSessionQueueOutputResponse: Equatable {
    /// <p>An object that describes the newly updated game session queue.</p>
    public let gameSessionQueue: GameSessionQueue?

    public init (
        gameSessionQueue: GameSessionQueue? = nil
    )
    {
        self.gameSessionQueue = gameSessionQueue
    }
}

struct UpdateGameSessionQueueOutputResponseBody: Equatable {
    public let gameSessionQueue: GameSessionQueue?
}

extension UpdateGameSessionQueueOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gameSessionQueue = "GameSessionQueue"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionQueueDecoded = try containerValues.decodeIfPresent(GameSessionQueue.self, forKey: .gameSessionQueue)
        gameSessionQueue = gameSessionQueueDecoded
    }
}

public struct UpdateMatchmakingConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "UpdateMatchmakingConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMatchmakingConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMatchmakingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMatchmakingConfigurationInput>
    public typealias MOutput = OperationOutput<UpdateMatchmakingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMatchmakingConfigurationOutputError>
}

extension UpdateMatchmakingConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateMatchmakingConfigurationInput(acceptanceRequired: \(String(describing: acceptanceRequired)), acceptanceTimeoutSeconds: \(String(describing: acceptanceTimeoutSeconds)), additionalPlayerCount: \(String(describing: additionalPlayerCount)), backfillMode: \(String(describing: backfillMode)), customEventData: \(String(describing: customEventData)), description: \(String(describing: description)), flexMatchMode: \(String(describing: flexMatchMode)), gameProperties: \(String(describing: gameProperties)), gameSessionData: \(String(describing: gameSessionData)), gameSessionQueueArns: \(String(describing: gameSessionQueueArns)), name: \(String(describing: name)), notificationTarget: \(String(describing: notificationTarget)), requestTimeoutSeconds: \(String(describing: requestTimeoutSeconds)), ruleSetName: \(String(describing: ruleSetName)))"}
}

extension UpdateMatchmakingConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptanceRequired = acceptanceRequired {
            try encodeContainer.encode(acceptanceRequired, forKey: .acceptanceRequired)
        }
        if let acceptanceTimeoutSeconds = acceptanceTimeoutSeconds {
            try encodeContainer.encode(acceptanceTimeoutSeconds, forKey: .acceptanceTimeoutSeconds)
        }
        if let additionalPlayerCount = additionalPlayerCount {
            try encodeContainer.encode(additionalPlayerCount, forKey: .additionalPlayerCount)
        }
        if let backfillMode = backfillMode {
            try encodeContainer.encode(backfillMode.rawValue, forKey: .backfillMode)
        }
        if let customEventData = customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let flexMatchMode = flexMatchMode {
            try encodeContainer.encode(flexMatchMode.rawValue, forKey: .flexMatchMode)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gamepropertylist0 in gameProperties {
                try gamePropertiesContainer.encode(gamepropertylist0)
            }
        }
        if let gameSessionData = gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionQueueArns = gameSessionQueueArns {
            var gameSessionQueueArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameSessionQueueArns)
            for queuearnslist0 in gameSessionQueueArns {
                try gameSessionQueueArnsContainer.encode(queuearnslist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let requestTimeoutSeconds = requestTimeoutSeconds {
            try encodeContainer.encode(requestTimeoutSeconds, forKey: .requestTimeoutSeconds)
        }
        if let ruleSetName = ruleSetName {
            try encodeContainer.encode(ruleSetName, forKey: .ruleSetName)
        }
    }
}

public struct UpdateMatchmakingConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateMatchmakingConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMatchmakingConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMatchmakingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMatchmakingConfigurationInput>
    public typealias MOutput = OperationOutput<UpdateMatchmakingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMatchmakingConfigurationOutputError>
}

public struct UpdateMatchmakingConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateMatchmakingConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMatchmakingConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMatchmakingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMatchmakingConfigurationInput>
    public typealias MOutput = OperationOutput<UpdateMatchmakingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMatchmakingConfigurationOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct UpdateMatchmakingConfigurationInput: Equatable {
    /// <p>A flag that indicates whether a match that was created with this configuration must be
    ///             accepted by the matched players. To require acceptance, set to TRUE. With this option
    ///             enabled, matchmaking tickets use the status <code>REQUIRES_ACCEPTANCE</code> to indicate
    ///             when a completed potential match is waiting for player acceptance. </p>
    public let acceptanceRequired: Bool?
    /// <p>The length of time (in seconds) to wait for players to accept a proposed match, if
    ///             acceptance is required.</p>
    public let acceptanceTimeoutSeconds: Int?
    /// <p>The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies
    ///             a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match. This parameter is not used if <code>FlexMatchMode</code> is set to
    ///             <code>STANDALONE</code>.</p>
    public let additionalPlayerCount: Int?
    /// <p>The method that is used to backfill game sessions created with this matchmaking
    ///             configuration. Specify MANUAL when your game manages backfill requests manually or does
    ///             not use the match backfill feature. Specify AUTOMATIC to have GameLift create a <a>StartMatchBackfill</a> request whenever a game session has one or more open
    ///             slots. Learn more about manual and automatic backfill in <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html">Backfill Existing Games
    ///                 with FlexMatch</a>. Automatic backfill is not available when
    ///             <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    public let backfillMode: BackfillMode?
    /// <p>Information to add to all events related to the matchmaking configuration. </p>
    public let customEventData: String?
    /// <p>A descriptive label that is associated with matchmaking configuration.</p>
    public let description: String?
    /// <p>Indicates whether this matchmaking configuration is being used with GameLift hosting or
    ///             as a standalone matchmaking solution. </p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <b>STANDALONE</b> - FlexMatch forms matches and returns
    ///                 match information, including players and team assignments, in a
    ///                 <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html#match-events-matchmakingsucceeded">
    ///                     MatchmakingSucceeded</a> event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>WITH_QUEUE</b> - FlexMatch forms matches and uses the specified GameLift queue to
    ///                 start a game session for the match. </p>
    ///             </li>
    ///          </ul>
    public let flexMatchMode: FlexMatchMode?
    /// <p>A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <a>GameSession</a>
    ///             object that is created for a successful match.  This parameter is not used if
    ///             <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    public let gameProperties: [GameProperty]?
    /// <p>A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <a>GameSession</a> object
    ///             that is created for a successful match.  This parameter is not used if
    ///             <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    public let gameSessionData: String?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::gamesessionqueue/<queue name></code>. Queues can be located in any Region. Queues are used to start new
    ///             GameLift-hosted game sessions for matches that are created with this matchmaking
    ///             configuration. If <code>FlexMatchMode</code> is set to <code>STANDALONE</code>, do not
    ///             set this parameter.</p>
    public let gameSessionQueueArns: [String]?
    /// <p>A unique identifier for the matchmaking configuration to update. You can use either the configuration name or ARN value. </p>
    public let name: String?
    /// <p>An SNS topic ARN that is set up to receive matchmaking notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-notification.html">
    ///                 Setting up notifications for matchmaking</a> for more information.</p>
    public let notificationTarget: String?
    /// <p>The maximum duration, in seconds, that a matchmaking ticket can remain in process
    ///             before timing out. Requests that fail due to timing out can be resubmitted as
    ///             needed.</p>
    public let requestTimeoutSeconds: Int?
    /// <p>A unique identifier for the matchmaking rule set to use with this configuration. You can use either the rule set name or ARN
    ///             value. A matchmaking configuration can only use rule sets that are defined in the same
    ///             Region.</p>
    public let ruleSetName: String?

    public init (
        acceptanceRequired: Bool? = nil,
        acceptanceTimeoutSeconds: Int? = nil,
        additionalPlayerCount: Int? = nil,
        backfillMode: BackfillMode? = nil,
        customEventData: String? = nil,
        description: String? = nil,
        flexMatchMode: FlexMatchMode? = nil,
        gameProperties: [GameProperty]? = nil,
        gameSessionData: String? = nil,
        gameSessionQueueArns: [String]? = nil,
        name: String? = nil,
        notificationTarget: String? = nil,
        requestTimeoutSeconds: Int? = nil,
        ruleSetName: String? = nil
    )
    {
        self.acceptanceRequired = acceptanceRequired
        self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
        self.additionalPlayerCount = additionalPlayerCount
        self.backfillMode = backfillMode
        self.customEventData = customEventData
        self.description = description
        self.flexMatchMode = flexMatchMode
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionQueueArns = gameSessionQueueArns
        self.name = name
        self.notificationTarget = notificationTarget
        self.requestTimeoutSeconds = requestTimeoutSeconds
        self.ruleSetName = ruleSetName
    }
}

struct UpdateMatchmakingConfigurationInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let gameSessionQueueArns: [String]?
    public let requestTimeoutSeconds: Int?
    public let acceptanceTimeoutSeconds: Int?
    public let acceptanceRequired: Bool?
    public let ruleSetName: String?
    public let notificationTarget: String?
    public let additionalPlayerCount: Int?
    public let customEventData: String?
    public let gameProperties: [GameProperty]?
    public let gameSessionData: String?
    public let backfillMode: BackfillMode?
    public let flexMatchMode: FlexMatchMode?
}

extension UpdateMatchmakingConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let gameSessionQueueArnsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .gameSessionQueueArns)
        var gameSessionQueueArnsDecoded0:[String]? = nil
        if let gameSessionQueueArnsContainer = gameSessionQueueArnsContainer {
            gameSessionQueueArnsDecoded0 = [String]()
            for string0 in gameSessionQueueArnsContainer {
                if let string0 = string0 {
                    gameSessionQueueArnsDecoded0?.append(string0)
                }
            }
        }
        gameSessionQueueArns = gameSessionQueueArnsDecoded0
        let requestTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .requestTimeoutSeconds)
        requestTimeoutSeconds = requestTimeoutSecondsDecoded
        let acceptanceTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .acceptanceTimeoutSeconds)
        acceptanceTimeoutSeconds = acceptanceTimeoutSecondsDecoded
        let acceptanceRequiredDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .acceptanceRequired)
        acceptanceRequired = acceptanceRequiredDecoded
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
        let additionalPlayerCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .additionalPlayerCount)
        additionalPlayerCount = additionalPlayerCountDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let backfillModeDecoded = try containerValues.decodeIfPresent(BackfillMode.self, forKey: .backfillMode)
        backfillMode = backfillModeDecoded
        let flexMatchModeDecoded = try containerValues.decodeIfPresent(FlexMatchMode.self, forKey: .flexMatchMode)
        flexMatchMode = flexMatchModeDecoded
    }
}

extension UpdateMatchmakingConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMatchmakingConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateMatchmakingConfigurationOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMatchmakingConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateMatchmakingConfigurationOutputResponse(configuration: \(String(describing: configuration)))"}
}

extension UpdateMatchmakingConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateMatchmakingConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.configuration = output.configuration
        } else {
            self.configuration = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct UpdateMatchmakingConfigurationOutputResponse: Equatable {
    /// <p>The updated matchmaking configuration.</p>
    public let configuration: MatchmakingConfiguration?

    public init (
        configuration: MatchmakingConfiguration? = nil
    )
    {
        self.configuration = configuration
    }
}

struct UpdateMatchmakingConfigurationOutputResponseBody: Equatable {
    public let configuration: MatchmakingConfiguration?
}

extension UpdateMatchmakingConfigurationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configuration = "Configuration"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationDecoded = try containerValues.decodeIfPresent(MatchmakingConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
    }
}

public struct UpdateRuntimeConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "UpdateRuntimeConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateRuntimeConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateRuntimeConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateRuntimeConfigurationInput>
    public typealias MOutput = OperationOutput<UpdateRuntimeConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateRuntimeConfigurationOutputError>
}

extension UpdateRuntimeConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateRuntimeConfigurationInput(fleetId: \(String(describing: fleetId)), runtimeConfiguration: \(String(describing: runtimeConfiguration)))"}
}

extension UpdateRuntimeConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case runtimeConfiguration = "RuntimeConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let runtimeConfiguration = runtimeConfiguration {
            try encodeContainer.encode(runtimeConfiguration, forKey: .runtimeConfiguration)
        }
    }
}

public struct UpdateRuntimeConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateRuntimeConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateRuntimeConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateRuntimeConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateRuntimeConfigurationInput>
    public typealias MOutput = OperationOutput<UpdateRuntimeConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateRuntimeConfigurationOutputError>
}

public struct UpdateRuntimeConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateRuntimeConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateRuntimeConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateRuntimeConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateRuntimeConfigurationInput>
    public typealias MOutput = OperationOutput<UpdateRuntimeConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateRuntimeConfigurationOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct UpdateRuntimeConfigurationInput: Equatable {
    /// <p>A unique identifier for the fleet to update runtime configuration for. You can use either the fleet ID or ARN
    ///             value.</p>
    public let fleetId: String?
    /// <p>Instructions for launching server processes on each instance in the fleet. Server
    ///             processes run either a custom game build executable or a Realtime Servers script. The runtime
    ///             configuration lists the types of server processes to run on an instance, how to launch
    ///             them, and the number of processes to run concurrently.</p>
    public let runtimeConfiguration: RuntimeConfiguration?

    public init (
        fleetId: String? = nil,
        runtimeConfiguration: RuntimeConfiguration? = nil
    )
    {
        self.fleetId = fleetId
        self.runtimeConfiguration = runtimeConfiguration
    }
}

struct UpdateRuntimeConfigurationInputBody: Equatable {
    public let fleetId: String?
    public let runtimeConfiguration: RuntimeConfiguration?
}

extension UpdateRuntimeConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "FleetId"
        case runtimeConfiguration = "RuntimeConfiguration"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let runtimeConfigurationDecoded = try containerValues.decodeIfPresent(RuntimeConfiguration.self, forKey: .runtimeConfiguration)
        runtimeConfiguration = runtimeConfigurationDecoded
    }
}

extension UpdateRuntimeConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRuntimeConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFleetStatusException" : self = .invalidFleetStatusException(try InvalidFleetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRuntimeConfigurationOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidFleetStatusException(InvalidFleetStatusException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRuntimeConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateRuntimeConfigurationOutputResponse(runtimeConfiguration: \(String(describing: runtimeConfiguration)))"}
}

extension UpdateRuntimeConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateRuntimeConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.runtimeConfiguration = output.runtimeConfiguration
        } else {
            self.runtimeConfiguration = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct UpdateRuntimeConfigurationOutputResponse: Equatable {
    /// <p>The runtime configuration currently in use by all instances in the fleet. If the
    ///             update was successful, all property changes are shown. </p>
    public let runtimeConfiguration: RuntimeConfiguration?

    public init (
        runtimeConfiguration: RuntimeConfiguration? = nil
    )
    {
        self.runtimeConfiguration = runtimeConfiguration
    }
}

struct UpdateRuntimeConfigurationOutputResponseBody: Equatable {
    public let runtimeConfiguration: RuntimeConfiguration?
}

extension UpdateRuntimeConfigurationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case runtimeConfiguration = "RuntimeConfiguration"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runtimeConfigurationDecoded = try containerValues.decodeIfPresent(RuntimeConfiguration.self, forKey: .runtimeConfiguration)
        runtimeConfiguration = runtimeConfigurationDecoded
    }
}

public struct UpdateScriptInputBodyMiddleware: Middleware {
    public let id: String = "UpdateScriptInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateScriptInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateScriptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateScriptInput>
    public typealias MOutput = OperationOutput<UpdateScriptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateScriptOutputError>
}

extension UpdateScriptInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateScriptInput(name: \(String(describing: name)), scriptId: \(String(describing: scriptId)), storageLocation: \(String(describing: storageLocation)), version: \(String(describing: version)), zipFile: \(String(describing: zipFile)))"}
}

extension UpdateScriptInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case scriptId = "ScriptId"
        case storageLocation = "StorageLocation"
        case version = "Version"
        case zipFile = "ZipFile"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scriptId = scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
        if let storageLocation = storageLocation {
            try encodeContainer.encode(storageLocation, forKey: .storageLocation)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let zipFile = zipFile {
            try encodeContainer.encode(zipFile.base64EncodedString(), forKey: .zipFile)
        }
    }
}

public struct UpdateScriptInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateScriptInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateScriptInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateScriptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateScriptInput>
    public typealias MOutput = OperationOutput<UpdateScriptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateScriptOutputError>
}

public struct UpdateScriptInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateScriptInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateScriptInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateScriptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateScriptInput>
    public typealias MOutput = OperationOutput<UpdateScriptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateScriptOutputError>
}

public struct UpdateScriptInput: Equatable {
    /// <p>A descriptive label that is associated with a script. Script names do not need to be unique.</p>
    public let name: String?
    /// <p>A unique identifier for the Realtime script to update. You can use either the script ID or ARN value.</p>
    public let scriptId: String?
    /// <p>The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is
    ///             stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the
    ///             "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3
    ///             bucket must be in the same Region where you want to create a new script. By default,
    ///             Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning
    ///             turned on, you can use the <code>ObjectVersion</code> parameter to specify an earlier
    ///             version. </p>
    public let storageLocation: S3Location?
    /// <p>Version information that is associated with a build or script. Version strings do not need to be unique.</p>
    public let version: String?
    /// <p>A data object containing your Realtime scripts and dependencies as a zip file. The zip
    ///             file can have one or multiple files. Maximum size of a zip file is 5 MB.</p>
    ///         <p>When using the AWS CLI tool to create a script, this parameter is set to the zip file
    ///             name. It must be prepended with the string "fileb://" to indicate that the file data is
    ///             a binary object. For example: <code>--zip-file
    ///             fileb://myRealtimeScript.zip</code>.</p>
    public let zipFile: Data?

    public init (
        name: String? = nil,
        scriptId: String? = nil,
        storageLocation: S3Location? = nil,
        version: String? = nil,
        zipFile: Data? = nil
    )
    {
        self.name = name
        self.scriptId = scriptId
        self.storageLocation = storageLocation
        self.version = version
        self.zipFile = zipFile
    }
}

struct UpdateScriptInputBody: Equatable {
    public let scriptId: String?
    public let name: String?
    public let version: String?
    public let storageLocation: S3Location?
    public let zipFile: Data?
}

extension UpdateScriptInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case scriptId = "ScriptId"
        case storageLocation = "StorageLocation"
        case version = "Version"
        case zipFile = "ZipFile"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(S3Location.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
        let zipFileDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .zipFile)
        zipFile = zipFileDecoded
    }
}

extension UpdateScriptOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateScriptOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateScriptOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateScriptOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateScriptOutputResponse(script: \(String(describing: script)))"}
}

extension UpdateScriptOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateScriptOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.script = output.script
        } else {
            self.script = nil
        }
    }
}

public struct UpdateScriptOutputResponse: Equatable {
    /// <p>The newly created script record with a unique script ID. The new script's storage
    ///             location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket
    ///             under your account, the storage location reflects the information that was provided in
    ///             the <i>CreateScript</i> request; (2) If the script file was uploaded from
    ///             a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift
    ///             service.</p>
    public let script: Script?

    public init (
        script: Script? = nil
    )
    {
        self.script = script
    }
}

struct UpdateScriptOutputResponseBody: Equatable {
    public let script: Script?
}

extension UpdateScriptOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case script = "Script"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptDecoded = try containerValues.decodeIfPresent(Script.self, forKey: .script)
        script = scriptDecoded
    }
}

public struct ValidateMatchmakingRuleSetInputBodyMiddleware: Middleware {
    public let id: String = "ValidateMatchmakingRuleSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ValidateMatchmakingRuleSetInput>,
                  next: H) -> Swift.Result<OperationOutput<ValidateMatchmakingRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ValidateMatchmakingRuleSetInput>
    public typealias MOutput = OperationOutput<ValidateMatchmakingRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ValidateMatchmakingRuleSetOutputError>
}

extension ValidateMatchmakingRuleSetInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ValidateMatchmakingRuleSetInput(ruleSetBody: \(String(describing: ruleSetBody)))"}
}

extension ValidateMatchmakingRuleSetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ruleSetBody = "RuleSetBody"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleSetBody = ruleSetBody {
            try encodeContainer.encode(ruleSetBody, forKey: .ruleSetBody)
        }
    }
}

public struct ValidateMatchmakingRuleSetInputHeadersMiddleware: Middleware {
    public let id: String = "ValidateMatchmakingRuleSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ValidateMatchmakingRuleSetInput>,
                  next: H) -> Swift.Result<OperationOutput<ValidateMatchmakingRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ValidateMatchmakingRuleSetInput>
    public typealias MOutput = OperationOutput<ValidateMatchmakingRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ValidateMatchmakingRuleSetOutputError>
}

public struct ValidateMatchmakingRuleSetInputQueryItemMiddleware: Middleware {
    public let id: String = "ValidateMatchmakingRuleSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ValidateMatchmakingRuleSetInput>,
                  next: H) -> Swift.Result<OperationOutput<ValidateMatchmakingRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ValidateMatchmakingRuleSetInput>
    public typealias MOutput = OperationOutput<ValidateMatchmakingRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ValidateMatchmakingRuleSetOutputError>
}

/// <p>Represents the input for a request operation.</p>
public struct ValidateMatchmakingRuleSetInput: Equatable {
    /// <p>A collection of matchmaking rules to validate, formatted as a JSON string.</p>
    public let ruleSetBody: String?

    public init (
        ruleSetBody: String? = nil
    )
    {
        self.ruleSetBody = ruleSetBody
    }
}

struct ValidateMatchmakingRuleSetInputBody: Equatable {
    public let ruleSetBody: String?
}

extension ValidateMatchmakingRuleSetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case ruleSetBody = "RuleSetBody"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetBodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleSetBody)
        ruleSetBody = ruleSetBodyDecoded
    }
}

extension ValidateMatchmakingRuleSetOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ValidateMatchmakingRuleSetOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ValidateMatchmakingRuleSetOutputError: Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ValidateMatchmakingRuleSetOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ValidateMatchmakingRuleSetOutputResponse(valid: \(String(describing: valid)))"}
}

extension ValidateMatchmakingRuleSetOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ValidateMatchmakingRuleSetOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.valid = output.valid
        } else {
            self.valid = nil
        }
    }
}

/// <p>Represents the returned data in response to a request operation.</p>
public struct ValidateMatchmakingRuleSetOutputResponse: Equatable {
    /// <p>A response indicating whether the rule set is valid.</p>
    public let valid: Bool?

    public init (
        valid: Bool? = nil
    )
    {
        self.valid = valid
    }
}

struct ValidateMatchmakingRuleSetOutputResponseBody: Equatable {
    public let valid: Bool?
}

extension ValidateMatchmakingRuleSetOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case valid = "Valid"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let validDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .valid)
        valid = validDecoded
    }
}

extension VpcPeeringAuthorization: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case expirationTime = "ExpirationTime"
        case gameLiftAwsAccountId = "GameLiftAwsAccountId"
        case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let expirationTime = expirationTime {
            try encodeContainer.encode(expirationTime.timeIntervalSince1970, forKey: .expirationTime)
        }
        if let gameLiftAwsAccountId = gameLiftAwsAccountId {
            try encodeContainer.encode(gameLiftAwsAccountId, forKey: .gameLiftAwsAccountId)
        }
        if let peerVpcAwsAccountId = peerVpcAwsAccountId {
            try encodeContainer.encode(peerVpcAwsAccountId, forKey: .peerVpcAwsAccountId)
        }
        if let peerVpcId = peerVpcId {
            try encodeContainer.encode(peerVpcId, forKey: .peerVpcId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameLiftAwsAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameLiftAwsAccountId)
        gameLiftAwsAccountId = gameLiftAwsAccountIdDecoded
        let peerVpcAwsAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .peerVpcAwsAccountId)
        peerVpcAwsAccountId = peerVpcAwsAccountIdDecoded
        let peerVpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .peerVpcId)
        peerVpcId = peerVpcIdDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let expirationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expirationTime)
        expirationTime = expirationTimeDecoded
    }
}

extension VpcPeeringAuthorization: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VpcPeeringAuthorization(creationTime: \(String(describing: creationTime)), expirationTime: \(String(describing: expirationTime)), gameLiftAwsAccountId: \(String(describing: gameLiftAwsAccountId)), peerVpcAwsAccountId: \(String(describing: peerVpcAwsAccountId)), peerVpcId: \(String(describing: peerVpcId)))"}
}

/// <p>Represents an authorization for a VPC peering connection between the VPC for an
///             Amazon GameLift fleet and another VPC on an account you have access to. This authorization
///             must exist and be valid for the peering connection to be established. Authorizations are
///             valid for 24 hours after they are issued.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>CreateVpcPeeringAuthorization</a> |
///                     <a>DescribeVpcPeeringAuthorizations</a> |
///                     <a>DeleteVpcPeeringAuthorization</a> |
///                     <a>CreateVpcPeeringConnection</a> |
///                     <a>DescribeVpcPeeringConnections</a> |
///                     <a>DeleteVpcPeeringConnection</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a>
///          </p>
public struct VpcPeeringAuthorization: Equatable {
    /// <p>Time stamp indicating when this authorization was issued. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>Time stamp indicating when this authorization expires (24 hours after issuance).
    ///             Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let expirationTime: Date?
    /// <p>A unique identifier for the AWS account that you use to manage your GameLift fleet.
    ///             You can find your Account ID in the AWS Management Console under account settings.</p>
    public let gameLiftAwsAccountId: String?
    /// <p></p>
    public let peerVpcAwsAccountId: String?
    /// <p>A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The
    ///             VPC must be in the same Region as your fleet. To look up a VPC ID, use the
    ///             <a href="https://console.aws.amazon.com/vpc/">VPC Dashboard</a> in the AWS Management Console.
    ///             Learn more about VPC peering in <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html">VPC Peering with GameLift Fleets</a>.</p>
    public let peerVpcId: String?

    public init (
        creationTime: Date? = nil,
        expirationTime: Date? = nil,
        gameLiftAwsAccountId: String? = nil,
        peerVpcAwsAccountId: String? = nil,
        peerVpcId: String? = nil
    )
    {
        self.creationTime = creationTime
        self.expirationTime = expirationTime
        self.gameLiftAwsAccountId = gameLiftAwsAccountId
        self.peerVpcAwsAccountId = peerVpcAwsAccountId
        self.peerVpcId = peerVpcId
    }
}

extension VpcPeeringConnection: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case gameLiftVpcId = "GameLiftVpcId"
        case ipV4CidrBlock = "IpV4CidrBlock"
        case peerVpcId = "PeerVpcId"
        case status = "Status"
        case vpcPeeringConnectionId = "VpcPeeringConnectionId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetArn = fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameLiftVpcId = gameLiftVpcId {
            try encodeContainer.encode(gameLiftVpcId, forKey: .gameLiftVpcId)
        }
        if let ipV4CidrBlock = ipV4CidrBlock {
            try encodeContainer.encode(ipV4CidrBlock, forKey: .ipV4CidrBlock)
        }
        if let peerVpcId = peerVpcId {
            try encodeContainer.encode(peerVpcId, forKey: .peerVpcId)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let vpcPeeringConnectionId = vpcPeeringConnectionId {
            try encodeContainer.encode(vpcPeeringConnectionId, forKey: .vpcPeeringConnectionId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let ipV4CidrBlockDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipV4CidrBlock)
        ipV4CidrBlock = ipV4CidrBlockDecoded
        let vpcPeeringConnectionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcPeeringConnectionId)
        vpcPeeringConnectionId = vpcPeeringConnectionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(VpcPeeringConnectionStatus.self, forKey: .status)
        status = statusDecoded
        let peerVpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .peerVpcId)
        peerVpcId = peerVpcIdDecoded
        let gameLiftVpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameLiftVpcId)
        gameLiftVpcId = gameLiftVpcIdDecoded
    }
}

extension VpcPeeringConnection: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VpcPeeringConnection(fleetArn: \(String(describing: fleetArn)), fleetId: \(String(describing: fleetId)), gameLiftVpcId: \(String(describing: gameLiftVpcId)), ipV4CidrBlock: \(String(describing: ipV4CidrBlock)), peerVpcId: \(String(describing: peerVpcId)), status: \(String(describing: status)), vpcPeeringConnectionId: \(String(describing: vpcPeeringConnectionId)))"}
}

/// <p>Represents a peering connection between a VPC on one of your AWS accounts and the
///             VPC for your Amazon GameLift fleets. This record may be for an active peering connection or a
///             pending connection that has not yet been established.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>CreateVpcPeeringAuthorization</a> |
///                     <a>DescribeVpcPeeringAuthorizations</a> |
///                     <a>DeleteVpcPeeringAuthorization</a> |
///                     <a>CreateVpcPeeringConnection</a> |
///                     <a>DescribeVpcPeeringConnections</a> |
///                     <a>DeleteVpcPeeringConnection</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a>
///          </p>
public struct VpcPeeringConnection: Equatable {
    /// <p>
    ///             The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) associated with the GameLift fleet resource for this connection.
    ///         </p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet. This ID determines the ID of the Amazon GameLift VPC for your fleet.</p>
    public let fleetId: String?
    /// <p>A unique identifier for the VPC that contains the Amazon GameLift fleet for this
    ///             connection. This VPC is managed by Amazon GameLift and does not appear in your AWS account.
    ///         </p>
    public let gameLiftVpcId: String?
    /// <p>CIDR block of IPv4 addresses assigned to the VPC peering connection for the
    ///             GameLift VPC. The peered VPC also has an IPv4 CIDR block associated with it; these
    ///             blocks cannot overlap or the peering connection cannot be created. </p>
    public let ipV4CidrBlock: String?
    /// <p>A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The
    ///             VPC must be in the same Region as your fleet. To look up a VPC ID, use the
    ///             <a href="https://console.aws.amazon.com/vpc/">VPC Dashboard</a> in the AWS Management Console.
    ///             Learn more about VPC peering in <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html">VPC Peering with GameLift Fleets</a>.</p>
    public let peerVpcId: String?
    /// <p>The status information about the connection. Status indicates if a
    ///             connection is pending, successful, or failed.</p>
    public let status: VpcPeeringConnectionStatus?
    /// <p>A unique identifier that is automatically assigned to the connection record. This ID
    ///             is referenced in VPC peering connection events, and is used when deleting a connection
    ///             with <a>DeleteVpcPeeringConnection</a>. </p>
    public let vpcPeeringConnectionId: String?

    public init (
        fleetArn: String? = nil,
        fleetId: String? = nil,
        gameLiftVpcId: String? = nil,
        ipV4CidrBlock: String? = nil,
        peerVpcId: String? = nil,
        status: VpcPeeringConnectionStatus? = nil,
        vpcPeeringConnectionId: String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.gameLiftVpcId = gameLiftVpcId
        self.ipV4CidrBlock = ipV4CidrBlock
        self.peerVpcId = peerVpcId
        self.status = status
        self.vpcPeeringConnectionId = vpcPeeringConnectionId
    }
}

extension VpcPeeringConnectionStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension VpcPeeringConnectionStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VpcPeeringConnectionStatus(code: \(String(describing: code)), message: \(String(describing: message)))"}
}

/// <p>Represents status information for a VPC peering connection. Status is associated
///             with a <a>VpcPeeringConnection</a> object. Status codes and messages are
///             provided from EC2 (see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VpcPeeringConnectionStateReason.html">VpcPeeringConnectionStateReason</a>). Connection status information is also
///             communicated as a fleet <a>Event</a>.</p>
public struct VpcPeeringConnectionStatus: Equatable {
    /// <p>Code indicating the status of a VPC peering connection.</p>
    public let code: String?
    /// <p>Additional messaging associated with the connection status. </p>
    public let message: String?

    public init (
        code: String? = nil,
        message: String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}
