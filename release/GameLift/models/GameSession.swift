// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Properties describing a game session.</p>
///         <p>A game session in ACTIVE status can host players. When a game session ends, its
///             status is set to <code>TERMINATED</code>. </p>
///         <p>Once the session ends, the game session object is retained for 30 days. This means
///             you can reuse idempotency token values after this time. Game session logs are retained
///             for 14 days.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>CreateGameSession</a> |
///                     <a>DescribeGameSessions</a> |
///                     <a>DescribeGameSessionDetails</a> |
///                     <a>SearchGameSessions</a> |
///                     <a>UpdateGameSession</a> |
///                     <a>GetGameSessionLogUrl</a> |
///                     <a>StartGameSessionPlacement</a> |
///                     <a>DescribeGameSessionPlacement</a> |
///                     <a>StopGameSessionPlacement</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a>
///          </p>
public struct GameSession: Equatable {
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>A unique identifier for a player. This ID is used to enforce a resource protection policy (if one
    ///             exists), that limits the number of game sessions a player can create.</p>
    public let creatorId: String?
    /// <p>Number of players currently in the game session.</p>
    public let currentPlayerSessionCount: Int?
    /// <p>The DNS identifier assigned to the instance that is running the game session. Values have
    ///             the following format:</p>
    ///          <ul>
    ///             <li>
    ///                <p>TLS-enabled fleets: <code><unique identifier>.<region identifier>.amazongamelift.com</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Non-TLS-enabled fleets: <code>ec2-<unique identifier>.compute.amazonaws.com</code>. (See
    ///             <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses">Amazon EC2 Instance IP Addressing</a>.)</p>
    ///             </li>
    ///          </ul>
    ///             <p>When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.</p>
    public let dnsName: String?
    /// <p>
    ///             The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) associated with the GameLift fleet that this game session is running on.
    ///         </p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet that the game session is running on.</p>
    public let fleetId: String?
    /// <p>A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session. You can search for active game sessions based on this custom data
    ///             with <a>SearchGameSessions</a>.</p>
    public let gameProperties: [GameProperty]?
    /// <p>A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session.</p>
    public let gameSessionData: String?
    /// <p>A unique identifier for the game session. A game session ARN has the following format:
    ///     <code>arn:aws:gamelift:<region>::gamesession/<fleet ID>/<custom ID string or idempotency token></code>.</p>
    public let gameSessionId: String?
    /// <p>The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.</p>
    public let ipAddress: String?
    /// <p>The fleet location where the game session is running. This value might specify the
    ///             fleet's home Region or a remote location. Location is expressed as an AWS Region code
    ///             such as <code>us-west-2</code>. </p>
    public let location: String?
    /// <p>Information about the matchmaking process that was used to create the game session.
    ///             It is in JSON syntax, formatted as a string. In addition the matchmaking configuration
    ///             used, it contains data on all players assigned to the match, including player attributes
    ///             and team assignments. For more details on matchmaker data, see <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data">Match
    ///                 Data</a>. Matchmaker data is useful when requesting match backfills, and is
    ///             updated whenever new players are added during a successful backfill (see <a>StartMatchBackfill</a>). </p>
    public let matchmakerData: String?
    /// <p>The maximum number of players that can be connected simultaneously to the game session.</p>
    public let maximumPlayerSessionCount: Int?
    /// <p>A descriptive label that is associated with a game session. Session names do not need to be unique.</p>
    public let name: String?
    /// <p>Indicates whether or not the game session is accepting new players.</p>
    public let playerSessionCreationPolicy: PlayerSessionCreationPolicy?
    /// <p>The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number.</p>
    public let port: Int?
    /// <p>Current status of the game session. A game session must have an <code>ACTIVE</code>
    ///             status to have player sessions.</p>
    public let status: GameSessionStatus?
    /// <p>Provides additional information about game session status. <code>INTERRUPTED</code>
    ///             indicates that the game session was hosted on a spot instance that was reclaimed,
    ///             causing the active game session to be terminated.</p>
    public let statusReason: GameSessionStatusReason?
    /// <p>A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let terminationTime: Date?

    public init (
        creationTime: Date? = nil,
        creatorId: String? = nil,
        currentPlayerSessionCount: Int? = nil,
        dnsName: String? = nil,
        fleetArn: String? = nil,
        fleetId: String? = nil,
        gameProperties: [GameProperty]? = nil,
        gameSessionData: String? = nil,
        gameSessionId: String? = nil,
        ipAddress: String? = nil,
        location: String? = nil,
        matchmakerData: String? = nil,
        maximumPlayerSessionCount: Int? = nil,
        name: String? = nil,
        playerSessionCreationPolicy: PlayerSessionCreationPolicy? = nil,
        port: Int? = nil,
        status: GameSessionStatus? = nil,
        statusReason: GameSessionStatusReason? = nil,
        terminationTime: Date? = nil
    )
    {
        self.creationTime = creationTime
        self.creatorId = creatorId
        self.currentPlayerSessionCount = currentPlayerSessionCount
        self.dnsName = dnsName
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionId = gameSessionId
        self.ipAddress = ipAddress
        self.location = location
        self.matchmakerData = matchmakerData
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
        self.name = name
        self.playerSessionCreationPolicy = playerSessionCreationPolicy
        self.port = port
        self.status = status
        self.statusReason = statusReason
        self.terminationTime = terminationTime
    }
}
