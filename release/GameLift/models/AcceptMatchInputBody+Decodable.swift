// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AcceptMatchInputBody: Equatable {
    public let ticketId: String?
    public let playerIds: [String]?
    public let acceptanceType: AcceptanceType?
}

extension AcceptMatchInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case acceptanceType = "AcceptanceType"
        case playerIds = "PlayerIds"
        case ticketId = "TicketId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ticketId)
        ticketId = ticketIdDecoded
        let playerIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .playerIds)
        var playerIdsDecoded0:[String]? = nil
        if let playerIdsContainer = playerIdsContainer {
            playerIdsDecoded0 = [String]()
            for string0 in playerIdsContainer {
                playerIdsDecoded0?.append(string0)
            }
        }
        playerIds = playerIdsDecoded0
        let acceptanceTypeDecoded = try containerValues.decodeIfPresent(AcceptanceType.self, forKey: .acceptanceType)
        acceptanceType = acceptanceTypeDecoded
    }
}
