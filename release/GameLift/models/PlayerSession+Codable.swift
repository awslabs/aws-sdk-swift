// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PlayerSession: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case dnsName = "DnsName"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case gameSessionId = "GameSessionId"
        case ipAddress = "IpAddress"
        case playerData = "PlayerData"
        case playerId = "PlayerId"
        case playerSessionId = "PlayerSessionId"
        case port = "Port"
        case status = "Status"
        case terminationTime = "TerminationTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dnsName = dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let fleetArn = fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let playerData = playerData {
            try encodeContainer.encode(playerData, forKey: .playerData)
        }
        if let playerId = playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let playerSessionId = playerSessionId {
            try encodeContainer.encode(playerSessionId, forKey: .playerSessionId)
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let terminationTime = terminationTime {
            try encodeContainer.encode(terminationTime.timeIntervalSince1970, forKey: .terminationTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerSessionId)
        playerSessionId = playerSessionIdDecoded
        let playerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let terminationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .terminationTime)
        terminationTime = terminationTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PlayerSessionStatus.self, forKey: .status)
        status = statusDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let playerDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerData)
        playerData = playerDataDecoded
    }
}
