// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum EventCode {
    case fleetActivationFailed
    case fleetActivationFailedNoInstances
    case fleetBinaryDownloadFailed
    case fleetCreated
    case fleetCreationExtractingBuild
    case fleetCreationRunningInstaller
    case fleetCreationValidatingRuntimeConfig
    case fleetDeleted
    case fleetInitializationFailed
    case fleetNewGameSessionProtectionPolicyUpdated
    case fleetScalingEvent
    case fleetStateActivating
    case fleetStateActive
    case fleetStateBuilding
    case fleetStateDownloading
    case fleetStateError
    case fleetStateValidating
    case fleetValidationExecutableRuntimeFailure
    case fleetValidationLaunchPathNotFound
    case fleetValidationTimedOut
    case fleetVpcPeeringDeleted
    case fleetVpcPeeringFailed
    case fleetVpcPeeringSucceeded
    case gameSessionActivationTimeout
    case genericEvent
    case instanceInterrupted
    case serverProcessCrashed
    case serverProcessForceTerminated
    case serverProcessInvalidPath
    case serverProcessProcessExitTimeout
    case serverProcessProcessReadyTimeout
    case serverProcessSdkInitializationTimeout
    case serverProcessTerminatedUnhealthy
    case sdkUnknown(String)
}

extension EventCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EventCode] {
        return [
            .fleetActivationFailed,
            .fleetActivationFailedNoInstances,
            .fleetBinaryDownloadFailed,
            .fleetCreated,
            .fleetCreationExtractingBuild,
            .fleetCreationRunningInstaller,
            .fleetCreationValidatingRuntimeConfig,
            .fleetDeleted,
            .fleetInitializationFailed,
            .fleetNewGameSessionProtectionPolicyUpdated,
            .fleetScalingEvent,
            .fleetStateActivating,
            .fleetStateActive,
            .fleetStateBuilding,
            .fleetStateDownloading,
            .fleetStateError,
            .fleetStateValidating,
            .fleetValidationExecutableRuntimeFailure,
            .fleetValidationLaunchPathNotFound,
            .fleetValidationTimedOut,
            .fleetVpcPeeringDeleted,
            .fleetVpcPeeringFailed,
            .fleetVpcPeeringSucceeded,
            .gameSessionActivationTimeout,
            .genericEvent,
            .instanceInterrupted,
            .serverProcessCrashed,
            .serverProcessForceTerminated,
            .serverProcessInvalidPath,
            .serverProcessProcessExitTimeout,
            .serverProcessProcessReadyTimeout,
            .serverProcessSdkInitializationTimeout,
            .serverProcessTerminatedUnhealthy,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .fleetActivationFailed: return "FLEET_ACTIVATION_FAILED"
        case .fleetActivationFailedNoInstances: return "FLEET_ACTIVATION_FAILED_NO_INSTANCES"
        case .fleetBinaryDownloadFailed: return "FLEET_BINARY_DOWNLOAD_FAILED"
        case .fleetCreated: return "FLEET_CREATED"
        case .fleetCreationExtractingBuild: return "FLEET_CREATION_EXTRACTING_BUILD"
        case .fleetCreationRunningInstaller: return "FLEET_CREATION_RUNNING_INSTALLER"
        case .fleetCreationValidatingRuntimeConfig: return "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG"
        case .fleetDeleted: return "FLEET_DELETED"
        case .fleetInitializationFailed: return "FLEET_INITIALIZATION_FAILED"
        case .fleetNewGameSessionProtectionPolicyUpdated: return "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED"
        case .fleetScalingEvent: return "FLEET_SCALING_EVENT"
        case .fleetStateActivating: return "FLEET_STATE_ACTIVATING"
        case .fleetStateActive: return "FLEET_STATE_ACTIVE"
        case .fleetStateBuilding: return "FLEET_STATE_BUILDING"
        case .fleetStateDownloading: return "FLEET_STATE_DOWNLOADING"
        case .fleetStateError: return "FLEET_STATE_ERROR"
        case .fleetStateValidating: return "FLEET_STATE_VALIDATING"
        case .fleetValidationExecutableRuntimeFailure: return "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE"
        case .fleetValidationLaunchPathNotFound: return "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND"
        case .fleetValidationTimedOut: return "FLEET_VALIDATION_TIMED_OUT"
        case .fleetVpcPeeringDeleted: return "FLEET_VPC_PEERING_DELETED"
        case .fleetVpcPeeringFailed: return "FLEET_VPC_PEERING_FAILED"
        case .fleetVpcPeeringSucceeded: return "FLEET_VPC_PEERING_SUCCEEDED"
        case .gameSessionActivationTimeout: return "GAME_SESSION_ACTIVATION_TIMEOUT"
        case .genericEvent: return "GENERIC_EVENT"
        case .instanceInterrupted: return "INSTANCE_INTERRUPTED"
        case .serverProcessCrashed: return "SERVER_PROCESS_CRASHED"
        case .serverProcessForceTerminated: return "SERVER_PROCESS_FORCE_TERMINATED"
        case .serverProcessInvalidPath: return "SERVER_PROCESS_INVALID_PATH"
        case .serverProcessProcessExitTimeout: return "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT"
        case .serverProcessProcessReadyTimeout: return "SERVER_PROCESS_PROCESS_READY_TIMEOUT"
        case .serverProcessSdkInitializationTimeout: return "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT"
        case .serverProcessTerminatedUnhealthy: return "SERVER_PROCESS_TERMINATED_UNHEALTHY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EventCode(rawValue: rawValue) ?? EventCode.sdkUnknown(rawValue)
    }
}
