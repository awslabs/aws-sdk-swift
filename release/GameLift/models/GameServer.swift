// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>
///             <b>This data type is used with the GameLift FleetIQ and game server groups.</b>
///          </p>
///         <p>Properties describing a game server that is running on an instance in a <a>GameServerGroup</a>. </p>
///          <p>A game server is created by a successful call to <code>RegisterGameServer</code> and
///             deleted by calling <code>DeregisterGameServer</code>. A game server is claimed to host a
///             game session by calling <code>ClaimGameServer</code>. </p>
///         <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>RegisterGameServer</a> |
///                     <a>ListGameServers</a> |
///                     <a>ClaimGameServer</a> |
///                     <a>DescribeGameServer</a> |
///                     <a>UpdateGameServer</a> |
///                     <a>DeregisterGameServer</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/fleetiqguide/reference-awssdk-fleetiq.html">All APIs by task</a>
///          </p>
public struct GameServer: Equatable {
    /// <p>Indicates when an available game server has been reserved for gameplay but has not yet
    ///             started hosting a game. Once it is claimed, the game server remains in
    ///                 <code>CLAIMED</code> status for a maximum of one minute. During this time, game
    ///             clients connect to the game server to start the game and trigger the game server to
    ///             update its utilization status. After one minute, the game server claim status reverts to
    ///             null.</p>
    public let claimStatus: GameServerClaimStatus?
    /// <p>The port and IP address that must be used to establish a client connection to the game server.</p>
    public let connectionInfo: String?
    /// <p>A set of custom game server properties, formatted as a single string value. This data
    ///             is passed to a game client or service when it requests information on game servers using
    ///                 <a>ListGameServers</a> or <a>ClaimGameServer</a>.</p>
    public let gameServerData: String?
    /// <p>The ARN identifier for the game server group where the game server is located.</p>
    public let gameServerGroupArn: String?
    /// <p>A unique identifier for the game server group where the game server is running.
    ///             Use either the <a>GameServerGroup</a> name or ARN value.</p>
    public let gameServerGroupName: String?
    /// <p>A custom string that uniquely identifies the game server. Game server IDs are
    ///             developer-defined and are unique across all game server groups in an AWS
    ///             account.</p>
    public let gameServerId: String?
    /// <p>The unique identifier for the instance where the game server is running. This ID is
    ///             available in the instance metadata. EC2 instance IDs
    ///             use a 17-character format, for example: <code>i-1234567890abcdef0</code>.</p>
    public let instanceId: String?
    /// <p>Timestamp that indicates the last time the game server was claimed with a <a>ClaimGameServer</a> request. The format is a number expressed in Unix time
    ///             as milliseconds (for example <code>"1469498468.057"</code>). This value is used to
    ///             calculate when a claimed game server's status should revert to null.</p>
    public let lastClaimTime: Date?
    /// <p>Timestamp that indicates the last time the game server was updated with health status
    ///             using an <a>UpdateGameServer</a> request. The format is a number expressed in
    ///             Unix time as milliseconds (for example <code>"1469498468.057"</code>). After game server
    ///             registration, this property is only changed when a game server update specifies a health
    ///             check value.</p>
    public let lastHealthCheckTime: Date?
    /// <p>Timestamp that indicates when the game server was created with a <a>RegisterGameServer</a> request. The format is a number expressed in Unix
    ///             time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let registrationTime: Date?
    /// <p>Indicates whether the game server is currently available for new games or is busy. Possible statuses include:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>AVAILABLE</code> - The game server is available to be claimed. A game server that has
    ///                     been claimed remains in this status until it reports game hosting activity. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UTILIZED</code> - The game server is currently hosting a game session with players. </p>
    ///             </li>
    ///          </ul>
    public let utilizationStatus: GameServerUtilizationStatus?

    public init (
        claimStatus: GameServerClaimStatus? = nil,
        connectionInfo: String? = nil,
        gameServerData: String? = nil,
        gameServerGroupArn: String? = nil,
        gameServerGroupName: String? = nil,
        gameServerId: String? = nil,
        instanceId: String? = nil,
        lastClaimTime: Date? = nil,
        lastHealthCheckTime: Date? = nil,
        registrationTime: Date? = nil,
        utilizationStatus: GameServerUtilizationStatus? = nil
    )
    {
        self.claimStatus = claimStatus
        self.connectionInfo = connectionInfo
        self.gameServerData = gameServerData
        self.gameServerGroupArn = gameServerGroupArn
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
        self.instanceId = instanceId
        self.lastClaimTime = lastClaimTime
        self.lastHealthCheckTime = lastHealthCheckTime
        self.registrationTime = registrationTime
        self.utilizationStatus = utilizationStatus
    }
}
