// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutScalingPolicyInputBody: Equatable {
    public let name: String?
    public let fleetId: String?
    public let scalingAdjustment: Int
    public let scalingAdjustmentType: ScalingAdjustmentType?
    public let threshold: Double
    public let comparisonOperator: ComparisonOperatorType?
    public let evaluationPeriods: Int?
    public let metricName: MetricName?
    public let policyType: PolicyType?
    public let targetConfiguration: TargetConfiguration?
}

extension PutScalingPolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case evaluationPeriods = "EvaluationPeriods"
        case fleetId = "FleetId"
        case metricName = "MetricName"
        case name = "Name"
        case policyType = "PolicyType"
        case scalingAdjustment = "ScalingAdjustment"
        case scalingAdjustmentType = "ScalingAdjustmentType"
        case targetConfiguration = "TargetConfiguration"
        case threshold = "Threshold"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let scalingAdjustmentDecoded = try containerValues.decode(Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
        let scalingAdjustmentTypeDecoded = try containerValues.decodeIfPresent(ScalingAdjustmentType.self, forKey: .scalingAdjustmentType)
        scalingAdjustmentType = scalingAdjustmentTypeDecoded
        let thresholdDecoded = try containerValues.decode(Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(ComparisonOperatorType.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(MetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let targetConfigurationDecoded = try containerValues.decodeIfPresent(TargetConfiguration.self, forKey: .targetConfiguration)
        targetConfiguration = targetConfigurationDecoded
    }
}
