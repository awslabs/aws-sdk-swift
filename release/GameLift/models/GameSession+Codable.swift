// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GameSession: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case creatorId = "CreatorId"
        case currentPlayerSessionCount = "CurrentPlayerSessionCount"
        case dnsName = "DnsName"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionId = "GameSessionId"
        case ipAddress = "IpAddress"
        case location = "Location"
        case matchmakerData = "MatchmakerData"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case name = "Name"
        case playerSessionCreationPolicy = "PlayerSessionCreationPolicy"
        case port = "Port"
        case status = "Status"
        case statusReason = "StatusReason"
        case terminationTime = "TerminationTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let creatorId = creatorId {
            try encodeContainer.encode(creatorId, forKey: .creatorId)
        }
        if let currentPlayerSessionCount = currentPlayerSessionCount {
            try encodeContainer.encode(currentPlayerSessionCount, forKey: .currentPlayerSessionCount)
        }
        if let dnsName = dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let fleetArn = fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gamepropertylist0 in gameProperties {
                try gamePropertiesContainer.encode(gamepropertylist0)
            }
        }
        if let gameSessionData = gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let matchmakerData = matchmakerData {
            try encodeContainer.encode(matchmakerData, forKey: .matchmakerData)
        }
        if let maximumPlayerSessionCount = maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let playerSessionCreationPolicy = playerSessionCreationPolicy {
            try encodeContainer.encode(playerSessionCreationPolicy.rawValue, forKey: .playerSessionCreationPolicy)
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason.rawValue, forKey: .statusReason)
        }
        if let terminationTime = terminationTime {
            try encodeContainer.encode(terminationTime.timeIntervalSince1970, forKey: .terminationTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let terminationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .terminationTime)
        terminationTime = terminationTimeDecoded
        let currentPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .currentPlayerSessionCount)
        currentPlayerSessionCount = currentPlayerSessionCountDecoded
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameSessionStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(GameSessionStatusReason.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameProperty].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameProperty]()
            for structure0 in gamePropertiesContainer {
                gamePropertiesDecoded0?.append(structure0)
            }
        }
        gameProperties = gamePropertiesDecoded0
        let ipAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let playerSessionCreationPolicyDecoded = try containerValues.decodeIfPresent(PlayerSessionCreationPolicy.self, forKey: .playerSessionCreationPolicy)
        playerSessionCreationPolicy = playerSessionCreationPolicyDecoded
        let creatorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creatorId)
        creatorId = creatorIdDecoded
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let matchmakerDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .matchmakerData)
        matchmakerData = matchmakerDataDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}
