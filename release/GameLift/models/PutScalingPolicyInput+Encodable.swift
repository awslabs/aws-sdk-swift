// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutScalingPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case evaluationPeriods = "EvaluationPeriods"
        case fleetId = "FleetId"
        case metricName = "MetricName"
        case name = "Name"
        case policyType = "PolicyType"
        case scalingAdjustment = "ScalingAdjustment"
        case scalingAdjustmentType = "ScalingAdjustmentType"
        case targetConfiguration = "TargetConfiguration"
        case threshold = "Threshold"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let evaluationPeriods = evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policyType = policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if scalingAdjustment != 0 {
            try encodeContainer.encode(scalingAdjustment, forKey: .scalingAdjustment)
        }
        if let scalingAdjustmentType = scalingAdjustmentType {
            try encodeContainer.encode(scalingAdjustmentType.rawValue, forKey: .scalingAdjustmentType)
        }
        if let targetConfiguration = targetConfiguration {
            try encodeContainer.encode(targetConfiguration, forKey: .targetConfiguration)
        }
        if threshold != 0.0 {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
    }
}
