// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum BalancingStrategy {
    case onDemandOnly
    case spotOnly
    case spotPreferred
    case sdkUnknown(String)
}

extension BalancingStrategy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BalancingStrategy] {
        return [
            .onDemandOnly,
            .spotOnly,
            .spotPreferred,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .onDemandOnly: return "ON_DEMAND_ONLY"
        case .spotOnly: return "SPOT_ONLY"
        case .spotPreferred: return "SPOT_PREFERRED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BalancingStrategy(rawValue: rawValue) ?? BalancingStrategy.sdkUnknown(rawValue)
    }
}
