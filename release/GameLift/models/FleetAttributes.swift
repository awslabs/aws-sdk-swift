// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes a GameLift fleet of game hosting resources.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///         <p>
///             <a>CreateFleet</a> | <a>DescribeFleetAttributes</a>
///          </p>
public struct FleetAttributes: Equatable {
    /// <p> The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) associated with the GameLift build resource that is deployed on instances in
    ///             this fleet. In a GameLift build ARN, the resource ID matches the <code>BuildId</code>
    ///             value.</p>
    public let buildArn: String?
    /// <p>A unique identifier for the build resource that is deployed on instances in this fleet.</p>
    public let buildId: String?
    /// <p>Indicates whether a TLS/SSL certificate was generated for the fleet. </p>
    public let certificateConfiguration: CertificateConfiguration?
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>A human-readable description of the fleet.</p>
    public let description: String?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>. In a GameLift fleet ARN, the resource ID matches the <code>FleetId</code>
    ///             value.</p>
    public let fleetArn: String?
    /// <p>A unique identifier for the fleet.</p>
    public let fleetId: String?
    /// <p>The kind of instances, On-Demand or Spot, that this fleet uses.</p>
    public let fleetType: FleetType?
    /// <p>A unique identifier for an AWS IAM role that manages access to your AWS services.
    ///         With an instance role ARN set, any application that runs on an instance in this fleet can assume the role,
    ///         including install scripts, server processes, and daemons (background processes). Create a role or look up a role's
    ///         ARN by using the <a href="https://console.aws.amazon.com/iam/">IAM dashboard</a> in the AWS Management Console.
    ///         Learn more about using on-box credentials for your game servers at
    ///         <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html">
    ///         Access external resources from a game server</a>.</p>
    public let instanceRoleArn: String?
    /// <p>The EC2 instance type that determines the computing resources of each instance in
    ///             the fleet. Instance type defines the CPU, memory, storage, and networking capacity. See
    ///                 <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 Instance Types</a>
    ///             for detailed descriptions.</p>
    public let instanceType: EC2InstanceType?
    /// <p>
    ///             <b>This parameter is no longer used.</b> Game session log
    ///             paths are now defined using the GameLift server API <code>ProcessReady()</code>
    ///             <code>logParameters</code>. See more information in the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api-ref.html#gamelift-sdk-server-api-ref-dataypes-process">Server API Reference</a>. </p>
    public let logPaths: [String]?
    /// <p>Name of a metric group that metrics for this fleet are added to. In Amazon CloudWatch,
    ///             you can view aggregated metrics for fleets that are in a metric group. A fleet can be
    ///             included in only one metric group at a time.</p>
    public let metricGroups: [String]?
    /// <p>A descriptive label that is associated with a fleet. Fleet names do not need to be unique.</p>
    public let name: String?
    /// <p>The type of game session protection to set on all new instances that are started in
    ///             the fleet.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>NoProtection</b> -- The game session can be
    ///                     terminated during a scale-down event.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>FullProtection</b> -- If the game session is in an
    ///                         <code>ACTIVE</code> status, it cannot be terminated during a scale-down
    ///                     event.</p>
    ///             </li>
    ///          </ul>
    public let newGameSessionProtectionPolicy: ProtectionPolicy?
    /// <p>The operating system of the fleet's computing resources. A fleet's operating system is
    ///             determined by the OS of the build or script that is deployed on this fleet.</p>
    public let operatingSystem: OperatingSystem?
    /// <p>The fleet policy that limits the number of game sessions an individual player can
    ///             create over a span of time.</p>
    public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
    /// <p> The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) associated with the GameLift script resource that is deployed on instances
    ///             in this fleet. In a GameLift script ARN, the resource ID matches the
    ///                 <code>ScriptId</code> value.</p>
    public let scriptArn: String?
    /// <p>A unique identifier for the Realtime script resource that is deployed on instances in this fleet.</p>
    public let scriptId: String?
    /// <p>
    ///             <b>This parameter is no longer used.</b> Server launch
    ///             parameters are now defined  using the fleet's <a>RuntimeConfiguration</a>
    ///             parameter. Requests that use this parameter instead continue to be valid.</p>
    public let serverLaunchParameters: String?
    /// <p>
    ///             <b>This parameter is no longer used.</b> Server launch paths
    ///             are now defined  using the fleet's <a>RuntimeConfiguration</a> parameter.
    ///             Requests that use this parameter instead continue to be valid.</p>
    public let serverLaunchPath: String?
    /// <p>Current status of the fleet. Possible fleet statuses include the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>NEW</b> -- A new fleet has been defined and desired
    ///                     instances is set to 1. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>DOWNLOADING/VALIDATING/BUILDING/ACTIVATING</b> --
    ///                     GameLift is setting up the new fleet, creating new instances with the game build
    ///                     or Realtime script and starting server processes.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>ACTIVE</b> -- Hosts can now accept game
    ///                     sessions.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>ERROR</b> -- An error occurred when downloading,
    ///                     validating, building, or activating the fleet.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>DELETING</b> -- Hosts are responding to a delete
    ///                     fleet request.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>TERMINATED</b> -- The fleet no longer
    ///                     exists.</p>
    ///             </li>
    ///          </ul>
    public let status: FleetStatus?
    /// <p>A list of fleet activity that has been suspended using <a>StopFleetActions</a>. This includes fleet auto-scaling.</p>
    public let stoppedActions: [FleetAction]?
    /// <p>A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let terminationTime: Date?

    public init (
        buildArn: String? = nil,
        buildId: String? = nil,
        certificateConfiguration: CertificateConfiguration? = nil,
        creationTime: Date? = nil,
        description: String? = nil,
        fleetArn: String? = nil,
        fleetId: String? = nil,
        fleetType: FleetType? = nil,
        instanceRoleArn: String? = nil,
        instanceType: EC2InstanceType? = nil,
        logPaths: [String]? = nil,
        metricGroups: [String]? = nil,
        name: String? = nil,
        newGameSessionProtectionPolicy: ProtectionPolicy? = nil,
        operatingSystem: OperatingSystem? = nil,
        resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil,
        scriptArn: String? = nil,
        scriptId: String? = nil,
        serverLaunchParameters: String? = nil,
        serverLaunchPath: String? = nil,
        status: FleetStatus? = nil,
        stoppedActions: [FleetAction]? = nil,
        terminationTime: Date? = nil
    )
    {
        self.buildArn = buildArn
        self.buildId = buildId
        self.certificateConfiguration = certificateConfiguration
        self.creationTime = creationTime
        self.description = description
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.fleetType = fleetType
        self.instanceRoleArn = instanceRoleArn
        self.instanceType = instanceType
        self.logPaths = logPaths
        self.metricGroups = metricGroups
        self.name = name
        self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
        self.operatingSystem = operatingSystem
        self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
        self.scriptArn = scriptArn
        self.scriptId = scriptId
        self.serverLaunchParameters = serverLaunchParameters
        self.serverLaunchPath = serverLaunchPath
        self.status = status
        self.stoppedActions = stoppedActions
        self.terminationTime = terminationTime
    }
}
