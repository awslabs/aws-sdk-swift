// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartGameSessionPlacementInputBody: Equatable {
    public let placementId: String?
    public let gameSessionQueueName: String?
    public let gameProperties: [GameProperty]?
    public let maximumPlayerSessionCount: Int?
    public let gameSessionName: String?
    public let playerLatencies: [PlayerLatency]?
    public let desiredPlayerSessions: [DesiredPlayerSession]?
    public let gameSessionData: String?
}

extension StartGameSessionPlacementInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case desiredPlayerSessions = "DesiredPlayerSessions"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionName = "GameSessionName"
        case gameSessionQueueName = "GameSessionQueueName"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case placementId = "PlacementId"
        case playerLatencies = "PlayerLatencies"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let placementIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .placementId)
        placementId = placementIdDecoded
        let gameSessionQueueNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionQueueName)
        gameSessionQueueName = gameSessionQueueNameDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameProperty].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameProperty]()
            for structure0 in gamePropertiesContainer {
                gamePropertiesDecoded0?.append(structure0)
            }
        }
        gameProperties = gamePropertiesDecoded0
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let gameSessionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionName)
        gameSessionName = gameSessionNameDecoded
        let playerLatenciesContainer = try containerValues.decodeIfPresent([PlayerLatency].self, forKey: .playerLatencies)
        var playerLatenciesDecoded0:[PlayerLatency]? = nil
        if let playerLatenciesContainer = playerLatenciesContainer {
            playerLatenciesDecoded0 = [PlayerLatency]()
            for structure0 in playerLatenciesContainer {
                playerLatenciesDecoded0?.append(structure0)
            }
        }
        playerLatencies = playerLatenciesDecoded0
        let desiredPlayerSessionsContainer = try containerValues.decodeIfPresent([DesiredPlayerSession].self, forKey: .desiredPlayerSessions)
        var desiredPlayerSessionsDecoded0:[DesiredPlayerSession]? = nil
        if let desiredPlayerSessionsContainer = desiredPlayerSessionsContainer {
            desiredPlayerSessionsDecoded0 = [DesiredPlayerSession]()
            for structure0 in desiredPlayerSessionsContainer {
                desiredPlayerSessionsDecoded0?.append(structure0)
            }
        }
        desiredPlayerSessions = desiredPlayerSessionsDecoded0
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
    }
}
