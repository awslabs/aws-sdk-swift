// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the input for a request operation.</p>
public struct ListAliasesInput: Equatable {
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    public let limit: Int?
    /// <p>A descriptive label that is associated with an alias. Alias names do not need to be unique.</p>
    public let name: String?
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    public let nextToken: String?
    /// <p>The routing type to filter results on. Use this parameter to retrieve only aliases
    ///             with a certain routing type. To retrieve all aliases, leave this parameter empty.</p>
    ///         <p>Possible routing types include the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>SIMPLE</b> -- The alias resolves to one specific
    ///                     fleet. Use this type when routing to active fleets.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>TERMINAL</b> -- The alias does not resolve to a
    ///                     fleet but instead can be used to display a message to the user. A terminal alias
    ///                     throws a TerminalRoutingStrategyException with the <a>RoutingStrategy</a> message embedded.</p>
    ///             </li>
    ///          </ul>
    public let routingStrategyType: RoutingStrategyType?

    public init (
        limit: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        routingStrategyType: RoutingStrategyType? = nil
    )
    {
        self.limit = limit
        self.name = name
        self.nextToken = nextToken
        self.routingStrategyType = routingStrategyType
    }
}
