// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateScriptInputBody: Equatable {
    public let name: String?
    public let version: String?
    public let storageLocation: S3Location?
    public let zipFile: Data?
    public let tags: [Tag]?
}

extension CreateScriptInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case storageLocation = "StorageLocation"
        case tags = "Tags"
        case version = "Version"
        case zipFile = "ZipFile"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(S3Location.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
        let zipFileDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .zipFile)
        zipFile = zipFileDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
