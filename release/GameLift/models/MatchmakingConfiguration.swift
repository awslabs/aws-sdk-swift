// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Guidelines for use with FlexMatch to match players into games. All matchmaking
///             requests must specify a matchmaking configuration.</p>
public struct MatchmakingConfiguration: Equatable {
    /// <p>A flag that indicates whether a match that was created with this configuration must be
    ///             accepted by the matched players. To require acceptance, set to TRUE. When this option is
    ///             enabled, matchmaking tickets use the status <code>REQUIRES_ACCEPTANCE</code> to indicate
    ///             when a completed potential match is waiting for player acceptance.</p>
    public let acceptanceRequired: Bool?
    /// <p>The length of time (in seconds) to wait for players to accept a proposed match, if
    ///             acceptance is required. If any player rejects the match or fails to accept before the
    ///             timeout, the ticket continues to look for an acceptable match.</p>
    public let acceptanceTimeoutSeconds: Int?
    /// <p>The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies
    ///             a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match. This parameter is not used when <code>FlexMatchMode</code> is set to
    ///             <code>STANDALONE</code>.</p>
    public let additionalPlayerCount: Int?
    /// <p>The method used to backfill game sessions created with this matchmaking configuration.
    ///             MANUAL indicates that the game makes backfill requests or does not use the match
    ///             backfill feature. AUTOMATIC indicates that GameLift creates <a>StartMatchBackfill</a> requests whenever a game session has one or more open
    ///             slots. Learn more about manual and automatic backfill in <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html">Backfill existing games
    ///                 with FlexMatch</a>. Automatic backfill is not available when
    ///             <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    public let backfillMode: BackfillMode?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift matchmaking configuration resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::matchmakingconfiguration/<matchmaking configuration name></code>. In a GameLift configuration ARN, the resource ID matches the
    ///                 <i>Name</i> value.</p>
    public let configurationArn: String?
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>Information to attach to all events related to the matchmaking configuration. </p>
    public let customEventData: String?
    /// <p>A descriptive label that is associated with matchmaking configuration.</p>
    public let description: String?
    /// <p>Indicates whether this matchmaking configuration is being used with GameLift hosting or
    ///             as a standalone matchmaking solution. </p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <b>STANDALONE</b> - FlexMatch forms matches and returns
    ///                 match information, including players and team assignments, in a
    ///                 <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html#match-events-matchmakingsucceeded">
    ///                     MatchmakingSucceeded</a> event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>WITH_QUEUE</b> - FlexMatch forms matches and uses the specified GameLift queue to
    ///                 start a game session for the match. </p>
    ///             </li>
    ///          </ul>
    public let flexMatchMode: FlexMatchMode?
    /// <p>A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <a>GameSession</a>
    ///             object that is created for a successful match. This parameter is not used when
    ///             <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    public let gameProperties: [GameProperty]?
    /// <p>A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <a>GameSession</a> object
    ///             that is created for a successful match. This parameter is not used when
    ///             <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    public let gameSessionData: String?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>::gamesessionqueue/<queue name></code>. Queues can be located in any Region. Queues are used to start new
    ///             GameLift-hosted game sessions for matches that are created with this matchmaking
    ///             configuration. This property is not set when <code>FlexMatchMode</code> is set to
    ///             <code>STANDALONE</code>.</p>
    public let gameSessionQueueArns: [String]?
    /// <p>A unique identifier for the matchmaking configuration. This name is used to identify the configuration associated with a
    ///             matchmaking request or ticket.</p>
    public let name: String?
    /// <p>An SNS topic ARN that is set up to receive matchmaking notifications.</p>
    public let notificationTarget: String?
    /// <p>The maximum duration, in seconds, that a matchmaking ticket can remain in process
    ///             before timing out. Requests that fail due to timing out can be resubmitted as
    ///             needed.</p>
    public let requestTimeoutSeconds: Int?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) associated with the GameLift matchmaking rule set resource that this configuration uses.</p>
    public let ruleSetArn: String?
    /// <p>A unique identifier for the matchmaking rule set to use with this configuration. A matchmaking configuration can only use
    ///             rule sets that are defined in the same Region.</p>
    public let ruleSetName: String?

    public init (
        acceptanceRequired: Bool? = nil,
        acceptanceTimeoutSeconds: Int? = nil,
        additionalPlayerCount: Int? = nil,
        backfillMode: BackfillMode? = nil,
        configurationArn: String? = nil,
        creationTime: Date? = nil,
        customEventData: String? = nil,
        description: String? = nil,
        flexMatchMode: FlexMatchMode? = nil,
        gameProperties: [GameProperty]? = nil,
        gameSessionData: String? = nil,
        gameSessionQueueArns: [String]? = nil,
        name: String? = nil,
        notificationTarget: String? = nil,
        requestTimeoutSeconds: Int? = nil,
        ruleSetArn: String? = nil,
        ruleSetName: String? = nil
    )
    {
        self.acceptanceRequired = acceptanceRequired
        self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
        self.additionalPlayerCount = additionalPlayerCount
        self.backfillMode = backfillMode
        self.configurationArn = configurationArn
        self.creationTime = creationTime
        self.customEventData = customEventData
        self.description = description
        self.flexMatchMode = flexMatchMode
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionQueueArns = gameSessionQueueArns
        self.name = name
        self.notificationTarget = notificationTarget
        self.requestTimeoutSeconds = requestTimeoutSeconds
        self.ruleSetArn = ruleSetArn
        self.ruleSetName = ruleSetName
    }
}
