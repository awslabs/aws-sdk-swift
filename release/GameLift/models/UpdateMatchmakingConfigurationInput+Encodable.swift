// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateMatchmakingConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptanceRequired = acceptanceRequired {
            try encodeContainer.encode(acceptanceRequired, forKey: .acceptanceRequired)
        }
        if let acceptanceTimeoutSeconds = acceptanceTimeoutSeconds {
            try encodeContainer.encode(acceptanceTimeoutSeconds, forKey: .acceptanceTimeoutSeconds)
        }
        if let additionalPlayerCount = additionalPlayerCount {
            try encodeContainer.encode(additionalPlayerCount, forKey: .additionalPlayerCount)
        }
        if let backfillMode = backfillMode {
            try encodeContainer.encode(backfillMode.rawValue, forKey: .backfillMode)
        }
        if let customEventData = customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let flexMatchMode = flexMatchMode {
            try encodeContainer.encode(flexMatchMode.rawValue, forKey: .flexMatchMode)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gamepropertylist0 in gameProperties {
                try gamePropertiesContainer.encode(gamepropertylist0)
            }
        }
        if let gameSessionData = gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionQueueArns = gameSessionQueueArns {
            var gameSessionQueueArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameSessionQueueArns)
            for queuearnslist0 in gameSessionQueueArns {
                try gameSessionQueueArnsContainer.encode(queuearnslist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let requestTimeoutSeconds = requestTimeoutSeconds {
            try encodeContainer.encode(requestTimeoutSeconds, forKey: .requestTimeoutSeconds)
        }
        if let ruleSetName = ruleSetName {
            try encodeContainer.encode(ruleSetName, forKey: .ruleSetName)
        }
    }
}
