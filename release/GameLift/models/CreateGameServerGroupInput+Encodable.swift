// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateGameServerGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case balancingStrategy = "BalancingStrategy"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case launchTemplate = "LaunchTemplate"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case roleArn = "RoleArn"
        case tags = "Tags"
        case vpcSubnets = "VpcSubnets"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingPolicy = autoScalingPolicy {
            try encodeContainer.encode(autoScalingPolicy, forKey: .autoScalingPolicy)
        }
        if let balancingStrategy = balancingStrategy {
            try encodeContainer.encode(balancingStrategy.rawValue, forKey: .balancingStrategy)
        }
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerProtectionPolicy = gameServerProtectionPolicy {
            try encodeContainer.encode(gameServerProtectionPolicy.rawValue, forKey: .gameServerProtectionPolicy)
        }
        if let instanceDefinitions = instanceDefinitions {
            var instanceDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceDefinitions)
            for instancedefinitions0 in instanceDefinitions {
                try instanceDefinitionsContainer.encode(instancedefinitions0)
            }
        }
        if let launchTemplate = launchTemplate {
            try encodeContainer.encode(launchTemplate, forKey: .launchTemplate)
        }
        if let maxSize = maxSize {
            try encodeContainer.encode(maxSize, forKey: .maxSize)
        }
        if let minSize = minSize {
            try encodeContainer.encode(minSize, forKey: .minSize)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let vpcSubnets = vpcSubnets {
            var vpcSubnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcSubnets)
            for vpcsubnets0 in vpcSubnets {
                try vpcSubnetsContainer.encode(vpcsubnets0)
            }
        }
    }
}
