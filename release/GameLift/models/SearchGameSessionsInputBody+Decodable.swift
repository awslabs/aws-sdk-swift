// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchGameSessionsInputBody: Equatable {
    public let fleetId: String?
    public let aliasId: String?
    public let location: String?
    public let filterExpression: String?
    public let sortExpression: String?
    public let limit: Int?
    public let nextToken: String?
}

extension SearchGameSessionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
        case filterExpression = "FilterExpression"
        case fleetId = "FleetId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case sortExpression = "SortExpression"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let aliasIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
        let filterExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterExpression)
        filterExpression = filterExpressionDecoded
        let sortExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sortExpression)
        sortExpression = sortExpressionDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
