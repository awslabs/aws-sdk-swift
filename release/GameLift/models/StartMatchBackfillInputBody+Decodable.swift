// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartMatchBackfillInputBody: Equatable {
    public let ticketId: String?
    public let configurationName: String?
    public let gameSessionArn: String?
    public let players: [Player]?
}

extension StartMatchBackfillInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configurationName = "ConfigurationName"
        case gameSessionArn = "GameSessionArn"
        case players = "Players"
        case ticketId = "TicketId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ticketId)
        ticketId = ticketIdDecoded
        let configurationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configurationName)
        configurationName = configurationNameDecoded
        let gameSessionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gameSessionArn)
        gameSessionArn = gameSessionArnDecoded
        let playersContainer = try containerValues.decodeIfPresent([Player].self, forKey: .players)
        var playersDecoded0:[Player]? = nil
        if let playersContainer = playersContainer {
            playersDecoded0 = [Player]()
            for structure0 in playersContainer {
                playersDecoded0?.append(structure0)
            }
        }
        players = playersDecoded0
    }
}
