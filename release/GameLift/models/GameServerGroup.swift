// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>
///             <b>This data type is used with the GameLift FleetIQ and game server groups.</b>
///          </p>
///         <p>Properties that describe a game server group resource. A game server group manages
///             certain properties related to a corresponding EC2 Auto Scaling group. </p>
///         <p>A game server group is created by a successful call to
///                 <code>CreateGameServerGroup</code> and deleted by calling
///                 <code>DeleteGameServerGroup</code>. Game server group activity can be temporarily
///             suspended and resumed by calling <code>SuspendGameServerGroup</code> and
///                 <code>ResumeGameServerGroup</code>, respectively. </p>
///          <p>
///             <b>Related actions</b>
///          </p>
///                     <p>
///             <a>CreateGameServerGroup</a> |
///                     <a>ListGameServerGroups</a> |
///                     <a>DescribeGameServerGroup</a> |
///                     <a>UpdateGameServerGroup</a> |
///                     <a>DeleteGameServerGroup</a> |
///                     <a>ResumeGameServerGroup</a> |
///                     <a>SuspendGameServerGroup</a> |
///                     <a>DescribeGameServerInstances</a> |
///                     <a href="https://docs.aws.amazon.com/gamelift/latest/fleetiqguide/reference-awssdk-fleetiq.html">All APIs by task</a>
///          </p>
public struct GameServerGroup: Equatable {
    /// <p>A generated unique ID for the EC2 Auto Scaling group that is associated with this
    ///             game server group.</p>
    public let autoScalingGroupArn: String?
    /// <p>Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the
    ///             game server group. Method options include the following:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>SPOT_ONLY</code> - Only Spot Instances are used in the game server group. If Spot
    ///                     Instances are unavailable or not viable for game hosting, the game server group
    ///                     provides no hosting capacity until Spot Instances can again be used. Until then,
    ///                     no new instances are started, and the existing nonviable Spot Instances are
    ///                     terminated (after current gameplay ends) and are not replaced.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>SPOT_PREFERRED</code> - (default value) Spot Instances are used whenever available in
    ///                     the game server group. If Spot Instances are unavailable, the game server group
    ///                     continues to provide hosting capacity by falling back to On-Demand Instances.
    ///                     Existing nonviable Spot Instances are terminated (after current gameplay ends)
    ///                     and are replaced with new On-Demand Instances.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ON_DEMAND_ONLY</code> - Only On-Demand Instances are used in the game
    ///                     server group. No Spot Instances are used, even when available, while this
    ///                     balancing strategy is in force.</p>
    ///             </li>
    ///          </ul>
    public let balancingStrategy: BalancingStrategy?
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let creationTime: Date?
    /// <p>A generated unique ID for the game server group.</p>
    public let gameServerGroupArn: String?
    /// <p>A developer-defined identifier for the game server group. The name is unique for each
    ///             Region in each AWS account.</p>
    public let gameServerGroupName: String?
    /// <p>A flag that indicates whether instances in the game server group are protected
    ///             from early termination. Unprotected instances that have active game servers running might
    ///             be terminated during a scale-down event, causing players to be dropped from the game.
    ///             Protected instances cannot be terminated while there are active game servers running except
    ///             in the event of a forced game server group deletion (see ). An exception to this is with Spot
    ///             Instances, which can be terminated by AWS regardless of protection status. </p>
    public let gameServerProtectionPolicy: GameServerProtectionPolicy?
    /// <p>The set of EC2 instance types that GameLift FleetIQ can use when balancing and automatically
    ///             scaling instances in the corresponding Auto Scaling group. </p>
    public let instanceDefinitions: [InstanceDefinition]?
    /// <p>A timestamp that indicates when this game server group was last updated.</p>
    public let lastUpdatedTime: Date?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) for an IAM role that
    ///             allows Amazon GameLift to access your EC2 Auto Scaling groups.</p>
    public let roleArn: String?
    /// <p>The current status of the game server group. Possible statuses include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>NEW</code> - GameLift FleetIQ has validated the <code>CreateGameServerGroup()</code>
    ///                     request. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ACTIVATING</code> - GameLift FleetIQ is setting up a game server group, which
    ///                     includes creating an Auto Scaling group in your AWS account. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ACTIVE</code> - The game server group has been successfully created. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>DELETE_SCHEDULED</code> - A request to delete the game server group has
    ///                     been received. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>DELETING</code> - GameLift FleetIQ has received a valid
    ///                         <code>DeleteGameServerGroup()</code> request and is processing it. GameLift FleetIQ
    ///                     must first complete and release hosts before it deletes the Auto Scaling group
    ///                     and the game server group. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>DELETED</code> - The game server group has been successfully deleted. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ERROR</code> - The asynchronous processes of activating or deleting a game server group
    ///                     has failed, resulting in an error state.</p>
    ///             </li>
    ///          </ul>
    public let status: GameServerGroupStatus?
    /// <p>Additional information about the current game server group status. This information
    ///             might provide additional insight on groups that are in <code>ERROR</code> status.</p>
    public let statusReason: String?
    /// <p>A list of activities that are currently suspended for this game server group.
    ///         If this property is empty, all activities are occurring.</p>
    public let suspendedActions: [GameServerGroupAction]?

    public init (
        autoScalingGroupArn: String? = nil,
        balancingStrategy: BalancingStrategy? = nil,
        creationTime: Date? = nil,
        gameServerGroupArn: String? = nil,
        gameServerGroupName: String? = nil,
        gameServerProtectionPolicy: GameServerProtectionPolicy? = nil,
        instanceDefinitions: [InstanceDefinition]? = nil,
        lastUpdatedTime: Date? = nil,
        roleArn: String? = nil,
        status: GameServerGroupStatus? = nil,
        statusReason: String? = nil,
        suspendedActions: [GameServerGroupAction]? = nil
    )
    {
        self.autoScalingGroupArn = autoScalingGroupArn
        self.balancingStrategy = balancingStrategy
        self.creationTime = creationTime
        self.gameServerGroupArn = gameServerGroupArn
        self.gameServerGroupName = gameServerGroupName
        self.gameServerProtectionPolicy = gameServerProtectionPolicy
        self.instanceDefinitions = instanceDefinitions
        self.lastUpdatedTime = lastUpdatedTime
        self.roleArn = roleArn
        self.status = status
        self.statusReason = statusReason
        self.suspendedActions = suspendedActions
    }
}
