// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FleetAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case buildArn = "BuildArn"
        case buildId = "BuildId"
        case certificateConfiguration = "CertificateConfiguration"
        case creationTime = "CreationTime"
        case description = "Description"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case fleetType = "FleetType"
        case instanceRoleArn = "InstanceRoleArn"
        case instanceType = "InstanceType"
        case logPaths = "LogPaths"
        case metricGroups = "MetricGroups"
        case name = "Name"
        case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
        case operatingSystem = "OperatingSystem"
        case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
        case scriptArn = "ScriptArn"
        case scriptId = "ScriptId"
        case serverLaunchParameters = "ServerLaunchParameters"
        case serverLaunchPath = "ServerLaunchPath"
        case status = "Status"
        case stoppedActions = "StoppedActions"
        case terminationTime = "TerminationTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildArn = buildArn {
            try encodeContainer.encode(buildArn, forKey: .buildArn)
        }
        if let buildId = buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
        if let certificateConfiguration = certificateConfiguration {
            try encodeContainer.encode(certificateConfiguration, forKey: .certificateConfiguration)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let fleetArn = fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let fleetType = fleetType {
            try encodeContainer.encode(fleetType.rawValue, forKey: .fleetType)
        }
        if let instanceRoleArn = instanceRoleArn {
            try encodeContainer.encode(instanceRoleArn, forKey: .instanceRoleArn)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let logPaths = logPaths {
            var logPathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logPaths)
            for stringlist0 in logPaths {
                try logPathsContainer.encode(stringlist0)
            }
        }
        if let metricGroups = metricGroups {
            var metricGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricGroups)
            for metricgrouplist0 in metricGroups {
                try metricGroupsContainer.encode(metricgrouplist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let newGameSessionProtectionPolicy = newGameSessionProtectionPolicy {
            try encodeContainer.encode(newGameSessionProtectionPolicy.rawValue, forKey: .newGameSessionProtectionPolicy)
        }
        if let operatingSystem = operatingSystem {
            try encodeContainer.encode(operatingSystem.rawValue, forKey: .operatingSystem)
        }
        if let resourceCreationLimitPolicy = resourceCreationLimitPolicy {
            try encodeContainer.encode(resourceCreationLimitPolicy, forKey: .resourceCreationLimitPolicy)
        }
        if let scriptArn = scriptArn {
            try encodeContainer.encode(scriptArn, forKey: .scriptArn)
        }
        if let scriptId = scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
        if let serverLaunchParameters = serverLaunchParameters {
            try encodeContainer.encode(serverLaunchParameters, forKey: .serverLaunchParameters)
        }
        if let serverLaunchPath = serverLaunchPath {
            try encodeContainer.encode(serverLaunchPath, forKey: .serverLaunchPath)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let stoppedActions = stoppedActions {
            var stoppedActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stoppedActions)
            for fleetactionlist0 in stoppedActions {
                try stoppedActionsContainer.encode(fleetactionlist0.rawValue)
            }
        }
        if let terminationTime = terminationTime {
            try encodeContainer.encode(terminationTime.timeIntervalSince1970, forKey: .terminationTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let fleetTypeDecoded = try containerValues.decodeIfPresent(FleetType.self, forKey: .fleetType)
        fleetType = fleetTypeDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(EC2InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let terminationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .terminationTime)
        terminationTime = terminationTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(FleetStatus.self, forKey: .status)
        status = statusDecoded
        let buildIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildId)
        buildId = buildIdDecoded
        let buildArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildArn)
        buildArn = buildArnDecoded
        let scriptIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
        let scriptArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scriptArn)
        scriptArn = scriptArnDecoded
        let serverLaunchPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverLaunchPath)
        serverLaunchPath = serverLaunchPathDecoded
        let serverLaunchParametersDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverLaunchParameters)
        serverLaunchParameters = serverLaunchParametersDecoded
        let logPathsContainer = try containerValues.decodeIfPresent([String].self, forKey: .logPaths)
        var logPathsDecoded0:[String]? = nil
        if let logPathsContainer = logPathsContainer {
            logPathsDecoded0 = [String]()
            for string0 in logPathsContainer {
                logPathsDecoded0?.append(string0)
            }
        }
        logPaths = logPathsDecoded0
        let newGameSessionProtectionPolicyDecoded = try containerValues.decodeIfPresent(ProtectionPolicy.self, forKey: .newGameSessionProtectionPolicy)
        newGameSessionProtectionPolicy = newGameSessionProtectionPolicyDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let resourceCreationLimitPolicyDecoded = try containerValues.decodeIfPresent(ResourceCreationLimitPolicy.self, forKey: .resourceCreationLimitPolicy)
        resourceCreationLimitPolicy = resourceCreationLimitPolicyDecoded
        let metricGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .metricGroups)
        var metricGroupsDecoded0:[String]? = nil
        if let metricGroupsContainer = metricGroupsContainer {
            metricGroupsDecoded0 = [String]()
            for string0 in metricGroupsContainer {
                metricGroupsDecoded0?.append(string0)
            }
        }
        metricGroups = metricGroupsDecoded0
        let stoppedActionsContainer = try containerValues.decodeIfPresent([FleetAction].self, forKey: .stoppedActions)
        var stoppedActionsDecoded0:[FleetAction]? = nil
        if let stoppedActionsContainer = stoppedActionsContainer {
            stoppedActionsDecoded0 = [FleetAction]()
            for string0 in stoppedActionsContainer {
                stoppedActionsDecoded0?.append(string0)
            }
        }
        stoppedActions = stoppedActionsDecoded0
        let instanceRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceRoleArn)
        instanceRoleArn = instanceRoleArnDecoded
        let certificateConfigurationDecoded = try containerValues.decodeIfPresent(CertificateConfiguration.self, forKey: .certificateConfiguration)
        certificateConfiguration = certificateConfigurationDecoded
    }
}
