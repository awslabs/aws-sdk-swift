// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A range of IP addresses and port settings that allow inbound traffic to connect to
///             server processes on an instance in a fleet. New game sessions are assigned an IP
///             address/port number combination, which must fall into the fleet's allowed ranges. Fleets
///             with custom game builds must have permissions explicitly set. For Realtime Servers fleets, GameLift
///             automatically opens two port ranges, one for TCP messaging and one for UDP.</p>
///         <p>
///             <b>Related actions</b>
///          </p>
///         <p>
///             <a>DescribeFleetPortSettings</a>
///          </p>
public struct IpPermission: Equatable {
    /// <p>The network communication protocol used by the fleet.</p>
    public let `protocol`: IpProtocol?
    /// <p>A starting value for a range of allowed port numbers.</p>
    public let fromPort: Int?
    /// <p>A range of allowed IP addresses. This value must be expressed in CIDR notation.
    ///             Example: "<code>000.000.000.000/[subnet mask]</code>" or optionally the shortened
    ///             version "<code>0.0.0.0/[subnet mask]</code>".</p>
    public let ipRange: String?
    /// <p>An ending value for a range of allowed port numbers. Port numbers are end-inclusive.
    ///             This value must be higher than <code>FromPort</code>.</p>
    public let toPort: Int?

    public init (
        `protocol`: IpProtocol? = nil,
        fromPort: Int? = nil,
        ipRange: String? = nil,
        toPort: Int? = nil
    )
    {
        self.`protocol` = `protocol`
        self.fromPort = fromPort
        self.ipRange = ipRange
        self.toPort = toPort
    }
}
