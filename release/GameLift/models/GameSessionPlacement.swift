// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Object that describes a <a>StartGameSessionPlacement</a> request. This
///         object includes the full details of the original request plus the current status and
///         start/end time stamps.</p>
///          <p>Game session placement-related operations include:</p>
///          <ul>
///             <li>
///                <p>
///                   <a>StartGameSessionPlacement</a>
///                </p>
///             </li>
///             <li>
///                <p>
///                   <a>DescribeGameSessionPlacement</a>
///                </p>
///             </li>
///             <li>
///                <p>
///                   <a>StopGameSessionPlacement</a>
///                </p>
///             </li>
///          </ul>
public struct GameSessionPlacement: Equatable {
    /// <p>The DNS identifier assigned to the instance that is running the game session. Values have
    ///             the following format:</p>
    ///          <ul>
    ///             <li>
    ///                <p>TLS-enabled fleets: <code><unique identifier>.<region identifier>.amazongamelift.com</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Non-TLS-enabled fleets: <code>ec2-<unique identifier>.compute.amazonaws.com</code>. (See
    ///             <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses">Amazon EC2 Instance IP Addressing</a>.)</p>
    ///             </li>
    ///          </ul>
    ///             <p>When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.</p>
    public let dnsName: String?
    /// <p>Time stamp indicating when this request was completed, canceled, or timed
    ///         out.</p>
    public let endTime: Date?
    /// <p>A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).</p>
    public let gameProperties: [GameProperty]?
    /// <p>Identifier for the game session created by this placement request. This value is
    ///         set once the new game session is placed (placement status is <code>FULFILLED</code>).
    ///         This identifier is unique across all Regions. You can use this value as a
    ///         <code>GameSessionId</code> value as needed.</p>
    public let gameSessionArn: String?
    /// <p>A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the
    ///     <a>GameSession</a> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).</p>
    public let gameSessionData: String?
    /// <p>A unique identifier for the game session. This value is set once the new game session is placed (placement status is
    ///         <code>FULFILLED</code>).</p>
    public let gameSessionId: String?
    /// <p>A descriptive label that is associated with a game session. Session names do not need to be unique.</p>
    public let gameSessionName: String?
    /// <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region.</p>
    public let gameSessionQueueName: String?
    /// <p>Name of the Region where the game session created by this placement request is
    ///         running. This value is set once the new game session is placed (placement status is
    ///         <code>FULFILLED</code>).</p>
    public let gameSessionRegion: String?
    /// <p>The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is
    ///         <code>FULFILLED</code>). </p>
    public let ipAddress: String?
    /// <p>Information on the matchmaking process for this game. Data is in JSON syntax,
    ///         formatted as a string. It identifies the matchmaking configuration used to create the
    ///         match, and contains data on all players assigned to the match, including player
    ///         attributes and team assignments. For more details on matchmaker data, see <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data">Match
    ///             Data</a>.</p>
    public let matchmakerData: String?
    /// <p>The maximum number of players that can be connected simultaneously to the game session.</p>
    public let maximumPlayerSessionCount: Int?
    /// <p>A collection of information on player sessions created in response to the game
    ///         session placement request. These player sessions are created only once a new game
    ///         session is successfully placed (placement status is <code>FULFILLED</code>). This
    ///         information includes the player ID (as provided in the placement request) and the
    ///         corresponding player session ID. Retrieve full player sessions by calling <a>DescribePlayerSessions</a> with the player session ID.</p>
    public let placedPlayerSessions: [PlacedPlayerSession]?
    /// <p>A unique identifier for a game session placement.</p>
    public let placementId: String?
    /// <p>A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to AWS Regions.</p>
    public let playerLatencies: [PlayerLatency]?
    /// <p>The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is
    ///         <code>FULFILLED</code>).</p>
    public let port: Int?
    /// <p>Time stamp indicating when this request was placed in the queue. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    public let startTime: Date?
    /// <p>Current status of the game session placement request.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>PENDING</b> -- The placement request is currently
    ///                 in the queue waiting to be processed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>FULFILLED</b> -- A new game session and player
    ///                 sessions (if requested) have been successfully created. Values for
    ///                 <i>GameSessionArn</i> and
    ///                 <i>GameSessionRegion</i> are available. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>CANCELLED</b> -- The placement request was canceled
    ///                 with a call to <a>StopGameSessionPlacement</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>TIMED_OUT</b> -- A new game session was not
    ///                 successfully created before the time limit expired. You can resubmit the
    ///                 placement request as needed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>FAILED</b> -- GameLift is not able to complete the
    ///             process of placing the game session. Common reasons are the
    ///             game session terminated before the placement process was completed, or an unexpected
    ///             internal error.</p>
    ///             </li>
    ///          </ul>
    public let status: GameSessionPlacementState?

    public init (
        dnsName: String? = nil,
        endTime: Date? = nil,
        gameProperties: [GameProperty]? = nil,
        gameSessionArn: String? = nil,
        gameSessionData: String? = nil,
        gameSessionId: String? = nil,
        gameSessionName: String? = nil,
        gameSessionQueueName: String? = nil,
        gameSessionRegion: String? = nil,
        ipAddress: String? = nil,
        matchmakerData: String? = nil,
        maximumPlayerSessionCount: Int? = nil,
        placedPlayerSessions: [PlacedPlayerSession]? = nil,
        placementId: String? = nil,
        playerLatencies: [PlayerLatency]? = nil,
        port: Int? = nil,
        startTime: Date? = nil,
        status: GameSessionPlacementState? = nil
    )
    {
        self.dnsName = dnsName
        self.endTime = endTime
        self.gameProperties = gameProperties
        self.gameSessionArn = gameSessionArn
        self.gameSessionData = gameSessionData
        self.gameSessionId = gameSessionId
        self.gameSessionName = gameSessionName
        self.gameSessionQueueName = gameSessionQueueName
        self.gameSessionRegion = gameSessionRegion
        self.ipAddress = ipAddress
        self.matchmakerData = matchmakerData
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
        self.placedPlayerSessions = placedPlayerSessions
        self.placementId = placementId
        self.playerLatencies = playerLatencies
        self.port = port
        self.startTime = startTime
        self.status = status
    }
}
