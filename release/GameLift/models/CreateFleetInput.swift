// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the input for a request operation.</p>
public struct CreateFleetInput: Equatable {
    /// <p>The unique identifier for a custom game server build to be deployed on fleet
    ///             instances. You can use either the build ID or ARN. The build must be uploaded to GameLift
    ///             and in <code>READY</code> status. This fleet property cannot be changed later.</p>
    public let buildId: String?
    /// <p>Prompts GameLift to generate a TLS/SSL certificate for the fleet. TLS certificates are
    ///             used for encrypting traffic between game clients and the game servers that are running
    ///             on GameLift. By default, the <code>CertificateConfiguration</code> is set to
    ///                 <code>DISABLED</code>. Learn more at <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-howitworks.html#gamelift-howitworks-security">Securing Client/Server Communication</a>. This property cannot be changed after
    ///             the fleet is created. </p>
    ///         <p>Note: This feature requires the AWS Certificate Manager (ACM) service, which is not
    ///             available in all AWS regions. When working in a region that does not support this
    ///             feature, a fleet creation request with certificate generation fails with a 4xx
    ///             error.</p>
    public let certificateConfiguration: CertificateConfiguration?
    /// <p>A human-readable description of the fleet.</p>
    public let description: String?
    /// <p>The allowed IP address ranges and port settings that allow inbound traffic to access
    ///             game sessions on this fleet. If the fleet is hosting a custom game build, this property
    ///             must be set before players can connect to game sessions. For Realtime Servers fleets, GameLift
    ///             automatically sets TCP and UDP ranges. </p>
    public let eC2InboundPermissions: [IpPermission]?
    /// <p>The GameLift-supported EC2 instance type to use for all fleet instances. Instance
    ///             type determines the computing resources that will be used to host your game servers,
    ///             including CPU, memory, storage, and networking capacity. See <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 Instance Types</a> for detailed descriptions
    ///             of EC2 instance types.</p>
    public let eC2InstanceType: EC2InstanceType?
    /// <p>Indicates whether to use On-Demand or Spot instances for this fleet. By default, this
    ///             property is set to <code>ON_DEMAND</code>. Learn more about when to use <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot"> On-Demand versus Spot Instances</a>. This property cannot be changed after the
    ///             fleet is created.</p>
    public let fleetType: FleetType?
    /// <p>A unique identifier for an AWS IAM role that manages access to your AWS services.
    ///         With an instance role ARN set, any application that runs on an instance in this fleet can assume the role,
    ///         including install scripts, server processes, and daemons (background processes). Create a role or look up a role's
    ///         ARN by using the <a href="https://console.aws.amazon.com/iam/">IAM dashboard</a> in the AWS Management Console.
    ///         Learn more about using on-box credentials for your game servers at
    ///         <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html">
    ///         Access external resources from a game server</a>.  This property cannot be changed after the fleet is created.</p>
    public let instanceRoleArn: String?
    /// <p>A set of remote locations to deploy additional instances to and manage as part of the
    ///             fleet. This parameter can only be used when creating fleets in AWS Regions that support
    ///             multiple locations. You can add any GameLift-supported AWS Region as a remote location,
    ///             in the form of an AWS Region code such as <code>us-west-2</code>. To create a fleet with
    ///             instances in the home Region only, omit this parameter. </p>
    public let locations: [LocationConfiguration]?
    /// <p>
    ///             <b>This parameter is no longer used.</b> To specify where
    ///             GameLift should store log files once a server process shuts down, use the GameLift server
    ///             API <code>ProcessReady()</code> and specify one or more directory paths in
    ///                 <code>logParameters</code>. See more information in the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api-ref.html#gamelift-sdk-server-api-ref-dataypes-process">Server API Reference</a>. </p>
    public let logPaths: [String]?
    /// <p>The name of an AWS CloudWatch metric group to add this fleet to. A metric group is
    ///             used to aggregate the metrics for multiple fleets. You can specify an existing metric
    ///             group name or set a new name to create a new metric group. A fleet can be included in
    ///             only one metric group at a time. </p>
    public let metricGroups: [String]?
    /// <p>A descriptive label that is associated with a fleet. Fleet names do not need to be unique.</p>
    public let name: String?
    /// <p>The status of termination protection for active game sessions on the fleet. By
    ///             default, this property is set to <code>NoProtection</code>. You can also set game
    ///             session protection for an individual game session by calling <a>UpdateGameSession</a>.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>NoProtection</b> - Game sessions can be terminated
    ///                     during active gameplay as a result of a scale-down event. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>FullProtection</b> - Game sessions in
    ///                         <code>ACTIVE</code> status cannot be terminated during a scale-down
    ///                     event.</p>
    ///             </li>
    ///          </ul>
    public let newGameSessionProtectionPolicy: ProtectionPolicy?
    /// <p>Used when peering your GameLift fleet with a VPC, the unique identifier for the AWS
    ///             account that owns the VPC. You can find your account ID in the AWS Management Console under account
    ///             settings. </p>
    public let peerVpcAwsAccountId: String?
    /// <p>A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The
    ///             VPC must be in the same Region as your fleet. To look up a VPC ID, use the
    ///             <a href="https://console.aws.amazon.com/vpc/">VPC Dashboard</a> in the AWS Management Console.
    ///             Learn more about VPC peering in <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html">VPC Peering with GameLift Fleets</a>. </p>
    public let peerVpcId: String?
    /// <p>A policy that limits the number of game sessions that an individual player can create
    ///             on instances in this fleet within a specified span of time.</p>
    public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
    /// <p>Instructions for how to launch and maintain server processes on instances in the
    ///             fleet. The runtime configuration defines one or more server process configurations, each
    ///             identifying a build executable or Realtime script file and the number of processes of
    ///             that type to run concurrently. </p>
    ///         <note>
    ///             <p>The <code>RuntimeConfiguration</code> parameter is required unless the fleet is
    ///                 being configured using the older parameters <code>ServerLaunchPath</code> and
    ///                     <code>ServerLaunchParameters</code>, which are still supported for backward
    ///                 compatibility.</p>
    ///         </note>
    public let runtimeConfiguration: RuntimeConfiguration?
    /// <p>The unique identifier for a Realtime configuration script to be deployed on fleet
    ///             instances. You can use either the script ID or ARN. Scripts must be uploaded to GameLift
    ///             prior to creating the fleet. This fleet property cannot be changed later.</p>
    public let scriptId: String?
    /// <p>
    ///             <b>This parameter is no longer used.</b> Specify server
    ///             launch parameters using the <code>RuntimeConfiguration</code> parameter. Requests that
    ///             use this parameter instead continue to be valid.</p>
    public let serverLaunchParameters: String?
    /// <p>
    ///             <b>This parameter is no longer used.</b> Specify a server
    ///             launch path using the <code>RuntimeConfiguration</code> parameter. Requests that use
    ///             this parameter instead continue to be valid.</p>
    public let serverLaunchPath: String?
    /// <p>A list of labels to assign to the new fleet resource. Tags are developer-defined
    ///             key-value pairs. Tagging AWS resources are useful for resource management, access
    ///             management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging AWS Resources</a> in the
    ///                 <i>AWS General Reference</i>. Once the fleet is created, you can use
    ///                 <a>TagResource</a>, <a>UntagResource</a>, and <a>ListTagsForResource</a> to add, remove, and view tags. The maximum tag limit
    ///             may be lower than stated. See the <i>AWS General Reference</i> for actual
    ///             tagging limits.</p>
    public let tags: [Tag]?

    public init (
        buildId: String? = nil,
        certificateConfiguration: CertificateConfiguration? = nil,
        description: String? = nil,
        eC2InboundPermissions: [IpPermission]? = nil,
        eC2InstanceType: EC2InstanceType? = nil,
        fleetType: FleetType? = nil,
        instanceRoleArn: String? = nil,
        locations: [LocationConfiguration]? = nil,
        logPaths: [String]? = nil,
        metricGroups: [String]? = nil,
        name: String? = nil,
        newGameSessionProtectionPolicy: ProtectionPolicy? = nil,
        peerVpcAwsAccountId: String? = nil,
        peerVpcId: String? = nil,
        resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil,
        runtimeConfiguration: RuntimeConfiguration? = nil,
        scriptId: String? = nil,
        serverLaunchParameters: String? = nil,
        serverLaunchPath: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.buildId = buildId
        self.certificateConfiguration = certificateConfiguration
        self.description = description
        self.eC2InboundPermissions = eC2InboundPermissions
        self.eC2InstanceType = eC2InstanceType
        self.fleetType = fleetType
        self.instanceRoleArn = instanceRoleArn
        self.locations = locations
        self.logPaths = logPaths
        self.metricGroups = metricGroups
        self.name = name
        self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
        self.peerVpcAwsAccountId = peerVpcAwsAccountId
        self.peerVpcId = peerVpcId
        self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
        self.runtimeConfiguration = runtimeConfiguration
        self.scriptId = scriptId
        self.serverLaunchParameters = serverLaunchParameters
        self.serverLaunchPath = serverLaunchPath
        self.tags = tags
    }
}
