// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AttributeValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case n = "N"
        case s = "S"
        case sDM = "SDM"
        case sL = "SL"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let n = n {
            try encodeContainer.encode(n, forKey: .n)
        }
        if let s = s {
            try encodeContainer.encode(s, forKey: .s)
        }
        if let sDM = sDM {
            var sDMContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .sDM)
            for (dictKey0, stringdoublemap0) in sDM {
                try sDMContainer.encode(stringdoublemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let sL = sL {
            var sLContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sL)
            for stringlist0 in sL {
                try sLContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s)
        s = sDecoded
        let nDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .n)
        n = nDecoded
        let sLContainer = try containerValues.decodeIfPresent([String].self, forKey: .sL)
        var sLDecoded0:[String]? = nil
        if let sLContainer = sLContainer {
            sLDecoded0 = [String]()
            for string0 in sLContainer {
                sLDecoded0?.append(string0)
            }
        }
        sL = sLDecoded0
        let sDMContainer = try containerValues.decodeIfPresent([String:Double].self, forKey: .sDM)
        var sDMDecoded0: [String:Double]? = nil
        if let sDMContainer = sDMContainer {
            sDMDecoded0 = [String:Double]()
            for (key0, doubleobject0) in sDMContainer {
                sDMDecoded0?[key0] = doubleobject0
            }
        }
        sDM = sDMDecoded0
    }
}
