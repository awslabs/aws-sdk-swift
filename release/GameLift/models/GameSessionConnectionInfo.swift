// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Connection information for a new game session that is created in response to a <a>StartMatchmaking</a> request. Once a match is made, the FlexMatch engine
///             creates a new game session for it. This information, including the game session endpoint
///             and player sessions for each player in the original matchmaking request, is added to the
///             <a>MatchmakingTicket</a>, which can be retrieved by calling <a>DescribeMatchmaking</a>.</p>
public struct GameSessionConnectionInfo: Equatable {
    /// <p>The DNS identifier assigned to the instance that is running the game session. Values have
    ///             the following format:</p>
    ///          <ul>
    ///             <li>
    ///                <p>TLS-enabled fleets: <code><unique identifier>.<region identifier>.amazongamelift.com</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Non-TLS-enabled fleets: <code>ec2-<unique identifier>.compute.amazonaws.com</code>. (See
    ///             <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses">Amazon EC2 Instance IP Addressing</a>.)</p>
    ///             </li>
    ///          </ul>
    ///             <p>When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.</p>
    public let dnsName: String?
    /// <p>A unique identifier for the game session. Use the game session ID.</p>
    public let gameSessionArn: String?
    /// <p>The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.</p>
    public let ipAddress: String?
    /// <p>A collection of player session IDs, one for each player ID that was included in the
    ///             original matchmaking request. </p>
    public let matchedPlayerSessions: [MatchedPlayerSession]?
    /// <p>The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number.</p>
    public let port: Int?

    public init (
        dnsName: String? = nil,
        gameSessionArn: String? = nil,
        ipAddress: String? = nil,
        matchedPlayerSessions: [MatchedPlayerSession]? = nil,
        port: Int? = nil
    )
    {
        self.dnsName = dnsName
        self.gameSessionArn = gameSessionArn
        self.ipAddress = ipAddress
        self.matchedPlayerSessions = matchedPlayerSessions
        self.port = port
    }
}
