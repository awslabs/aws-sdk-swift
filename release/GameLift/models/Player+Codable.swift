// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Player: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case latencyInMs = "LatencyInMs"
        case playerAttributes = "PlayerAttributes"
        case playerId = "PlayerId"
        case team = "Team"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let latencyInMs = latencyInMs {
            var latencyInMsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .latencyInMs)
            for (dictKey0, latencymap0) in latencyInMs {
                try latencyInMsContainer.encode(latencymap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let playerAttributes = playerAttributes {
            var playerAttributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .playerAttributes)
            for (dictKey0, playerattributemap0) in playerAttributes {
                try playerAttributesContainer.encode(playerattributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let playerId = playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let team = team {
            try encodeContainer.encode(team, forKey: .team)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let playerAttributesContainer = try containerValues.decodeIfPresent([String:AttributeValue].self, forKey: .playerAttributes)
        var playerAttributesDecoded0: [String:AttributeValue]? = nil
        if let playerAttributesContainer = playerAttributesContainer {
            playerAttributesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in playerAttributesContainer {
                playerAttributesDecoded0?[key0] = attributevalue0
            }
        }
        playerAttributes = playerAttributesDecoded0
        let teamDecoded = try containerValues.decodeIfPresent(String.self, forKey: .team)
        team = teamDecoded
        let latencyInMsContainer = try containerValues.decodeIfPresent([String:Int].self, forKey: .latencyInMs)
        var latencyInMsDecoded0: [String:Int]? = nil
        if let latencyInMsContainer = latencyInMsContainer {
            latencyInMsDecoded0 = [String:Int]()
            for (key0, positiveinteger0) in latencyInMsContainer {
                latencyInMsDecoded0?[key0] = positiveinteger0
            }
        }
        latencyInMs = latencyInMsDecoded0
    }
}
