// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateGameServerGroupInput: Equatable {
    /// <p>Configuration settings to define a scaling policy for the Auto Scaling group that is
    ///             optimized for game hosting. The scaling policy uses the metric
    ///                 <code>"PercentUtilizedGameServers"</code> to maintain a buffer of idle game servers
    ///             that can immediately accommodate new games and players. After the Auto Scaling group is
    ///             created, update this value directly in the Auto Scaling group using the AWS console or
    ///             APIs.</p>
    public let autoScalingPolicy: GameServerGroupAutoScalingPolicy?
    /// <p>Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the
    ///             game server group. Method options include the following:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>SPOT_ONLY</code> - Only Spot Instances are used in the game server group. If Spot
    ///                     Instances are unavailable or not viable for game hosting, the game server group
    ///                     provides no hosting capacity until Spot Instances can again be used. Until then,
    ///                     no new instances are started, and the existing nonviable Spot Instances are
    ///                     terminated (after current gameplay ends) and are not replaced.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>SPOT_PREFERRED</code> - (default value) Spot Instances are used whenever available in
    ///                     the game server group. If Spot Instances are unavailable, the game server group
    ///                     continues to provide hosting capacity by falling back to On-Demand Instances.
    ///                     Existing nonviable Spot Instances are terminated (after current gameplay ends)
    ///                     and are replaced with new On-Demand Instances.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ON_DEMAND_ONLY</code> - Only On-Demand Instances are used in the game
    ///                     server group. No Spot Instances are used, even when available, while this
    ///                     balancing strategy is in force.</p>
    ///             </li>
    ///          </ul>
    public let balancingStrategy: BalancingStrategy?
    /// <p>An identifier for the new game server group. This value is used to generate unique ARN
    ///             identifiers for the EC2 Auto Scaling group and the GameLift FleetIQ game server group. The name
    ///             must be unique per Region per AWS account.</p>
    public let gameServerGroupName: String?
    /// <p>A flag that indicates whether instances in the game server group are protected
    ///             from early termination. Unprotected instances that have active game servers running might
    ///             be terminated during a scale-down event, causing players to be dropped from the game.
    ///             Protected instances cannot be terminated while there are active game servers running except
    ///             in the event of a forced game server group deletion (see ). An exception to this is with Spot
    ///             Instances, which can be terminated by AWS regardless of protection status. This property is set to <code>NO_PROTECTION</code> by default.</p>
    public let gameServerProtectionPolicy: GameServerProtectionPolicy?
    /// <p>The EC2 instance types and sizes to use in the Auto Scaling group. The instance
    ///             definitions must specify at least two different instance types that are supported by
    ///             GameLift FleetIQ. For more information on instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">EC2 Instance Types</a> in the
    ///                 <i>Amazon EC2 User Guide</i>. You can optionally specify capacity
    ///             weighting for each instance type. If no weight value is specified for an instance type,
    ///             it is set to the default value "1". For more information about capacity weighting, see
    ///                 <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html"> Instance Weighting for
    ///                 Amazon EC2 Auto Scaling</a> in the Amazon EC2 Auto Scaling User Guide.</p>
    public let instanceDefinitions: [InstanceDefinition]?
    /// <p>The EC2 launch template that contains configuration settings and game server code to
    ///             be deployed to all instances in the game server group. You can specify the template
    ///             using either the template name or ID. For help with creating a launch template, see
    ///                 <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch
    ///                 Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling
    ///                 User Guide</i>. After the Auto Scaling group is created, update this value
    ///             directly in the Auto Scaling group using the AWS console or APIs.</p>
    ///         <note>
    ///             <p>If you specify network interfaces in your launch template, you must explicitly set
    ///                 the property <code>AssociatePublicIpAddress</code> to "true". If no network
    ///                 interface is specified in the launch template,  GameLift FleetIQ uses your account's default
    ///                 VPC.</p>
    ///         </note>
    public let launchTemplate: LaunchTemplateSpecification?
    /// <p>The maximum number of instances allowed in the EC2 Auto Scaling group. During
    ///             automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum.
    ///             After the Auto Scaling group is created, update this value directly in the Auto Scaling
    ///             group using the AWS console or APIs.</p>
    public let maxSize: Int?
    /// <p>The minimum number of instances allowed in the EC2 Auto Scaling group. During
    ///             automatic scaling events, GameLift FleetIQ and EC2 do not scale down the group below this
    ///             minimum. In production, this value should be set to at least 1. After the Auto Scaling
    ///             group is created, update this value directly in the Auto Scaling group using the AWS
    ///             console or APIs.</p>
    public let minSize: Int?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) for an IAM role that
    ///             allows Amazon GameLift to access your EC2 Auto Scaling groups.</p>
    public let roleArn: String?
    /// <p>A list of labels to assign to the new game server group resource. Tags are
    ///             developer-defined key-value pairs. Tagging AWS resources is useful for resource
    ///             management, access management, and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging AWS
    ///                 Resources</a> in the <i>AWS General Reference</i>. Once the
    ///             resource is created, you can use <a>TagResource</a>, <a>UntagResource</a>, and <a>ListTagsForResource</a> to add, remove,
    ///             and view tags, respectively. The maximum tag limit may be lower than stated. See the
    ///             AWS General Reference for actual tagging limits.</p>
    public let tags: [Tag]?
    /// <p>A list of virtual private cloud (VPC) subnets to use with instances in the game server
    ///             group. By default, all GameLift FleetIQ-supported Availability Zones are used. You can use this
    ///             parameter to specify VPCs that you've set up. This property cannot be updated after the
    ///             game server group is created, and the corresponding Auto Scaling group will always use
    ///             the property value that is set with this request, even if the Auto Scaling group is
    ///             updated directly.</p>
    public let vpcSubnets: [String]?

    public init (
        autoScalingPolicy: GameServerGroupAutoScalingPolicy? = nil,
        balancingStrategy: BalancingStrategy? = nil,
        gameServerGroupName: String? = nil,
        gameServerProtectionPolicy: GameServerProtectionPolicy? = nil,
        instanceDefinitions: [InstanceDefinition]? = nil,
        launchTemplate: LaunchTemplateSpecification? = nil,
        maxSize: Int? = nil,
        minSize: Int? = nil,
        roleArn: String? = nil,
        tags: [Tag]? = nil,
        vpcSubnets: [String]? = nil
    )
    {
        self.autoScalingPolicy = autoScalingPolicy
        self.balancingStrategy = balancingStrategy
        self.gameServerGroupName = gameServerGroupName
        self.gameServerProtectionPolicy = gameServerProtectionPolicy
        self.instanceDefinitions = instanceDefinitions
        self.launchTemplate = launchTemplate
        self.maxSize = maxSize
        self.minSize = minSize
        self.roleArn = roleArn
        self.tags = tags
        self.vpcSubnets = vpcSubnets
    }
}
