// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2InstanceCounts: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aCTIVE = "ACTIVE"
        case dESIRED = "DESIRED"
        case iDLE = "IDLE"
        case mAXIMUM = "MAXIMUM"
        case mINIMUM = "MINIMUM"
        case pENDING = "PENDING"
        case tERMINATING = "TERMINATING"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aCTIVE = aCTIVE {
            try encodeContainer.encode(aCTIVE, forKey: .aCTIVE)
        }
        if let dESIRED = dESIRED {
            try encodeContainer.encode(dESIRED, forKey: .dESIRED)
        }
        if let iDLE = iDLE {
            try encodeContainer.encode(iDLE, forKey: .iDLE)
        }
        if let mAXIMUM = mAXIMUM {
            try encodeContainer.encode(mAXIMUM, forKey: .mAXIMUM)
        }
        if let mINIMUM = mINIMUM {
            try encodeContainer.encode(mINIMUM, forKey: .mINIMUM)
        }
        if let pENDING = pENDING {
            try encodeContainer.encode(pENDING, forKey: .pENDING)
        }
        if let tERMINATING = tERMINATING {
            try encodeContainer.encode(tERMINATING, forKey: .tERMINATING)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dESIREDDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .dESIRED)
        dESIRED = dESIREDDecoded
        let mINIMUMDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .mINIMUM)
        mINIMUM = mINIMUMDecoded
        let mAXIMUMDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .mAXIMUM)
        mAXIMUM = mAXIMUMDecoded
        let pENDINGDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .pENDING)
        pENDING = pENDINGDecoded
        let aCTIVEDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .aCTIVE)
        aCTIVE = aCTIVEDecoded
        let iDLEDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .iDLE)
        iDLE = iDLEDecoded
        let tERMINATINGDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tERMINATING)
        tERMINATING = tERMINATINGDecoded
    }
}
