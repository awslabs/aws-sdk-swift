// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the input for a request operation.</p>
public struct StartMatchBackfillInput: Equatable {
    /// <p>Name of the matchmaker to use for this request. You can use either the configuration
    ///             name or ARN value. The ARN of the matchmaker that was used with the original game
    ///             session is listed in the <a>GameSession</a> object,
    ///                 <code>MatchmakerData</code> property.</p>
    public let configurationName: String?
    /// <p>A unique identifier for the game session. Use the game session ID. When using FlexMatch as a standalone matchmaking
    ///             solution, this parameter is not needed. </p>
    public let gameSessionArn: String?
    /// <p>Match information on all players that are currently assigned to the game session.
    ///             This information is used by the matchmaker to find new players and add them to the
    ///             existing game.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>PlayerID, PlayerAttributes, Team -- This information is maintained in the
    ///                     <a>GameSession</a> object, <code>MatchmakerData</code> property,
    ///                     for all players who are currently assigned to the game session. The matchmaker
    ///                     data is in JSON syntax, formatted as a string. For more details, see <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data">
    ///                         Match Data</a>. </p>
    ///             </li>
    ///             <li>
    ///                 <p>LatencyInMs -- If the matchmaker uses player latency, include a latency
    ///                     value, in milliseconds, for the Region that the game session is currently in. Do
    ///                     not include latency values for any other Region.</p>
    ///             </li>
    ///          </ul>
    public let players: [Player]?
    /// <p>A unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of
    ///             a UUID. Use this identifier to track the match backfill ticket status and retrieve match
    ///             results.</p>
    public let ticketId: String?

    public init (
        configurationName: String? = nil,
        gameSessionArn: String? = nil,
        players: [Player]? = nil,
        ticketId: String? = nil
    )
    {
        self.configurationName = configurationName
        self.gameSessionArn = gameSessionArn
        self.players = players
        self.ticketId = ticketId
    }
}
