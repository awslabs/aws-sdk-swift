// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents a player in matchmaking. When starting a matchmaking request, a player
///             has a player ID, attributes, and may have latency data. Team information is added after
///             a match has been successfully completed.</p>
public struct Player: Equatable {
    /// <p>A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to AWS Regions. If this property is present, FlexMatch considers placing the match only
    ///             in Regions for which latency is reported. </p>
    ///         <p>If a matchmaker has a rule that evaluates player latency, players must report
    ///             latency in order to be matched. If no latency is reported in this scenario, FlexMatch
    ///             assumes that no Regions are available to the player and the ticket is not matchable.
    ///         </p>
    public let latencyInMs: [String:Int]?
    /// <p>A collection of key:value pairs containing player information for use in matchmaking.
    ///             Player attribute keys must match the <i>playerAttributes</i> used in a
    ///             matchmaking rule set. Example: <code>"PlayerAttributes": {"skill": {"N": "23"},
    ///                 "gameMode": {"S": "deathmatch"}}</code>.</p>
    public let playerAttributes: [String:AttributeValue]?
    /// <p>A unique identifier for a player</p>
    public let playerId: String?
    /// <p>Name of the team that the player is assigned to in a match. Team names are defined
    ///             in a matchmaking rule set.</p>
    public let team: String?

    public init (
        latencyInMs: [String:Int]? = nil,
        playerAttributes: [String:AttributeValue]? = nil,
        playerId: String? = nil,
        team: String? = nil
    )
    {
        self.latencyInMs = latencyInMs
        self.playerAttributes = playerAttributes
        self.playerId = playerId
        self.team = team
    }
}
