// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAliasInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let routingStrategy: RoutingStrategy?
    public let tags: [Tag]?
}

extension CreateAliasInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case name = "Name"
        case routingStrategy = "RoutingStrategy"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let routingStrategyDecoded = try containerValues.decodeIfPresent(RoutingStrategy.self, forKey: .routingStrategy)
        routingStrategy = routingStrategyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
