// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the input for a request operation.</p>
public struct UpdateGameSessionQueueInput: Equatable {
    /// <p>
    ///             Information to be added to all events that are related to this game session queue.
    ///         </p>
    public let customEventData: String?
    /// <p>A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.
    ///     Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference. When updating this list, provide a complete list of destinations.</p>
    public let destinations: [GameSessionQueueDestination]?
    /// <p>A list of locations where a queue is allowed to place new game sessions. Locations
    ///             are specified in the form of AWS Region codes, such as <code>us-west-2</code>. If this parameter is
    ///             not set, game sessions can be placed in any queue location. To remove an existing filter configuration, pass in an empty set.</p>
    public let filterConfiguration: FilterConfiguration?
    /// <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region. You can use either the queue ID or ARN value. </p>
    public let name: String?
    /// <p>An SNS topic ARN that is set up to receive game session placement notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html">
    ///             Setting up notifications for game session placement</a>.</p>
    public let notificationTarget: String?
    /// <p>A set of policies that act as a sliding cap on player latency. FleetIQ works to
    ///             deliver low latency for most players in a game session. These policies ensure that no
    ///             individual player can be placed into a game with unreasonably high latency. Use multiple
    ///             policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their
    ///             maximum allowed latency, starting with the lowest value. When updating policies, provide a complete collection of
    ///             policies.</p>
    public let playerLatencyPolicies: [PlayerLatencyPolicy]?
    /// <p>Custom settings to use when prioritizing destinations and locations for game session placements. This
    ///             configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly
    ///             named will be automatically applied at the end of the prioritization process. To remove an existing priority configuration, pass in an empty set.</p>
    public let priorityConfiguration: PriorityConfiguration?
    /// <p>The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a <code>TIMED_OUT</code> status.</p>
    public let timeoutInSeconds: Int?

    public init (
        customEventData: String? = nil,
        destinations: [GameSessionQueueDestination]? = nil,
        filterConfiguration: FilterConfiguration? = nil,
        name: String? = nil,
        notificationTarget: String? = nil,
        playerLatencyPolicies: [PlayerLatencyPolicy]? = nil,
        priorityConfiguration: PriorityConfiguration? = nil,
        timeoutInSeconds: Int? = nil
    )
    {
        self.customEventData = customEventData
        self.destinations = destinations
        self.filterConfiguration = filterConfiguration
        self.name = name
        self.notificationTarget = notificationTarget
        self.playerLatencyPolicies = playerLatencyPolicies
        self.priorityConfiguration = priorityConfiguration
        self.timeoutInSeconds = timeoutInSeconds
    }
}
