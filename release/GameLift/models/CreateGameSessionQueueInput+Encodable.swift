// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateGameSessionQueueInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customEventData = "CustomEventData"
        case destinations = "Destinations"
        case filterConfiguration = "FilterConfiguration"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case playerLatencyPolicies = "PlayerLatencyPolicies"
        case priorityConfiguration = "PriorityConfiguration"
        case tags = "Tags"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customEventData = customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for gamesessionqueuedestinationlist0 in destinations {
                try destinationsContainer.encode(gamesessionqueuedestinationlist0)
            }
        }
        if let filterConfiguration = filterConfiguration {
            try encodeContainer.encode(filterConfiguration, forKey: .filterConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let playerLatencyPolicies = playerLatencyPolicies {
            var playerLatencyPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencyPolicies)
            for playerlatencypolicylist0 in playerLatencyPolicies {
                try playerLatencyPoliciesContainer.encode(playerlatencypolicylist0)
            }
        }
        if let priorityConfiguration = priorityConfiguration {
            try encodeContainer.encode(priorityConfiguration, forKey: .priorityConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let timeoutInSeconds = timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }
}
