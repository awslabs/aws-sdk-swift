// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateMembersInputBody: Equatable {
    public let graphArn: String?
    public let message: String?
    public let disableEmailNotification: Bool
    public let accounts: [Account]?
}

extension CreateMembersInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accounts = "Accounts"
        case disableEmailNotification = "DisableEmailNotification"
        case graphArn = "GraphArn"
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let graphArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .graphArn)
        graphArn = graphArnDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let disableEmailNotificationDecoded = try containerValues.decode(Bool.self, forKey: .disableEmailNotification)
        disableEmailNotification = disableEmailNotificationDecoded
        let accountsContainer = try containerValues.decodeIfPresent([Account].self, forKey: .accounts)
        var accountsDecoded0:[Account]? = nil
        if let accountsContainer = accountsContainer {
            accountsDecoded0 = [Account]()
            for structure0 in accountsContainer {
                accountsDecoded0?.append(structure0)
            }
        }
        accounts = accountsDecoded0
    }
}
