// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Accelerator: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceleratorArn = "AcceleratorArn"
        case createdTime = "CreatedTime"
        case dnsName = "DnsName"
        case enabled = "Enabled"
        case ipAddressType = "IpAddressType"
        case ipSets = "IpSets"
        case lastModifiedTime = "LastModifiedTime"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceleratorArn = acceleratorArn {
            try encodeContainer.encode(acceleratorArn, forKey: .acceleratorArn)
        }
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let dnsName = dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let ipAddressType = ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let ipSets = ipSets {
            var ipSetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipSets)
            for ipsets0 in ipSets {
                try ipSetsContainer.encode(ipsets0)
            }
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acceleratorArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .acceleratorArn)
        acceleratorArn = acceleratorArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let ipSetsContainer = try containerValues.decodeIfPresent([IpSet].self, forKey: .ipSets)
        var ipSetsDecoded0:[IpSet]? = nil
        if let ipSetsContainer = ipSetsContainer {
            ipSetsDecoded0 = [IpSet]()
            for structure0 in ipSetsContainer {
                ipSetsDecoded0?.append(structure0)
            }
        }
        ipSets = ipSetsDecoded0
        let dnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AcceleratorStatus.self, forKey: .status)
        status = statusDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}
