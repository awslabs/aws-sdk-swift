// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateListenerInputBody: Equatable {
    public let listenerArn: String?
    public let portRanges: [PortRange]?
    public let `protocol`: `Protocol`?
    public let clientAffinity: ClientAffinity?
}

extension UpdateListenerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientAffinity = "ClientAffinity"
        case listenerArn = "ListenerArn"
        case portRanges = "PortRanges"
        case `protocol` = "Protocol"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let listenerArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .listenerArn)
        listenerArn = listenerArnDecoded
        let portRangesContainer = try containerValues.decodeIfPresent([PortRange].self, forKey: .portRanges)
        var portRangesDecoded0:[PortRange]? = nil
        if let portRangesContainer = portRangesContainer {
            portRangesDecoded0 = [PortRange]()
            for structure0 in portRangesContainer {
                portRangesDecoded0?.append(structure0)
            }
        }
        portRanges = portRangesDecoded0
        let protocolDecoded = try containerValues.decodeIfPresent(`Protocol`.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let clientAffinityDecoded = try containerValues.decodeIfPresent(ClientAffinity.self, forKey: .clientAffinity)
        clientAffinity = clientAffinityDecoded
    }
}
