// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IpSet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ipAddresses = "IpAddresses"
        case ipFamily = "IpFamily"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ipAddresses = ipAddresses {
            var ipAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipAddresses)
            for ipaddresses0 in ipAddresses {
                try ipAddressesContainer.encode(ipaddresses0)
            }
        }
        if let ipFamily = ipFamily {
            try encodeContainer.encode(ipFamily, forKey: .ipFamily)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipFamilyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipFamily)
        ipFamily = ipFamilyDecoded
        let ipAddressesContainer = try containerValues.decodeIfPresent([String].self, forKey: .ipAddresses)
        var ipAddressesDecoded0:[String]? = nil
        if let ipAddressesContainer = ipAddressesContainer {
            ipAddressesDecoded0 = [String]()
            for string0 in ipAddressesContainer {
                ipAddressesDecoded0?.append(string0)
            }
        }
        ipAddresses = ipAddressesDecoded0
    }
}
