// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateEndpointGroupInputBody: Equatable {
    public let endpointGroupArn: String?
    public let endpointConfigurations: [EndpointConfiguration]?
    public let trafficDialPercentage: Float?
    public let healthCheckPort: Int?
    public let healthCheckProtocol: HealthCheckProtocol?
    public let healthCheckPath: String?
    public let healthCheckIntervalSeconds: Int?
    public let thresholdCount: Int?
    public let portOverrides: [PortOverride]?
}

extension UpdateEndpointGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endpointConfigurations = "EndpointConfigurations"
        case endpointGroupArn = "EndpointGroupArn"
        case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
        case healthCheckPath = "HealthCheckPath"
        case healthCheckPort = "HealthCheckPort"
        case healthCheckProtocol = "HealthCheckProtocol"
        case portOverrides = "PortOverrides"
        case thresholdCount = "ThresholdCount"
        case trafficDialPercentage = "TrafficDialPercentage"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointGroupArn)
        endpointGroupArn = endpointGroupArnDecoded
        let endpointConfigurationsContainer = try containerValues.decodeIfPresent([EndpointConfiguration].self, forKey: .endpointConfigurations)
        var endpointConfigurationsDecoded0:[EndpointConfiguration]? = nil
        if let endpointConfigurationsContainer = endpointConfigurationsContainer {
            endpointConfigurationsDecoded0 = [EndpointConfiguration]()
            for structure0 in endpointConfigurationsContainer {
                endpointConfigurationsDecoded0?.append(structure0)
            }
        }
        endpointConfigurations = endpointConfigurationsDecoded0
        let trafficDialPercentageDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .trafficDialPercentage)
        trafficDialPercentage = trafficDialPercentageDecoded
        let healthCheckPortDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .healthCheckPort)
        healthCheckPort = healthCheckPortDecoded
        let healthCheckProtocolDecoded = try containerValues.decodeIfPresent(HealthCheckProtocol.self, forKey: .healthCheckProtocol)
        healthCheckProtocol = healthCheckProtocolDecoded
        let healthCheckPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .healthCheckPath)
        healthCheckPath = healthCheckPathDecoded
        let healthCheckIntervalSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .healthCheckIntervalSeconds)
        healthCheckIntervalSeconds = healthCheckIntervalSecondsDecoded
        let thresholdCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .thresholdCount)
        thresholdCount = thresholdCountDecoded
        let portOverridesContainer = try containerValues.decodeIfPresent([PortOverride].self, forKey: .portOverrides)
        var portOverridesDecoded0:[PortOverride]? = nil
        if let portOverridesContainer = portOverridesContainer {
            portOverridesDecoded0 = [PortOverride]()
            for structure0 in portOverridesContainer {
                portOverridesDecoded0?.append(structure0)
            }
        }
        portOverrides = portOverridesDecoded0
    }
}
