// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateEndpointGroupInput: Equatable {
    /// <p>The list of endpoint objects.</p>
    public let endpointConfigurations: [EndpointConfiguration]?
    /// <p>The AWS Region where the endpoint group is located. A listener can have only one endpoint group in a
    /// 			specific Region.</p>
    public let endpointGroupRegion: String?
    /// <p>The time—10 seconds or 30 seconds—between each health check for an endpoint. The default value is 30.</p>
    public let healthCheckIntervalSeconds: Int?
    /// <p>If the protocol is HTTP/S, then this specifies the path that is the destination for health check targets. The
    /// 			default value is slash (/).</p>
    public let healthCheckPath: String?
    /// <p>The port that AWS Global Accelerator uses to check the health of endpoints that are part of this endpoint group. The default port
    /// 			is the listener port that this endpoint group is associated with. If listener port is a list of ports, Global Accelerator uses the
    /// 			first port in the list.</p>
    public let healthCheckPort: Int?
    /// <p>The protocol that AWS Global Accelerator uses to check the health of endpoints that are part of this endpoint group. The default
    /// 			value is TCP.</p>
    public let healthCheckProtocol: HealthCheckProtocol?
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency—that is, the
    /// 			uniqueness—of the request.</p>
    public var idempotencyToken: String?
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    public let listenerArn: String?
    /// <p>Override specific listener ports used to route traffic to endpoints that are part of this endpoint group.
    /// 			For example, you can create a port override in which the listener
    /// 			receives user traffic on ports 80 and 443, but your accelerator routes that traffic to ports 1080
    /// 			and 1443, respectively, on the endpoints.</p>
    /// 		       <p>For more information, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/about-endpoint-groups-port-override.html">
    /// 			Port overrides</a> in the <i>AWS Global Accelerator Developer Guide</i>.</p>
    public let portOverrides: [PortOverride]?
    /// <p>The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an
    /// 			unhealthy endpoint to healthy. The default value is 3.</p>
    public let thresholdCount: Int?
    /// <p>The percentage of traffic to send to an AWS Region. Additional traffic is distributed to other endpoint groups for
    /// 			this listener. </p>
    /// 		       <p>Use this action to increase (dial up) or decrease (dial down) traffic to a specific Region. The percentage is
    /// 			applied to the traffic that would otherwise have been routed to the Region based on optimal routing.</p>
    /// 		       <p>The default value is 100.</p>
    public let trafficDialPercentage: Float?

    public init (
        endpointConfigurations: [EndpointConfiguration]? = nil,
        endpointGroupRegion: String? = nil,
        healthCheckIntervalSeconds: Int? = nil,
        healthCheckPath: String? = nil,
        healthCheckPort: Int? = nil,
        healthCheckProtocol: HealthCheckProtocol? = nil,
        idempotencyToken: String? = nil,
        listenerArn: String? = nil,
        portOverrides: [PortOverride]? = nil,
        thresholdCount: Int? = nil,
        trafficDialPercentage: Float? = nil
    )
    {
        self.endpointConfigurations = endpointConfigurations
        self.endpointGroupRegion = endpointGroupRegion
        self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
        self.healthCheckPath = healthCheckPath
        self.healthCheckPort = healthCheckPort
        self.healthCheckProtocol = healthCheckProtocol
        self.idempotencyToken = idempotencyToken
        self.listenerArn = listenerArn
        self.portOverrides = portOverrides
        self.thresholdCount = thresholdCount
        self.trafficDialPercentage = trafficDialPercentage
    }
}
