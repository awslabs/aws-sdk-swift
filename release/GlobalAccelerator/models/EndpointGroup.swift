// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A complex type for the endpoint group. An AWS Region can have only one endpoint group for a specific listener.
/// 		</p>
public struct EndpointGroup: Equatable {
    /// <p>The list of endpoint objects.</p>
    public let endpointDescriptions: [EndpointDescription]?
    /// <p>The Amazon Resource Name (ARN) of the endpoint group.</p>
    public let endpointGroupArn: String?
    /// <p>The AWS Region where the endpoint group is located.</p>
    public let endpointGroupRegion: String?
    /// <p>The time—10 seconds or 30 seconds—between health checks for each endpoint. The default value is 30.</p>
    public let healthCheckIntervalSeconds: Int?
    /// <p>If the protocol is HTTP/S, then this value provides the ping path that Global Accelerator uses for the destination on the
    /// 			endpoints for health checks. The default is slash (/).</p>
    public let healthCheckPath: String?
    /// <p>The port that Global Accelerator uses to perform health checks on endpoints that are part of this endpoint group. </p>
    /// 		
    /// 		       <p>The default port is the port for the listener that this endpoint group is associated with. If the listener port is a
    /// 			list, Global Accelerator uses the first specified port in the list of ports.</p>
    public let healthCheckPort: Int?
    /// <p>The protocol that Global Accelerator uses to perform health checks on endpoints that are part of this endpoint group. The default
    /// 			value is TCP.</p>
    public let healthCheckProtocol: HealthCheckProtocol?
    /// <p>Allows you to override the destination ports used to route traffic to an endpoint.
    /// 			Using a port override lets you to map a list of external destination ports (that your
    /// 			users send traffic to) to a list of internal destination ports that you want an application
    /// 			endpoint to receive traffic on. </p>
    public let portOverrides: [PortOverride]?
    /// <p>The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an
    /// 			unhealthy endpoint to healthy. The default value is 3.</p>
    public let thresholdCount: Int?
    /// <p>The percentage of traffic to send to an AWS Region. Additional traffic is distributed to other endpoint groups for
    /// 			this listener. </p>
    /// 		       <p>Use this action to increase (dial up) or decrease (dial down) traffic to a specific Region. The percentage is
    /// 			applied to the traffic that would otherwise have been routed to the Region based on optimal routing.</p>
    /// 		       <p>The default value is 100.</p>
    public let trafficDialPercentage: Float?

    public init (
        endpointDescriptions: [EndpointDescription]? = nil,
        endpointGroupArn: String? = nil,
        endpointGroupRegion: String? = nil,
        healthCheckIntervalSeconds: Int? = nil,
        healthCheckPath: String? = nil,
        healthCheckPort: Int? = nil,
        healthCheckProtocol: HealthCheckProtocol? = nil,
        portOverrides: [PortOverride]? = nil,
        thresholdCount: Int? = nil,
        trafficDialPercentage: Float? = nil
    )
    {
        self.endpointDescriptions = endpointDescriptions
        self.endpointGroupArn = endpointGroupArn
        self.endpointGroupRegion = endpointGroupRegion
        self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
        self.healthCheckPath = healthCheckPath
        self.healthCheckPort = healthCheckPort
        self.healthCheckProtocol = healthCheckProtocol
        self.portOverrides = portOverrides
        self.thresholdCount = thresholdCount
        self.trafficDialPercentage = trafficDialPercentage
    }
}
