// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PortMapping: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceleratorPort = "AcceleratorPort"
        case destinationSocketAddress = "DestinationSocketAddress"
        case destinationTrafficState = "DestinationTrafficState"
        case endpointGroupArn = "EndpointGroupArn"
        case endpointId = "EndpointId"
        case protocols = "Protocols"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceleratorPort = acceleratorPort {
            try encodeContainer.encode(acceleratorPort, forKey: .acceleratorPort)
        }
        if let destinationSocketAddress = destinationSocketAddress {
            try encodeContainer.encode(destinationSocketAddress, forKey: .destinationSocketAddress)
        }
        if let destinationTrafficState = destinationTrafficState {
            try encodeContainer.encode(destinationTrafficState.rawValue, forKey: .destinationTrafficState)
        }
        if let endpointGroupArn = endpointGroupArn {
            try encodeContainer.encode(endpointGroupArn, forKey: .endpointGroupArn)
        }
        if let endpointId = endpointId {
            try encodeContainer.encode(endpointId, forKey: .endpointId)
        }
        if let protocols = protocols {
            var protocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protocols)
            for customroutingprotocols0 in protocols {
                try protocolsContainer.encode(customroutingprotocols0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acceleratorPortDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .acceleratorPort)
        acceleratorPort = acceleratorPortDecoded
        let endpointGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointGroupArn)
        endpointGroupArn = endpointGroupArnDecoded
        let endpointIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointId)
        endpointId = endpointIdDecoded
        let destinationSocketAddressDecoded = try containerValues.decodeIfPresent(SocketAddress.self, forKey: .destinationSocketAddress)
        destinationSocketAddress = destinationSocketAddressDecoded
        let protocolsContainer = try containerValues.decodeIfPresent([CustomRoutingProtocol].self, forKey: .protocols)
        var protocolsDecoded0:[CustomRoutingProtocol]? = nil
        if let protocolsContainer = protocolsContainer {
            protocolsDecoded0 = [CustomRoutingProtocol]()
            for string0 in protocolsContainer {
                protocolsDecoded0?.append(string0)
            }
        }
        protocols = protocolsDecoded0
        let destinationTrafficStateDecoded = try containerValues.decodeIfPresent(CustomRoutingDestinationTrafficState.self, forKey: .destinationTrafficState)
        destinationTrafficState = destinationTrafficStateDecoded
    }
}
