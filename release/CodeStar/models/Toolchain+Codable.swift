// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Toolchain: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case roleArn
        case source
        case stackParameters
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let stackParameters = stackParameters {
            var stackParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .stackParameters)
            for (dictKey0, templateparametermap0) in stackParameters {
                try stackParametersContainer.encode(templateparametermap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(ToolchainSource.self, forKey: .source)
        source = sourceDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stackParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .stackParameters)
        var stackParametersDecoded0: [String:String]? = nil
        if let stackParametersContainer = stackParametersContainer {
            stackParametersDecoded0 = [String:String]()
            for (key0, templateparametervalue0) in stackParametersContainer {
                stackParametersDecoded0?[key0] = templateparametervalue0
            }
        }
        stackParameters = stackParametersDecoded0
    }
}
