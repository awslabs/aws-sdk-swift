// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeProjectOutputBody: Equatable {
    public let name: String?
    public let id: String?
    public let arn: String?
    public let description: String?
    public let clientRequestToken: String?
    public let createdTimeStamp: Date?
    public let stackId: String?
    public let projectTemplateId: String?
    public let status: ProjectStatus?
}

extension DescribeProjectOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn
        case clientRequestToken
        case createdTimeStamp
        case description
        case id
        case name
        case projectTemplateId
        case stackId
        case status
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let createdTimeStampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdTimeStamp)
        createdTimeStamp = createdTimeStampDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let projectTemplateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectTemplateId)
        projectTemplateId = projectTemplateIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ProjectStatus.self, forKey: .status)
        status = statusDecoded
    }
}
