// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TeamMember: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case projectRole
        case remoteAccessAllowed
        case userArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectRole = projectRole {
            try encodeContainer.encode(projectRole, forKey: .projectRole)
        }
        if remoteAccessAllowed != false {
            try encodeContainer.encode(remoteAccessAllowed, forKey: .remoteAccessAllowed)
        }
        if let userArn = userArn {
            try encodeContainer.encode(userArn, forKey: .userArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userArn)
        userArn = userArnDecoded
        let projectRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectRole)
        projectRole = projectRoleDecoded
        let remoteAccessAllowedDecoded = try containerValues.decode(Bool.self, forKey: .remoteAccessAllowed)
        remoteAccessAllowed = remoteAccessAllowedDecoded
    }
}
