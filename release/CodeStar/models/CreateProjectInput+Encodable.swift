// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateProjectInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case description
        case id
        case name
        case sourceCode
        case tags
        case toolchain
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let sourceCode = sourceCode {
            var sourceCodeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceCode)
            for sourcecode0 in sourceCode {
                try sourceCodeContainer.encode(sourcecode0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let toolchain = toolchain {
            try encodeContainer.encode(toolchain, forKey: .toolchain)
        }
    }
}
