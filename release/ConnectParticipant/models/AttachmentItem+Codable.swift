// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AttachmentItem: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attachmentId = "AttachmentId"
        case attachmentName = "AttachmentName"
        case contentType = "ContentType"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachmentId = attachmentId {
            try encodeContainer.encode(attachmentId, forKey: .attachmentId)
        }
        if let attachmentName = attachmentName {
            try encodeContainer.encode(attachmentName, forKey: .attachmentName)
        }
        if let contentType = contentType {
            try encodeContainer.encode(contentType, forKey: .contentType)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let attachmentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attachmentId)
        attachmentId = attachmentIdDecoded
        let attachmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attachmentName)
        attachmentName = attachmentNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ArtifactStatus.self, forKey: .status)
        status = statusDecoded
    }
}
