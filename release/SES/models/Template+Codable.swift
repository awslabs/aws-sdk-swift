// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Template: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case htmlPart = "HtmlPart"
        case subjectPart = "SubjectPart"
        case templateName = "TemplateName"
        case textPart = "TextPart"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let htmlPart = htmlPart {
            try container.encode(htmlPart, forKey: Key("HtmlPart"))
        }
        if let subjectPart = subjectPart {
            try container.encode(subjectPart, forKey: Key("SubjectPart"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: Key("TemplateName"))
        }
        if let textPart = textPart {
            try container.encode(textPart, forKey: Key("TextPart"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let subjectPartDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subjectPart)
        subjectPart = subjectPartDecoded
        let textPartDecoded = try containerValues.decodeIfPresent(String.self, forKey: .textPart)
        textPart = textPartDecoded
        let htmlPartDecoded = try containerValues.decodeIfPresent(String.self, forKey: .htmlPart)
        htmlPart = htmlPartDecoded
    }
}
