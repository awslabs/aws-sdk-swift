// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListReceiptFiltersOutputBody: Equatable {
    public let filters: [ReceiptFilter]?
}

extension ListReceiptFiltersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filters = "Filters"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListReceiptFiltersResult"))
        if containerValues.contains(.filters) {
            struct KeyVal0{struct member{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([ReceiptFilter].self, forKey: .member)
                var filtersBuffer:[ReceiptFilter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [ReceiptFilter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
    }
}
