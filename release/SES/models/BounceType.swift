// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum BounceType {
    case contentrejected
    case doesnotexist
    case exceededquota
    case messagetoolarge
    case temporaryfailure
    case undefined
    case sdkUnknown(String)
}

extension BounceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BounceType] {
        return [
            .contentrejected,
            .doesnotexist,
            .exceededquota,
            .messagetoolarge,
            .temporaryfailure,
            .undefined,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .contentrejected: return "ContentRejected"
        case .doesnotexist: return "DoesNotExist"
        case .exceededquota: return "ExceededQuota"
        case .messagetoolarge: return "MessageTooLarge"
        case .temporaryfailure: return "TemporaryFailure"
        case .undefined: return "Undefined"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BounceType(rawValue: rawValue) ?? BounceType.sdkUnknown(rawValue)
    }
}
