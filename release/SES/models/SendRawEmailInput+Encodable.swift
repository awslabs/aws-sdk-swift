// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SendRawEmailInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: Key("ConfigurationSetName"))
        }
        if let destinations = destinations {
            var destinationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Destinations"))
            for (index0, address0) in destinations.enumerated() {
                try destinationsContainer.encode(address0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let fromArn = fromArn {
            try container.encode(fromArn, forKey: Key("FromArn"))
        }
        if let rawMessage = rawMessage {
            try container.encode(rawMessage, forKey: Key("RawMessage"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: Key("SourceArn"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, messagetag0) in tags.enumerated() {
                try tagsContainer.encode(messagetag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("SendRawEmail", forKey:Key("Action"))
        try container.encode("2010-12-01", forKey:Key("Version"))
    }
}
