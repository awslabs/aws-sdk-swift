// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReputationOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case lastFreshStart = "LastFreshStart"
        case reputationMetricsEnabled = "ReputationMetricsEnabled"
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let lastFreshStart = lastFreshStart {
            try container.encode(TimestampWrapper(lastFreshStart, format: .dateTime), forKey: Key("lastFreshStart"))
        }
        if reputationMetricsEnabled != false {
            try container.encode(reputationMetricsEnabled, forKey: Key("ReputationMetricsEnabled"))
        }
        if sendingEnabled != false {
            try container.encode(sendingEnabled, forKey: Key("SendingEnabled"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendingEnabledDecoded = try containerValues.decode(Bool.self, forKey: .sendingEnabled)
        sendingEnabled = sendingEnabledDecoded
        let reputationMetricsEnabledDecoded = try containerValues.decode(Bool.self, forKey: .reputationMetricsEnabled)
        reputationMetricsEnabled = reputationMetricsEnabledDecoded
        let lastFreshStartDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastFreshStart)
        var lastFreshStartBuffer:Date? = nil
        if let lastFreshStartDecoded = lastFreshStartDecoded {
            lastFreshStartBuffer = try TimestampWrapperDecoder.parseDateStringValue(lastFreshStartDecoded, format: .dateTime)
        }
        lastFreshStart = lastFreshStartBuffer
    }
}
