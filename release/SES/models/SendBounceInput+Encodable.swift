// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SendBounceInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let bounceSender = bounceSender {
            try container.encode(bounceSender, forKey: Key("BounceSender"))
        }
        if let bounceSenderArn = bounceSenderArn {
            try container.encode(bounceSenderArn, forKey: Key("BounceSenderArn"))
        }
        if let bouncedRecipientInfoList = bouncedRecipientInfoList {
            var bouncedRecipientInfoListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("BouncedRecipientInfoList"))
            for (index0, bouncedrecipientinfo0) in bouncedRecipientInfoList.enumerated() {
                try bouncedRecipientInfoListContainer.encode(bouncedrecipientinfo0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let explanation = explanation {
            try container.encode(explanation, forKey: Key("Explanation"))
        }
        if let messageDsn = messageDsn {
            try container.encode(messageDsn, forKey: Key("MessageDsn"))
        }
        if let originalMessageId = originalMessageId {
            try container.encode(originalMessageId, forKey: Key("OriginalMessageId"))
        }
        try container.encode("SendBounce", forKey:Key("Action"))
        try container.encode("2010-12-01", forKey:Key("Version"))
    }
}
