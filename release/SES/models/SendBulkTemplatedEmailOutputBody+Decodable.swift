// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SendBulkTemplatedEmailOutputBody: Equatable {
    public let status: [BulkEmailDestinationStatus]?
}

extension SendBulkTemplatedEmailOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case status = "Status"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("SendBulkTemplatedEmailResult"))
        if containerValues.contains(.status) {
            struct KeyVal0{struct member{}}
            let statusWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .status)
            if let statusWrappedContainer = statusWrappedContainer {
                let statusContainer = try statusWrappedContainer.decodeIfPresent([BulkEmailDestinationStatus].self, forKey: .member)
                var statusBuffer:[BulkEmailDestinationStatus]? = nil
                if let statusContainer = statusContainer {
                    statusBuffer = [BulkEmailDestinationStatus]()
                    for structureContainer0 in statusContainer {
                        statusBuffer?.append(structureContainer0)
                    }
                }
                status = statusBuffer
            } else {
                status = []
            }
        } else {
            status = nil
        }
    }
}
