// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LambdaAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case functionArn = "FunctionArn"
        case invocationType = "InvocationType"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let functionArn = functionArn {
            try container.encode(functionArn, forKey: Key("FunctionArn"))
        }
        if let invocationType = invocationType {
            try container.encode(invocationType, forKey: Key("InvocationType"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: Key("TopicArn"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let functionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .functionArn)
        functionArn = functionArnDecoded
        let invocationTypeDecoded = try containerValues.decodeIfPresent(InvocationType.self, forKey: .invocationType)
        invocationType = invocationTypeDecoded
    }
}
