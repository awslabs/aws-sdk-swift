// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents a request to send a single formatted email using Amazon SES. For more
///             information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-formatted.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct SendEmailInput: Equatable {
    /// <p>The name of the configuration set to use when you send an email using
    ///                 <code>SendEmail</code>.</p>
    public let configurationSetName: String?
    /// <p>The destination for this email, composed of To:, CC:, and BCC: fields.</p>
    public let destination: Destination?
    /// <p>The message to be sent.</p>
    public let message: Message?
    /// <p>The reply-to email address(es) for the message. If the recipient replies to the
    ///             message, each reply-to address will receive the reply.</p>
    public let replyToAddresses: [String]?
    /// <p>The email address that bounces and complaints will be forwarded to when feedback
    ///             forwarding is enabled. If the message cannot be delivered to the recipient, then an
    ///             error message will be returned from the recipient's ISP; this message will then be
    ///             forwarded to the email address specified by the <code>ReturnPath</code> parameter. The
    ///                 <code>ReturnPath</code> parameter is never overwritten. This email address must be
    ///             either individually verified with Amazon SES, or from a domain that has been verified with
    ///             Amazon SES. </p>
    public let returnPath: String?
    /// <p>This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to use the
    ///             email address specified in the <code>ReturnPath</code> parameter.</p>
    ///         <p>For example, if the owner of <code>example.com</code> (which has ARN
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
    ///             policy to it that authorizes you to use <code>feedback@example.com</code>, then you
    ///             would specify the <code>ReturnPathArn</code> to be
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
    ///                 <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p>
    ///         <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public let returnPathArn: String?
    /// <p>The email address that is sending the email. This email address must be either
    ///             individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
    ///             For information about verifying identities, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    ///         <p>If you are sending on behalf of another user and have been permitted to do so by a
    ///             sending authorization policy, then you must also specify the <code>SourceArn</code>
    ///             parameter. For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
    ///         <note>
    ///             <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the
    ///                     <i>local part</i> of a source email address (the part of the email
    ///                 address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII
    ///                     characters</a>. If the <i>domain part</i> of an address (the
    ///                 part after the @ sign) contains non-ASCII characters, they must be encoded using
    ///                 Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly
    ///                     name</i>) may contain non-ASCII characters. These characters must be
    ///                 encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word
    ///                 syntax uses the following form:
    ///                 <code>=?charset?encoding?encoded-text?=</code>.</p>
    ///         </note>
    public let source: String?
    /// <p>This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to send for
    ///             the email address specified in the <code>Source</code> parameter.</p>
    ///         <p>For example, if the owner of <code>example.com</code> (which has ARN
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
    ///             policy to it that authorizes you to send from <code>user@example.com</code>, then you
    ///             would specify the <code>SourceArn</code> to be
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
    ///                 <code>Source</code> to be <code>user@example.com</code>.</p>
    ///         <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public let sourceArn: String?
    /// <p>A list of tags, in the form of name/value pairs, to apply to an email that you send
    ///             using <code>SendEmail</code>. Tags correspond to characteristics of the email that you
    ///             define, so that you can publish email sending events.</p>
    public let tags: [MessageTag]?

    public init (
        configurationSetName: String? = nil,
        destination: Destination? = nil,
        message: Message? = nil,
        replyToAddresses: [String]? = nil,
        returnPath: String? = nil,
        returnPathArn: String? = nil,
        source: String? = nil,
        sourceArn: String? = nil,
        tags: [MessageTag]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.destination = destination
        self.message = message
        self.replyToAddresses = replyToAddresses
        self.returnPath = returnPath
        self.returnPathArn = returnPathArn
        self.source = source
        self.sourceArn = sourceArn
        self.tags = tags
    }
}
