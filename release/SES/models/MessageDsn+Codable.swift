// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MessageDsn: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arrivalDate = "ArrivalDate"
        case extensionFields = "ExtensionFields"
        case reportingMta = "ReportingMta"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let arrivalDate = arrivalDate {
            try container.encode(TimestampWrapper(arrivalDate, format: .dateTime), forKey: Key("arrivalDate"))
        }
        if let extensionFields = extensionFields {
            var extensionFieldsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ExtensionFields"))
            for (index0, extensionfield0) in extensionFields.enumerated() {
                try extensionFieldsContainer.encode(extensionfield0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let reportingMta = reportingMta {
            try container.encode(reportingMta, forKey: Key("ReportingMta"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportingMtaDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reportingMta)
        reportingMta = reportingMtaDecoded
        let arrivalDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arrivalDate)
        var arrivalDateBuffer:Date? = nil
        if let arrivalDateDecoded = arrivalDateDecoded {
            arrivalDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(arrivalDateDecoded, format: .dateTime)
        }
        arrivalDate = arrivalDateBuffer
        if containerValues.contains(.extensionFields) {
            struct KeyVal0{struct member{}}
            let extensionFieldsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .extensionFields)
            if let extensionFieldsWrappedContainer = extensionFieldsWrappedContainer {
                let extensionFieldsContainer = try extensionFieldsWrappedContainer.decodeIfPresent([ExtensionField].self, forKey: .member)
                var extensionFieldsBuffer:[ExtensionField]? = nil
                if let extensionFieldsContainer = extensionFieldsContainer {
                    extensionFieldsBuffer = [ExtensionField]()
                    for structureContainer0 in extensionFieldsContainer {
                        extensionFieldsBuffer?.append(structureContainer0)
                    }
                }
                extensionFields = extensionFieldsBuffer
            } else {
                extensionFields = []
            }
        } else {
            extensionFields = nil
        }
    }
}
