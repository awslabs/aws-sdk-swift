// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IdentityNotificationAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bounceTopic = "BounceTopic"
        case complaintTopic = "ComplaintTopic"
        case deliveryTopic = "DeliveryTopic"
        case forwardingEnabled = "ForwardingEnabled"
        case headersInBounceNotificationsEnabled = "HeadersInBounceNotificationsEnabled"
        case headersInComplaintNotificationsEnabled = "HeadersInComplaintNotificationsEnabled"
        case headersInDeliveryNotificationsEnabled = "HeadersInDeliveryNotificationsEnabled"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let bounceTopic = bounceTopic {
            try container.encode(bounceTopic, forKey: Key("BounceTopic"))
        }
        if let complaintTopic = complaintTopic {
            try container.encode(complaintTopic, forKey: Key("ComplaintTopic"))
        }
        if let deliveryTopic = deliveryTopic {
            try container.encode(deliveryTopic, forKey: Key("DeliveryTopic"))
        }
        if forwardingEnabled != false {
            try container.encode(forwardingEnabled, forKey: Key("ForwardingEnabled"))
        }
        if headersInBounceNotificationsEnabled != false {
            try container.encode(headersInBounceNotificationsEnabled, forKey: Key("HeadersInBounceNotificationsEnabled"))
        }
        if headersInComplaintNotificationsEnabled != false {
            try container.encode(headersInComplaintNotificationsEnabled, forKey: Key("HeadersInComplaintNotificationsEnabled"))
        }
        if headersInDeliveryNotificationsEnabled != false {
            try container.encode(headersInDeliveryNotificationsEnabled, forKey: Key("HeadersInDeliveryNotificationsEnabled"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bounceTopicDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bounceTopic)
        bounceTopic = bounceTopicDecoded
        let complaintTopicDecoded = try containerValues.decodeIfPresent(String.self, forKey: .complaintTopic)
        complaintTopic = complaintTopicDecoded
        let deliveryTopicDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deliveryTopic)
        deliveryTopic = deliveryTopicDecoded
        let forwardingEnabledDecoded = try containerValues.decode(Bool.self, forKey: .forwardingEnabled)
        forwardingEnabled = forwardingEnabledDecoded
        let headersInBounceNotificationsEnabledDecoded = try containerValues.decode(Bool.self, forKey: .headersInBounceNotificationsEnabled)
        headersInBounceNotificationsEnabled = headersInBounceNotificationsEnabledDecoded
        let headersInComplaintNotificationsEnabledDecoded = try containerValues.decode(Bool.self, forKey: .headersInComplaintNotificationsEnabled)
        headersInComplaintNotificationsEnabled = headersInComplaintNotificationsEnabledDecoded
        let headersInDeliveryNotificationsEnabledDecoded = try containerValues.decode(Bool.self, forKey: .headersInDeliveryNotificationsEnabled)
        headersInDeliveryNotificationsEnabled = headersInDeliveryNotificationsEnabledDecoded
    }
}
