// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTemplatesOutputBody: Equatable {
    public let templatesMetadata: [TemplateMetadata]?
    public let nextToken: String?
}

extension ListTemplatesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case templatesMetadata = "TemplatesMetadata"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListTemplatesResult"))
        if containerValues.contains(.templatesMetadata) {
            struct KeyVal0{struct member{}}
            let templatesMetadataWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .templatesMetadata)
            if let templatesMetadataWrappedContainer = templatesMetadataWrappedContainer {
                let templatesMetadataContainer = try templatesMetadataWrappedContainer.decodeIfPresent([TemplateMetadata].self, forKey: .member)
                var templatesMetadataBuffer:[TemplateMetadata]? = nil
                if let templatesMetadataContainer = templatesMetadataContainer {
                    templatesMetadataBuffer = [TemplateMetadata]()
                    for structureContainer0 in templatesMetadataContainer {
                        templatesMetadataBuffer?.append(structureContainer0)
                    }
                }
                templatesMetadata = templatesMetadataBuffer
            } else {
                templatesMetadata = []
            }
        } else {
            templatesMetadata = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
