// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SendDataPoint: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bounces = "Bounces"
        case complaints = "Complaints"
        case deliveryAttempts = "DeliveryAttempts"
        case rejects = "Rejects"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if bounces != 0 {
            try container.encode(bounces, forKey: Key("Bounces"))
        }
        if complaints != 0 {
            try container.encode(complaints, forKey: Key("Complaints"))
        }
        if deliveryAttempts != 0 {
            try container.encode(deliveryAttempts, forKey: Key("DeliveryAttempts"))
        }
        if rejects != 0 {
            try container.encode(rejects, forKey: Key("Rejects"))
        }
        if let timestamp = timestamp {
            try container.encode(TimestampWrapper(timestamp, format: .dateTime), forKey: Key("timestamp"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timestamp)
        var timestampBuffer:Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
        let deliveryAttemptsDecoded = try containerValues.decode(Int.self, forKey: .deliveryAttempts)
        deliveryAttempts = deliveryAttemptsDecoded
        let bouncesDecoded = try containerValues.decode(Int.self, forKey: .bounces)
        bounces = bouncesDecoded
        let complaintsDecoded = try containerValues.decode(Int.self, forKey: .complaints)
        complaints = complaintsDecoded
        let rejectsDecoded = try containerValues.decode(Int.self, forKey: .rejects)
        rejects = rejectsDecoded
    }
}
