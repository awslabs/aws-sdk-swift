// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCustomVerificationEmailTemplatesOutputBody: Equatable {
    public let customVerificationEmailTemplates: [CustomVerificationEmailTemplate]?
    public let nextToken: String?
}

extension ListCustomVerificationEmailTemplatesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case customVerificationEmailTemplates = "CustomVerificationEmailTemplates"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListCustomVerificationEmailTemplatesResult"))
        if containerValues.contains(.customVerificationEmailTemplates) {
            struct KeyVal0{struct member{}}
            let customVerificationEmailTemplatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .customVerificationEmailTemplates)
            if let customVerificationEmailTemplatesWrappedContainer = customVerificationEmailTemplatesWrappedContainer {
                let customVerificationEmailTemplatesContainer = try customVerificationEmailTemplatesWrappedContainer.decodeIfPresent([CustomVerificationEmailTemplate].self, forKey: .member)
                var customVerificationEmailTemplatesBuffer:[CustomVerificationEmailTemplate]? = nil
                if let customVerificationEmailTemplatesContainer = customVerificationEmailTemplatesContainer {
                    customVerificationEmailTemplatesBuffer = [CustomVerificationEmailTemplate]()
                    for structureContainer0 in customVerificationEmailTemplatesContainer {
                        customVerificationEmailTemplatesBuffer?.append(structureContainer0)
                    }
                }
                customVerificationEmailTemplates = customVerificationEmailTemplatesBuffer
            } else {
                customVerificationEmailTemplates = []
            }
        } else {
            customVerificationEmailTemplates = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
