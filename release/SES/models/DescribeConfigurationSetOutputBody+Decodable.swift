// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeConfigurationSetOutputBody: Equatable {
    public let configurationSet: ConfigurationSet?
    public let eventDestinations: [EventDestination]?
    public let trackingOptions: TrackingOptions?
    public let deliveryOptions: DeliveryOptions?
    public let reputationOptions: ReputationOptions?
}

extension DescribeConfigurationSetOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configurationSet = "ConfigurationSet"
        case deliveryOptions = "DeliveryOptions"
        case eventDestinations = "EventDestinations"
        case reputationOptions = "ReputationOptions"
        case trackingOptions = "TrackingOptions"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeConfigurationSetResult"))
        let configurationSetDecoded = try containerValues.decodeIfPresent(ConfigurationSet.self, forKey: .configurationSet)
        configurationSet = configurationSetDecoded
        if containerValues.contains(.eventDestinations) {
            struct KeyVal0{struct member{}}
            let eventDestinationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .eventDestinations)
            if let eventDestinationsWrappedContainer = eventDestinationsWrappedContainer {
                let eventDestinationsContainer = try eventDestinationsWrappedContainer.decodeIfPresent([EventDestination].self, forKey: .member)
                var eventDestinationsBuffer:[EventDestination]? = nil
                if let eventDestinationsContainer = eventDestinationsContainer {
                    eventDestinationsBuffer = [EventDestination]()
                    for structureContainer0 in eventDestinationsContainer {
                        eventDestinationsBuffer?.append(structureContainer0)
                    }
                }
                eventDestinations = eventDestinationsBuffer
            } else {
                eventDestinations = []
            }
        } else {
            eventDestinations = nil
        }
        let trackingOptionsDecoded = try containerValues.decodeIfPresent(TrackingOptions.self, forKey: .trackingOptions)
        trackingOptions = trackingOptionsDecoded
        let deliveryOptionsDecoded = try containerValues.decodeIfPresent(DeliveryOptions.self, forKey: .deliveryOptions)
        deliveryOptions = deliveryOptionsDecoded
        let reputationOptionsDecoded = try containerValues.decodeIfPresent(ReputationOptions.self, forKey: .reputationOptions)
        reputationOptions = reputationOptionsDecoded
    }
}
