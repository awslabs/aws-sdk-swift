// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum BulkEmailStatus {
    case accountdailyquotaexceeded
    case accountsendingpaused
    case accountsuspended
    case accountthrottled
    case configurationsetdoesnotexist
    case configurationsetsendingpaused
    case failed
    case invalidparametervalue
    case invalidsendingpoolname
    case mailfromdomainnotverified
    case messagerejected
    case success
    case templatedoesnotexist
    case transientfailure
    case sdkUnknown(String)
}

extension BulkEmailStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BulkEmailStatus] {
        return [
            .accountdailyquotaexceeded,
            .accountsendingpaused,
            .accountsuspended,
            .accountthrottled,
            .configurationsetdoesnotexist,
            .configurationsetsendingpaused,
            .failed,
            .invalidparametervalue,
            .invalidsendingpoolname,
            .mailfromdomainnotverified,
            .messagerejected,
            .success,
            .templatedoesnotexist,
            .transientfailure,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accountdailyquotaexceeded: return "AccountDailyQuotaExceeded"
        case .accountsendingpaused: return "AccountSendingPaused"
        case .accountsuspended: return "AccountSuspended"
        case .accountthrottled: return "AccountThrottled"
        case .configurationsetdoesnotexist: return "ConfigurationSetDoesNotExist"
        case .configurationsetsendingpaused: return "ConfigurationSetSendingPaused"
        case .failed: return "Failed"
        case .invalidparametervalue: return "InvalidParameterValue"
        case .invalidsendingpoolname: return "InvalidSendingPoolName"
        case .mailfromdomainnotverified: return "MailFromDomainNotVerified"
        case .messagerejected: return "MessageRejected"
        case .success: return "Success"
        case .templatedoesnotexist: return "TemplateDoesNotExist"
        case .transientfailure: return "TransientFailure"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BulkEmailStatus(rawValue: rawValue) ?? BulkEmailStatus.sdkUnknown(rawValue)
    }
}
