// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IdentityDkimAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dkimEnabled = "DkimEnabled"
        case dkimTokens = "DkimTokens"
        case dkimVerificationStatus = "DkimVerificationStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if dkimEnabled != false {
            try container.encode(dkimEnabled, forKey: Key("DkimEnabled"))
        }
        if let dkimTokens = dkimTokens {
            var dkimTokensContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("DkimTokens"))
            for (index0, verificationtoken0) in dkimTokens.enumerated() {
                try dkimTokensContainer.encode(verificationtoken0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let dkimVerificationStatus = dkimVerificationStatus {
            try container.encode(dkimVerificationStatus, forKey: Key("DkimVerificationStatus"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dkimEnabledDecoded = try containerValues.decode(Bool.self, forKey: .dkimEnabled)
        dkimEnabled = dkimEnabledDecoded
        let dkimVerificationStatusDecoded = try containerValues.decodeIfPresent(VerificationStatus.self, forKey: .dkimVerificationStatus)
        dkimVerificationStatus = dkimVerificationStatusDecoded
        if containerValues.contains(.dkimTokens) {
            struct KeyVal0{struct member{}}
            let dkimTokensWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dkimTokens)
            if let dkimTokensWrappedContainer = dkimTokensWrappedContainer {
                let dkimTokensContainer = try dkimTokensWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var dkimTokensBuffer:[String]? = nil
                if let dkimTokensContainer = dkimTokensContainer {
                    dkimTokensBuffer = [String]()
                    for stringContainer0 in dkimTokensContainer {
                        dkimTokensBuffer?.append(stringContainer0)
                    }
                }
                dkimTokens = dkimTokensBuffer
            } else {
                dkimTokens = []
            }
        } else {
            dkimTokens = nil
        }
    }
}
