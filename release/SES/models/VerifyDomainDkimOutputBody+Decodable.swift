// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct VerifyDomainDkimOutputBody: Equatable {
    public let dkimTokens: [String]?
}

extension VerifyDomainDkimOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dkimTokens = "DkimTokens"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("VerifyDomainDkimResult"))
        if containerValues.contains(.dkimTokens) {
            struct KeyVal0{struct member{}}
            let dkimTokensWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dkimTokens)
            if let dkimTokensWrappedContainer = dkimTokensWrappedContainer {
                let dkimTokensContainer = try dkimTokensWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var dkimTokensBuffer:[String]? = nil
                if let dkimTokensContainer = dkimTokensContainer {
                    dkimTokensBuffer = [String]()
                    for stringContainer0 in dkimTokensContainer {
                        dkimTokensBuffer?.append(stringContainer0)
                    }
                }
                dkimTokens = dkimTokensBuffer
            } else {
                dkimTokens = []
            }
        } else {
            dkimTokens = nil
        }
    }
}
