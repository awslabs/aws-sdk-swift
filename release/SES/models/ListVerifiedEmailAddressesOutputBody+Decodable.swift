// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListVerifiedEmailAddressesOutputBody: Equatable {
    public let verifiedEmailAddresses: [String]?
}

extension ListVerifiedEmailAddressesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case verifiedEmailAddresses = "VerifiedEmailAddresses"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListVerifiedEmailAddressesResult"))
        if containerValues.contains(.verifiedEmailAddresses) {
            struct KeyVal0{struct member{}}
            let verifiedEmailAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .verifiedEmailAddresses)
            if let verifiedEmailAddressesWrappedContainer = verifiedEmailAddressesWrappedContainer {
                let verifiedEmailAddressesContainer = try verifiedEmailAddressesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var verifiedEmailAddressesBuffer:[String]? = nil
                if let verifiedEmailAddressesContainer = verifiedEmailAddressesContainer {
                    verifiedEmailAddressesBuffer = [String]()
                    for stringContainer0 in verifiedEmailAddressesContainer {
                        verifiedEmailAddressesBuffer?.append(stringContainer0)
                    }
                }
                verifiedEmailAddresses = verifiedEmailAddressesBuffer
            } else {
                verifiedEmailAddresses = []
            }
        } else {
            verifiedEmailAddresses = nil
        }
    }
}
