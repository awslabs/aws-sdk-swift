// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes an Auto Scaling group.</p>
public struct AutoScalingGroup: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the Auto Scaling group.</p>
    public let autoScalingGroupARN: String?
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>One or more Availability Zones for the group.</p>
    public let availabilityZones: [String]?
    /// <p>Indicates whether Capacity Rebalancing is enabled.</p>
    public let capacityRebalance: Bool?
    /// <p>The date and time the group was created.</p>
    public let createdTime: Date?
    /// <p>The duration of the default cooldown period, in seconds.</p>
    public let defaultCooldown: Int?
    /// <p>The desired size of the group.</p>
    public let desiredCapacity: Int?
    /// <p>The metrics enabled for the group.</p>
    public let enabledMetrics: [EnabledMetric]?
    /// <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status
    ///             of an EC2 instance that has come into service.</p>
    public let healthCheckGracePeriod: Int?
    /// <p>The service to use for the health checks. The valid values are <code>EC2</code> and
    ///                 <code>ELB</code>. If you configure an Auto Scaling group to use <code>ELB</code> health
    ///             checks, it considers the instance unhealthy if it fails either the EC2 status checks or
    ///             the load balancer health checks.</p>
    public let healthCheckType: String?
    /// <p>The EC2 instances associated with the group.</p>
    public let instances: [Instance]?
    /// <p>The name of the associated launch configuration.</p>
    public let launchConfigurationName: String?
    /// <p>The launch template for the group.</p>
    public let launchTemplate: LaunchTemplateSpecification?
    /// <p>One or more load balancers associated with the group.</p>
    public let loadBalancerNames: [String]?
    /// <p>The maximum amount of time, in seconds, that an instance can be in service.</p>
    ///         <p>Valid Range: Minimum value of 0.</p>
    public let maxInstanceLifetime: Int?
    /// <p>The maximum size of the group.</p>
    public let maxSize: Int?
    /// <p>The minimum size of the group.</p>
    public let minSize: Int?
    /// <p>The mixed instances policy for the group.</p>
    public let mixedInstancesPolicy: MixedInstancesPolicy?
    /// <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling
    ///             when scaling in.</p>
    public let newInstancesProtectedFromScaleIn: Bool?
    /// <p>The name of the placement group into which to launch your instances, if any.</p>
    public let placementGroup: String?
    /// <p>The predicted capacity of the group when it has a predictive scaling policy.</p>
    public let predictedCapacity: Int?
    /// <p>The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to
    ///             call other Amazon Web Services on your behalf.</p>
    public let serviceLinkedRoleARN: String?
    /// <p>The current state of the group when the <a>DeleteAutoScalingGroup</a>
    ///             operation is in progress.</p>
    public let status: String?
    /// <p>The suspended processes associated with the group.</p>
    public let suspendedProcesses: [SuspendedProcess]?
    /// <p>The tags for the group.</p>
    public let tags: [TagDescription]?
    /// <p>The Amazon Resource Names (ARN) of the target groups for your load balancer.</p>
    public let targetGroupARNs: [String]?
    /// <p>The termination policies for the group.</p>
    public let terminationPolicies: [String]?
    /// <p>One or more subnet IDs, if applicable, separated by commas.</p>
    public let vPCZoneIdentifier: String?
    /// <p>The warm pool for the group.</p>
    public let warmPoolConfiguration: WarmPoolConfiguration?
    /// <p>The current size of the warm pool.</p>
    public let warmPoolSize: Int?

    public init (
        autoScalingGroupARN: String? = nil,
        autoScalingGroupName: String? = nil,
        availabilityZones: [String]? = nil,
        capacityRebalance: Bool? = nil,
        createdTime: Date? = nil,
        defaultCooldown: Int? = nil,
        desiredCapacity: Int? = nil,
        enabledMetrics: [EnabledMetric]? = nil,
        healthCheckGracePeriod: Int? = nil,
        healthCheckType: String? = nil,
        instances: [Instance]? = nil,
        launchConfigurationName: String? = nil,
        launchTemplate: LaunchTemplateSpecification? = nil,
        loadBalancerNames: [String]? = nil,
        maxInstanceLifetime: Int? = nil,
        maxSize: Int? = nil,
        minSize: Int? = nil,
        mixedInstancesPolicy: MixedInstancesPolicy? = nil,
        newInstancesProtectedFromScaleIn: Bool? = nil,
        placementGroup: String? = nil,
        predictedCapacity: Int? = nil,
        serviceLinkedRoleARN: String? = nil,
        status: String? = nil,
        suspendedProcesses: [SuspendedProcess]? = nil,
        tags: [TagDescription]? = nil,
        targetGroupARNs: [String]? = nil,
        terminationPolicies: [String]? = nil,
        vPCZoneIdentifier: String? = nil,
        warmPoolConfiguration: WarmPoolConfiguration? = nil,
        warmPoolSize: Int? = nil
    )
    {
        self.autoScalingGroupARN = autoScalingGroupARN
        self.autoScalingGroupName = autoScalingGroupName
        self.availabilityZones = availabilityZones
        self.capacityRebalance = capacityRebalance
        self.createdTime = createdTime
        self.defaultCooldown = defaultCooldown
        self.desiredCapacity = desiredCapacity
        self.enabledMetrics = enabledMetrics
        self.healthCheckGracePeriod = healthCheckGracePeriod
        self.healthCheckType = healthCheckType
        self.instances = instances
        self.launchConfigurationName = launchConfigurationName
        self.launchTemplate = launchTemplate
        self.loadBalancerNames = loadBalancerNames
        self.maxInstanceLifetime = maxInstanceLifetime
        self.maxSize = maxSize
        self.minSize = minSize
        self.mixedInstancesPolicy = mixedInstancesPolicy
        self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
        self.placementGroup = placementGroup
        self.predictedCapacity = predictedCapacity
        self.serviceLinkedRoleARN = serviceLinkedRoleARN
        self.status = status
        self.suspendedProcesses = suspendedProcesses
        self.tags = tags
        self.targetGroupARNs = targetGroupARNs
        self.terminationPolicies = terminationPolicies
        self.vPCZoneIdentifier = vPCZoneIdentifier
        self.warmPoolConfiguration = warmPoolConfiguration
        self.warmPoolSize = warmPoolSize
    }
}
