// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LaunchTemplate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case launchTemplateSpecification = "LaunchTemplateSpecification"
        case overrides = "Overrides"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let launchTemplateSpecification = launchTemplateSpecification {
            try container.encode(launchTemplateSpecification, forKey: Key("LaunchTemplateSpecification"))
        }
        if let overrides = overrides {
            var overridesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Overrides"))
            for (index0, launchtemplateoverrides0) in overrides.enumerated() {
                try overridesContainer.encode(launchtemplateoverrides0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateSpecificationDecoded = try containerValues.decodeIfPresent(LaunchTemplateSpecification.self, forKey: .launchTemplateSpecification)
        launchTemplateSpecification = launchTemplateSpecificationDecoded
        if containerValues.contains(.overrides) {
            struct KeyVal0{struct member{}}
            let overridesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .overrides)
            if let overridesWrappedContainer = overridesWrappedContainer {
                let overridesContainer = try overridesWrappedContainer.decodeIfPresent([LaunchTemplateOverrides].self, forKey: .member)
                var overridesBuffer:[LaunchTemplateOverrides]? = nil
                if let overridesContainer = overridesContainer {
                    overridesBuffer = [LaunchTemplateOverrides]()
                    for structureContainer0 in overridesContainer {
                        overridesBuffer?.append(structureContainer0)
                    }
                }
                overrides = overridesBuffer
            } else {
                overrides = []
            }
        } else {
            overrides = nil
        }
    }
}
