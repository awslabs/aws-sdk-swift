// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum LifecycleState {
    case detached
    case detaching
    case enteringStandby
    case inService
    case pending
    case pendingProceed
    case pendingWait
    case quarantined
    case standby
    case terminated
    case terminating
    case terminatingProceed
    case terminatingWait
    case warmedPending
    case warmedPendingProceed
    case warmedPendingWait
    case warmedRunning
    case warmedStopped
    case warmedTerminated
    case warmedTerminating
    case warmedTerminatingProceed
    case warmedTerminatingWait
    case sdkUnknown(String)
}

extension LifecycleState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LifecycleState] {
        return [
            .detached,
            .detaching,
            .enteringStandby,
            .inService,
            .pending,
            .pendingProceed,
            .pendingWait,
            .quarantined,
            .standby,
            .terminated,
            .terminating,
            .terminatingProceed,
            .terminatingWait,
            .warmedPending,
            .warmedPendingProceed,
            .warmedPendingWait,
            .warmedRunning,
            .warmedStopped,
            .warmedTerminated,
            .warmedTerminating,
            .warmedTerminatingProceed,
            .warmedTerminatingWait,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .detached: return "Detached"
        case .detaching: return "Detaching"
        case .enteringStandby: return "EnteringStandby"
        case .inService: return "InService"
        case .pending: return "Pending"
        case .pendingProceed: return "Pending:Proceed"
        case .pendingWait: return "Pending:Wait"
        case .quarantined: return "Quarantined"
        case .standby: return "Standby"
        case .terminated: return "Terminated"
        case .terminating: return "Terminating"
        case .terminatingProceed: return "Terminating:Proceed"
        case .terminatingWait: return "Terminating:Wait"
        case .warmedPending: return "Warmed:Pending"
        case .warmedPendingProceed: return "Warmed:Pending:Proceed"
        case .warmedPendingWait: return "Warmed:Pending:Wait"
        case .warmedRunning: return "Warmed:Running"
        case .warmedStopped: return "Warmed:Stopped"
        case .warmedTerminated: return "Warmed:Terminated"
        case .warmedTerminating: return "Warmed:Terminating"
        case .warmedTerminatingProceed: return "Warmed:Terminating:Proceed"
        case .warmedTerminatingWait: return "Warmed:Terminating:Wait"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LifecycleState(rawValue: rawValue) ?? LifecycleState.sdkUnknown(rawValue)
    }
}
