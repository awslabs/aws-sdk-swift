// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInstanceRefreshesOutputBody: Equatable {
    public let instanceRefreshes: [InstanceRefresh]?
    public let nextToken: String?
}

extension DescribeInstanceRefreshesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceRefreshes = "InstanceRefreshes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeInstanceRefreshesResult"))
        if containerValues.contains(.instanceRefreshes) {
            struct KeyVal0{struct member{}}
            let instanceRefreshesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceRefreshes)
            if let instanceRefreshesWrappedContainer = instanceRefreshesWrappedContainer {
                let instanceRefreshesContainer = try instanceRefreshesWrappedContainer.decodeIfPresent([InstanceRefresh].self, forKey: .member)
                var instanceRefreshesBuffer:[InstanceRefresh]? = nil
                if let instanceRefreshesContainer = instanceRefreshesContainer {
                    instanceRefreshesBuffer = [InstanceRefresh]()
                    for structureContainer0 in instanceRefreshesContainer {
                        instanceRefreshesBuffer?.append(structureContainer0)
                    }
                }
                instanceRefreshes = instanceRefreshesBuffer
            } else {
                instanceRefreshes = []
            }
        } else {
            instanceRefreshes = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
