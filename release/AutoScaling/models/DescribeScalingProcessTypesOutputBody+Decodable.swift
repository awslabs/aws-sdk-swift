// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeScalingProcessTypesOutputBody: Equatable {
    public let processes: [ProcessType]?
}

extension DescribeScalingProcessTypesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case processes = "Processes"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeScalingProcessTypesResult"))
        if containerValues.contains(.processes) {
            struct KeyVal0{struct member{}}
            let processesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .processes)
            if let processesWrappedContainer = processesWrappedContainer {
                let processesContainer = try processesWrappedContainer.decodeIfPresent([ProcessType].self, forKey: .member)
                var processesBuffer:[ProcessType]? = nil
                if let processesContainer = processesContainer {
                    processesBuffer = [ProcessType]()
                    for structureContainer0 in processesContainer {
                        processesBuffer?.append(structureContainer0)
                    }
                }
                processes = processesBuffer
            } else {
                processes = []
            }
        } else {
            processes = nil
        }
    }
}
