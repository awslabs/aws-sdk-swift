// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeScheduledActionsOutputBody: Equatable {
    public let scheduledUpdateGroupActions: [ScheduledUpdateGroupAction]?
    public let nextToken: String?
}

extension DescribeScheduledActionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case scheduledUpdateGroupActions = "ScheduledUpdateGroupActions"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeScheduledActionsResult"))
        if containerValues.contains(.scheduledUpdateGroupActions) {
            struct KeyVal0{struct member{}}
            let scheduledUpdateGroupActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scheduledUpdateGroupActions)
            if let scheduledUpdateGroupActionsWrappedContainer = scheduledUpdateGroupActionsWrappedContainer {
                let scheduledUpdateGroupActionsContainer = try scheduledUpdateGroupActionsWrappedContainer.decodeIfPresent([ScheduledUpdateGroupAction].self, forKey: .member)
                var scheduledUpdateGroupActionsBuffer:[ScheduledUpdateGroupAction]? = nil
                if let scheduledUpdateGroupActionsContainer = scheduledUpdateGroupActionsContainer {
                    scheduledUpdateGroupActionsBuffer = [ScheduledUpdateGroupAction]()
                    for structureContainer0 in scheduledUpdateGroupActionsContainer {
                        scheduledUpdateGroupActionsBuffer?.append(structureContainer0)
                    }
                }
                scheduledUpdateGroupActions = scheduledUpdateGroupActionsBuffer
            } else {
                scheduledUpdateGroupActions = []
            }
        } else {
            scheduledUpdateGroupActions = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
