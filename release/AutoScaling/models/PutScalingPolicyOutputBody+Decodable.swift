// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutScalingPolicyOutputBody: Equatable {
    public let policyARN: String?
    public let alarms: [Alarm]?
}

extension PutScalingPolicyOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case alarms = "Alarms"
        case policyARN = "PolicyARN"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("PutScalingPolicyResult"))
        let policyARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyARN)
        policyARN = policyARNDecoded
        if containerValues.contains(.alarms) {
            struct KeyVal0{struct member{}}
            let alarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarms)
            if let alarmsWrappedContainer = alarmsWrappedContainer {
                let alarmsContainer = try alarmsWrappedContainer.decodeIfPresent([Alarm].self, forKey: .member)
                var alarmsBuffer:[Alarm]? = nil
                if let alarmsContainer = alarmsContainer {
                    alarmsBuffer = [Alarm]()
                    for structureContainer0 in alarmsContainer {
                        alarmsBuffer?.append(structureContainer0)
                    }
                }
                alarms = alarmsBuffer
            } else {
                alarms = []
            }
        } else {
            alarms = nil
        }
    }
}
