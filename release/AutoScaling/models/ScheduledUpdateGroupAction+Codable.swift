// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ScheduledUpdateGroupAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case desiredCapacity = "DesiredCapacity"
        case endTime = "EndTime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case recurrence = "Recurrence"
        case scheduledActionARN = "ScheduledActionARN"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case time = "Time"
        case timeZone = "TimeZone"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: Key("DesiredCapacity"))
        }
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: Key("MinSize"))
        }
        if let recurrence = recurrence {
            try container.encode(recurrence, forKey: Key("Recurrence"))
        }
        if let scheduledActionARN = scheduledActionARN {
            try container.encode(scheduledActionARN, forKey: Key("ScheduledActionARN"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        if let time = time {
            try container.encode(TimestampWrapper(time, format: .dateTime), forKey: Key("time"))
        }
        if let timeZone = timeZone {
            try container.encode(timeZone, forKey: Key("TimeZone"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let scheduledActionARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduledActionARN)
        scheduledActionARN = scheduledActionARNDecoded
        let timeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .time)
        var timeBuffer:Date? = nil
        if let timeDecoded = timeDecoded {
            timeBuffer = try TimestampWrapperDecoder.parseDateStringValue(timeDecoded, format: .dateTime)
        }
        time = timeBuffer
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        var startTimeBuffer:Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endTime)
        var endTimeBuffer:Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let recurrenceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recurrence)
        recurrence = recurrenceDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
    }
}
