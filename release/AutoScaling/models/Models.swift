// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension ActiveInstanceRefreshNotFoundFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ActiveInstanceRefreshNotFoundFault(message: \(String(describing: message)))"}
}

extension ActiveInstanceRefreshNotFoundFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ActiveInstanceRefreshNotFoundFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request failed because an active instance refresh for the specified Auto Scaling group was
///             not found. </p>
public struct ActiveInstanceRefreshNotFoundFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ActiveInstanceRefreshNotFoundFaultBody: Equatable {
    public let message: String?
}

extension ActiveInstanceRefreshNotFoundFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Activity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityId = "ActivityId"
        case autoScalingGroupARN = "AutoScalingGroupARN"
        case autoScalingGroupName = "AutoScalingGroupName"
        case autoScalingGroupState = "AutoScalingGroupState"
        case cause = "Cause"
        case description = "Description"
        case details = "Details"
        case endTime = "EndTime"
        case progress = "Progress"
        case startTime = "StartTime"
        case statusCode = "StatusCode"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let activityId = activityId {
            try container.encode(activityId, forKey: Key("ActivityId"))
        }
        if let autoScalingGroupARN = autoScalingGroupARN {
            try container.encode(autoScalingGroupARN, forKey: Key("AutoScalingGroupARN"))
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let autoScalingGroupState = autoScalingGroupState {
            try container.encode(autoScalingGroupState, forKey: Key("AutoScalingGroupState"))
        }
        if let cause = cause {
            try container.encode(cause, forKey: Key("Cause"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let details = details {
            try container.encode(details, forKey: Key("Details"))
        }
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if progress != 0 {
            try container.encode(progress, forKey: Key("Progress"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        if let statusCode = statusCode {
            try container.encode(statusCode, forKey: Key("StatusCode"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: Key("StatusMessage"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let causeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cause)
        cause = causeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        var startTimeBuffer:Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endTime)
        var endTimeBuffer:Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let statusCodeDecoded = try containerValues.decodeIfPresent(ScalingActivityStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let progressDecoded = try containerValues.decode(Int.self, forKey: .progress)
        progress = progressDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
        let autoScalingGroupStateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupState)
        autoScalingGroupState = autoScalingGroupStateDecoded
        let autoScalingGroupARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupARN)
        autoScalingGroupARN = autoScalingGroupARNDecoded
    }
}

extension Activity: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Activity(activityId: \(String(describing: activityId)), autoScalingGroupARN: \(String(describing: autoScalingGroupARN)), autoScalingGroupName: \(String(describing: autoScalingGroupName)), autoScalingGroupState: \(String(describing: autoScalingGroupState)), cause: \(String(describing: cause)), description: \(String(describing: description)), details: \(String(describing: details)), endTime: \(String(describing: endTime)), progress: \(String(describing: progress)), startTime: \(String(describing: startTime)), statusCode: \(String(describing: statusCode)), statusMessage: \(String(describing: statusMessage)))"}
}

/// <p>Describes scaling activity, which is a long-running process that represents a change
///             to your Auto Scaling group, such as changing its size or replacing an instance.</p>
public struct Activity: Equatable {
    /// <p>The ID of the activity.</p>
    public let activityId: String?
    /// <p>The Amazon Resource Name (ARN) of the Auto Scaling group.</p>
    public let autoScalingGroupARN: String?
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The state of the Auto Scaling group, which is either <code>InService</code> or
    ///                 <code>Deleted</code>.</p>
    public let autoScalingGroupState: String?
    /// <p>The reason the activity began.</p>
    public let cause: String?
    /// <p>A friendly, more verbose description of the activity.</p>
    public let description: String?
    /// <p>The details about the activity.</p>
    public let details: String?
    /// <p>The end time of the activity.</p>
    public let endTime: Date?
    /// <p>A value between 0 and 100 that indicates the progress of the activity.</p>
    public let progress: Int
    /// <p>The start time of the activity.</p>
    public let startTime: Date?
    /// <p>The current status of the activity.</p>
    public let statusCode: ScalingActivityStatusCode?
    /// <p>A friendly, more verbose description of the activity status.</p>
    public let statusMessage: String?

    public init (
        activityId: String? = nil,
        autoScalingGroupARN: String? = nil,
        autoScalingGroupName: String? = nil,
        autoScalingGroupState: String? = nil,
        cause: String? = nil,
        description: String? = nil,
        details: String? = nil,
        endTime: Date? = nil,
        progress: Int = 0,
        startTime: Date? = nil,
        statusCode: ScalingActivityStatusCode? = nil,
        statusMessage: String? = nil
    )
    {
        self.activityId = activityId
        self.autoScalingGroupARN = autoScalingGroupARN
        self.autoScalingGroupName = autoScalingGroupName
        self.autoScalingGroupState = autoScalingGroupState
        self.cause = cause
        self.description = description
        self.details = details
        self.endTime = endTime
        self.progress = progress
        self.startTime = startTime
        self.statusCode = statusCode
        self.statusMessage = statusMessage
    }
}

extension AdjustmentType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adjustmentType = "AdjustmentType"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let adjustmentType = adjustmentType {
            try container.encode(adjustmentType, forKey: Key("AdjustmentType"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adjustmentTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .adjustmentType)
        adjustmentType = adjustmentTypeDecoded
    }
}

extension AdjustmentType: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AdjustmentType(adjustmentType: \(String(describing: adjustmentType)))"}
}

/// <p>Describes a policy adjustment type.</p>
public struct AdjustmentType: Equatable {
    /// <p>The policy adjustment type. The valid values are <code>ChangeInCapacity</code>,
    ///                 <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p>
    public let adjustmentType: String?

    public init (
        adjustmentType: String? = nil
    )
    {
        self.adjustmentType = adjustmentType
    }
}

extension Alarm: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarmARN = "AlarmARN"
        case alarmName = "AlarmName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let alarmARN = alarmARN {
            try container.encode(alarmARN, forKey: Key("AlarmARN"))
        }
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: Key("AlarmName"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let alarmARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .alarmARN)
        alarmARN = alarmARNDecoded
    }
}

extension Alarm: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Alarm(alarmARN: \(String(describing: alarmARN)), alarmName: \(String(describing: alarmName)))"}
}

/// <p>Describes an alarm.</p>
public struct Alarm: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the alarm.</p>
    public let alarmARN: String?
    /// <p>The name of the alarm.</p>
    public let alarmName: String?

    public init (
        alarmARN: String? = nil,
        alarmName: String? = nil
    )
    {
        self.alarmARN = alarmARN
        self.alarmName = alarmName
    }
}

extension AlreadyExistsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AlreadyExistsFault(message: \(String(describing: message)))"}
}

extension AlreadyExistsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<AlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You already have an Auto Scaling group or launch configuration with this name.</p>
public struct AlreadyExistsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p></p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct AlreadyExistsFaultBody: Equatable {
    public let message: String?
}

extension AlreadyExistsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct AttachInstancesInputBodyMiddleware: Middleware {
    public let id: String = "AttachInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AttachInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<AttachInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AttachInstancesInput>
    public typealias MOutput = OperationOutput<AttachInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AttachInstancesOutputError>
}

extension AttachInstancesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AttachInstancesInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), instanceIds: \(String(describing: instanceIds)))"}
}

extension AttachInstancesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("InstanceIds"))
            for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("AttachInstances", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct AttachInstancesInputHeadersMiddleware: Middleware {
    public let id: String = "AttachInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AttachInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<AttachInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AttachInstancesInput>
    public typealias MOutput = OperationOutput<AttachInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AttachInstancesOutputError>
}

public struct AttachInstancesInputQueryItemMiddleware: Middleware {
    public let id: String = "AttachInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AttachInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<AttachInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AttachInstancesInput>
    public typealias MOutput = OperationOutput<AttachInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AttachInstancesOutputError>
}

public struct AttachInstancesInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The IDs of the instances. You can specify up to 20 instances.</p>
    public let instanceIds: [String]?

    public init (
        autoScalingGroupName: String? = nil,
        instanceIds: [String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
    }
}

extension AttachInstancesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AttachInstancesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachInstancesOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachInstancesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AttachInstancesOutputResponse()"}
}

extension AttachInstancesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct AttachInstancesOutputResponse: Equatable {

    public init() {}
}

struct AttachInstancesOutputResponseBody: Equatable {
}

extension AttachInstancesOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct AttachLoadBalancerTargetGroupsInputBodyMiddleware: Middleware {
    public let id: String = "AttachLoadBalancerTargetGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AttachLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<AttachLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AttachLoadBalancerTargetGroupsInput>
    public typealias MOutput = OperationOutput<AttachLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AttachLoadBalancerTargetGroupsOutputError>
}

extension AttachLoadBalancerTargetGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AttachLoadBalancerTargetGroupsInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), targetGroupARNs: \(String(describing: targetGroupARNs)))"}
}

extension AttachLoadBalancerTargetGroupsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let targetGroupARNs = targetGroupARNs {
            var targetGroupARNsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("TargetGroupARNs"))
            for (index0, xmlstringmaxlen5110) in targetGroupARNs.enumerated() {
                try targetGroupARNsContainer.encode(xmlstringmaxlen5110, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("AttachLoadBalancerTargetGroups", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct AttachLoadBalancerTargetGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "AttachLoadBalancerTargetGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AttachLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<AttachLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AttachLoadBalancerTargetGroupsInput>
    public typealias MOutput = OperationOutput<AttachLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AttachLoadBalancerTargetGroupsOutputError>
}

public struct AttachLoadBalancerTargetGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "AttachLoadBalancerTargetGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AttachLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<AttachLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AttachLoadBalancerTargetGroupsInput>
    public typealias MOutput = OperationOutput<AttachLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AttachLoadBalancerTargetGroupsOutputError>
}

public struct AttachLoadBalancerTargetGroupsInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target
    ///             groups. To get the ARN of a target group, use the Elastic Load Balancing <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html">DescribeTargetGroups</a> API operation.</p>
    public let targetGroupARNs: [String]?

    public init (
        autoScalingGroupName: String? = nil,
        targetGroupARNs: [String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.targetGroupARNs = targetGroupARNs
    }
}

extension AttachLoadBalancerTargetGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AttachLoadBalancerTargetGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachLoadBalancerTargetGroupsOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachLoadBalancerTargetGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AttachLoadBalancerTargetGroupsOutputResponse()"}
}

extension AttachLoadBalancerTargetGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct AttachLoadBalancerTargetGroupsOutputResponse: Equatable {

    public init() {}
}

struct AttachLoadBalancerTargetGroupsOutputResponseBody: Equatable {
}

extension AttachLoadBalancerTargetGroupsOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct AttachLoadBalancersInputBodyMiddleware: Middleware {
    public let id: String = "AttachLoadBalancersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AttachLoadBalancersInput>,
                  next: H) -> Swift.Result<OperationOutput<AttachLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AttachLoadBalancersInput>
    public typealias MOutput = OperationOutput<AttachLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AttachLoadBalancersOutputError>
}

extension AttachLoadBalancersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AttachLoadBalancersInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), loadBalancerNames: \(String(describing: loadBalancerNames)))"}
}

extension AttachLoadBalancersInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let loadBalancerNames = loadBalancerNames {
            var loadBalancerNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LoadBalancerNames"))
            for (index0, xmlstringmaxlen2550) in loadBalancerNames.enumerated() {
                try loadBalancerNamesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("AttachLoadBalancers", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct AttachLoadBalancersInputHeadersMiddleware: Middleware {
    public let id: String = "AttachLoadBalancersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AttachLoadBalancersInput>,
                  next: H) -> Swift.Result<OperationOutput<AttachLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AttachLoadBalancersInput>
    public typealias MOutput = OperationOutput<AttachLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AttachLoadBalancersOutputError>
}

public struct AttachLoadBalancersInputQueryItemMiddleware: Middleware {
    public let id: String = "AttachLoadBalancersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AttachLoadBalancersInput>,
                  next: H) -> Swift.Result<OperationOutput<AttachLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AttachLoadBalancersInput>
    public typealias MOutput = OperationOutput<AttachLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AttachLoadBalancersOutputError>
}

public struct AttachLoadBalancersInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The names of the load balancers. You can specify up to 10 load balancers.</p>
    public let loadBalancerNames: [String]?

    public init (
        autoScalingGroupName: String? = nil,
        loadBalancerNames: [String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.loadBalancerNames = loadBalancerNames
    }
}

extension AttachLoadBalancersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AttachLoadBalancersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachLoadBalancersOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachLoadBalancersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AttachLoadBalancersOutputResponse()"}
}

extension AttachLoadBalancersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct AttachLoadBalancersOutputResponse: Equatable {

    public init() {}
}

struct AttachLoadBalancersOutputResponseBody: Equatable {
}

extension AttachLoadBalancersOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension AutoScalingGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingGroupARN = "AutoScalingGroupARN"
        case autoScalingGroupName = "AutoScalingGroupName"
        case availabilityZones = "AvailabilityZones"
        case capacityRebalance = "CapacityRebalance"
        case createdTime = "CreatedTime"
        case defaultCooldown = "DefaultCooldown"
        case desiredCapacity = "DesiredCapacity"
        case enabledMetrics = "EnabledMetrics"
        case healthCheckGracePeriod = "HealthCheckGracePeriod"
        case healthCheckType = "HealthCheckType"
        case instances = "Instances"
        case launchConfigurationName = "LaunchConfigurationName"
        case launchTemplate = "LaunchTemplate"
        case loadBalancerNames = "LoadBalancerNames"
        case maxInstanceLifetime = "MaxInstanceLifetime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case mixedInstancesPolicy = "MixedInstancesPolicy"
        case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
        case placementGroup = "PlacementGroup"
        case predictedCapacity = "PredictedCapacity"
        case serviceLinkedRoleARN = "ServiceLinkedRoleARN"
        case status = "Status"
        case suspendedProcesses = "SuspendedProcesses"
        case tags = "Tags"
        case targetGroupARNs = "TargetGroupARNs"
        case terminationPolicies = "TerminationPolicies"
        case vPCZoneIdentifier = "VPCZoneIdentifier"
        case warmPoolConfiguration = "WarmPoolConfiguration"
        case warmPoolSize = "WarmPoolSize"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupARN = autoScalingGroupARN {
            try container.encode(autoScalingGroupARN, forKey: Key("AutoScalingGroupARN"))
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AvailabilityZones"))
            for (index0, xmlstringmaxlen2550) in availabilityZones.enumerated() {
                try availabilityZonesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let capacityRebalance = capacityRebalance {
            try container.encode(capacityRebalance, forKey: Key("CapacityRebalance"))
        }
        if let createdTime = createdTime {
            try container.encode(TimestampWrapper(createdTime, format: .dateTime), forKey: Key("createdTime"))
        }
        if let defaultCooldown = defaultCooldown {
            try container.encode(defaultCooldown, forKey: Key("DefaultCooldown"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: Key("DesiredCapacity"))
        }
        if let enabledMetrics = enabledMetrics {
            var enabledMetricsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("EnabledMetrics"))
            for (index0, enabledmetric0) in enabledMetrics.enumerated() {
                try enabledMetricsContainer.encode(enabledmetric0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let healthCheckGracePeriod = healthCheckGracePeriod {
            try container.encode(healthCheckGracePeriod, forKey: Key("HealthCheckGracePeriod"))
        }
        if let healthCheckType = healthCheckType {
            try container.encode(healthCheckType, forKey: Key("HealthCheckType"))
        }
        if let instances = instances {
            var instancesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Instances"))
            for (index0, instance0) in instances.enumerated() {
                try instancesContainer.encode(instance0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: Key("LaunchTemplate"))
        }
        if let loadBalancerNames = loadBalancerNames {
            var loadBalancerNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LoadBalancerNames"))
            for (index0, xmlstringmaxlen2550) in loadBalancerNames.enumerated() {
                try loadBalancerNamesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxInstanceLifetime = maxInstanceLifetime {
            try container.encode(maxInstanceLifetime, forKey: Key("MaxInstanceLifetime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: Key("MinSize"))
        }
        if let mixedInstancesPolicy = mixedInstancesPolicy {
            try container.encode(mixedInstancesPolicy, forKey: Key("MixedInstancesPolicy"))
        }
        if let newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn {
            try container.encode(newInstancesProtectedFromScaleIn, forKey: Key("NewInstancesProtectedFromScaleIn"))
        }
        if let placementGroup = placementGroup {
            try container.encode(placementGroup, forKey: Key("PlacementGroup"))
        }
        if let predictedCapacity = predictedCapacity {
            try container.encode(predictedCapacity, forKey: Key("PredictedCapacity"))
        }
        if let serviceLinkedRoleARN = serviceLinkedRoleARN {
            try container.encode(serviceLinkedRoleARN, forKey: Key("ServiceLinkedRoleARN"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let suspendedProcesses = suspendedProcesses {
            var suspendedProcessesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SuspendedProcesses"))
            for (index0, suspendedprocess0) in suspendedProcesses.enumerated() {
                try suspendedProcessesContainer.encode(suspendedprocess0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tagdescription0) in tags.enumerated() {
                try tagsContainer.encode(tagdescription0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let targetGroupARNs = targetGroupARNs {
            var targetGroupARNsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("TargetGroupARNs"))
            for (index0, xmlstringmaxlen5110) in targetGroupARNs.enumerated() {
                try targetGroupARNsContainer.encode(xmlstringmaxlen5110, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let terminationPolicies = terminationPolicies {
            var terminationPoliciesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("TerminationPolicies"))
            for (index0, xmlstringmaxlen16000) in terminationPolicies.enumerated() {
                try terminationPoliciesContainer.encode(xmlstringmaxlen16000, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let vPCZoneIdentifier = vPCZoneIdentifier {
            try container.encode(vPCZoneIdentifier, forKey: Key("VPCZoneIdentifier"))
        }
        if let warmPoolConfiguration = warmPoolConfiguration {
            try container.encode(warmPoolConfiguration, forKey: Key("WarmPoolConfiguration"))
        }
        if let warmPoolSize = warmPoolSize {
            try container.encode(warmPoolSize, forKey: Key("WarmPoolSize"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let autoScalingGroupARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupARN)
        autoScalingGroupARN = autoScalingGroupARNDecoded
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let mixedInstancesPolicyDecoded = try containerValues.decodeIfPresent(MixedInstancesPolicy.self, forKey: .mixedInstancesPolicy)
        mixedInstancesPolicy = mixedInstancesPolicyDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let predictedCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .predictedCapacity)
        predictedCapacity = predictedCapacityDecoded
        let defaultCooldownDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .defaultCooldown)
        defaultCooldown = defaultCooldownDecoded
        if containerValues.contains(.availabilityZones) {
            struct KeyVal0{struct member{}}
            let availabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .availabilityZones)
            if let availabilityZonesWrappedContainer = availabilityZonesWrappedContainer {
                let availabilityZonesContainer = try availabilityZonesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var availabilityZonesBuffer:[String]? = nil
                if let availabilityZonesContainer = availabilityZonesContainer {
                    availabilityZonesBuffer = [String]()
                    for stringContainer0 in availabilityZonesContainer {
                        availabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                availabilityZones = availabilityZonesBuffer
            } else {
                availabilityZones = []
            }
        } else {
            availabilityZones = nil
        }
        if containerValues.contains(.loadBalancerNames) {
            struct KeyVal0{struct member{}}
            let loadBalancerNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerNames)
            if let loadBalancerNamesWrappedContainer = loadBalancerNamesWrappedContainer {
                let loadBalancerNamesContainer = try loadBalancerNamesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var loadBalancerNamesBuffer:[String]? = nil
                if let loadBalancerNamesContainer = loadBalancerNamesContainer {
                    loadBalancerNamesBuffer = [String]()
                    for stringContainer0 in loadBalancerNamesContainer {
                        loadBalancerNamesBuffer?.append(stringContainer0)
                    }
                }
                loadBalancerNames = loadBalancerNamesBuffer
            } else {
                loadBalancerNames = []
            }
        } else {
            loadBalancerNames = nil
        }
        if containerValues.contains(.targetGroupARNs) {
            struct KeyVal0{struct member{}}
            let targetGroupARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .targetGroupARNs)
            if let targetGroupARNsWrappedContainer = targetGroupARNsWrappedContainer {
                let targetGroupARNsContainer = try targetGroupARNsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var targetGroupARNsBuffer:[String]? = nil
                if let targetGroupARNsContainer = targetGroupARNsContainer {
                    targetGroupARNsBuffer = [String]()
                    for stringContainer0 in targetGroupARNsContainer {
                        targetGroupARNsBuffer?.append(stringContainer0)
                    }
                }
                targetGroupARNs = targetGroupARNsBuffer
            } else {
                targetGroupARNs = []
            }
        } else {
            targetGroupARNs = nil
        }
        let healthCheckTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .healthCheckType)
        healthCheckType = healthCheckTypeDecoded
        let healthCheckGracePeriodDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .healthCheckGracePeriod)
        healthCheckGracePeriod = healthCheckGracePeriodDecoded
        if containerValues.contains(.instances) {
            struct KeyVal0{struct member{}}
            let instancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instances)
            if let instancesWrappedContainer = instancesWrappedContainer {
                let instancesContainer = try instancesWrappedContainer.decodeIfPresent([Instance].self, forKey: .member)
                var instancesBuffer:[Instance]? = nil
                if let instancesContainer = instancesContainer {
                    instancesBuffer = [Instance]()
                    for structureContainer0 in instancesContainer {
                        instancesBuffer?.append(structureContainer0)
                    }
                }
                instances = instancesBuffer
            } else {
                instances = []
            }
        } else {
            instances = nil
        }
        let createdTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdTime)
        var createdTimeBuffer:Date? = nil
        if let createdTimeDecoded = createdTimeDecoded {
            createdTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(createdTimeDecoded, format: .dateTime)
        }
        createdTime = createdTimeBuffer
        if containerValues.contains(.suspendedProcesses) {
            struct KeyVal0{struct member{}}
            let suspendedProcessesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .suspendedProcesses)
            if let suspendedProcessesWrappedContainer = suspendedProcessesWrappedContainer {
                let suspendedProcessesContainer = try suspendedProcessesWrappedContainer.decodeIfPresent([SuspendedProcess].self, forKey: .member)
                var suspendedProcessesBuffer:[SuspendedProcess]? = nil
                if let suspendedProcessesContainer = suspendedProcessesContainer {
                    suspendedProcessesBuffer = [SuspendedProcess]()
                    for structureContainer0 in suspendedProcessesContainer {
                        suspendedProcessesBuffer?.append(structureContainer0)
                    }
                }
                suspendedProcesses = suspendedProcessesBuffer
            } else {
                suspendedProcesses = []
            }
        } else {
            suspendedProcesses = nil
        }
        let placementGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .placementGroup)
        placementGroup = placementGroupDecoded
        let vPCZoneIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vPCZoneIdentifier)
        vPCZoneIdentifier = vPCZoneIdentifierDecoded
        if containerValues.contains(.enabledMetrics) {
            struct KeyVal0{struct member{}}
            let enabledMetricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .enabledMetrics)
            if let enabledMetricsWrappedContainer = enabledMetricsWrappedContainer {
                let enabledMetricsContainer = try enabledMetricsWrappedContainer.decodeIfPresent([EnabledMetric].self, forKey: .member)
                var enabledMetricsBuffer:[EnabledMetric]? = nil
                if let enabledMetricsContainer = enabledMetricsContainer {
                    enabledMetricsBuffer = [EnabledMetric]()
                    for structureContainer0 in enabledMetricsContainer {
                        enabledMetricsBuffer?.append(structureContainer0)
                    }
                }
                enabledMetrics = enabledMetricsBuffer
            } else {
                enabledMetrics = []
            }
        } else {
            enabledMetrics = nil
        }
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([TagDescription].self, forKey: .member)
                var tagsBuffer:[TagDescription]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [TagDescription]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.terminationPolicies) {
            struct KeyVal0{struct member{}}
            let terminationPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .terminationPolicies)
            if let terminationPoliciesWrappedContainer = terminationPoliciesWrappedContainer {
                let terminationPoliciesContainer = try terminationPoliciesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var terminationPoliciesBuffer:[String]? = nil
                if let terminationPoliciesContainer = terminationPoliciesContainer {
                    terminationPoliciesBuffer = [String]()
                    for stringContainer0 in terminationPoliciesContainer {
                        terminationPoliciesBuffer?.append(stringContainer0)
                    }
                }
                terminationPolicies = terminationPoliciesBuffer
            } else {
                terminationPolicies = []
            }
        } else {
            terminationPolicies = nil
        }
        let newInstancesProtectedFromScaleInDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .newInstancesProtectedFromScaleIn)
        newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleInDecoded
        let serviceLinkedRoleARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceLinkedRoleARN)
        serviceLinkedRoleARN = serviceLinkedRoleARNDecoded
        let maxInstanceLifetimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxInstanceLifetime)
        maxInstanceLifetime = maxInstanceLifetimeDecoded
        let capacityRebalanceDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .capacityRebalance)
        capacityRebalance = capacityRebalanceDecoded
        let warmPoolConfigurationDecoded = try containerValues.decodeIfPresent(WarmPoolConfiguration.self, forKey: .warmPoolConfiguration)
        warmPoolConfiguration = warmPoolConfigurationDecoded
        let warmPoolSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .warmPoolSize)
        warmPoolSize = warmPoolSizeDecoded
    }
}

extension AutoScalingGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoScalingGroup(autoScalingGroupARN: \(String(describing: autoScalingGroupARN)), autoScalingGroupName: \(String(describing: autoScalingGroupName)), availabilityZones: \(String(describing: availabilityZones)), capacityRebalance: \(String(describing: capacityRebalance)), createdTime: \(String(describing: createdTime)), defaultCooldown: \(String(describing: defaultCooldown)), desiredCapacity: \(String(describing: desiredCapacity)), enabledMetrics: \(String(describing: enabledMetrics)), healthCheckGracePeriod: \(String(describing: healthCheckGracePeriod)), healthCheckType: \(String(describing: healthCheckType)), instances: \(String(describing: instances)), launchConfigurationName: \(String(describing: launchConfigurationName)), launchTemplate: \(String(describing: launchTemplate)), loadBalancerNames: \(String(describing: loadBalancerNames)), maxInstanceLifetime: \(String(describing: maxInstanceLifetime)), maxSize: \(String(describing: maxSize)), minSize: \(String(describing: minSize)), mixedInstancesPolicy: \(String(describing: mixedInstancesPolicy)), newInstancesProtectedFromScaleIn: \(String(describing: newInstancesProtectedFromScaleIn)), placementGroup: \(String(describing: placementGroup)), predictedCapacity: \(String(describing: predictedCapacity)), serviceLinkedRoleARN: \(String(describing: serviceLinkedRoleARN)), status: \(String(describing: status)), suspendedProcesses: \(String(describing: suspendedProcesses)), tags: \(String(describing: tags)), targetGroupARNs: \(String(describing: targetGroupARNs)), terminationPolicies: \(String(describing: terminationPolicies)), vPCZoneIdentifier: \(String(describing: vPCZoneIdentifier)), warmPoolConfiguration: \(String(describing: warmPoolConfiguration)), warmPoolSize: \(String(describing: warmPoolSize)))"}
}

/// <p>Describes an Auto Scaling group.</p>
public struct AutoScalingGroup: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the Auto Scaling group.</p>
    public let autoScalingGroupARN: String?
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>One or more Availability Zones for the group.</p>
    public let availabilityZones: [String]?
    /// <p>Indicates whether Capacity Rebalancing is enabled.</p>
    public let capacityRebalance: Bool?
    /// <p>The date and time the group was created.</p>
    public let createdTime: Date?
    /// <p>The duration of the default cooldown period, in seconds.</p>
    public let defaultCooldown: Int?
    /// <p>The desired size of the group.</p>
    public let desiredCapacity: Int?
    /// <p>The metrics enabled for the group.</p>
    public let enabledMetrics: [EnabledMetric]?
    /// <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status
    ///             of an EC2 instance that has come into service.</p>
    public let healthCheckGracePeriod: Int?
    /// <p>The service to use for the health checks. The valid values are <code>EC2</code> and
    ///                 <code>ELB</code>. If you configure an Auto Scaling group to use <code>ELB</code> health
    ///             checks, it considers the instance unhealthy if it fails either the EC2 status checks or
    ///             the load balancer health checks.</p>
    public let healthCheckType: String?
    /// <p>The EC2 instances associated with the group.</p>
    public let instances: [Instance]?
    /// <p>The name of the associated launch configuration.</p>
    public let launchConfigurationName: String?
    /// <p>The launch template for the group.</p>
    public let launchTemplate: LaunchTemplateSpecification?
    /// <p>One or more load balancers associated with the group.</p>
    public let loadBalancerNames: [String]?
    /// <p>The maximum amount of time, in seconds, that an instance can be in service.</p>
    ///         <p>Valid Range: Minimum value of 0.</p>
    public let maxInstanceLifetime: Int?
    /// <p>The maximum size of the group.</p>
    public let maxSize: Int?
    /// <p>The minimum size of the group.</p>
    public let minSize: Int?
    /// <p>The mixed instances policy for the group.</p>
    public let mixedInstancesPolicy: MixedInstancesPolicy?
    /// <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling
    ///             when scaling in.</p>
    public let newInstancesProtectedFromScaleIn: Bool?
    /// <p>The name of the placement group into which to launch your instances, if any.</p>
    public let placementGroup: String?
    /// <p>The predicted capacity of the group when it has a predictive scaling policy.</p>
    public let predictedCapacity: Int?
    /// <p>The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to
    ///             call other Amazon Web Services on your behalf.</p>
    public let serviceLinkedRoleARN: String?
    /// <p>The current state of the group when the <a>DeleteAutoScalingGroup</a>
    ///             operation is in progress.</p>
    public let status: String?
    /// <p>The suspended processes associated with the group.</p>
    public let suspendedProcesses: [SuspendedProcess]?
    /// <p>The tags for the group.</p>
    public let tags: [TagDescription]?
    /// <p>The Amazon Resource Names (ARN) of the target groups for your load balancer.</p>
    public let targetGroupARNs: [String]?
    /// <p>The termination policies for the group.</p>
    public let terminationPolicies: [String]?
    /// <p>One or more subnet IDs, if applicable, separated by commas.</p>
    public let vPCZoneIdentifier: String?
    /// <p>The warm pool for the group.</p>
    public let warmPoolConfiguration: WarmPoolConfiguration?
    /// <p>The current size of the warm pool.</p>
    public let warmPoolSize: Int?

    public init (
        autoScalingGroupARN: String? = nil,
        autoScalingGroupName: String? = nil,
        availabilityZones: [String]? = nil,
        capacityRebalance: Bool? = nil,
        createdTime: Date? = nil,
        defaultCooldown: Int? = nil,
        desiredCapacity: Int? = nil,
        enabledMetrics: [EnabledMetric]? = nil,
        healthCheckGracePeriod: Int? = nil,
        healthCheckType: String? = nil,
        instances: [Instance]? = nil,
        launchConfigurationName: String? = nil,
        launchTemplate: LaunchTemplateSpecification? = nil,
        loadBalancerNames: [String]? = nil,
        maxInstanceLifetime: Int? = nil,
        maxSize: Int? = nil,
        minSize: Int? = nil,
        mixedInstancesPolicy: MixedInstancesPolicy? = nil,
        newInstancesProtectedFromScaleIn: Bool? = nil,
        placementGroup: String? = nil,
        predictedCapacity: Int? = nil,
        serviceLinkedRoleARN: String? = nil,
        status: String? = nil,
        suspendedProcesses: [SuspendedProcess]? = nil,
        tags: [TagDescription]? = nil,
        targetGroupARNs: [String]? = nil,
        terminationPolicies: [String]? = nil,
        vPCZoneIdentifier: String? = nil,
        warmPoolConfiguration: WarmPoolConfiguration? = nil,
        warmPoolSize: Int? = nil
    )
    {
        self.autoScalingGroupARN = autoScalingGroupARN
        self.autoScalingGroupName = autoScalingGroupName
        self.availabilityZones = availabilityZones
        self.capacityRebalance = capacityRebalance
        self.createdTime = createdTime
        self.defaultCooldown = defaultCooldown
        self.desiredCapacity = desiredCapacity
        self.enabledMetrics = enabledMetrics
        self.healthCheckGracePeriod = healthCheckGracePeriod
        self.healthCheckType = healthCheckType
        self.instances = instances
        self.launchConfigurationName = launchConfigurationName
        self.launchTemplate = launchTemplate
        self.loadBalancerNames = loadBalancerNames
        self.maxInstanceLifetime = maxInstanceLifetime
        self.maxSize = maxSize
        self.minSize = minSize
        self.mixedInstancesPolicy = mixedInstancesPolicy
        self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
        self.placementGroup = placementGroup
        self.predictedCapacity = predictedCapacity
        self.serviceLinkedRoleARN = serviceLinkedRoleARN
        self.status = status
        self.suspendedProcesses = suspendedProcesses
        self.tags = tags
        self.targetGroupARNs = targetGroupARNs
        self.terminationPolicies = terminationPolicies
        self.vPCZoneIdentifier = vPCZoneIdentifier
        self.warmPoolConfiguration = warmPoolConfiguration
        self.warmPoolSize = warmPoolSize
    }
}

extension AutoScalingInstanceDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case availabilityZone = "AvailabilityZone"
        case healthStatus = "HealthStatus"
        case instanceId = "InstanceId"
        case instanceType = "InstanceType"
        case launchConfigurationName = "LaunchConfigurationName"
        case launchTemplate = "LaunchTemplate"
        case lifecycleState = "LifecycleState"
        case protectedFromScaleIn = "ProtectedFromScaleIn"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: Key("AvailabilityZone"))
        }
        if let healthStatus = healthStatus {
            try container.encode(healthStatus, forKey: Key("HealthStatus"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: Key("InstanceType"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: Key("LaunchTemplate"))
        }
        if let lifecycleState = lifecycleState {
            try container.encode(lifecycleState, forKey: Key("LifecycleState"))
        }
        if let protectedFromScaleIn = protectedFromScaleIn {
            try container.encode(protectedFromScaleIn, forKey: Key("ProtectedFromScaleIn"))
        }
        if let weightedCapacity = weightedCapacity {
            try container.encode(weightedCapacity, forKey: Key("WeightedCapacity"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let lifecycleStateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lifecycleState)
        lifecycleState = lifecycleStateDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let protectedFromScaleInDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .protectedFromScaleIn)
        protectedFromScaleIn = protectedFromScaleInDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
    }
}

extension AutoScalingInstanceDetails: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoScalingInstanceDetails(autoScalingGroupName: \(String(describing: autoScalingGroupName)), availabilityZone: \(String(describing: availabilityZone)), healthStatus: \(String(describing: healthStatus)), instanceId: \(String(describing: instanceId)), instanceType: \(String(describing: instanceType)), launchConfigurationName: \(String(describing: launchConfigurationName)), launchTemplate: \(String(describing: launchTemplate)), lifecycleState: \(String(describing: lifecycleState)), protectedFromScaleIn: \(String(describing: protectedFromScaleIn)), weightedCapacity: \(String(describing: weightedCapacity)))"}
}

/// <p>Describes an EC2 instance associated with an Auto Scaling group.</p>
public struct AutoScalingInstanceDetails: Equatable {
    /// <p>The name of the Auto Scaling group for the instance.</p>
    public let autoScalingGroupName: String?
    /// <p>The Availability Zone for the instance.</p>
    public let availabilityZone: String?
    /// <p>The last reported health status of this instance. "Healthy" means that the instance is
    ///             healthy and should remain in service. "Unhealthy" means that the instance is unhealthy
    ///             and Amazon EC2 Auto Scaling should terminate and replace it.</p>
    public let healthStatus: String?
    /// <p>The ID of the instance.</p>
    public let instanceId: String?
    /// <p>The instance type of the EC2 instance.</p>
    public let instanceType: String?
    /// <p>The launch configuration used to launch the instance. This value is not available if
    ///             you attached the instance to the Auto Scaling group.</p>
    public let launchConfigurationName: String?
    /// <p>The launch template for the instance.</p>
    public let launchTemplate: LaunchTemplateSpecification?
    /// <p>The lifecycle state for the instance. The <code>Quarantined</code> state is not used.
    ///             For information about lifecycle states, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Instance
    ///                 lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>. </p>
    ///         <p>Valid Values: <code>Pending</code> | <code>Pending:Wait</code> |
    ///                 <code>Pending:Proceed</code> | <code>Quarantined</code> | <code>InService</code> |
    ///                 <code>Terminating</code> | <code>Terminating:Wait</code> |
    ///                 <code>Terminating:Proceed</code> | <code>Terminated</code> | <code>Detaching</code>
    ///             | <code>Detached</code> | <code>EnteringStandby</code> | <code>Standby</code> |
    ///                 <code>Warmed:Pending</code> | <code>Warmed:Pending:Wait</code> |
    ///                 <code>Warmed:Pending:Proceed</code> | <code>Warmed:Terminating</code> |
    ///                 <code>Warmed:Terminating:Wait</code> | <code>Warmed:Terminating:Proceed</code> |
    ///                 <code>Warmed:Terminated</code> | <code>Warmed:Stopped</code> |
    ///                 <code>Warmed:Running</code>
    ///          </p>
    public let lifecycleState: String?
    /// <p>Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling
    ///             in.</p>
    public let protectedFromScaleIn: Bool?
    /// <p>The number of capacity units contributed by the instance based on its instance
    ///             type.</p>
    ///         <p>Valid Range: Minimum value of 1. Maximum value of 999.</p>
    public let weightedCapacity: String?

    public init (
        autoScalingGroupName: String? = nil,
        availabilityZone: String? = nil,
        healthStatus: String? = nil,
        instanceId: String? = nil,
        instanceType: String? = nil,
        launchConfigurationName: String? = nil,
        launchTemplate: LaunchTemplateSpecification? = nil,
        lifecycleState: String? = nil,
        protectedFromScaleIn: Bool? = nil,
        weightedCapacity: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.availabilityZone = availabilityZone
        self.healthStatus = healthStatus
        self.instanceId = instanceId
        self.instanceType = instanceType
        self.launchConfigurationName = launchConfigurationName
        self.launchTemplate = launchTemplate
        self.lifecycleState = lifecycleState
        self.protectedFromScaleIn = protectedFromScaleIn
        self.weightedCapacity = weightedCapacity
    }
}

public struct BatchDeleteScheduledActionInputBodyMiddleware: Middleware {
    public let id: String = "BatchDeleteScheduledActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchDeleteScheduledActionInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchDeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchDeleteScheduledActionInput>
    public typealias MOutput = OperationOutput<BatchDeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchDeleteScheduledActionOutputError>
}

extension BatchDeleteScheduledActionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchDeleteScheduledActionInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), scheduledActionNames: \(String(describing: scheduledActionNames)))"}
}

extension BatchDeleteScheduledActionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let scheduledActionNames = scheduledActionNames {
            var scheduledActionNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ScheduledActionNames"))
            for (index0, xmlstringmaxlen2550) in scheduledActionNames.enumerated() {
                try scheduledActionNamesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("BatchDeleteScheduledAction", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct BatchDeleteScheduledActionInputHeadersMiddleware: Middleware {
    public let id: String = "BatchDeleteScheduledActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchDeleteScheduledActionInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchDeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchDeleteScheduledActionInput>
    public typealias MOutput = OperationOutput<BatchDeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchDeleteScheduledActionOutputError>
}

public struct BatchDeleteScheduledActionInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchDeleteScheduledActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchDeleteScheduledActionInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchDeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchDeleteScheduledActionInput>
    public typealias MOutput = OperationOutput<BatchDeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchDeleteScheduledActionOutputError>
}

public struct BatchDeleteScheduledActionInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The names of the scheduled actions to delete. The maximum number allowed is 50.
    ///         </p>
    public let scheduledActionNames: [String]?

    public init (
        autoScalingGroupName: String? = nil,
        scheduledActionNames: [String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scheduledActionNames = scheduledActionNames
    }
}

extension BatchDeleteScheduledActionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension BatchDeleteScheduledActionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchDeleteScheduledActionOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDeleteScheduledActionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchDeleteScheduledActionOutputResponse(failedScheduledActions: \(String(describing: failedScheduledActions)))"}
}

extension BatchDeleteScheduledActionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchDeleteScheduledActionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.failedScheduledActions = output.failedScheduledActions
        } else {
            self.failedScheduledActions = nil
        }
    }
}

public struct BatchDeleteScheduledActionOutputResponse: Equatable {
    /// <p>The names of the scheduled actions that could not be deleted, including an error
    ///             message.</p>
    public let failedScheduledActions: [FailedScheduledUpdateGroupActionRequest]?

    public init (
        failedScheduledActions: [FailedScheduledUpdateGroupActionRequest]? = nil
    )
    {
        self.failedScheduledActions = failedScheduledActions
    }
}

struct BatchDeleteScheduledActionOutputResponseBody: Equatable {
    public let failedScheduledActions: [FailedScheduledUpdateGroupActionRequest]?
}

extension BatchDeleteScheduledActionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case failedScheduledActions = "FailedScheduledActions"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("BatchDeleteScheduledActionResult"))
        if containerValues.contains(.failedScheduledActions) {
            struct KeyVal0{struct member{}}
            let failedScheduledActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .failedScheduledActions)
            if let failedScheduledActionsWrappedContainer = failedScheduledActionsWrappedContainer {
                let failedScheduledActionsContainer = try failedScheduledActionsWrappedContainer.decodeIfPresent([FailedScheduledUpdateGroupActionRequest].self, forKey: .member)
                var failedScheduledActionsBuffer:[FailedScheduledUpdateGroupActionRequest]? = nil
                if let failedScheduledActionsContainer = failedScheduledActionsContainer {
                    failedScheduledActionsBuffer = [FailedScheduledUpdateGroupActionRequest]()
                    for structureContainer0 in failedScheduledActionsContainer {
                        failedScheduledActionsBuffer?.append(structureContainer0)
                    }
                }
                failedScheduledActions = failedScheduledActionsBuffer
            } else {
                failedScheduledActions = []
            }
        } else {
            failedScheduledActions = nil
        }
    }
}

public struct BatchPutScheduledUpdateGroupActionInputBodyMiddleware: Middleware {
    public let id: String = "BatchPutScheduledUpdateGroupActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchPutScheduledUpdateGroupActionInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchPutScheduledUpdateGroupActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchPutScheduledUpdateGroupActionInput>
    public typealias MOutput = OperationOutput<BatchPutScheduledUpdateGroupActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchPutScheduledUpdateGroupActionOutputError>
}

extension BatchPutScheduledUpdateGroupActionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchPutScheduledUpdateGroupActionInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), scheduledUpdateGroupActions: \(String(describing: scheduledUpdateGroupActions)))"}
}

extension BatchPutScheduledUpdateGroupActionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let scheduledUpdateGroupActions = scheduledUpdateGroupActions {
            var scheduledUpdateGroupActionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ScheduledUpdateGroupActions"))
            for (index0, scheduledupdategroupactionrequest0) in scheduledUpdateGroupActions.enumerated() {
                try scheduledUpdateGroupActionsContainer.encode(scheduledupdategroupactionrequest0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("BatchPutScheduledUpdateGroupAction", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct BatchPutScheduledUpdateGroupActionInputHeadersMiddleware: Middleware {
    public let id: String = "BatchPutScheduledUpdateGroupActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchPutScheduledUpdateGroupActionInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchPutScheduledUpdateGroupActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchPutScheduledUpdateGroupActionInput>
    public typealias MOutput = OperationOutput<BatchPutScheduledUpdateGroupActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchPutScheduledUpdateGroupActionOutputError>
}

public struct BatchPutScheduledUpdateGroupActionInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchPutScheduledUpdateGroupActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchPutScheduledUpdateGroupActionInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchPutScheduledUpdateGroupActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchPutScheduledUpdateGroupActionInput>
    public typealias MOutput = OperationOutput<BatchPutScheduledUpdateGroupActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchPutScheduledUpdateGroupActionOutputError>
}

public struct BatchPutScheduledUpdateGroupActionInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>One or more scheduled actions. The maximum number allowed is 50.</p>
    public let scheduledUpdateGroupActions: [ScheduledUpdateGroupActionRequest]?

    public init (
        autoScalingGroupName: String? = nil,
        scheduledUpdateGroupActions: [ScheduledUpdateGroupActionRequest]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scheduledUpdateGroupActions = scheduledUpdateGroupActions
    }
}

extension BatchPutScheduledUpdateGroupActionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension BatchPutScheduledUpdateGroupActionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchPutScheduledUpdateGroupActionOutputError: Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchPutScheduledUpdateGroupActionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchPutScheduledUpdateGroupActionOutputResponse(failedScheduledUpdateGroupActions: \(String(describing: failedScheduledUpdateGroupActions)))"}
}

extension BatchPutScheduledUpdateGroupActionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchPutScheduledUpdateGroupActionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.failedScheduledUpdateGroupActions = output.failedScheduledUpdateGroupActions
        } else {
            self.failedScheduledUpdateGroupActions = nil
        }
    }
}

public struct BatchPutScheduledUpdateGroupActionOutputResponse: Equatable {
    /// <p>The names of the scheduled actions that could not be created or updated, including an
    ///             error message.</p>
    public let failedScheduledUpdateGroupActions: [FailedScheduledUpdateGroupActionRequest]?

    public init (
        failedScheduledUpdateGroupActions: [FailedScheduledUpdateGroupActionRequest]? = nil
    )
    {
        self.failedScheduledUpdateGroupActions = failedScheduledUpdateGroupActions
    }
}

struct BatchPutScheduledUpdateGroupActionOutputResponseBody: Equatable {
    public let failedScheduledUpdateGroupActions: [FailedScheduledUpdateGroupActionRequest]?
}

extension BatchPutScheduledUpdateGroupActionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case failedScheduledUpdateGroupActions = "FailedScheduledUpdateGroupActions"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("BatchPutScheduledUpdateGroupActionResult"))
        if containerValues.contains(.failedScheduledUpdateGroupActions) {
            struct KeyVal0{struct member{}}
            let failedScheduledUpdateGroupActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .failedScheduledUpdateGroupActions)
            if let failedScheduledUpdateGroupActionsWrappedContainer = failedScheduledUpdateGroupActionsWrappedContainer {
                let failedScheduledUpdateGroupActionsContainer = try failedScheduledUpdateGroupActionsWrappedContainer.decodeIfPresent([FailedScheduledUpdateGroupActionRequest].self, forKey: .member)
                var failedScheduledUpdateGroupActionsBuffer:[FailedScheduledUpdateGroupActionRequest]? = nil
                if let failedScheduledUpdateGroupActionsContainer = failedScheduledUpdateGroupActionsContainer {
                    failedScheduledUpdateGroupActionsBuffer = [FailedScheduledUpdateGroupActionRequest]()
                    for structureContainer0 in failedScheduledUpdateGroupActionsContainer {
                        failedScheduledUpdateGroupActionsBuffer?.append(structureContainer0)
                    }
                }
                failedScheduledUpdateGroupActions = failedScheduledUpdateGroupActionsBuffer
            } else {
                failedScheduledUpdateGroupActions = []
            }
        } else {
            failedScheduledUpdateGroupActions = nil
        }
    }
}

extension BlockDeviceMapping: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deviceName = "DeviceName"
        case ebs = "Ebs"
        case noDevice = "NoDevice"
        case virtualName = "VirtualName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let deviceName = deviceName {
            try container.encode(deviceName, forKey: Key("DeviceName"))
        }
        if let ebs = ebs {
            try container.encode(ebs, forKey: Key("Ebs"))
        }
        if let noDevice = noDevice {
            try container.encode(noDevice, forKey: Key("NoDevice"))
        }
        if let virtualName = virtualName {
            try container.encode(virtualName, forKey: Key("VirtualName"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .virtualName)
        virtualName = virtualNameDecoded
        let deviceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let ebsDecoded = try containerValues.decodeIfPresent(Ebs.self, forKey: .ebs)
        ebs = ebsDecoded
        let noDeviceDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .noDevice)
        noDevice = noDeviceDecoded
    }
}

extension BlockDeviceMapping: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BlockDeviceMapping(deviceName: \(String(describing: deviceName)), ebs: \(String(describing: ebs)), noDevice: \(String(describing: noDevice)), virtualName: \(String(describing: virtualName)))"}
}

/// <p>Describes a block device mapping.</p>
public struct BlockDeviceMapping: Equatable {
    /// <p>The device name exposed to the EC2 instance (for example, <code>/dev/sdh</code> or
    ///                 <code>xvdh</code>). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html">Device Naming on Linux
    ///                 Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    public let deviceName: String?
    /// <p>Parameters used to automatically set up EBS volumes when an instance is
    ///             launched.</p>
    ///         <p>You can specify either <code>VirtualName</code> or <code>Ebs</code>, but not
    ///             both.</p>
    public let ebs: Ebs?
    /// <p>Setting this value to <code>true</code> suppresses the specified device included in
    ///             the block device mapping of the AMI.</p>
    ///         <p>If <code>NoDevice</code> is <code>true</code> for the root device, instances might
    ///             fail the EC2 health check. In that case, Amazon EC2 Auto Scaling launches replacement instances.</p>
    ///         <p>If you specify <code>NoDevice</code>, you cannot specify <code>Ebs</code>.</p>
    public let noDevice: Bool?
    /// <p>The name of the virtual device (for example, <code>ephemeral0</code>).</p>
    ///         <p>You can specify either <code>VirtualName</code> or <code>Ebs</code>, but not
    ///             both.</p>
    public let virtualName: String?

    public init (
        deviceName: String? = nil,
        ebs: Ebs? = nil,
        noDevice: Bool? = nil,
        virtualName: String? = nil
    )
    {
        self.deviceName = deviceName
        self.ebs = ebs
        self.noDevice = noDevice
        self.virtualName = virtualName
    }
}

public struct CancelInstanceRefreshInputBodyMiddleware: Middleware {
    public let id: String = "CancelInstanceRefreshInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelInstanceRefreshInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelInstanceRefreshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelInstanceRefreshInput>
    public typealias MOutput = OperationOutput<CancelInstanceRefreshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelInstanceRefreshOutputError>
}

extension CancelInstanceRefreshInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelInstanceRefreshInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)))"}
}

extension CancelInstanceRefreshInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        try container.encode("CancelInstanceRefresh", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct CancelInstanceRefreshInputHeadersMiddleware: Middleware {
    public let id: String = "CancelInstanceRefreshInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelInstanceRefreshInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelInstanceRefreshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelInstanceRefreshInput>
    public typealias MOutput = OperationOutput<CancelInstanceRefreshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelInstanceRefreshOutputError>
}

public struct CancelInstanceRefreshInputQueryItemMiddleware: Middleware {
    public let id: String = "CancelInstanceRefreshInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelInstanceRefreshInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelInstanceRefreshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelInstanceRefreshInput>
    public typealias MOutput = OperationOutput<CancelInstanceRefreshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelInstanceRefreshOutputError>
}

public struct CancelInstanceRefreshInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?

    public init (
        autoScalingGroupName: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
    }
}

extension CancelInstanceRefreshOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CancelInstanceRefreshOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ActiveInstanceRefreshNotFound" : self = .activeInstanceRefreshNotFoundFault(try ActiveInstanceRefreshNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelInstanceRefreshOutputError: Equatable {
    case activeInstanceRefreshNotFoundFault(ActiveInstanceRefreshNotFoundFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelInstanceRefreshOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelInstanceRefreshOutputResponse(instanceRefreshId: \(String(describing: instanceRefreshId)))"}
}

extension CancelInstanceRefreshOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CancelInstanceRefreshOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.instanceRefreshId = output.instanceRefreshId
        } else {
            self.instanceRefreshId = nil
        }
    }
}

public struct CancelInstanceRefreshOutputResponse: Equatable {
    /// <p>The instance refresh ID.</p>
    public let instanceRefreshId: String?

    public init (
        instanceRefreshId: String? = nil
    )
    {
        self.instanceRefreshId = instanceRefreshId
    }
}

struct CancelInstanceRefreshOutputResponseBody: Equatable {
    public let instanceRefreshId: String?
}

extension CancelInstanceRefreshOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceRefreshId = "InstanceRefreshId"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("CancelInstanceRefreshResult"))
        let instanceRefreshIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceRefreshId)
        instanceRefreshId = instanceRefreshIdDecoded
    }
}

extension CapacityForecast: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case timestamps = "Timestamps"
        case values = "Values"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let timestamps = timestamps {
            var timestampsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Timestamps"))
            for (index0, timestamptype0) in timestamps.enumerated() {
                try timestampsContainer.encode(TimestampWrapper(timestamptype0, format: .dateTime), forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let values = values {
            var valuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Values"))
            for (index0, metricscale0) in values.enumerated() {
                try valuesContainer.encode(metricscale0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.timestamps) {
            struct KeyVal0{struct member{}}
            let timestampsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .timestamps)
            if let timestampsWrappedContainer = timestampsWrappedContainer {
                let timestampsContainer = try timestampsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var timestampsBuffer:[Date]? = nil
                if let timestampsContainer = timestampsContainer {
                    timestampsBuffer = [Date]()
                    for timestampContainer0 in timestampsContainer {
                        try timestampsBuffer?.append(TimestampWrapperDecoder.parseDateStringValue(timestampContainer0, format: .dateTime))
                    }
                }
                timestamps = timestampsBuffer
            } else {
                timestamps = []
            }
        } else {
            timestamps = nil
        }
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Double].self, forKey: .member)
                var valuesBuffer:[Double]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Double]()
                    for doubleContainer0 in valuesContainer {
                        valuesBuffer?.append(doubleContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
    }
}

extension CapacityForecast: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CapacityForecast(timestamps: \(String(describing: timestamps)), values: \(String(describing: values)))"}
}

/// <p>A <code>GetPredictiveScalingForecast</code> call returns the capacity forecast for a
///             predictive scaling policy. This structure includes the data points for that capacity
///             forecast, along with the timestamps of those data points. </p>
public struct CapacityForecast: Equatable {
    /// <p>The time stamps for the data points, in UTC format.</p>
    public let timestamps: [Date]?
    /// <p>The values of the data points.</p>
    public let values: [Double]?

    public init (
        timestamps: [Date]? = nil,
        values: [Double]? = nil
    )
    {
        self.timestamps = timestamps
        self.values = values
    }
}

public struct CompleteLifecycleActionInputBodyMiddleware: Middleware {
    public let id: String = "CompleteLifecycleActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CompleteLifecycleActionInput>,
                  next: H) -> Swift.Result<OperationOutput<CompleteLifecycleActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CompleteLifecycleActionInput>
    public typealias MOutput = OperationOutput<CompleteLifecycleActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CompleteLifecycleActionOutputError>
}

extension CompleteLifecycleActionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CompleteLifecycleActionInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), instanceId: \(String(describing: instanceId)), lifecycleActionResult: \(String(describing: lifecycleActionResult)), lifecycleActionToken: \(String(describing: lifecycleActionToken)), lifecycleHookName: \(String(describing: lifecycleHookName)))"}
}

extension CompleteLifecycleActionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let lifecycleActionResult = lifecycleActionResult {
            try container.encode(lifecycleActionResult, forKey: Key("LifecycleActionResult"))
        }
        if let lifecycleActionToken = lifecycleActionToken {
            try container.encode(lifecycleActionToken, forKey: Key("LifecycleActionToken"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: Key("LifecycleHookName"))
        }
        try container.encode("CompleteLifecycleAction", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct CompleteLifecycleActionInputHeadersMiddleware: Middleware {
    public let id: String = "CompleteLifecycleActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CompleteLifecycleActionInput>,
                  next: H) -> Swift.Result<OperationOutput<CompleteLifecycleActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CompleteLifecycleActionInput>
    public typealias MOutput = OperationOutput<CompleteLifecycleActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CompleteLifecycleActionOutputError>
}

public struct CompleteLifecycleActionInputQueryItemMiddleware: Middleware {
    public let id: String = "CompleteLifecycleActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CompleteLifecycleActionInput>,
                  next: H) -> Swift.Result<OperationOutput<CompleteLifecycleActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CompleteLifecycleActionInput>
    public typealias MOutput = OperationOutput<CompleteLifecycleActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CompleteLifecycleActionOutputError>
}

public struct CompleteLifecycleActionInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The ID of the instance.</p>
    public let instanceId: String?
    /// <p>The action for the group to take. This parameter can be either <code>CONTINUE</code>
    ///             or <code>ABANDON</code>.</p>
    public let lifecycleActionResult: String?
    /// <p>A universally unique identifier (UUID) that identifies a specific lifecycle action
    ///             associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you
    ///             specified when you created the lifecycle hook.</p>
    public let lifecycleActionToken: String?
    /// <p>The name of the lifecycle hook.</p>
    public let lifecycleHookName: String?

    public init (
        autoScalingGroupName: String? = nil,
        instanceId: String? = nil,
        lifecycleActionResult: String? = nil,
        lifecycleActionToken: String? = nil,
        lifecycleHookName: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceId = instanceId
        self.lifecycleActionResult = lifecycleActionResult
        self.lifecycleActionToken = lifecycleActionToken
        self.lifecycleHookName = lifecycleHookName
    }
}

extension CompleteLifecycleActionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CompleteLifecycleActionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CompleteLifecycleActionOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CompleteLifecycleActionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CompleteLifecycleActionOutputResponse()"}
}

extension CompleteLifecycleActionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct CompleteLifecycleActionOutputResponse: Equatable {

    public init() {}
}

struct CompleteLifecycleActionOutputResponseBody: Equatable {
}

extension CompleteLifecycleActionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct CreateAutoScalingGroupInputBodyMiddleware: Middleware {
    public let id: String = "CreateAutoScalingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAutoScalingGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAutoScalingGroupInput>
    public typealias MOutput = OperationOutput<CreateAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAutoScalingGroupOutputError>
}

extension CreateAutoScalingGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateAutoScalingGroupInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), availabilityZones: \(String(describing: availabilityZones)), capacityRebalance: \(String(describing: capacityRebalance)), defaultCooldown: \(String(describing: defaultCooldown)), desiredCapacity: \(String(describing: desiredCapacity)), healthCheckGracePeriod: \(String(describing: healthCheckGracePeriod)), healthCheckType: \(String(describing: healthCheckType)), instanceId: \(String(describing: instanceId)), launchConfigurationName: \(String(describing: launchConfigurationName)), launchTemplate: \(String(describing: launchTemplate)), lifecycleHookSpecificationList: \(String(describing: lifecycleHookSpecificationList)), loadBalancerNames: \(String(describing: loadBalancerNames)), maxInstanceLifetime: \(String(describing: maxInstanceLifetime)), maxSize: \(String(describing: maxSize)), minSize: \(String(describing: minSize)), mixedInstancesPolicy: \(String(describing: mixedInstancesPolicy)), newInstancesProtectedFromScaleIn: \(String(describing: newInstancesProtectedFromScaleIn)), placementGroup: \(String(describing: placementGroup)), serviceLinkedRoleARN: \(String(describing: serviceLinkedRoleARN)), tags: \(String(describing: tags)), targetGroupARNs: \(String(describing: targetGroupARNs)), terminationPolicies: \(String(describing: terminationPolicies)), vPCZoneIdentifier: \(String(describing: vPCZoneIdentifier)))"}
}

extension CreateAutoScalingGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AvailabilityZones"))
            for (index0, xmlstringmaxlen2550) in availabilityZones.enumerated() {
                try availabilityZonesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let capacityRebalance = capacityRebalance {
            try container.encode(capacityRebalance, forKey: Key("CapacityRebalance"))
        }
        if let defaultCooldown = defaultCooldown {
            try container.encode(defaultCooldown, forKey: Key("DefaultCooldown"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: Key("DesiredCapacity"))
        }
        if let healthCheckGracePeriod = healthCheckGracePeriod {
            try container.encode(healthCheckGracePeriod, forKey: Key("HealthCheckGracePeriod"))
        }
        if let healthCheckType = healthCheckType {
            try container.encode(healthCheckType, forKey: Key("HealthCheckType"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: Key("LaunchTemplate"))
        }
        if let lifecycleHookSpecificationList = lifecycleHookSpecificationList {
            var lifecycleHookSpecificationListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LifecycleHookSpecificationList"))
            for (index0, lifecyclehookspecification0) in lifecycleHookSpecificationList.enumerated() {
                try lifecycleHookSpecificationListContainer.encode(lifecyclehookspecification0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let loadBalancerNames = loadBalancerNames {
            var loadBalancerNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LoadBalancerNames"))
            for (index0, xmlstringmaxlen2550) in loadBalancerNames.enumerated() {
                try loadBalancerNamesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxInstanceLifetime = maxInstanceLifetime {
            try container.encode(maxInstanceLifetime, forKey: Key("MaxInstanceLifetime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: Key("MinSize"))
        }
        if let mixedInstancesPolicy = mixedInstancesPolicy {
            try container.encode(mixedInstancesPolicy, forKey: Key("MixedInstancesPolicy"))
        }
        if let newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn {
            try container.encode(newInstancesProtectedFromScaleIn, forKey: Key("NewInstancesProtectedFromScaleIn"))
        }
        if let placementGroup = placementGroup {
            try container.encode(placementGroup, forKey: Key("PlacementGroup"))
        }
        if let serviceLinkedRoleARN = serviceLinkedRoleARN {
            try container.encode(serviceLinkedRoleARN, forKey: Key("ServiceLinkedRoleARN"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let targetGroupARNs = targetGroupARNs {
            var targetGroupARNsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("TargetGroupARNs"))
            for (index0, xmlstringmaxlen5110) in targetGroupARNs.enumerated() {
                try targetGroupARNsContainer.encode(xmlstringmaxlen5110, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let terminationPolicies = terminationPolicies {
            var terminationPoliciesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("TerminationPolicies"))
            for (index0, xmlstringmaxlen16000) in terminationPolicies.enumerated() {
                try terminationPoliciesContainer.encode(xmlstringmaxlen16000, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let vPCZoneIdentifier = vPCZoneIdentifier {
            try container.encode(vPCZoneIdentifier, forKey: Key("VPCZoneIdentifier"))
        }
        try container.encode("CreateAutoScalingGroup", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct CreateAutoScalingGroupInputHeadersMiddleware: Middleware {
    public let id: String = "CreateAutoScalingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAutoScalingGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAutoScalingGroupInput>
    public typealias MOutput = OperationOutput<CreateAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAutoScalingGroupOutputError>
}

public struct CreateAutoScalingGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateAutoScalingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAutoScalingGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAutoScalingGroupInput>
    public typealias MOutput = OperationOutput<CreateAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAutoScalingGroupOutputError>
}

public struct CreateAutoScalingGroupInput: Equatable {
    /// <p>The name of the Auto Scaling group. This name must be unique per Region per account.</p>
    public let autoScalingGroupName: String?
    /// <p>A list of Availability Zones where instances in the Auto Scaling group can be created. This
    ///             parameter is optional if you specify one or more subnets for
    ///                 <code>VPCZoneIdentifier</code>.</p>
    ///         <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required
    ///             to launch instances into EC2-Classic.</p>
    public let availabilityZones: [String]?
    /// <p>Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing is
    ///             disabled. When you turn on Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot
    ///             Instance whenever Amazon EC2 notifies that a Spot Instance is at an elevated risk of
    ///             interruption. After launching a new instance, it then terminates an old instance. For
    ///             more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/capacity-rebalance.html">Amazon EC2 Auto Scaling Capacity
    ///                 Rebalancing</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let capacityRebalance: Bool?
    /// <p>The amount of time, in seconds, after a scaling activity completes before another
    ///             scaling activity can start. The default value is <code>300</code>. This setting applies
    ///             when using simple scaling policies, but not when using other scaling policies or
    ///             scheduled scaling. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling</a>
    ///             in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let defaultCooldown: Int?
    /// <p>The desired capacity is the initial capacity of the Auto Scaling group at the time of its
    ///             creation and the capacity it attempts to maintain. It can scale beyond this capacity if
    ///             you configure auto scaling. This number must be greater than or equal to the minimum
    ///             size of the group and less than or equal to the maximum size of the group. If you do not
    ///             specify a desired capacity, the default is the minimum size of the group.</p>
    public let desiredCapacity: Int?
    /// <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status
    ///             of an EC2 instance that has come into service. During this time, any health check
    ///             failures for the instance are ignored. The default value is <code>0</code>. For more
    ///             information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health
    ///                 check grace period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    ///         <p>Conditional: Required if you are adding an <code>ELB</code> health check.</p>
    public let healthCheckGracePeriod: Int?
    /// <p>The service to use for the health checks. The valid values are <code>EC2</code>
    ///             (default) and <code>ELB</code>. If you configure an Auto Scaling group to use load balancer
    ///             (ELB) health checks, it considers the instance unhealthy if it fails either the EC2
    ///             status checks or the load balancer health checks. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health checks
    ///                 for Auto Scaling instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let healthCheckType: String?
    /// <p>The ID of the instance used to base the launch configuration on. If specified, Amazon
    ///             EC2 Auto Scaling uses the configuration values from the specified instance to create a
    ///             new launch configuration. To get the instance ID, use the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html">DescribeInstances</a> API operation. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Creating an Auto Scaling group using an EC2 instance</a> in the
    ///                 <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let instanceId: String?
    /// <p>The name of the launch configuration to use to launch instances. </p>
    ///         <p>Conditional: You must specify either a launch template (<code>LaunchTemplate</code> or
    ///                 <code>MixedInstancesPolicy</code>) or a launch configuration
    ///                 (<code>LaunchConfigurationName</code> or <code>InstanceId</code>).</p>
    public let launchConfigurationName: String?
    /// <p>Parameters used to specify the launch template and version to use to launch instances. </p>
    ///         <p>Conditional: You must specify either a launch template (<code>LaunchTemplate</code> or
    ///                 <code>MixedInstancesPolicy</code>) or a launch configuration
    ///                 (<code>LaunchConfigurationName</code> or <code>InstanceId</code>).</p>
    ///         <note>
    ///             <p>The launch template that is specified must be configured for use with an Auto Scaling
    ///                 group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a launch
    ///                     template for an Auto Scaling group</a> in the
    ///                 <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    ///         </note>
    public let launchTemplate: LaunchTemplateSpecification?
    /// <p>One or more lifecycle hooks for the group, which specify actions to perform when
    ///             Amazon EC2 Auto Scaling launches or terminates instances.</p>
    public let lifecycleHookSpecificationList: [LifecycleHookSpecification]?
    /// <p>A list of Classic Load Balancers associated with this Auto Scaling group. For
    ///             Application Load Balancers, Network Load Balancers, and Gateway Load Balancers, specify
    ///             the <code>TargetGroupARNs</code> property instead.</p>
    public let loadBalancerNames: [String]?
    /// <p>The maximum amount of time, in seconds, that an instance can be in service. The
    ///             default is null. If specified, the value must be either 0 or a number equal to or
    ///             greater than 86,400 seconds (1 day). For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling instances based on maximum instance lifetime</a> in the
    ///                 <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let maxInstanceLifetime: Int?
    /// <p>The maximum size of the group.</p>
    ///         <note>
    ///             <p>With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to
    ///                 go above <code>MaxSize</code> to meet your capacity requirements. In this event,
    ///                 Amazon EC2 Auto Scaling will never go above <code>MaxSize</code> by more than your largest instance
    ///                 weight (weights that define how many units each instance contributes to the desired
    ///                 capacity of the group).</p>
    ///         </note>
    public let maxSize: Int?
    /// <p>The minimum size of the group.</p>
    public let minSize: Int?
    /// <p>An embedded object that specifies a mixed instances policy. The required properties
    ///             must be specified. If optional properties are unspecified, their default values are
    ///             used.</p>
    ///         <p>The policy includes properties that not only define the distribution of On-Demand
    ///             Instances and Spot Instances, the maximum price to pay for Spot Instances, and how the
    ///             Auto Scaling group allocates instance types to fulfill On-Demand and Spot capacities, but also
    ///             the properties that specify the instance configuration information—the launch template
    ///             and instance types. The policy can also include a weight for each instance type and
    ///             different launch templates for individual instance types. For more information, see
    ///                 <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling groups with multiple
    ///                 instance types and purchase options</a> in the <i>Amazon EC2 Auto Scaling User
    ///                 Guide</i>.</p>
    public let mixedInstancesPolicy: MixedInstancesPolicy?
    /// <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling
    ///             when scaling in. For more information about preventing instances from terminating on
    ///             scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance scale-in protection</a> in the
    ///             <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let newInstancesProtectedFromScaleIn: Bool?
    /// <p>The name of an existing placement group into which to launch your instances, if any. A
    ///             placement group is a logical grouping of instances within a single Availability Zone.
    ///             You cannot specify multiple Availability Zones and a placement group. For more
    ///             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the
    ///                 <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    public let placementGroup: String?
    /// <p>The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to
    ///             call other Amazon Web Services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role
    ///             named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more
    ///             information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-linked
    ///                 roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let serviceLinkedRoleARN: String?
    /// <p>One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon EC2
    ///             instances it launches. Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS
    ///             volumes, specify the tags in a launch template but use caution. If the launch template
    ///             specifies an instance tag with a key that is also specified for the Auto Scaling group, Amazon EC2 Auto Scaling
    ///             overrides the value of that instance tag with the value specified by the Auto Scaling group. For
    ///             more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling groups and
    ///                 instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let tags: [Tag]?
    /// <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group.
    ///             Instances are registered as targets in a target group, and traffic is routed to the
    ///             target group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Elastic Load Balancing and
    ///                 Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let targetGroupARNs: [String]?
    /// <p>A policy or a list of policies that are used to select the instance to terminate.
    ///             These policies are executed in the order that you list them. For more information, see
    ///                 <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling which Auto Scaling
    ///                 instances terminate during scale in</a> in the
    ///                 <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let terminationPolicies: [String]?
    /// <p>A comma-separated list of subnet IDs for a virtual private cloud (VPC) where instances
    ///             in the Auto Scaling group can be created. If you specify <code>VPCZoneIdentifier</code> with
    ///                 <code>AvailabilityZones</code>, the subnets that you specify for this parameter must
    ///             reside in those Availability Zones.</p>
    ///         <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required
    ///             to launch instances into a VPC.</p>
    public let vPCZoneIdentifier: String?

    public init (
        autoScalingGroupName: String? = nil,
        availabilityZones: [String]? = nil,
        capacityRebalance: Bool? = nil,
        defaultCooldown: Int? = nil,
        desiredCapacity: Int? = nil,
        healthCheckGracePeriod: Int? = nil,
        healthCheckType: String? = nil,
        instanceId: String? = nil,
        launchConfigurationName: String? = nil,
        launchTemplate: LaunchTemplateSpecification? = nil,
        lifecycleHookSpecificationList: [LifecycleHookSpecification]? = nil,
        loadBalancerNames: [String]? = nil,
        maxInstanceLifetime: Int? = nil,
        maxSize: Int? = nil,
        minSize: Int? = nil,
        mixedInstancesPolicy: MixedInstancesPolicy? = nil,
        newInstancesProtectedFromScaleIn: Bool? = nil,
        placementGroup: String? = nil,
        serviceLinkedRoleARN: String? = nil,
        tags: [Tag]? = nil,
        targetGroupARNs: [String]? = nil,
        terminationPolicies: [String]? = nil,
        vPCZoneIdentifier: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.availabilityZones = availabilityZones
        self.capacityRebalance = capacityRebalance
        self.defaultCooldown = defaultCooldown
        self.desiredCapacity = desiredCapacity
        self.healthCheckGracePeriod = healthCheckGracePeriod
        self.healthCheckType = healthCheckType
        self.instanceId = instanceId
        self.launchConfigurationName = launchConfigurationName
        self.launchTemplate = launchTemplate
        self.lifecycleHookSpecificationList = lifecycleHookSpecificationList
        self.loadBalancerNames = loadBalancerNames
        self.maxInstanceLifetime = maxInstanceLifetime
        self.maxSize = maxSize
        self.minSize = minSize
        self.mixedInstancesPolicy = mixedInstancesPolicy
        self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
        self.placementGroup = placementGroup
        self.serviceLinkedRoleARN = serviceLinkedRoleARN
        self.tags = tags
        self.targetGroupARNs = targetGroupARNs
        self.terminationPolicies = terminationPolicies
        self.vPCZoneIdentifier = vPCZoneIdentifier
    }
}

extension CreateAutoScalingGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateAutoScalingGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAutoScalingGroupOutputError: Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAutoScalingGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateAutoScalingGroupOutputResponse()"}
}

extension CreateAutoScalingGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct CreateAutoScalingGroupOutputResponse: Equatable {

    public init() {}
}

struct CreateAutoScalingGroupOutputResponseBody: Equatable {
}

extension CreateAutoScalingGroupOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct CreateLaunchConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "CreateLaunchConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLaunchConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLaunchConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLaunchConfigurationInput>
    public typealias MOutput = OperationOutput<CreateLaunchConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLaunchConfigurationOutputError>
}

extension CreateLaunchConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateLaunchConfigurationInput(associatePublicIpAddress: \(String(describing: associatePublicIpAddress)), blockDeviceMappings: \(String(describing: blockDeviceMappings)), classicLinkVPCId: \(String(describing: classicLinkVPCId)), classicLinkVPCSecurityGroups: \(String(describing: classicLinkVPCSecurityGroups)), ebsOptimized: \(String(describing: ebsOptimized)), iamInstanceProfile: \(String(describing: iamInstanceProfile)), imageId: \(String(describing: imageId)), instanceId: \(String(describing: instanceId)), instanceMonitoring: \(String(describing: instanceMonitoring)), instanceType: \(String(describing: instanceType)), kernelId: \(String(describing: kernelId)), keyName: \(String(describing: keyName)), launchConfigurationName: \(String(describing: launchConfigurationName)), metadataOptions: \(String(describing: metadataOptions)), placementTenancy: \(String(describing: placementTenancy)), ramdiskId: \(String(describing: ramdiskId)), securityGroups: \(String(describing: securityGroups)), spotPrice: \(String(describing: spotPrice)), userData: \(String(describing: userData)))"}
}

extension CreateLaunchConfigurationInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let associatePublicIpAddress = associatePublicIpAddress {
            try container.encode(associatePublicIpAddress, forKey: Key("AssociatePublicIpAddress"))
        }
        if let blockDeviceMappings = blockDeviceMappings {
            var blockDeviceMappingsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("BlockDeviceMappings"))
            for (index0, blockdevicemapping0) in blockDeviceMappings.enumerated() {
                try blockDeviceMappingsContainer.encode(blockdevicemapping0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let classicLinkVPCId = classicLinkVPCId {
            try container.encode(classicLinkVPCId, forKey: Key("ClassicLinkVPCId"))
        }
        if let classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups {
            var classicLinkVPCSecurityGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ClassicLinkVPCSecurityGroups"))
            for (index0, xmlstringmaxlen2550) in classicLinkVPCSecurityGroups.enumerated() {
                try classicLinkVPCSecurityGroupsContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let ebsOptimized = ebsOptimized {
            try container.encode(ebsOptimized, forKey: Key("EbsOptimized"))
        }
        if let iamInstanceProfile = iamInstanceProfile {
            try container.encode(iamInstanceProfile, forKey: Key("IamInstanceProfile"))
        }
        if let imageId = imageId {
            try container.encode(imageId, forKey: Key("ImageId"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let instanceMonitoring = instanceMonitoring {
            try container.encode(instanceMonitoring, forKey: Key("InstanceMonitoring"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: Key("InstanceType"))
        }
        if let kernelId = kernelId {
            try container.encode(kernelId, forKey: Key("KernelId"))
        }
        if let keyName = keyName {
            try container.encode(keyName, forKey: Key("KeyName"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: Key("LaunchConfigurationName"))
        }
        if let metadataOptions = metadataOptions {
            try container.encode(metadataOptions, forKey: Key("MetadataOptions"))
        }
        if let placementTenancy = placementTenancy {
            try container.encode(placementTenancy, forKey: Key("PlacementTenancy"))
        }
        if let ramdiskId = ramdiskId {
            try container.encode(ramdiskId, forKey: Key("RamdiskId"))
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SecurityGroups"))
            for (index0, xmlstring0) in securityGroups.enumerated() {
                try securityGroupsContainer.encode(xmlstring0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let spotPrice = spotPrice {
            try container.encode(spotPrice, forKey: Key("SpotPrice"))
        }
        if let userData = userData {
            try container.encode(userData, forKey: Key("UserData"))
        }
        try container.encode("CreateLaunchConfiguration", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct CreateLaunchConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "CreateLaunchConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLaunchConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLaunchConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLaunchConfigurationInput>
    public typealias MOutput = OperationOutput<CreateLaunchConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLaunchConfigurationOutputError>
}

public struct CreateLaunchConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateLaunchConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLaunchConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLaunchConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLaunchConfigurationInput>
    public typealias MOutput = OperationOutput<CreateLaunchConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLaunchConfigurationOutputError>
}

public struct CreateLaunchConfigurationInput: Equatable {
    /// <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether
    ///             to assign a public IP address to the group's instances. If you specify
    ///             <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address.
    ///             For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling instances in a
    ///                 VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    ///         <p>If you specify this parameter, you must specify at least one subnet for
    ///                 <code>VPCZoneIdentifier</code> when you create your group.</p>
    ///         <note>
    ///             <p>If the instance is launched into a default subnet, the default is to assign a
    ///                 public IP address, unless you disabled the option to assign a public IP address on
    ///                 the subnet. If the instance is launched into a nondefault subnet, the default is not
    ///                 to assign a public IP address, unless you enabled the option to assign a public IP
    ///                 address on the subnet.</p>
    ///         </note>
    public let associatePublicIpAddress: Bool?
    /// <p>A block device mapping, which specifies the block devices for the instance. You can
    ///             specify virtual devices and EBS volumes. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device
    ///                 Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    public let blockDeviceMappings: [BlockDeviceMapping]?
    /// <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more
    ///             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the
    ///                 <i>Amazon EC2 User Guide for Linux Instances</i> and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic
    ///                 instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    ///         <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
    public let classicLinkVPCId: String?
    /// <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For
    ///             more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the
    ///                 <i>Amazon EC2 User Guide for Linux Instances</i> and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic
    ///                 instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    ///         <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this
    ///             parameter.</p>
    public let classicLinkVPCSecurityGroups: [String]?
    /// <p>Specifies whether the launch configuration is optimized for EBS I/O
    ///             (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated
    ///             throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O
    ///             performance. This optimization is not available with all instance types. Additional fees
    ///             are incurred when you enable EBS optimization for an instance type that is not
    ///             EBS-optimized by default. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized
    ///                 Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    ///         <p>The default value is <code>false</code>.</p>
    public let ebsOptimized: Bool?
    /// <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the
    ///             IAM role for the instance. The instance profile contains the IAM role.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM role for applications that run
    ///                 on Amazon EC2 instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let iamInstanceProfile: String?
    /// <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For
    ///             more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the
    ///                 <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    ///         <p>If you do not specify <code>InstanceId</code>, you must specify
    ///             <code>ImageId</code>.</p>
    public let imageId: String?
    /// <p>The ID of the instance to use to create the launch configuration. The new launch
    ///             configuration derives attributes from the instance, except for the block device
    ///             mapping.</p>
    ///         <p>To create a launch configuration with a block device mapping or override any other
    ///             instance attributes, specify them as part of the same request.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Creating a launch
    ///                 configuration using an EC2 instance</a> in the
    ///                 <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    ///         <p>If you do not specify <code>InstanceId</code>, you must specify both
    ///                 <code>ImageId</code> and <code>InstanceType</code>.</p>
    public let instanceId: String?
    /// <p>Controls whether instances in this group are launched with detailed
    ///             (<code>true</code>) or basic (<code>false</code>) monitoring.</p>
    ///         <p>The default value is <code>true</code> (enabled).</p>
    ///         <important>
    ///             <p>When detailed monitoring is enabled, Amazon CloudWatch generates metrics every minute and
    ///                 your account is charged a fee. When you disable detailed monitoring, CloudWatch generates
    ///                 metrics every 5 minutes. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html">Configure
    ///                     Monitoring for Auto Scaling Instances</a> in the
    ///                 <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    ///         </important>
    public let instanceMonitoring: InstanceMonitoring?
    /// <p>Specifies the instance type of the EC2 instance.</p>
    ///         <p>For information about available instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available
    ///                 Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    ///         <p>If you do not specify <code>InstanceId</code>, you must specify
    ///                 <code>InstanceType</code>.</p>
    public let instanceType: String?
    /// <p>The ID of the kernel associated with the AMI.</p>
    public let kernelId: String?
    /// <p>The name of the key pair. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the
    ///                 <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    public let keyName: String?
    /// <p>The name of the launch configuration. This name must be unique per Region per
    ///             account.</p>
    public let launchConfigurationName: String?
    /// <p>The metadata options for the instances. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds">Configuring the Instance Metadata Options</a> in the
    ///                 <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let metadataOptions: InstanceMetadataOptions?
    /// <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on
    ///             isolated, single-tenant hardware and can only be launched into a VPC.</p>
    ///         <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance
    ///             placement tenancy attribute set to <code>default</code>), you must set the value of this
    ///             parameter to <code>dedicated</code>.</p>
    ///         <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for
    ///                 <code>VPCZoneIdentifier</code> when you create your group.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-dedicated-instances.html">Configuring
    ///                 instance tenancy with Amazon EC2 Auto Scaling</a> in the
    ///             <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    ///         <p>Valid Values: <code>default</code> | <code>dedicated</code>
    ///         </p>
    public let placementTenancy: String?
    /// <p>The ID of the RAM disk to select.</p>
    public let ramdiskId: String?
    /// <p>A list that contains the security groups to assign to the instances in the Auto Scaling
    ///             group.</p>
    ///         <p>[EC2-VPC] Specify the security group IDs. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud
    ///                 User Guide</i>.</p>
    ///         <p>[EC2-Classic] Specify either the security group names or the security group IDs. For
    ///             more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security
    ///                 Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    public let securityGroups: [String]?
    /// <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the
    ///             request. Spot Instances are launched when the price you specify exceeds the current Spot
    ///             price. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Requesting Spot
    ///                 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    ///         <note>
    ///             <p>When you change your maximum price by creating a new launch configuration, running
    ///                 instances will continue to run as long as the maximum price for those running
    ///                 instances is higher than the current Spot price.</p>
    ///         </note>
    public let spotPrice: String?
    /// <p>The user data to make available to the launched EC2 instances. For more information,
    ///             see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a> (Linux) and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html">Instance metadata and
    ///                 user data</a> (Windows). If you are using a command line tool, base64-encoding
    ///             is performed for you, and you can load the text from a file. Otherwise, you must provide
    ///             base64-encoded text. User data is limited to 16 KB.</p>
    public let userData: String?

    public init (
        associatePublicIpAddress: Bool? = nil,
        blockDeviceMappings: [BlockDeviceMapping]? = nil,
        classicLinkVPCId: String? = nil,
        classicLinkVPCSecurityGroups: [String]? = nil,
        ebsOptimized: Bool? = nil,
        iamInstanceProfile: String? = nil,
        imageId: String? = nil,
        instanceId: String? = nil,
        instanceMonitoring: InstanceMonitoring? = nil,
        instanceType: String? = nil,
        kernelId: String? = nil,
        keyName: String? = nil,
        launchConfigurationName: String? = nil,
        metadataOptions: InstanceMetadataOptions? = nil,
        placementTenancy: String? = nil,
        ramdiskId: String? = nil,
        securityGroups: [String]? = nil,
        spotPrice: String? = nil,
        userData: String? = nil
    )
    {
        self.associatePublicIpAddress = associatePublicIpAddress
        self.blockDeviceMappings = blockDeviceMappings
        self.classicLinkVPCId = classicLinkVPCId
        self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
        self.ebsOptimized = ebsOptimized
        self.iamInstanceProfile = iamInstanceProfile
        self.imageId = imageId
        self.instanceId = instanceId
        self.instanceMonitoring = instanceMonitoring
        self.instanceType = instanceType
        self.kernelId = kernelId
        self.keyName = keyName
        self.launchConfigurationName = launchConfigurationName
        self.metadataOptions = metadataOptions
        self.placementTenancy = placementTenancy
        self.ramdiskId = ramdiskId
        self.securityGroups = securityGroups
        self.spotPrice = spotPrice
        self.userData = userData
    }
}

extension CreateLaunchConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateLaunchConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLaunchConfigurationOutputError: Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLaunchConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateLaunchConfigurationOutputResponse()"}
}

extension CreateLaunchConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct CreateLaunchConfigurationOutputResponse: Equatable {

    public init() {}
}

struct CreateLaunchConfigurationOutputResponseBody: Equatable {
}

extension CreateLaunchConfigurationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct CreateOrUpdateTagsInputBodyMiddleware: Middleware {
    public let id: String = "CreateOrUpdateTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateOrUpdateTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateOrUpdateTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateOrUpdateTagsInput>
    public typealias MOutput = OperationOutput<CreateOrUpdateTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateOrUpdateTagsOutputError>
}

extension CreateOrUpdateTagsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateOrUpdateTagsInput(tags: \(String(describing: tags)))"}
}

extension CreateOrUpdateTagsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateOrUpdateTags", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct CreateOrUpdateTagsInputHeadersMiddleware: Middleware {
    public let id: String = "CreateOrUpdateTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateOrUpdateTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateOrUpdateTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateOrUpdateTagsInput>
    public typealias MOutput = OperationOutput<CreateOrUpdateTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateOrUpdateTagsOutputError>
}

public struct CreateOrUpdateTagsInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateOrUpdateTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateOrUpdateTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateOrUpdateTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateOrUpdateTagsInput>
    public typealias MOutput = OperationOutput<CreateOrUpdateTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateOrUpdateTagsOutputError>
}

public struct CreateOrUpdateTagsInput: Equatable {
    /// <p>One or more tags.</p>
    public let tags: [Tag]?

    public init (
        tags: [Tag]? = nil
    )
    {
        self.tags = tags
    }
}

extension CreateOrUpdateTagsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateOrUpdateTagsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateOrUpdateTagsOutputError: Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateOrUpdateTagsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateOrUpdateTagsOutputResponse()"}
}

extension CreateOrUpdateTagsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct CreateOrUpdateTagsOutputResponse: Equatable {

    public init() {}
}

struct CreateOrUpdateTagsOutputResponseBody: Equatable {
}

extension CreateOrUpdateTagsOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension CustomizedMetricSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case statistic = "Statistic"
        case unit = "Unit"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Dimensions"))
            for (index0, metricdimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(metricdimension0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: Key("Namespace"))
        }
        if let statistic = statistic {
            try container.encode(statistic, forKey: Key("Statistic"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: Key("Unit"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namespace)
        namespace = namespaceDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([MetricDimension].self, forKey: .member)
                var dimensionsBuffer:[MetricDimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [MetricDimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let statisticDecoded = try containerValues.decodeIfPresent(MetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let unitDecoded = try containerValues.decodeIfPresent(String.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension CustomizedMetricSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CustomizedMetricSpecification(dimensions: \(String(describing: dimensions)), metricName: \(String(describing: metricName)), namespace: \(String(describing: namespace)), statistic: \(String(describing: statistic)), unit: \(String(describing: unit)))"}
}

/// <p>Represents a CloudWatch metric of your choosing for a target tracking scaling policy to use
///             with Amazon EC2 Auto Scaling.</p>
///         <p>To create your customized metric specification:</p>
///         <ul>
///             <li>
///                 <p>Add values for each required parameter from CloudWatch. You can use an existing
///                     metric, or a new metric that you create. To use your own metric, you must first
///                     publish the metric to CloudWatch. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publish
///                         Custom Metrics</a> in the <i>Amazon CloudWatch User
///                     Guide</i>.</p>
///             </li>
///             <li>
///                 <p>Choose a metric that changes proportionally with capacity. The value of the
///                     metric should increase or decrease in inverse proportion to the number of
///                     capacity units. That is, the value of the metric should decrease when capacity
///                     increases.</p>
///             </li>
///          </ul>
///         <p>For more information about CloudWatch, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch
///                 Concepts</a>.</p>
public struct CustomizedMetricSpecification: Equatable {
    /// <p>The dimensions of the metric.</p>
    ///         <p>Conditional: If you published your metric with dimensions, you must specify the same
    ///             dimensions in your scaling policy.</p>
    public let dimensions: [MetricDimension]?
    /// <p>The name of the metric.</p>
    public let metricName: String?
    /// <p>The namespace of the metric.</p>
    public let namespace: String?
    /// <p>The statistic of the metric.</p>
    public let statistic: MetricStatistic?
    /// <p>The unit of the metric.</p>
    public let unit: String?

    public init (
        dimensions: [MetricDimension]? = nil,
        metricName: String? = nil,
        namespace: String? = nil,
        statistic: MetricStatistic? = nil,
        unit: String? = nil
    )
    {
        self.dimensions = dimensions
        self.metricName = metricName
        self.namespace = namespace
        self.statistic = statistic
        self.unit = unit
    }
}

public struct DeleteAutoScalingGroupInputBodyMiddleware: Middleware {
    public let id: String = "DeleteAutoScalingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteAutoScalingGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteAutoScalingGroupInput>
    public typealias MOutput = OperationOutput<DeleteAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteAutoScalingGroupOutputError>
}

extension DeleteAutoScalingGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteAutoScalingGroupInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), forceDelete: \(String(describing: forceDelete)))"}
}

extension DeleteAutoScalingGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let forceDelete = forceDelete {
            try container.encode(forceDelete, forKey: Key("ForceDelete"))
        }
        try container.encode("DeleteAutoScalingGroup", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DeleteAutoScalingGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteAutoScalingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteAutoScalingGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteAutoScalingGroupInput>
    public typealias MOutput = OperationOutput<DeleteAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteAutoScalingGroupOutputError>
}

public struct DeleteAutoScalingGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteAutoScalingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteAutoScalingGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteAutoScalingGroupInput>
    public typealias MOutput = OperationOutput<DeleteAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteAutoScalingGroupOutputError>
}

public struct DeleteAutoScalingGroupInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>Specifies that the group is to be deleted along with all instances associated with the
    ///             group, without waiting for all instances to be terminated. This parameter also deletes
    ///             any outstanding lifecycle actions associated with the group.</p>
    public let forceDelete: Bool?

    public init (
        autoScalingGroupName: String? = nil,
        forceDelete: Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.forceDelete = forceDelete
    }
}

extension DeleteAutoScalingGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteAutoScalingGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAutoScalingGroupOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAutoScalingGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteAutoScalingGroupOutputResponse()"}
}

extension DeleteAutoScalingGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAutoScalingGroupOutputResponse: Equatable {

    public init() {}
}

struct DeleteAutoScalingGroupOutputResponseBody: Equatable {
}

extension DeleteAutoScalingGroupOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteLaunchConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "DeleteLaunchConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteLaunchConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteLaunchConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteLaunchConfigurationInput>
    public typealias MOutput = OperationOutput<DeleteLaunchConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteLaunchConfigurationOutputError>
}

extension DeleteLaunchConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteLaunchConfigurationInput(launchConfigurationName: \(String(describing: launchConfigurationName)))"}
}

extension DeleteLaunchConfigurationInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: Key("LaunchConfigurationName"))
        }
        try container.encode("DeleteLaunchConfiguration", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DeleteLaunchConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteLaunchConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteLaunchConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteLaunchConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteLaunchConfigurationInput>
    public typealias MOutput = OperationOutput<DeleteLaunchConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteLaunchConfigurationOutputError>
}

public struct DeleteLaunchConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteLaunchConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteLaunchConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteLaunchConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteLaunchConfigurationInput>
    public typealias MOutput = OperationOutput<DeleteLaunchConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteLaunchConfigurationOutputError>
}

public struct DeleteLaunchConfigurationInput: Equatable {
    /// <p>The name of the launch configuration.</p>
    public let launchConfigurationName: String?

    public init (
        launchConfigurationName: String? = nil
    )
    {
        self.launchConfigurationName = launchConfigurationName
    }
}

extension DeleteLaunchConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteLaunchConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLaunchConfigurationOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLaunchConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteLaunchConfigurationOutputResponse()"}
}

extension DeleteLaunchConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLaunchConfigurationOutputResponse: Equatable {

    public init() {}
}

struct DeleteLaunchConfigurationOutputResponseBody: Equatable {
}

extension DeleteLaunchConfigurationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteLifecycleHookInputBodyMiddleware: Middleware {
    public let id: String = "DeleteLifecycleHookInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteLifecycleHookInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteLifecycleHookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteLifecycleHookInput>
    public typealias MOutput = OperationOutput<DeleteLifecycleHookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteLifecycleHookOutputError>
}

extension DeleteLifecycleHookInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteLifecycleHookInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), lifecycleHookName: \(String(describing: lifecycleHookName)))"}
}

extension DeleteLifecycleHookInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: Key("LifecycleHookName"))
        }
        try container.encode("DeleteLifecycleHook", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DeleteLifecycleHookInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteLifecycleHookInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteLifecycleHookInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteLifecycleHookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteLifecycleHookInput>
    public typealias MOutput = OperationOutput<DeleteLifecycleHookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteLifecycleHookOutputError>
}

public struct DeleteLifecycleHookInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteLifecycleHookInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteLifecycleHookInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteLifecycleHookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteLifecycleHookInput>
    public typealias MOutput = OperationOutput<DeleteLifecycleHookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteLifecycleHookOutputError>
}

public struct DeleteLifecycleHookInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The name of the lifecycle hook.</p>
    public let lifecycleHookName: String?

    public init (
        autoScalingGroupName: String? = nil,
        lifecycleHookName: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.lifecycleHookName = lifecycleHookName
    }
}

extension DeleteLifecycleHookOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteLifecycleHookOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLifecycleHookOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLifecycleHookOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteLifecycleHookOutputResponse()"}
}

extension DeleteLifecycleHookOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLifecycleHookOutputResponse: Equatable {

    public init() {}
}

struct DeleteLifecycleHookOutputResponseBody: Equatable {
}

extension DeleteLifecycleHookOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteNotificationConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "DeleteNotificationConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteNotificationConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteNotificationConfigurationInput>
    public typealias MOutput = OperationOutput<DeleteNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteNotificationConfigurationOutputError>
}

extension DeleteNotificationConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteNotificationConfigurationInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), topicARN: \(String(describing: topicARN)))"}
}

extension DeleteNotificationConfigurationInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let topicARN = topicARN {
            try container.encode(topicARN, forKey: Key("TopicARN"))
        }
        try container.encode("DeleteNotificationConfiguration", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DeleteNotificationConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteNotificationConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteNotificationConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteNotificationConfigurationInput>
    public typealias MOutput = OperationOutput<DeleteNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteNotificationConfigurationOutputError>
}

public struct DeleteNotificationConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteNotificationConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteNotificationConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteNotificationConfigurationInput>
    public typealias MOutput = OperationOutput<DeleteNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteNotificationConfigurationOutputError>
}

public struct DeleteNotificationConfigurationInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS)
    ///             topic.</p>
    public let topicARN: String?

    public init (
        autoScalingGroupName: String? = nil,
        topicARN: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.topicARN = topicARN
    }
}

extension DeleteNotificationConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteNotificationConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteNotificationConfigurationOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteNotificationConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteNotificationConfigurationOutputResponse()"}
}

extension DeleteNotificationConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteNotificationConfigurationOutputResponse: Equatable {

    public init() {}
}

struct DeleteNotificationConfigurationOutputResponseBody: Equatable {
}

extension DeleteNotificationConfigurationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeletePolicyInputBodyMiddleware: Middleware {
    public let id: String = "DeletePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeletePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeletePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeletePolicyInput>
    public typealias MOutput = OperationOutput<DeletePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeletePolicyOutputError>
}

extension DeletePolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeletePolicyInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), policyName: \(String(describing: policyName)))"}
}

extension DeletePolicyInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: Key("PolicyName"))
        }
        try container.encode("DeletePolicy", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DeletePolicyInputHeadersMiddleware: Middleware {
    public let id: String = "DeletePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeletePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeletePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeletePolicyInput>
    public typealias MOutput = OperationOutput<DeletePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeletePolicyOutputError>
}

public struct DeletePolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "DeletePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeletePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeletePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeletePolicyInput>
    public typealias MOutput = OperationOutput<DeletePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeletePolicyOutputError>
}

public struct DeletePolicyInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The name or Amazon Resource Name (ARN) of the policy.</p>
    public let policyName: String?

    public init (
        autoScalingGroupName: String? = nil,
        policyName: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.policyName = policyName
    }
}

extension DeletePolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeletePolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePolicyOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeletePolicyOutputResponse()"}
}

extension DeletePolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeletePolicyOutputResponse: Equatable {

    public init() {}
}

struct DeletePolicyOutputResponseBody: Equatable {
}

extension DeletePolicyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteScheduledActionInputBodyMiddleware: Middleware {
    public let id: String = "DeleteScheduledActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteScheduledActionInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteScheduledActionInput>
    public typealias MOutput = OperationOutput<DeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteScheduledActionOutputError>
}

extension DeleteScheduledActionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteScheduledActionInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), scheduledActionName: \(String(describing: scheduledActionName)))"}
}

extension DeleteScheduledActionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: Key("ScheduledActionName"))
        }
        try container.encode("DeleteScheduledAction", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DeleteScheduledActionInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteScheduledActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteScheduledActionInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteScheduledActionInput>
    public typealias MOutput = OperationOutput<DeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteScheduledActionOutputError>
}

public struct DeleteScheduledActionInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteScheduledActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteScheduledActionInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteScheduledActionInput>
    public typealias MOutput = OperationOutput<DeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteScheduledActionOutputError>
}

public struct DeleteScheduledActionInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The name of the action to delete.</p>
    public let scheduledActionName: String?

    public init (
        autoScalingGroupName: String? = nil,
        scheduledActionName: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scheduledActionName = scheduledActionName
    }
}

extension DeleteScheduledActionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteScheduledActionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteScheduledActionOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteScheduledActionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteScheduledActionOutputResponse()"}
}

extension DeleteScheduledActionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteScheduledActionOutputResponse: Equatable {

    public init() {}
}

struct DeleteScheduledActionOutputResponseBody: Equatable {
}

extension DeleteScheduledActionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteTagsInputBodyMiddleware: Middleware {
    public let id: String = "DeleteTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteTagsInput>
    public typealias MOutput = OperationOutput<DeleteTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteTagsOutputError>
}

extension DeleteTagsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteTagsInput(tags: \(String(describing: tags)))"}
}

extension DeleteTagsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DeleteTags", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DeleteTagsInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteTagsInput>
    public typealias MOutput = OperationOutput<DeleteTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteTagsOutputError>
}

public struct DeleteTagsInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteTagsInput>
    public typealias MOutput = OperationOutput<DeleteTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteTagsOutputError>
}

public struct DeleteTagsInput: Equatable {
    /// <p>One or more tags.</p>
    public let tags: [Tag]?

    public init (
        tags: [Tag]? = nil
    )
    {
        self.tags = tags
    }
}

extension DeleteTagsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteTagsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTagsOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTagsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteTagsOutputResponse()"}
}

extension DeleteTagsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTagsOutputResponse: Equatable {

    public init() {}
}

struct DeleteTagsOutputResponseBody: Equatable {
}

extension DeleteTagsOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteWarmPoolInputBodyMiddleware: Middleware {
    public let id: String = "DeleteWarmPoolInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteWarmPoolInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteWarmPoolInput>
    public typealias MOutput = OperationOutput<DeleteWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteWarmPoolOutputError>
}

extension DeleteWarmPoolInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteWarmPoolInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), forceDelete: \(String(describing: forceDelete)))"}
}

extension DeleteWarmPoolInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let forceDelete = forceDelete {
            try container.encode(forceDelete, forKey: Key("ForceDelete"))
        }
        try container.encode("DeleteWarmPool", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DeleteWarmPoolInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteWarmPoolInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteWarmPoolInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteWarmPoolInput>
    public typealias MOutput = OperationOutput<DeleteWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteWarmPoolOutputError>
}

public struct DeleteWarmPoolInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteWarmPoolInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteWarmPoolInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteWarmPoolInput>
    public typealias MOutput = OperationOutput<DeleteWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteWarmPoolOutputError>
}

public struct DeleteWarmPoolInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>Specifies that the warm pool is to be deleted along with all of its associated
    ///             instances, without waiting for all instances to be terminated. This parameter also
    ///             deletes any outstanding lifecycle actions associated with the warm pool
    ///             instances.</p>
    public let forceDelete: Bool?

    public init (
        autoScalingGroupName: String? = nil,
        forceDelete: Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.forceDelete = forceDelete
    }
}

extension DeleteWarmPoolOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteWarmPoolOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteWarmPoolOutputError: Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteWarmPoolOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteWarmPoolOutputResponse()"}
}

extension DeleteWarmPoolOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteWarmPoolOutputResponse: Equatable {

    public init() {}
}

struct DeleteWarmPoolOutputResponseBody: Equatable {
}

extension DeleteWarmPoolOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DescribeAccountLimitsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeAccountLimitsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAccountLimitsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAccountLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAccountLimitsInput>
    public typealias MOutput = OperationOutput<DescribeAccountLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAccountLimitsOutputError>
}

extension DescribeAccountLimitsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAccountLimitsInput()"}
}

extension DescribeAccountLimitsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        try container.encode("DescribeAccountLimits", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeAccountLimitsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeAccountLimitsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAccountLimitsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAccountLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAccountLimitsInput>
    public typealias MOutput = OperationOutput<DescribeAccountLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAccountLimitsOutputError>
}

public struct DescribeAccountLimitsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeAccountLimitsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAccountLimitsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAccountLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAccountLimitsInput>
    public typealias MOutput = OperationOutput<DescribeAccountLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAccountLimitsOutputError>
}

public struct DescribeAccountLimitsInput: Equatable {

    public init() {}
}

extension DescribeAccountLimitsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAccountLimitsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAccountLimitsOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAccountLimitsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAccountLimitsOutputResponse(maxNumberOfAutoScalingGroups: \(String(describing: maxNumberOfAutoScalingGroups)), maxNumberOfLaunchConfigurations: \(String(describing: maxNumberOfLaunchConfigurations)), numberOfAutoScalingGroups: \(String(describing: numberOfAutoScalingGroups)), numberOfLaunchConfigurations: \(String(describing: numberOfLaunchConfigurations)))"}
}

extension DescribeAccountLimitsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeAccountLimitsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.maxNumberOfAutoScalingGroups = output.maxNumberOfAutoScalingGroups
            self.maxNumberOfLaunchConfigurations = output.maxNumberOfLaunchConfigurations
            self.numberOfAutoScalingGroups = output.numberOfAutoScalingGroups
            self.numberOfLaunchConfigurations = output.numberOfLaunchConfigurations
        } else {
            self.maxNumberOfAutoScalingGroups = nil
            self.maxNumberOfLaunchConfigurations = nil
            self.numberOfAutoScalingGroups = nil
            self.numberOfLaunchConfigurations = nil
        }
    }
}

public struct DescribeAccountLimitsOutputResponse: Equatable {
    /// <p>The maximum number of groups allowed for your account. The default is 200 groups per
    ///             Region.</p>
    public let maxNumberOfAutoScalingGroups: Int?
    /// <p>The maximum number of launch configurations allowed for your account. The default is
    ///             200 launch configurations per Region.</p>
    public let maxNumberOfLaunchConfigurations: Int?
    /// <p>The current number of groups for your account.</p>
    public let numberOfAutoScalingGroups: Int?
    /// <p>The current number of launch configurations for your account.</p>
    public let numberOfLaunchConfigurations: Int?

    public init (
        maxNumberOfAutoScalingGroups: Int? = nil,
        maxNumberOfLaunchConfigurations: Int? = nil,
        numberOfAutoScalingGroups: Int? = nil,
        numberOfLaunchConfigurations: Int? = nil
    )
    {
        self.maxNumberOfAutoScalingGroups = maxNumberOfAutoScalingGroups
        self.maxNumberOfLaunchConfigurations = maxNumberOfLaunchConfigurations
        self.numberOfAutoScalingGroups = numberOfAutoScalingGroups
        self.numberOfLaunchConfigurations = numberOfLaunchConfigurations
    }
}

struct DescribeAccountLimitsOutputResponseBody: Equatable {
    public let maxNumberOfAutoScalingGroups: Int?
    public let maxNumberOfLaunchConfigurations: Int?
    public let numberOfAutoScalingGroups: Int?
    public let numberOfLaunchConfigurations: Int?
}

extension DescribeAccountLimitsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxNumberOfAutoScalingGroups = "MaxNumberOfAutoScalingGroups"
        case maxNumberOfLaunchConfigurations = "MaxNumberOfLaunchConfigurations"
        case numberOfAutoScalingGroups = "NumberOfAutoScalingGroups"
        case numberOfLaunchConfigurations = "NumberOfLaunchConfigurations"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeAccountLimitsResult"))
        let maxNumberOfAutoScalingGroupsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxNumberOfAutoScalingGroups)
        maxNumberOfAutoScalingGroups = maxNumberOfAutoScalingGroupsDecoded
        let maxNumberOfLaunchConfigurationsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxNumberOfLaunchConfigurations)
        maxNumberOfLaunchConfigurations = maxNumberOfLaunchConfigurationsDecoded
        let numberOfAutoScalingGroupsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numberOfAutoScalingGroups)
        numberOfAutoScalingGroups = numberOfAutoScalingGroupsDecoded
        let numberOfLaunchConfigurationsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numberOfLaunchConfigurations)
        numberOfLaunchConfigurations = numberOfLaunchConfigurationsDecoded
    }
}

public struct DescribeAdjustmentTypesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeAdjustmentTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAdjustmentTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAdjustmentTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAdjustmentTypesInput>
    public typealias MOutput = OperationOutput<DescribeAdjustmentTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAdjustmentTypesOutputError>
}

extension DescribeAdjustmentTypesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAdjustmentTypesInput()"}
}

extension DescribeAdjustmentTypesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        try container.encode("DescribeAdjustmentTypes", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeAdjustmentTypesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeAdjustmentTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAdjustmentTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAdjustmentTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAdjustmentTypesInput>
    public typealias MOutput = OperationOutput<DescribeAdjustmentTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAdjustmentTypesOutputError>
}

public struct DescribeAdjustmentTypesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeAdjustmentTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAdjustmentTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAdjustmentTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAdjustmentTypesInput>
    public typealias MOutput = OperationOutput<DescribeAdjustmentTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAdjustmentTypesOutputError>
}

public struct DescribeAdjustmentTypesInput: Equatable {

    public init() {}
}

extension DescribeAdjustmentTypesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAdjustmentTypesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAdjustmentTypesOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAdjustmentTypesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAdjustmentTypesOutputResponse(adjustmentTypes: \(String(describing: adjustmentTypes)))"}
}

extension DescribeAdjustmentTypesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeAdjustmentTypesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.adjustmentTypes = output.adjustmentTypes
        } else {
            self.adjustmentTypes = nil
        }
    }
}

public struct DescribeAdjustmentTypesOutputResponse: Equatable {
    /// <p>The policy adjustment types.</p>
    public let adjustmentTypes: [AdjustmentType]?

    public init (
        adjustmentTypes: [AdjustmentType]? = nil
    )
    {
        self.adjustmentTypes = adjustmentTypes
    }
}

struct DescribeAdjustmentTypesOutputResponseBody: Equatable {
    public let adjustmentTypes: [AdjustmentType]?
}

extension DescribeAdjustmentTypesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case adjustmentTypes = "AdjustmentTypes"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeAdjustmentTypesResult"))
        if containerValues.contains(.adjustmentTypes) {
            struct KeyVal0{struct member{}}
            let adjustmentTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .adjustmentTypes)
            if let adjustmentTypesWrappedContainer = adjustmentTypesWrappedContainer {
                let adjustmentTypesContainer = try adjustmentTypesWrappedContainer.decodeIfPresent([AdjustmentType].self, forKey: .member)
                var adjustmentTypesBuffer:[AdjustmentType]? = nil
                if let adjustmentTypesContainer = adjustmentTypesContainer {
                    adjustmentTypesBuffer = [AdjustmentType]()
                    for structureContainer0 in adjustmentTypesContainer {
                        adjustmentTypesBuffer?.append(structureContainer0)
                    }
                }
                adjustmentTypes = adjustmentTypesBuffer
            } else {
                adjustmentTypes = []
            }
        } else {
            adjustmentTypes = nil
        }
    }
}

public struct DescribeAutoScalingGroupsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeAutoScalingGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAutoScalingGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAutoScalingGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAutoScalingGroupsInput>
    public typealias MOutput = OperationOutput<DescribeAutoScalingGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAutoScalingGroupsOutputError>
}

extension DescribeAutoScalingGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAutoScalingGroupsInput(autoScalingGroupNames: \(String(describing: autoScalingGroupNames)), maxRecords: \(String(describing: maxRecords)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeAutoScalingGroupsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupNames = autoScalingGroupNames {
            var autoScalingGroupNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AutoScalingGroupNames"))
            for (index0, xmlstringmaxlen2550) in autoScalingGroupNames.enumerated() {
                try autoScalingGroupNamesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        try container.encode("DescribeAutoScalingGroups", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeAutoScalingGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeAutoScalingGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAutoScalingGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAutoScalingGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAutoScalingGroupsInput>
    public typealias MOutput = OperationOutput<DescribeAutoScalingGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAutoScalingGroupsOutputError>
}

public struct DescribeAutoScalingGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeAutoScalingGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAutoScalingGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAutoScalingGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAutoScalingGroupsInput>
    public typealias MOutput = OperationOutput<DescribeAutoScalingGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAutoScalingGroupsOutputError>
}

public struct DescribeAutoScalingGroupsInput: Equatable {
    /// <p>The names of the Auto Scaling groups. By default, you can only specify up to 50 names. You can
    ///             optionally increase this limit using the <code>MaxRecords</code> parameter.</p>
    ///         <p>If you omit this parameter, all Auto Scaling groups are described.</p>
    public let autoScalingGroupNames: [String]?
    /// <p>The maximum number of items to return with this call. The default value is
    ///                 <code>50</code> and the maximum value is <code>100</code>.</p>
    public let maxRecords: Int?
    /// <p>The token for the next set of items to return. (You received this token from a
    ///             previous call.)</p>
    public let nextToken: String?

    public init (
        autoScalingGroupNames: [String]? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.autoScalingGroupNames = autoScalingGroupNames
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeAutoScalingGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAutoScalingGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAutoScalingGroupsOutputError: Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAutoScalingGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAutoScalingGroupsOutputResponse(autoScalingGroups: \(String(describing: autoScalingGroups)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeAutoScalingGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeAutoScalingGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.autoScalingGroups = output.autoScalingGroups
            self.nextToken = output.nextToken
        } else {
            self.autoScalingGroups = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAutoScalingGroupsOutputResponse: Equatable {
    /// <p>The groups.</p>
    public let autoScalingGroups: [AutoScalingGroup]?
    /// <p>A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 <code>NextToken</code> value when requesting the next set of items. This value is
    ///             null when there are no more items to return.</p>
    public let nextToken: String?

    public init (
        autoScalingGroups: [AutoScalingGroup]? = nil,
        nextToken: String? = nil
    )
    {
        self.autoScalingGroups = autoScalingGroups
        self.nextToken = nextToken
    }
}

struct DescribeAutoScalingGroupsOutputResponseBody: Equatable {
    public let autoScalingGroups: [AutoScalingGroup]?
    public let nextToken: String?
}

extension DescribeAutoScalingGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case autoScalingGroups = "AutoScalingGroups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeAutoScalingGroupsResult"))
        if containerValues.contains(.autoScalingGroups) {
            struct KeyVal0{struct member{}}
            let autoScalingGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingGroups)
            if let autoScalingGroupsWrappedContainer = autoScalingGroupsWrappedContainer {
                let autoScalingGroupsContainer = try autoScalingGroupsWrappedContainer.decodeIfPresent([AutoScalingGroup].self, forKey: .member)
                var autoScalingGroupsBuffer:[AutoScalingGroup]? = nil
                if let autoScalingGroupsContainer = autoScalingGroupsContainer {
                    autoScalingGroupsBuffer = [AutoScalingGroup]()
                    for structureContainer0 in autoScalingGroupsContainer {
                        autoScalingGroupsBuffer?.append(structureContainer0)
                    }
                }
                autoScalingGroups = autoScalingGroupsBuffer
            } else {
                autoScalingGroups = []
            }
        } else {
            autoScalingGroups = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeAutoScalingInstancesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeAutoScalingInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAutoScalingInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAutoScalingInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAutoScalingInstancesInput>
    public typealias MOutput = OperationOutput<DescribeAutoScalingInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAutoScalingInstancesOutputError>
}

extension DescribeAutoScalingInstancesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAutoScalingInstancesInput(instanceIds: \(String(describing: instanceIds)), maxRecords: \(String(describing: maxRecords)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeAutoScalingInstancesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let instanceIds = instanceIds {
            var instanceIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("InstanceIds"))
            for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        try container.encode("DescribeAutoScalingInstances", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeAutoScalingInstancesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeAutoScalingInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAutoScalingInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAutoScalingInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAutoScalingInstancesInput>
    public typealias MOutput = OperationOutput<DescribeAutoScalingInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAutoScalingInstancesOutputError>
}

public struct DescribeAutoScalingInstancesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeAutoScalingInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAutoScalingInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAutoScalingInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAutoScalingInstancesInput>
    public typealias MOutput = OperationOutput<DescribeAutoScalingInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAutoScalingInstancesOutputError>
}

public struct DescribeAutoScalingInstancesInput: Equatable {
    /// <p>The IDs of the instances. If you omit this parameter, all Auto Scaling instances are
    ///             described. If you specify an ID that does not exist, it is ignored with no error.</p>
    ///         <p>Array Members: Maximum number of 50 items.</p>
    public let instanceIds: [String]?
    /// <p>The maximum number of items to return with this call. The default value is
    ///                 <code>50</code> and the maximum value is <code>50</code>.</p>
    public let maxRecords: Int?
    /// <p>The token for the next set of items to return. (You received this token from a
    ///             previous call.)</p>
    public let nextToken: String?

    public init (
        instanceIds: [String]? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.instanceIds = instanceIds
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeAutoScalingInstancesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAutoScalingInstancesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAutoScalingInstancesOutputError: Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAutoScalingInstancesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAutoScalingInstancesOutputResponse(autoScalingInstances: \(String(describing: autoScalingInstances)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeAutoScalingInstancesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeAutoScalingInstancesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.autoScalingInstances = output.autoScalingInstances
            self.nextToken = output.nextToken
        } else {
            self.autoScalingInstances = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAutoScalingInstancesOutputResponse: Equatable {
    /// <p>The instances.</p>
    public let autoScalingInstances: [AutoScalingInstanceDetails]?
    /// <p>A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 <code>NextToken</code> value when requesting the next set of items. This value is
    ///             null when there are no more items to return.</p>
    public let nextToken: String?

    public init (
        autoScalingInstances: [AutoScalingInstanceDetails]? = nil,
        nextToken: String? = nil
    )
    {
        self.autoScalingInstances = autoScalingInstances
        self.nextToken = nextToken
    }
}

struct DescribeAutoScalingInstancesOutputResponseBody: Equatable {
    public let autoScalingInstances: [AutoScalingInstanceDetails]?
    public let nextToken: String?
}

extension DescribeAutoScalingInstancesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case autoScalingInstances = "AutoScalingInstances"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeAutoScalingInstancesResult"))
        if containerValues.contains(.autoScalingInstances) {
            struct KeyVal0{struct member{}}
            let autoScalingInstancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingInstances)
            if let autoScalingInstancesWrappedContainer = autoScalingInstancesWrappedContainer {
                let autoScalingInstancesContainer = try autoScalingInstancesWrappedContainer.decodeIfPresent([AutoScalingInstanceDetails].self, forKey: .member)
                var autoScalingInstancesBuffer:[AutoScalingInstanceDetails]? = nil
                if let autoScalingInstancesContainer = autoScalingInstancesContainer {
                    autoScalingInstancesBuffer = [AutoScalingInstanceDetails]()
                    for structureContainer0 in autoScalingInstancesContainer {
                        autoScalingInstancesBuffer?.append(structureContainer0)
                    }
                }
                autoScalingInstances = autoScalingInstancesBuffer
            } else {
                autoScalingInstances = []
            }
        } else {
            autoScalingInstances = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeAutoScalingNotificationTypesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeAutoScalingNotificationTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAutoScalingNotificationTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAutoScalingNotificationTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAutoScalingNotificationTypesInput>
    public typealias MOutput = OperationOutput<DescribeAutoScalingNotificationTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAutoScalingNotificationTypesOutputError>
}

extension DescribeAutoScalingNotificationTypesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAutoScalingNotificationTypesInput()"}
}

extension DescribeAutoScalingNotificationTypesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        try container.encode("DescribeAutoScalingNotificationTypes", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeAutoScalingNotificationTypesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeAutoScalingNotificationTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAutoScalingNotificationTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAutoScalingNotificationTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAutoScalingNotificationTypesInput>
    public typealias MOutput = OperationOutput<DescribeAutoScalingNotificationTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAutoScalingNotificationTypesOutputError>
}

public struct DescribeAutoScalingNotificationTypesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeAutoScalingNotificationTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAutoScalingNotificationTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAutoScalingNotificationTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAutoScalingNotificationTypesInput>
    public typealias MOutput = OperationOutput<DescribeAutoScalingNotificationTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAutoScalingNotificationTypesOutputError>
}

public struct DescribeAutoScalingNotificationTypesInput: Equatable {

    public init() {}
}

extension DescribeAutoScalingNotificationTypesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAutoScalingNotificationTypesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAutoScalingNotificationTypesOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAutoScalingNotificationTypesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAutoScalingNotificationTypesOutputResponse(autoScalingNotificationTypes: \(String(describing: autoScalingNotificationTypes)))"}
}

extension DescribeAutoScalingNotificationTypesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeAutoScalingNotificationTypesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.autoScalingNotificationTypes = output.autoScalingNotificationTypes
        } else {
            self.autoScalingNotificationTypes = nil
        }
    }
}

public struct DescribeAutoScalingNotificationTypesOutputResponse: Equatable {
    /// <p>The notification types.</p>
    public let autoScalingNotificationTypes: [String]?

    public init (
        autoScalingNotificationTypes: [String]? = nil
    )
    {
        self.autoScalingNotificationTypes = autoScalingNotificationTypes
    }
}

struct DescribeAutoScalingNotificationTypesOutputResponseBody: Equatable {
    public let autoScalingNotificationTypes: [String]?
}

extension DescribeAutoScalingNotificationTypesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case autoScalingNotificationTypes = "AutoScalingNotificationTypes"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeAutoScalingNotificationTypesResult"))
        if containerValues.contains(.autoScalingNotificationTypes) {
            struct KeyVal0{struct member{}}
            let autoScalingNotificationTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingNotificationTypes)
            if let autoScalingNotificationTypesWrappedContainer = autoScalingNotificationTypesWrappedContainer {
                let autoScalingNotificationTypesContainer = try autoScalingNotificationTypesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var autoScalingNotificationTypesBuffer:[String]? = nil
                if let autoScalingNotificationTypesContainer = autoScalingNotificationTypesContainer {
                    autoScalingNotificationTypesBuffer = [String]()
                    for stringContainer0 in autoScalingNotificationTypesContainer {
                        autoScalingNotificationTypesBuffer?.append(stringContainer0)
                    }
                }
                autoScalingNotificationTypes = autoScalingNotificationTypesBuffer
            } else {
                autoScalingNotificationTypes = []
            }
        } else {
            autoScalingNotificationTypes = nil
        }
    }
}

public struct DescribeInstanceRefreshesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeInstanceRefreshesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeInstanceRefreshesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeInstanceRefreshesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeInstanceRefreshesInput>
    public typealias MOutput = OperationOutput<DescribeInstanceRefreshesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeInstanceRefreshesOutputError>
}

extension DescribeInstanceRefreshesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeInstanceRefreshesInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), instanceRefreshIds: \(String(describing: instanceRefreshIds)), maxRecords: \(String(describing: maxRecords)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeInstanceRefreshesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let instanceRefreshIds = instanceRefreshIds {
            var instanceRefreshIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("InstanceRefreshIds"))
            for (index0, xmlstringmaxlen2550) in instanceRefreshIds.enumerated() {
                try instanceRefreshIdsContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        try container.encode("DescribeInstanceRefreshes", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeInstanceRefreshesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeInstanceRefreshesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeInstanceRefreshesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeInstanceRefreshesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeInstanceRefreshesInput>
    public typealias MOutput = OperationOutput<DescribeInstanceRefreshesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeInstanceRefreshesOutputError>
}

public struct DescribeInstanceRefreshesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeInstanceRefreshesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeInstanceRefreshesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeInstanceRefreshesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeInstanceRefreshesInput>
    public typealias MOutput = OperationOutput<DescribeInstanceRefreshesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeInstanceRefreshesOutputError>
}

public struct DescribeInstanceRefreshesInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>One or more instance refresh IDs.</p>
    public let instanceRefreshIds: [String]?
    /// <p>The maximum number of items to return with this call. The default value is
    ///                 <code>50</code> and the maximum value is <code>100</code>.</p>
    public let maxRecords: Int?
    /// <p>The token for the next set of items to return. (You received this token from a
    ///             previous call.)</p>
    public let nextToken: String?

    public init (
        autoScalingGroupName: String? = nil,
        instanceRefreshIds: [String]? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceRefreshIds = instanceRefreshIds
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeInstanceRefreshesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeInstanceRefreshesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInstanceRefreshesOutputError: Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInstanceRefreshesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeInstanceRefreshesOutputResponse(instanceRefreshes: \(String(describing: instanceRefreshes)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeInstanceRefreshesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeInstanceRefreshesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.instanceRefreshes = output.instanceRefreshes
            self.nextToken = output.nextToken
        } else {
            self.instanceRefreshes = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeInstanceRefreshesOutputResponse: Equatable {
    /// <p>The instance refreshes for the specified group.</p>
    public let instanceRefreshes: [InstanceRefresh]?
    /// <p>A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 <code>NextToken</code> value when requesting the next set of items. This value is
    ///             null when there are no more items to return.</p>
    public let nextToken: String?

    public init (
        instanceRefreshes: [InstanceRefresh]? = nil,
        nextToken: String? = nil
    )
    {
        self.instanceRefreshes = instanceRefreshes
        self.nextToken = nextToken
    }
}

struct DescribeInstanceRefreshesOutputResponseBody: Equatable {
    public let instanceRefreshes: [InstanceRefresh]?
    public let nextToken: String?
}

extension DescribeInstanceRefreshesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceRefreshes = "InstanceRefreshes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeInstanceRefreshesResult"))
        if containerValues.contains(.instanceRefreshes) {
            struct KeyVal0{struct member{}}
            let instanceRefreshesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceRefreshes)
            if let instanceRefreshesWrappedContainer = instanceRefreshesWrappedContainer {
                let instanceRefreshesContainer = try instanceRefreshesWrappedContainer.decodeIfPresent([InstanceRefresh].self, forKey: .member)
                var instanceRefreshesBuffer:[InstanceRefresh]? = nil
                if let instanceRefreshesContainer = instanceRefreshesContainer {
                    instanceRefreshesBuffer = [InstanceRefresh]()
                    for structureContainer0 in instanceRefreshesContainer {
                        instanceRefreshesBuffer?.append(structureContainer0)
                    }
                }
                instanceRefreshes = instanceRefreshesBuffer
            } else {
                instanceRefreshes = []
            }
        } else {
            instanceRefreshes = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeLaunchConfigurationsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeLaunchConfigurationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLaunchConfigurationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLaunchConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLaunchConfigurationsInput>
    public typealias MOutput = OperationOutput<DescribeLaunchConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLaunchConfigurationsOutputError>
}

extension DescribeLaunchConfigurationsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLaunchConfigurationsInput(launchConfigurationNames: \(String(describing: launchConfigurationNames)), maxRecords: \(String(describing: maxRecords)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeLaunchConfigurationsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let launchConfigurationNames = launchConfigurationNames {
            var launchConfigurationNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LaunchConfigurationNames"))
            for (index0, xmlstringmaxlen2550) in launchConfigurationNames.enumerated() {
                try launchConfigurationNamesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        try container.encode("DescribeLaunchConfigurations", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeLaunchConfigurationsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeLaunchConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLaunchConfigurationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLaunchConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLaunchConfigurationsInput>
    public typealias MOutput = OperationOutput<DescribeLaunchConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLaunchConfigurationsOutputError>
}

public struct DescribeLaunchConfigurationsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeLaunchConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLaunchConfigurationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLaunchConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLaunchConfigurationsInput>
    public typealias MOutput = OperationOutput<DescribeLaunchConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLaunchConfigurationsOutputError>
}

public struct DescribeLaunchConfigurationsInput: Equatable {
    /// <p>The launch configuration names. If you omit this parameter, all launch configurations
    ///             are described.</p>
    ///         <p>Array Members: Maximum number of 50 items.</p>
    public let launchConfigurationNames: [String]?
    /// <p>The maximum number of items to return with this call. The default value is
    ///                 <code>50</code> and the maximum value is <code>100</code>.</p>
    public let maxRecords: Int?
    /// <p>The token for the next set of items to return. (You received this token from a
    ///             previous call.)</p>
    public let nextToken: String?

    public init (
        launchConfigurationNames: [String]? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.launchConfigurationNames = launchConfigurationNames
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeLaunchConfigurationsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLaunchConfigurationsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLaunchConfigurationsOutputError: Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLaunchConfigurationsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLaunchConfigurationsOutputResponse(launchConfigurations: \(String(describing: launchConfigurations)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeLaunchConfigurationsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeLaunchConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.launchConfigurations = output.launchConfigurations
            self.nextToken = output.nextToken
        } else {
            self.launchConfigurations = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLaunchConfigurationsOutputResponse: Equatable {
    /// <p>The launch configurations.</p>
    public let launchConfigurations: [LaunchConfiguration]?
    /// <p>A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 <code>NextToken</code> value when requesting the next set of items. This value is
    ///             null when there are no more items to return.</p>
    public let nextToken: String?

    public init (
        launchConfigurations: [LaunchConfiguration]? = nil,
        nextToken: String? = nil
    )
    {
        self.launchConfigurations = launchConfigurations
        self.nextToken = nextToken
    }
}

struct DescribeLaunchConfigurationsOutputResponseBody: Equatable {
    public let launchConfigurations: [LaunchConfiguration]?
    public let nextToken: String?
}

extension DescribeLaunchConfigurationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case launchConfigurations = "LaunchConfigurations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeLaunchConfigurationsResult"))
        if containerValues.contains(.launchConfigurations) {
            struct KeyVal0{struct member{}}
            let launchConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .launchConfigurations)
            if let launchConfigurationsWrappedContainer = launchConfigurationsWrappedContainer {
                let launchConfigurationsContainer = try launchConfigurationsWrappedContainer.decodeIfPresent([LaunchConfiguration].self, forKey: .member)
                var launchConfigurationsBuffer:[LaunchConfiguration]? = nil
                if let launchConfigurationsContainer = launchConfigurationsContainer {
                    launchConfigurationsBuffer = [LaunchConfiguration]()
                    for structureContainer0 in launchConfigurationsContainer {
                        launchConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                launchConfigurations = launchConfigurationsBuffer
            } else {
                launchConfigurations = []
            }
        } else {
            launchConfigurations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeLifecycleHookTypesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeLifecycleHookTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLifecycleHookTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLifecycleHookTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLifecycleHookTypesInput>
    public typealias MOutput = OperationOutput<DescribeLifecycleHookTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLifecycleHookTypesOutputError>
}

extension DescribeLifecycleHookTypesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLifecycleHookTypesInput()"}
}

extension DescribeLifecycleHookTypesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        try container.encode("DescribeLifecycleHookTypes", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeLifecycleHookTypesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeLifecycleHookTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLifecycleHookTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLifecycleHookTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLifecycleHookTypesInput>
    public typealias MOutput = OperationOutput<DescribeLifecycleHookTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLifecycleHookTypesOutputError>
}

public struct DescribeLifecycleHookTypesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeLifecycleHookTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLifecycleHookTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLifecycleHookTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLifecycleHookTypesInput>
    public typealias MOutput = OperationOutput<DescribeLifecycleHookTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLifecycleHookTypesOutputError>
}

public struct DescribeLifecycleHookTypesInput: Equatable {

    public init() {}
}

extension DescribeLifecycleHookTypesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLifecycleHookTypesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLifecycleHookTypesOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLifecycleHookTypesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLifecycleHookTypesOutputResponse(lifecycleHookTypes: \(String(describing: lifecycleHookTypes)))"}
}

extension DescribeLifecycleHookTypesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeLifecycleHookTypesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.lifecycleHookTypes = output.lifecycleHookTypes
        } else {
            self.lifecycleHookTypes = nil
        }
    }
}

public struct DescribeLifecycleHookTypesOutputResponse: Equatable {
    /// <p>The lifecycle hook types.</p>
    public let lifecycleHookTypes: [String]?

    public init (
        lifecycleHookTypes: [String]? = nil
    )
    {
        self.lifecycleHookTypes = lifecycleHookTypes
    }
}

struct DescribeLifecycleHookTypesOutputResponseBody: Equatable {
    public let lifecycleHookTypes: [String]?
}

extension DescribeLifecycleHookTypesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case lifecycleHookTypes = "LifecycleHookTypes"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeLifecycleHookTypesResult"))
        if containerValues.contains(.lifecycleHookTypes) {
            struct KeyVal0{struct member{}}
            let lifecycleHookTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .lifecycleHookTypes)
            if let lifecycleHookTypesWrappedContainer = lifecycleHookTypesWrappedContainer {
                let lifecycleHookTypesContainer = try lifecycleHookTypesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var lifecycleHookTypesBuffer:[String]? = nil
                if let lifecycleHookTypesContainer = lifecycleHookTypesContainer {
                    lifecycleHookTypesBuffer = [String]()
                    for stringContainer0 in lifecycleHookTypesContainer {
                        lifecycleHookTypesBuffer?.append(stringContainer0)
                    }
                }
                lifecycleHookTypes = lifecycleHookTypesBuffer
            } else {
                lifecycleHookTypes = []
            }
        } else {
            lifecycleHookTypes = nil
        }
    }
}

public struct DescribeLifecycleHooksInputBodyMiddleware: Middleware {
    public let id: String = "DescribeLifecycleHooksInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLifecycleHooksInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLifecycleHooksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLifecycleHooksInput>
    public typealias MOutput = OperationOutput<DescribeLifecycleHooksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLifecycleHooksOutputError>
}

extension DescribeLifecycleHooksInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLifecycleHooksInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), lifecycleHookNames: \(String(describing: lifecycleHookNames)))"}
}

extension DescribeLifecycleHooksInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let lifecycleHookNames = lifecycleHookNames {
            var lifecycleHookNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LifecycleHookNames"))
            for (index0, asciistringmaxlen2550) in lifecycleHookNames.enumerated() {
                try lifecycleHookNamesContainer.encode(asciistringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DescribeLifecycleHooks", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeLifecycleHooksInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeLifecycleHooksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLifecycleHooksInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLifecycleHooksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLifecycleHooksInput>
    public typealias MOutput = OperationOutput<DescribeLifecycleHooksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLifecycleHooksOutputError>
}

public struct DescribeLifecycleHooksInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeLifecycleHooksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLifecycleHooksInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLifecycleHooksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLifecycleHooksInput>
    public typealias MOutput = OperationOutput<DescribeLifecycleHooksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLifecycleHooksOutputError>
}

public struct DescribeLifecycleHooksInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle
    ///             hooks are described.</p>
    public let lifecycleHookNames: [String]?

    public init (
        autoScalingGroupName: String? = nil,
        lifecycleHookNames: [String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.lifecycleHookNames = lifecycleHookNames
    }
}

extension DescribeLifecycleHooksOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLifecycleHooksOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLifecycleHooksOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLifecycleHooksOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLifecycleHooksOutputResponse(lifecycleHooks: \(String(describing: lifecycleHooks)))"}
}

extension DescribeLifecycleHooksOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeLifecycleHooksOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.lifecycleHooks = output.lifecycleHooks
        } else {
            self.lifecycleHooks = nil
        }
    }
}

public struct DescribeLifecycleHooksOutputResponse: Equatable {
    /// <p>The lifecycle hooks for the specified group.</p>
    public let lifecycleHooks: [LifecycleHook]?

    public init (
        lifecycleHooks: [LifecycleHook]? = nil
    )
    {
        self.lifecycleHooks = lifecycleHooks
    }
}

struct DescribeLifecycleHooksOutputResponseBody: Equatable {
    public let lifecycleHooks: [LifecycleHook]?
}

extension DescribeLifecycleHooksOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case lifecycleHooks = "LifecycleHooks"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeLifecycleHooksResult"))
        if containerValues.contains(.lifecycleHooks) {
            struct KeyVal0{struct member{}}
            let lifecycleHooksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .lifecycleHooks)
            if let lifecycleHooksWrappedContainer = lifecycleHooksWrappedContainer {
                let lifecycleHooksContainer = try lifecycleHooksWrappedContainer.decodeIfPresent([LifecycleHook].self, forKey: .member)
                var lifecycleHooksBuffer:[LifecycleHook]? = nil
                if let lifecycleHooksContainer = lifecycleHooksContainer {
                    lifecycleHooksBuffer = [LifecycleHook]()
                    for structureContainer0 in lifecycleHooksContainer {
                        lifecycleHooksBuffer?.append(structureContainer0)
                    }
                }
                lifecycleHooks = lifecycleHooksBuffer
            } else {
                lifecycleHooks = []
            }
        } else {
            lifecycleHooks = nil
        }
    }
}

public struct DescribeLoadBalancerTargetGroupsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeLoadBalancerTargetGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLoadBalancerTargetGroupsInput>
    public typealias MOutput = OperationOutput<DescribeLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLoadBalancerTargetGroupsOutputError>
}

extension DescribeLoadBalancerTargetGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLoadBalancerTargetGroupsInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), maxRecords: \(String(describing: maxRecords)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeLoadBalancerTargetGroupsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        try container.encode("DescribeLoadBalancerTargetGroups", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeLoadBalancerTargetGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeLoadBalancerTargetGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLoadBalancerTargetGroupsInput>
    public typealias MOutput = OperationOutput<DescribeLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLoadBalancerTargetGroupsOutputError>
}

public struct DescribeLoadBalancerTargetGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeLoadBalancerTargetGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLoadBalancerTargetGroupsInput>
    public typealias MOutput = OperationOutput<DescribeLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLoadBalancerTargetGroupsOutputError>
}

public struct DescribeLoadBalancerTargetGroupsInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The maximum number of items to return with this call. The default value is
    ///                 <code>100</code> and the maximum value is <code>100</code>.</p>
    public let maxRecords: Int?
    /// <p>The token for the next set of items to return. (You received this token from a
    ///             previous call.)</p>
    public let nextToken: String?

    public init (
        autoScalingGroupName: String? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeLoadBalancerTargetGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLoadBalancerTargetGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLoadBalancerTargetGroupsOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLoadBalancerTargetGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLoadBalancerTargetGroupsOutputResponse(loadBalancerTargetGroups: \(String(describing: loadBalancerTargetGroups)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeLoadBalancerTargetGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeLoadBalancerTargetGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.loadBalancerTargetGroups = output.loadBalancerTargetGroups
            self.nextToken = output.nextToken
        } else {
            self.loadBalancerTargetGroups = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLoadBalancerTargetGroupsOutputResponse: Equatable {
    /// <p>Information about the target groups.</p>
    public let loadBalancerTargetGroups: [LoadBalancerTargetGroupState]?
    /// <p>A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 <code>NextToken</code> value when requesting the next set of items. This value is
    ///             null when there are no more items to return.</p>
    public let nextToken: String?

    public init (
        loadBalancerTargetGroups: [LoadBalancerTargetGroupState]? = nil,
        nextToken: String? = nil
    )
    {
        self.loadBalancerTargetGroups = loadBalancerTargetGroups
        self.nextToken = nextToken
    }
}

struct DescribeLoadBalancerTargetGroupsOutputResponseBody: Equatable {
    public let loadBalancerTargetGroups: [LoadBalancerTargetGroupState]?
    public let nextToken: String?
}

extension DescribeLoadBalancerTargetGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case loadBalancerTargetGroups = "LoadBalancerTargetGroups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeLoadBalancerTargetGroupsResult"))
        if containerValues.contains(.loadBalancerTargetGroups) {
            struct KeyVal0{struct member{}}
            let loadBalancerTargetGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerTargetGroups)
            if let loadBalancerTargetGroupsWrappedContainer = loadBalancerTargetGroupsWrappedContainer {
                let loadBalancerTargetGroupsContainer = try loadBalancerTargetGroupsWrappedContainer.decodeIfPresent([LoadBalancerTargetGroupState].self, forKey: .member)
                var loadBalancerTargetGroupsBuffer:[LoadBalancerTargetGroupState]? = nil
                if let loadBalancerTargetGroupsContainer = loadBalancerTargetGroupsContainer {
                    loadBalancerTargetGroupsBuffer = [LoadBalancerTargetGroupState]()
                    for structureContainer0 in loadBalancerTargetGroupsContainer {
                        loadBalancerTargetGroupsBuffer?.append(structureContainer0)
                    }
                }
                loadBalancerTargetGroups = loadBalancerTargetGroupsBuffer
            } else {
                loadBalancerTargetGroups = []
            }
        } else {
            loadBalancerTargetGroups = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeLoadBalancersInputBodyMiddleware: Middleware {
    public let id: String = "DescribeLoadBalancersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLoadBalancersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLoadBalancersInput>
    public typealias MOutput = OperationOutput<DescribeLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLoadBalancersOutputError>
}

extension DescribeLoadBalancersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLoadBalancersInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), maxRecords: \(String(describing: maxRecords)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeLoadBalancersInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        try container.encode("DescribeLoadBalancers", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeLoadBalancersInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeLoadBalancersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLoadBalancersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLoadBalancersInput>
    public typealias MOutput = OperationOutput<DescribeLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLoadBalancersOutputError>
}

public struct DescribeLoadBalancersInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeLoadBalancersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLoadBalancersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLoadBalancersInput>
    public typealias MOutput = OperationOutput<DescribeLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLoadBalancersOutputError>
}

public struct DescribeLoadBalancersInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The maximum number of items to return with this call. The default value is
    ///                 <code>100</code> and the maximum value is <code>100</code>.</p>
    public let maxRecords: Int?
    /// <p>The token for the next set of items to return. (You received this token from a
    ///             previous call.)</p>
    public let nextToken: String?

    public init (
        autoScalingGroupName: String? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeLoadBalancersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLoadBalancersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLoadBalancersOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLoadBalancersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLoadBalancersOutputResponse(loadBalancers: \(String(describing: loadBalancers)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeLoadBalancersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeLoadBalancersOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.loadBalancers = output.loadBalancers
            self.nextToken = output.nextToken
        } else {
            self.loadBalancers = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLoadBalancersOutputResponse: Equatable {
    /// <p>The load balancers.</p>
    public let loadBalancers: [LoadBalancerState]?
    /// <p>A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 <code>NextToken</code> value when requesting the next set of items. This value is
    ///             null when there are no more items to return.</p>
    public let nextToken: String?

    public init (
        loadBalancers: [LoadBalancerState]? = nil,
        nextToken: String? = nil
    )
    {
        self.loadBalancers = loadBalancers
        self.nextToken = nextToken
    }
}

struct DescribeLoadBalancersOutputResponseBody: Equatable {
    public let loadBalancers: [LoadBalancerState]?
    public let nextToken: String?
}

extension DescribeLoadBalancersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case loadBalancers = "LoadBalancers"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeLoadBalancersResult"))
        if containerValues.contains(.loadBalancers) {
            struct KeyVal0{struct member{}}
            let loadBalancersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancers)
            if let loadBalancersWrappedContainer = loadBalancersWrappedContainer {
                let loadBalancersContainer = try loadBalancersWrappedContainer.decodeIfPresent([LoadBalancerState].self, forKey: .member)
                var loadBalancersBuffer:[LoadBalancerState]? = nil
                if let loadBalancersContainer = loadBalancersContainer {
                    loadBalancersBuffer = [LoadBalancerState]()
                    for structureContainer0 in loadBalancersContainer {
                        loadBalancersBuffer?.append(structureContainer0)
                    }
                }
                loadBalancers = loadBalancersBuffer
            } else {
                loadBalancers = []
            }
        } else {
            loadBalancers = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeMetricCollectionTypesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeMetricCollectionTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMetricCollectionTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMetricCollectionTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMetricCollectionTypesInput>
    public typealias MOutput = OperationOutput<DescribeMetricCollectionTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMetricCollectionTypesOutputError>
}

extension DescribeMetricCollectionTypesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeMetricCollectionTypesInput()"}
}

extension DescribeMetricCollectionTypesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        try container.encode("DescribeMetricCollectionTypes", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeMetricCollectionTypesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeMetricCollectionTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMetricCollectionTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMetricCollectionTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMetricCollectionTypesInput>
    public typealias MOutput = OperationOutput<DescribeMetricCollectionTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMetricCollectionTypesOutputError>
}

public struct DescribeMetricCollectionTypesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeMetricCollectionTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMetricCollectionTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMetricCollectionTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMetricCollectionTypesInput>
    public typealias MOutput = OperationOutput<DescribeMetricCollectionTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMetricCollectionTypesOutputError>
}

public struct DescribeMetricCollectionTypesInput: Equatable {

    public init() {}
}

extension DescribeMetricCollectionTypesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeMetricCollectionTypesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeMetricCollectionTypesOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMetricCollectionTypesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeMetricCollectionTypesOutputResponse(granularities: \(String(describing: granularities)), metrics: \(String(describing: metrics)))"}
}

extension DescribeMetricCollectionTypesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeMetricCollectionTypesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.granularities = output.granularities
            self.metrics = output.metrics
        } else {
            self.granularities = nil
            self.metrics = nil
        }
    }
}

public struct DescribeMetricCollectionTypesOutputResponse: Equatable {
    /// <p>The granularities for the metrics.</p>
    public let granularities: [MetricGranularityType]?
    /// <p>One or more metrics.</p>
    public let metrics: [MetricCollectionType]?

    public init (
        granularities: [MetricGranularityType]? = nil,
        metrics: [MetricCollectionType]? = nil
    )
    {
        self.granularities = granularities
        self.metrics = metrics
    }
}

struct DescribeMetricCollectionTypesOutputResponseBody: Equatable {
    public let metrics: [MetricCollectionType]?
    public let granularities: [MetricGranularityType]?
}

extension DescribeMetricCollectionTypesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case granularities = "Granularities"
        case metrics = "Metrics"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeMetricCollectionTypesResult"))
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([MetricCollectionType].self, forKey: .member)
                var metricsBuffer:[MetricCollectionType]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [MetricCollectionType]()
                    for structureContainer0 in metricsContainer {
                        metricsBuffer?.append(structureContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
        if containerValues.contains(.granularities) {
            struct KeyVal0{struct member{}}
            let granularitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .granularities)
            if let granularitiesWrappedContainer = granularitiesWrappedContainer {
                let granularitiesContainer = try granularitiesWrappedContainer.decodeIfPresent([MetricGranularityType].self, forKey: .member)
                var granularitiesBuffer:[MetricGranularityType]? = nil
                if let granularitiesContainer = granularitiesContainer {
                    granularitiesBuffer = [MetricGranularityType]()
                    for structureContainer0 in granularitiesContainer {
                        granularitiesBuffer?.append(structureContainer0)
                    }
                }
                granularities = granularitiesBuffer
            } else {
                granularities = []
            }
        } else {
            granularities = nil
        }
    }
}

public struct DescribeNotificationConfigurationsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeNotificationConfigurationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeNotificationConfigurationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeNotificationConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeNotificationConfigurationsInput>
    public typealias MOutput = OperationOutput<DescribeNotificationConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeNotificationConfigurationsOutputError>
}

extension DescribeNotificationConfigurationsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeNotificationConfigurationsInput(autoScalingGroupNames: \(String(describing: autoScalingGroupNames)), maxRecords: \(String(describing: maxRecords)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeNotificationConfigurationsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupNames = autoScalingGroupNames {
            var autoScalingGroupNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AutoScalingGroupNames"))
            for (index0, xmlstringmaxlen2550) in autoScalingGroupNames.enumerated() {
                try autoScalingGroupNamesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        try container.encode("DescribeNotificationConfigurations", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeNotificationConfigurationsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeNotificationConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeNotificationConfigurationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeNotificationConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeNotificationConfigurationsInput>
    public typealias MOutput = OperationOutput<DescribeNotificationConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeNotificationConfigurationsOutputError>
}

public struct DescribeNotificationConfigurationsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeNotificationConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeNotificationConfigurationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeNotificationConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeNotificationConfigurationsInput>
    public typealias MOutput = OperationOutput<DescribeNotificationConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeNotificationConfigurationsOutputError>
}

public struct DescribeNotificationConfigurationsInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupNames: [String]?
    /// <p>The maximum number of items to return with this call. The default value is
    ///                 <code>50</code> and the maximum value is <code>100</code>.</p>
    public let maxRecords: Int?
    /// <p>The token for the next set of items to return. (You received this token from a
    ///             previous call.)</p>
    public let nextToken: String?

    public init (
        autoScalingGroupNames: [String]? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.autoScalingGroupNames = autoScalingGroupNames
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeNotificationConfigurationsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeNotificationConfigurationsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeNotificationConfigurationsOutputError: Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeNotificationConfigurationsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeNotificationConfigurationsOutputResponse(nextToken: \(String(describing: nextToken)), notificationConfigurations: \(String(describing: notificationConfigurations)))"}
}

extension DescribeNotificationConfigurationsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeNotificationConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.notificationConfigurations = output.notificationConfigurations
        } else {
            self.nextToken = nil
            self.notificationConfigurations = nil
        }
    }
}

public struct DescribeNotificationConfigurationsOutputResponse: Equatable {
    /// <p>A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 <code>NextToken</code> value when requesting the next set of items. This value is
    ///             null when there are no more items to return.</p>
    public let nextToken: String?
    /// <p>The notification configurations.</p>
    public let notificationConfigurations: [NotificationConfiguration]?

    public init (
        nextToken: String? = nil,
        notificationConfigurations: [NotificationConfiguration]? = nil
    )
    {
        self.nextToken = nextToken
        self.notificationConfigurations = notificationConfigurations
    }
}

struct DescribeNotificationConfigurationsOutputResponseBody: Equatable {
    public let notificationConfigurations: [NotificationConfiguration]?
    public let nextToken: String?
}

extension DescribeNotificationConfigurationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case notificationConfigurations = "NotificationConfigurations"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeNotificationConfigurationsResult"))
        if containerValues.contains(.notificationConfigurations) {
            struct KeyVal0{struct member{}}
            let notificationConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationConfigurations)
            if let notificationConfigurationsWrappedContainer = notificationConfigurationsWrappedContainer {
                let notificationConfigurationsContainer = try notificationConfigurationsWrappedContainer.decodeIfPresent([NotificationConfiguration].self, forKey: .member)
                var notificationConfigurationsBuffer:[NotificationConfiguration]? = nil
                if let notificationConfigurationsContainer = notificationConfigurationsContainer {
                    notificationConfigurationsBuffer = [NotificationConfiguration]()
                    for structureContainer0 in notificationConfigurationsContainer {
                        notificationConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                notificationConfigurations = notificationConfigurationsBuffer
            } else {
                notificationConfigurations = []
            }
        } else {
            notificationConfigurations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribePoliciesInputBodyMiddleware: Middleware {
    public let id: String = "DescribePoliciesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribePoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribePoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribePoliciesInput>
    public typealias MOutput = OperationOutput<DescribePoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribePoliciesOutputError>
}

extension DescribePoliciesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribePoliciesInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), maxRecords: \(String(describing: maxRecords)), nextToken: \(String(describing: nextToken)), policyNames: \(String(describing: policyNames)), policyTypes: \(String(describing: policyTypes)))"}
}

extension DescribePoliciesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        if let policyNames = policyNames {
            var policyNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PolicyNames"))
            for (index0, resourcename0) in policyNames.enumerated() {
                try policyNamesContainer.encode(resourcename0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let policyTypes = policyTypes {
            var policyTypesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PolicyTypes"))
            for (index0, xmlstringmaxlen640) in policyTypes.enumerated() {
                try policyTypesContainer.encode(xmlstringmaxlen640, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DescribePolicies", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribePoliciesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribePoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribePoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribePoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribePoliciesInput>
    public typealias MOutput = OperationOutput<DescribePoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribePoliciesOutputError>
}

public struct DescribePoliciesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribePoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribePoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribePoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribePoliciesInput>
    public typealias MOutput = OperationOutput<DescribePoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribePoliciesOutputError>
}

public struct DescribePoliciesInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The maximum number of items to be returned with each call. The default value is
    ///                 <code>50</code> and the maximum value is <code>100</code>.</p>
    public let maxRecords: Int?
    /// <p>The token for the next set of items to return. (You received this token from a
    ///             previous call.)</p>
    public let nextToken: String?
    /// <p>The names of one or more policies. If you omit this parameter, all policies are
    ///             described. If a group name is provided, the results are limited to that group. If you
    ///             specify an unknown policy name, it is ignored with no error.</p>
    ///         <p>Array Members: Maximum number of 50 items.</p>
    public let policyNames: [String]?
    /// <p>One or more policy types. The valid values are <code>SimpleScaling</code>,
    ///                 <code>StepScaling</code>, <code>TargetTrackingScaling</code>, and
    ///                 <code>PredictiveScaling</code>.</p>
    public let policyTypes: [String]?

    public init (
        autoScalingGroupName: String? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil,
        policyNames: [String]? = nil,
        policyTypes: [String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.policyNames = policyNames
        self.policyTypes = policyTypes
    }
}

extension DescribePoliciesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribePoliciesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribePoliciesOutputError: Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePoliciesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribePoliciesOutputResponse(nextToken: \(String(describing: nextToken)), scalingPolicies: \(String(describing: scalingPolicies)))"}
}

extension DescribePoliciesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribePoliciesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.scalingPolicies = output.scalingPolicies
        } else {
            self.nextToken = nil
            self.scalingPolicies = nil
        }
    }
}

public struct DescribePoliciesOutputResponse: Equatable {
    /// <p>A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 <code>NextToken</code> value when requesting the next set of items. This value is
    ///             null when there are no more items to return.</p>
    public let nextToken: String?
    /// <p>The scaling policies.</p>
    public let scalingPolicies: [ScalingPolicy]?

    public init (
        nextToken: String? = nil,
        scalingPolicies: [ScalingPolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.scalingPolicies = scalingPolicies
    }
}

struct DescribePoliciesOutputResponseBody: Equatable {
    public let scalingPolicies: [ScalingPolicy]?
    public let nextToken: String?
}

extension DescribePoliciesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case scalingPolicies = "ScalingPolicies"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribePoliciesResult"))
        if containerValues.contains(.scalingPolicies) {
            struct KeyVal0{struct member{}}
            let scalingPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scalingPolicies)
            if let scalingPoliciesWrappedContainer = scalingPoliciesWrappedContainer {
                let scalingPoliciesContainer = try scalingPoliciesWrappedContainer.decodeIfPresent([ScalingPolicy].self, forKey: .member)
                var scalingPoliciesBuffer:[ScalingPolicy]? = nil
                if let scalingPoliciesContainer = scalingPoliciesContainer {
                    scalingPoliciesBuffer = [ScalingPolicy]()
                    for structureContainer0 in scalingPoliciesContainer {
                        scalingPoliciesBuffer?.append(structureContainer0)
                    }
                }
                scalingPolicies = scalingPoliciesBuffer
            } else {
                scalingPolicies = []
            }
        } else {
            scalingPolicies = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeScalingActivitiesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeScalingActivitiesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScalingActivitiesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScalingActivitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScalingActivitiesInput>
    public typealias MOutput = OperationOutput<DescribeScalingActivitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScalingActivitiesOutputError>
}

extension DescribeScalingActivitiesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeScalingActivitiesInput(activityIds: \(String(describing: activityIds)), autoScalingGroupName: \(String(describing: autoScalingGroupName)), includeDeletedGroups: \(String(describing: includeDeletedGroups)), maxRecords: \(String(describing: maxRecords)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeScalingActivitiesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let activityIds = activityIds {
            var activityIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ActivityIds"))
            for (index0, xmlstring0) in activityIds.enumerated() {
                try activityIdsContainer.encode(xmlstring0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let includeDeletedGroups = includeDeletedGroups {
            try container.encode(includeDeletedGroups, forKey: Key("IncludeDeletedGroups"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        try container.encode("DescribeScalingActivities", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeScalingActivitiesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeScalingActivitiesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScalingActivitiesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScalingActivitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScalingActivitiesInput>
    public typealias MOutput = OperationOutput<DescribeScalingActivitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScalingActivitiesOutputError>
}

public struct DescribeScalingActivitiesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeScalingActivitiesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScalingActivitiesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScalingActivitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScalingActivitiesInput>
    public typealias MOutput = OperationOutput<DescribeScalingActivitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScalingActivitiesOutputError>
}

public struct DescribeScalingActivitiesInput: Equatable {
    /// <p>The activity IDs of the desired scaling activities. If you omit this parameter, all
    ///             activities for the past six weeks are described. If unknown activities are requested,
    ///             they are ignored with no error. If you specify an Auto Scaling group, the results are limited to
    ///             that group.</p>
    ///         <p>Array Members: Maximum number of 50 IDs.</p>
    public let activityIds: [String]?
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>Indicates whether to include scaling activity from deleted Auto Scaling groups.</p>
    public let includeDeletedGroups: Bool?
    /// <p>The maximum number of items to return with this call. The default value is
    ///                 <code>100</code> and the maximum value is <code>100</code>.</p>
    public let maxRecords: Int?
    /// <p>The token for the next set of items to return. (You received this token from a
    ///             previous call.)</p>
    public let nextToken: String?

    public init (
        activityIds: [String]? = nil,
        autoScalingGroupName: String? = nil,
        includeDeletedGroups: Bool? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.activityIds = activityIds
        self.autoScalingGroupName = autoScalingGroupName
        self.includeDeletedGroups = includeDeletedGroups
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeScalingActivitiesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeScalingActivitiesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScalingActivitiesOutputError: Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScalingActivitiesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeScalingActivitiesOutputResponse(activities: \(String(describing: activities)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeScalingActivitiesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeScalingActivitiesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.activities = output.activities
            self.nextToken = output.nextToken
        } else {
            self.activities = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeScalingActivitiesOutputResponse: Equatable {
    /// <p>The scaling activities. Activities are sorted by start time. Activities still in
    ///             progress are described first.</p>
    public let activities: [Activity]?
    /// <p>A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 <code>NextToken</code> value when requesting the next set of items. This value is
    ///             null when there are no more items to return.</p>
    public let nextToken: String?

    public init (
        activities: [Activity]? = nil,
        nextToken: String? = nil
    )
    {
        self.activities = activities
        self.nextToken = nextToken
    }
}

struct DescribeScalingActivitiesOutputResponseBody: Equatable {
    public let activities: [Activity]?
    public let nextToken: String?
}

extension DescribeScalingActivitiesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activities = "Activities"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeScalingActivitiesResult"))
        if containerValues.contains(.activities) {
            struct KeyVal0{struct member{}}
            let activitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .activities)
            if let activitiesWrappedContainer = activitiesWrappedContainer {
                let activitiesContainer = try activitiesWrappedContainer.decodeIfPresent([Activity].self, forKey: .member)
                var activitiesBuffer:[Activity]? = nil
                if let activitiesContainer = activitiesContainer {
                    activitiesBuffer = [Activity]()
                    for structureContainer0 in activitiesContainer {
                        activitiesBuffer?.append(structureContainer0)
                    }
                }
                activities = activitiesBuffer
            } else {
                activities = []
            }
        } else {
            activities = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeScalingProcessTypesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeScalingProcessTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScalingProcessTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScalingProcessTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScalingProcessTypesInput>
    public typealias MOutput = OperationOutput<DescribeScalingProcessTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScalingProcessTypesOutputError>
}

extension DescribeScalingProcessTypesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeScalingProcessTypesInput()"}
}

extension DescribeScalingProcessTypesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        try container.encode("DescribeScalingProcessTypes", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeScalingProcessTypesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeScalingProcessTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScalingProcessTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScalingProcessTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScalingProcessTypesInput>
    public typealias MOutput = OperationOutput<DescribeScalingProcessTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScalingProcessTypesOutputError>
}

public struct DescribeScalingProcessTypesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeScalingProcessTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScalingProcessTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScalingProcessTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScalingProcessTypesInput>
    public typealias MOutput = OperationOutput<DescribeScalingProcessTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScalingProcessTypesOutputError>
}

public struct DescribeScalingProcessTypesInput: Equatable {

    public init() {}
}

extension DescribeScalingProcessTypesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeScalingProcessTypesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScalingProcessTypesOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScalingProcessTypesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeScalingProcessTypesOutputResponse(processes: \(String(describing: processes)))"}
}

extension DescribeScalingProcessTypesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeScalingProcessTypesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.processes = output.processes
        } else {
            self.processes = nil
        }
    }
}

public struct DescribeScalingProcessTypesOutputResponse: Equatable {
    /// <p>The names of the process types.</p>
    public let processes: [ProcessType]?

    public init (
        processes: [ProcessType]? = nil
    )
    {
        self.processes = processes
    }
}

struct DescribeScalingProcessTypesOutputResponseBody: Equatable {
    public let processes: [ProcessType]?
}

extension DescribeScalingProcessTypesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case processes = "Processes"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeScalingProcessTypesResult"))
        if containerValues.contains(.processes) {
            struct KeyVal0{struct member{}}
            let processesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .processes)
            if let processesWrappedContainer = processesWrappedContainer {
                let processesContainer = try processesWrappedContainer.decodeIfPresent([ProcessType].self, forKey: .member)
                var processesBuffer:[ProcessType]? = nil
                if let processesContainer = processesContainer {
                    processesBuffer = [ProcessType]()
                    for structureContainer0 in processesContainer {
                        processesBuffer?.append(structureContainer0)
                    }
                }
                processes = processesBuffer
            } else {
                processes = []
            }
        } else {
            processes = nil
        }
    }
}

public struct DescribeScheduledActionsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeScheduledActionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScheduledActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScheduledActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScheduledActionsInput>
    public typealias MOutput = OperationOutput<DescribeScheduledActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScheduledActionsOutputError>
}

extension DescribeScheduledActionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeScheduledActionsInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), endTime: \(String(describing: endTime)), maxRecords: \(String(describing: maxRecords)), nextToken: \(String(describing: nextToken)), scheduledActionNames: \(String(describing: scheduledActionNames)), startTime: \(String(describing: startTime)))"}
}

extension DescribeScheduledActionsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        if let scheduledActionNames = scheduledActionNames {
            var scheduledActionNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ScheduledActionNames"))
            for (index0, xmlstringmaxlen2550) in scheduledActionNames.enumerated() {
                try scheduledActionNamesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        try container.encode("DescribeScheduledActions", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeScheduledActionsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeScheduledActionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScheduledActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScheduledActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScheduledActionsInput>
    public typealias MOutput = OperationOutput<DescribeScheduledActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScheduledActionsOutputError>
}

public struct DescribeScheduledActionsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeScheduledActionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScheduledActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScheduledActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScheduledActionsInput>
    public typealias MOutput = OperationOutput<DescribeScheduledActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScheduledActionsOutputError>
}

public struct DescribeScheduledActionsInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The latest scheduled start time to return. If scheduled action names are provided,
    ///             this parameter is ignored.</p>
    public let endTime: Date?
    /// <p>The maximum number of items to return with this call. The default value is
    ///                 <code>50</code> and the maximum value is <code>100</code>.</p>
    public let maxRecords: Int?
    /// <p>The token for the next set of items to return. (You received this token from a
    ///             previous call.)</p>
    public let nextToken: String?
    /// <p>The names of one or more scheduled actions. If you omit this parameter, all scheduled
    ///             actions are described. If you specify an unknown scheduled action, it is ignored with no
    ///             error.</p>
    ///         <p>Array Members: Maximum number of 50 actions.</p>
    public let scheduledActionNames: [String]?
    /// <p>The earliest scheduled start time to return. If scheduled action names are provided,
    ///             this parameter is ignored.</p>
    public let startTime: Date?

    public init (
        autoScalingGroupName: String? = nil,
        endTime: Date? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil,
        scheduledActionNames: [String]? = nil,
        startTime: Date? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.endTime = endTime
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.scheduledActionNames = scheduledActionNames
        self.startTime = startTime
    }
}

extension DescribeScheduledActionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeScheduledActionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScheduledActionsOutputError: Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScheduledActionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeScheduledActionsOutputResponse(nextToken: \(String(describing: nextToken)), scheduledUpdateGroupActions: \(String(describing: scheduledUpdateGroupActions)))"}
}

extension DescribeScheduledActionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeScheduledActionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.scheduledUpdateGroupActions = output.scheduledUpdateGroupActions
        } else {
            self.nextToken = nil
            self.scheduledUpdateGroupActions = nil
        }
    }
}

public struct DescribeScheduledActionsOutputResponse: Equatable {
    /// <p>A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 <code>NextToken</code> value when requesting the next set of items. This value is
    ///             null when there are no more items to return.</p>
    public let nextToken: String?
    /// <p>The scheduled actions.</p>
    public let scheduledUpdateGroupActions: [ScheduledUpdateGroupAction]?

    public init (
        nextToken: String? = nil,
        scheduledUpdateGroupActions: [ScheduledUpdateGroupAction]? = nil
    )
    {
        self.nextToken = nextToken
        self.scheduledUpdateGroupActions = scheduledUpdateGroupActions
    }
}

struct DescribeScheduledActionsOutputResponseBody: Equatable {
    public let scheduledUpdateGroupActions: [ScheduledUpdateGroupAction]?
    public let nextToken: String?
}

extension DescribeScheduledActionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case scheduledUpdateGroupActions = "ScheduledUpdateGroupActions"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeScheduledActionsResult"))
        if containerValues.contains(.scheduledUpdateGroupActions) {
            struct KeyVal0{struct member{}}
            let scheduledUpdateGroupActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scheduledUpdateGroupActions)
            if let scheduledUpdateGroupActionsWrappedContainer = scheduledUpdateGroupActionsWrappedContainer {
                let scheduledUpdateGroupActionsContainer = try scheduledUpdateGroupActionsWrappedContainer.decodeIfPresent([ScheduledUpdateGroupAction].self, forKey: .member)
                var scheduledUpdateGroupActionsBuffer:[ScheduledUpdateGroupAction]? = nil
                if let scheduledUpdateGroupActionsContainer = scheduledUpdateGroupActionsContainer {
                    scheduledUpdateGroupActionsBuffer = [ScheduledUpdateGroupAction]()
                    for structureContainer0 in scheduledUpdateGroupActionsContainer {
                        scheduledUpdateGroupActionsBuffer?.append(structureContainer0)
                    }
                }
                scheduledUpdateGroupActions = scheduledUpdateGroupActionsBuffer
            } else {
                scheduledUpdateGroupActions = []
            }
        } else {
            scheduledUpdateGroupActions = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeTagsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTagsInput>
    public typealias MOutput = OperationOutput<DescribeTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTagsOutputError>
}

extension DescribeTagsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeTagsInput(filters: \(String(describing: filters)), maxRecords: \(String(describing: maxRecords)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeTagsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let filters = filters {
            var filtersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Filters"))
            for (index0, filter0) in filters.enumerated() {
                try filtersContainer.encode(filter0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        try container.encode("DescribeTags", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeTagsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTagsInput>
    public typealias MOutput = OperationOutput<DescribeTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTagsOutputError>
}

public struct DescribeTagsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTagsInput>
    public typealias MOutput = OperationOutput<DescribeTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTagsOutputError>
}

public struct DescribeTagsInput: Equatable {
    /// <p>One or more filters to scope the tags to return. The maximum number of filters per
    ///             filter type (for example, <code>auto-scaling-group</code>) is 1000.</p>
    public let filters: [Filter]?
    /// <p>The maximum number of items to return with this call. The default value is
    ///                 <code>50</code> and the maximum value is <code>100</code>.</p>
    public let maxRecords: Int?
    /// <p>The token for the next set of items to return. (You received this token from a
    ///             previous call.)</p>
    public let nextToken: String?

    public init (
        filters: [Filter]? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.filters = filters
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeTagsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeTagsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTagsOutputError: Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTagsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeTagsOutputResponse(nextToken: \(String(describing: nextToken)), tags: \(String(describing: tags)))"}
}

extension DescribeTagsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeTagsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct DescribeTagsOutputResponse: Equatable {
    /// <p>A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 <code>NextToken</code> value when requesting the next set of items. This value is
    ///             null when there are no more items to return.</p>
    public let nextToken: String?
    /// <p>One or more tags.</p>
    public let tags: [TagDescription]?

    public init (
        nextToken: String? = nil,
        tags: [TagDescription]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct DescribeTagsOutputResponseBody: Equatable {
    public let tags: [TagDescription]?
    public let nextToken: String?
}

extension DescribeTagsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeTagsResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([TagDescription].self, forKey: .member)
                var tagsBuffer:[TagDescription]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [TagDescription]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeTerminationPolicyTypesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeTerminationPolicyTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTerminationPolicyTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTerminationPolicyTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTerminationPolicyTypesInput>
    public typealias MOutput = OperationOutput<DescribeTerminationPolicyTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTerminationPolicyTypesOutputError>
}

extension DescribeTerminationPolicyTypesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeTerminationPolicyTypesInput()"}
}

extension DescribeTerminationPolicyTypesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        try container.encode("DescribeTerminationPolicyTypes", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeTerminationPolicyTypesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeTerminationPolicyTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTerminationPolicyTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTerminationPolicyTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTerminationPolicyTypesInput>
    public typealias MOutput = OperationOutput<DescribeTerminationPolicyTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTerminationPolicyTypesOutputError>
}

public struct DescribeTerminationPolicyTypesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeTerminationPolicyTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTerminationPolicyTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTerminationPolicyTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTerminationPolicyTypesInput>
    public typealias MOutput = OperationOutput<DescribeTerminationPolicyTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTerminationPolicyTypesOutputError>
}

public struct DescribeTerminationPolicyTypesInput: Equatable {

    public init() {}
}

extension DescribeTerminationPolicyTypesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeTerminationPolicyTypesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTerminationPolicyTypesOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTerminationPolicyTypesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeTerminationPolicyTypesOutputResponse(terminationPolicyTypes: \(String(describing: terminationPolicyTypes)))"}
}

extension DescribeTerminationPolicyTypesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeTerminationPolicyTypesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.terminationPolicyTypes = output.terminationPolicyTypes
        } else {
            self.terminationPolicyTypes = nil
        }
    }
}

public struct DescribeTerminationPolicyTypesOutputResponse: Equatable {
    /// <p>The termination policies supported by Amazon EC2 Auto Scaling: <code>OldestInstance</code>,
    ///                 <code>OldestLaunchConfiguration</code>, <code>NewestInstance</code>,
    ///                 <code>ClosestToNextInstanceHour</code>, <code>Default</code>,
    ///                 <code>OldestLaunchTemplate</code>, and <code>AllocationStrategy</code>.</p>
    public let terminationPolicyTypes: [String]?

    public init (
        terminationPolicyTypes: [String]? = nil
    )
    {
        self.terminationPolicyTypes = terminationPolicyTypes
    }
}

struct DescribeTerminationPolicyTypesOutputResponseBody: Equatable {
    public let terminationPolicyTypes: [String]?
}

extension DescribeTerminationPolicyTypesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case terminationPolicyTypes = "TerminationPolicyTypes"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeTerminationPolicyTypesResult"))
        if containerValues.contains(.terminationPolicyTypes) {
            struct KeyVal0{struct member{}}
            let terminationPolicyTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .terminationPolicyTypes)
            if let terminationPolicyTypesWrappedContainer = terminationPolicyTypesWrappedContainer {
                let terminationPolicyTypesContainer = try terminationPolicyTypesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var terminationPolicyTypesBuffer:[String]? = nil
                if let terminationPolicyTypesContainer = terminationPolicyTypesContainer {
                    terminationPolicyTypesBuffer = [String]()
                    for stringContainer0 in terminationPolicyTypesContainer {
                        terminationPolicyTypesBuffer?.append(stringContainer0)
                    }
                }
                terminationPolicyTypes = terminationPolicyTypesBuffer
            } else {
                terminationPolicyTypes = []
            }
        } else {
            terminationPolicyTypes = nil
        }
    }
}

public struct DescribeWarmPoolInputBodyMiddleware: Middleware {
    public let id: String = "DescribeWarmPoolInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeWarmPoolInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeWarmPoolInput>
    public typealias MOutput = OperationOutput<DescribeWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeWarmPoolOutputError>
}

extension DescribeWarmPoolInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeWarmPoolInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), maxRecords: \(String(describing: maxRecords)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeWarmPoolInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        try container.encode("DescribeWarmPool", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DescribeWarmPoolInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeWarmPoolInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeWarmPoolInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeWarmPoolInput>
    public typealias MOutput = OperationOutput<DescribeWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeWarmPoolOutputError>
}

public struct DescribeWarmPoolInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeWarmPoolInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeWarmPoolInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeWarmPoolInput>
    public typealias MOutput = OperationOutput<DescribeWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeWarmPoolOutputError>
}

public struct DescribeWarmPoolInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The maximum number of instances to return with this call. The maximum value is
    ///                 <code>50</code>.</p>
    public let maxRecords: Int?
    /// <p>The token for the next set of instances to return. (You received this token from a
    ///             previous call.)</p>
    public let nextToken: String?

    public init (
        autoScalingGroupName: String? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeWarmPoolOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeWarmPoolOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeWarmPoolOutputError: Equatable {
    case invalidNextToken(InvalidNextToken)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeWarmPoolOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeWarmPoolOutputResponse(instances: \(String(describing: instances)), nextToken: \(String(describing: nextToken)), warmPoolConfiguration: \(String(describing: warmPoolConfiguration)))"}
}

extension DescribeWarmPoolOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeWarmPoolOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.instances = output.instances
            self.nextToken = output.nextToken
            self.warmPoolConfiguration = output.warmPoolConfiguration
        } else {
            self.instances = nil
            self.nextToken = nil
            self.warmPoolConfiguration = nil
        }
    }
}

public struct DescribeWarmPoolOutputResponse: Equatable {
    /// <p>The instances that are currently in the warm pool.</p>
    public let instances: [Instance]?
    /// <p>The token for the next set of items to return. (You received this token from a
    ///             previous call.)</p>
    public let nextToken: String?
    /// <p>The warm pool configuration details. </p>
    public let warmPoolConfiguration: WarmPoolConfiguration?

    public init (
        instances: [Instance]? = nil,
        nextToken: String? = nil,
        warmPoolConfiguration: WarmPoolConfiguration? = nil
    )
    {
        self.instances = instances
        self.nextToken = nextToken
        self.warmPoolConfiguration = warmPoolConfiguration
    }
}

struct DescribeWarmPoolOutputResponseBody: Equatable {
    public let warmPoolConfiguration: WarmPoolConfiguration?
    public let instances: [Instance]?
    public let nextToken: String?
}

extension DescribeWarmPoolOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instances = "Instances"
        case nextToken = "NextToken"
        case warmPoolConfiguration = "WarmPoolConfiguration"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeWarmPoolResult"))
        let warmPoolConfigurationDecoded = try containerValues.decodeIfPresent(WarmPoolConfiguration.self, forKey: .warmPoolConfiguration)
        warmPoolConfiguration = warmPoolConfigurationDecoded
        if containerValues.contains(.instances) {
            struct KeyVal0{struct member{}}
            let instancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instances)
            if let instancesWrappedContainer = instancesWrappedContainer {
                let instancesContainer = try instancesWrappedContainer.decodeIfPresent([Instance].self, forKey: .member)
                var instancesBuffer:[Instance]? = nil
                if let instancesContainer = instancesContainer {
                    instancesBuffer = [Instance]()
                    for structureContainer0 in instancesContainer {
                        instancesBuffer?.append(structureContainer0)
                    }
                }
                instances = instancesBuffer
            } else {
                instances = []
            }
        } else {
            instances = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DetachInstancesInputBodyMiddleware: Middleware {
    public let id: String = "DetachInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DetachInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DetachInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DetachInstancesInput>
    public typealias MOutput = OperationOutput<DetachInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DetachInstancesOutputError>
}

extension DetachInstancesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DetachInstancesInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), instanceIds: \(String(describing: instanceIds)), shouldDecrementDesiredCapacity: \(String(describing: shouldDecrementDesiredCapacity)))"}
}

extension DetachInstancesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("InstanceIds"))
            for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity {
            try container.encode(shouldDecrementDesiredCapacity, forKey: Key("ShouldDecrementDesiredCapacity"))
        }
        try container.encode("DetachInstances", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DetachInstancesInputHeadersMiddleware: Middleware {
    public let id: String = "DetachInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DetachInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DetachInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DetachInstancesInput>
    public typealias MOutput = OperationOutput<DetachInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DetachInstancesOutputError>
}

public struct DetachInstancesInputQueryItemMiddleware: Middleware {
    public let id: String = "DetachInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DetachInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DetachInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DetachInstancesInput>
    public typealias MOutput = OperationOutput<DetachInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DetachInstancesOutputError>
}

public struct DetachInstancesInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The IDs of the instances. You can specify up to 20 instances.</p>
    public let instanceIds: [String]?
    /// <p>Indicates whether the Auto Scaling group decrements the desired capacity value by the number
    ///             of instances detached.</p>
    public let shouldDecrementDesiredCapacity: Bool?

    public init (
        autoScalingGroupName: String? = nil,
        instanceIds: [String]? = nil,
        shouldDecrementDesiredCapacity: Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
        self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
    }
}

extension DetachInstancesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetachInstancesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachInstancesOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachInstancesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DetachInstancesOutputResponse(activities: \(String(describing: activities)))"}
}

extension DetachInstancesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DetachInstancesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.activities = output.activities
        } else {
            self.activities = nil
        }
    }
}

public struct DetachInstancesOutputResponse: Equatable {
    /// <p>The activities related to detaching the instances from the Auto Scaling group.</p>
    public let activities: [Activity]?

    public init (
        activities: [Activity]? = nil
    )
    {
        self.activities = activities
    }
}

struct DetachInstancesOutputResponseBody: Equatable {
    public let activities: [Activity]?
}

extension DetachInstancesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activities = "Activities"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DetachInstancesResult"))
        if containerValues.contains(.activities) {
            struct KeyVal0{struct member{}}
            let activitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .activities)
            if let activitiesWrappedContainer = activitiesWrappedContainer {
                let activitiesContainer = try activitiesWrappedContainer.decodeIfPresent([Activity].self, forKey: .member)
                var activitiesBuffer:[Activity]? = nil
                if let activitiesContainer = activitiesContainer {
                    activitiesBuffer = [Activity]()
                    for structureContainer0 in activitiesContainer {
                        activitiesBuffer?.append(structureContainer0)
                    }
                }
                activities = activitiesBuffer
            } else {
                activities = []
            }
        } else {
            activities = nil
        }
    }
}

public struct DetachLoadBalancerTargetGroupsInputBodyMiddleware: Middleware {
    public let id: String = "DetachLoadBalancerTargetGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DetachLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DetachLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DetachLoadBalancerTargetGroupsInput>
    public typealias MOutput = OperationOutput<DetachLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DetachLoadBalancerTargetGroupsOutputError>
}

extension DetachLoadBalancerTargetGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DetachLoadBalancerTargetGroupsInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), targetGroupARNs: \(String(describing: targetGroupARNs)))"}
}

extension DetachLoadBalancerTargetGroupsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let targetGroupARNs = targetGroupARNs {
            var targetGroupARNsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("TargetGroupARNs"))
            for (index0, xmlstringmaxlen5110) in targetGroupARNs.enumerated() {
                try targetGroupARNsContainer.encode(xmlstringmaxlen5110, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DetachLoadBalancerTargetGroups", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DetachLoadBalancerTargetGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "DetachLoadBalancerTargetGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DetachLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DetachLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DetachLoadBalancerTargetGroupsInput>
    public typealias MOutput = OperationOutput<DetachLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DetachLoadBalancerTargetGroupsOutputError>
}

public struct DetachLoadBalancerTargetGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "DetachLoadBalancerTargetGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DetachLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DetachLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DetachLoadBalancerTargetGroupsInput>
    public typealias MOutput = OperationOutput<DetachLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DetachLoadBalancerTargetGroupsOutputError>
}

public struct DetachLoadBalancerTargetGroupsInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target
    ///             groups.</p>
    public let targetGroupARNs: [String]?

    public init (
        autoScalingGroupName: String? = nil,
        targetGroupARNs: [String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.targetGroupARNs = targetGroupARNs
    }
}

extension DetachLoadBalancerTargetGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetachLoadBalancerTargetGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachLoadBalancerTargetGroupsOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachLoadBalancerTargetGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DetachLoadBalancerTargetGroupsOutputResponse()"}
}

extension DetachLoadBalancerTargetGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DetachLoadBalancerTargetGroupsOutputResponse: Equatable {

    public init() {}
}

struct DetachLoadBalancerTargetGroupsOutputResponseBody: Equatable {
}

extension DetachLoadBalancerTargetGroupsOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DetachLoadBalancersInputBodyMiddleware: Middleware {
    public let id: String = "DetachLoadBalancersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DetachLoadBalancersInput>,
                  next: H) -> Swift.Result<OperationOutput<DetachLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DetachLoadBalancersInput>
    public typealias MOutput = OperationOutput<DetachLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DetachLoadBalancersOutputError>
}

extension DetachLoadBalancersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DetachLoadBalancersInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), loadBalancerNames: \(String(describing: loadBalancerNames)))"}
}

extension DetachLoadBalancersInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let loadBalancerNames = loadBalancerNames {
            var loadBalancerNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LoadBalancerNames"))
            for (index0, xmlstringmaxlen2550) in loadBalancerNames.enumerated() {
                try loadBalancerNamesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DetachLoadBalancers", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DetachLoadBalancersInputHeadersMiddleware: Middleware {
    public let id: String = "DetachLoadBalancersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DetachLoadBalancersInput>,
                  next: H) -> Swift.Result<OperationOutput<DetachLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DetachLoadBalancersInput>
    public typealias MOutput = OperationOutput<DetachLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DetachLoadBalancersOutputError>
}

public struct DetachLoadBalancersInputQueryItemMiddleware: Middleware {
    public let id: String = "DetachLoadBalancersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DetachLoadBalancersInput>,
                  next: H) -> Swift.Result<OperationOutput<DetachLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DetachLoadBalancersInput>
    public typealias MOutput = OperationOutput<DetachLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DetachLoadBalancersOutputError>
}

public struct DetachLoadBalancersInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The names of the load balancers. You can specify up to 10 load balancers.</p>
    public let loadBalancerNames: [String]?

    public init (
        autoScalingGroupName: String? = nil,
        loadBalancerNames: [String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.loadBalancerNames = loadBalancerNames
    }
}

extension DetachLoadBalancersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetachLoadBalancersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachLoadBalancersOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachLoadBalancersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DetachLoadBalancersOutputResponse()"}
}

extension DetachLoadBalancersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DetachLoadBalancersOutputResponse: Equatable {

    public init() {}
}

struct DetachLoadBalancersOutputResponseBody: Equatable {
}

extension DetachLoadBalancersOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DisableMetricsCollectionInputBodyMiddleware: Middleware {
    public let id: String = "DisableMetricsCollectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisableMetricsCollectionInput>,
                  next: H) -> Swift.Result<OperationOutput<DisableMetricsCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisableMetricsCollectionInput>
    public typealias MOutput = OperationOutput<DisableMetricsCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisableMetricsCollectionOutputError>
}

extension DisableMetricsCollectionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisableMetricsCollectionInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), metrics: \(String(describing: metrics)))"}
}

extension DisableMetricsCollectionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let metrics = metrics {
            var metricsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Metrics"))
            for (index0, xmlstringmaxlen2550) in metrics.enumerated() {
                try metricsContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DisableMetricsCollection", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct DisableMetricsCollectionInputHeadersMiddleware: Middleware {
    public let id: String = "DisableMetricsCollectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisableMetricsCollectionInput>,
                  next: H) -> Swift.Result<OperationOutput<DisableMetricsCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisableMetricsCollectionInput>
    public typealias MOutput = OperationOutput<DisableMetricsCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisableMetricsCollectionOutputError>
}

public struct DisableMetricsCollectionInputQueryItemMiddleware: Middleware {
    public let id: String = "DisableMetricsCollectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisableMetricsCollectionInput>,
                  next: H) -> Swift.Result<OperationOutput<DisableMetricsCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisableMetricsCollectionInput>
    public typealias MOutput = OperationOutput<DisableMetricsCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisableMetricsCollectionOutputError>
}

public struct DisableMetricsCollectionInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>Specifies one or more of the following metrics:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupMinSize</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupMaxSize</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupDesiredCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupInServiceInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupPendingInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupStandbyInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTerminatingInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTotalInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupInServiceCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupPendingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupStandbyCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTerminatingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTotalCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolDesiredCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolWarmedCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolPendingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolTerminatingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolTotalCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupAndWarmPoolDesiredCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupAndWarmPoolTotalCapacity</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <p>If you omit this parameter, all metrics are disabled. </p>
    public let metrics: [String]?

    public init (
        autoScalingGroupName: String? = nil,
        metrics: [String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.metrics = metrics
    }
}

extension DisableMetricsCollectionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DisableMetricsCollectionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableMetricsCollectionOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableMetricsCollectionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisableMetricsCollectionOutputResponse()"}
}

extension DisableMetricsCollectionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DisableMetricsCollectionOutputResponse: Equatable {

    public init() {}
}

struct DisableMetricsCollectionOutputResponseBody: Equatable {
}

extension DisableMetricsCollectionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension Ebs: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deleteOnTermination = "DeleteOnTermination"
        case encrypted = "Encrypted"
        case iops = "Iops"
        case snapshotId = "SnapshotId"
        case throughput = "Throughput"
        case volumeSize = "VolumeSize"
        case volumeType = "VolumeType"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let deleteOnTermination = deleteOnTermination {
            try container.encode(deleteOnTermination, forKey: Key("DeleteOnTermination"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: Key("Encrypted"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: Key("Iops"))
        }
        if let snapshotId = snapshotId {
            try container.encode(snapshotId, forKey: Key("SnapshotId"))
        }
        if let throughput = throughput {
            try container.encode(throughput, forKey: Key("Throughput"))
        }
        if let volumeSize = volumeSize {
            try container.encode(volumeSize, forKey: Key("VolumeSize"))
        }
        if let volumeType = volumeType {
            try container.encode(volumeType, forKey: Key("VolumeType"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let volumeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let deleteOnTerminationDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .deleteOnTermination)
        deleteOnTermination = deleteOnTerminationDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .iops)
        iops = iopsDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let throughputDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .throughput)
        throughput = throughputDecoded
    }
}

extension Ebs: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Ebs(deleteOnTermination: \(String(describing: deleteOnTermination)), encrypted: \(String(describing: encrypted)), iops: \(String(describing: iops)), snapshotId: \(String(describing: snapshotId)), throughput: \(String(describing: throughput)), volumeSize: \(String(describing: volumeSize)), volumeType: \(String(describing: volumeType)))"}
}

/// <p>Describes information used to set up an Amazon EBS volume specified in a block device
///             mapping.</p>
public struct Ebs: Equatable {
    /// <p>Indicates whether the volume is deleted on instance termination. For Amazon EC2 Auto Scaling, the
    ///             default value is <code>true</code>.</p>
    public let deleteOnTermination: Bool?
    /// <p>Specifies whether the volume should be encrypted. Encrypted EBS volumes can only be
    ///             attached to instances that support Amazon EBS encryption. For more information, see
    ///                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported Instance Types</a>. If your AMI uses encrypted volumes, you can also
    ///             only launch it on supported instance types.</p>
    ///         <note>
    ///             <p>If you are creating a volume from a snapshot, you cannot specify an encryption
    ///                 value. Volumes that are created from encrypted snapshots are automatically
    ///                 encrypted, and volumes that are created from unencrypted snapshots are automatically
    ///                 unencrypted. By default, encrypted snapshots use the AWS managed CMK that is used
    ///                 for EBS encryption, but you can specify a custom CMK when you create the snapshot.
    ///                 The ability to encrypt a snapshot during copying also allows you to apply a new CMK
    ///                 to an already-encrypted snapshot. Volumes restored from the
    ///                 resulting copy are only accessible using the new CMK.</p>
    ///             <p>Enabling <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default">encryption by default</a> results in all EBS volumes being encrypted with
    ///                 the AWS managed CMK or a customer managed CMK, whether or not the snapshot was
    ///                 encrypted.</p>
    ///         </note>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIEncryption.html">Using Encryption with EBS-Backed
    ///                 AMIs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/key-policy-requirements-EBS-encryption.html">Required
    ///                 CMK key policy for use with encrypted volumes</a> in the
    ///                 <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let encrypted: Bool?
    /// <p>The number of input/output (I/O) operations per second (IOPS) to provision for the
    ///             volume. For <code>gp3</code> and <code>io1</code> volumes, this represents the number of
    ///             IOPS that are provisioned for the volume. For <code>gp2</code> volumes, this represents
    ///             the baseline performance of the volume and the rate at which the volume accumulates I/O
    ///             credits for bursting. </p>
    ///         <p>The following are the supported values for each volume type: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>gp3</code>: 3,000-16,000 IOPS</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>io1</code>: 100-64,000 IOPS</p>
    ///             </li>
    ///          </ul>
    ///
    ///         <p>For <code>io1</code> volumes, we guarantee 64,000 IOPS only for <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Instances
    ///                 built on the Nitro System</a>. Other instance families guarantee performance up
    ///             to 32,000 IOPS. </p>
    ///         <p>
    ///             <code>Iops</code> is supported when the volume type is <code>gp3</code> or
    ///                 <code>io1</code> and required only when the volume type is <code>io1</code>. (Not
    ///             used with <code>standard</code>, <code>gp2</code>, <code>st1</code>, or <code>sc1</code>
    ///             volumes.)  </p>
    public let iops: Int?
    /// <p>The snapshot ID of the volume to use.</p>
    ///         <p>You must specify either a <code>VolumeSize</code> or a <code>SnapshotId</code>.</p>
    public let snapshotId: String?
    /// <p>The throughput (MiBps) to provision for a <code>gp3</code> volume.</p>
    public let throughput: Int?
    /// <p>The volume size, in GiBs. The following are the supported volumes sizes for each
    ///             volume type: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>gp2</code> and <code>gp3</code>: 1-16,384</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>io1</code>: 4-16,384</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>st1</code> and <code>sc1</code>: 125-16,384</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>standard</code>: 1-1,024</p>
    ///             </li>
    ///          </ul>
    ///         <p>You must specify either a <code>SnapshotId</code> or a <code>VolumeSize</code>. If you
    ///             specify both <code>SnapshotId</code> and <code>VolumeSize</code>, the volume size must
    ///             be equal or greater than the size of the snapshot.</p>
    public let volumeSize: Int?
    /// <p>The volume type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a> in
    ///             the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    ///         <p>Valid Values: <code>standard</code> | <code>io1</code> | <code>gp2</code> |
    ///                 <code>st1</code> | <code>sc1</code> | <code>gp3</code>
    ///          </p>
    public let volumeType: String?

    public init (
        deleteOnTermination: Bool? = nil,
        encrypted: Bool? = nil,
        iops: Int? = nil,
        snapshotId: String? = nil,
        throughput: Int? = nil,
        volumeSize: Int? = nil,
        volumeType: String? = nil
    )
    {
        self.deleteOnTermination = deleteOnTermination
        self.encrypted = encrypted
        self.iops = iops
        self.snapshotId = snapshotId
        self.throughput = throughput
        self.volumeSize = volumeSize
        self.volumeType = volumeType
    }
}

public struct EnableMetricsCollectionInputBodyMiddleware: Middleware {
    public let id: String = "EnableMetricsCollectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnableMetricsCollectionInput>,
                  next: H) -> Swift.Result<OperationOutput<EnableMetricsCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnableMetricsCollectionInput>
    public typealias MOutput = OperationOutput<EnableMetricsCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnableMetricsCollectionOutputError>
}

extension EnableMetricsCollectionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EnableMetricsCollectionInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), granularity: \(String(describing: granularity)), metrics: \(String(describing: metrics)))"}
}

extension EnableMetricsCollectionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let granularity = granularity {
            try container.encode(granularity, forKey: Key("Granularity"))
        }
        if let metrics = metrics {
            var metricsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Metrics"))
            for (index0, xmlstringmaxlen2550) in metrics.enumerated() {
                try metricsContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("EnableMetricsCollection", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct EnableMetricsCollectionInputHeadersMiddleware: Middleware {
    public let id: String = "EnableMetricsCollectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnableMetricsCollectionInput>,
                  next: H) -> Swift.Result<OperationOutput<EnableMetricsCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnableMetricsCollectionInput>
    public typealias MOutput = OperationOutput<EnableMetricsCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnableMetricsCollectionOutputError>
}

public struct EnableMetricsCollectionInputQueryItemMiddleware: Middleware {
    public let id: String = "EnableMetricsCollectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnableMetricsCollectionInput>,
                  next: H) -> Swift.Result<OperationOutput<EnableMetricsCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnableMetricsCollectionInput>
    public typealias MOutput = OperationOutput<EnableMetricsCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnableMetricsCollectionOutputError>
}

public struct EnableMetricsCollectionInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The granularity to associate with the metrics to collect. The only valid value is
    ///                 <code>1Minute</code>.</p>
    public let granularity: String?
    /// <p>Specifies which group-level metrics to start collecting. You can specify one or more
    ///             of the following metrics:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupMinSize</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupMaxSize</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupDesiredCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupInServiceInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupPendingInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupStandbyInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTerminatingInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTotalInstances</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <p>The instance weighting feature supports the following additional metrics: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupInServiceCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupPendingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupStandbyCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTerminatingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTotalCapacity</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <p>The warm pools feature supports the following additional metrics: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolDesiredCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolWarmedCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolPendingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolTerminatingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolTotalCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupAndWarmPoolDesiredCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupAndWarmPoolTotalCapacity</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <p>If you omit this parameter, all metrics are enabled. </p>
    public let metrics: [String]?

    public init (
        autoScalingGroupName: String? = nil,
        granularity: String? = nil,
        metrics: [String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.granularity = granularity
        self.metrics = metrics
    }
}

extension EnableMetricsCollectionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EnableMetricsCollectionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableMetricsCollectionOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableMetricsCollectionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EnableMetricsCollectionOutputResponse()"}
}

extension EnableMetricsCollectionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct EnableMetricsCollectionOutputResponse: Equatable {

    public init() {}
}

struct EnableMetricsCollectionOutputResponseBody: Equatable {
}

extension EnableMetricsCollectionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension EnabledMetric: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case granularity = "Granularity"
        case metric = "Metric"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let granularity = granularity {
            try container.encode(granularity, forKey: Key("Granularity"))
        }
        if let metric = metric {
            try container.encode(metric, forKey: Key("Metric"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metric)
        metric = metricDecoded
        let granularityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .granularity)
        granularity = granularityDecoded
    }
}

extension EnabledMetric: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EnabledMetric(granularity: \(String(describing: granularity)), metric: \(String(describing: metric)))"}
}

/// <p>Describes an enabled metric.</p>
public struct EnabledMetric: Equatable {
    /// <p>The granularity of the metric. The only valid value is <code>1Minute</code>.</p>
    public let granularity: String?
    /// <p>One of the following metrics:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupMinSize</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupMaxSize</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupDesiredCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupInServiceInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupPendingInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupStandbyInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTerminatingInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTotalInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupInServiceCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupPendingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupStandbyCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTerminatingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTotalCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolDesiredCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolWarmedCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolPendingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolTerminatingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolTotalCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupAndWarmPoolDesiredCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupAndWarmPoolTotalCapacity</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    public let metric: String?

    public init (
        granularity: String? = nil,
        metric: String? = nil
    )
    {
        self.granularity = granularity
        self.metric = metric
    }
}

public struct EnterStandbyInputBodyMiddleware: Middleware {
    public let id: String = "EnterStandbyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnterStandbyInput>,
                  next: H) -> Swift.Result<OperationOutput<EnterStandbyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnterStandbyInput>
    public typealias MOutput = OperationOutput<EnterStandbyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnterStandbyOutputError>
}

extension EnterStandbyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EnterStandbyInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), instanceIds: \(String(describing: instanceIds)), shouldDecrementDesiredCapacity: \(String(describing: shouldDecrementDesiredCapacity)))"}
}

extension EnterStandbyInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("InstanceIds"))
            for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity {
            try container.encode(shouldDecrementDesiredCapacity, forKey: Key("ShouldDecrementDesiredCapacity"))
        }
        try container.encode("EnterStandby", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct EnterStandbyInputHeadersMiddleware: Middleware {
    public let id: String = "EnterStandbyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnterStandbyInput>,
                  next: H) -> Swift.Result<OperationOutput<EnterStandbyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnterStandbyInput>
    public typealias MOutput = OperationOutput<EnterStandbyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnterStandbyOutputError>
}

public struct EnterStandbyInputQueryItemMiddleware: Middleware {
    public let id: String = "EnterStandbyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnterStandbyInput>,
                  next: H) -> Swift.Result<OperationOutput<EnterStandbyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnterStandbyInput>
    public typealias MOutput = OperationOutput<EnterStandbyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnterStandbyOutputError>
}

public struct EnterStandbyInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The IDs of the instances. You can specify up to 20 instances.</p>
    public let instanceIds: [String]?
    /// <p>Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of
    ///             instances moved to <code>Standby</code> mode.</p>
    public let shouldDecrementDesiredCapacity: Bool?

    public init (
        autoScalingGroupName: String? = nil,
        instanceIds: [String]? = nil,
        shouldDecrementDesiredCapacity: Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
        self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
    }
}

extension EnterStandbyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EnterStandbyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnterStandbyOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnterStandbyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EnterStandbyOutputResponse(activities: \(String(describing: activities)))"}
}

extension EnterStandbyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: EnterStandbyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.activities = output.activities
        } else {
            self.activities = nil
        }
    }
}

public struct EnterStandbyOutputResponse: Equatable {
    /// <p>The activities related to moving instances into <code>Standby</code> mode.</p>
    public let activities: [Activity]?

    public init (
        activities: [Activity]? = nil
    )
    {
        self.activities = activities
    }
}

struct EnterStandbyOutputResponseBody: Equatable {
    public let activities: [Activity]?
}

extension EnterStandbyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activities = "Activities"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("EnterStandbyResult"))
        if containerValues.contains(.activities) {
            struct KeyVal0{struct member{}}
            let activitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .activities)
            if let activitiesWrappedContainer = activitiesWrappedContainer {
                let activitiesContainer = try activitiesWrappedContainer.decodeIfPresent([Activity].self, forKey: .member)
                var activitiesBuffer:[Activity]? = nil
                if let activitiesContainer = activitiesContainer {
                    activitiesBuffer = [Activity]()
                    for structureContainer0 in activitiesContainer {
                        activitiesBuffer?.append(structureContainer0)
                    }
                }
                activities = activitiesBuffer
            } else {
                activities = []
            }
        } else {
            activities = nil
        }
    }
}

public struct ExecutePolicyInputBodyMiddleware: Middleware {
    public let id: String = "ExecutePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExecutePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<ExecutePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExecutePolicyInput>
    public typealias MOutput = OperationOutput<ExecutePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExecutePolicyOutputError>
}

extension ExecutePolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExecutePolicyInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), breachThreshold: \(String(describing: breachThreshold)), honorCooldown: \(String(describing: honorCooldown)), metricValue: \(String(describing: metricValue)), policyName: \(String(describing: policyName)))"}
}

extension ExecutePolicyInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let breachThreshold = breachThreshold {
            try container.encode(breachThreshold, forKey: Key("BreachThreshold"))
        }
        if let honorCooldown = honorCooldown {
            try container.encode(honorCooldown, forKey: Key("HonorCooldown"))
        }
        if let metricValue = metricValue {
            try container.encode(metricValue, forKey: Key("MetricValue"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: Key("PolicyName"))
        }
        try container.encode("ExecutePolicy", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct ExecutePolicyInputHeadersMiddleware: Middleware {
    public let id: String = "ExecutePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExecutePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<ExecutePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExecutePolicyInput>
    public typealias MOutput = OperationOutput<ExecutePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExecutePolicyOutputError>
}

public struct ExecutePolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "ExecutePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExecutePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<ExecutePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExecutePolicyInput>
    public typealias MOutput = OperationOutput<ExecutePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExecutePolicyOutputError>
}

public struct ExecutePolicyInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The breach threshold for the alarm.</p>
    ///         <p>Required if the policy type is <code>StepScaling</code> and not supported
    ///             otherwise.</p>
    public let breachThreshold: Double?
    /// <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing
    ///             the policy.</p>
    ///         <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see
    ///                 <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling
    ///                 cooldowns for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let honorCooldown: Bool?
    /// <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to
    ///             execute a policy of type <code>StepScaling</code> and determine which step adjustment to
    ///             use. For example, if the breach threshold is 50 and you want to use a step adjustment
    ///             with a lower bound of 0 and an upper bound of 10, you can set the metric value to
    ///             59.</p>
    ///         <p>If you specify a metric value that doesn't correspond to a step adjustment for the
    ///             policy, the call returns an error.</p>
    ///         <p>Required if the policy type is <code>StepScaling</code> and not supported
    ///             otherwise.</p>
    public let metricValue: Double?
    /// <p>The name or ARN of the policy.</p>
    public let policyName: String?

    public init (
        autoScalingGroupName: String? = nil,
        breachThreshold: Double? = nil,
        honorCooldown: Bool? = nil,
        metricValue: Double? = nil,
        policyName: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.breachThreshold = breachThreshold
        self.honorCooldown = honorCooldown
        self.metricValue = metricValue
        self.policyName = policyName
    }
}

extension ExecutePolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ExecutePolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ExecutePolicyOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExecutePolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExecutePolicyOutputResponse()"}
}

extension ExecutePolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct ExecutePolicyOutputResponse: Equatable {

    public init() {}
}

struct ExecutePolicyOutputResponseBody: Equatable {
}

extension ExecutePolicyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct ExitStandbyInputBodyMiddleware: Middleware {
    public let id: String = "ExitStandbyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExitStandbyInput>,
                  next: H) -> Swift.Result<OperationOutput<ExitStandbyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExitStandbyInput>
    public typealias MOutput = OperationOutput<ExitStandbyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExitStandbyOutputError>
}

extension ExitStandbyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExitStandbyInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), instanceIds: \(String(describing: instanceIds)))"}
}

extension ExitStandbyInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("InstanceIds"))
            for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ExitStandby", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct ExitStandbyInputHeadersMiddleware: Middleware {
    public let id: String = "ExitStandbyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExitStandbyInput>,
                  next: H) -> Swift.Result<OperationOutput<ExitStandbyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExitStandbyInput>
    public typealias MOutput = OperationOutput<ExitStandbyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExitStandbyOutputError>
}

public struct ExitStandbyInputQueryItemMiddleware: Middleware {
    public let id: String = "ExitStandbyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExitStandbyInput>,
                  next: H) -> Swift.Result<OperationOutput<ExitStandbyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExitStandbyInput>
    public typealias MOutput = OperationOutput<ExitStandbyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExitStandbyOutputError>
}

public struct ExitStandbyInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The IDs of the instances. You can specify up to 20 instances.</p>
    public let instanceIds: [String]?

    public init (
        autoScalingGroupName: String? = nil,
        instanceIds: [String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
    }
}

extension ExitStandbyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ExitStandbyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ExitStandbyOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExitStandbyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExitStandbyOutputResponse(activities: \(String(describing: activities)))"}
}

extension ExitStandbyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ExitStandbyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.activities = output.activities
        } else {
            self.activities = nil
        }
    }
}

public struct ExitStandbyOutputResponse: Equatable {
    /// <p>The activities related to moving instances out of <code>Standby</code> mode.</p>
    public let activities: [Activity]?

    public init (
        activities: [Activity]? = nil
    )
    {
        self.activities = activities
    }
}

struct ExitStandbyOutputResponseBody: Equatable {
    public let activities: [Activity]?
}

extension ExitStandbyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activities = "Activities"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ExitStandbyResult"))
        if containerValues.contains(.activities) {
            struct KeyVal0{struct member{}}
            let activitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .activities)
            if let activitiesWrappedContainer = activitiesWrappedContainer {
                let activitiesContainer = try activitiesWrappedContainer.decodeIfPresent([Activity].self, forKey: .member)
                var activitiesBuffer:[Activity]? = nil
                if let activitiesContainer = activitiesContainer {
                    activitiesBuffer = [Activity]()
                    for structureContainer0 in activitiesContainer {
                        activitiesBuffer?.append(structureContainer0)
                    }
                }
                activities = activitiesBuffer
            } else {
                activities = []
            }
        } else {
            activities = nil
        }
    }
}

extension FailedScheduledUpdateGroupActionRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case scheduledActionName = "ScheduledActionName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let errorCode = errorCode {
            try container.encode(errorCode, forKey: Key("ErrorCode"))
        }
        if let errorMessage = errorMessage {
            try container.encode(errorMessage, forKey: Key("ErrorMessage"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: Key("ScheduledActionName"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension FailedScheduledUpdateGroupActionRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FailedScheduledUpdateGroupActionRequest(errorCode: \(String(describing: errorCode)), errorMessage: \(String(describing: errorMessage)), scheduledActionName: \(String(describing: scheduledActionName)))"}
}

/// <p>Describes a scheduled action that could not be created, updated, or deleted.</p>
public struct FailedScheduledUpdateGroupActionRequest: Equatable {
    /// <p>The error code.</p>
    public let errorCode: String?
    /// <p>The error message accompanying the error code.</p>
    public let errorMessage: String?
    /// <p>The name of the scheduled action.</p>
    public let scheduledActionName: String?

    public init (
        errorCode: String? = nil,
        errorMessage: String? = nil,
        scheduledActionName: String? = nil
    )
    {
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.scheduledActionName = scheduledActionName
    }
}

extension Filter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let name = name {
            try container.encode(name, forKey: Key("Name"))
        }
        if let values = values {
            var valuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Values"))
            for (index0, xmlstring0) in values.enumerated() {
                try valuesContainer.encode(xmlstring0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var valuesBuffer:[String]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [String]()
                    for stringContainer0 in valuesContainer {
                        valuesBuffer?.append(stringContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
    }
}

extension Filter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Filter(name: \(String(describing: name)), values: \(String(describing: values)))"}
}

/// <p>Describes a filter that is used to return a more specific list of results when
///             describing tags.</p>
///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling groups and
///                 instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
public struct Filter: Equatable {
    /// <p>The name of the filter. The valid values are: <code>auto-scaling-group</code>,
    ///                 <code>key</code>, <code>value</code>, and <code>propagate-at-launch</code>.</p>
    public let name: String?
    /// <p>One or more filter values. Filter values are case-sensitive.</p>
    public let values: [String]?

    public init (
        name: String? = nil,
        values: [String]? = nil
    )
    {
        self.name = name
        self.values = values
    }
}

public struct GetPredictiveScalingForecastInputBodyMiddleware: Middleware {
    public let id: String = "GetPredictiveScalingForecastInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetPredictiveScalingForecastInput>,
                  next: H) -> Swift.Result<OperationOutput<GetPredictiveScalingForecastOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetPredictiveScalingForecastInput>
    public typealias MOutput = OperationOutput<GetPredictiveScalingForecastOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetPredictiveScalingForecastOutputError>
}

extension GetPredictiveScalingForecastInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetPredictiveScalingForecastInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), endTime: \(String(describing: endTime)), policyName: \(String(describing: policyName)), startTime: \(String(describing: startTime)))"}
}

extension GetPredictiveScalingForecastInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: Key("PolicyName"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        try container.encode("GetPredictiveScalingForecast", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct GetPredictiveScalingForecastInputHeadersMiddleware: Middleware {
    public let id: String = "GetPredictiveScalingForecastInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetPredictiveScalingForecastInput>,
                  next: H) -> Swift.Result<OperationOutput<GetPredictiveScalingForecastOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetPredictiveScalingForecastInput>
    public typealias MOutput = OperationOutput<GetPredictiveScalingForecastOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetPredictiveScalingForecastOutputError>
}

public struct GetPredictiveScalingForecastInputQueryItemMiddleware: Middleware {
    public let id: String = "GetPredictiveScalingForecastInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetPredictiveScalingForecastInput>,
                  next: H) -> Swift.Result<OperationOutput<GetPredictiveScalingForecastOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetPredictiveScalingForecastInput>
    public typealias MOutput = OperationOutput<GetPredictiveScalingForecastOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetPredictiveScalingForecastOutputError>
}

public struct GetPredictiveScalingForecastInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The exclusive end time of the time range for the forecast data to get. The maximum
    ///             time duration between the start and end time is 30 days. </p>
    ///         <p>Although this parameter can accept a date and time that is more than two days in the
    ///             future, the availability of forecast data has limits. Amazon EC2 Auto Scaling only issues forecasts for
    ///             periods of two days in advance.</p>
    public let endTime: Date?
    /// <p>The name of the policy.</p>
    public let policyName: String?
    /// <p>The inclusive start time of the time range for the forecast data to get. At most, the
    ///             date and time can be one year before the current date and time.</p>
    public let startTime: Date?

    public init (
        autoScalingGroupName: String? = nil,
        endTime: Date? = nil,
        policyName: String? = nil,
        startTime: Date? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.endTime = endTime
        self.policyName = policyName
        self.startTime = startTime
    }
}

extension GetPredictiveScalingForecastOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetPredictiveScalingForecastOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPredictiveScalingForecastOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPredictiveScalingForecastOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetPredictiveScalingForecastOutputResponse(capacityForecast: \(String(describing: capacityForecast)), loadForecast: \(String(describing: loadForecast)), updateTime: \(String(describing: updateTime)))"}
}

extension GetPredictiveScalingForecastOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetPredictiveScalingForecastOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.capacityForecast = output.capacityForecast
            self.loadForecast = output.loadForecast
            self.updateTime = output.updateTime
        } else {
            self.capacityForecast = nil
            self.loadForecast = nil
            self.updateTime = nil
        }
    }
}

public struct GetPredictiveScalingForecastOutputResponse: Equatable {
    /// <p>The capacity forecast.</p>
    public let capacityForecast: CapacityForecast?
    /// <p>The load forecast.</p>
    public let loadForecast: [LoadForecast]?
    /// <p>The time the forecast was made.</p>
    public let updateTime: Date?

    public init (
        capacityForecast: CapacityForecast? = nil,
        loadForecast: [LoadForecast]? = nil,
        updateTime: Date? = nil
    )
    {
        self.capacityForecast = capacityForecast
        self.loadForecast = loadForecast
        self.updateTime = updateTime
    }
}

struct GetPredictiveScalingForecastOutputResponseBody: Equatable {
    public let loadForecast: [LoadForecast]?
    public let capacityForecast: CapacityForecast?
    public let updateTime: Date?
}

extension GetPredictiveScalingForecastOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case capacityForecast = "CapacityForecast"
        case loadForecast = "LoadForecast"
        case updateTime = "UpdateTime"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("GetPredictiveScalingForecastResult"))
        if containerValues.contains(.loadForecast) {
            struct KeyVal0{struct member{}}
            let loadForecastWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadForecast)
            if let loadForecastWrappedContainer = loadForecastWrappedContainer {
                let loadForecastContainer = try loadForecastWrappedContainer.decodeIfPresent([LoadForecast].self, forKey: .member)
                var loadForecastBuffer:[LoadForecast]? = nil
                if let loadForecastContainer = loadForecastContainer {
                    loadForecastBuffer = [LoadForecast]()
                    for structureContainer0 in loadForecastContainer {
                        loadForecastBuffer?.append(structureContainer0)
                    }
                }
                loadForecast = loadForecastBuffer
            } else {
                loadForecast = []
            }
        } else {
            loadForecast = nil
        }
        let capacityForecastDecoded = try containerValues.decodeIfPresent(CapacityForecast.self, forKey: .capacityForecast)
        capacityForecast = capacityForecastDecoded
        let updateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updateTime)
        var updateTimeBuffer:Date? = nil
        if let updateTimeDecoded = updateTimeDecoded {
            updateTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(updateTimeDecoded, format: .dateTime)
        }
        updateTime = updateTimeBuffer
    }
}

extension Instance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone = "AvailabilityZone"
        case healthStatus = "HealthStatus"
        case instanceId = "InstanceId"
        case instanceType = "InstanceType"
        case launchConfigurationName = "LaunchConfigurationName"
        case launchTemplate = "LaunchTemplate"
        case lifecycleState = "LifecycleState"
        case protectedFromScaleIn = "ProtectedFromScaleIn"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: Key("AvailabilityZone"))
        }
        if let healthStatus = healthStatus {
            try container.encode(healthStatus, forKey: Key("HealthStatus"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: Key("InstanceType"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: Key("LaunchTemplate"))
        }
        if let lifecycleState = lifecycleState {
            try container.encode(lifecycleState, forKey: Key("LifecycleState"))
        }
        if let protectedFromScaleIn = protectedFromScaleIn {
            try container.encode(protectedFromScaleIn, forKey: Key("ProtectedFromScaleIn"))
        }
        if let weightedCapacity = weightedCapacity {
            try container.encode(weightedCapacity, forKey: Key("WeightedCapacity"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let lifecycleStateDecoded = try containerValues.decodeIfPresent(LifecycleState.self, forKey: .lifecycleState)
        lifecycleState = lifecycleStateDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let protectedFromScaleInDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .protectedFromScaleIn)
        protectedFromScaleIn = protectedFromScaleInDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
    }
}

extension Instance: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Instance(availabilityZone: \(String(describing: availabilityZone)), healthStatus: \(String(describing: healthStatus)), instanceId: \(String(describing: instanceId)), instanceType: \(String(describing: instanceType)), launchConfigurationName: \(String(describing: launchConfigurationName)), launchTemplate: \(String(describing: launchTemplate)), lifecycleState: \(String(describing: lifecycleState)), protectedFromScaleIn: \(String(describing: protectedFromScaleIn)), weightedCapacity: \(String(describing: weightedCapacity)))"}
}

/// <p>Describes an EC2 instance.</p>
public struct Instance: Equatable {
    /// <p>The Availability Zone in which the instance is running.</p>
    public let availabilityZone: String?
    /// <p>The last reported health status of the instance. "Healthy" means that the instance is
    ///             healthy and should remain in service. "Unhealthy" means that the instance is unhealthy
    ///             and that Amazon EC2 Auto Scaling should terminate and replace it.</p>
    public let healthStatus: String?
    /// <p>The ID of the instance.</p>
    public let instanceId: String?
    /// <p>The instance type of the EC2 instance.</p>
    public let instanceType: String?
    /// <p>The launch configuration associated with the instance.</p>
    public let launchConfigurationName: String?
    /// <p>The launch template for the instance.</p>
    public let launchTemplate: LaunchTemplateSpecification?
    /// <p>A description of the current lifecycle state. The <code>Quarantined</code> state is
    ///             not used. For information about lifecycle states, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Instance
    ///                 lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>. </p>
    public let lifecycleState: LifecycleState?
    /// <p>Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling
    ///             in.</p>
    public let protectedFromScaleIn: Bool?
    /// <p>The number of capacity units contributed by the instance based on its instance
    ///             type.</p>
    ///         <p>Valid Range: Minimum value of 1. Maximum value of 999.</p>
    public let weightedCapacity: String?

    public init (
        availabilityZone: String? = nil,
        healthStatus: String? = nil,
        instanceId: String? = nil,
        instanceType: String? = nil,
        launchConfigurationName: String? = nil,
        launchTemplate: LaunchTemplateSpecification? = nil,
        lifecycleState: LifecycleState? = nil,
        protectedFromScaleIn: Bool? = nil,
        weightedCapacity: String? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.healthStatus = healthStatus
        self.instanceId = instanceId
        self.instanceType = instanceType
        self.launchConfigurationName = launchConfigurationName
        self.launchTemplate = launchTemplate
        self.lifecycleState = lifecycleState
        self.protectedFromScaleIn = protectedFromScaleIn
        self.weightedCapacity = weightedCapacity
    }
}

public enum InstanceMetadataEndpointState {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension InstanceMetadataEndpointState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceMetadataEndpointState] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "disabled"
        case .enabled: return "enabled"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceMetadataEndpointState(rawValue: rawValue) ?? InstanceMetadataEndpointState.sdkUnknown(rawValue)
    }
}

public enum InstanceMetadataHttpTokensState {
    case `optional`
    case `required`
    case sdkUnknown(String)
}

extension InstanceMetadataHttpTokensState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceMetadataHttpTokensState] {
        return [
            .optional,
            .required,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .optional: return "optional"
        case .required: return "required"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceMetadataHttpTokensState(rawValue: rawValue) ?? InstanceMetadataHttpTokensState.sdkUnknown(rawValue)
    }
}

extension InstanceMetadataOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case httpEndpoint = "HttpEndpoint"
        case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
        case httpTokens = "HttpTokens"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let httpEndpoint = httpEndpoint {
            try container.encode(httpEndpoint, forKey: Key("HttpEndpoint"))
        }
        if let httpPutResponseHopLimit = httpPutResponseHopLimit {
            try container.encode(httpPutResponseHopLimit, forKey: Key("HttpPutResponseHopLimit"))
        }
        if let httpTokens = httpTokens {
            try container.encode(httpTokens, forKey: Key("HttpTokens"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let httpTokensDecoded = try containerValues.decodeIfPresent(InstanceMetadataHttpTokensState.self, forKey: .httpTokens)
        httpTokens = httpTokensDecoded
        let httpPutResponseHopLimitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .httpPutResponseHopLimit)
        httpPutResponseHopLimit = httpPutResponseHopLimitDecoded
        let httpEndpointDecoded = try containerValues.decodeIfPresent(InstanceMetadataEndpointState.self, forKey: .httpEndpoint)
        httpEndpoint = httpEndpointDecoded
    }
}

extension InstanceMetadataOptions: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceMetadataOptions(httpEndpoint: \(String(describing: httpEndpoint)), httpPutResponseHopLimit: \(String(describing: httpPutResponseHopLimit)), httpTokens: \(String(describing: httpTokens)))"}
}

/// <p>The metadata options for the instances. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds">Configuring the Instance Metadata Options</a> in the
///                 <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
public struct InstanceMetadataOptions: Equatable {
    /// <p>This parameter enables or disables the HTTP metadata endpoint on your instances. If
    ///             the parameter is not specified, the default state is <code>enabled</code>.</p>
    ///         <note>
    ///             <p>If you specify a value of <code>disabled</code>, you will not be able to access
    ///                 your instance metadata. </p>
    ///         </note>
    public let httpEndpoint: InstanceMetadataEndpointState?
    /// <p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the
    ///             number, the further instance metadata requests can travel.</p>
    ///         <p>Default: 1</p>
    public let httpPutResponseHopLimit: Int?
    /// <p>The state of token usage for your instance metadata requests. If the parameter is not
    ///             specified in the request, the default state is <code>optional</code>.</p>
    ///         <p>If the state is <code>optional</code>, you can choose to retrieve instance metadata
    ///             with or without a signed token header on your request. If you retrieve the IAM role
    ///             credentials without a token, the version 1.0 role credentials are returned. If you
    ///             retrieve the IAM role credentials using a valid signed token, the version 2.0 role
    ///             credentials are returned.</p>
    ///         <p>If the state is <code>required</code>, you must send a signed token header with any
    ///             instance metadata retrieval requests. In this state, retrieving the IAM role credentials
    ///             always returns the version 2.0 credentials; the version 1.0 credentials are not
    ///             available.</p>
    public let httpTokens: InstanceMetadataHttpTokensState?

    public init (
        httpEndpoint: InstanceMetadataEndpointState? = nil,
        httpPutResponseHopLimit: Int? = nil,
        httpTokens: InstanceMetadataHttpTokensState? = nil
    )
    {
        self.httpEndpoint = httpEndpoint
        self.httpPutResponseHopLimit = httpPutResponseHopLimit
        self.httpTokens = httpTokens
    }
}

extension InstanceMonitoring: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let enabled = enabled {
            try container.encode(enabled, forKey: Key("Enabled"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension InstanceMonitoring: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceMonitoring(enabled: \(String(describing: enabled)))"}
}

/// <p>Describes whether detailed monitoring is enabled for the Auto Scaling instances.</p>
public struct InstanceMonitoring: Equatable {
    /// <p>If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is
    ///             enabled.</p>
    public let enabled: Bool?

    public init (
        enabled: Bool? = nil
    )
    {
        self.enabled = enabled
    }
}

extension InstanceRefresh: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case endTime = "EndTime"
        case instanceRefreshId = "InstanceRefreshId"
        case instancesToUpdate = "InstancesToUpdate"
        case percentageComplete = "PercentageComplete"
        case progressDetails = "ProgressDetails"
        case startTime = "StartTime"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let instanceRefreshId = instanceRefreshId {
            try container.encode(instanceRefreshId, forKey: Key("InstanceRefreshId"))
        }
        if let instancesToUpdate = instancesToUpdate {
            try container.encode(instancesToUpdate, forKey: Key("InstancesToUpdate"))
        }
        if let percentageComplete = percentageComplete {
            try container.encode(percentageComplete, forKey: Key("PercentageComplete"))
        }
        if let progressDetails = progressDetails {
            try container.encode(progressDetails, forKey: Key("ProgressDetails"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: Key("StatusReason"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceRefreshIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceRefreshId)
        instanceRefreshId = instanceRefreshIdDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InstanceRefreshStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        var startTimeBuffer:Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endTime)
        var endTimeBuffer:Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let percentageCompleteDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .percentageComplete)
        percentageComplete = percentageCompleteDecoded
        let instancesToUpdateDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instancesToUpdate)
        instancesToUpdate = instancesToUpdateDecoded
        let progressDetailsDecoded = try containerValues.decodeIfPresent(InstanceRefreshProgressDetails.self, forKey: .progressDetails)
        progressDetails = progressDetailsDecoded
    }
}

extension InstanceRefresh: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceRefresh(autoScalingGroupName: \(String(describing: autoScalingGroupName)), endTime: \(String(describing: endTime)), instanceRefreshId: \(String(describing: instanceRefreshId)), instancesToUpdate: \(String(describing: instancesToUpdate)), percentageComplete: \(String(describing: percentageComplete)), progressDetails: \(String(describing: progressDetails)), startTime: \(String(describing: startTime)), status: \(String(describing: status)), statusReason: \(String(describing: statusReason)))"}
}

/// <p>Describes an instance refresh for an Auto Scaling group. </p>
public struct InstanceRefresh: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The date and time at which the instance refresh ended.</p>
    public let endTime: Date?
    /// <p>The instance refresh ID.</p>
    public let instanceRefreshId: String?
    /// <p>The number of instances remaining to update before the instance refresh is
    ///             complete.</p>
    public let instancesToUpdate: Int?
    /// <p>The percentage of the instance refresh that is complete. For each instance
    ///             replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time. When the
    ///             instance's health status changes to healthy and the specified warm-up time passes, the
    ///             instance is considered updated and is added to the percentage complete.</p>
    public let percentageComplete: Int?
    /// <p>Additional progress details for an Auto Scaling group that has a warm pool.</p>
    public let progressDetails: InstanceRefreshProgressDetails?
    /// <p>The date and time at which the instance refresh began.</p>
    public let startTime: Date?
    /// <p>The current status for the instance refresh operation:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>Pending</code> - The request was created, but the operation has not
    ///                     started.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>InProgress</code> - The operation is in progress.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Successful</code> - The operation completed successfully.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Failed</code> - The operation failed to complete. You can troubleshoot
    ///                     using the status reason and the scaling activities. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Cancelling</code> - An ongoing operation is being cancelled.
    ///                     Cancellation does not roll back any replacements that have already been
    ///                     completed, but it prevents new replacements from being started. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Cancelled</code> - The operation is cancelled. </p>
    ///             </li>
    ///          </ul>
    public let status: InstanceRefreshStatus?
    /// <p>Provides more details about the current status of the instance refresh. </p>
    public let statusReason: String?

    public init (
        autoScalingGroupName: String? = nil,
        endTime: Date? = nil,
        instanceRefreshId: String? = nil,
        instancesToUpdate: Int? = nil,
        percentageComplete: Int? = nil,
        progressDetails: InstanceRefreshProgressDetails? = nil,
        startTime: Date? = nil,
        status: InstanceRefreshStatus? = nil,
        statusReason: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.endTime = endTime
        self.instanceRefreshId = instanceRefreshId
        self.instancesToUpdate = instancesToUpdate
        self.percentageComplete = percentageComplete
        self.progressDetails = progressDetails
        self.startTime = startTime
        self.status = status
        self.statusReason = statusReason
    }
}

extension InstanceRefreshInProgressFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceRefreshInProgressFault(message: \(String(describing: message)))"}
}

extension InstanceRefreshInProgressFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InstanceRefreshInProgressFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request failed because an active instance refresh operation already exists for the
///             specified Auto Scaling group.</p>
public struct InstanceRefreshInProgressFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceRefreshInProgressFaultBody: Equatable {
    public let message: String?
}

extension InstanceRefreshInProgressFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InstanceRefreshLivePoolProgress: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instancesToUpdate = "InstancesToUpdate"
        case percentageComplete = "PercentageComplete"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let instancesToUpdate = instancesToUpdate {
            try container.encode(instancesToUpdate, forKey: Key("InstancesToUpdate"))
        }
        if let percentageComplete = percentageComplete {
            try container.encode(percentageComplete, forKey: Key("PercentageComplete"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let percentageCompleteDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .percentageComplete)
        percentageComplete = percentageCompleteDecoded
        let instancesToUpdateDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instancesToUpdate)
        instancesToUpdate = instancesToUpdateDecoded
    }
}

extension InstanceRefreshLivePoolProgress: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceRefreshLivePoolProgress(instancesToUpdate: \(String(describing: instancesToUpdate)), percentageComplete: \(String(describing: percentageComplete)))"}
}

/// <p>Reports the progress of an instance refresh on instances that are in the Auto Scaling
///             group.</p>
public struct InstanceRefreshLivePoolProgress: Equatable {
    /// <p>The number of instances remaining to update.</p>
    public let instancesToUpdate: Int?
    /// <p>The percentage of instances in the Auto Scaling group that have been replaced. For each
    ///             instance replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time.
    ///             When the instance's health status changes to healthy and the specified warm-up time
    ///             passes, the instance is considered updated and is added to the percentage
    ///             complete.</p>
    public let percentageComplete: Int?

    public init (
        instancesToUpdate: Int? = nil,
        percentageComplete: Int? = nil
    )
    {
        self.instancesToUpdate = instancesToUpdate
        self.percentageComplete = percentageComplete
    }
}

extension InstanceRefreshProgressDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case livePoolProgress = "LivePoolProgress"
        case warmPoolProgress = "WarmPoolProgress"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let livePoolProgress = livePoolProgress {
            try container.encode(livePoolProgress, forKey: Key("LivePoolProgress"))
        }
        if let warmPoolProgress = warmPoolProgress {
            try container.encode(warmPoolProgress, forKey: Key("WarmPoolProgress"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let livePoolProgressDecoded = try containerValues.decodeIfPresent(InstanceRefreshLivePoolProgress.self, forKey: .livePoolProgress)
        livePoolProgress = livePoolProgressDecoded
        let warmPoolProgressDecoded = try containerValues.decodeIfPresent(InstanceRefreshWarmPoolProgress.self, forKey: .warmPoolProgress)
        warmPoolProgress = warmPoolProgressDecoded
    }
}

extension InstanceRefreshProgressDetails: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceRefreshProgressDetails(livePoolProgress: \(String(describing: livePoolProgress)), warmPoolProgress: \(String(describing: warmPoolProgress)))"}
}

/// <p>Reports the progress of an instance refresh on an Auto Scaling group that has a warm pool.
///             This includes separate details for instances in the warm pool and instances in the Auto Scaling
///             group (the live pool).</p>
public struct InstanceRefreshProgressDetails: Equatable {
    /// <p>Indicates the progress of an instance refresh on instances that are in the Auto Scaling
    ///             group.</p>
    public let livePoolProgress: InstanceRefreshLivePoolProgress?
    /// <p>Indicates the progress of an instance refresh on instances that are in the warm
    ///             pool.</p>
    public let warmPoolProgress: InstanceRefreshWarmPoolProgress?

    public init (
        livePoolProgress: InstanceRefreshLivePoolProgress? = nil,
        warmPoolProgress: InstanceRefreshWarmPoolProgress? = nil
    )
    {
        self.livePoolProgress = livePoolProgress
        self.warmPoolProgress = warmPoolProgress
    }
}

public enum InstanceRefreshStatus {
    case cancelled
    case cancelling
    case failed
    case inprogress
    case pending
    case successful
    case sdkUnknown(String)
}

extension InstanceRefreshStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceRefreshStatus] {
        return [
            .cancelled,
            .cancelling,
            .failed,
            .inprogress,
            .pending,
            .successful,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cancelled: return "Cancelled"
        case .cancelling: return "Cancelling"
        case .failed: return "Failed"
        case .inprogress: return "InProgress"
        case .pending: return "Pending"
        case .successful: return "Successful"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceRefreshStatus(rawValue: rawValue) ?? InstanceRefreshStatus.sdkUnknown(rawValue)
    }
}

extension InstanceRefreshWarmPoolProgress: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instancesToUpdate = "InstancesToUpdate"
        case percentageComplete = "PercentageComplete"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let instancesToUpdate = instancesToUpdate {
            try container.encode(instancesToUpdate, forKey: Key("InstancesToUpdate"))
        }
        if let percentageComplete = percentageComplete {
            try container.encode(percentageComplete, forKey: Key("PercentageComplete"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let percentageCompleteDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .percentageComplete)
        percentageComplete = percentageCompleteDecoded
        let instancesToUpdateDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instancesToUpdate)
        instancesToUpdate = instancesToUpdateDecoded
    }
}

extension InstanceRefreshWarmPoolProgress: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceRefreshWarmPoolProgress(instancesToUpdate: \(String(describing: instancesToUpdate)), percentageComplete: \(String(describing: percentageComplete)))"}
}

/// <p>Reports the progress of an instance refresh on instances that are in the warm
///             pool.</p>
public struct InstanceRefreshWarmPoolProgress: Equatable {
    /// <p>The number of instances remaining to update.</p>
    public let instancesToUpdate: Int?
    /// <p>The percentage of instances in the warm pool that have been replaced. For each
    ///             instance replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time.
    ///             When the instance's health status changes to healthy and the specified warm-up time
    ///             passes, the instance is considered updated and is added to the percentage
    ///             complete.</p>
    public let percentageComplete: Int?

    public init (
        instancesToUpdate: Int? = nil,
        percentageComplete: Int? = nil
    )
    {
        self.instancesToUpdate = instancesToUpdate
        self.percentageComplete = percentageComplete
    }
}

extension InstancesDistribution: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case onDemandAllocationStrategy = "OnDemandAllocationStrategy"
        case onDemandBaseCapacity = "OnDemandBaseCapacity"
        case onDemandPercentageAboveBaseCapacity = "OnDemandPercentageAboveBaseCapacity"
        case spotAllocationStrategy = "SpotAllocationStrategy"
        case spotInstancePools = "SpotInstancePools"
        case spotMaxPrice = "SpotMaxPrice"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let onDemandAllocationStrategy = onDemandAllocationStrategy {
            try container.encode(onDemandAllocationStrategy, forKey: Key("OnDemandAllocationStrategy"))
        }
        if let onDemandBaseCapacity = onDemandBaseCapacity {
            try container.encode(onDemandBaseCapacity, forKey: Key("OnDemandBaseCapacity"))
        }
        if let onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity {
            try container.encode(onDemandPercentageAboveBaseCapacity, forKey: Key("OnDemandPercentageAboveBaseCapacity"))
        }
        if let spotAllocationStrategy = spotAllocationStrategy {
            try container.encode(spotAllocationStrategy, forKey: Key("SpotAllocationStrategy"))
        }
        if let spotInstancePools = spotInstancePools {
            try container.encode(spotInstancePools, forKey: Key("SpotInstancePools"))
        }
        if let spotMaxPrice = spotMaxPrice {
            try container.encode(spotMaxPrice, forKey: Key("SpotMaxPrice"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let onDemandAllocationStrategyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .onDemandAllocationStrategy)
        onDemandAllocationStrategy = onDemandAllocationStrategyDecoded
        let onDemandBaseCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .onDemandBaseCapacity)
        onDemandBaseCapacity = onDemandBaseCapacityDecoded
        let onDemandPercentageAboveBaseCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .onDemandPercentageAboveBaseCapacity)
        onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacityDecoded
        let spotAllocationStrategyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .spotAllocationStrategy)
        spotAllocationStrategy = spotAllocationStrategyDecoded
        let spotInstancePoolsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .spotInstancePools)
        spotInstancePools = spotInstancePoolsDecoded
        let spotMaxPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .spotMaxPrice)
        spotMaxPrice = spotMaxPriceDecoded
    }
}

extension InstancesDistribution: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstancesDistribution(onDemandAllocationStrategy: \(String(describing: onDemandAllocationStrategy)), onDemandBaseCapacity: \(String(describing: onDemandBaseCapacity)), onDemandPercentageAboveBaseCapacity: \(String(describing: onDemandPercentageAboveBaseCapacity)), spotAllocationStrategy: \(String(describing: spotAllocationStrategy)), spotInstancePools: \(String(describing: spotInstancePools)), spotMaxPrice: \(String(describing: spotMaxPrice)))"}
}

/// <p>Describes an instances distribution for an Auto Scaling group with a <a>MixedInstancesPolicy</a>.</p>
///         <p>The instances distribution specifies the distribution of On-Demand Instances and Spot
///             Instances, the maximum price to pay for Spot Instances, and how the Auto Scaling group allocates
///             instance types to fulfill On-Demand and Spot capacities.</p>
///         <p>When you update <code>SpotAllocationStrategy</code>, <code>SpotInstancePools</code>,
///             or <code>SpotMaxPrice</code>, this update action does not deploy any changes across the
///             running Amazon EC2 instances in the group. Your existing Spot Instances continue to run
///             as long as the maximum price for those instances is higher than the current Spot price.
///             When scale out occurs, Amazon EC2 Auto Scaling launches instances based on the new settings. When scale
///             in occurs, Amazon EC2 Auto Scaling terminates instances according to the group's termination
///             policies.</p>
public struct InstancesDistribution: Equatable {
    /// <p>Indicates how to allocate instance types to fulfill On-Demand capacity. The only valid
    ///             value is <code>prioritized</code>, which is also the default value. This strategy uses
    ///             the order of instance types in the <code>LaunchTemplateOverrides</code> to define the
    ///             launch priority of each instance type. The first instance type in the array is
    ///             prioritized higher than the last. If all your On-Demand capacity cannot be fulfilled
    ///             using your highest priority instance, then the Auto Scaling groups launches the remaining
    ///             capacity using the second priority instance type, and so on.</p>
    public let onDemandAllocationStrategy: String?
    /// <p>The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand
    ///             Instances. This base portion is provisioned first as your group scales. Defaults to 0 if
    ///             not specified. If you specify weights for the instance types in the overrides, set the
    ///             value of <code>OnDemandBaseCapacity</code> in terms of the number of capacity units, and
    ///             not the number of instances.</p>
    public let onDemandBaseCapacity: Int?
    /// <p>Controls the percentages of On-Demand Instances and Spot Instances for your additional
    ///             capacity beyond <code>OnDemandBaseCapacity</code>. Expressed as a number (for example,
    ///             20 specifies 20% On-Demand Instances, 80% Spot Instances). Defaults to 100 if not
    ///             specified. If set to 100, only On-Demand Instances are provisioned.</p>
    public let onDemandPercentageAboveBaseCapacity: Int?
    /// <p>Indicates how to allocate instances across Spot Instance pools. </p>
    ///         <p>If the allocation strategy is <code>lowest-price</code>, the Auto Scaling group launches
    ///             instances using the Spot pools with the lowest price, and evenly allocates your
    ///             instances across the number of Spot pools that you specify. Defaults to
    ///                 <code>lowest-price</code> if not specified.</p>
    ///         <p>If the allocation strategy is <code>capacity-optimized</code> (recommended), the Auto Scaling
    ///             group launches instances using Spot pools that are optimally chosen based on the
    ///             available Spot capacity. Alternatively, you can use
    ///                 <code>capacity-optimized-prioritized</code> and set the order of instance types in
    ///             the list of launch template overrides from highest to lowest priority (from first to
    ///             last in the list). Amazon EC2 Auto Scaling honors the instance type priorities on a best-effort basis
    ///             but optimizes for capacity first. </p>
    public let spotAllocationStrategy: String?
    /// <p>The number of Spot Instance pools across which to allocate your Spot Instances. The
    ///             Spot pools are determined from the different instance types in the overrides. Valid only
    ///             when the Spot allocation strategy is <code>lowest-price</code>. Value must be in the
    ///             range of 1 to 20. Defaults to 2 if not specified.</p>
    public let spotInstancePools: Int?
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance. If
    ///             you leave the value at its default (empty), Amazon EC2 Auto Scaling uses the On-Demand price as the
    ///             maximum Spot price. To remove a value that you previously set, include the property but
    ///             specify an empty string ("") for the value.</p>
    public let spotMaxPrice: String?

    public init (
        onDemandAllocationStrategy: String? = nil,
        onDemandBaseCapacity: Int? = nil,
        onDemandPercentageAboveBaseCapacity: Int? = nil,
        spotAllocationStrategy: String? = nil,
        spotInstancePools: Int? = nil,
        spotMaxPrice: String? = nil
    )
    {
        self.onDemandAllocationStrategy = onDemandAllocationStrategy
        self.onDemandBaseCapacity = onDemandBaseCapacity
        self.onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity
        self.spotAllocationStrategy = spotAllocationStrategy
        self.spotInstancePools = spotInstancePools
        self.spotMaxPrice = spotMaxPrice
    }
}

extension InvalidNextToken: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidNextToken(message: \(String(describing: message)))"}
}

extension InvalidNextToken: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<InvalidNextTokenBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The <code>NextToken</code> value is not valid.</p>
public struct InvalidNextToken: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p></p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNextTokenBody: Equatable {
    public let message: String?
}

extension InvalidNextTokenBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LaunchConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case associatePublicIpAddress = "AssociatePublicIpAddress"
        case blockDeviceMappings = "BlockDeviceMappings"
        case classicLinkVPCId = "ClassicLinkVPCId"
        case classicLinkVPCSecurityGroups = "ClassicLinkVPCSecurityGroups"
        case createdTime = "CreatedTime"
        case ebsOptimized = "EbsOptimized"
        case iamInstanceProfile = "IamInstanceProfile"
        case imageId = "ImageId"
        case instanceMonitoring = "InstanceMonitoring"
        case instanceType = "InstanceType"
        case kernelId = "KernelId"
        case keyName = "KeyName"
        case launchConfigurationARN = "LaunchConfigurationARN"
        case launchConfigurationName = "LaunchConfigurationName"
        case metadataOptions = "MetadataOptions"
        case placementTenancy = "PlacementTenancy"
        case ramdiskId = "RamdiskId"
        case securityGroups = "SecurityGroups"
        case spotPrice = "SpotPrice"
        case userData = "UserData"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let associatePublicIpAddress = associatePublicIpAddress {
            try container.encode(associatePublicIpAddress, forKey: Key("AssociatePublicIpAddress"))
        }
        if let blockDeviceMappings = blockDeviceMappings {
            var blockDeviceMappingsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("BlockDeviceMappings"))
            for (index0, blockdevicemapping0) in blockDeviceMappings.enumerated() {
                try blockDeviceMappingsContainer.encode(blockdevicemapping0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let classicLinkVPCId = classicLinkVPCId {
            try container.encode(classicLinkVPCId, forKey: Key("ClassicLinkVPCId"))
        }
        if let classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups {
            var classicLinkVPCSecurityGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ClassicLinkVPCSecurityGroups"))
            for (index0, xmlstringmaxlen2550) in classicLinkVPCSecurityGroups.enumerated() {
                try classicLinkVPCSecurityGroupsContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let createdTime = createdTime {
            try container.encode(TimestampWrapper(createdTime, format: .dateTime), forKey: Key("createdTime"))
        }
        if let ebsOptimized = ebsOptimized {
            try container.encode(ebsOptimized, forKey: Key("EbsOptimized"))
        }
        if let iamInstanceProfile = iamInstanceProfile {
            try container.encode(iamInstanceProfile, forKey: Key("IamInstanceProfile"))
        }
        if let imageId = imageId {
            try container.encode(imageId, forKey: Key("ImageId"))
        }
        if let instanceMonitoring = instanceMonitoring {
            try container.encode(instanceMonitoring, forKey: Key("InstanceMonitoring"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: Key("InstanceType"))
        }
        if let kernelId = kernelId {
            try container.encode(kernelId, forKey: Key("KernelId"))
        }
        if let keyName = keyName {
            try container.encode(keyName, forKey: Key("KeyName"))
        }
        if let launchConfigurationARN = launchConfigurationARN {
            try container.encode(launchConfigurationARN, forKey: Key("LaunchConfigurationARN"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: Key("LaunchConfigurationName"))
        }
        if let metadataOptions = metadataOptions {
            try container.encode(metadataOptions, forKey: Key("MetadataOptions"))
        }
        if let placementTenancy = placementTenancy {
            try container.encode(placementTenancy, forKey: Key("PlacementTenancy"))
        }
        if let ramdiskId = ramdiskId {
            try container.encode(ramdiskId, forKey: Key("RamdiskId"))
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SecurityGroups"))
            for (index0, xmlstring0) in securityGroups.enumerated() {
                try securityGroupsContainer.encode(xmlstring0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let spotPrice = spotPrice {
            try container.encode(spotPrice, forKey: Key("SpotPrice"))
        }
        if let userData = userData {
            try container.encode(userData, forKey: Key("UserData"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchConfigurationARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchConfigurationARN)
        launchConfigurationARN = launchConfigurationARNDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let keyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyName)
        keyName = keyNameDecoded
        if containerValues.contains(.securityGroups) {
            struct KeyVal0{struct member{}}
            let securityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .securityGroups)
            if let securityGroupsWrappedContainer = securityGroupsWrappedContainer {
                let securityGroupsContainer = try securityGroupsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var securityGroupsBuffer:[String]? = nil
                if let securityGroupsContainer = securityGroupsContainer {
                    securityGroupsBuffer = [String]()
                    for stringContainer0 in securityGroupsContainer {
                        securityGroupsBuffer?.append(stringContainer0)
                    }
                }
                securityGroups = securityGroupsBuffer
            } else {
                securityGroups = []
            }
        } else {
            securityGroups = nil
        }
        let classicLinkVPCIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .classicLinkVPCId)
        classicLinkVPCId = classicLinkVPCIdDecoded
        if containerValues.contains(.classicLinkVPCSecurityGroups) {
            struct KeyVal0{struct member{}}
            let classicLinkVPCSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .classicLinkVPCSecurityGroups)
            if let classicLinkVPCSecurityGroupsWrappedContainer = classicLinkVPCSecurityGroupsWrappedContainer {
                let classicLinkVPCSecurityGroupsContainer = try classicLinkVPCSecurityGroupsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var classicLinkVPCSecurityGroupsBuffer:[String]? = nil
                if let classicLinkVPCSecurityGroupsContainer = classicLinkVPCSecurityGroupsContainer {
                    classicLinkVPCSecurityGroupsBuffer = [String]()
                    for stringContainer0 in classicLinkVPCSecurityGroupsContainer {
                        classicLinkVPCSecurityGroupsBuffer?.append(stringContainer0)
                    }
                }
                classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroupsBuffer
            } else {
                classicLinkVPCSecurityGroups = []
            }
        } else {
            classicLinkVPCSecurityGroups = nil
        }
        let userDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userData)
        userData = userDataDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let kernelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kernelId)
        kernelId = kernelIdDecoded
        let ramdiskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ramdiskId)
        ramdiskId = ramdiskIdDecoded
        if containerValues.contains(.blockDeviceMappings) {
            struct KeyVal0{struct member{}}
            let blockDeviceMappingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .blockDeviceMappings)
            if let blockDeviceMappingsWrappedContainer = blockDeviceMappingsWrappedContainer {
                let blockDeviceMappingsContainer = try blockDeviceMappingsWrappedContainer.decodeIfPresent([BlockDeviceMapping].self, forKey: .member)
                var blockDeviceMappingsBuffer:[BlockDeviceMapping]? = nil
                if let blockDeviceMappingsContainer = blockDeviceMappingsContainer {
                    blockDeviceMappingsBuffer = [BlockDeviceMapping]()
                    for structureContainer0 in blockDeviceMappingsContainer {
                        blockDeviceMappingsBuffer?.append(structureContainer0)
                    }
                }
                blockDeviceMappings = blockDeviceMappingsBuffer
            } else {
                blockDeviceMappings = []
            }
        } else {
            blockDeviceMappings = nil
        }
        let instanceMonitoringDecoded = try containerValues.decodeIfPresent(InstanceMonitoring.self, forKey: .instanceMonitoring)
        instanceMonitoring = instanceMonitoringDecoded
        let spotPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .spotPrice)
        spotPrice = spotPriceDecoded
        let iamInstanceProfileDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamInstanceProfile)
        iamInstanceProfile = iamInstanceProfileDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdTime)
        var createdTimeBuffer:Date? = nil
        if let createdTimeDecoded = createdTimeDecoded {
            createdTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(createdTimeDecoded, format: .dateTime)
        }
        createdTime = createdTimeBuffer
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let associatePublicIpAddressDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .associatePublicIpAddress)
        associatePublicIpAddress = associatePublicIpAddressDecoded
        let placementTenancyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .placementTenancy)
        placementTenancy = placementTenancyDecoded
        let metadataOptionsDecoded = try containerValues.decodeIfPresent(InstanceMetadataOptions.self, forKey: .metadataOptions)
        metadataOptions = metadataOptionsDecoded
    }
}

extension LaunchConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LaunchConfiguration(associatePublicIpAddress: \(String(describing: associatePublicIpAddress)), blockDeviceMappings: \(String(describing: blockDeviceMappings)), classicLinkVPCId: \(String(describing: classicLinkVPCId)), classicLinkVPCSecurityGroups: \(String(describing: classicLinkVPCSecurityGroups)), createdTime: \(String(describing: createdTime)), ebsOptimized: \(String(describing: ebsOptimized)), iamInstanceProfile: \(String(describing: iamInstanceProfile)), imageId: \(String(describing: imageId)), instanceMonitoring: \(String(describing: instanceMonitoring)), instanceType: \(String(describing: instanceType)), kernelId: \(String(describing: kernelId)), keyName: \(String(describing: keyName)), launchConfigurationARN: \(String(describing: launchConfigurationARN)), launchConfigurationName: \(String(describing: launchConfigurationName)), metadataOptions: \(String(describing: metadataOptions)), placementTenancy: \(String(describing: placementTenancy)), ramdiskId: \(String(describing: ramdiskId)), securityGroups: \(String(describing: securityGroups)), spotPrice: \(String(describing: spotPrice)), userData: \(String(describing: userData)))"}
}

/// <p>Describes a launch configuration.</p>
public struct LaunchConfiguration: Equatable {
    /// <p>For Auto Scaling groups that are running in a VPC, specifies whether to assign a public IP
    ///             address to the group's instances. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling instances in a
    ///                 VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let associatePublicIpAddress: Bool?
    /// <p>A block device mapping, which specifies the block devices for the instance. For more
    ///             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device
    ///                 Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    public let blockDeviceMappings: [BlockDeviceMapping]?
    /// <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more
    ///             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the
    ///                 <i>Amazon EC2 User Guide for Linux Instances</i> and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic
    ///                 instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let classicLinkVPCId: String?
    /// <p>The IDs of one or more security groups for the VPC specified in
    ///                 <code>ClassicLinkVPCId</code>.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the
    ///                 <i>Amazon EC2 User Guide for Linux Instances</i> and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic
    ///                 instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let classicLinkVPCSecurityGroups: [String]?
    /// <p>The creation date and time for the launch configuration.</p>
    public let createdTime: Date?
    /// <p>Specifies whether the launch configuration is optimized for EBS I/O
    ///             (<code>true</code>) or not (<code>false</code>). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon
    ///                 EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    public let ebsOptimized: Bool?
    /// <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the
    ///             IAM role for the instance. The instance profile contains the IAM role. For more
    ///             information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM role for applications that run
    ///                 on Amazon EC2 instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let iamInstanceProfile: String?
    /// <p>The ID of the Amazon Machine Image (AMI) to use to launch your EC2 instances. For more
    ///             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the
    ///                 <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    public let imageId: String?
    /// <p>Controls whether instances in this group are launched with detailed
    ///             (<code>true</code>) or basic (<code>false</code>) monitoring.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html">Configure
    ///                 Monitoring for Auto Scaling Instances</a> in the
    ///             <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let instanceMonitoring: InstanceMonitoring?
    /// <p>The instance type for the instances.</p>
    ///         <p>For information about available instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available
    ///                 Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    public let instanceType: String?
    /// <p>The ID of the kernel associated with the AMI.</p>
    public let kernelId: String?
    /// <p>The name of the key pair.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the
    ///                 <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    public let keyName: String?
    /// <p>The Amazon Resource Name (ARN) of the launch configuration.</p>
    public let launchConfigurationARN: String?
    /// <p>The name of the launch configuration.</p>
    public let launchConfigurationName: String?
    /// <p>The metadata options for the instances. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds">Configuring the Instance Metadata Options</a> in the
    ///                 <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let metadataOptions: InstanceMetadataOptions?
    /// <p>The tenancy of the instance, either <code>default</code> or <code>dedicated</code>. An
    ///             instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware
    ///             and can only be launched into a VPC.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-dedicated-instances.html">Configuring
    ///                 instance tenancy with Amazon EC2 Auto Scaling</a> in the
    ///             <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let placementTenancy: String?
    /// <p>The ID of the RAM disk associated with the AMI.</p>
    public let ramdiskId: String?
    /// <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.
    ///             For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your
    ///                 VPC</a> in the <i>Amazon Virtual Private Cloud User
    ///             Guide</i>.</p>
    public let securityGroups: [String]?
    /// <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the
    ///             request. Spot Instances are launched when the price you specify exceeds the current Spot
    ///             price. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Requesting Spot
    ///                 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let spotPrice: String?
    /// <p>The user data to make available to the launched EC2 instances. For more information,
    ///             see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a> (Linux) and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html">Instance metadata and
    ///                 user data</a> (Windows). If you are using a command line tool, base64-encoding
    ///             is performed for you, and you can load the text from a file. Otherwise, you must provide
    ///             base64-encoded text. User data is limited to 16 KB.</p>
    public let userData: String?

    public init (
        associatePublicIpAddress: Bool? = nil,
        blockDeviceMappings: [BlockDeviceMapping]? = nil,
        classicLinkVPCId: String? = nil,
        classicLinkVPCSecurityGroups: [String]? = nil,
        createdTime: Date? = nil,
        ebsOptimized: Bool? = nil,
        iamInstanceProfile: String? = nil,
        imageId: String? = nil,
        instanceMonitoring: InstanceMonitoring? = nil,
        instanceType: String? = nil,
        kernelId: String? = nil,
        keyName: String? = nil,
        launchConfigurationARN: String? = nil,
        launchConfigurationName: String? = nil,
        metadataOptions: InstanceMetadataOptions? = nil,
        placementTenancy: String? = nil,
        ramdiskId: String? = nil,
        securityGroups: [String]? = nil,
        spotPrice: String? = nil,
        userData: String? = nil
    )
    {
        self.associatePublicIpAddress = associatePublicIpAddress
        self.blockDeviceMappings = blockDeviceMappings
        self.classicLinkVPCId = classicLinkVPCId
        self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
        self.createdTime = createdTime
        self.ebsOptimized = ebsOptimized
        self.iamInstanceProfile = iamInstanceProfile
        self.imageId = imageId
        self.instanceMonitoring = instanceMonitoring
        self.instanceType = instanceType
        self.kernelId = kernelId
        self.keyName = keyName
        self.launchConfigurationARN = launchConfigurationARN
        self.launchConfigurationName = launchConfigurationName
        self.metadataOptions = metadataOptions
        self.placementTenancy = placementTenancy
        self.ramdiskId = ramdiskId
        self.securityGroups = securityGroups
        self.spotPrice = spotPrice
        self.userData = userData
    }
}

extension LaunchTemplate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case launchTemplateSpecification = "LaunchTemplateSpecification"
        case overrides = "Overrides"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let launchTemplateSpecification = launchTemplateSpecification {
            try container.encode(launchTemplateSpecification, forKey: Key("LaunchTemplateSpecification"))
        }
        if let overrides = overrides {
            var overridesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Overrides"))
            for (index0, launchtemplateoverrides0) in overrides.enumerated() {
                try overridesContainer.encode(launchtemplateoverrides0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateSpecificationDecoded = try containerValues.decodeIfPresent(LaunchTemplateSpecification.self, forKey: .launchTemplateSpecification)
        launchTemplateSpecification = launchTemplateSpecificationDecoded
        if containerValues.contains(.overrides) {
            struct KeyVal0{struct member{}}
            let overridesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .overrides)
            if let overridesWrappedContainer = overridesWrappedContainer {
                let overridesContainer = try overridesWrappedContainer.decodeIfPresent([LaunchTemplateOverrides].self, forKey: .member)
                var overridesBuffer:[LaunchTemplateOverrides]? = nil
                if let overridesContainer = overridesContainer {
                    overridesBuffer = [LaunchTemplateOverrides]()
                    for structureContainer0 in overridesContainer {
                        overridesBuffer?.append(structureContainer0)
                    }
                }
                overrides = overridesBuffer
            } else {
                overrides = []
            }
        } else {
            overrides = nil
        }
    }
}

extension LaunchTemplate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LaunchTemplate(launchTemplateSpecification: \(String(describing: launchTemplateSpecification)), overrides: \(String(describing: overrides)))"}
}

/// <p>Describes a launch template and overrides. </p>
///         <p>You specify these properties as part of a mixed instances policy. </p>
///         <p>When you update the launch template or overrides, existing Amazon EC2 instances continue to
///             run. When scale out occurs, Amazon EC2 Auto Scaling launches instances to match the new settings. When
///             scale in occurs, Amazon EC2 Auto Scaling terminates instances according to the group's termination
///             policies.</p>
public struct LaunchTemplate: Equatable {
    /// <p>The launch template to use.</p>
    public let launchTemplateSpecification: LaunchTemplateSpecification?
    /// <p>Any properties that you specify override the same properties in the launch template.
    ///             If not provided, Amazon EC2 Auto Scaling uses the instance type specified in the launch template when
    ///             it launches an instance. </p>
    public let overrides: [LaunchTemplateOverrides]?

    public init (
        launchTemplateSpecification: LaunchTemplateSpecification? = nil,
        overrides: [LaunchTemplateOverrides]? = nil
    )
    {
        self.launchTemplateSpecification = launchTemplateSpecification
        self.overrides = overrides
    }
}

extension LaunchTemplateOverrides: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceType = "InstanceType"
        case launchTemplateSpecification = "LaunchTemplateSpecification"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: Key("InstanceType"))
        }
        if let launchTemplateSpecification = launchTemplateSpecification {
            try container.encode(launchTemplateSpecification, forKey: Key("LaunchTemplateSpecification"))
        }
        if let weightedCapacity = weightedCapacity {
            try container.encode(weightedCapacity, forKey: Key("WeightedCapacity"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
        let launchTemplateSpecificationDecoded = try containerValues.decodeIfPresent(LaunchTemplateSpecification.self, forKey: .launchTemplateSpecification)
        launchTemplateSpecification = launchTemplateSpecificationDecoded
    }
}

extension LaunchTemplateOverrides: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LaunchTemplateOverrides(instanceType: \(String(describing: instanceType)), launchTemplateSpecification: \(String(describing: launchTemplateSpecification)), weightedCapacity: \(String(describing: weightedCapacity)))"}
}

/// <p>Describes an override for a launch template. The maximum number of instance types that
///             can be associated with an Auto Scaling group is 40. The maximum number of distinct launch
///             templates you can define for an Auto Scaling group is 20. For more information about configuring
///             overrides, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-override-options.html">Configuring
///                 overrides</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>. </p>
public struct LaunchTemplateOverrides: Equatable {
    /// <p>The instance type, such as <code>m3.xlarge</code>. You must use an instance type that
    ///             is supported in your requested Region and Availability Zones. For more information, see
    ///                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon Elastic Compute Cloud User
    ///                 Guide</i>.</p>
    public let instanceType: String?
    /// <p>Provides the launch template to be used when launching the instance type. For example,
    ///             some instance types might require a launch template with a different AMI. If not
    ///             provided, Amazon EC2 Auto Scaling uses the launch template that's defined for your mixed instances
    ///             policy. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-template-overrides.html">Specifying a
    ///                 different launch template for an instance type</a> in the
    ///                 <i>Amazon EC2 Auto Scaling User Guide</i>. </p>
    public let launchTemplateSpecification: LaunchTemplateSpecification?
    /// <p>The number of capacity units provided by the specified instance type in terms of
    ///             virtual CPUs, memory, storage, throughput, or other relative performance characteristic.
    ///             When a Spot or On-Demand Instance is provisioned, the capacity units count toward the
    ///             desired capacity. Amazon EC2 Auto Scaling provisions instances until the desired capacity is totally
    ///             fulfilled, even if this results in an overage. For example, if there are 2 units
    ///             remaining to fulfill capacity, and Amazon EC2 Auto Scaling can only provision an instance with a
    ///                 <code>WeightedCapacity</code> of 5 units, the instance is provisioned, and the
    ///             desired capacity is exceeded by 3 units. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html">Instance weighting for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
    ///             Value must be in the range of 1 to 999.</p>
    public let weightedCapacity: String?

    public init (
        instanceType: String? = nil,
        launchTemplateSpecification: LaunchTemplateSpecification? = nil,
        weightedCapacity: String? = nil
    )
    {
        self.instanceType = instanceType
        self.launchTemplateSpecification = launchTemplateSpecification
        self.weightedCapacity = weightedCapacity
    }
}

extension LaunchTemplateSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case launchTemplateId = "LaunchTemplateId"
        case launchTemplateName = "LaunchTemplateName"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let launchTemplateId = launchTemplateId {
            try container.encode(launchTemplateId, forKey: Key("LaunchTemplateId"))
        }
        if let launchTemplateName = launchTemplateName {
            try container.encode(launchTemplateName, forKey: Key("LaunchTemplateName"))
        }
        if let version = version {
            try container.encode(version, forKey: Key("Version"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchTemplateId)
        launchTemplateId = launchTemplateIdDecoded
        let launchTemplateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchTemplateName)
        launchTemplateName = launchTemplateNameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
    }
}

extension LaunchTemplateSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LaunchTemplateSpecification(launchTemplateId: \(String(describing: launchTemplateId)), launchTemplateName: \(String(describing: launchTemplateName)), version: \(String(describing: version)))"}
}

/// <p>Describes the Amazon EC2 launch template and the launch template version that can be used
///             by an Auto Scaling group to configure Amazon EC2 instances.</p>
///         <p>The launch template that is specified must be configured for use with an Auto Scaling group.
///             For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a launch
///                 template for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
public struct LaunchTemplateSpecification: Equatable {
    /// <p>The ID of the launch template. To get the template ID, use the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html">DescribeLaunchTemplates</a> API operation. New launch templates can be created
    ///             using the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplate.html">CreateLaunchTemplate</a> API. </p>
    ///         <p>Conditional: You must specify either a <code>LaunchTemplateId</code> or a
    ///                 <code>LaunchTemplateName</code>.</p>
    public let launchTemplateId: String?
    /// <p>The name of the launch template. To get the template name, use the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html">DescribeLaunchTemplates</a> API operation. New launch templates can be created
    ///             using the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplate.html">CreateLaunchTemplate</a> API. </p>
    ///         <p>Conditional: You must specify either a <code>LaunchTemplateId</code> or a
    ///                 <code>LaunchTemplateName</code>.</p>
    public let launchTemplateName: String?
    /// <p>The version number, <code>$Latest</code>, or <code>$Default</code>. To get the version
    ///             number, use the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplateVersions.html">DescribeLaunchTemplateVersions</a> API operation. New launch template versions
    ///             can be created using the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplateVersion.html">CreateLaunchTemplateVersion</a> API. If the value is <code>$Latest</code>,
    ///             Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If
    ///             the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch
    ///             template when launching instances. The default value is <code>$Default</code>.</p>
    public let version: String?

    public init (
        launchTemplateId: String? = nil,
        launchTemplateName: String? = nil,
        version: String? = nil
    )
    {
        self.launchTemplateId = launchTemplateId
        self.launchTemplateName = launchTemplateName
        self.version = version
    }
}

extension LifecycleHook: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case defaultResult = "DefaultResult"
        case globalTimeout = "GlobalTimeout"
        case heartbeatTimeout = "HeartbeatTimeout"
        case lifecycleHookName = "LifecycleHookName"
        case lifecycleTransition = "LifecycleTransition"
        case notificationMetadata = "NotificationMetadata"
        case notificationTargetARN = "NotificationTargetARN"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let defaultResult = defaultResult {
            try container.encode(defaultResult, forKey: Key("DefaultResult"))
        }
        if let globalTimeout = globalTimeout {
            try container.encode(globalTimeout, forKey: Key("GlobalTimeout"))
        }
        if let heartbeatTimeout = heartbeatTimeout {
            try container.encode(heartbeatTimeout, forKey: Key("HeartbeatTimeout"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: Key("LifecycleHookName"))
        }
        if let lifecycleTransition = lifecycleTransition {
            try container.encode(lifecycleTransition, forKey: Key("LifecycleTransition"))
        }
        if let notificationMetadata = notificationMetadata {
            try container.encode(notificationMetadata, forKey: Key("NotificationMetadata"))
        }
        if let notificationTargetARN = notificationTargetARN {
            try container.encode(notificationTargetARN, forKey: Key("NotificationTargetARN"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: Key("RoleARN"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleHookNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lifecycleHookName)
        lifecycleHookName = lifecycleHookNameDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let lifecycleTransitionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lifecycleTransition)
        lifecycleTransition = lifecycleTransitionDecoded
        let notificationTargetARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationTargetARN)
        notificationTargetARN = notificationTargetARNDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let notificationMetadataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationMetadata)
        notificationMetadata = notificationMetadataDecoded
        let heartbeatTimeoutDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .heartbeatTimeout)
        heartbeatTimeout = heartbeatTimeoutDecoded
        let globalTimeoutDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .globalTimeout)
        globalTimeout = globalTimeoutDecoded
        let defaultResultDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultResult)
        defaultResult = defaultResultDecoded
    }
}

extension LifecycleHook: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LifecycleHook(autoScalingGroupName: \(String(describing: autoScalingGroupName)), defaultResult: \(String(describing: defaultResult)), globalTimeout: \(String(describing: globalTimeout)), heartbeatTimeout: \(String(describing: heartbeatTimeout)), lifecycleHookName: \(String(describing: lifecycleHookName)), lifecycleTransition: \(String(describing: lifecycleTransition)), notificationMetadata: \(String(describing: notificationMetadata)), notificationTargetARN: \(String(describing: notificationTargetARN)), roleARN: \(String(describing: roleARN)))"}
}

/// <p>Describes a lifecycle hook, which tells Amazon EC2 Auto Scaling that you want to perform an action
///             whenever it launches instances or terminates
///             instances.</p>
public struct LifecycleHook: Equatable {
    /// <p>The name of the Auto Scaling group for the lifecycle hook.</p>
    public let autoScalingGroupName: String?
    /// <p>Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses
    ///             or if an unexpected failure occurs. The possible values are <code>CONTINUE</code> and
    ///                 <code>ABANDON</code>.</p>
    public let defaultResult: String?
    /// <p>The maximum time, in seconds, that an instance can remain in a
    ///                 <code>Pending:Wait</code> or <code>Terminating:Wait</code> state. The maximum is
    ///             172800 seconds (48 hours) or 100 times <code>HeartbeatTimeout</code>, whichever is
    ///             smaller.</p>
    public let globalTimeout: Int?
    /// <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. If
    ///             the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the
    ///                 <code>DefaultResult</code> parameter.</p>
    public let heartbeatTimeout: Int?
    /// <p>The name of the lifecycle hook.</p>
    public let lifecycleHookName: String?
    /// <p>The state of the EC2 instance to which to attach the lifecycle hook. The following are
    ///             possible values:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>autoscaling:EC2_INSTANCE_LAUNCHING</p>
    ///             </li>
    ///             <li>
    ///                 <p>autoscaling:EC2_INSTANCE_TERMINATING</p>
    ///             </li>
    ///          </ul>
    public let lifecycleTransition: String?
    /// <p>Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the
    ///             notification target.</p>
    public let notificationMetadata: String?
    /// <p>The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in the
    ///             transition state for the lifecycle hook. The notification target can be either an SQS
    ///             queue or an SNS topic.</p>
    public let notificationTargetARN: String?
    /// <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified
    ///             notification target.</p>
    public let roleARN: String?

    public init (
        autoScalingGroupName: String? = nil,
        defaultResult: String? = nil,
        globalTimeout: Int? = nil,
        heartbeatTimeout: Int? = nil,
        lifecycleHookName: String? = nil,
        lifecycleTransition: String? = nil,
        notificationMetadata: String? = nil,
        notificationTargetARN: String? = nil,
        roleARN: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.defaultResult = defaultResult
        self.globalTimeout = globalTimeout
        self.heartbeatTimeout = heartbeatTimeout
        self.lifecycleHookName = lifecycleHookName
        self.lifecycleTransition = lifecycleTransition
        self.notificationMetadata = notificationMetadata
        self.notificationTargetARN = notificationTargetARN
        self.roleARN = roleARN
    }
}

extension LifecycleHookSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultResult = "DefaultResult"
        case heartbeatTimeout = "HeartbeatTimeout"
        case lifecycleHookName = "LifecycleHookName"
        case lifecycleTransition = "LifecycleTransition"
        case notificationMetadata = "NotificationMetadata"
        case notificationTargetARN = "NotificationTargetARN"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let defaultResult = defaultResult {
            try container.encode(defaultResult, forKey: Key("DefaultResult"))
        }
        if let heartbeatTimeout = heartbeatTimeout {
            try container.encode(heartbeatTimeout, forKey: Key("HeartbeatTimeout"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: Key("LifecycleHookName"))
        }
        if let lifecycleTransition = lifecycleTransition {
            try container.encode(lifecycleTransition, forKey: Key("LifecycleTransition"))
        }
        if let notificationMetadata = notificationMetadata {
            try container.encode(notificationMetadata, forKey: Key("NotificationMetadata"))
        }
        if let notificationTargetARN = notificationTargetARN {
            try container.encode(notificationTargetARN, forKey: Key("NotificationTargetARN"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: Key("RoleARN"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleHookNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lifecycleHookName)
        lifecycleHookName = lifecycleHookNameDecoded
        let lifecycleTransitionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lifecycleTransition)
        lifecycleTransition = lifecycleTransitionDecoded
        let notificationMetadataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationMetadata)
        notificationMetadata = notificationMetadataDecoded
        let heartbeatTimeoutDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .heartbeatTimeout)
        heartbeatTimeout = heartbeatTimeoutDecoded
        let defaultResultDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultResult)
        defaultResult = defaultResultDecoded
        let notificationTargetARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationTargetARN)
        notificationTargetARN = notificationTargetARNDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
    }
}

extension LifecycleHookSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LifecycleHookSpecification(defaultResult: \(String(describing: defaultResult)), heartbeatTimeout: \(String(describing: heartbeatTimeout)), lifecycleHookName: \(String(describing: lifecycleHookName)), lifecycleTransition: \(String(describing: lifecycleTransition)), notificationMetadata: \(String(describing: notificationMetadata)), notificationTargetARN: \(String(describing: notificationTargetARN)), roleARN: \(String(describing: roleARN)))"}
}

/// <p>Describes information used to specify a lifecycle hook for an Auto Scaling
///             group.</p>
///         <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance
///             launches (before it is put into service) or as the instance terminates (before it is
///             fully terminated).</p>
///         <p>This step is a part of the procedure for creating a lifecycle hook for an Auto Scaling
///             group:</p>
///         <ol>
///             <li>
///                 <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to
///                     invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates
///                     instances.</p>
///             </li>
///             <li>
///                 <p>(Optional) Create a notification target and an IAM role. The target can be
///                     either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to
///                     publish lifecycle notifications to the target.</p>
///             </li>
///             <li>
///                 <p>
///                     <b>Create the lifecycle hook. Specify whether the hook is
///                         used when the instances launch or terminate.</b>
///                 </p>
///             </li>
///             <li>
///                 <p>If you need more time, record the lifecycle action heartbeat to keep the
///                     instance in a pending state.</p>
///             </li>
///             <li>
///                 <p>If you finish before the timeout period ends, complete the lifecycle
///                     action.</p>
///             </li>
///          </ol>
///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling lifecycle
///                 hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
public struct LifecycleHookSpecification: Equatable {
    /// <p>Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses
    ///             or if an unexpected failure occurs. The valid values are <code>CONTINUE</code> and
    ///                 <code>ABANDON</code>. The default value is <code>ABANDON</code>.</p>
    public let defaultResult: String?
    /// <p>The maximum time, in seconds, that can elapse before the lifecycle hook times
    ///             out.</p>
    ///         <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in
    ///             the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing
    ///             out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
    public let heartbeatTimeout: Int?
    /// <p>The name of the lifecycle hook.</p>
    public let lifecycleHookName: String?
    /// <p>The state of the EC2 instance to which you want to attach the lifecycle hook. The
    ///             valid values are:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>autoscaling:EC2_INSTANCE_LAUNCHING</p>
    ///             </li>
    ///             <li>
    ///                 <p>autoscaling:EC2_INSTANCE_TERMINATING</p>
    ///             </li>
    ///          </ul>
    public let lifecycleTransition: String?
    /// <p>Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to
    ///             the notification target.</p>
    public let notificationMetadata: String?
    /// <p>The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in the
    ///             transition state for the lifecycle hook. The notification target can be either an SQS
    ///             queue or an SNS topic.</p>
    public let notificationTargetARN: String?
    /// <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified
    ///             notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p>
    public let roleARN: String?

    public init (
        defaultResult: String? = nil,
        heartbeatTimeout: Int? = nil,
        lifecycleHookName: String? = nil,
        lifecycleTransition: String? = nil,
        notificationMetadata: String? = nil,
        notificationTargetARN: String? = nil,
        roleARN: String? = nil
    )
    {
        self.defaultResult = defaultResult
        self.heartbeatTimeout = heartbeatTimeout
        self.lifecycleHookName = lifecycleHookName
        self.lifecycleTransition = lifecycleTransition
        self.notificationMetadata = notificationMetadata
        self.notificationTargetARN = notificationTargetARN
        self.roleARN = roleARN
    }
}

public enum LifecycleState {
    case detached
    case detaching
    case enteringStandby
    case inService
    case pending
    case pendingProceed
    case pendingWait
    case quarantined
    case standby
    case terminated
    case terminating
    case terminatingProceed
    case terminatingWait
    case warmedPending
    case warmedPendingProceed
    case warmedPendingWait
    case warmedRunning
    case warmedStopped
    case warmedTerminated
    case warmedTerminating
    case warmedTerminatingProceed
    case warmedTerminatingWait
    case sdkUnknown(String)
}

extension LifecycleState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LifecycleState] {
        return [
            .detached,
            .detaching,
            .enteringStandby,
            .inService,
            .pending,
            .pendingProceed,
            .pendingWait,
            .quarantined,
            .standby,
            .terminated,
            .terminating,
            .terminatingProceed,
            .terminatingWait,
            .warmedPending,
            .warmedPendingProceed,
            .warmedPendingWait,
            .warmedRunning,
            .warmedStopped,
            .warmedTerminated,
            .warmedTerminating,
            .warmedTerminatingProceed,
            .warmedTerminatingWait,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .detached: return "Detached"
        case .detaching: return "Detaching"
        case .enteringStandby: return "EnteringStandby"
        case .inService: return "InService"
        case .pending: return "Pending"
        case .pendingProceed: return "Pending:Proceed"
        case .pendingWait: return "Pending:Wait"
        case .quarantined: return "Quarantined"
        case .standby: return "Standby"
        case .terminated: return "Terminated"
        case .terminating: return "Terminating"
        case .terminatingProceed: return "Terminating:Proceed"
        case .terminatingWait: return "Terminating:Wait"
        case .warmedPending: return "Warmed:Pending"
        case .warmedPendingProceed: return "Warmed:Pending:Proceed"
        case .warmedPendingWait: return "Warmed:Pending:Wait"
        case .warmedRunning: return "Warmed:Running"
        case .warmedStopped: return "Warmed:Stopped"
        case .warmedTerminated: return "Warmed:Terminated"
        case .warmedTerminating: return "Warmed:Terminating"
        case .warmedTerminatingProceed: return "Warmed:Terminating:Proceed"
        case .warmedTerminatingWait: return "Warmed:Terminating:Wait"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LifecycleState(rawValue: rawValue) ?? LifecycleState.sdkUnknown(rawValue)
    }
}

extension LimitExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LimitExceededFault(message: \(String(describing: message)))"}
}

extension LimitExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<LimitExceededFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You have already reached a limit for your Amazon EC2 Auto Scaling
///             resources (for example, Auto Scaling groups, launch configurations, or lifecycle hooks). For
///             more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_DescribeAccountLimits.html">DescribeAccountLimits</a> in the <i>Amazon EC2 Auto Scaling API
///             Reference</i>.</p>
public struct LimitExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p></p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededFaultBody: Equatable {
    public let message: String?
}

extension LimitExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LoadBalancerState: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case loadBalancerName = "LoadBalancerName"
        case state = "State"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let loadBalancerName = loadBalancerName {
            try container.encode(loadBalancerName, forKey: Key("LoadBalancerName"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .state)
        state = stateDecoded
    }
}

extension LoadBalancerState: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LoadBalancerState(loadBalancerName: \(String(describing: loadBalancerName)), state: \(String(describing: state)))"}
}

/// <p>Describes the state of a Classic Load Balancer.</p>
public struct LoadBalancerState: Equatable {
    /// <p>The name of the load balancer.</p>
    public let loadBalancerName: String?
    /// <p>One of the following load balancer states:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>Adding</code> - The Auto Scaling instances are being registered with the load
    ///                     balancer.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>Added</code> - All Auto Scaling instances are registered with the load
    ///                     balancer.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>InService</code> - At least one Auto Scaling instance passed an <code>ELB</code>
    ///                     health check.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Removing</code> - The Auto Scaling instances are being deregistered from the
    ///                     load balancer. If connection draining is enabled, Elastic Load Balancing waits for in-flight
    ///                     requests to complete before deregistering the instances.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Removed</code> - All Auto Scaling instances are deregistered from the load
    ///                     balancer.</p>
    ///             </li>
    ///          </ul>
    public let state: String?

    public init (
        loadBalancerName: String? = nil,
        state: String? = nil
    )
    {
        self.loadBalancerName = loadBalancerName
        self.state = state
    }
}

extension LoadBalancerTargetGroupState: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case loadBalancerTargetGroupARN = "LoadBalancerTargetGroupARN"
        case state = "State"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let loadBalancerTargetGroupARN = loadBalancerTargetGroupARN {
            try container.encode(loadBalancerTargetGroupARN, forKey: Key("LoadBalancerTargetGroupARN"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerTargetGroupARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .loadBalancerTargetGroupARN)
        loadBalancerTargetGroupARN = loadBalancerTargetGroupARNDecoded
        let stateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .state)
        state = stateDecoded
    }
}

extension LoadBalancerTargetGroupState: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LoadBalancerTargetGroupState(loadBalancerTargetGroupARN: \(String(describing: loadBalancerTargetGroupARN)), state: \(String(describing: state)))"}
}

/// <p>Describes the state of a target group.</p>
public struct LoadBalancerTargetGroupState: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the target group.</p>
    public let loadBalancerTargetGroupARN: String?
    /// <p>The state of the target group.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>Adding</code> - The Auto Scaling instances are being registered with the target
    ///                     group.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Added</code> - All Auto Scaling instances are registered with the target
    ///                     group.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>InService</code> - At least one Auto Scaling instance passed an <code>ELB</code>
    ///                     health check.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Removing</code> - The Auto Scaling instances are being deregistered from the
    ///                     target group. If connection draining is enabled, Elastic Load Balancing waits for in-flight
    ///                     requests to complete before deregistering the instances.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Removed</code> - All Auto Scaling instances are deregistered from the target
    ///                     group.</p>
    ///             </li>
    ///          </ul>
    public let state: String?

    public init (
        loadBalancerTargetGroupARN: String? = nil,
        state: String? = nil
    )
    {
        self.loadBalancerTargetGroupARN = loadBalancerTargetGroupARN
        self.state = state
    }
}

extension LoadForecast: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case metricSpecification = "MetricSpecification"
        case timestamps = "Timestamps"
        case values = "Values"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let metricSpecification = metricSpecification {
            try container.encode(metricSpecification, forKey: Key("MetricSpecification"))
        }
        if let timestamps = timestamps {
            var timestampsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Timestamps"))
            for (index0, timestamptype0) in timestamps.enumerated() {
                try timestampsContainer.encode(TimestampWrapper(timestamptype0, format: .dateTime), forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let values = values {
            var valuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Values"))
            for (index0, metricscale0) in values.enumerated() {
                try valuesContainer.encode(metricscale0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.timestamps) {
            struct KeyVal0{struct member{}}
            let timestampsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .timestamps)
            if let timestampsWrappedContainer = timestampsWrappedContainer {
                let timestampsContainer = try timestampsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var timestampsBuffer:[Date]? = nil
                if let timestampsContainer = timestampsContainer {
                    timestampsBuffer = [Date]()
                    for timestampContainer0 in timestampsContainer {
                        try timestampsBuffer?.append(TimestampWrapperDecoder.parseDateStringValue(timestampContainer0, format: .dateTime))
                    }
                }
                timestamps = timestampsBuffer
            } else {
                timestamps = []
            }
        } else {
            timestamps = nil
        }
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Double].self, forKey: .member)
                var valuesBuffer:[Double]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Double]()
                    for doubleContainer0 in valuesContainer {
                        valuesBuffer?.append(doubleContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
        let metricSpecificationDecoded = try containerValues.decodeIfPresent(PredictiveScalingMetricSpecification.self, forKey: .metricSpecification)
        metricSpecification = metricSpecificationDecoded
    }
}

extension LoadForecast: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LoadForecast(metricSpecification: \(String(describing: metricSpecification)), timestamps: \(String(describing: timestamps)), values: \(String(describing: values)))"}
}

/// <p>A <code>GetPredictiveScalingForecast</code> call returns the load forecast for a
///             predictive scaling policy. This structure includes the data points for that load
///             forecast, along with the timestamps of those data points and the metric specification.
///         </p>
public struct LoadForecast: Equatable {
    /// <p>The metric specification for the load forecast.</p>
    public let metricSpecification: PredictiveScalingMetricSpecification?
    /// <p>The time stamps for the data points, in UTC format.</p>
    public let timestamps: [Date]?
    /// <p>The values of the data points.</p>
    public let values: [Double]?

    public init (
        metricSpecification: PredictiveScalingMetricSpecification? = nil,
        timestamps: [Date]? = nil,
        values: [Double]? = nil
    )
    {
        self.metricSpecification = metricSpecification
        self.timestamps = timestamps
        self.values = values
    }
}

extension MetricCollectionType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case metric = "Metric"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let metric = metric {
            try container.encode(metric, forKey: Key("Metric"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metric)
        metric = metricDecoded
    }
}

extension MetricCollectionType: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MetricCollectionType(metric: \(String(describing: metric)))"}
}

/// <p>Describes a metric.</p>
public struct MetricCollectionType: Equatable {
    /// <p>One of the following metrics:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupMinSize</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupMaxSize</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupDesiredCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupInServiceInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupPendingInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupStandbyInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTerminatingInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTotalInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupInServiceCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupPendingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupStandbyCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTerminatingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupTotalCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolDesiredCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolWarmedCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolPendingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolTerminatingCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>WarmPoolTotalCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupAndWarmPoolDesiredCapacity</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>GroupAndWarmPoolTotalCapacity</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    public let metric: String?

    public init (
        metric: String? = nil
    )
    {
        self.metric = metric
    }
}

extension MetricDimension: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let name = name {
            try container.encode(name, forKey: Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: Key("Value"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}

extension MetricDimension: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MetricDimension(name: \(String(describing: name)), value: \(String(describing: value)))"}
}

/// <p>Describes the dimension of a metric.</p>
public struct MetricDimension: Equatable {
    /// <p>The name of the dimension.</p>
    public let name: String?
    /// <p>The value of the dimension.</p>
    public let value: String?

    public init (
        name: String? = nil,
        value: String? = nil
    )
    {
        self.name = name
        self.value = value
    }
}

extension MetricGranularityType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case granularity = "Granularity"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let granularity = granularity {
            try container.encode(granularity, forKey: Key("Granularity"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let granularityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .granularity)
        granularity = granularityDecoded
    }
}

extension MetricGranularityType: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MetricGranularityType(granularity: \(String(describing: granularity)))"}
}

/// <p>Describes a granularity of a metric.</p>
public struct MetricGranularityType: Equatable {
    /// <p>The granularity. The only valid value is <code>1Minute</code>.</p>
    public let granularity: String?

    public init (
        granularity: String? = nil
    )
    {
        self.granularity = granularity
    }
}

public enum MetricStatistic {
    case average
    case maximum
    case minimum
    case samplecount
    case sum
    case sdkUnknown(String)
}

extension MetricStatistic : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MetricStatistic] {
        return [
            .average,
            .maximum,
            .minimum,
            .samplecount,
            .sum,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .average: return "Average"
        case .maximum: return "Maximum"
        case .minimum: return "Minimum"
        case .samplecount: return "SampleCount"
        case .sum: return "Sum"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MetricStatistic(rawValue: rawValue) ?? MetricStatistic.sdkUnknown(rawValue)
    }
}

public enum MetricType {
    case albrequestcountpertarget
    case asgaveragecpuutilization
    case asgaveragenetworkin
    case asgaveragenetworkout
    case sdkUnknown(String)
}

extension MetricType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MetricType] {
        return [
            .albrequestcountpertarget,
            .asgaveragecpuutilization,
            .asgaveragenetworkin,
            .asgaveragenetworkout,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .albrequestcountpertarget: return "ALBRequestCountPerTarget"
        case .asgaveragecpuutilization: return "ASGAverageCPUUtilization"
        case .asgaveragenetworkin: return "ASGAverageNetworkIn"
        case .asgaveragenetworkout: return "ASGAverageNetworkOut"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MetricType(rawValue: rawValue) ?? MetricType.sdkUnknown(rawValue)
    }
}

extension MixedInstancesPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instancesDistribution = "InstancesDistribution"
        case launchTemplate = "LaunchTemplate"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let instancesDistribution = instancesDistribution {
            try container.encode(instancesDistribution, forKey: Key("InstancesDistribution"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: Key("LaunchTemplate"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateDecoded = try containerValues.decodeIfPresent(LaunchTemplate.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let instancesDistributionDecoded = try containerValues.decodeIfPresent(InstancesDistribution.self, forKey: .instancesDistribution)
        instancesDistribution = instancesDistributionDecoded
    }
}

extension MixedInstancesPolicy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MixedInstancesPolicy(instancesDistribution: \(String(describing: instancesDistribution)), launchTemplate: \(String(describing: launchTemplate)))"}
}

/// <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling
///             group can provision a combination of On-Demand Instances and Spot Instances across
///             multiple instance types. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling groups with multiple
///                 instance types and purchase options</a> in the <i>Amazon EC2 Auto Scaling User
///                 Guide</i>.</p>
///         <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for
///             an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as
///             the top-level property instead of a launch configuration or launch template.</p>
public struct MixedInstancesPolicy: Equatable {
    /// <p>Specifies the instances distribution. If not provided, the value for each property in
    ///                 <code>InstancesDistribution</code> uses a default value.</p>
    public let instancesDistribution: InstancesDistribution?
    /// <p>Specifies the launch template to use and optionally the instance types (overrides)
    ///             that are used to provision EC2 instances to fulfill On-Demand and Spot capacities.
    ///             Required when creating a mixed instances policy.</p>
    public let launchTemplate: LaunchTemplate?

    public init (
        instancesDistribution: InstancesDistribution? = nil,
        launchTemplate: LaunchTemplate? = nil
    )
    {
        self.instancesDistribution = instancesDistribution
        self.launchTemplate = launchTemplate
    }
}

extension NotificationConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case notificationType = "NotificationType"
        case topicARN = "TopicARN"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let notificationType = notificationType {
            try container.encode(notificationType, forKey: Key("NotificationType"))
        }
        if let topicARN = topicARN {
            try container.encode(topicARN, forKey: Key("TopicARN"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let topicARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .topicARN)
        topicARN = topicARNDecoded
        let notificationTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationType)
        notificationType = notificationTypeDecoded
    }
}

extension NotificationConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NotificationConfiguration(autoScalingGroupName: \(String(describing: autoScalingGroupName)), notificationType: \(String(describing: notificationType)), topicARN: \(String(describing: topicARN)))"}
}

/// <p>Describes a notification.</p>
public struct NotificationConfiguration: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>One of the following event notification types:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>autoscaling:EC2_INSTANCE_LAUNCH</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>autoscaling:EC2_INSTANCE_LAUNCH_ERROR</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>autoscaling:EC2_INSTANCE_TERMINATE</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>autoscaling:EC2_INSTANCE_TERMINATE_ERROR</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>autoscaling:TEST_NOTIFICATION</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    public let notificationType: String?
    /// <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS)
    ///             topic.</p>
    public let topicARN: String?

    public init (
        autoScalingGroupName: String? = nil,
        notificationType: String? = nil,
        topicARN: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.notificationType = notificationType
        self.topicARN = topicARN
    }
}

public enum PredefinedLoadMetricType {
    case albtargetgrouprequestcount
    case asgtotalcpuutilization
    case asgtotalnetworkin
    case asgtotalnetworkout
    case sdkUnknown(String)
}

extension PredefinedLoadMetricType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PredefinedLoadMetricType] {
        return [
            .albtargetgrouprequestcount,
            .asgtotalcpuutilization,
            .asgtotalnetworkin,
            .asgtotalnetworkout,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .albtargetgrouprequestcount: return "ALBTargetGroupRequestCount"
        case .asgtotalcpuutilization: return "ASGTotalCPUUtilization"
        case .asgtotalnetworkin: return "ASGTotalNetworkIn"
        case .asgtotalnetworkout: return "ASGTotalNetworkOut"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PredefinedLoadMetricType(rawValue: rawValue) ?? PredefinedLoadMetricType.sdkUnknown(rawValue)
    }
}

public enum PredefinedMetricPairType {
    case albrequestcount
    case asgcpuutilization
    case asgnetworkin
    case asgnetworkout
    case sdkUnknown(String)
}

extension PredefinedMetricPairType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PredefinedMetricPairType] {
        return [
            .albrequestcount,
            .asgcpuutilization,
            .asgnetworkin,
            .asgnetworkout,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .albrequestcount: return "ALBRequestCount"
        case .asgcpuutilization: return "ASGCPUUtilization"
        case .asgnetworkin: return "ASGNetworkIn"
        case .asgnetworkout: return "ASGNetworkOut"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PredefinedMetricPairType(rawValue: rawValue) ?? PredefinedMetricPairType.sdkUnknown(rawValue)
    }
}

extension PredefinedMetricSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case predefinedMetricType = "PredefinedMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let predefinedMetricType = predefinedMetricType {
            try container.encode(predefinedMetricType, forKey: Key("PredefinedMetricType"))
        }
        if let resourceLabel = resourceLabel {
            try container.encode(resourceLabel, forKey: Key("ResourceLabel"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricTypeDecoded = try containerValues.decodeIfPresent(MetricType.self, forKey: .predefinedMetricType)
        predefinedMetricType = predefinedMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension PredefinedMetricSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PredefinedMetricSpecification(predefinedMetricType: \(String(describing: predefinedMetricType)), resourceLabel: \(String(describing: resourceLabel)))"}
}

/// <p>Represents a predefined metric for a target tracking scaling policy to use with
///             Amazon EC2 Auto Scaling.</p>
public struct PredefinedMetricSpecification: Equatable {
    /// <p>The metric type. The following predefined metrics are available:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>ASGAverageCPUUtilization</code> - Average CPU utilization of the Auto Scaling
    ///                     group.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ASGAverageNetworkIn</code> - Average number of bytes received on all
    ///                     network interfaces by the Auto Scaling group.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ASGAverageNetworkOut</code> - Average number of bytes sent out on all
    ///                     network interfaces by the Auto Scaling group.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ALBRequestCountPerTarget</code> - Number of requests completed per
    ///                     target in an Application Load Balancer target group.</p>
    ///             </li>
    ///          </ul>
    public let predefinedMetricType: MetricType?
    /// <p>Identifies the resource associated with the metric type. You can't specify a resource
    ///             label unless the metric type is <code>ALBRequestCountPerTarget</code> and there is a
    ///             target group attached to the Auto Scaling group.</p>
    ///         <p>You create the resource label by appending the final portion of the load balancer ARN
    ///             and the final portion of the target group ARN into a single value, separated by a
    ///             forward slash (/). The format is
    ///             app/<load-balancer-name>/<load-balancer-id>/targetgroup/<target-group-name>/<target-group-id>,
    ///             where:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>app/<load-balancer-name>/<load-balancer-id> is the final portion
    ///                     of the load balancer ARN</p>
    ///             </li>
    ///             <li>
    ///                 <p>targetgroup/<target-group-name>/<target-group-id> is the final
    ///                     portion of the target group ARN.</p>
    ///             </li>
    ///          </ul>
    ///         <p>This is an example:
    ///             app/EC2Co-EcsEl-1TKLTMITMM0EO/f37c06a68c1748aa/targetgroup/EC2Co-Defau-LDNM7Q3ZH1ZN/6d4ea56ca2d6a18d.</p>
    ///         <p>To find the ARN for an Application Load Balancer, use the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a> API operation. To find the ARN for the target group,
    ///             use the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html">DescribeTargetGroups</a> API operation.</p>
    public let resourceLabel: String?

    public init (
        predefinedMetricType: MetricType? = nil,
        resourceLabel: String? = nil
    )
    {
        self.predefinedMetricType = predefinedMetricType
        self.resourceLabel = resourceLabel
    }
}

public enum PredefinedScalingMetricType {
    case albrequestcountpertarget
    case asgaveragecpuutilization
    case asgaveragenetworkin
    case asgaveragenetworkout
    case sdkUnknown(String)
}

extension PredefinedScalingMetricType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PredefinedScalingMetricType] {
        return [
            .albrequestcountpertarget,
            .asgaveragecpuutilization,
            .asgaveragenetworkin,
            .asgaveragenetworkout,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .albrequestcountpertarget: return "ALBRequestCountPerTarget"
        case .asgaveragecpuutilization: return "ASGAverageCPUUtilization"
        case .asgaveragenetworkin: return "ASGAverageNetworkIn"
        case .asgaveragenetworkout: return "ASGAverageNetworkOut"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PredefinedScalingMetricType(rawValue: rawValue) ?? PredefinedScalingMetricType.sdkUnknown(rawValue)
    }
}

extension PredictiveScalingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxCapacityBreachBehavior = "MaxCapacityBreachBehavior"
        case maxCapacityBuffer = "MaxCapacityBuffer"
        case metricSpecifications = "MetricSpecifications"
        case mode = "Mode"
        case schedulingBufferTime = "SchedulingBufferTime"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let maxCapacityBreachBehavior = maxCapacityBreachBehavior {
            try container.encode(maxCapacityBreachBehavior, forKey: Key("MaxCapacityBreachBehavior"))
        }
        if let maxCapacityBuffer = maxCapacityBuffer {
            try container.encode(maxCapacityBuffer, forKey: Key("MaxCapacityBuffer"))
        }
        if let metricSpecifications = metricSpecifications {
            var metricSpecificationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("MetricSpecifications"))
            for (index0, predictivescalingmetricspecification0) in metricSpecifications.enumerated() {
                try metricSpecificationsContainer.encode(predictivescalingmetricspecification0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let mode = mode {
            try container.encode(mode, forKey: Key("Mode"))
        }
        if let schedulingBufferTime = schedulingBufferTime {
            try container.encode(schedulingBufferTime, forKey: Key("SchedulingBufferTime"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.metricSpecifications) {
            struct KeyVal0{struct member{}}
            let metricSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricSpecifications)
            if let metricSpecificationsWrappedContainer = metricSpecificationsWrappedContainer {
                let metricSpecificationsContainer = try metricSpecificationsWrappedContainer.decodeIfPresent([PredictiveScalingMetricSpecification].self, forKey: .member)
                var metricSpecificationsBuffer:[PredictiveScalingMetricSpecification]? = nil
                if let metricSpecificationsContainer = metricSpecificationsContainer {
                    metricSpecificationsBuffer = [PredictiveScalingMetricSpecification]()
                    for structureContainer0 in metricSpecificationsContainer {
                        metricSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                metricSpecifications = metricSpecificationsBuffer
            } else {
                metricSpecifications = []
            }
        } else {
            metricSpecifications = nil
        }
        let modeDecoded = try containerValues.decodeIfPresent(PredictiveScalingMode.self, forKey: .mode)
        mode = modeDecoded
        let schedulingBufferTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .schedulingBufferTime)
        schedulingBufferTime = schedulingBufferTimeDecoded
        let maxCapacityBreachBehaviorDecoded = try containerValues.decodeIfPresent(PredictiveScalingMaxCapacityBreachBehavior.self, forKey: .maxCapacityBreachBehavior)
        maxCapacityBreachBehavior = maxCapacityBreachBehaviorDecoded
        let maxCapacityBufferDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxCapacityBuffer)
        maxCapacityBuffer = maxCapacityBufferDecoded
    }
}

extension PredictiveScalingConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PredictiveScalingConfiguration(maxCapacityBreachBehavior: \(String(describing: maxCapacityBreachBehavior)), maxCapacityBuffer: \(String(describing: maxCapacityBuffer)), metricSpecifications: \(String(describing: metricSpecifications)), mode: \(String(describing: mode)), schedulingBufferTime: \(String(describing: schedulingBufferTime)))"}
}

/// <p>Represents a predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.</p>
public struct PredictiveScalingConfiguration: Equatable {
    /// <p>Defines the behavior that should be applied if the forecast capacity approaches or
    ///             exceeds the maximum capacity of the Auto Scaling group. Defaults to
    ///                 <code>HonorMaxCapacity</code> if not specified.</p>
    ///         <p>The following are possible values:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>HonorMaxCapacity</code> - Amazon EC2 Auto Scaling cannot scale out capacity higher than
    ///                     the maximum capacity. The maximum capacity is enforced as a hard limit. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>IncreaseMaxCapacity</code> - Amazon EC2 Auto Scaling can scale out capacity higher than
    ///                     the maximum capacity when the forecast capacity is close to or exceeds the
    ///                     maximum capacity. The upper limit is determined by the forecasted capacity and
    ///                     the value for <code>MaxCapacityBuffer</code>.</p>
    ///             </li>
    ///          </ul>
    public let maxCapacityBreachBehavior: PredictiveScalingMaxCapacityBreachBehavior?
    /// <p>The size of the capacity buffer to use when the forecast capacity is close to or
    ///             exceeds the maximum capacity. The value is specified as a percentage relative to the
    ///             forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer,
    ///             such that if the forecast capacity is 50, and the maximum capacity is 40, then the
    ///             effective maximum capacity is 55.</p>
    ///         <p>If set to 0, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but
    ///             not exceed forecast capacity. </p>
    ///         <p>Required if the <code>MaxCapacityBreachBehavior</code> property is set to
    ///                 <code>IncreaseMaxCapacity</code>, and cannot be used otherwise.</p>
    public let maxCapacityBuffer: Int?
    /// <p>This structure includes the metrics and target utilization to use for predictive
    ///             scaling. </p>
    ///         <p>This is an array, but we currently only support a single metric specification. That
    ///             is, you can specify a target value and a single metric pair, or a target value and one
    ///             scaling metric and one load metric.</p>
    public let metricSpecifications: [PredictiveScalingMetricSpecification]?
    /// <p>The predictive scaling mode. Defaults to <code>ForecastOnly</code> if not
    ///             specified.</p>
    public let mode: PredictiveScalingMode?
    /// <p>The amount of time, in seconds, by which the instance launch time can be advanced. For
    ///             example, the forecast says to add capacity at 10:00 AM, and you choose to pre-launch
    ///             instances by 5 minutes. In that case, the instances will be launched at 9:55 AM. The
    ///             intention is to give resources time to be provisioned. It can take a few minutes to
    ///             launch an EC2 instance. The actual amount of time required depends on several factors,
    ///             such as the size of the instance and whether there are startup scripts to complete. </p>
    ///         <p>The value must be less than the forecast interval duration of 3600 seconds (60
    ///             minutes). Defaults to 300 seconds if not specified. </p>
    public let schedulingBufferTime: Int?

    public init (
        maxCapacityBreachBehavior: PredictiveScalingMaxCapacityBreachBehavior? = nil,
        maxCapacityBuffer: Int? = nil,
        metricSpecifications: [PredictiveScalingMetricSpecification]? = nil,
        mode: PredictiveScalingMode? = nil,
        schedulingBufferTime: Int? = nil
    )
    {
        self.maxCapacityBreachBehavior = maxCapacityBreachBehavior
        self.maxCapacityBuffer = maxCapacityBuffer
        self.metricSpecifications = metricSpecifications
        self.mode = mode
        self.schedulingBufferTime = schedulingBufferTime
    }
}

public enum PredictiveScalingMaxCapacityBreachBehavior {
    case honormaxcapacity
    case increasemaxcapacity
    case sdkUnknown(String)
}

extension PredictiveScalingMaxCapacityBreachBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PredictiveScalingMaxCapacityBreachBehavior] {
        return [
            .honormaxcapacity,
            .increasemaxcapacity,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .honormaxcapacity: return "HonorMaxCapacity"
        case .increasemaxcapacity: return "IncreaseMaxCapacity"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PredictiveScalingMaxCapacityBreachBehavior(rawValue: rawValue) ?? PredictiveScalingMaxCapacityBreachBehavior.sdkUnknown(rawValue)
    }
}

extension PredictiveScalingMetricSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case predefinedLoadMetricSpecification = "PredefinedLoadMetricSpecification"
        case predefinedMetricPairSpecification = "PredefinedMetricPairSpecification"
        case predefinedScalingMetricSpecification = "PredefinedScalingMetricSpecification"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let predefinedLoadMetricSpecification = predefinedLoadMetricSpecification {
            try container.encode(predefinedLoadMetricSpecification, forKey: Key("PredefinedLoadMetricSpecification"))
        }
        if let predefinedMetricPairSpecification = predefinedMetricPairSpecification {
            try container.encode(predefinedMetricPairSpecification, forKey: Key("PredefinedMetricPairSpecification"))
        }
        if let predefinedScalingMetricSpecification = predefinedScalingMetricSpecification {
            try container.encode(predefinedScalingMetricSpecification, forKey: Key("PredefinedScalingMetricSpecification"))
        }
        if let targetValue = targetValue {
            try container.encode(targetValue, forKey: Key("TargetValue"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetValueDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
        let predefinedMetricPairSpecificationDecoded = try containerValues.decodeIfPresent(PredictiveScalingPredefinedMetricPair.self, forKey: .predefinedMetricPairSpecification)
        predefinedMetricPairSpecification = predefinedMetricPairSpecificationDecoded
        let predefinedScalingMetricSpecificationDecoded = try containerValues.decodeIfPresent(PredictiveScalingPredefinedScalingMetric.self, forKey: .predefinedScalingMetricSpecification)
        predefinedScalingMetricSpecification = predefinedScalingMetricSpecificationDecoded
        let predefinedLoadMetricSpecificationDecoded = try containerValues.decodeIfPresent(PredictiveScalingPredefinedLoadMetric.self, forKey: .predefinedLoadMetricSpecification)
        predefinedLoadMetricSpecification = predefinedLoadMetricSpecificationDecoded
    }
}

extension PredictiveScalingMetricSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PredictiveScalingMetricSpecification(predefinedLoadMetricSpecification: \(String(describing: predefinedLoadMetricSpecification)), predefinedMetricPairSpecification: \(String(describing: predefinedMetricPairSpecification)), predefinedScalingMetricSpecification: \(String(describing: predefinedScalingMetricSpecification)), targetValue: \(String(describing: targetValue)))"}
}

/// <p>This structure specifies the metrics and target utilization settings for a predictive
///             scaling policy. </p>
///         <p>You must specify either a metric pair, or a load metric and a scaling metric
///             individually. Specifying a metric pair instead of individual metrics provides a simpler
///             way to configure metrics for a scaling policy. You choose the metric pair, and the
///             policy automatically knows the correct sum and average statistics to use for the load
///             metric and the scaling metric.</p>
///         <p>Example</p>
///         <ul>
///             <li>
///                 <p>You create a predictive scaling policy and specify
///                         <code>ALBRequestCount</code> as the value for the metric pair and
///                         <code>1000.0</code> as the target value. For this type of metric, you must
///                     provide the metric dimension for the corresponding target group, so you also
///                     provide a resource label for the Application Load Balancer target group that is
///                     attached to your Auto Scaling group.</p>
///             </li>
///             <li>
///                 <p>The number of requests the target group receives per minute provides the load
///                     metric, and the request count averaged between the members of the target group
///                     provides the scaling metric. In CloudWatch, this refers to the
///                         <code>RequestCount</code> and <code>RequestCountPerTarget</code> metrics,
///                     respectively.</p>
///             </li>
///             <li>
///                 <p>For optimal use of predictive scaling, you adhere to the best practice of
///                     using a dynamic scaling policy to automatically scale between the minimum
///                     capacity and maximum capacity in response to real-time changes in resource
///                     utilization.</p>
///             </li>
///             <li>
///                 <p>Amazon EC2 Auto Scaling consumes data points for the load metric over the last 14 days and
///                     creates an hourly load forecast for predictive scaling. (A minimum of 24 hours
///                     of data is required.)</p>
///             </li>
///             <li>
///                 <p>After creating the load forecast, Amazon EC2 Auto Scaling determines when to reduce or
///                     increase the capacity of your Auto Scaling group in each hour of the forecast period so
///                     that the average number of requests received by each instance is as close to
///                     1000 requests per minute as possible at all times.</p>
///             </li>
///          </ul>
public struct PredictiveScalingMetricSpecification: Equatable {
    /// <p>The load metric specification.</p>
    public let predefinedLoadMetricSpecification: PredictiveScalingPredefinedLoadMetric?
    /// <p>The metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling
    ///             metric and load metric to use.</p>
    public let predefinedMetricPairSpecification: PredictiveScalingPredefinedMetricPair?
    /// <p>The scaling metric specification.</p>
    public let predefinedScalingMetricSpecification: PredictiveScalingPredefinedScalingMetric?
    /// <p>Specifies the target utilization.</p>
    public let targetValue: Double?

    public init (
        predefinedLoadMetricSpecification: PredictiveScalingPredefinedLoadMetric? = nil,
        predefinedMetricPairSpecification: PredictiveScalingPredefinedMetricPair? = nil,
        predefinedScalingMetricSpecification: PredictiveScalingPredefinedScalingMetric? = nil,
        targetValue: Double? = nil
    )
    {
        self.predefinedLoadMetricSpecification = predefinedLoadMetricSpecification
        self.predefinedMetricPairSpecification = predefinedMetricPairSpecification
        self.predefinedScalingMetricSpecification = predefinedScalingMetricSpecification
        self.targetValue = targetValue
    }
}

public enum PredictiveScalingMode {
    case forecastandscale
    case forecastonly
    case sdkUnknown(String)
}

extension PredictiveScalingMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PredictiveScalingMode] {
        return [
            .forecastandscale,
            .forecastonly,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .forecastandscale: return "ForecastAndScale"
        case .forecastonly: return "ForecastOnly"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PredictiveScalingMode(rawValue: rawValue) ?? PredictiveScalingMode.sdkUnknown(rawValue)
    }
}

extension PredictiveScalingPredefinedLoadMetric: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case predefinedMetricType = "PredefinedMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let predefinedMetricType = predefinedMetricType {
            try container.encode(predefinedMetricType, forKey: Key("PredefinedMetricType"))
        }
        if let resourceLabel = resourceLabel {
            try container.encode(resourceLabel, forKey: Key("ResourceLabel"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricTypeDecoded = try containerValues.decodeIfPresent(PredefinedLoadMetricType.self, forKey: .predefinedMetricType)
        predefinedMetricType = predefinedMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension PredictiveScalingPredefinedLoadMetric: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PredictiveScalingPredefinedLoadMetric(predefinedMetricType: \(String(describing: predefinedMetricType)), resourceLabel: \(String(describing: resourceLabel)))"}
}

/// <p>Describes a load metric for a predictive scaling policy.</p>
///         <p>When returned in the output of <code>DescribePolicies</code>, it indicates that a
///             predictive scaling policy uses individually specified load and scaling metrics instead
///             of a metric pair.</p>
public struct PredictiveScalingPredefinedLoadMetric: Equatable {
    /// <p>The metric type.</p>
    public let predefinedMetricType: PredefinedLoadMetricType?
    /// <p>A label that uniquely identifies a specific Application Load Balancer target
    ///             group from which to determine the request count served by your Auto Scaling group. You can't specify a resource label
    ///             unless the target group is attached to the Auto Scaling group.</p>
    ///         <p>You create the resource label by appending the final portion of the load balancer ARN
    ///             and the final portion of the target group ARN into a single value, separated by a forward
    ///             slash (/). The format of the resource label is:</p>
    ///         <p>
    ///             <code>app/EC2Co-EcsEl-1TKLTMITMM0EO/f37c06a68c1748aa/targetgroup/EC2Co-Defau-LDNM7Q3ZH1ZN/6d4ea56ca2d6a18d</code>.</p>
    ///         <p>Where:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>app/<load-balancer-name>/<load-balancer-id> is the final portion of
    ///                     the load balancer ARN</p>
    ///             </li>
    ///             <li>
    ///                 <p>targetgroup/<target-group-name>/<target-group-id> is the final portion
    ///                     of the target group ARN.</p>
    ///             </li>
    ///          </ul>
    ///         <p>To find the ARN for an Application Load Balancer, use the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a> API operation. To find the ARN for the target group, use
    ///             the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html">DescribeTargetGroups</a> API operation.</p>
    public let resourceLabel: String?

    public init (
        predefinedMetricType: PredefinedLoadMetricType? = nil,
        resourceLabel: String? = nil
    )
    {
        self.predefinedMetricType = predefinedMetricType
        self.resourceLabel = resourceLabel
    }
}

extension PredictiveScalingPredefinedMetricPair: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case predefinedMetricType = "PredefinedMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let predefinedMetricType = predefinedMetricType {
            try container.encode(predefinedMetricType, forKey: Key("PredefinedMetricType"))
        }
        if let resourceLabel = resourceLabel {
            try container.encode(resourceLabel, forKey: Key("ResourceLabel"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricTypeDecoded = try containerValues.decodeIfPresent(PredefinedMetricPairType.self, forKey: .predefinedMetricType)
        predefinedMetricType = predefinedMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension PredictiveScalingPredefinedMetricPair: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PredictiveScalingPredefinedMetricPair(predefinedMetricType: \(String(describing: predefinedMetricType)), resourceLabel: \(String(describing: resourceLabel)))"}
}

/// <p>Represents a metric pair for a predictive scaling policy. </p>
public struct PredictiveScalingPredefinedMetricPair: Equatable {
    /// <p>Indicates which metrics to use. There are two different types of metrics for each
    ///             metric type: one is a load metric and one is a scaling metric. For example, if the
    ///             metric type is <code>ASGCPUUtilization</code>, the Auto Scaling group's total CPU metric is used
    ///             as the load metric, and the average CPU metric is used for the scaling metric.</p>
    public let predefinedMetricType: PredefinedMetricPairType?
    /// <p>A label that uniquely identifies a specific Application Load Balancer target
    ///             group from which to determine the request count served by your Auto Scaling group. You can't specify a resource label
    ///             unless the target group is attached to the Auto Scaling group.</p>
    ///         <p>You create the resource label by appending the final portion of the load balancer ARN
    ///             and the final portion of the target group ARN into a single value, separated by a forward
    ///             slash (/). The format of the resource label is:</p>
    ///         <p>
    ///             <code>app/EC2Co-EcsEl-1TKLTMITMM0EO/f37c06a68c1748aa/targetgroup/EC2Co-Defau-LDNM7Q3ZH1ZN/6d4ea56ca2d6a18d</code>.</p>
    ///         <p>Where:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>app/<load-balancer-name>/<load-balancer-id> is the final portion of
    ///                     the load balancer ARN</p>
    ///             </li>
    ///             <li>
    ///                 <p>targetgroup/<target-group-name>/<target-group-id> is the final portion
    ///                     of the target group ARN.</p>
    ///             </li>
    ///          </ul>
    ///         <p>To find the ARN for an Application Load Balancer, use the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a> API operation. To find the ARN for the target group, use
    ///             the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html">DescribeTargetGroups</a> API operation.</p>
    public let resourceLabel: String?

    public init (
        predefinedMetricType: PredefinedMetricPairType? = nil,
        resourceLabel: String? = nil
    )
    {
        self.predefinedMetricType = predefinedMetricType
        self.resourceLabel = resourceLabel
    }
}

extension PredictiveScalingPredefinedScalingMetric: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case predefinedMetricType = "PredefinedMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let predefinedMetricType = predefinedMetricType {
            try container.encode(predefinedMetricType, forKey: Key("PredefinedMetricType"))
        }
        if let resourceLabel = resourceLabel {
            try container.encode(resourceLabel, forKey: Key("ResourceLabel"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricTypeDecoded = try containerValues.decodeIfPresent(PredefinedScalingMetricType.self, forKey: .predefinedMetricType)
        predefinedMetricType = predefinedMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension PredictiveScalingPredefinedScalingMetric: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PredictiveScalingPredefinedScalingMetric(predefinedMetricType: \(String(describing: predefinedMetricType)), resourceLabel: \(String(describing: resourceLabel)))"}
}

/// <p>Describes a scaling metric for a predictive scaling policy.</p>
///         <p>When returned in the output of <code>DescribePolicies</code>, it indicates that a
///             predictive scaling policy uses individually specified load and scaling metrics instead
///             of a metric pair.</p>
public struct PredictiveScalingPredefinedScalingMetric: Equatable {
    /// <p>The metric type.</p>
    public let predefinedMetricType: PredefinedScalingMetricType?
    /// <p>A label that uniquely identifies a specific Application Load Balancer target
    ///             group from which to determine the request count served by your Auto Scaling group. You can't specify a resource label
    ///             unless the target group is attached to the Auto Scaling group.</p>
    ///         <p>You create the resource label by appending the final portion of the load balancer ARN
    ///             and the final portion of the target group ARN into a single value, separated by a forward
    ///             slash (/). The format of the resource label is:</p>
    ///         <p>
    ///             <code>app/EC2Co-EcsEl-1TKLTMITMM0EO/f37c06a68c1748aa/targetgroup/EC2Co-Defau-LDNM7Q3ZH1ZN/6d4ea56ca2d6a18d</code>.</p>
    ///         <p>Where:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>app/<load-balancer-name>/<load-balancer-id> is the final portion of
    ///                     the load balancer ARN</p>
    ///             </li>
    ///             <li>
    ///                 <p>targetgroup/<target-group-name>/<target-group-id> is the final portion
    ///                     of the target group ARN.</p>
    ///             </li>
    ///          </ul>
    ///         <p>To find the ARN for an Application Load Balancer, use the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a> API operation. To find the ARN for the target group, use
    ///             the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html">DescribeTargetGroups</a> API operation.</p>
    public let resourceLabel: String?

    public init (
        predefinedMetricType: PredefinedScalingMetricType? = nil,
        resourceLabel: String? = nil
    )
    {
        self.predefinedMetricType = predefinedMetricType
        self.resourceLabel = resourceLabel
    }
}

extension ProcessType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case processName = "ProcessName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let processName = processName {
            try container.encode(processName, forKey: Key("ProcessName"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .processName)
        processName = processNameDecoded
    }
}

extension ProcessType: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ProcessType(processName: \(String(describing: processName)))"}
}

/// <p>Describes a process type.</p>
///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#process-types">Scaling processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
public struct ProcessType: Equatable {
    /// <p>One of the following processes:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>Launch</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>Terminate</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>AddToLoadBalancer</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>AlarmNotification</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>AZRebalance</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>HealthCheck</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>InstanceRefresh</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ReplaceUnhealthy</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ScheduledActions</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    public let processName: String?

    public init (
        processName: String? = nil
    )
    {
        self.processName = processName
    }
}

public struct PutLifecycleHookInputBodyMiddleware: Middleware {
    public let id: String = "PutLifecycleHookInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutLifecycleHookInput>,
                  next: H) -> Swift.Result<OperationOutput<PutLifecycleHookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutLifecycleHookInput>
    public typealias MOutput = OperationOutput<PutLifecycleHookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutLifecycleHookOutputError>
}

extension PutLifecycleHookInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutLifecycleHookInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), defaultResult: \(String(describing: defaultResult)), heartbeatTimeout: \(String(describing: heartbeatTimeout)), lifecycleHookName: \(String(describing: lifecycleHookName)), lifecycleTransition: \(String(describing: lifecycleTransition)), notificationMetadata: \(String(describing: notificationMetadata)), notificationTargetARN: \(String(describing: notificationTargetARN)), roleARN: \(String(describing: roleARN)))"}
}

extension PutLifecycleHookInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let defaultResult = defaultResult {
            try container.encode(defaultResult, forKey: Key("DefaultResult"))
        }
        if let heartbeatTimeout = heartbeatTimeout {
            try container.encode(heartbeatTimeout, forKey: Key("HeartbeatTimeout"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: Key("LifecycleHookName"))
        }
        if let lifecycleTransition = lifecycleTransition {
            try container.encode(lifecycleTransition, forKey: Key("LifecycleTransition"))
        }
        if let notificationMetadata = notificationMetadata {
            try container.encode(notificationMetadata, forKey: Key("NotificationMetadata"))
        }
        if let notificationTargetARN = notificationTargetARN {
            try container.encode(notificationTargetARN, forKey: Key("NotificationTargetARN"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: Key("RoleARN"))
        }
        try container.encode("PutLifecycleHook", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct PutLifecycleHookInputHeadersMiddleware: Middleware {
    public let id: String = "PutLifecycleHookInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutLifecycleHookInput>,
                  next: H) -> Swift.Result<OperationOutput<PutLifecycleHookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutLifecycleHookInput>
    public typealias MOutput = OperationOutput<PutLifecycleHookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutLifecycleHookOutputError>
}

public struct PutLifecycleHookInputQueryItemMiddleware: Middleware {
    public let id: String = "PutLifecycleHookInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutLifecycleHookInput>,
                  next: H) -> Swift.Result<OperationOutput<PutLifecycleHookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutLifecycleHookInput>
    public typealias MOutput = OperationOutput<PutLifecycleHookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutLifecycleHookOutputError>
}

public struct PutLifecycleHookInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses
    ///             or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code>
    ///             or <code>ABANDON</code>. The default value is <code>ABANDON</code>.</p>
    public let defaultResult: String?
    /// <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The
    ///             range is from <code>30</code> to <code>7200</code> seconds. The default value is
    ///                 <code>3600</code> seconds (1 hour).</p>
    ///         <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in
    ///             the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing
    ///             out by calling the <a>RecordLifecycleActionHeartbeat</a> API.</p>
    public let heartbeatTimeout: Int?
    /// <p>The name of the lifecycle hook.</p>
    public let lifecycleHookName: String?
    /// <p>The instance state to which you want to attach the lifecycle hook. The valid values
    ///             are:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>autoscaling:EC2_INSTANCE_LAUNCHING</p>
    ///             </li>
    ///             <li>
    ///                 <p>autoscaling:EC2_INSTANCE_TERMINATING</p>
    ///             </li>
    ///          </ul>
    ///         <p>Required for new lifecycle hooks, but optional when updating existing hooks.</p>
    public let lifecycleTransition: String?
    /// <p>Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to
    ///             the notification target.</p>
    public let notificationMetadata: String?
    /// <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance
    ///             is in the transition state for the lifecycle hook. This target can be either an SQS
    ///             queue or an SNS topic.</p>
    ///         <p>If you specify an empty string, this overrides the current ARN.</p>
    ///         <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue,
    ///             and an email key-value pair format when sending notifications to an Amazon SNS
    ///             topic.</p>
    ///         <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test
    ///             messages contain the following additional key-value pair: <code>"Event":
    ///                 "autoscaling:TEST_NOTIFICATION"</code>.</p>
    public let notificationTargetARN: String?
    /// <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified
    ///             notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p>
    ///         <p>Required for new lifecycle hooks, but optional when updating existing hooks.</p>
    public let roleARN: String?

    public init (
        autoScalingGroupName: String? = nil,
        defaultResult: String? = nil,
        heartbeatTimeout: Int? = nil,
        lifecycleHookName: String? = nil,
        lifecycleTransition: String? = nil,
        notificationMetadata: String? = nil,
        notificationTargetARN: String? = nil,
        roleARN: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.defaultResult = defaultResult
        self.heartbeatTimeout = heartbeatTimeout
        self.lifecycleHookName = lifecycleHookName
        self.lifecycleTransition = lifecycleTransition
        self.notificationMetadata = notificationMetadata
        self.notificationTargetARN = notificationTargetARN
        self.roleARN = roleARN
    }
}

extension PutLifecycleHookOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutLifecycleHookOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutLifecycleHookOutputError: Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutLifecycleHookOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutLifecycleHookOutputResponse()"}
}

extension PutLifecycleHookOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct PutLifecycleHookOutputResponse: Equatable {

    public init() {}
}

struct PutLifecycleHookOutputResponseBody: Equatable {
}

extension PutLifecycleHookOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct PutNotificationConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "PutNotificationConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutNotificationConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutNotificationConfigurationInput>
    public typealias MOutput = OperationOutput<PutNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutNotificationConfigurationOutputError>
}

extension PutNotificationConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutNotificationConfigurationInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), notificationTypes: \(String(describing: notificationTypes)), topicARN: \(String(describing: topicARN)))"}
}

extension PutNotificationConfigurationInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let notificationTypes = notificationTypes {
            var notificationTypesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NotificationTypes"))
            for (index0, xmlstringmaxlen2550) in notificationTypes.enumerated() {
                try notificationTypesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let topicARN = topicARN {
            try container.encode(topicARN, forKey: Key("TopicARN"))
        }
        try container.encode("PutNotificationConfiguration", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct PutNotificationConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "PutNotificationConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutNotificationConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutNotificationConfigurationInput>
    public typealias MOutput = OperationOutput<PutNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutNotificationConfigurationOutputError>
}

public struct PutNotificationConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "PutNotificationConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutNotificationConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutNotificationConfigurationInput>
    public typealias MOutput = OperationOutput<PutNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutNotificationConfigurationOutputError>
}

public struct PutNotificationConfigurationInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The type of event that causes the notification to be sent. To query the notification
    ///             types supported by Amazon EC2 Auto Scaling, call the <a>DescribeAutoScalingNotificationTypes</a> API.</p>
    public let notificationTypes: [String]?
    /// <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS)
    ///             topic.</p>
    public let topicARN: String?

    public init (
        autoScalingGroupName: String? = nil,
        notificationTypes: [String]? = nil,
        topicARN: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.notificationTypes = notificationTypes
        self.topicARN = topicARN
    }
}

extension PutNotificationConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutNotificationConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutNotificationConfigurationOutputError: Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutNotificationConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutNotificationConfigurationOutputResponse()"}
}

extension PutNotificationConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct PutNotificationConfigurationOutputResponse: Equatable {

    public init() {}
}

struct PutNotificationConfigurationOutputResponseBody: Equatable {
}

extension PutNotificationConfigurationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct PutScalingPolicyInputBodyMiddleware: Middleware {
    public let id: String = "PutScalingPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutScalingPolicyOutputError>
}

extension PutScalingPolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutScalingPolicyInput(adjustmentType: \(String(describing: adjustmentType)), autoScalingGroupName: \(String(describing: autoScalingGroupName)), cooldown: \(String(describing: cooldown)), enabled: \(String(describing: enabled)), estimatedInstanceWarmup: \(String(describing: estimatedInstanceWarmup)), metricAggregationType: \(String(describing: metricAggregationType)), minAdjustmentMagnitude: \(String(describing: minAdjustmentMagnitude)), minAdjustmentStep: \(String(describing: minAdjustmentStep)), policyName: \(String(describing: policyName)), policyType: \(String(describing: policyType)), predictiveScalingConfiguration: \(String(describing: predictiveScalingConfiguration)), scalingAdjustment: \(String(describing: scalingAdjustment)), stepAdjustments: \(String(describing: stepAdjustments)), targetTrackingConfiguration: \(String(describing: targetTrackingConfiguration)))"}
}

extension PutScalingPolicyInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let adjustmentType = adjustmentType {
            try container.encode(adjustmentType, forKey: Key("AdjustmentType"))
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let cooldown = cooldown {
            try container.encode(cooldown, forKey: Key("Cooldown"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: Key("Enabled"))
        }
        if let estimatedInstanceWarmup = estimatedInstanceWarmup {
            try container.encode(estimatedInstanceWarmup, forKey: Key("EstimatedInstanceWarmup"))
        }
        if let metricAggregationType = metricAggregationType {
            try container.encode(metricAggregationType, forKey: Key("MetricAggregationType"))
        }
        if let minAdjustmentMagnitude = minAdjustmentMagnitude {
            try container.encode(minAdjustmentMagnitude, forKey: Key("MinAdjustmentMagnitude"))
        }
        if let minAdjustmentStep = minAdjustmentStep {
            try container.encode(minAdjustmentStep, forKey: Key("MinAdjustmentStep"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: Key("PolicyName"))
        }
        if let policyType = policyType {
            try container.encode(policyType, forKey: Key("PolicyType"))
        }
        if let predictiveScalingConfiguration = predictiveScalingConfiguration {
            try container.encode(predictiveScalingConfiguration, forKey: Key("PredictiveScalingConfiguration"))
        }
        if let scalingAdjustment = scalingAdjustment {
            try container.encode(scalingAdjustment, forKey: Key("ScalingAdjustment"))
        }
        if let stepAdjustments = stepAdjustments {
            var stepAdjustmentsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("StepAdjustments"))
            for (index0, stepadjustment0) in stepAdjustments.enumerated() {
                try stepAdjustmentsContainer.encode(stepadjustment0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let targetTrackingConfiguration = targetTrackingConfiguration {
            try container.encode(targetTrackingConfiguration, forKey: Key("TargetTrackingConfiguration"))
        }
        try container.encode("PutScalingPolicy", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct PutScalingPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "PutScalingPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutScalingPolicyOutputError>
}

public struct PutScalingPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "PutScalingPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutScalingPolicyOutputError>
}

public struct PutScalingPolicyInput: Equatable {
    /// <p>Specifies how the scaling adjustment is interpreted (for example, an absolute number
    ///             or a percentage). The valid values are <code>ChangeInCapacity</code>,
    ///                 <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p>
    ///         <p>Required if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>.
    ///             For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let adjustmentType: String?
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The duration of the policy's cooldown period, in seconds. When a cooldown period is
    ///             specified here, it overrides the default cooldown period defined for the Auto Scaling
    ///             group.</p>
    ///         <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see
    ///                 <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling
    ///                 cooldowns for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let cooldown: Int?
    /// <p>Indicates whether the scaling policy is enabled or disabled. The default is enabled.
    ///             For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html">Disabling a
    ///                 scaling policy for an Auto Scaling group</a> in the
    ///             <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let enabled: Bool?
    /// <p>The estimated time, in seconds, until a newly launched instance can contribute to the
    ///             CloudWatch metrics. If not provided, the default is to use the value from the default cooldown
    ///             period for the Auto Scaling group.</p>
    ///         <p>Valid only if the policy type is <code>TargetTrackingScaling</code> or
    ///                 <code>StepScaling</code>.</p>
    public let estimatedInstanceWarmup: Int?
    /// <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>,
    ///                 <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the
    ///             value is treated as <code>Average</code>.</p>
    ///         <p>Valid only if the policy type is <code>StepScaling</code>.</p>
    public let metricAggregationType: String?
    /// <p>The minimum value to scale by when the adjustment type is
    ///                 <code>PercentChangeInCapacity</code>. For example, suppose that you create a step
    ///             scaling policy to scale out an Auto Scaling group by 25 percent and you specify a
    ///                 <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the
    ///             scaling policy is performed, 25 percent of 4 is 1. However, because you specified a
    ///                 <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2
    ///             instances.</p>
    ///         <p>Valid only if the policy type is <code>StepScaling</code> or
    ///                 <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User
    ///             Guide</i>.</p>
    ///         <note>
    ///             <p>Some Auto Scaling groups use instance weights. In this case, set the
    ///                     <code>MinAdjustmentMagnitude</code> to a value that is at least as large as your
    ///                 largest instance weight.</p>
    ///         </note>
    public let minAdjustmentMagnitude: Int?
    /// <p>Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code>
    ///             instead.</p>
    @available(*, deprecated)
    public let minAdjustmentStep: Int?
    /// <p>The name of the policy.</p>
    public let policyName: String?
    /// <p>One of the following policy types: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>TargetTrackingScaling</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>StepScaling</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>SimpleScaling</code> (default)</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>PredictiveScaling</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    public let policyType: String?
    /// <p>A predictive scaling policy. Provides support for only predefined metrics.</p>
    ///         <p>Predictive scaling works with CPU utilization, network in/out, and the Application
    ///             Load Balancer request count.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredictiveScalingConfiguration.html">PredictiveScalingConfiguration</a> in the <i>Amazon EC2 Auto Scaling API
    ///                 Reference</i>.</p>
    ///         <p>Required if the policy type is <code>PredictiveScaling</code>.</p>
    public let predictiveScalingConfiguration: PredictiveScalingConfiguration?
    /// <p>The amount by which to scale, based on the specified adjustment type. A positive value
    ///             adds to the current capacity while a negative number removes from the current capacity.
    ///             For exact capacity, you must specify a positive value.</p>
    ///         <p>Required if the policy type is <code>SimpleScaling</code>. (Not used with any other
    ///             policy type.) </p>
    public let scalingAdjustment: Int?
    /// <p>A set of adjustments that enable you to scale based on the size of the alarm
    ///             breach.</p>
    ///         <p>Required if the policy type is <code>StepScaling</code>. (Not used with any other
    ///             policy type.) </p>
    public let stepAdjustments: [StepAdjustment]?
    /// <p>A target tracking scaling policy. Provides support for predefined or customized
    ///             metrics.</p>
    ///         <p>The following predefined metrics are available:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>ASGAverageCPUUtilization</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ASGAverageNetworkIn</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ASGAverageNetworkOut</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ALBRequestCountPerTarget</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <p>If you specify <code>ALBRequestCountPerTarget</code> for the metric, you must specify
    ///             the <code>ResourceLabel</code> parameter with the
    ///                 <code>PredefinedMetricSpecification</code>.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_TargetTrackingConfiguration.html">TargetTrackingConfiguration</a> in the <i>Amazon EC2 Auto Scaling API
    ///                 Reference</i>.</p>
    ///         <p>Required if the policy type is <code>TargetTrackingScaling</code>.</p>
    public let targetTrackingConfiguration: TargetTrackingConfiguration?

    public init (
        adjustmentType: String? = nil,
        autoScalingGroupName: String? = nil,
        cooldown: Int? = nil,
        enabled: Bool? = nil,
        estimatedInstanceWarmup: Int? = nil,
        metricAggregationType: String? = nil,
        minAdjustmentMagnitude: Int? = nil,
        minAdjustmentStep: Int? = nil,
        policyName: String? = nil,
        policyType: String? = nil,
        predictiveScalingConfiguration: PredictiveScalingConfiguration? = nil,
        scalingAdjustment: Int? = nil,
        stepAdjustments: [StepAdjustment]? = nil,
        targetTrackingConfiguration: TargetTrackingConfiguration? = nil
    )
    {
        self.adjustmentType = adjustmentType
        self.autoScalingGroupName = autoScalingGroupName
        self.cooldown = cooldown
        self.enabled = enabled
        self.estimatedInstanceWarmup = estimatedInstanceWarmup
        self.metricAggregationType = metricAggregationType
        self.minAdjustmentMagnitude = minAdjustmentMagnitude
        self.minAdjustmentStep = minAdjustmentStep
        self.policyName = policyName
        self.policyType = policyType
        self.predictiveScalingConfiguration = predictiveScalingConfiguration
        self.scalingAdjustment = scalingAdjustment
        self.stepAdjustments = stepAdjustments
        self.targetTrackingConfiguration = targetTrackingConfiguration
    }
}

extension PutScalingPolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutScalingPolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutScalingPolicyOutputError: Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutScalingPolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutScalingPolicyOutputResponse(alarms: \(String(describing: alarms)), policyARN: \(String(describing: policyARN)))"}
}

extension PutScalingPolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PutScalingPolicyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.alarms = output.alarms
            self.policyARN = output.policyARN
        } else {
            self.alarms = nil
            self.policyARN = nil
        }
    }
}

/// <p>Contains the output of PutScalingPolicy.</p>
public struct PutScalingPolicyOutputResponse: Equatable {
    /// <p>The CloudWatch alarms created for the target tracking scaling policy.</p>
    public let alarms: [Alarm]?
    /// <p>The Amazon Resource Name (ARN) of the policy.</p>
    public let policyARN: String?

    public init (
        alarms: [Alarm]? = nil,
        policyARN: String? = nil
    )
    {
        self.alarms = alarms
        self.policyARN = policyARN
    }
}

struct PutScalingPolicyOutputResponseBody: Equatable {
    public let policyARN: String?
    public let alarms: [Alarm]?
}

extension PutScalingPolicyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case alarms = "Alarms"
        case policyARN = "PolicyARN"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("PutScalingPolicyResult"))
        let policyARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyARN)
        policyARN = policyARNDecoded
        if containerValues.contains(.alarms) {
            struct KeyVal0{struct member{}}
            let alarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarms)
            if let alarmsWrappedContainer = alarmsWrappedContainer {
                let alarmsContainer = try alarmsWrappedContainer.decodeIfPresent([Alarm].self, forKey: .member)
                var alarmsBuffer:[Alarm]? = nil
                if let alarmsContainer = alarmsContainer {
                    alarmsBuffer = [Alarm]()
                    for structureContainer0 in alarmsContainer {
                        alarmsBuffer?.append(structureContainer0)
                    }
                }
                alarms = alarmsBuffer
            } else {
                alarms = []
            }
        } else {
            alarms = nil
        }
    }
}

public struct PutScheduledUpdateGroupActionInputBodyMiddleware: Middleware {
    public let id: String = "PutScheduledUpdateGroupActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutScheduledUpdateGroupActionInput>,
                  next: H) -> Swift.Result<OperationOutput<PutScheduledUpdateGroupActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutScheduledUpdateGroupActionInput>
    public typealias MOutput = OperationOutput<PutScheduledUpdateGroupActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutScheduledUpdateGroupActionOutputError>
}

extension PutScheduledUpdateGroupActionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutScheduledUpdateGroupActionInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), desiredCapacity: \(String(describing: desiredCapacity)), endTime: \(String(describing: endTime)), maxSize: \(String(describing: maxSize)), minSize: \(String(describing: minSize)), recurrence: \(String(describing: recurrence)), scheduledActionName: \(String(describing: scheduledActionName)), startTime: \(String(describing: startTime)), time: \(String(describing: time)), timeZone: \(String(describing: timeZone)))"}
}

extension PutScheduledUpdateGroupActionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: Key("DesiredCapacity"))
        }
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: Key("MinSize"))
        }
        if let recurrence = recurrence {
            try container.encode(recurrence, forKey: Key("Recurrence"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        if let time = time {
            try container.encode(TimestampWrapper(time, format: .dateTime), forKey: Key("time"))
        }
        if let timeZone = timeZone {
            try container.encode(timeZone, forKey: Key("TimeZone"))
        }
        try container.encode("PutScheduledUpdateGroupAction", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct PutScheduledUpdateGroupActionInputHeadersMiddleware: Middleware {
    public let id: String = "PutScheduledUpdateGroupActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutScheduledUpdateGroupActionInput>,
                  next: H) -> Swift.Result<OperationOutput<PutScheduledUpdateGroupActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutScheduledUpdateGroupActionInput>
    public typealias MOutput = OperationOutput<PutScheduledUpdateGroupActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutScheduledUpdateGroupActionOutputError>
}

public struct PutScheduledUpdateGroupActionInputQueryItemMiddleware: Middleware {
    public let id: String = "PutScheduledUpdateGroupActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutScheduledUpdateGroupActionInput>,
                  next: H) -> Swift.Result<OperationOutput<PutScheduledUpdateGroupActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutScheduledUpdateGroupActionInput>
    public typealias MOutput = OperationOutput<PutScheduledUpdateGroupActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutScheduledUpdateGroupActionOutputError>
}

public struct PutScheduledUpdateGroupActionInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The desired capacity is the initial capacity of the Auto Scaling group after the scheduled
    ///             action runs and the capacity it attempts to maintain. It can scale beyond this capacity
    ///             if you add more scaling conditions. </p>
    public let desiredCapacity: Int?
    /// <p>The date and time for the recurring schedule to end, in UTC.</p>
    public let endTime: Date?
    /// <p>The maximum size of the Auto Scaling group.</p>
    public let maxSize: Int?
    /// <p>The minimum size of the Auto Scaling group.</p>
    public let minSize: Int?
    /// <p>The recurring schedule for this action. This format consists of five fields separated
    ///             by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value
    ///             must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information
    ///             about this format, see <a href="http://crontab.org">Crontab</a>.</p>
    ///         <p>When <code>StartTime</code> and <code>EndTime</code> are specified with
    ///                 <code>Recurrence</code>, they form the boundaries of when the recurring action
    ///             starts and stops.</p>
    ///         <p>Cron expressions use Universal Coordinated Time (UTC) by default.</p>
    public let recurrence: String?
    /// <p>The name of this scaling action.</p>
    public let scheduledActionName: String?
    /// <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT
    ///             only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p>
    ///         <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs
    ///             the action at this time, and then performs the action based on the specified
    ///             recurrence.</p>
    ///         <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error
    ///             message.</p>
    public let startTime: Date?
    /// <p>This parameter is no longer used.</p>
    public let time: Date?
    /// <p>Specifies the time zone for a cron expression. If a time zone is not provided, UTC is
    ///             used by default. </p>
    ///         <p>Valid values are the canonical names of the IANA time zones, derived from the IANA
    ///             Time Zone Database (such as <code>Etc/GMT+9</code> or <code>Pacific/Tahiti</code>). For
    ///             more information, see <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</a>.</p>
    public let timeZone: String?

    public init (
        autoScalingGroupName: String? = nil,
        desiredCapacity: Int? = nil,
        endTime: Date? = nil,
        maxSize: Int? = nil,
        minSize: Int? = nil,
        recurrence: String? = nil,
        scheduledActionName: String? = nil,
        startTime: Date? = nil,
        time: Date? = nil,
        timeZone: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.desiredCapacity = desiredCapacity
        self.endTime = endTime
        self.maxSize = maxSize
        self.minSize = minSize
        self.recurrence = recurrence
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.time = time
        self.timeZone = timeZone
    }
}

extension PutScheduledUpdateGroupActionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutScheduledUpdateGroupActionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutScheduledUpdateGroupActionOutputError: Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutScheduledUpdateGroupActionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutScheduledUpdateGroupActionOutputResponse()"}
}

extension PutScheduledUpdateGroupActionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct PutScheduledUpdateGroupActionOutputResponse: Equatable {

    public init() {}
}

struct PutScheduledUpdateGroupActionOutputResponseBody: Equatable {
}

extension PutScheduledUpdateGroupActionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct PutWarmPoolInputBodyMiddleware: Middleware {
    public let id: String = "PutWarmPoolInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutWarmPoolInput>,
                  next: H) -> Swift.Result<OperationOutput<PutWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutWarmPoolInput>
    public typealias MOutput = OperationOutput<PutWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutWarmPoolOutputError>
}

extension PutWarmPoolInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutWarmPoolInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), maxGroupPreparedCapacity: \(String(describing: maxGroupPreparedCapacity)), minSize: \(String(describing: minSize)), poolState: \(String(describing: poolState)))"}
}

extension PutWarmPoolInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let maxGroupPreparedCapacity = maxGroupPreparedCapacity {
            try container.encode(maxGroupPreparedCapacity, forKey: Key("MaxGroupPreparedCapacity"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: Key("MinSize"))
        }
        if let poolState = poolState {
            try container.encode(poolState, forKey: Key("PoolState"))
        }
        try container.encode("PutWarmPool", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct PutWarmPoolInputHeadersMiddleware: Middleware {
    public let id: String = "PutWarmPoolInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutWarmPoolInput>,
                  next: H) -> Swift.Result<OperationOutput<PutWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutWarmPoolInput>
    public typealias MOutput = OperationOutput<PutWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutWarmPoolOutputError>
}

public struct PutWarmPoolInputQueryItemMiddleware: Middleware {
    public let id: String = "PutWarmPoolInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutWarmPoolInput>,
                  next: H) -> Swift.Result<OperationOutput<PutWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutWarmPoolInput>
    public typealias MOutput = OperationOutput<PutWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutWarmPoolOutputError>
}

public struct PutWarmPoolInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>Specifies the maximum number of instances that are allowed to be in the warm pool or
    ///             in any state except <code>Terminated</code> for the Auto Scaling group. This is an optional
    ///             property. Specify it only if you do not want the warm pool size to be determined by the
    ///             difference between the group's maximum capacity and its desired capacity. </p>
    ///         <important>
    ///             <p>If a value for <code>MaxGroupPreparedCapacity</code> is not specified, Amazon EC2 Auto Scaling
    ///                 launches and maintains the difference between the group's maximum capacity and its
    ///                 desired capacity. If you specify a value for <code>MaxGroupPreparedCapacity</code>,
    ///                 Amazon EC2 Auto Scaling uses the difference between the <code>MaxGroupPreparedCapacity</code> and
    ///                 the desired capacity instead. </p>
    ///             <p>The size of the warm pool is dynamic. Only when
    ///                     <code>MaxGroupPreparedCapacity</code> and <code>MinSize</code> are set to the
    ///                 same value does the warm pool have an absolute size.</p>
    ///         </important>
    ///         <p>If the desired capacity of the Auto Scaling group is higher than the
    ///                 <code>MaxGroupPreparedCapacity</code>, the capacity of the warm pool is 0, unless
    ///             you specify a value for <code>MinSize</code>. To remove a value that you previously set,
    ///             include the property but specify -1 for the value. </p>
    public let maxGroupPreparedCapacity: Int?
    /// <p>Specifies the minimum number of instances to maintain in the warm pool. This helps you
    ///             to ensure that there is always a certain number of warmed instances available to handle
    ///             traffic spikes. Defaults to 0 if not specified.</p>
    public let minSize: Int?
    /// <p>Sets the instance state to transition to after the lifecycle actions are complete.
    ///             Default is <code>Stopped</code>.</p>
    public let poolState: WarmPoolState?

    public init (
        autoScalingGroupName: String? = nil,
        maxGroupPreparedCapacity: Int? = nil,
        minSize: Int? = nil,
        poolState: WarmPoolState? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxGroupPreparedCapacity = maxGroupPreparedCapacity
        self.minSize = minSize
        self.poolState = poolState
    }
}

extension PutWarmPoolOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutWarmPoolOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutWarmPoolOutputError: Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutWarmPoolOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutWarmPoolOutputResponse()"}
}

extension PutWarmPoolOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct PutWarmPoolOutputResponse: Equatable {

    public init() {}
}

struct PutWarmPoolOutputResponseBody: Equatable {
}

extension PutWarmPoolOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct RecordLifecycleActionHeartbeatInputBodyMiddleware: Middleware {
    public let id: String = "RecordLifecycleActionHeartbeatInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RecordLifecycleActionHeartbeatInput>,
                  next: H) -> Swift.Result<OperationOutput<RecordLifecycleActionHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RecordLifecycleActionHeartbeatInput>
    public typealias MOutput = OperationOutput<RecordLifecycleActionHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RecordLifecycleActionHeartbeatOutputError>
}

extension RecordLifecycleActionHeartbeatInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RecordLifecycleActionHeartbeatInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), instanceId: \(String(describing: instanceId)), lifecycleActionToken: \(String(describing: lifecycleActionToken)), lifecycleHookName: \(String(describing: lifecycleHookName)))"}
}

extension RecordLifecycleActionHeartbeatInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let lifecycleActionToken = lifecycleActionToken {
            try container.encode(lifecycleActionToken, forKey: Key("LifecycleActionToken"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: Key("LifecycleHookName"))
        }
        try container.encode("RecordLifecycleActionHeartbeat", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct RecordLifecycleActionHeartbeatInputHeadersMiddleware: Middleware {
    public let id: String = "RecordLifecycleActionHeartbeatInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RecordLifecycleActionHeartbeatInput>,
                  next: H) -> Swift.Result<OperationOutput<RecordLifecycleActionHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RecordLifecycleActionHeartbeatInput>
    public typealias MOutput = OperationOutput<RecordLifecycleActionHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RecordLifecycleActionHeartbeatOutputError>
}

public struct RecordLifecycleActionHeartbeatInputQueryItemMiddleware: Middleware {
    public let id: String = "RecordLifecycleActionHeartbeatInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RecordLifecycleActionHeartbeatInput>,
                  next: H) -> Swift.Result<OperationOutput<RecordLifecycleActionHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RecordLifecycleActionHeartbeatInput>
    public typealias MOutput = OperationOutput<RecordLifecycleActionHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RecordLifecycleActionHeartbeatOutputError>
}

public struct RecordLifecycleActionHeartbeatInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The ID of the instance.</p>
    public let instanceId: String?
    /// <p>A token that uniquely identifies a specific lifecycle action associated with an
    ///             instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when
    ///             you created the lifecycle hook.</p>
    public let lifecycleActionToken: String?
    /// <p>The name of the lifecycle hook.</p>
    public let lifecycleHookName: String?

    public init (
        autoScalingGroupName: String? = nil,
        instanceId: String? = nil,
        lifecycleActionToken: String? = nil,
        lifecycleHookName: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceId = instanceId
        self.lifecycleActionToken = lifecycleActionToken
        self.lifecycleHookName = lifecycleHookName
    }
}

extension RecordLifecycleActionHeartbeatOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RecordLifecycleActionHeartbeatOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RecordLifecycleActionHeartbeatOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RecordLifecycleActionHeartbeatOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RecordLifecycleActionHeartbeatOutputResponse()"}
}

extension RecordLifecycleActionHeartbeatOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RecordLifecycleActionHeartbeatOutputResponse: Equatable {

    public init() {}
}

struct RecordLifecycleActionHeartbeatOutputResponseBody: Equatable {
}

extension RecordLifecycleActionHeartbeatOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension RefreshPreferences: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case checkpointDelay = "CheckpointDelay"
        case checkpointPercentages = "CheckpointPercentages"
        case instanceWarmup = "InstanceWarmup"
        case minHealthyPercentage = "MinHealthyPercentage"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let checkpointDelay = checkpointDelay {
            try container.encode(checkpointDelay, forKey: Key("CheckpointDelay"))
        }
        if let checkpointPercentages = checkpointPercentages {
            var checkpointPercentagesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CheckpointPercentages"))
            for (index0, nonzerointpercent0) in checkpointPercentages.enumerated() {
                try checkpointPercentagesContainer.encode(nonzerointpercent0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let instanceWarmup = instanceWarmup {
            try container.encode(instanceWarmup, forKey: Key("InstanceWarmup"))
        }
        if let minHealthyPercentage = minHealthyPercentage {
            try container.encode(minHealthyPercentage, forKey: Key("MinHealthyPercentage"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minHealthyPercentageDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minHealthyPercentage)
        minHealthyPercentage = minHealthyPercentageDecoded
        let instanceWarmupDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceWarmup)
        instanceWarmup = instanceWarmupDecoded
        if containerValues.contains(.checkpointPercentages) {
            struct KeyVal0{struct member{}}
            let checkpointPercentagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .checkpointPercentages)
            if let checkpointPercentagesWrappedContainer = checkpointPercentagesWrappedContainer {
                let checkpointPercentagesContainer = try checkpointPercentagesWrappedContainer.decodeIfPresent([Int].self, forKey: .member)
                var checkpointPercentagesBuffer:[Int]? = nil
                if let checkpointPercentagesContainer = checkpointPercentagesContainer {
                    checkpointPercentagesBuffer = [Int]()
                    for integerContainer0 in checkpointPercentagesContainer {
                        checkpointPercentagesBuffer?.append(integerContainer0)
                    }
                }
                checkpointPercentages = checkpointPercentagesBuffer
            } else {
                checkpointPercentages = []
            }
        } else {
            checkpointPercentages = nil
        }
        let checkpointDelayDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .checkpointDelay)
        checkpointDelay = checkpointDelayDecoded
    }
}

extension RefreshPreferences: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RefreshPreferences(checkpointDelay: \(String(describing: checkpointDelay)), checkpointPercentages: \(String(describing: checkpointPercentages)), instanceWarmup: \(String(describing: instanceWarmup)), minHealthyPercentage: \(String(describing: minHealthyPercentage)))"}
}

/// <p>Describes information used to start an instance refresh. </p>
///         <p>All properties are optional. However, if you specify a value for
///                 <code>CheckpointDelay</code>, you must also provide a value for
///                 <code>CheckpointPercentages</code>. </p>
public struct RefreshPreferences: Equatable {
    /// <p>The amount of time, in seconds, to wait after a checkpoint before continuing. This
    ///             property is optional, but if you specify a value for it, you must also specify a value
    ///             for <code>CheckpointPercentages</code>. If you specify a value for
    ///                 <code>CheckpointPercentages</code> and not for <code>CheckpointDelay</code>, the
    ///                 <code>CheckpointDelay</code> defaults to <code>3600</code> (1 hour). </p>
    public let checkpointDelay: Int?
    /// <p>Threshold values for each checkpoint in ascending order. Each number must be unique.
    ///             To replace all instances in the Auto Scaling group, the last number in the array must be
    ///                 <code>100</code>.</p>
    ///         <p>For usage examples, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-adding-checkpoints-instance-refresh.html">Adding
    ///                 checkpoints to an instance refresh</a> in the
    ///             <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let checkpointPercentages: [Int]?
    /// <p>The number of seconds until a newly launched instance is configured and ready to use.
    ///             During this time, Amazon EC2 Auto Scaling does not immediately move on to the next replacement. The
    ///             default is to use the value for the health check grace period defined for the
    ///             group.</p>
    public let instanceWarmup: Int?
    /// <p>The amount of capacity in the Auto Scaling group that must remain healthy during an instance
    ///             refresh to allow the operation to continue, as a percentage of the desired capacity of
    ///             the Auto Scaling group (rounded up to the nearest integer). The default is <code>90</code>.
    ///         </p>
    public let minHealthyPercentage: Int?

    public init (
        checkpointDelay: Int? = nil,
        checkpointPercentages: [Int]? = nil,
        instanceWarmup: Int? = nil,
        minHealthyPercentage: Int? = nil
    )
    {
        self.checkpointDelay = checkpointDelay
        self.checkpointPercentages = checkpointPercentages
        self.instanceWarmup = instanceWarmup
        self.minHealthyPercentage = minHealthyPercentage
    }
}

public enum RefreshStrategy {
    case rolling
    case sdkUnknown(String)
}

extension RefreshStrategy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RefreshStrategy] {
        return [
            .rolling,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .rolling: return "Rolling"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RefreshStrategy(rawValue: rawValue) ?? RefreshStrategy.sdkUnknown(rawValue)
    }
}

extension ResourceContentionFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceContentionFault(message: \(String(describing: message)))"}
}

extension ResourceContentionFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ResourceContentionFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You already have a pending update to an Amazon EC2 Auto Scaling resource (for example, an Auto Scaling group,
///             instance, or load balancer).</p>
public struct ResourceContentionFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server
    /// <p></p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceContentionFaultBody: Equatable {
    public let message: String?
}

extension ResourceContentionFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceInUseFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceInUseFault(message: \(String(describing: message)))"}
}

extension ResourceInUseFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ResourceInUseFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation can't be performed because the resource is in use.</p>
public struct ResourceInUseFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p></p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceInUseFaultBody: Equatable {
    public let message: String?
}

extension ResourceInUseFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ResumeProcessesInputBodyMiddleware: Middleware {
    public let id: String = "ResumeProcessesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResumeProcessesInput>,
                  next: H) -> Swift.Result<OperationOutput<ResumeProcessesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResumeProcessesInput>
    public typealias MOutput = OperationOutput<ResumeProcessesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResumeProcessesOutputError>
}

extension ResumeProcessesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResumeProcessesInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), scalingProcesses: \(String(describing: scalingProcesses)))"}
}

extension ResumeProcessesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let scalingProcesses = scalingProcesses {
            var scalingProcessesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ScalingProcesses"))
            for (index0, xmlstringmaxlen2550) in scalingProcesses.enumerated() {
                try scalingProcessesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ResumeProcesses", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct ResumeProcessesInputHeadersMiddleware: Middleware {
    public let id: String = "ResumeProcessesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResumeProcessesInput>,
                  next: H) -> Swift.Result<OperationOutput<ResumeProcessesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResumeProcessesInput>
    public typealias MOutput = OperationOutput<ResumeProcessesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResumeProcessesOutputError>
}

public struct ResumeProcessesInputQueryItemMiddleware: Middleware {
    public let id: String = "ResumeProcessesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResumeProcessesInput>,
                  next: H) -> Swift.Result<OperationOutput<ResumeProcessesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResumeProcessesInput>
    public typealias MOutput = OperationOutput<ResumeProcessesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResumeProcessesOutputError>
}

public struct ResumeProcessesInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>One or more of the following processes:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>Launch</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>Terminate</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>AddToLoadBalancer</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>AlarmNotification</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>AZRebalance</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>HealthCheck</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>InstanceRefresh</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ReplaceUnhealthy</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ScheduledActions</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <p>If you omit this parameter, all processes are specified.</p>
    public let scalingProcesses: [String]?

    public init (
        autoScalingGroupName: String? = nil,
        scalingProcesses: [String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scalingProcesses = scalingProcesses
    }
}

extension ResumeProcessesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ResumeProcessesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ResumeProcessesOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResumeProcessesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResumeProcessesOutputResponse()"}
}

extension ResumeProcessesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct ResumeProcessesOutputResponse: Equatable {

    public init() {}
}

struct ResumeProcessesOutputResponseBody: Equatable {
}

extension ResumeProcessesOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ScalingActivityInProgressFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScalingActivityInProgressFault(message: \(String(describing: message)))"}
}

extension ScalingActivityInProgressFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ScalingActivityInProgressFaultBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation can't be performed because there are scaling activities in
///             progress.</p>
public struct ScalingActivityInProgressFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p></p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ScalingActivityInProgressFaultBody: Equatable {
    public let message: String?
}

extension ScalingActivityInProgressFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum ScalingActivityStatusCode {
    case cancelled
    case failed
    case inprogress
    case midlifecycleaction
    case pendingspotbidplacement
    case preinservice
    case successful
    case waitingforelbconnectiondraining
    case waitingforinstanceid
    case waitingforinstancewarmup
    case waitingforspotinstanceid
    case waitingforspotinstancerequestid
    case sdkUnknown(String)
}

extension ScalingActivityStatusCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ScalingActivityStatusCode] {
        return [
            .cancelled,
            .failed,
            .inprogress,
            .midlifecycleaction,
            .pendingspotbidplacement,
            .preinservice,
            .successful,
            .waitingforelbconnectiondraining,
            .waitingforinstanceid,
            .waitingforinstancewarmup,
            .waitingforspotinstanceid,
            .waitingforspotinstancerequestid,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cancelled: return "Cancelled"
        case .failed: return "Failed"
        case .inprogress: return "InProgress"
        case .midlifecycleaction: return "MidLifecycleAction"
        case .pendingspotbidplacement: return "PendingSpotBidPlacement"
        case .preinservice: return "PreInService"
        case .successful: return "Successful"
        case .waitingforelbconnectiondraining: return "WaitingForELBConnectionDraining"
        case .waitingforinstanceid: return "WaitingForInstanceId"
        case .waitingforinstancewarmup: return "WaitingForInstanceWarmup"
        case .waitingforspotinstanceid: return "WaitingForSpotInstanceId"
        case .waitingforspotinstancerequestid: return "WaitingForSpotInstanceRequestId"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ScalingActivityStatusCode(rawValue: rawValue) ?? ScalingActivityStatusCode.sdkUnknown(rawValue)
    }
}

extension ScalingPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adjustmentType = "AdjustmentType"
        case alarms = "Alarms"
        case autoScalingGroupName = "AutoScalingGroupName"
        case cooldown = "Cooldown"
        case enabled = "Enabled"
        case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
        case metricAggregationType = "MetricAggregationType"
        case minAdjustmentMagnitude = "MinAdjustmentMagnitude"
        case minAdjustmentStep = "MinAdjustmentStep"
        case policyARN = "PolicyARN"
        case policyName = "PolicyName"
        case policyType = "PolicyType"
        case predictiveScalingConfiguration = "PredictiveScalingConfiguration"
        case scalingAdjustment = "ScalingAdjustment"
        case stepAdjustments = "StepAdjustments"
        case targetTrackingConfiguration = "TargetTrackingConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let adjustmentType = adjustmentType {
            try container.encode(adjustmentType, forKey: Key("AdjustmentType"))
        }
        if let alarms = alarms {
            var alarmsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Alarms"))
            for (index0, alarm0) in alarms.enumerated() {
                try alarmsContainer.encode(alarm0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let cooldown = cooldown {
            try container.encode(cooldown, forKey: Key("Cooldown"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: Key("Enabled"))
        }
        if let estimatedInstanceWarmup = estimatedInstanceWarmup {
            try container.encode(estimatedInstanceWarmup, forKey: Key("EstimatedInstanceWarmup"))
        }
        if let metricAggregationType = metricAggregationType {
            try container.encode(metricAggregationType, forKey: Key("MetricAggregationType"))
        }
        if let minAdjustmentMagnitude = minAdjustmentMagnitude {
            try container.encode(minAdjustmentMagnitude, forKey: Key("MinAdjustmentMagnitude"))
        }
        if let minAdjustmentStep = minAdjustmentStep {
            try container.encode(minAdjustmentStep, forKey: Key("MinAdjustmentStep"))
        }
        if let policyARN = policyARN {
            try container.encode(policyARN, forKey: Key("PolicyARN"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: Key("PolicyName"))
        }
        if let policyType = policyType {
            try container.encode(policyType, forKey: Key("PolicyType"))
        }
        if let predictiveScalingConfiguration = predictiveScalingConfiguration {
            try container.encode(predictiveScalingConfiguration, forKey: Key("PredictiveScalingConfiguration"))
        }
        if let scalingAdjustment = scalingAdjustment {
            try container.encode(scalingAdjustment, forKey: Key("ScalingAdjustment"))
        }
        if let stepAdjustments = stepAdjustments {
            var stepAdjustmentsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("StepAdjustments"))
            for (index0, stepadjustment0) in stepAdjustments.enumerated() {
                try stepAdjustmentsContainer.encode(stepadjustment0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let targetTrackingConfiguration = targetTrackingConfiguration {
            try container.encode(targetTrackingConfiguration, forKey: Key("TargetTrackingConfiguration"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyARN)
        policyARN = policyARNDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let adjustmentTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .adjustmentType)
        adjustmentType = adjustmentTypeDecoded
        let minAdjustmentStepDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minAdjustmentStep)
        minAdjustmentStep = minAdjustmentStepDecoded
        let minAdjustmentMagnitudeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minAdjustmentMagnitude)
        minAdjustmentMagnitude = minAdjustmentMagnitudeDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
        let cooldownDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .cooldown)
        cooldown = cooldownDecoded
        if containerValues.contains(.stepAdjustments) {
            struct KeyVal0{struct member{}}
            let stepAdjustmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stepAdjustments)
            if let stepAdjustmentsWrappedContainer = stepAdjustmentsWrappedContainer {
                let stepAdjustmentsContainer = try stepAdjustmentsWrappedContainer.decodeIfPresent([StepAdjustment].self, forKey: .member)
                var stepAdjustmentsBuffer:[StepAdjustment]? = nil
                if let stepAdjustmentsContainer = stepAdjustmentsContainer {
                    stepAdjustmentsBuffer = [StepAdjustment]()
                    for structureContainer0 in stepAdjustmentsContainer {
                        stepAdjustmentsBuffer?.append(structureContainer0)
                    }
                }
                stepAdjustments = stepAdjustmentsBuffer
            } else {
                stepAdjustments = []
            }
        } else {
            stepAdjustments = nil
        }
        let metricAggregationTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricAggregationType)
        metricAggregationType = metricAggregationTypeDecoded
        let estimatedInstanceWarmupDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .estimatedInstanceWarmup)
        estimatedInstanceWarmup = estimatedInstanceWarmupDecoded
        if containerValues.contains(.alarms) {
            struct KeyVal0{struct member{}}
            let alarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarms)
            if let alarmsWrappedContainer = alarmsWrappedContainer {
                let alarmsContainer = try alarmsWrappedContainer.decodeIfPresent([Alarm].self, forKey: .member)
                var alarmsBuffer:[Alarm]? = nil
                if let alarmsContainer = alarmsContainer {
                    alarmsBuffer = [Alarm]()
                    for structureContainer0 in alarmsContainer {
                        alarmsBuffer?.append(structureContainer0)
                    }
                }
                alarms = alarmsBuffer
            } else {
                alarms = []
            }
        } else {
            alarms = nil
        }
        let targetTrackingConfigurationDecoded = try containerValues.decodeIfPresent(TargetTrackingConfiguration.self, forKey: .targetTrackingConfiguration)
        targetTrackingConfiguration = targetTrackingConfigurationDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let predictiveScalingConfigurationDecoded = try containerValues.decodeIfPresent(PredictiveScalingConfiguration.self, forKey: .predictiveScalingConfiguration)
        predictiveScalingConfiguration = predictiveScalingConfigurationDecoded
    }
}

extension ScalingPolicy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScalingPolicy(adjustmentType: \(String(describing: adjustmentType)), alarms: \(String(describing: alarms)), autoScalingGroupName: \(String(describing: autoScalingGroupName)), cooldown: \(String(describing: cooldown)), enabled: \(String(describing: enabled)), estimatedInstanceWarmup: \(String(describing: estimatedInstanceWarmup)), metricAggregationType: \(String(describing: metricAggregationType)), minAdjustmentMagnitude: \(String(describing: minAdjustmentMagnitude)), minAdjustmentStep: \(String(describing: minAdjustmentStep)), policyARN: \(String(describing: policyARN)), policyName: \(String(describing: policyName)), policyType: \(String(describing: policyType)), predictiveScalingConfiguration: \(String(describing: predictiveScalingConfiguration)), scalingAdjustment: \(String(describing: scalingAdjustment)), stepAdjustments: \(String(describing: stepAdjustments)), targetTrackingConfiguration: \(String(describing: targetTrackingConfiguration)))"}
}

/// <p>Describes a scaling policy.</p>
public struct ScalingPolicy: Equatable {
    /// <p>Specifies how the scaling adjustment is interpreted (for example, an absolute number
    ///             or a percentage). The valid values are <code>ChangeInCapacity</code>,
    ///                 <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p>
    public let adjustmentType: String?
    /// <p>The CloudWatch alarms related to the policy.</p>
    public let alarms: [Alarm]?
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The duration of the policy's cooldown period, in seconds.</p>
    public let cooldown: Int?
    /// <p>Indicates whether the policy is enabled (<code>true</code>) or disabled
    ///                 (<code>false</code>).</p>
    public let enabled: Bool?
    /// <p>The estimated time, in seconds, until a newly launched instance can contribute to the
    ///             CloudWatch metrics.</p>
    public let estimatedInstanceWarmup: Int?
    /// <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>,
    ///                 <code>Maximum</code>, and <code>Average</code>.</p>
    public let metricAggregationType: String?
    /// <p>The minimum value to scale by when the adjustment type is
    ///                 <code>PercentChangeInCapacity</code>. </p>
    public let minAdjustmentMagnitude: Int?
    /// <p>Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code>
    ///             instead.</p>
    @available(*, deprecated)
    public let minAdjustmentStep: Int?
    /// <p>The Amazon Resource Name (ARN) of the policy.</p>
    public let policyARN: String?
    /// <p>The name of the scaling policy.</p>
    public let policyName: String?
    /// <p>One of the following policy types: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>TargetTrackingScaling</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>StepScaling</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>SimpleScaling</code> (default)</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>PredictiveScaling</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html">Target tracking
    ///                 scaling policies</a> and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html">Step and simple scaling
    ///                 policies</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let policyType: String?
    /// <p>A predictive scaling policy.</p>
    public let predictiveScalingConfiguration: PredictiveScalingConfiguration?
    /// <p>The amount by which to scale, based on the specified adjustment type. A positive value
    ///             adds to the current capacity while a negative number removes from the current
    ///             capacity.</p>
    public let scalingAdjustment: Int?
    /// <p>A set of adjustments that enable you to scale based on the size of the alarm
    ///             breach.</p>
    public let stepAdjustments: [StepAdjustment]?
    /// <p>A target tracking scaling policy.</p>
    public let targetTrackingConfiguration: TargetTrackingConfiguration?

    public init (
        adjustmentType: String? = nil,
        alarms: [Alarm]? = nil,
        autoScalingGroupName: String? = nil,
        cooldown: Int? = nil,
        enabled: Bool? = nil,
        estimatedInstanceWarmup: Int? = nil,
        metricAggregationType: String? = nil,
        minAdjustmentMagnitude: Int? = nil,
        minAdjustmentStep: Int? = nil,
        policyARN: String? = nil,
        policyName: String? = nil,
        policyType: String? = nil,
        predictiveScalingConfiguration: PredictiveScalingConfiguration? = nil,
        scalingAdjustment: Int? = nil,
        stepAdjustments: [StepAdjustment]? = nil,
        targetTrackingConfiguration: TargetTrackingConfiguration? = nil
    )
    {
        self.adjustmentType = adjustmentType
        self.alarms = alarms
        self.autoScalingGroupName = autoScalingGroupName
        self.cooldown = cooldown
        self.enabled = enabled
        self.estimatedInstanceWarmup = estimatedInstanceWarmup
        self.metricAggregationType = metricAggregationType
        self.minAdjustmentMagnitude = minAdjustmentMagnitude
        self.minAdjustmentStep = minAdjustmentStep
        self.policyARN = policyARN
        self.policyName = policyName
        self.policyType = policyType
        self.predictiveScalingConfiguration = predictiveScalingConfiguration
        self.scalingAdjustment = scalingAdjustment
        self.stepAdjustments = stepAdjustments
        self.targetTrackingConfiguration = targetTrackingConfiguration
    }
}

extension ScheduledUpdateGroupAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case desiredCapacity = "DesiredCapacity"
        case endTime = "EndTime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case recurrence = "Recurrence"
        case scheduledActionARN = "ScheduledActionARN"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case time = "Time"
        case timeZone = "TimeZone"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: Key("DesiredCapacity"))
        }
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: Key("MinSize"))
        }
        if let recurrence = recurrence {
            try container.encode(recurrence, forKey: Key("Recurrence"))
        }
        if let scheduledActionARN = scheduledActionARN {
            try container.encode(scheduledActionARN, forKey: Key("ScheduledActionARN"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        if let time = time {
            try container.encode(TimestampWrapper(time, format: .dateTime), forKey: Key("time"))
        }
        if let timeZone = timeZone {
            try container.encode(timeZone, forKey: Key("TimeZone"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let scheduledActionARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduledActionARN)
        scheduledActionARN = scheduledActionARNDecoded
        let timeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .time)
        var timeBuffer:Date? = nil
        if let timeDecoded = timeDecoded {
            timeBuffer = try TimestampWrapperDecoder.parseDateStringValue(timeDecoded, format: .dateTime)
        }
        time = timeBuffer
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        var startTimeBuffer:Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endTime)
        var endTimeBuffer:Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let recurrenceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recurrence)
        recurrence = recurrenceDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
    }
}

extension ScheduledUpdateGroupAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScheduledUpdateGroupAction(autoScalingGroupName: \(String(describing: autoScalingGroupName)), desiredCapacity: \(String(describing: desiredCapacity)), endTime: \(String(describing: endTime)), maxSize: \(String(describing: maxSize)), minSize: \(String(describing: minSize)), recurrence: \(String(describing: recurrence)), scheduledActionARN: \(String(describing: scheduledActionARN)), scheduledActionName: \(String(describing: scheduledActionName)), startTime: \(String(describing: startTime)), time: \(String(describing: time)), timeZone: \(String(describing: timeZone)))"}
}

/// <p>Describes a scheduled scaling
///             action.</p>
public struct ScheduledUpdateGroupAction: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The desired capacity is the initial capacity of the Auto Scaling group after the scheduled
    ///             action runs and the capacity it attempts to maintain.</p>
    public let desiredCapacity: Int?
    /// <p>The date and time in UTC for the recurring schedule to end. For example,
    ///                 <code>"2019-06-01T00:00:00Z"</code>.
    ///             </p>
    public let endTime: Date?
    /// <p>The maximum size of the Auto Scaling group.</p>
    public let maxSize: Int?
    /// <p>The minimum size of the Auto Scaling group.</p>
    public let minSize: Int?
    /// <p>The recurring schedule for the action, in Unix cron syntax format.</p>
    ///         <p>When <code>StartTime</code> and <code>EndTime</code> are specified with
    ///                 <code>Recurrence</code>, they form the boundaries of when the recurring action
    ///             starts and stops.</p>
    public let recurrence: String?
    /// <p>The Amazon Resource Name (ARN) of the scheduled action.</p>
    public let scheduledActionARN: String?
    /// <p>The name of the scheduled action.</p>
    public let scheduledActionName: String?
    /// <p>The date and time in UTC for this action to start. For example,
    ///                 <code>"2019-06-01T00:00:00Z"</code>.
    ///             </p>
    public let startTime: Date?
    /// <p>This parameter is no longer used.</p>
    public let time: Date?
    /// <p>The time zone for the cron expression.</p>
    public let timeZone: String?

    public init (
        autoScalingGroupName: String? = nil,
        desiredCapacity: Int? = nil,
        endTime: Date? = nil,
        maxSize: Int? = nil,
        minSize: Int? = nil,
        recurrence: String? = nil,
        scheduledActionARN: String? = nil,
        scheduledActionName: String? = nil,
        startTime: Date? = nil,
        time: Date? = nil,
        timeZone: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.desiredCapacity = desiredCapacity
        self.endTime = endTime
        self.maxSize = maxSize
        self.minSize = minSize
        self.recurrence = recurrence
        self.scheduledActionARN = scheduledActionARN
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.time = time
        self.timeZone = timeZone
    }
}

extension ScheduledUpdateGroupActionRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case desiredCapacity = "DesiredCapacity"
        case endTime = "EndTime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case recurrence = "Recurrence"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case timeZone = "TimeZone"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: Key("DesiredCapacity"))
        }
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: Key("MinSize"))
        }
        if let recurrence = recurrence {
            try container.encode(recurrence, forKey: Key("Recurrence"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        if let timeZone = timeZone {
            try container.encode(timeZone, forKey: Key("TimeZone"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        var startTimeBuffer:Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endTime)
        var endTimeBuffer:Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let recurrenceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recurrence)
        recurrence = recurrenceDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
    }
}

extension ScheduledUpdateGroupActionRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScheduledUpdateGroupActionRequest(desiredCapacity: \(String(describing: desiredCapacity)), endTime: \(String(describing: endTime)), maxSize: \(String(describing: maxSize)), minSize: \(String(describing: minSize)), recurrence: \(String(describing: recurrence)), scheduledActionName: \(String(describing: scheduledActionName)), startTime: \(String(describing: startTime)), timeZone: \(String(describing: timeZone)))"}
}

/// <p>Describes information used for one or more scheduled scaling action updates in a <a>BatchPutScheduledUpdateGroupAction</a> operation.</p>
public struct ScheduledUpdateGroupActionRequest: Equatable {
    /// <p>The desired capacity is the initial capacity of the Auto Scaling group after the scheduled
    ///             action runs and the capacity it attempts to maintain.</p>
    public let desiredCapacity: Int?
    /// <p>The date and time for the recurring schedule to end, in UTC.</p>
    public let endTime: Date?
    /// <p>The maximum size of the Auto Scaling group.</p>
    public let maxSize: Int?
    /// <p>The minimum size of the Auto Scaling group.</p>
    public let minSize: Int?
    /// <p>The recurring schedule for the action, in Unix cron syntax format. This format
    ///             consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month]
    ///             [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1
    ///                 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p>
    ///         <p>When <code>StartTime</code> and <code>EndTime</code> are specified with
    ///                 <code>Recurrence</code>, they form the boundaries of when the recurring action
    ///             starts and stops.</p>
    ///         <p>Cron expressions use Universal Coordinated Time (UTC) by default.</p>
    public let recurrence: String?
    /// <p>The name of the scaling action.</p>
    public let scheduledActionName: String?
    /// <p>The date and time for the action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT
    ///             only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p>
    ///         <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs
    ///             the action at this time, and then performs the action based on the specified
    ///             recurrence.</p>
    ///         <p>If you try to schedule the action in the past, Amazon EC2 Auto Scaling returns an error
    ///             message.</p>
    public let startTime: Date?
    /// <p>Specifies the time zone for a cron expression. If a time zone is not provided, UTC is
    ///             used by default. </p>
    ///         <p>Valid values are the canonical names of the IANA time zones, derived from the IANA
    ///             Time Zone Database (such as <code>Etc/GMT+9</code> or <code>Pacific/Tahiti</code>). For
    ///             more information, see <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</a>.</p>
    public let timeZone: String?

    public init (
        desiredCapacity: Int? = nil,
        endTime: Date? = nil,
        maxSize: Int? = nil,
        minSize: Int? = nil,
        recurrence: String? = nil,
        scheduledActionName: String? = nil,
        startTime: Date? = nil,
        timeZone: String? = nil
    )
    {
        self.desiredCapacity = desiredCapacity
        self.endTime = endTime
        self.maxSize = maxSize
        self.minSize = minSize
        self.recurrence = recurrence
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.timeZone = timeZone
    }
}

extension ServiceLinkedRoleFailure: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ServiceLinkedRoleFailure(message: \(String(describing: message)))"}
}

extension ServiceLinkedRoleFailure: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ErrorResponseContainer<ServiceLinkedRoleFailureBody> = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The service-linked role is not yet ready for use.</p>
public struct ServiceLinkedRoleFailure: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceLinkedRoleFailureBody: Equatable {
    public let message: String?
}

extension ServiceLinkedRoleFailureBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct SetDesiredCapacityInputBodyMiddleware: Middleware {
    public let id: String = "SetDesiredCapacityInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetDesiredCapacityInput>,
                  next: H) -> Swift.Result<OperationOutput<SetDesiredCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetDesiredCapacityInput>
    public typealias MOutput = OperationOutput<SetDesiredCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetDesiredCapacityOutputError>
}

extension SetDesiredCapacityInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SetDesiredCapacityInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), desiredCapacity: \(String(describing: desiredCapacity)), honorCooldown: \(String(describing: honorCooldown)))"}
}

extension SetDesiredCapacityInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: Key("DesiredCapacity"))
        }
        if let honorCooldown = honorCooldown {
            try container.encode(honorCooldown, forKey: Key("HonorCooldown"))
        }
        try container.encode("SetDesiredCapacity", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct SetDesiredCapacityInputHeadersMiddleware: Middleware {
    public let id: String = "SetDesiredCapacityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetDesiredCapacityInput>,
                  next: H) -> Swift.Result<OperationOutput<SetDesiredCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetDesiredCapacityInput>
    public typealias MOutput = OperationOutput<SetDesiredCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetDesiredCapacityOutputError>
}

public struct SetDesiredCapacityInputQueryItemMiddleware: Middleware {
    public let id: String = "SetDesiredCapacityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetDesiredCapacityInput>,
                  next: H) -> Swift.Result<OperationOutput<SetDesiredCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetDesiredCapacityInput>
    public typealias MOutput = OperationOutput<SetDesiredCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetDesiredCapacityOutputError>
}

public struct SetDesiredCapacityInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The desired capacity is the initial capacity of the Auto Scaling group after this operation
    ///             completes and the capacity it attempts to maintain.</p>
    public let desiredCapacity: Int?
    /// <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating
    ///             a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does
    ///             not honor the cooldown period during manual scaling activities.</p>
    public let honorCooldown: Bool?

    public init (
        autoScalingGroupName: String? = nil,
        desiredCapacity: Int? = nil,
        honorCooldown: Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.desiredCapacity = desiredCapacity
        self.honorCooldown = honorCooldown
    }
}

extension SetDesiredCapacityOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetDesiredCapacityOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetDesiredCapacityOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetDesiredCapacityOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SetDesiredCapacityOutputResponse()"}
}

extension SetDesiredCapacityOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct SetDesiredCapacityOutputResponse: Equatable {

    public init() {}
}

struct SetDesiredCapacityOutputResponseBody: Equatable {
}

extension SetDesiredCapacityOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct SetInstanceHealthInputBodyMiddleware: Middleware {
    public let id: String = "SetInstanceHealthInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetInstanceHealthInput>,
                  next: H) -> Swift.Result<OperationOutput<SetInstanceHealthOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetInstanceHealthInput>
    public typealias MOutput = OperationOutput<SetInstanceHealthOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetInstanceHealthOutputError>
}

extension SetInstanceHealthInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SetInstanceHealthInput(healthStatus: \(String(describing: healthStatus)), instanceId: \(String(describing: instanceId)), shouldRespectGracePeriod: \(String(describing: shouldRespectGracePeriod)))"}
}

extension SetInstanceHealthInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let healthStatus = healthStatus {
            try container.encode(healthStatus, forKey: Key("HealthStatus"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let shouldRespectGracePeriod = shouldRespectGracePeriod {
            try container.encode(shouldRespectGracePeriod, forKey: Key("ShouldRespectGracePeriod"))
        }
        try container.encode("SetInstanceHealth", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct SetInstanceHealthInputHeadersMiddleware: Middleware {
    public let id: String = "SetInstanceHealthInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetInstanceHealthInput>,
                  next: H) -> Swift.Result<OperationOutput<SetInstanceHealthOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetInstanceHealthInput>
    public typealias MOutput = OperationOutput<SetInstanceHealthOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetInstanceHealthOutputError>
}

public struct SetInstanceHealthInputQueryItemMiddleware: Middleware {
    public let id: String = "SetInstanceHealthInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetInstanceHealthInput>,
                  next: H) -> Swift.Result<OperationOutput<SetInstanceHealthOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetInstanceHealthInput>
    public typealias MOutput = OperationOutput<SetInstanceHealthOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetInstanceHealthOutputError>
}

public struct SetInstanceHealthInput: Equatable {
    /// <p>The health status of the instance. Set to <code>Healthy</code> to have the instance
    ///             remain in service. Set to <code>Unhealthy</code> to have the instance be out of service.
    ///             Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.</p>
    public let healthStatus: String?
    /// <p>The ID of the instance.</p>
    public let instanceId: String?
    /// <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code>
    ///             specified for the group, by default, this call respects the grace period. Set this to
    ///                 <code>False</code>, to have the call not respect the grace period associated with
    ///             the group.</p>
    ///
    ///         <p>For more information about the health check grace
    ///             period, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_CreateAutoScalingGroup.html">CreateAutoScalingGroup</a> in the <i>Amazon EC2 Auto Scaling API
    ///             Reference</i>.</p>
    public let shouldRespectGracePeriod: Bool?

    public init (
        healthStatus: String? = nil,
        instanceId: String? = nil,
        shouldRespectGracePeriod: Bool? = nil
    )
    {
        self.healthStatus = healthStatus
        self.instanceId = instanceId
        self.shouldRespectGracePeriod = shouldRespectGracePeriod
    }
}

extension SetInstanceHealthOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetInstanceHealthOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetInstanceHealthOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetInstanceHealthOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SetInstanceHealthOutputResponse()"}
}

extension SetInstanceHealthOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct SetInstanceHealthOutputResponse: Equatable {

    public init() {}
}

struct SetInstanceHealthOutputResponseBody: Equatable {
}

extension SetInstanceHealthOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct SetInstanceProtectionInputBodyMiddleware: Middleware {
    public let id: String = "SetInstanceProtectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetInstanceProtectionInput>,
                  next: H) -> Swift.Result<OperationOutput<SetInstanceProtectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetInstanceProtectionInput>
    public typealias MOutput = OperationOutput<SetInstanceProtectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetInstanceProtectionOutputError>
}

extension SetInstanceProtectionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SetInstanceProtectionInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), instanceIds: \(String(describing: instanceIds)), protectedFromScaleIn: \(String(describing: protectedFromScaleIn)))"}
}

extension SetInstanceProtectionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("InstanceIds"))
            for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let protectedFromScaleIn = protectedFromScaleIn {
            try container.encode(protectedFromScaleIn, forKey: Key("ProtectedFromScaleIn"))
        }
        try container.encode("SetInstanceProtection", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct SetInstanceProtectionInputHeadersMiddleware: Middleware {
    public let id: String = "SetInstanceProtectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetInstanceProtectionInput>,
                  next: H) -> Swift.Result<OperationOutput<SetInstanceProtectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetInstanceProtectionInput>
    public typealias MOutput = OperationOutput<SetInstanceProtectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetInstanceProtectionOutputError>
}

public struct SetInstanceProtectionInputQueryItemMiddleware: Middleware {
    public let id: String = "SetInstanceProtectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetInstanceProtectionInput>,
                  next: H) -> Swift.Result<OperationOutput<SetInstanceProtectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetInstanceProtectionInput>
    public typealias MOutput = OperationOutput<SetInstanceProtectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetInstanceProtectionOutputError>
}

public struct SetInstanceProtectionInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>One or more instance IDs. You can specify up to 50 instances.</p>
    public let instanceIds: [String]?
    /// <p>Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling
    ///             in.</p>
    public let protectedFromScaleIn: Bool?

    public init (
        autoScalingGroupName: String? = nil,
        instanceIds: [String]? = nil,
        protectedFromScaleIn: Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
        self.protectedFromScaleIn = protectedFromScaleIn
    }
}

extension SetInstanceProtectionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetInstanceProtectionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetInstanceProtectionOutputError: Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetInstanceProtectionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SetInstanceProtectionOutputResponse()"}
}

extension SetInstanceProtectionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct SetInstanceProtectionOutputResponse: Equatable {

    public init() {}
}

struct SetInstanceProtectionOutputResponseBody: Equatable {
}

extension SetInstanceProtectionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct StartInstanceRefreshInputBodyMiddleware: Middleware {
    public let id: String = "StartInstanceRefreshInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartInstanceRefreshInput>,
                  next: H) -> Swift.Result<OperationOutput<StartInstanceRefreshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartInstanceRefreshInput>
    public typealias MOutput = OperationOutput<StartInstanceRefreshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartInstanceRefreshOutputError>
}

extension StartInstanceRefreshInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartInstanceRefreshInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), preferences: \(String(describing: preferences)), strategy: \(String(describing: strategy)))"}
}

extension StartInstanceRefreshInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let preferences = preferences {
            try container.encode(preferences, forKey: Key("Preferences"))
        }
        if let strategy = strategy {
            try container.encode(strategy, forKey: Key("Strategy"))
        }
        try container.encode("StartInstanceRefresh", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct StartInstanceRefreshInputHeadersMiddleware: Middleware {
    public let id: String = "StartInstanceRefreshInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartInstanceRefreshInput>,
                  next: H) -> Swift.Result<OperationOutput<StartInstanceRefreshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartInstanceRefreshInput>
    public typealias MOutput = OperationOutput<StartInstanceRefreshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartInstanceRefreshOutputError>
}

public struct StartInstanceRefreshInputQueryItemMiddleware: Middleware {
    public let id: String = "StartInstanceRefreshInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartInstanceRefreshInput>,
                  next: H) -> Swift.Result<OperationOutput<StartInstanceRefreshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartInstanceRefreshInput>
    public typealias MOutput = OperationOutput<StartInstanceRefreshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartInstanceRefreshOutputError>
}

public struct StartInstanceRefreshInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>Set of preferences associated with the instance refresh request.</p>
    ///         <p>If not provided, the default values are used. For <code>MinHealthyPercentage</code>,
    ///             the default value is <code>90</code>. For <code>InstanceWarmup</code>, the default is to
    ///             use the value specified for the health check grace period for the Auto Scaling group.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_RefreshPreferences.html">RefreshPreferences</a> in the <i>Amazon EC2 Auto Scaling API
    ///             Reference</i>.</p>
    public let preferences: RefreshPreferences?
    /// <p>The strategy to use for the instance refresh. The only valid value is
    ///                 <code>Rolling</code>.</p>
    ///         <p>A rolling update is an update that is applied to all instances in an Auto Scaling group until
    ///             all instances have been updated. A rolling update can fail due to failed health checks
    ///             or if instances are on standby or are protected from scale in. If the rolling update
    ///             process fails, any instances that were already replaced are not rolled back to their
    ///             previous configuration. </p>
    public let strategy: RefreshStrategy?

    public init (
        autoScalingGroupName: String? = nil,
        preferences: RefreshPreferences? = nil,
        strategy: RefreshStrategy? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.preferences = preferences
        self.strategy = strategy
    }
}

extension StartInstanceRefreshOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension StartInstanceRefreshOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InstanceRefreshInProgress" : self = .instanceRefreshInProgressFault(try InstanceRefreshInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartInstanceRefreshOutputError: Equatable {
    case instanceRefreshInProgressFault(InstanceRefreshInProgressFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartInstanceRefreshOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartInstanceRefreshOutputResponse(instanceRefreshId: \(String(describing: instanceRefreshId)))"}
}

extension StartInstanceRefreshOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StartInstanceRefreshOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.instanceRefreshId = output.instanceRefreshId
        } else {
            self.instanceRefreshId = nil
        }
    }
}

public struct StartInstanceRefreshOutputResponse: Equatable {
    /// <p>A unique ID for tracking the progress of the request.</p>
    public let instanceRefreshId: String?

    public init (
        instanceRefreshId: String? = nil
    )
    {
        self.instanceRefreshId = instanceRefreshId
    }
}

struct StartInstanceRefreshOutputResponseBody: Equatable {
    public let instanceRefreshId: String?
}

extension StartInstanceRefreshOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceRefreshId = "InstanceRefreshId"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("StartInstanceRefreshResult"))
        let instanceRefreshIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceRefreshId)
        instanceRefreshId = instanceRefreshIdDecoded
    }
}

extension StepAdjustment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case metricIntervalLowerBound = "MetricIntervalLowerBound"
        case metricIntervalUpperBound = "MetricIntervalUpperBound"
        case scalingAdjustment = "ScalingAdjustment"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let metricIntervalLowerBound = metricIntervalLowerBound {
            try container.encode(metricIntervalLowerBound, forKey: Key("MetricIntervalLowerBound"))
        }
        if let metricIntervalUpperBound = metricIntervalUpperBound {
            try container.encode(metricIntervalUpperBound, forKey: Key("MetricIntervalUpperBound"))
        }
        if let scalingAdjustment = scalingAdjustment {
            try container.encode(scalingAdjustment, forKey: Key("ScalingAdjustment"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricIntervalLowerBoundDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .metricIntervalLowerBound)
        metricIntervalLowerBound = metricIntervalLowerBoundDecoded
        let metricIntervalUpperBoundDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .metricIntervalUpperBound)
        metricIntervalUpperBound = metricIntervalUpperBoundDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
    }
}

extension StepAdjustment: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StepAdjustment(metricIntervalLowerBound: \(String(describing: metricIntervalLowerBound)), metricIntervalUpperBound: \(String(describing: metricIntervalUpperBound)), scalingAdjustment: \(String(describing: scalingAdjustment)))"}
}

/// <p>Describes information used to create a step adjustment for a step scaling
///             policy.</p>
///         <p>For the following examples, suppose that you have an alarm with a breach threshold of
///             50:</p>
///         <ul>
///             <li>
///                 <p>To trigger the adjustment when the metric is greater than or equal to 50 and
///                     less than 60, specify a lower bound of 0 and an upper bound of 10.</p>
///             </li>
///             <li>
///                 <p>To trigger the adjustment when the metric is greater than 40 and less than or
///                     equal to 50, specify a lower bound of -10 and an upper bound of 0.</p>
///             </li>
///          </ul>
///         <p>There are a few rules for the step adjustments for your step policy:</p>
///         <ul>
///             <li>
///                 <p>The ranges of your step adjustments can't overlap or have a gap.</p>
///             </li>
///             <li>
///                 <p>At most, one step adjustment can have a null lower bound. If one step
///                     adjustment has a negative lower bound, then there must be a step adjustment with
///                     a null lower bound.</p>
///             </li>
///             <li>
///                 <p>At most, one step adjustment can have a null upper bound. If one step
///                     adjustment has a positive upper bound, then there must be a step adjustment with
///                     a null upper bound.</p>
///             </li>
///             <li>
///                 <p>The upper and lower bound can't be null in the same step adjustment.</p>
///             </li>
///          </ul>
///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-steps">Step
///                 adjustments</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
public struct StepAdjustment: Equatable {
    /// <p>The lower bound for the difference between the alarm threshold and the CloudWatch metric. If
    ///             the metric value is above the breach threshold, the lower bound is inclusive (the metric
    ///             must be greater than or equal to the threshold plus the lower bound). Otherwise, it is
    ///             exclusive (the metric must be greater than the threshold plus the lower bound). A null
    ///             value indicates negative infinity.</p>
    public let metricIntervalLowerBound: Double?
    /// <p>The upper bound for the difference between the alarm threshold and the CloudWatch metric. If
    ///             the metric value is above the breach threshold, the upper bound is exclusive (the metric
    ///             must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the
    ///             metric must be less than or equal to the threshold plus the upper bound). A null value
    ///             indicates positive infinity.</p>
    ///         <p>The upper bound must be greater than the lower bound.</p>
    public let metricIntervalUpperBound: Double?
    /// <p>The amount by which to scale, based on the specified adjustment type. A positive value
    ///             adds to the current capacity while a negative number removes from the current
    ///             capacity.</p>
    public let scalingAdjustment: Int?

    public init (
        metricIntervalLowerBound: Double? = nil,
        metricIntervalUpperBound: Double? = nil,
        scalingAdjustment: Int? = nil
    )
    {
        self.metricIntervalLowerBound = metricIntervalLowerBound
        self.metricIntervalUpperBound = metricIntervalUpperBound
        self.scalingAdjustment = scalingAdjustment
    }
}

public struct SuspendProcessesInputBodyMiddleware: Middleware {
    public let id: String = "SuspendProcessesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SuspendProcessesInput>,
                  next: H) -> Swift.Result<OperationOutput<SuspendProcessesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SuspendProcessesInput>
    public typealias MOutput = OperationOutput<SuspendProcessesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SuspendProcessesOutputError>
}

extension SuspendProcessesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SuspendProcessesInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), scalingProcesses: \(String(describing: scalingProcesses)))"}
}

extension SuspendProcessesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let scalingProcesses = scalingProcesses {
            var scalingProcessesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ScalingProcesses"))
            for (index0, xmlstringmaxlen2550) in scalingProcesses.enumerated() {
                try scalingProcessesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("SuspendProcesses", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct SuspendProcessesInputHeadersMiddleware: Middleware {
    public let id: String = "SuspendProcessesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SuspendProcessesInput>,
                  next: H) -> Swift.Result<OperationOutput<SuspendProcessesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SuspendProcessesInput>
    public typealias MOutput = OperationOutput<SuspendProcessesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SuspendProcessesOutputError>
}

public struct SuspendProcessesInputQueryItemMiddleware: Middleware {
    public let id: String = "SuspendProcessesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SuspendProcessesInput>,
                  next: H) -> Swift.Result<OperationOutput<SuspendProcessesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SuspendProcessesInput>
    public typealias MOutput = OperationOutput<SuspendProcessesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SuspendProcessesOutputError>
}

public struct SuspendProcessesInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>One or more of the following processes:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>Launch</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>Terminate</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>AddToLoadBalancer</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>AlarmNotification</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>AZRebalance</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>HealthCheck</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>InstanceRefresh</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ReplaceUnhealthy</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ScheduledActions</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <p>If you omit this parameter, all processes are specified.</p>
    public let scalingProcesses: [String]?

    public init (
        autoScalingGroupName: String? = nil,
        scalingProcesses: [String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scalingProcesses = scalingProcesses
    }
}

extension SuspendProcessesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SuspendProcessesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SuspendProcessesOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SuspendProcessesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SuspendProcessesOutputResponse()"}
}

extension SuspendProcessesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct SuspendProcessesOutputResponse: Equatable {

    public init() {}
}

struct SuspendProcessesOutputResponseBody: Equatable {
}

extension SuspendProcessesOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension SuspendedProcess: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case processName = "ProcessName"
        case suspensionReason = "SuspensionReason"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let processName = processName {
            try container.encode(processName, forKey: Key("ProcessName"))
        }
        if let suspensionReason = suspensionReason {
            try container.encode(suspensionReason, forKey: Key("SuspensionReason"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .processName)
        processName = processNameDecoded
        let suspensionReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .suspensionReason)
        suspensionReason = suspensionReasonDecoded
    }
}

extension SuspendedProcess: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SuspendedProcess(processName: \(String(describing: processName)), suspensionReason: \(String(describing: suspensionReason)))"}
}

/// <p>Describes an auto scaling process that has been suspended.</p>
///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#process-types">Scaling processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
public struct SuspendedProcess: Equatable {
    /// <p>The name of the suspended process.</p>
    public let processName: String?
    /// <p>The reason that the process was suspended.</p>
    public let suspensionReason: String?

    public init (
        processName: String? = nil,
        suspensionReason: String? = nil
    )
    {
        self.processName = processName
        self.suspensionReason = suspensionReason
    }
}

extension Tag: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
        case propagateAtLaunch = "PropagateAtLaunch"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let key = key {
            try container.encode(key, forKey: Key("Key"))
        }
        if let propagateAtLaunch = propagateAtLaunch {
            try container.encode(propagateAtLaunch, forKey: Key("PropagateAtLaunch"))
        }
        if let resourceId = resourceId {
            try container.encode(resourceId, forKey: Key("ResourceId"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: Key("ResourceType"))
        }
        if let value = value {
            try container.encode(value, forKey: Key("Value"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let propagateAtLaunchDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .propagateAtLaunch)
        propagateAtLaunch = propagateAtLaunchDecoded
    }
}

extension Tag: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Tag(key: \(String(describing: key)), propagateAtLaunch: \(String(describing: propagateAtLaunch)), resourceId: \(String(describing: resourceId)), resourceType: \(String(describing: resourceType)), value: \(String(describing: value)))"}
}

/// <p>Describes a tag for an Auto Scaling group.</p>
public struct Tag: Equatable {
    /// <p>The tag key.</p>
    public let key: String?
    /// <p>Determines whether the tag is added to new instances as they are launched in the
    ///             group.</p>
    public let propagateAtLaunch: Bool?
    /// <p>The name of the Auto Scaling group.</p>
    public let resourceId: String?
    /// <p>The type of resource. The only supported value is
    ///             <code>auto-scaling-group</code>.</p>
    public let resourceType: String?
    /// <p>The tag value.</p>
    public let value: String?

    public init (
        key: String? = nil,
        propagateAtLaunch: Bool? = nil,
        resourceId: String? = nil,
        resourceType: String? = nil,
        value: String? = nil
    )
    {
        self.key = key
        self.propagateAtLaunch = propagateAtLaunch
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.value = value
    }
}

extension TagDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
        case propagateAtLaunch = "PropagateAtLaunch"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let key = key {
            try container.encode(key, forKey: Key("Key"))
        }
        if let propagateAtLaunch = propagateAtLaunch {
            try container.encode(propagateAtLaunch, forKey: Key("PropagateAtLaunch"))
        }
        if let resourceId = resourceId {
            try container.encode(resourceId, forKey: Key("ResourceId"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: Key("ResourceType"))
        }
        if let value = value {
            try container.encode(value, forKey: Key("Value"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let propagateAtLaunchDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .propagateAtLaunch)
        propagateAtLaunch = propagateAtLaunchDecoded
    }
}

extension TagDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagDescription(key: \(String(describing: key)), propagateAtLaunch: \(String(describing: propagateAtLaunch)), resourceId: \(String(describing: resourceId)), resourceType: \(String(describing: resourceType)), value: \(String(describing: value)))"}
}

/// <p>Describes a tag for an Auto Scaling group.</p>
public struct TagDescription: Equatable {
    /// <p>The tag key.</p>
    public let key: String?
    /// <p>Determines whether the tag is added to new instances as they are launched in the
    ///             group.</p>
    public let propagateAtLaunch: Bool?
    /// <p>The name of the group.</p>
    public let resourceId: String?
    /// <p>The type of resource. The only supported value is
    ///             <code>auto-scaling-group</code>.</p>
    public let resourceType: String?
    /// <p>The tag value.</p>
    public let value: String?

    public init (
        key: String? = nil,
        propagateAtLaunch: Bool? = nil,
        resourceId: String? = nil,
        resourceType: String? = nil,
        value: String? = nil
    )
    {
        self.key = key
        self.propagateAtLaunch = propagateAtLaunch
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.value = value
    }
}

extension TargetTrackingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customizedMetricSpecification = "CustomizedMetricSpecification"
        case disableScaleIn = "DisableScaleIn"
        case predefinedMetricSpecification = "PredefinedMetricSpecification"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let customizedMetricSpecification = customizedMetricSpecification {
            try container.encode(customizedMetricSpecification, forKey: Key("CustomizedMetricSpecification"))
        }
        if let disableScaleIn = disableScaleIn {
            try container.encode(disableScaleIn, forKey: Key("DisableScaleIn"))
        }
        if let predefinedMetricSpecification = predefinedMetricSpecification {
            try container.encode(predefinedMetricSpecification, forKey: Key("PredefinedMetricSpecification"))
        }
        if let targetValue = targetValue {
            try container.encode(targetValue, forKey: Key("TargetValue"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricSpecificationDecoded = try containerValues.decodeIfPresent(PredefinedMetricSpecification.self, forKey: .predefinedMetricSpecification)
        predefinedMetricSpecification = predefinedMetricSpecificationDecoded
        let customizedMetricSpecificationDecoded = try containerValues.decodeIfPresent(CustomizedMetricSpecification.self, forKey: .customizedMetricSpecification)
        customizedMetricSpecification = customizedMetricSpecificationDecoded
        let targetValueDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
        let disableScaleInDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .disableScaleIn)
        disableScaleIn = disableScaleInDecoded
    }
}

extension TargetTrackingConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TargetTrackingConfiguration(customizedMetricSpecification: \(String(describing: customizedMetricSpecification)), disableScaleIn: \(String(describing: disableScaleIn)), predefinedMetricSpecification: \(String(describing: predefinedMetricSpecification)), targetValue: \(String(describing: targetValue)))"}
}

/// <p>Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.</p>
public struct TargetTrackingConfiguration: Equatable {
    /// <p>A customized metric. You must specify either a predefined metric or a customized
    ///             metric.</p>
    public let customizedMetricSpecification: CustomizedMetricSpecification?
    /// <p>Indicates whether scaling in by the target tracking scaling policy is disabled. If
    ///             scaling in is disabled, the target tracking scaling policy doesn't remove instances from
    ///             the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from
    ///             the Auto Scaling group. The default is <code>false</code>.</p>
    public let disableScaleIn: Bool?
    /// <p>A predefined metric. You must specify either a predefined metric or a customized
    ///             metric.</p>
    public let predefinedMetricSpecification: PredefinedMetricSpecification?
    /// <p>The target value for the metric.</p>
    public let targetValue: Double?

    public init (
        customizedMetricSpecification: CustomizedMetricSpecification? = nil,
        disableScaleIn: Bool? = nil,
        predefinedMetricSpecification: PredefinedMetricSpecification? = nil,
        targetValue: Double? = nil
    )
    {
        self.customizedMetricSpecification = customizedMetricSpecification
        self.disableScaleIn = disableScaleIn
        self.predefinedMetricSpecification = predefinedMetricSpecification
        self.targetValue = targetValue
    }
}

public struct TerminateInstanceInAutoScalingGroupInputBodyMiddleware: Middleware {
    public let id: String = "TerminateInstanceInAutoScalingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TerminateInstanceInAutoScalingGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<TerminateInstanceInAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TerminateInstanceInAutoScalingGroupInput>
    public typealias MOutput = OperationOutput<TerminateInstanceInAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TerminateInstanceInAutoScalingGroupOutputError>
}

extension TerminateInstanceInAutoScalingGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TerminateInstanceInAutoScalingGroupInput(instanceId: \(String(describing: instanceId)), shouldDecrementDesiredCapacity: \(String(describing: shouldDecrementDesiredCapacity)))"}
}

extension TerminateInstanceInAutoScalingGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity {
            try container.encode(shouldDecrementDesiredCapacity, forKey: Key("ShouldDecrementDesiredCapacity"))
        }
        try container.encode("TerminateInstanceInAutoScalingGroup", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct TerminateInstanceInAutoScalingGroupInputHeadersMiddleware: Middleware {
    public let id: String = "TerminateInstanceInAutoScalingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TerminateInstanceInAutoScalingGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<TerminateInstanceInAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TerminateInstanceInAutoScalingGroupInput>
    public typealias MOutput = OperationOutput<TerminateInstanceInAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TerminateInstanceInAutoScalingGroupOutputError>
}

public struct TerminateInstanceInAutoScalingGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "TerminateInstanceInAutoScalingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TerminateInstanceInAutoScalingGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<TerminateInstanceInAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TerminateInstanceInAutoScalingGroupInput>
    public typealias MOutput = OperationOutput<TerminateInstanceInAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TerminateInstanceInAutoScalingGroupOutputError>
}

public struct TerminateInstanceInAutoScalingGroupInput: Equatable {
    /// <p>The ID of the instance.</p>
    public let instanceId: String?
    /// <p>Indicates whether terminating the instance also decrements the size of the Auto Scaling
    ///             group.</p>
    public let shouldDecrementDesiredCapacity: Bool?

    public init (
        instanceId: String? = nil,
        shouldDecrementDesiredCapacity: Bool? = nil
    )
    {
        self.instanceId = instanceId
        self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
    }
}

extension TerminateInstanceInAutoScalingGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TerminateInstanceInAutoScalingGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TerminateInstanceInAutoScalingGroupOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension TerminateInstanceInAutoScalingGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TerminateInstanceInAutoScalingGroupOutputResponse(activity: \(String(describing: activity)))"}
}

extension TerminateInstanceInAutoScalingGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TerminateInstanceInAutoScalingGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.activity = output.activity
        } else {
            self.activity = nil
        }
    }
}

public struct TerminateInstanceInAutoScalingGroupOutputResponse: Equatable {
    /// <p>A scaling activity.</p>
    public let activity: Activity?

    public init (
        activity: Activity? = nil
    )
    {
        self.activity = activity
    }
}

struct TerminateInstanceInAutoScalingGroupOutputResponseBody: Equatable {
    public let activity: Activity?
}

extension TerminateInstanceInAutoScalingGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activity = "Activity"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("TerminateInstanceInAutoScalingGroupResult"))
        let activityDecoded = try containerValues.decodeIfPresent(Activity.self, forKey: .activity)
        activity = activityDecoded
    }
}

public struct UpdateAutoScalingGroupInputBodyMiddleware: Middleware {
    public let id: String = "UpdateAutoScalingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateAutoScalingGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateAutoScalingGroupInput>
    public typealias MOutput = OperationOutput<UpdateAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateAutoScalingGroupOutputError>
}

extension UpdateAutoScalingGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateAutoScalingGroupInput(autoScalingGroupName: \(String(describing: autoScalingGroupName)), availabilityZones: \(String(describing: availabilityZones)), capacityRebalance: \(String(describing: capacityRebalance)), defaultCooldown: \(String(describing: defaultCooldown)), desiredCapacity: \(String(describing: desiredCapacity)), healthCheckGracePeriod: \(String(describing: healthCheckGracePeriod)), healthCheckType: \(String(describing: healthCheckType)), launchConfigurationName: \(String(describing: launchConfigurationName)), launchTemplate: \(String(describing: launchTemplate)), maxInstanceLifetime: \(String(describing: maxInstanceLifetime)), maxSize: \(String(describing: maxSize)), minSize: \(String(describing: minSize)), mixedInstancesPolicy: \(String(describing: mixedInstancesPolicy)), newInstancesProtectedFromScaleIn: \(String(describing: newInstancesProtectedFromScaleIn)), placementGroup: \(String(describing: placementGroup)), serviceLinkedRoleARN: \(String(describing: serviceLinkedRoleARN)), terminationPolicies: \(String(describing: terminationPolicies)), vPCZoneIdentifier: \(String(describing: vPCZoneIdentifier)))"}
}

extension UpdateAutoScalingGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AvailabilityZones"))
            for (index0, xmlstringmaxlen2550) in availabilityZones.enumerated() {
                try availabilityZonesContainer.encode(xmlstringmaxlen2550, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let capacityRebalance = capacityRebalance {
            try container.encode(capacityRebalance, forKey: Key("CapacityRebalance"))
        }
        if let defaultCooldown = defaultCooldown {
            try container.encode(defaultCooldown, forKey: Key("DefaultCooldown"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: Key("DesiredCapacity"))
        }
        if let healthCheckGracePeriod = healthCheckGracePeriod {
            try container.encode(healthCheckGracePeriod, forKey: Key("HealthCheckGracePeriod"))
        }
        if let healthCheckType = healthCheckType {
            try container.encode(healthCheckType, forKey: Key("HealthCheckType"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: Key("LaunchTemplate"))
        }
        if let maxInstanceLifetime = maxInstanceLifetime {
            try container.encode(maxInstanceLifetime, forKey: Key("MaxInstanceLifetime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: Key("MinSize"))
        }
        if let mixedInstancesPolicy = mixedInstancesPolicy {
            try container.encode(mixedInstancesPolicy, forKey: Key("MixedInstancesPolicy"))
        }
        if let newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn {
            try container.encode(newInstancesProtectedFromScaleIn, forKey: Key("NewInstancesProtectedFromScaleIn"))
        }
        if let placementGroup = placementGroup {
            try container.encode(placementGroup, forKey: Key("PlacementGroup"))
        }
        if let serviceLinkedRoleARN = serviceLinkedRoleARN {
            try container.encode(serviceLinkedRoleARN, forKey: Key("ServiceLinkedRoleARN"))
        }
        if let terminationPolicies = terminationPolicies {
            var terminationPoliciesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("TerminationPolicies"))
            for (index0, xmlstringmaxlen16000) in terminationPolicies.enumerated() {
                try terminationPoliciesContainer.encode(xmlstringmaxlen16000, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let vPCZoneIdentifier = vPCZoneIdentifier {
            try container.encode(vPCZoneIdentifier, forKey: Key("VPCZoneIdentifier"))
        }
        try container.encode("UpdateAutoScalingGroup", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}

public struct UpdateAutoScalingGroupInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateAutoScalingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateAutoScalingGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateAutoScalingGroupInput>
    public typealias MOutput = OperationOutput<UpdateAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateAutoScalingGroupOutputError>
}

public struct UpdateAutoScalingGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateAutoScalingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateAutoScalingGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateAutoScalingGroupInput>
    public typealias MOutput = OperationOutput<UpdateAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateAutoScalingGroupOutputError>
}

public struct UpdateAutoScalingGroupInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>One or more Availability Zones for the group.</p>
    public let availabilityZones: [String]?
    /// <p>Enables or disables Capacity Rebalancing. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/capacity-rebalance.html">Amazon EC2 Auto Scaling Capacity Rebalancing</a> in the
    ///             <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let capacityRebalance: Bool?
    /// <p>The amount of time, in seconds, after a scaling activity completes before another
    ///             scaling activity can start. The default value is <code>300</code>. This setting applies
    ///             when using simple scaling policies, but not when using other scaling policies or
    ///             scheduled scaling. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling</a>
    ///             in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let defaultCooldown: Int?
    /// <p>The desired capacity is the initial capacity of the Auto Scaling group after this operation
    ///             completes and the capacity it attempts to maintain. This number must be greater than or
    ///             equal to the minimum size of the group and less than or equal to the maximum size of the
    ///             group.</p>
    public let desiredCapacity: Int?
    /// <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status
    ///             of an EC2 instance that has come into service. The default value is <code>0</code>. For
    ///             more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health
    ///                 check grace period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    ///         <p>Conditional: Required if you are adding an <code>ELB</code> health check.</p>
    public let healthCheckGracePeriod: Int?
    /// <p>The service to use for the health checks. The valid values are <code>EC2</code> and
    ///                 <code>ELB</code>. If you configure an Auto Scaling group to use <code>ELB</code> health
    ///             checks, it considers the instance unhealthy if it fails either the EC2 status checks or
    ///             the load balancer health checks.</p>
    public let healthCheckType: String?
    /// <p>The name of the launch configuration. If you specify
    ///                 <code>LaunchConfigurationName</code> in your update request, you can't specify
    ///                 <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p>
    public let launchConfigurationName: String?
    /// <p>The launch template and version to use to specify the updates. If you specify
    ///                 <code>LaunchTemplate</code> in your update request, you can't specify
    ///                 <code>LaunchConfigurationName</code> or <code>MixedInstancesPolicy</code>.</p>
    public let launchTemplate: LaunchTemplateSpecification?
    /// <p>The maximum amount of time, in seconds, that an instance can be in service. The
    ///             default is null. If specified, the value must be either 0 or a number equal to or
    ///             greater than 86,400 seconds (1 day). To clear a previously set value, specify a new
    ///             value of 0. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling
    ///                 instances based on maximum instance lifetime</a> in the
    ///                 <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let maxInstanceLifetime: Int?
    /// <p>The maximum size of the Auto Scaling group.</p>
    ///         <note>
    ///             <p>With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to
    ///                 go above <code>MaxSize</code> to meet your capacity requirements. In this event,
    ///                 Amazon EC2 Auto Scaling will never go above <code>MaxSize</code> by more than your largest instance
    ///                 weight (weights that define how many units each instance contributes to the desired
    ///                 capacity of the group).</p>
    ///         </note>
    public let maxSize: Int?
    /// <p>The minimum size of the Auto Scaling group.</p>
    public let minSize: Int?
    /// <p>An embedded object that specifies a mixed instances policy. When you make changes to
    ///             an existing policy, all optional properties are left unchanged if not specified. For
    ///             more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling groups with multiple
    ///                 instance types and purchase options</a> in the <i>Amazon EC2 Auto Scaling User
    ///                 Guide</i>.</p>
    public let mixedInstancesPolicy: MixedInstancesPolicy?
    /// <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling
    ///             when scaling in. For more information about preventing instances from terminating on
    ///             scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance scale-in protection</a> in the
    ///             <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let newInstancesProtectedFromScaleIn: Bool?
    /// <p>The name of an existing placement group into which to launch your instances, if any. A
    ///             placement group is a logical grouping of instances within a single Availability Zone.
    ///             You cannot specify multiple Availability Zones and a placement group. For more
    ///             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the
    ///                 <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    public let placementGroup: String?
    /// <p>The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to
    ///             call other Amazon Web Services on your behalf. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-linked
    ///                 roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let serviceLinkedRoleARN: String?
    /// <p>A policy or a list of policies that are used to select the instances to terminate. The
    ///             policies are executed in the order that you list them. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling which Auto Scaling instances terminate during scale in</a> in the
    ///                 <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let terminationPolicies: [String]?
    /// <p>A comma-separated list of subnet IDs for a virtual private cloud (VPC). If you specify
    ///                 <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that
    ///             you specify for this parameter must reside in those Availability Zones.</p>
    public let vPCZoneIdentifier: String?

    public init (
        autoScalingGroupName: String? = nil,
        availabilityZones: [String]? = nil,
        capacityRebalance: Bool? = nil,
        defaultCooldown: Int? = nil,
        desiredCapacity: Int? = nil,
        healthCheckGracePeriod: Int? = nil,
        healthCheckType: String? = nil,
        launchConfigurationName: String? = nil,
        launchTemplate: LaunchTemplateSpecification? = nil,
        maxInstanceLifetime: Int? = nil,
        maxSize: Int? = nil,
        minSize: Int? = nil,
        mixedInstancesPolicy: MixedInstancesPolicy? = nil,
        newInstancesProtectedFromScaleIn: Bool? = nil,
        placementGroup: String? = nil,
        serviceLinkedRoleARN: String? = nil,
        terminationPolicies: [String]? = nil,
        vPCZoneIdentifier: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.availabilityZones = availabilityZones
        self.capacityRebalance = capacityRebalance
        self.defaultCooldown = defaultCooldown
        self.desiredCapacity = desiredCapacity
        self.healthCheckGracePeriod = healthCheckGracePeriod
        self.healthCheckType = healthCheckType
        self.launchConfigurationName = launchConfigurationName
        self.launchTemplate = launchTemplate
        self.maxInstanceLifetime = maxInstanceLifetime
        self.maxSize = maxSize
        self.minSize = minSize
        self.mixedInstancesPolicy = mixedInstancesPolicy
        self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
        self.placementGroup = placementGroup
        self.serviceLinkedRoleARN = serviceLinkedRoleARN
        self.terminationPolicies = terminationPolicies
        self.vPCZoneIdentifier = vPCZoneIdentifier
    }
}

extension UpdateAutoScalingGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateAutoScalingGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateAutoScalingGroupOutputError: Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAutoScalingGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateAutoScalingGroupOutputResponse()"}
}

extension UpdateAutoScalingGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAutoScalingGroupOutputResponse: Equatable {

    public init() {}
}

struct UpdateAutoScalingGroupOutputResponseBody: Equatable {
}

extension UpdateAutoScalingGroupOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension WarmPoolConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxGroupPreparedCapacity = "MaxGroupPreparedCapacity"
        case minSize = "MinSize"
        case poolState = "PoolState"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let maxGroupPreparedCapacity = maxGroupPreparedCapacity {
            try container.encode(maxGroupPreparedCapacity, forKey: Key("MaxGroupPreparedCapacity"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: Key("MinSize"))
        }
        if let poolState = poolState {
            try container.encode(poolState, forKey: Key("PoolState"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxGroupPreparedCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxGroupPreparedCapacity)
        maxGroupPreparedCapacity = maxGroupPreparedCapacityDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let poolStateDecoded = try containerValues.decodeIfPresent(WarmPoolState.self, forKey: .poolState)
        poolState = poolStateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(WarmPoolStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension WarmPoolConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WarmPoolConfiguration(maxGroupPreparedCapacity: \(String(describing: maxGroupPreparedCapacity)), minSize: \(String(describing: minSize)), poolState: \(String(describing: poolState)), status: \(String(describing: status)))"}
}

/// <p>Describes a warm pool configuration. </p>
public struct WarmPoolConfiguration: Equatable {
    /// <p>The maximum number of instances that are allowed to be in the warm pool or in any
    ///             state except <code>Terminated</code> for the Auto Scaling group.</p>
    public let maxGroupPreparedCapacity: Int?
    /// <p>The minimum number of instances to maintain in the warm pool.</p>
    public let minSize: Int?
    /// <p>The instance state to transition to after the lifecycle actions are complete.</p>
    public let poolState: WarmPoolState?
    /// <p>The status of a warm pool that is marked for deletion.</p>
    public let status: WarmPoolStatus?

    public init (
        maxGroupPreparedCapacity: Int? = nil,
        minSize: Int? = nil,
        poolState: WarmPoolState? = nil,
        status: WarmPoolStatus? = nil
    )
    {
        self.maxGroupPreparedCapacity = maxGroupPreparedCapacity
        self.minSize = minSize
        self.poolState = poolState
        self.status = status
    }
}

public enum WarmPoolState {
    case running
    case stopped
    case sdkUnknown(String)
}

extension WarmPoolState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [WarmPoolState] {
        return [
            .running,
            .stopped,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .running: return "Running"
        case .stopped: return "Stopped"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = WarmPoolState(rawValue: rawValue) ?? WarmPoolState.sdkUnknown(rawValue)
    }
}

public enum WarmPoolStatus {
    case pendingdelete
    case sdkUnknown(String)
}

extension WarmPoolStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [WarmPoolStatus] {
        return [
            .pendingdelete,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .pendingdelete: return "PendingDelete"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = WarmPoolStatus(rawValue: rawValue) ?? WarmPoolStatus.sdkUnknown(rawValue)
    }
}
