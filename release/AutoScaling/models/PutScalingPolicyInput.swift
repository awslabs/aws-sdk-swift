// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct PutScalingPolicyInput: Equatable {
    /// <p>Specifies how the scaling adjustment is interpreted (for example, an absolute number
    ///             or a percentage). The valid values are <code>ChangeInCapacity</code>,
    ///                 <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p>
    ///         <p>Required if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>.
    ///             For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let adjustmentType: String?
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The duration of the policy's cooldown period, in seconds. When a cooldown period is
    ///             specified here, it overrides the default cooldown period defined for the Auto Scaling
    ///             group.</p>
    ///         <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see
    ///                 <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling
    ///                 cooldowns for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let cooldown: Int?
    /// <p>Indicates whether the scaling policy is enabled or disabled. The default is enabled.
    ///             For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html">Disabling a
    ///                 scaling policy for an Auto Scaling group</a> in the
    ///             <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let enabled: Bool?
    /// <p>The estimated time, in seconds, until a newly launched instance can contribute to the
    ///             CloudWatch metrics. If not provided, the default is to use the value from the default cooldown
    ///             period for the Auto Scaling group.</p>
    ///         <p>Valid only if the policy type is <code>TargetTrackingScaling</code> or
    ///                 <code>StepScaling</code>.</p>
    public let estimatedInstanceWarmup: Int?
    /// <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>,
    ///                 <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the
    ///             value is treated as <code>Average</code>.</p>
    ///         <p>Valid only if the policy type is <code>StepScaling</code>.</p>
    public let metricAggregationType: String?
    /// <p>The minimum value to scale by when the adjustment type is
    ///                 <code>PercentChangeInCapacity</code>. For example, suppose that you create a step
    ///             scaling policy to scale out an Auto Scaling group by 25 percent and you specify a
    ///                 <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the
    ///             scaling policy is performed, 25 percent of 4 is 1. However, because you specified a
    ///                 <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2
    ///             instances.</p>
    ///         <p>Valid only if the policy type is <code>StepScaling</code> or
    ///                 <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User
    ///             Guide</i>.</p>
    ///         <note>
    ///             <p>Some Auto Scaling groups use instance weights. In this case, set the
    ///                     <code>MinAdjustmentMagnitude</code> to a value that is at least as large as your
    ///                 largest instance weight.</p>
    ///         </note>
    public let minAdjustmentMagnitude: Int?
    /// <p>Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code>
    ///             instead.</p>
    @available(*, deprecated)
    public let minAdjustmentStep: Int?
    /// <p>The name of the policy.</p>
    public let policyName: String?
    /// <p>One of the following policy types: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>TargetTrackingScaling</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>StepScaling</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>SimpleScaling</code> (default)</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>PredictiveScaling</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    public let policyType: String?
    /// <p>A predictive scaling policy. Provides support for only predefined metrics.</p>
    ///         <p>Predictive scaling works with CPU utilization, network in/out, and the Application
    ///             Load Balancer request count.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredictiveScalingConfiguration.html">PredictiveScalingConfiguration</a> in the <i>Amazon EC2 Auto Scaling API
    ///                 Reference</i>.</p>
    ///         <p>Required if the policy type is <code>PredictiveScaling</code>.</p>
    public let predictiveScalingConfiguration: PredictiveScalingConfiguration?
    /// <p>The amount by which to scale, based on the specified adjustment type. A positive value
    ///             adds to the current capacity while a negative number removes from the current capacity.
    ///             For exact capacity, you must specify a positive value.</p>
    ///         <p>Required if the policy type is <code>SimpleScaling</code>. (Not used with any other
    ///             policy type.) </p>
    public let scalingAdjustment: Int?
    /// <p>A set of adjustments that enable you to scale based on the size of the alarm
    ///             breach.</p>
    ///         <p>Required if the policy type is <code>StepScaling</code>. (Not used with any other
    ///             policy type.) </p>
    public let stepAdjustments: [StepAdjustment]?
    /// <p>A target tracking scaling policy. Provides support for predefined or customized
    ///             metrics.</p>
    ///         <p>The following predefined metrics are available:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>ASGAverageCPUUtilization</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ASGAverageNetworkIn</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ASGAverageNetworkOut</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ALBRequestCountPerTarget</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <p>If you specify <code>ALBRequestCountPerTarget</code> for the metric, you must specify
    ///             the <code>ResourceLabel</code> parameter with the
    ///                 <code>PredefinedMetricSpecification</code>.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_TargetTrackingConfiguration.html">TargetTrackingConfiguration</a> in the <i>Amazon EC2 Auto Scaling API
    ///                 Reference</i>.</p>
    ///         <p>Required if the policy type is <code>TargetTrackingScaling</code>.</p>
    public let targetTrackingConfiguration: TargetTrackingConfiguration?

    public init (
        adjustmentType: String? = nil,
        autoScalingGroupName: String? = nil,
        cooldown: Int? = nil,
        enabled: Bool? = nil,
        estimatedInstanceWarmup: Int? = nil,
        metricAggregationType: String? = nil,
        minAdjustmentMagnitude: Int? = nil,
        minAdjustmentStep: Int? = nil,
        policyName: String? = nil,
        policyType: String? = nil,
        predictiveScalingConfiguration: PredictiveScalingConfiguration? = nil,
        scalingAdjustment: Int? = nil,
        stepAdjustments: [StepAdjustment]? = nil,
        targetTrackingConfiguration: TargetTrackingConfiguration? = nil
    )
    {
        self.adjustmentType = adjustmentType
        self.autoScalingGroupName = autoScalingGroupName
        self.cooldown = cooldown
        self.enabled = enabled
        self.estimatedInstanceWarmup = estimatedInstanceWarmup
        self.metricAggregationType = metricAggregationType
        self.minAdjustmentMagnitude = minAdjustmentMagnitude
        self.minAdjustmentStep = minAdjustmentStep
        self.policyName = policyName
        self.policyType = policyType
        self.predictiveScalingConfiguration = predictiveScalingConfiguration
        self.scalingAdjustment = scalingAdjustment
        self.stepAdjustments = stepAdjustments
        self.targetTrackingConfiguration = targetTrackingConfiguration
    }
}
