// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes a lifecycle hook, which tells Amazon EC2 Auto Scaling that you want to perform an action
///             whenever it launches instances or terminates
///             instances.</p>
public struct LifecycleHook: Equatable {
    /// <p>The name of the Auto Scaling group for the lifecycle hook.</p>
    public let autoScalingGroupName: String?
    /// <p>Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses
    ///             or if an unexpected failure occurs. The possible values are <code>CONTINUE</code> and
    ///                 <code>ABANDON</code>.</p>
    public let defaultResult: String?
    /// <p>The maximum time, in seconds, that an instance can remain in a
    ///                 <code>Pending:Wait</code> or <code>Terminating:Wait</code> state. The maximum is
    ///             172800 seconds (48 hours) or 100 times <code>HeartbeatTimeout</code>, whichever is
    ///             smaller.</p>
    public let globalTimeout: Int?
    /// <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. If
    ///             the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the
    ///                 <code>DefaultResult</code> parameter.</p>
    public let heartbeatTimeout: Int?
    /// <p>The name of the lifecycle hook.</p>
    public let lifecycleHookName: String?
    /// <p>The state of the EC2 instance to which to attach the lifecycle hook. The following are
    ///             possible values:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>autoscaling:EC2_INSTANCE_LAUNCHING</p>
    ///             </li>
    ///             <li>
    ///                 <p>autoscaling:EC2_INSTANCE_TERMINATING</p>
    ///             </li>
    ///          </ul>
    public let lifecycleTransition: String?
    /// <p>Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the
    ///             notification target.</p>
    public let notificationMetadata: String?
    /// <p>The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in the
    ///             transition state for the lifecycle hook. The notification target can be either an SQS
    ///             queue or an SNS topic.</p>
    public let notificationTargetARN: String?
    /// <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified
    ///             notification target.</p>
    public let roleARN: String?

    public init (
        autoScalingGroupName: String? = nil,
        defaultResult: String? = nil,
        globalTimeout: Int? = nil,
        heartbeatTimeout: Int? = nil,
        lifecycleHookName: String? = nil,
        lifecycleTransition: String? = nil,
        notificationMetadata: String? = nil,
        notificationTargetARN: String? = nil,
        roleARN: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.defaultResult = defaultResult
        self.globalTimeout = globalTimeout
        self.heartbeatTimeout = heartbeatTimeout
        self.lifecycleHookName = lifecycleHookName
        self.lifecycleTransition = lifecycleTransition
        self.notificationMetadata = notificationMetadata
        self.notificationTargetARN = notificationTargetARN
        self.roleARN = roleARN
    }
}
