// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes a scaling policy.</p>
public struct ScalingPolicy: Equatable {
    /// <p>Specifies how the scaling adjustment is interpreted (for example, an absolute number
    ///             or a percentage). The valid values are <code>ChangeInCapacity</code>,
    ///                 <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p>
    public let adjustmentType: String?
    /// <p>The CloudWatch alarms related to the policy.</p>
    public let alarms: [Alarm]?
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>The duration of the policy's cooldown period, in seconds.</p>
    public let cooldown: Int?
    /// <p>Indicates whether the policy is enabled (<code>true</code>) or disabled
    ///                 (<code>false</code>).</p>
    public let enabled: Bool?
    /// <p>The estimated time, in seconds, until a newly launched instance can contribute to the
    ///             CloudWatch metrics.</p>
    public let estimatedInstanceWarmup: Int?
    /// <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>,
    ///                 <code>Maximum</code>, and <code>Average</code>.</p>
    public let metricAggregationType: String?
    /// <p>The minimum value to scale by when the adjustment type is
    ///                 <code>PercentChangeInCapacity</code>. </p>
    public let minAdjustmentMagnitude: Int?
    /// <p>Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code>
    ///             instead.</p>
    @available(*, deprecated)
    public let minAdjustmentStep: Int?
    /// <p>The Amazon Resource Name (ARN) of the policy.</p>
    public let policyARN: String?
    /// <p>The name of the scaling policy.</p>
    public let policyName: String?
    /// <p>One of the following policy types: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>TargetTrackingScaling</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>StepScaling</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>SimpleScaling</code> (default)</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>PredictiveScaling</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html">Target tracking
    ///                 scaling policies</a> and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html">Step and simple scaling
    ///                 policies</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let policyType: String?
    /// <p>A predictive scaling policy.</p>
    public let predictiveScalingConfiguration: PredictiveScalingConfiguration?
    /// <p>The amount by which to scale, based on the specified adjustment type. A positive value
    ///             adds to the current capacity while a negative number removes from the current
    ///             capacity.</p>
    public let scalingAdjustment: Int?
    /// <p>A set of adjustments that enable you to scale based on the size of the alarm
    ///             breach.</p>
    public let stepAdjustments: [StepAdjustment]?
    /// <p>A target tracking scaling policy.</p>
    public let targetTrackingConfiguration: TargetTrackingConfiguration?

    public init (
        adjustmentType: String? = nil,
        alarms: [Alarm]? = nil,
        autoScalingGroupName: String? = nil,
        cooldown: Int? = nil,
        enabled: Bool? = nil,
        estimatedInstanceWarmup: Int? = nil,
        metricAggregationType: String? = nil,
        minAdjustmentMagnitude: Int? = nil,
        minAdjustmentStep: Int? = nil,
        policyARN: String? = nil,
        policyName: String? = nil,
        policyType: String? = nil,
        predictiveScalingConfiguration: PredictiveScalingConfiguration? = nil,
        scalingAdjustment: Int? = nil,
        stepAdjustments: [StepAdjustment]? = nil,
        targetTrackingConfiguration: TargetTrackingConfiguration? = nil
    )
    {
        self.adjustmentType = adjustmentType
        self.alarms = alarms
        self.autoScalingGroupName = autoScalingGroupName
        self.cooldown = cooldown
        self.enabled = enabled
        self.estimatedInstanceWarmup = estimatedInstanceWarmup
        self.metricAggregationType = metricAggregationType
        self.minAdjustmentMagnitude = minAdjustmentMagnitude
        self.minAdjustmentStep = minAdjustmentStep
        self.policyARN = policyARN
        self.policyName = policyName
        self.policyType = policyType
        self.predictiveScalingConfiguration = predictiveScalingConfiguration
        self.scalingAdjustment = scalingAdjustment
        self.stepAdjustments = stepAdjustments
        self.targetTrackingConfiguration = targetTrackingConfiguration
    }
}
