// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutScalingPolicyInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let adjustmentType = adjustmentType {
            try container.encode(adjustmentType, forKey: Key("AdjustmentType"))
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let cooldown = cooldown {
            try container.encode(cooldown, forKey: Key("Cooldown"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: Key("Enabled"))
        }
        if let estimatedInstanceWarmup = estimatedInstanceWarmup {
            try container.encode(estimatedInstanceWarmup, forKey: Key("EstimatedInstanceWarmup"))
        }
        if let metricAggregationType = metricAggregationType {
            try container.encode(metricAggregationType, forKey: Key("MetricAggregationType"))
        }
        if let minAdjustmentMagnitude = minAdjustmentMagnitude {
            try container.encode(minAdjustmentMagnitude, forKey: Key("MinAdjustmentMagnitude"))
        }
        if let minAdjustmentStep = minAdjustmentStep {
            try container.encode(minAdjustmentStep, forKey: Key("MinAdjustmentStep"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: Key("PolicyName"))
        }
        if let policyType = policyType {
            try container.encode(policyType, forKey: Key("PolicyType"))
        }
        if let predictiveScalingConfiguration = predictiveScalingConfiguration {
            try container.encode(predictiveScalingConfiguration, forKey: Key("PredictiveScalingConfiguration"))
        }
        if let scalingAdjustment = scalingAdjustment {
            try container.encode(scalingAdjustment, forKey: Key("ScalingAdjustment"))
        }
        if let stepAdjustments = stepAdjustments {
            var stepAdjustmentsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("StepAdjustments"))
            for (index0, stepadjustment0) in stepAdjustments.enumerated() {
                try stepAdjustmentsContainer.encode(stepadjustment0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let targetTrackingConfiguration = targetTrackingConfiguration {
            try container.encode(targetTrackingConfiguration, forKey: Key("TargetTrackingConfiguration"))
        }
        try container.encode("PutScalingPolicy", forKey:Key("Action"))
        try container.encode("2011-01-01", forKey:Key("Version"))
    }
}
