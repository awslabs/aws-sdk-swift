// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribePoliciesOutputBody: Equatable {
    public let scalingPolicies: [ScalingPolicy]?
    public let nextToken: String?
}

extension DescribePoliciesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case scalingPolicies = "ScalingPolicies"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribePoliciesResult"))
        if containerValues.contains(.scalingPolicies) {
            struct KeyVal0{struct member{}}
            let scalingPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scalingPolicies)
            if let scalingPoliciesWrappedContainer = scalingPoliciesWrappedContainer {
                let scalingPoliciesContainer = try scalingPoliciesWrappedContainer.decodeIfPresent([ScalingPolicy].self, forKey: .member)
                var scalingPoliciesBuffer:[ScalingPolicy]? = nil
                if let scalingPoliciesContainer = scalingPoliciesContainer {
                    scalingPoliciesBuffer = [ScalingPolicy]()
                    for structureContainer0 in scalingPoliciesContainer {
                        scalingPoliciesBuffer?.append(structureContainer0)
                    }
                }
                scalingPolicies = scalingPoliciesBuffer
            } else {
                scalingPolicies = []
            }
        } else {
            scalingPolicies = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
