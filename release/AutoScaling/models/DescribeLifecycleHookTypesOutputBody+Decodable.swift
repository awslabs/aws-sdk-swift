// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeLifecycleHookTypesOutputBody: Equatable {
    public let lifecycleHookTypes: [String]?
}

extension DescribeLifecycleHookTypesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case lifecycleHookTypes = "LifecycleHookTypes"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeLifecycleHookTypesResult"))
        if containerValues.contains(.lifecycleHookTypes) {
            struct KeyVal0{struct member{}}
            let lifecycleHookTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .lifecycleHookTypes)
            if let lifecycleHookTypesWrappedContainer = lifecycleHookTypesWrappedContainer {
                let lifecycleHookTypesContainer = try lifecycleHookTypesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var lifecycleHookTypesBuffer:[String]? = nil
                if let lifecycleHookTypesContainer = lifecycleHookTypesContainer {
                    lifecycleHookTypesBuffer = [String]()
                    for stringContainer0 in lifecycleHookTypesContainer {
                        lifecycleHookTypesBuffer?.append(stringContainer0)
                    }
                }
                lifecycleHookTypes = lifecycleHookTypesBuffer
            } else {
                lifecycleHookTypes = []
            }
        } else {
            lifecycleHookTypes = nil
        }
    }
}
