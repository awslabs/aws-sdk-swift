// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Activity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityId = "ActivityId"
        case autoScalingGroupARN = "AutoScalingGroupARN"
        case autoScalingGroupName = "AutoScalingGroupName"
        case autoScalingGroupState = "AutoScalingGroupState"
        case cause = "Cause"
        case description = "Description"
        case details = "Details"
        case endTime = "EndTime"
        case progress = "Progress"
        case startTime = "StartTime"
        case statusCode = "StatusCode"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let activityId = activityId {
            try container.encode(activityId, forKey: Key("ActivityId"))
        }
        if let autoScalingGroupARN = autoScalingGroupARN {
            try container.encode(autoScalingGroupARN, forKey: Key("AutoScalingGroupARN"))
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: Key("AutoScalingGroupName"))
        }
        if let autoScalingGroupState = autoScalingGroupState {
            try container.encode(autoScalingGroupState, forKey: Key("AutoScalingGroupState"))
        }
        if let cause = cause {
            try container.encode(cause, forKey: Key("Cause"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let details = details {
            try container.encode(details, forKey: Key("Details"))
        }
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if progress != 0 {
            try container.encode(progress, forKey: Key("Progress"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        if let statusCode = statusCode {
            try container.encode(statusCode, forKey: Key("StatusCode"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: Key("StatusMessage"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let causeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cause)
        cause = causeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        var startTimeBuffer:Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endTime)
        var endTimeBuffer:Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let statusCodeDecoded = try containerValues.decodeIfPresent(ScalingActivityStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let progressDecoded = try containerValues.decode(Int.self, forKey: .progress)
        progress = progressDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
        let autoScalingGroupStateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupState)
        autoScalingGroupState = autoScalingGroupStateDecoded
        let autoScalingGroupARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupARN)
        autoScalingGroupARN = autoScalingGroupARNDecoded
    }
}
