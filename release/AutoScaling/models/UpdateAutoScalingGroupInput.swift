// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateAutoScalingGroupInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>One or more Availability Zones for the group.</p>
    public let availabilityZones: [String]?
    /// <p>Enables or disables Capacity Rebalancing. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/capacity-rebalance.html">Amazon EC2 Auto Scaling Capacity Rebalancing</a> in the
    ///             <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let capacityRebalance: Bool?
    /// <p>The amount of time, in seconds, after a scaling activity completes before another
    ///             scaling activity can start. The default value is <code>300</code>. This setting applies
    ///             when using simple scaling policies, but not when using other scaling policies or
    ///             scheduled scaling. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling</a>
    ///             in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let defaultCooldown: Int?
    /// <p>The desired capacity is the initial capacity of the Auto Scaling group after this operation
    ///             completes and the capacity it attempts to maintain. This number must be greater than or
    ///             equal to the minimum size of the group and less than or equal to the maximum size of the
    ///             group.</p>
    public let desiredCapacity: Int?
    /// <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status
    ///             of an EC2 instance that has come into service. The default value is <code>0</code>. For
    ///             more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health
    ///                 check grace period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    ///         <p>Conditional: Required if you are adding an <code>ELB</code> health check.</p>
    public let healthCheckGracePeriod: Int?
    /// <p>The service to use for the health checks. The valid values are <code>EC2</code> and
    ///                 <code>ELB</code>. If you configure an Auto Scaling group to use <code>ELB</code> health
    ///             checks, it considers the instance unhealthy if it fails either the EC2 status checks or
    ///             the load balancer health checks.</p>
    public let healthCheckType: String?
    /// <p>The name of the launch configuration. If you specify
    ///                 <code>LaunchConfigurationName</code> in your update request, you can't specify
    ///                 <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p>
    public let launchConfigurationName: String?
    /// <p>The launch template and version to use to specify the updates. If you specify
    ///                 <code>LaunchTemplate</code> in your update request, you can't specify
    ///                 <code>LaunchConfigurationName</code> or <code>MixedInstancesPolicy</code>.</p>
    public let launchTemplate: LaunchTemplateSpecification?
    /// <p>The maximum amount of time, in seconds, that an instance can be in service. The
    ///             default is null. If specified, the value must be either 0 or a number equal to or
    ///             greater than 86,400 seconds (1 day). To clear a previously set value, specify a new
    ///             value of 0. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling
    ///                 instances based on maximum instance lifetime</a> in the
    ///                 <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let maxInstanceLifetime: Int?
    /// <p>The maximum size of the Auto Scaling group.</p>
    ///         <note>
    ///             <p>With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to
    ///                 go above <code>MaxSize</code> to meet your capacity requirements. In this event,
    ///                 Amazon EC2 Auto Scaling will never go above <code>MaxSize</code> by more than your largest instance
    ///                 weight (weights that define how many units each instance contributes to the desired
    ///                 capacity of the group).</p>
    ///         </note>
    public let maxSize: Int?
    /// <p>The minimum size of the Auto Scaling group.</p>
    public let minSize: Int?
    /// <p>An embedded object that specifies a mixed instances policy. When you make changes to
    ///             an existing policy, all optional properties are left unchanged if not specified. For
    ///             more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling groups with multiple
    ///                 instance types and purchase options</a> in the <i>Amazon EC2 Auto Scaling User
    ///                 Guide</i>.</p>
    public let mixedInstancesPolicy: MixedInstancesPolicy?
    /// <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling
    ///             when scaling in. For more information about preventing instances from terminating on
    ///             scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance scale-in protection</a> in the
    ///             <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let newInstancesProtectedFromScaleIn: Bool?
    /// <p>The name of an existing placement group into which to launch your instances, if any. A
    ///             placement group is a logical grouping of instances within a single Availability Zone.
    ///             You cannot specify multiple Availability Zones and a placement group. For more
    ///             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the
    ///                 <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    public let placementGroup: String?
    /// <p>The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to
    ///             call other Amazon Web Services on your behalf. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-linked
    ///                 roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let serviceLinkedRoleARN: String?
    /// <p>A policy or a list of policies that are used to select the instances to terminate. The
    ///             policies are executed in the order that you list them. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling which Auto Scaling instances terminate during scale in</a> in the
    ///                 <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    public let terminationPolicies: [String]?
    /// <p>A comma-separated list of subnet IDs for a virtual private cloud (VPC). If you specify
    ///                 <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that
    ///             you specify for this parameter must reside in those Availability Zones.</p>
    public let vPCZoneIdentifier: String?

    public init (
        autoScalingGroupName: String? = nil,
        availabilityZones: [String]? = nil,
        capacityRebalance: Bool? = nil,
        defaultCooldown: Int? = nil,
        desiredCapacity: Int? = nil,
        healthCheckGracePeriod: Int? = nil,
        healthCheckType: String? = nil,
        launchConfigurationName: String? = nil,
        launchTemplate: LaunchTemplateSpecification? = nil,
        maxInstanceLifetime: Int? = nil,
        maxSize: Int? = nil,
        minSize: Int? = nil,
        mixedInstancesPolicy: MixedInstancesPolicy? = nil,
        newInstancesProtectedFromScaleIn: Bool? = nil,
        placementGroup: String? = nil,
        serviceLinkedRoleARN: String? = nil,
        terminationPolicies: [String]? = nil,
        vPCZoneIdentifier: String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.availabilityZones = availabilityZones
        self.capacityRebalance = capacityRebalance
        self.defaultCooldown = defaultCooldown
        self.desiredCapacity = desiredCapacity
        self.healthCheckGracePeriod = healthCheckGracePeriod
        self.healthCheckType = healthCheckType
        self.launchConfigurationName = launchConfigurationName
        self.launchTemplate = launchTemplate
        self.maxInstanceLifetime = maxInstanceLifetime
        self.maxSize = maxSize
        self.minSize = minSize
        self.mixedInstancesPolicy = mixedInstancesPolicy
        self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
        self.placementGroup = placementGroup
        self.serviceLinkedRoleARN = serviceLinkedRoleARN
        self.terminationPolicies = terminationPolicies
        self.vPCZoneIdentifier = vPCZoneIdentifier
    }
}
