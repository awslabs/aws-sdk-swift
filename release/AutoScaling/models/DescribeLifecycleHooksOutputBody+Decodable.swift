// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeLifecycleHooksOutputBody: Equatable {
    public let lifecycleHooks: [LifecycleHook]?
}

extension DescribeLifecycleHooksOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case lifecycleHooks = "LifecycleHooks"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeLifecycleHooksResult"))
        if containerValues.contains(.lifecycleHooks) {
            struct KeyVal0{struct member{}}
            let lifecycleHooksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .lifecycleHooks)
            if let lifecycleHooksWrappedContainer = lifecycleHooksWrappedContainer {
                let lifecycleHooksContainer = try lifecycleHooksWrappedContainer.decodeIfPresent([LifecycleHook].self, forKey: .member)
                var lifecycleHooksBuffer:[LifecycleHook]? = nil
                if let lifecycleHooksContainer = lifecycleHooksContainer {
                    lifecycleHooksBuffer = [LifecycleHook]()
                    for structureContainer0 in lifecycleHooksContainer {
                        lifecycleHooksBuffer?.append(structureContainer0)
                    }
                }
                lifecycleHooks = lifecycleHooksBuffer
            } else {
                lifecycleHooks = []
            }
        } else {
            lifecycleHooks = nil
        }
    }
}
