// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetPredictiveScalingForecastOutputBody: Equatable {
    public let loadForecast: [LoadForecast]?
    public let capacityForecast: CapacityForecast?
    public let updateTime: Date?
}

extension GetPredictiveScalingForecastOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case capacityForecast = "CapacityForecast"
        case loadForecast = "LoadForecast"
        case updateTime = "UpdateTime"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("GetPredictiveScalingForecastResult"))
        if containerValues.contains(.loadForecast) {
            struct KeyVal0{struct member{}}
            let loadForecastWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadForecast)
            if let loadForecastWrappedContainer = loadForecastWrappedContainer {
                let loadForecastContainer = try loadForecastWrappedContainer.decodeIfPresent([LoadForecast].self, forKey: .member)
                var loadForecastBuffer:[LoadForecast]? = nil
                if let loadForecastContainer = loadForecastContainer {
                    loadForecastBuffer = [LoadForecast]()
                    for structureContainer0 in loadForecastContainer {
                        loadForecastBuffer?.append(structureContainer0)
                    }
                }
                loadForecast = loadForecastBuffer
            } else {
                loadForecast = []
            }
        } else {
            loadForecast = nil
        }
        let capacityForecastDecoded = try containerValues.decodeIfPresent(CapacityForecast.self, forKey: .capacityForecast)
        capacityForecast = capacityForecastDecoded
        let updateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updateTime)
        var updateTimeBuffer:Date? = nil
        if let updateTimeDecoded = updateTimeDecoded {
            updateTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(updateTimeDecoded, format: .dateTime)
        }
        updateTime = updateTimeBuffer
    }
}
