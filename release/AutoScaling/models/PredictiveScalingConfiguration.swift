// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents a predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.</p>
public struct PredictiveScalingConfiguration: Equatable {
    /// <p>Defines the behavior that should be applied if the forecast capacity approaches or
    ///             exceeds the maximum capacity of the Auto Scaling group. Defaults to
    ///                 <code>HonorMaxCapacity</code> if not specified.</p>
    ///         <p>The following are possible values:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>HonorMaxCapacity</code> - Amazon EC2 Auto Scaling cannot scale out capacity higher than
    ///                     the maximum capacity. The maximum capacity is enforced as a hard limit. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>IncreaseMaxCapacity</code> - Amazon EC2 Auto Scaling can scale out capacity higher than
    ///                     the maximum capacity when the forecast capacity is close to or exceeds the
    ///                     maximum capacity. The upper limit is determined by the forecasted capacity and
    ///                     the value for <code>MaxCapacityBuffer</code>.</p>
    ///             </li>
    ///          </ul>
    public let maxCapacityBreachBehavior: PredictiveScalingMaxCapacityBreachBehavior?
    /// <p>The size of the capacity buffer to use when the forecast capacity is close to or
    ///             exceeds the maximum capacity. The value is specified as a percentage relative to the
    ///             forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer,
    ///             such that if the forecast capacity is 50, and the maximum capacity is 40, then the
    ///             effective maximum capacity is 55.</p>
    ///         <p>If set to 0, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but
    ///             not exceed forecast capacity. </p>
    ///         <p>Required if the <code>MaxCapacityBreachBehavior</code> property is set to
    ///                 <code>IncreaseMaxCapacity</code>, and cannot be used otherwise.</p>
    public let maxCapacityBuffer: Int?
    /// <p>This structure includes the metrics and target utilization to use for predictive
    ///             scaling. </p>
    ///         <p>This is an array, but we currently only support a single metric specification. That
    ///             is, you can specify a target value and a single metric pair, or a target value and one
    ///             scaling metric and one load metric.</p>
    public let metricSpecifications: [PredictiveScalingMetricSpecification]?
    /// <p>The predictive scaling mode. Defaults to <code>ForecastOnly</code> if not
    ///             specified.</p>
    public let mode: PredictiveScalingMode?
    /// <p>The amount of time, in seconds, by which the instance launch time can be advanced. For
    ///             example, the forecast says to add capacity at 10:00 AM, and you choose to pre-launch
    ///             instances by 5 minutes. In that case, the instances will be launched at 9:55 AM. The
    ///             intention is to give resources time to be provisioned. It can take a few minutes to
    ///             launch an EC2 instance. The actual amount of time required depends on several factors,
    ///             such as the size of the instance and whether there are startup scripts to complete. </p>
    ///         <p>The value must be less than the forecast interval duration of 3600 seconds (60
    ///             minutes). Defaults to 300 seconds if not specified. </p>
    public let schedulingBufferTime: Int?

    public init (
        maxCapacityBreachBehavior: PredictiveScalingMaxCapacityBreachBehavior? = nil,
        maxCapacityBuffer: Int? = nil,
        metricSpecifications: [PredictiveScalingMetricSpecification]? = nil,
        mode: PredictiveScalingMode? = nil,
        schedulingBufferTime: Int? = nil
    )
    {
        self.maxCapacityBreachBehavior = maxCapacityBreachBehavior
        self.maxCapacityBuffer = maxCapacityBuffer
        self.metricSpecifications = metricSpecifications
        self.mode = mode
        self.schedulingBufferTime = schedulingBufferTime
    }
}
