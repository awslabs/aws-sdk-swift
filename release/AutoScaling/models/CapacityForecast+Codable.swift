// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CapacityForecast: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case timestamps = "Timestamps"
        case values = "Values"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let timestamps = timestamps {
            var timestampsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Timestamps"))
            for (index0, timestamptype0) in timestamps.enumerated() {
                try timestampsContainer.encode(TimestampWrapper(timestamptype0, format: .dateTime), forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let values = values {
            var valuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Values"))
            for (index0, metricscale0) in values.enumerated() {
                try valuesContainer.encode(metricscale0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.timestamps) {
            struct KeyVal0{struct member{}}
            let timestampsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .timestamps)
            if let timestampsWrappedContainer = timestampsWrappedContainer {
                let timestampsContainer = try timestampsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var timestampsBuffer:[Date]? = nil
                if let timestampsContainer = timestampsContainer {
                    timestampsBuffer = [Date]()
                    for timestampContainer0 in timestampsContainer {
                        try timestampsBuffer?.append(TimestampWrapperDecoder.parseDateStringValue(timestampContainer0, format: .dateTime))
                    }
                }
                timestamps = timestampsBuffer
            } else {
                timestamps = []
            }
        } else {
            timestamps = nil
        }
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Double].self, forKey: .member)
                var valuesBuffer:[Double]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Double]()
                    for doubleContainer0 in valuesContainer {
                        valuesBuffer?.append(doubleContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
    }
}
