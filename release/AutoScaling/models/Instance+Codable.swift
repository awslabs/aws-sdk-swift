// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Instance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone = "AvailabilityZone"
        case healthStatus = "HealthStatus"
        case instanceId = "InstanceId"
        case instanceType = "InstanceType"
        case launchConfigurationName = "LaunchConfigurationName"
        case launchTemplate = "LaunchTemplate"
        case lifecycleState = "LifecycleState"
        case protectedFromScaleIn = "ProtectedFromScaleIn"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: Key("AvailabilityZone"))
        }
        if let healthStatus = healthStatus {
            try container.encode(healthStatus, forKey: Key("HealthStatus"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: Key("InstanceType"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: Key("LaunchTemplate"))
        }
        if let lifecycleState = lifecycleState {
            try container.encode(lifecycleState, forKey: Key("LifecycleState"))
        }
        if let protectedFromScaleIn = protectedFromScaleIn {
            try container.encode(protectedFromScaleIn, forKey: Key("ProtectedFromScaleIn"))
        }
        if let weightedCapacity = weightedCapacity {
            try container.encode(weightedCapacity, forKey: Key("WeightedCapacity"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let lifecycleStateDecoded = try containerValues.decodeIfPresent(LifecycleState.self, forKey: .lifecycleState)
        lifecycleState = lifecycleStateDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let protectedFromScaleInDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .protectedFromScaleIn)
        protectedFromScaleIn = protectedFromScaleInDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
    }
}
