// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeScalingActivitiesOutputBody: Equatable {
    public let activities: [Activity]?
    public let nextToken: String?
}

extension DescribeScalingActivitiesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activities = "Activities"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeScalingActivitiesResult"))
        if containerValues.contains(.activities) {
            struct KeyVal0{struct member{}}
            let activitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .activities)
            if let activitiesWrappedContainer = activitiesWrappedContainer {
                let activitiesContainer = try activitiesWrappedContainer.decodeIfPresent([Activity].self, forKey: .member)
                var activitiesBuffer:[Activity]? = nil
                if let activitiesContainer = activitiesContainer {
                    activitiesBuffer = [Activity]()
                    for structureContainer0 in activitiesContainer {
                        activitiesBuffer?.append(structureContainer0)
                    }
                }
                activities = activitiesBuffer
            } else {
                activities = []
            }
        } else {
            activities = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
