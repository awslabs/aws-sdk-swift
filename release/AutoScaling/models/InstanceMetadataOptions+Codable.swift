// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceMetadataOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case httpEndpoint = "HttpEndpoint"
        case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
        case httpTokens = "HttpTokens"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let httpEndpoint = httpEndpoint {
            try container.encode(httpEndpoint, forKey: Key("HttpEndpoint"))
        }
        if let httpPutResponseHopLimit = httpPutResponseHopLimit {
            try container.encode(httpPutResponseHopLimit, forKey: Key("HttpPutResponseHopLimit"))
        }
        if let httpTokens = httpTokens {
            try container.encode(httpTokens, forKey: Key("HttpTokens"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let httpTokensDecoded = try containerValues.decodeIfPresent(InstanceMetadataHttpTokensState.self, forKey: .httpTokens)
        httpTokens = httpTokensDecoded
        let httpPutResponseHopLimitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .httpPutResponseHopLimit)
        httpPutResponseHopLimit = httpPutResponseHopLimitDecoded
        let httpEndpointDecoded = try containerValues.decodeIfPresent(InstanceMetadataEndpointState.self, forKey: .httpEndpoint)
        httpEndpoint = httpEndpointDecoded
    }
}
