// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAutoScalingNotificationTypesOutputBody: Equatable {
    public let autoScalingNotificationTypes: [String]?
}

extension DescribeAutoScalingNotificationTypesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case autoScalingNotificationTypes = "AutoScalingNotificationTypes"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeAutoScalingNotificationTypesResult"))
        if containerValues.contains(.autoScalingNotificationTypes) {
            struct KeyVal0{struct member{}}
            let autoScalingNotificationTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingNotificationTypes)
            if let autoScalingNotificationTypesWrappedContainer = autoScalingNotificationTypesWrappedContainer {
                let autoScalingNotificationTypesContainer = try autoScalingNotificationTypesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var autoScalingNotificationTypesBuffer:[String]? = nil
                if let autoScalingNotificationTypesContainer = autoScalingNotificationTypesContainer {
                    autoScalingNotificationTypesBuffer = [String]()
                    for stringContainer0 in autoScalingNotificationTypesContainer {
                        autoScalingNotificationTypesBuffer?.append(stringContainer0)
                    }
                }
                autoScalingNotificationTypes = autoScalingNotificationTypesBuffer
            } else {
                autoScalingNotificationTypes = []
            }
        } else {
            autoScalingNotificationTypes = nil
        }
    }
}
