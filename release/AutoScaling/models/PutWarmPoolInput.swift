// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct PutWarmPoolInput: Equatable {
    /// <p>The name of the Auto Scaling group.</p>
    public let autoScalingGroupName: String?
    /// <p>Specifies the maximum number of instances that are allowed to be in the warm pool or
    ///             in any state except <code>Terminated</code> for the Auto Scaling group. This is an optional
    ///             property. Specify it only if you do not want the warm pool size to be determined by the
    ///             difference between the group's maximum capacity and its desired capacity. </p>
    ///         <important>
    ///             <p>If a value for <code>MaxGroupPreparedCapacity</code> is not specified, Amazon EC2 Auto Scaling
    ///                 launches and maintains the difference between the group's maximum capacity and its
    ///                 desired capacity. If you specify a value for <code>MaxGroupPreparedCapacity</code>,
    ///                 Amazon EC2 Auto Scaling uses the difference between the <code>MaxGroupPreparedCapacity</code> and
    ///                 the desired capacity instead. </p>
    ///             <p>The size of the warm pool is dynamic. Only when
    ///                     <code>MaxGroupPreparedCapacity</code> and <code>MinSize</code> are set to the
    ///                 same value does the warm pool have an absolute size.</p>
    ///         </important>
    ///         <p>If the desired capacity of the Auto Scaling group is higher than the
    ///                 <code>MaxGroupPreparedCapacity</code>, the capacity of the warm pool is 0, unless
    ///             you specify a value for <code>MinSize</code>. To remove a value that you previously set,
    ///             include the property but specify -1 for the value. </p>
    public let maxGroupPreparedCapacity: Int?
    /// <p>Specifies the minimum number of instances to maintain in the warm pool. This helps you
    ///             to ensure that there is always a certain number of warmed instances available to handle
    ///             traffic spikes. Defaults to 0 if not specified.</p>
    public let minSize: Int?
    /// <p>Sets the instance state to transition to after the lifecycle actions are complete.
    ///             Default is <code>Stopped</code>.</p>
    public let poolState: WarmPoolState?

    public init (
        autoScalingGroupName: String? = nil,
        maxGroupPreparedCapacity: Int? = nil,
        minSize: Int? = nil,
        poolState: WarmPoolState? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxGroupPreparedCapacity = maxGroupPreparedCapacity
        self.minSize = minSize
        self.poolState = poolState
    }
}
