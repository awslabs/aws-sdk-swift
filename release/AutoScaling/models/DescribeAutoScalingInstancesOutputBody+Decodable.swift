// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAutoScalingInstancesOutputBody: Equatable {
    public let autoScalingInstances: [AutoScalingInstanceDetails]?
    public let nextToken: String?
}

extension DescribeAutoScalingInstancesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case autoScalingInstances = "AutoScalingInstances"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeAutoScalingInstancesResult"))
        if containerValues.contains(.autoScalingInstances) {
            struct KeyVal0{struct member{}}
            let autoScalingInstancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingInstances)
            if let autoScalingInstancesWrappedContainer = autoScalingInstancesWrappedContainer {
                let autoScalingInstancesContainer = try autoScalingInstancesWrappedContainer.decodeIfPresent([AutoScalingInstanceDetails].self, forKey: .member)
                var autoScalingInstancesBuffer:[AutoScalingInstanceDetails]? = nil
                if let autoScalingInstancesContainer = autoScalingInstancesContainer {
                    autoScalingInstancesBuffer = [AutoScalingInstanceDetails]()
                    for structureContainer0 in autoScalingInstancesContainer {
                        autoScalingInstancesBuffer?.append(structureContainer0)
                    }
                }
                autoScalingInstances = autoScalingInstancesBuffer
            } else {
                autoScalingInstances = []
            }
        } else {
            autoScalingInstances = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
