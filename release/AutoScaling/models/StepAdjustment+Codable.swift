// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StepAdjustment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case metricIntervalLowerBound = "MetricIntervalLowerBound"
        case metricIntervalUpperBound = "MetricIntervalUpperBound"
        case scalingAdjustment = "ScalingAdjustment"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let metricIntervalLowerBound = metricIntervalLowerBound {
            try container.encode(metricIntervalLowerBound, forKey: Key("MetricIntervalLowerBound"))
        }
        if let metricIntervalUpperBound = metricIntervalUpperBound {
            try container.encode(metricIntervalUpperBound, forKey: Key("MetricIntervalUpperBound"))
        }
        if let scalingAdjustment = scalingAdjustment {
            try container.encode(scalingAdjustment, forKey: Key("ScalingAdjustment"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricIntervalLowerBoundDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .metricIntervalLowerBound)
        metricIntervalLowerBound = metricIntervalLowerBoundDecoded
        let metricIntervalUpperBoundDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .metricIntervalUpperBound)
        metricIntervalUpperBound = metricIntervalUpperBoundDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
    }
}
