// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents a CloudWatch metric of your choosing for a target tracking scaling policy to use
///             with Amazon EC2 Auto Scaling.</p>
///         <p>To create your customized metric specification:</p>
///         <ul>
///             <li>
///                 <p>Add values for each required parameter from CloudWatch. You can use an existing
///                     metric, or a new metric that you create. To use your own metric, you must first
///                     publish the metric to CloudWatch. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publish
///                         Custom Metrics</a> in the <i>Amazon CloudWatch User
///                     Guide</i>.</p>
///             </li>
///             <li>
///                 <p>Choose a metric that changes proportionally with capacity. The value of the
///                     metric should increase or decrease in inverse proportion to the number of
///                     capacity units. That is, the value of the metric should decrease when capacity
///                     increases.</p>
///             </li>
///          </ul>
///         <p>For more information about CloudWatch, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch
///                 Concepts</a>.</p>
public struct CustomizedMetricSpecification: Equatable {
    /// <p>The dimensions of the metric.</p>
    ///         <p>Conditional: If you published your metric with dimensions, you must specify the same
    ///             dimensions in your scaling policy.</p>
    public let dimensions: [MetricDimension]?
    /// <p>The name of the metric.</p>
    public let metricName: String?
    /// <p>The namespace of the metric.</p>
    public let namespace: String?
    /// <p>The statistic of the metric.</p>
    public let statistic: MetricStatistic?
    /// <p>The unit of the metric.</p>
    public let unit: String?

    public init (
        dimensions: [MetricDimension]? = nil,
        metricName: String? = nil,
        namespace: String? = nil,
        statistic: MetricStatistic? = nil,
        unit: String? = nil
    )
    {
        self.dimensions = dimensions
        self.metricName = metricName
        self.namespace = namespace
        self.statistic = statistic
        self.unit = unit
    }
}
