// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAdjustmentTypesOutputBody: Equatable {
    public let adjustmentTypes: [AdjustmentType]?
}

extension DescribeAdjustmentTypesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case adjustmentTypes = "AdjustmentTypes"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeAdjustmentTypesResult"))
        if containerValues.contains(.adjustmentTypes) {
            struct KeyVal0{struct member{}}
            let adjustmentTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .adjustmentTypes)
            if let adjustmentTypesWrappedContainer = adjustmentTypesWrappedContainer {
                let adjustmentTypesContainer = try adjustmentTypesWrappedContainer.decodeIfPresent([AdjustmentType].self, forKey: .member)
                var adjustmentTypesBuffer:[AdjustmentType]? = nil
                if let adjustmentTypesContainer = adjustmentTypesContainer {
                    adjustmentTypesBuffer = [AdjustmentType]()
                    for structureContainer0 in adjustmentTypesContainer {
                        adjustmentTypesBuffer?.append(structureContainer0)
                    }
                }
                adjustmentTypes = adjustmentTypesBuffer
            } else {
                adjustmentTypes = []
            }
        } else {
            adjustmentTypes = nil
        }
    }
}
