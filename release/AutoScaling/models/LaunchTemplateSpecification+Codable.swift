// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LaunchTemplateSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case launchTemplateId = "LaunchTemplateId"
        case launchTemplateName = "LaunchTemplateName"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let launchTemplateId = launchTemplateId {
            try container.encode(launchTemplateId, forKey: Key("LaunchTemplateId"))
        }
        if let launchTemplateName = launchTemplateName {
            try container.encode(launchTemplateName, forKey: Key("LaunchTemplateName"))
        }
        if let version = version {
            try container.encode(version, forKey: Key("Version"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchTemplateId)
        launchTemplateId = launchTemplateIdDecoded
        let launchTemplateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchTemplateName)
        launchTemplateName = launchTemplateNameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
    }
}
