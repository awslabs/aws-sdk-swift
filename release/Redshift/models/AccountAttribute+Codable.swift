// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccountAttribute: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeName = "AttributeName"
        case attributeValues = "AttributeValues"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let attributeName = attributeName {
            try container.encode(attributeName, forKey: Key("AttributeName"))
        }
        if let attributeValues = attributeValues {
            var attributeValuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AttributeValues"))
            for (index0, attributevaluetarget0) in attributeValues.enumerated() {
                try attributeValuesContainer.encode(attributevaluetarget0, forKey: Key("AttributeValueTarget.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        if containerValues.contains(.attributeValues) {
            struct KeyVal0{struct AttributeValueTarget{}}
            let attributeValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AttributeValueTarget>.CodingKeys.self, forKey: .attributeValues)
            if let attributeValuesWrappedContainer = attributeValuesWrappedContainer {
                let attributeValuesContainer = try attributeValuesWrappedContainer.decodeIfPresent([AttributeValueTarget].self, forKey: .member)
                var attributeValuesBuffer:[AttributeValueTarget]? = nil
                if let attributeValuesContainer = attributeValuesContainer {
                    attributeValuesBuffer = [AttributeValueTarget]()
                    for structureContainer0 in attributeValuesContainer {
                        attributeValuesBuffer?.append(structureContainer0)
                    }
                }
                attributeValues = attributeValuesBuffer
            } else {
                attributeValues = []
            }
        } else {
            attributeValues = nil
        }
    }
}
