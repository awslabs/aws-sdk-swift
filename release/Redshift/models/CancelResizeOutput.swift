// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes the result of a cluster resize operation.</p>
public struct CancelResizeOutput: Equatable {
    /// <p>The average rate of the resize operation over the last few minutes, measured in
    ///             megabytes per second. After the resize operation completes, this value shows the average
    ///             rate of the entire resize operation.</p>
    public let avgResizeRateInMegaBytesPerSecond: Double?
    /// <p>The percent of data transferred from source cluster to target cluster.</p>
    public let dataTransferProgressPercent: Double?
    /// <p>The amount of seconds that have elapsed since the resize operation began. After the
    ///             resize operation completes, this value shows the total actual time, in seconds, for the
    ///             resize operation.</p>
    public let elapsedTimeInSeconds: Int?
    /// <p>The estimated time remaining, in seconds, until the resize operation is complete.
    ///             This value is calculated based on the average resize rate and the estimated amount of
    ///             data remaining to be processed. Once the resize operation is complete, this value will
    ///             be 0.</p>
    public let estimatedTimeToCompletionInSeconds: Int?
    /// <p>The names of tables that have been completely imported .</p>
    ///         <p>Valid Values: List of table names.</p>
    public let importTablesCompleted: [String]?
    /// <p>The names of tables that are being currently imported.</p>
    ///         <p>Valid Values: List of table names.</p>
    public let importTablesInProgress: [String]?
    /// <p>The names of tables that have not been yet imported.</p>
    ///         <p>Valid Values: List of table names</p>
    public let importTablesNotStarted: [String]?
    /// <p>An optional string to provide additional details about the resize action.</p>
    public let message: String?
    /// <p>While the resize operation is in progress, this value shows the current amount of
    ///             data, in megabytes, that has been processed so far. When the resize operation is
    ///             complete, this value shows the total amount of data, in megabytes, on the cluster, which
    ///             may be more or less than TotalResizeDataInMegaBytes (the estimated total amount of data
    ///             before resize).</p>
    public let progressInMegaBytes: Int?
    /// <p>An enum with possible values of <code>ClassicResize</code> and
    ///                 <code>ElasticResize</code>. These values describe the type of resize operation being
    ///             performed. </p>
    public let resizeType: String?
    /// <p>The status of the resize operation.</p>
    ///         <p>Valid Values: <code>NONE</code> | <code>IN_PROGRESS</code> | <code>FAILED</code> |
    ///                 <code>SUCCEEDED</code> | <code>CANCELLING</code>
    ///         </p>
    public let status: String?
    /// <p>The cluster type after the resize operation is complete.</p>
    ///         <p>Valid Values: <code>multi-node</code> | <code>single-node</code>
    ///         </p>
    public let targetClusterType: String?
    /// <p>The type of encryption for the cluster after the resize is complete.</p>
    ///         <p>Possible values are <code>KMS</code> and <code>None</code>. </p>
    public let targetEncryptionType: String?
    /// <p>The node type that the cluster will have after the resize operation is
    ///             complete.</p>
    public let targetNodeType: String?
    /// <p>The number of nodes that the cluster will have after the resize operation is
    ///             complete.</p>
    public let targetNumberOfNodes: Int?
    /// <p>The estimated total amount of data, in megabytes, on the cluster before the resize
    ///             operation began.</p>
    public let totalResizeDataInMegaBytes: Int?

    public init (
        avgResizeRateInMegaBytesPerSecond: Double? = nil,
        dataTransferProgressPercent: Double? = nil,
        elapsedTimeInSeconds: Int? = nil,
        estimatedTimeToCompletionInSeconds: Int? = nil,
        importTablesCompleted: [String]? = nil,
        importTablesInProgress: [String]? = nil,
        importTablesNotStarted: [String]? = nil,
        message: String? = nil,
        progressInMegaBytes: Int? = nil,
        resizeType: String? = nil,
        status: String? = nil,
        targetClusterType: String? = nil,
        targetEncryptionType: String? = nil,
        targetNodeType: String? = nil,
        targetNumberOfNodes: Int? = nil,
        totalResizeDataInMegaBytes: Int? = nil
    )
    {
        self.avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecond
        self.dataTransferProgressPercent = dataTransferProgressPercent
        self.elapsedTimeInSeconds = elapsedTimeInSeconds
        self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
        self.importTablesCompleted = importTablesCompleted
        self.importTablesInProgress = importTablesInProgress
        self.importTablesNotStarted = importTablesNotStarted
        self.message = message
        self.progressInMegaBytes = progressInMegaBytes
        self.resizeType = resizeType
        self.status = status
        self.targetClusterType = targetClusterType
        self.targetEncryptionType = targetEncryptionType
        self.targetNodeType = targetNodeType
        self.targetNumberOfNodes = targetNumberOfNodes
        self.totalResizeDataInMegaBytes = totalResizeDataInMegaBytes
    }
}
