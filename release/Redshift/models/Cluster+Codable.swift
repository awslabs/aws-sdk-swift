// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Cluster: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowVersionUpgrade = "AllowVersionUpgrade"
        case aquaConfiguration = "AquaConfiguration"
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case availabilityZone = "AvailabilityZone"
        case availabilityZoneRelocationStatus = "AvailabilityZoneRelocationStatus"
        case clusterAvailabilityStatus = "ClusterAvailabilityStatus"
        case clusterCreateTime = "ClusterCreateTime"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterNamespaceArn = "ClusterNamespaceArn"
        case clusterNodes = "ClusterNodes"
        case clusterParameterGroups = "ClusterParameterGroups"
        case clusterPublicKey = "ClusterPublicKey"
        case clusterRevisionNumber = "ClusterRevisionNumber"
        case clusterSecurityGroups = "ClusterSecurityGroups"
        case clusterSnapshotCopyStatus = "ClusterSnapshotCopyStatus"
        case clusterStatus = "ClusterStatus"
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case clusterVersion = "ClusterVersion"
        case dBName = "DBName"
        case dataTransferProgress = "DataTransferProgress"
        case deferredMaintenanceWindows = "DeferredMaintenanceWindows"
        case elasticIpStatus = "ElasticIpStatus"
        case elasticResizeNumberOfNodeOptions = "ElasticResizeNumberOfNodeOptions"
        case encrypted = "Encrypted"
        case endpoint = "Endpoint"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case expectedNextSnapshotScheduleTime = "ExpectedNextSnapshotScheduleTime"
        case expectedNextSnapshotScheduleTimeStatus = "ExpectedNextSnapshotScheduleTimeStatus"
        case hsmStatus = "HsmStatus"
        case iamRoles = "IamRoles"
        case kmsKeyId = "KmsKeyId"
        case maintenanceTrackName = "MaintenanceTrackName"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case masterUsername = "MasterUsername"
        case modifyStatus = "ModifyStatus"
        case nextMaintenanceWindowStartTime = "NextMaintenanceWindowStartTime"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case pendingActions = "PendingActions"
        case pendingModifiedValues = "PendingModifiedValues"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case resizeInfo = "ResizeInfo"
        case restoreStatus = "RestoreStatus"
        case snapshotScheduleIdentifier = "SnapshotScheduleIdentifier"
        case snapshotScheduleState = "SnapshotScheduleState"
        case tags = "Tags"
        case totalStorageCapacityInMegaBytes = "TotalStorageCapacityInMegaBytes"
        case vpcId = "VpcId"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if allowVersionUpgrade != false {
            try container.encode(allowVersionUpgrade, forKey: Key("AllowVersionUpgrade"))
        }
        if let aquaConfiguration = aquaConfiguration {
            try container.encode(aquaConfiguration, forKey: Key("AquaConfiguration"))
        }
        if automatedSnapshotRetentionPeriod != 0 {
            try container.encode(automatedSnapshotRetentionPeriod, forKey: Key("AutomatedSnapshotRetentionPeriod"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: Key("AvailabilityZone"))
        }
        if let availabilityZoneRelocationStatus = availabilityZoneRelocationStatus {
            try container.encode(availabilityZoneRelocationStatus, forKey: Key("AvailabilityZoneRelocationStatus"))
        }
        if let clusterAvailabilityStatus = clusterAvailabilityStatus {
            try container.encode(clusterAvailabilityStatus, forKey: Key("ClusterAvailabilityStatus"))
        }
        if let clusterCreateTime = clusterCreateTime {
            try container.encode(TimestampWrapper(clusterCreateTime, format: .dateTime), forKey: Key("clusterCreateTime"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: Key("ClusterIdentifier"))
        }
        if let clusterNamespaceArn = clusterNamespaceArn {
            try container.encode(clusterNamespaceArn, forKey: Key("ClusterNamespaceArn"))
        }
        if let clusterNodes = clusterNodes {
            var clusterNodesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ClusterNodes"))
            for (index0, clusternode0) in clusterNodes.enumerated() {
                try clusterNodesContainer.encode(clusternode0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let clusterParameterGroups = clusterParameterGroups {
            var clusterParameterGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ClusterParameterGroups"))
            for (index0, clusterparametergroupstatus0) in clusterParameterGroups.enumerated() {
                try clusterParameterGroupsContainer.encode(clusterparametergroupstatus0, forKey: Key("ClusterParameterGroup.\(index0.advanced(by: 1))"))
            }
        }
        if let clusterPublicKey = clusterPublicKey {
            try container.encode(clusterPublicKey, forKey: Key("ClusterPublicKey"))
        }
        if let clusterRevisionNumber = clusterRevisionNumber {
            try container.encode(clusterRevisionNumber, forKey: Key("ClusterRevisionNumber"))
        }
        if let clusterSecurityGroups = clusterSecurityGroups {
            var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ClusterSecurityGroups"))
            for (index0, clustersecuritygroupmembership0) in clusterSecurityGroups.enumerated() {
                try clusterSecurityGroupsContainer.encode(clustersecuritygroupmembership0, forKey: Key("ClusterSecurityGroup.\(index0.advanced(by: 1))"))
            }
        }
        if let clusterSnapshotCopyStatus = clusterSnapshotCopyStatus {
            try container.encode(clusterSnapshotCopyStatus, forKey: Key("ClusterSnapshotCopyStatus"))
        }
        if let clusterStatus = clusterStatus {
            try container.encode(clusterStatus, forKey: Key("ClusterStatus"))
        }
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: Key("ClusterSubnetGroupName"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: Key("ClusterVersion"))
        }
        if let dBName = dBName {
            try container.encode(dBName, forKey: Key("DBName"))
        }
        if let dataTransferProgress = dataTransferProgress {
            try container.encode(dataTransferProgress, forKey: Key("DataTransferProgress"))
        }
        if let deferredMaintenanceWindows = deferredMaintenanceWindows {
            var deferredMaintenanceWindowsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("DeferredMaintenanceWindows"))
            for (index0, deferredmaintenancewindow0) in deferredMaintenanceWindows.enumerated() {
                try deferredMaintenanceWindowsContainer.encode(deferredmaintenancewindow0, forKey: Key("DeferredMaintenanceWindow.\(index0.advanced(by: 1))"))
            }
        }
        if let elasticIpStatus = elasticIpStatus {
            try container.encode(elasticIpStatus, forKey: Key("ElasticIpStatus"))
        }
        if let elasticResizeNumberOfNodeOptions = elasticResizeNumberOfNodeOptions {
            try container.encode(elasticResizeNumberOfNodeOptions, forKey: Key("ElasticResizeNumberOfNodeOptions"))
        }
        if encrypted != false {
            try container.encode(encrypted, forKey: Key("Encrypted"))
        }
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: Key("Endpoint"))
        }
        if enhancedVpcRouting != false {
            try container.encode(enhancedVpcRouting, forKey: Key("EnhancedVpcRouting"))
        }
        if let expectedNextSnapshotScheduleTime = expectedNextSnapshotScheduleTime {
            try container.encode(TimestampWrapper(expectedNextSnapshotScheduleTime, format: .dateTime), forKey: Key("expectedNextSnapshotScheduleTime"))
        }
        if let expectedNextSnapshotScheduleTimeStatus = expectedNextSnapshotScheduleTimeStatus {
            try container.encode(expectedNextSnapshotScheduleTimeStatus, forKey: Key("ExpectedNextSnapshotScheduleTimeStatus"))
        }
        if let hsmStatus = hsmStatus {
            try container.encode(hsmStatus, forKey: Key("HsmStatus"))
        }
        if let iamRoles = iamRoles {
            var iamRolesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("IamRoles"))
            for (index0, clusteriamrole0) in iamRoles.enumerated() {
                try iamRolesContainer.encode(clusteriamrole0, forKey: Key("ClusterIamRole.\(index0.advanced(by: 1))"))
            }
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: Key("KmsKeyId"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: Key("MaintenanceTrackName"))
        }
        if manualSnapshotRetentionPeriod != 0 {
            try container.encode(manualSnapshotRetentionPeriod, forKey: Key("ManualSnapshotRetentionPeriod"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: Key("MasterUsername"))
        }
        if let modifyStatus = modifyStatus {
            try container.encode(modifyStatus, forKey: Key("ModifyStatus"))
        }
        if let nextMaintenanceWindowStartTime = nextMaintenanceWindowStartTime {
            try container.encode(TimestampWrapper(nextMaintenanceWindowStartTime, format: .dateTime), forKey: Key("nextMaintenanceWindowStartTime"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: Key("NodeType"))
        }
        if numberOfNodes != 0 {
            try container.encode(numberOfNodes, forKey: Key("NumberOfNodes"))
        }
        if let pendingActions = pendingActions {
            var pendingActionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PendingActions"))
            for (index0, string0) in pendingActions.enumerated() {
                try pendingActionsContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try container.encode(pendingModifiedValues, forKey: Key("PendingModifiedValues"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: Key("PreferredMaintenanceWindow"))
        }
        if publiclyAccessible != false {
            try container.encode(publiclyAccessible, forKey: Key("PubliclyAccessible"))
        }
        if let resizeInfo = resizeInfo {
            try container.encode(resizeInfo, forKey: Key("ResizeInfo"))
        }
        if let restoreStatus = restoreStatus {
            try container.encode(restoreStatus, forKey: Key("RestoreStatus"))
        }
        if let snapshotScheduleIdentifier = snapshotScheduleIdentifier {
            try container.encode(snapshotScheduleIdentifier, forKey: Key("SnapshotScheduleIdentifier"))
        }
        if let snapshotScheduleState = snapshotScheduleState {
            try container.encode(snapshotScheduleState, forKey: Key("SnapshotScheduleState"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        if let totalStorageCapacityInMegaBytes = totalStorageCapacityInMegaBytes {
            try container.encode(totalStorageCapacityInMegaBytes, forKey: Key("TotalStorageCapacityInMegaBytes"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: Key("VpcId"))
        }
        if let vpcSecurityGroups = vpcSecurityGroups {
            var vpcSecurityGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("VpcSecurityGroups"))
            for (index0, vpcsecuritygroupmembership0) in vpcSecurityGroups.enumerated() {
                try vpcSecurityGroupsContainer.encode(vpcsecuritygroupmembership0, forKey: Key("VpcSecurityGroup.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let clusterStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterStatus)
        clusterStatus = clusterStatusDecoded
        let clusterAvailabilityStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterAvailabilityStatus)
        clusterAvailabilityStatus = clusterAvailabilityStatusDecoded
        let modifyStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modifyStatus)
        modifyStatus = modifyStatusDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let dBNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dBName)
        dBName = dBNameDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Endpoint.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let clusterCreateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterCreateTime)
        var clusterCreateTimeBuffer:Date? = nil
        if let clusterCreateTimeDecoded = clusterCreateTimeDecoded {
            clusterCreateTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(clusterCreateTimeDecoded, format: .dateTime)
        }
        clusterCreateTime = clusterCreateTimeBuffer
        let automatedSnapshotRetentionPeriodDecoded = try containerValues.decode(Int.self, forKey: .automatedSnapshotRetentionPeriod)
        automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriodDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decode(Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
        if containerValues.contains(.clusterSecurityGroups) {
            struct KeyVal0{struct ClusterSecurityGroup{}}
            let clusterSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterSecurityGroup>.CodingKeys.self, forKey: .clusterSecurityGroups)
            if let clusterSecurityGroupsWrappedContainer = clusterSecurityGroupsWrappedContainer {
                let clusterSecurityGroupsContainer = try clusterSecurityGroupsWrappedContainer.decodeIfPresent([ClusterSecurityGroupMembership].self, forKey: .member)
                var clusterSecurityGroupsBuffer:[ClusterSecurityGroupMembership]? = nil
                if let clusterSecurityGroupsContainer = clusterSecurityGroupsContainer {
                    clusterSecurityGroupsBuffer = [ClusterSecurityGroupMembership]()
                    for structureContainer0 in clusterSecurityGroupsContainer {
                        clusterSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                clusterSecurityGroups = clusterSecurityGroupsBuffer
            } else {
                clusterSecurityGroups = []
            }
        } else {
            clusterSecurityGroups = nil
        }
        if containerValues.contains(.vpcSecurityGroups) {
            struct KeyVal0{struct VpcSecurityGroup{}}
            let vpcSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroup>.CodingKeys.self, forKey: .vpcSecurityGroups)
            if let vpcSecurityGroupsWrappedContainer = vpcSecurityGroupsWrappedContainer {
                let vpcSecurityGroupsContainer = try vpcSecurityGroupsWrappedContainer.decodeIfPresent([VpcSecurityGroupMembership].self, forKey: .member)
                var vpcSecurityGroupsBuffer:[VpcSecurityGroupMembership]? = nil
                if let vpcSecurityGroupsContainer = vpcSecurityGroupsContainer {
                    vpcSecurityGroupsBuffer = [VpcSecurityGroupMembership]()
                    for structureContainer0 in vpcSecurityGroupsContainer {
                        vpcSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                vpcSecurityGroups = vpcSecurityGroupsBuffer
            } else {
                vpcSecurityGroups = []
            }
        } else {
            vpcSecurityGroups = nil
        }
        if containerValues.contains(.clusterParameterGroups) {
            struct KeyVal0{struct ClusterParameterGroup{}}
            let clusterParameterGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterParameterGroup>.CodingKeys.self, forKey: .clusterParameterGroups)
            if let clusterParameterGroupsWrappedContainer = clusterParameterGroupsWrappedContainer {
                let clusterParameterGroupsContainer = try clusterParameterGroupsWrappedContainer.decodeIfPresent([ClusterParameterGroupStatus].self, forKey: .member)
                var clusterParameterGroupsBuffer:[ClusterParameterGroupStatus]? = nil
                if let clusterParameterGroupsContainer = clusterParameterGroupsContainer {
                    clusterParameterGroupsBuffer = [ClusterParameterGroupStatus]()
                    for structureContainer0 in clusterParameterGroupsContainer {
                        clusterParameterGroupsBuffer?.append(structureContainer0)
                    }
                }
                clusterParameterGroups = clusterParameterGroupsBuffer
            } else {
                clusterParameterGroups = []
            }
        } else {
            clusterParameterGroups = nil
        }
        let clusterSubnetGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterSubnetGroupName)
        clusterSubnetGroupName = clusterSubnetGroupNameDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(PendingModifiedValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        let clusterVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let allowVersionUpgradeDecoded = try containerValues.decode(Bool.self, forKey: .allowVersionUpgrade)
        allowVersionUpgrade = allowVersionUpgradeDecoded
        let numberOfNodesDecoded = try containerValues.decode(Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let publiclyAccessibleDecoded = try containerValues.decode(Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let encryptedDecoded = try containerValues.decode(Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let restoreStatusDecoded = try containerValues.decodeIfPresent(RestoreStatus.self, forKey: .restoreStatus)
        restoreStatus = restoreStatusDecoded
        let dataTransferProgressDecoded = try containerValues.decodeIfPresent(DataTransferProgress.self, forKey: .dataTransferProgress)
        dataTransferProgress = dataTransferProgressDecoded
        let hsmStatusDecoded = try containerValues.decodeIfPresent(HsmStatus.self, forKey: .hsmStatus)
        hsmStatus = hsmStatusDecoded
        let clusterSnapshotCopyStatusDecoded = try containerValues.decodeIfPresent(ClusterSnapshotCopyStatus.self, forKey: .clusterSnapshotCopyStatus)
        clusterSnapshotCopyStatus = clusterSnapshotCopyStatusDecoded
        let clusterPublicKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterPublicKey)
        clusterPublicKey = clusterPublicKeyDecoded
        if containerValues.contains(.clusterNodes) {
            struct KeyVal0{struct member{}}
            let clusterNodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .clusterNodes)
            if let clusterNodesWrappedContainer = clusterNodesWrappedContainer {
                let clusterNodesContainer = try clusterNodesWrappedContainer.decodeIfPresent([ClusterNode].self, forKey: .member)
                var clusterNodesBuffer:[ClusterNode]? = nil
                if let clusterNodesContainer = clusterNodesContainer {
                    clusterNodesBuffer = [ClusterNode]()
                    for structureContainer0 in clusterNodesContainer {
                        clusterNodesBuffer?.append(structureContainer0)
                    }
                }
                clusterNodes = clusterNodesBuffer
            } else {
                clusterNodes = []
            }
        } else {
            clusterNodes = nil
        }
        let elasticIpStatusDecoded = try containerValues.decodeIfPresent(ElasticIpStatus.self, forKey: .elasticIpStatus)
        elasticIpStatus = elasticIpStatusDecoded
        let clusterRevisionNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterRevisionNumber)
        clusterRevisionNumber = clusterRevisionNumberDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let enhancedVpcRoutingDecoded = try containerValues.decode(Bool.self, forKey: .enhancedVpcRouting)
        enhancedVpcRouting = enhancedVpcRoutingDecoded
        if containerValues.contains(.iamRoles) {
            struct KeyVal0{struct ClusterIamRole{}}
            let iamRolesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterIamRole>.CodingKeys.self, forKey: .iamRoles)
            if let iamRolesWrappedContainer = iamRolesWrappedContainer {
                let iamRolesContainer = try iamRolesWrappedContainer.decodeIfPresent([ClusterIamRole].self, forKey: .member)
                var iamRolesBuffer:[ClusterIamRole]? = nil
                if let iamRolesContainer = iamRolesContainer {
                    iamRolesBuffer = [ClusterIamRole]()
                    for structureContainer0 in iamRolesContainer {
                        iamRolesBuffer?.append(structureContainer0)
                    }
                }
                iamRoles = iamRolesBuffer
            } else {
                iamRoles = []
            }
        } else {
            iamRoles = nil
        }
        if containerValues.contains(.pendingActions) {
            struct KeyVal0{struct member{}}
            let pendingActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .pendingActions)
            if let pendingActionsWrappedContainer = pendingActionsWrappedContainer {
                let pendingActionsContainer = try pendingActionsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var pendingActionsBuffer:[String]? = nil
                if let pendingActionsContainer = pendingActionsContainer {
                    pendingActionsBuffer = [String]()
                    for stringContainer0 in pendingActionsContainer {
                        pendingActionsBuffer?.append(stringContainer0)
                    }
                }
                pendingActions = pendingActionsBuffer
            } else {
                pendingActions = []
            }
        } else {
            pendingActions = nil
        }
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let elasticResizeNumberOfNodeOptionsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .elasticResizeNumberOfNodeOptions)
        elasticResizeNumberOfNodeOptions = elasticResizeNumberOfNodeOptionsDecoded
        if containerValues.contains(.deferredMaintenanceWindows) {
            struct KeyVal0{struct DeferredMaintenanceWindow{}}
            let deferredMaintenanceWindowsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.DeferredMaintenanceWindow>.CodingKeys.self, forKey: .deferredMaintenanceWindows)
            if let deferredMaintenanceWindowsWrappedContainer = deferredMaintenanceWindowsWrappedContainer {
                let deferredMaintenanceWindowsContainer = try deferredMaintenanceWindowsWrappedContainer.decodeIfPresent([DeferredMaintenanceWindow].self, forKey: .member)
                var deferredMaintenanceWindowsBuffer:[DeferredMaintenanceWindow]? = nil
                if let deferredMaintenanceWindowsContainer = deferredMaintenanceWindowsContainer {
                    deferredMaintenanceWindowsBuffer = [DeferredMaintenanceWindow]()
                    for structureContainer0 in deferredMaintenanceWindowsContainer {
                        deferredMaintenanceWindowsBuffer?.append(structureContainer0)
                    }
                }
                deferredMaintenanceWindows = deferredMaintenanceWindowsBuffer
            } else {
                deferredMaintenanceWindows = []
            }
        } else {
            deferredMaintenanceWindows = nil
        }
        let snapshotScheduleIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotScheduleIdentifier)
        snapshotScheduleIdentifier = snapshotScheduleIdentifierDecoded
        let snapshotScheduleStateDecoded = try containerValues.decodeIfPresent(ScheduleState.self, forKey: .snapshotScheduleState)
        snapshotScheduleState = snapshotScheduleStateDecoded
        let expectedNextSnapshotScheduleTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .expectedNextSnapshotScheduleTime)
        var expectedNextSnapshotScheduleTimeBuffer:Date? = nil
        if let expectedNextSnapshotScheduleTimeDecoded = expectedNextSnapshotScheduleTimeDecoded {
            expectedNextSnapshotScheduleTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(expectedNextSnapshotScheduleTimeDecoded, format: .dateTime)
        }
        expectedNextSnapshotScheduleTime = expectedNextSnapshotScheduleTimeBuffer
        let expectedNextSnapshotScheduleTimeStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .expectedNextSnapshotScheduleTimeStatus)
        expectedNextSnapshotScheduleTimeStatus = expectedNextSnapshotScheduleTimeStatusDecoded
        let nextMaintenanceWindowStartTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMaintenanceWindowStartTime)
        var nextMaintenanceWindowStartTimeBuffer:Date? = nil
        if let nextMaintenanceWindowStartTimeDecoded = nextMaintenanceWindowStartTimeDecoded {
            nextMaintenanceWindowStartTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(nextMaintenanceWindowStartTimeDecoded, format: .dateTime)
        }
        nextMaintenanceWindowStartTime = nextMaintenanceWindowStartTimeBuffer
        let resizeInfoDecoded = try containerValues.decodeIfPresent(ResizeInfo.self, forKey: .resizeInfo)
        resizeInfo = resizeInfoDecoded
        let availabilityZoneRelocationStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZoneRelocationStatus)
        availabilityZoneRelocationStatus = availabilityZoneRelocationStatusDecoded
        let clusterNamespaceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterNamespaceArn)
        clusterNamespaceArn = clusterNamespaceArnDecoded
        let totalStorageCapacityInMegaBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .totalStorageCapacityInMegaBytes)
        totalStorageCapacityInMegaBytes = totalStorageCapacityInMegaBytesDecoded
        let aquaConfigurationDecoded = try containerValues.decodeIfPresent(AquaConfiguration.self, forKey: .aquaConfiguration)
        aquaConfiguration = aquaConfigurationDecoded
    }
}
