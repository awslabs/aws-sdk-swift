// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedNodesOutputBody: Equatable {
    public let marker: String?
    public let reservedNodes: [ReservedNode]?
}

extension DescribeReservedNodesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case reservedNodes = "ReservedNodes"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeReservedNodesResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedNodes) {
            struct KeyVal0{struct ReservedNode{}}
            let reservedNodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedNode>.CodingKeys.self, forKey: .reservedNodes)
            if let reservedNodesWrappedContainer = reservedNodesWrappedContainer {
                let reservedNodesContainer = try reservedNodesWrappedContainer.decodeIfPresent([ReservedNode].self, forKey: .member)
                var reservedNodesBuffer:[ReservedNode]? = nil
                if let reservedNodesContainer = reservedNodesContainer {
                    reservedNodesBuffer = [ReservedNode]()
                    for structureContainer0 in reservedNodesContainer {
                        reservedNodesBuffer?.append(structureContainer0)
                    }
                }
                reservedNodes = reservedNodesBuffer
            } else {
                reservedNodes = []
            }
        } else {
            reservedNodes = nil
        }
    }
}
