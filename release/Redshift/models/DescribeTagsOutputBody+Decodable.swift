// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTagsOutputBody: Equatable {
    public let taggedResources: [TaggedResource]?
    public let marker: String?
}

extension DescribeTagsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case taggedResources = "TaggedResources"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeTagsResult"))
        if containerValues.contains(.taggedResources) {
            struct KeyVal0{struct TaggedResource{}}
            let taggedResourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TaggedResource>.CodingKeys.self, forKey: .taggedResources)
            if let taggedResourcesWrappedContainer = taggedResourcesWrappedContainer {
                let taggedResourcesContainer = try taggedResourcesWrappedContainer.decodeIfPresent([TaggedResource].self, forKey: .member)
                var taggedResourcesBuffer:[TaggedResource]? = nil
                if let taggedResourcesContainer = taggedResourcesContainer {
                    taggedResourcesBuffer = [TaggedResource]()
                    for structureContainer0 in taggedResourcesContainer {
                        taggedResourcesBuffer?.append(structureContainer0)
                    }
                }
                taggedResources = taggedResourcesBuffer
            } else {
                taggedResources = []
            }
        } else {
            taggedResources = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
