// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeHsmClientCertificatesOutputBody: Equatable {
    public let marker: String?
    public let hsmClientCertificates: [HsmClientCertificate]?
}

extension DescribeHsmClientCertificatesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case hsmClientCertificates = "HsmClientCertificates"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeHsmClientCertificatesResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.hsmClientCertificates) {
            struct KeyVal0{struct HsmClientCertificate{}}
            let hsmClientCertificatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.HsmClientCertificate>.CodingKeys.self, forKey: .hsmClientCertificates)
            if let hsmClientCertificatesWrappedContainer = hsmClientCertificatesWrappedContainer {
                let hsmClientCertificatesContainer = try hsmClientCertificatesWrappedContainer.decodeIfPresent([HsmClientCertificate].self, forKey: .member)
                var hsmClientCertificatesBuffer:[HsmClientCertificate]? = nil
                if let hsmClientCertificatesContainer = hsmClientCertificatesContainer {
                    hsmClientCertificatesBuffer = [HsmClientCertificate]()
                    for structureContainer0 in hsmClientCertificatesContainer {
                        hsmClientCertificatesBuffer?.append(structureContainer0)
                    }
                }
                hsmClientCertificates = hsmClientCertificatesBuffer
            } else {
                hsmClientCertificates = []
            }
        } else {
            hsmClientCertificates = nil
        }
    }
}
