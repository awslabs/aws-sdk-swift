// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyEndpointAccessOutputBody: Equatable {
    public let clusterIdentifier: String?
    public let resourceOwner: String?
    public let subnetGroupName: String?
    public let endpointStatus: String?
    public let endpointName: String?
    public let endpointCreateTime: Date?
    public let port: Int
    public let address: String?
    public let vpcSecurityGroups: [VpcSecurityGroupMembership]?
    public let vpcEndpoint: VpcEndpoint?
}

extension ModifyEndpointAccessOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case address = "Address"
        case clusterIdentifier = "ClusterIdentifier"
        case endpointCreateTime = "EndpointCreateTime"
        case endpointName = "EndpointName"
        case endpointStatus = "EndpointStatus"
        case port = "Port"
        case resourceOwner = "ResourceOwner"
        case subnetGroupName = "SubnetGroupName"
        case vpcEndpoint = "VpcEndpoint"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ModifyEndpointAccessResult"))
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let subnetGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetGroupName)
        subnetGroupName = subnetGroupNameDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let endpointCreateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointCreateTime)
        var endpointCreateTimeBuffer:Date? = nil
        if let endpointCreateTimeDecoded = endpointCreateTimeDecoded {
            endpointCreateTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(endpointCreateTimeDecoded, format: .dateTime)
        }
        endpointCreateTime = endpointCreateTimeBuffer
        let portDecoded = try containerValues.decode(Int.self, forKey: .port)
        port = portDecoded
        let addressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .address)
        address = addressDecoded
        if containerValues.contains(.vpcSecurityGroups) {
            struct KeyVal0{struct VpcSecurityGroup{}}
            let vpcSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroup>.CodingKeys.self, forKey: .vpcSecurityGroups)
            if let vpcSecurityGroupsWrappedContainer = vpcSecurityGroupsWrappedContainer {
                let vpcSecurityGroupsContainer = try vpcSecurityGroupsWrappedContainer.decodeIfPresent([VpcSecurityGroupMembership].self, forKey: .member)
                var vpcSecurityGroupsBuffer:[VpcSecurityGroupMembership]? = nil
                if let vpcSecurityGroupsContainer = vpcSecurityGroupsContainer {
                    vpcSecurityGroupsBuffer = [VpcSecurityGroupMembership]()
                    for structureContainer0 in vpcSecurityGroupsContainer {
                        vpcSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                vpcSecurityGroups = vpcSecurityGroupsBuffer
            } else {
                vpcSecurityGroups = []
            }
        } else {
            vpcSecurityGroups = nil
        }
        let vpcEndpointDecoded = try containerValues.decodeIfPresent(VpcEndpoint.self, forKey: .vpcEndpoint)
        vpcEndpoint = vpcEndpointDecoded
    }
}
