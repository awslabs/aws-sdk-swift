// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClusterVersionsOutputBody: Equatable {
    public let marker: String?
    public let clusterVersions: [ClusterVersion]?
}

extension DescribeClusterVersionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterVersions = "ClusterVersions"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeClusterVersionsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.clusterVersions) {
            struct KeyVal0{struct ClusterVersion{}}
            let clusterVersionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterVersion>.CodingKeys.self, forKey: .clusterVersions)
            if let clusterVersionsWrappedContainer = clusterVersionsWrappedContainer {
                let clusterVersionsContainer = try clusterVersionsWrappedContainer.decodeIfPresent([ClusterVersion].self, forKey: .member)
                var clusterVersionsBuffer:[ClusterVersion]? = nil
                if let clusterVersionsContainer = clusterVersionsContainer {
                    clusterVersionsBuffer = [ClusterVersion]()
                    for structureContainer0 in clusterVersionsContainer {
                        clusterVersionsBuffer?.append(structureContainer0)
                    }
                }
                clusterVersions = clusterVersionsBuffer
            } else {
                clusterVersions = []
            }
        } else {
            clusterVersions = nil
        }
    }
}
