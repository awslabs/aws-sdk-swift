// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataTransferProgress: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currentRateInMegaBytesPerSecond = "CurrentRateInMegaBytesPerSecond"
        case dataTransferredInMegaBytes = "DataTransferredInMegaBytes"
        case elapsedTimeInSeconds = "ElapsedTimeInSeconds"
        case estimatedTimeToCompletionInSeconds = "EstimatedTimeToCompletionInSeconds"
        case status = "Status"
        case totalDataInMegaBytes = "TotalDataInMegaBytes"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let currentRateInMegaBytesPerSecond = currentRateInMegaBytesPerSecond {
            try container.encode(currentRateInMegaBytesPerSecond, forKey: Key("CurrentRateInMegaBytesPerSecond"))
        }
        if dataTransferredInMegaBytes != 0 {
            try container.encode(dataTransferredInMegaBytes, forKey: Key("DataTransferredInMegaBytes"))
        }
        if let elapsedTimeInSeconds = elapsedTimeInSeconds {
            try container.encode(elapsedTimeInSeconds, forKey: Key("ElapsedTimeInSeconds"))
        }
        if let estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds {
            try container.encode(estimatedTimeToCompletionInSeconds, forKey: Key("EstimatedTimeToCompletionInSeconds"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if totalDataInMegaBytes != 0 {
            try container.encode(totalDataInMegaBytes, forKey: Key("TotalDataInMegaBytes"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let currentRateInMegaBytesPerSecondDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .currentRateInMegaBytesPerSecond)
        currentRateInMegaBytesPerSecond = currentRateInMegaBytesPerSecondDecoded
        let totalDataInMegaBytesDecoded = try containerValues.decode(Int.self, forKey: .totalDataInMegaBytes)
        totalDataInMegaBytes = totalDataInMegaBytesDecoded
        let dataTransferredInMegaBytesDecoded = try containerValues.decode(Int.self, forKey: .dataTransferredInMegaBytes)
        dataTransferredInMegaBytes = dataTransferredInMegaBytesDecoded
        let estimatedTimeToCompletionInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .estimatedTimeToCompletionInSeconds)
        estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSecondsDecoded
        let elapsedTimeInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .elapsedTimeInSeconds)
        elapsedTimeInSeconds = elapsedTimeInSecondsDecoded
    }
}
