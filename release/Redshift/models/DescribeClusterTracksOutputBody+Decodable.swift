// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClusterTracksOutputBody: Equatable {
    public let maintenanceTracks: [MaintenanceTrack]?
    public let marker: String?
}

extension DescribeClusterTracksOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maintenanceTracks = "MaintenanceTracks"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeClusterTracksResult"))
        if containerValues.contains(.maintenanceTracks) {
            struct KeyVal0{struct MaintenanceTrack{}}
            let maintenanceTracksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.MaintenanceTrack>.CodingKeys.self, forKey: .maintenanceTracks)
            if let maintenanceTracksWrappedContainer = maintenanceTracksWrappedContainer {
                let maintenanceTracksContainer = try maintenanceTracksWrappedContainer.decodeIfPresent([MaintenanceTrack].self, forKey: .member)
                var maintenanceTracksBuffer:[MaintenanceTrack]? = nil
                if let maintenanceTracksContainer = maintenanceTracksContainer {
                    maintenanceTracksBuffer = [MaintenanceTrack]()
                    for structureContainer0 in maintenanceTracksContainer {
                        maintenanceTracksBuffer?.append(structureContainer0)
                    }
                }
                maintenanceTracks = maintenanceTracksBuffer
            } else {
                maintenanceTracks = []
            }
        } else {
            maintenanceTracks = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
