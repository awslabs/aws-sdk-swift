// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VpcEndpoint: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case networkInterfaces = "NetworkInterfaces"
        case vpcEndpointId = "VpcEndpointId"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let networkInterfaces = networkInterfaces {
            var networkInterfacesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NetworkInterfaces"))
            for (index0, networkinterface0) in networkInterfaces.enumerated() {
                try networkInterfacesContainer.encode(networkinterface0, forKey: Key("NetworkInterface.\(index0.advanced(by: 1))"))
            }
        }
        if let vpcEndpointId = vpcEndpointId {
            try container.encode(vpcEndpointId, forKey: Key("VpcEndpointId"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: Key("VpcId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        if containerValues.contains(.networkInterfaces) {
            struct KeyVal0{struct NetworkInterface{}}
            let networkInterfacesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NetworkInterface>.CodingKeys.self, forKey: .networkInterfaces)
            if let networkInterfacesWrappedContainer = networkInterfacesWrappedContainer {
                let networkInterfacesContainer = try networkInterfacesWrappedContainer.decodeIfPresent([NetworkInterface].self, forKey: .member)
                var networkInterfacesBuffer:[NetworkInterface]? = nil
                if let networkInterfacesContainer = networkInterfacesContainer {
                    networkInterfacesBuffer = [NetworkInterface]()
                    for structureContainer0 in networkInterfacesContainer {
                        networkInterfacesBuffer?.append(structureContainer0)
                    }
                }
                networkInterfaces = networkInterfacesBuffer
            } else {
                networkInterfaces = []
            }
        } else {
            networkInterfaces = nil
        }
    }
}
