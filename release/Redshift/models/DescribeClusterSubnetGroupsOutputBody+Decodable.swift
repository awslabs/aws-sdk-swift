// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClusterSubnetGroupsOutputBody: Equatable {
    public let marker: String?
    public let clusterSubnetGroups: [ClusterSubnetGroup]?
}

extension DescribeClusterSubnetGroupsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterSubnetGroups = "ClusterSubnetGroups"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeClusterSubnetGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.clusterSubnetGroups) {
            struct KeyVal0{struct ClusterSubnetGroup{}}
            let clusterSubnetGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterSubnetGroup>.CodingKeys.self, forKey: .clusterSubnetGroups)
            if let clusterSubnetGroupsWrappedContainer = clusterSubnetGroupsWrappedContainer {
                let clusterSubnetGroupsContainer = try clusterSubnetGroupsWrappedContainer.decodeIfPresent([ClusterSubnetGroup].self, forKey: .member)
                var clusterSubnetGroupsBuffer:[ClusterSubnetGroup]? = nil
                if let clusterSubnetGroupsContainer = clusterSubnetGroupsContainer {
                    clusterSubnetGroupsBuffer = [ClusterSubnetGroup]()
                    for structureContainer0 in clusterSubnetGroupsContainer {
                        clusterSubnetGroupsBuffer?.append(structureContainer0)
                    }
                }
                clusterSubnetGroups = clusterSubnetGroupsBuffer
            } else {
                clusterSubnetGroups = []
            }
        } else {
            clusterSubnetGroups = nil
        }
    }
}
