// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p></p>
public struct DescribeEventsInput: Equatable {
    /// <p>The number of minutes prior to the time of the request for which to retrieve
    ///             events. For example, if the request is sent at 18:00 and you specify a duration of 60,
    ///             then only events which have occurred after 17:00 will be returned.</p>
    ///         <p>Default: <code>60</code>
    ///         </p>
    public let duration: Int?
    /// <p>The end of the time interval for which to retrieve events, specified in ISO 8601
    ///             format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a>
    ///         </p>
    ///         <p>Example: <code>2009-07-08T18:00Z</code>
    ///         </p>
    public let endTime: Date?
    /// <p>An optional parameter that specifies the starting point to return a set of response
    ///             records. When the results of a <a>DescribeEvents</a> request exceed the value
    ///             specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code>
    ///             field of the response. You can retrieve the next set of response records by providing
    ///             the returned marker value in the <code>Marker</code> parameter and retrying the request.
    ///         </p>
    public let marker: String?
    /// <p>The maximum number of response records to return in each call. If the number of
    ///             remaining response records exceeds the specified <code>MaxRecords</code> value, a value
    ///             is returned in a <code>marker</code> field of the response. You can retrieve the next
    ///             set of records by retrying the command with the returned marker value. </p>
    ///         <p>Default: <code>100</code>
    ///         </p>
    ///         <p>Constraints: minimum 20, maximum 100.</p>
    public let maxRecords: Int?
    /// <p>The identifier of the event source for which events will be returned. If this
    ///             parameter is not specified, then all sources are included in the response.</p>
    ///         <p>Constraints:</p>
    ///         <p>If <i>SourceIdentifier</i> is supplied,
    ///                 <i>SourceType</i> must also be provided.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Specify a cluster identifier when <i>SourceType</i> is
    ///                         <code>cluster</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Specify a cluster security group name when <i>SourceType</i>
    ///                     is <code>cluster-security-group</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Specify a cluster parameter group name when <i>SourceType</i>
    ///                     is <code>cluster-parameter-group</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Specify a cluster snapshot identifier when <i>SourceType</i>
    ///                     is <code>cluster-snapshot</code>.</p>
    ///             </li>
    ///          </ul>
    public let sourceIdentifier: String?
    /// <p>The event source to retrieve events for. If no value is specified, all events are
    ///             returned.</p>
    ///         <p>Constraints:</p>
    ///         <p>If <i>SourceType</i> is supplied,
    ///                 <i>SourceIdentifier</i> must also be provided.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Specify <code>cluster</code> when <i>SourceIdentifier</i> is
    ///                     a cluster identifier.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Specify <code>cluster-security-group</code> when
    ///                         <i>SourceIdentifier</i> is a cluster security group
    ///                     name.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Specify <code>cluster-parameter-group</code> when
    ///                         <i>SourceIdentifier</i> is a cluster parameter group
    ///                     name.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Specify <code>cluster-snapshot</code> when
    ///                         <i>SourceIdentifier</i> is a cluster snapshot
    ///                     identifier.</p>
    ///             </li>
    ///          </ul>
    public let sourceType: SourceType?
    /// <p>The beginning of the time interval to retrieve events for, specified in ISO 8601
    ///             format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a>
    ///         </p>
    ///         <p>Example: <code>2009-07-08T18:00Z</code>
    ///         </p>
    public let startTime: Date?

    public init (
        duration: Int? = nil,
        endTime: Date? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        sourceIdentifier: String? = nil,
        sourceType: SourceType? = nil,
        startTime: Date? = nil
    )
    {
        self.duration = duration
        self.endTime = endTime
        self.marker = marker
        self.maxRecords = maxRecords
        self.sourceIdentifier = sourceIdentifier
        self.sourceType = sourceType
        self.startTime = startTime
    }
}
