// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNodeConfigurationOptionsOutputBody: Equatable {
    public let nodeConfigurationOptionList: [NodeConfigurationOption]?
    public let marker: String?
}

extension DescribeNodeConfigurationOptionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case nodeConfigurationOptionList = "NodeConfigurationOptionList"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeNodeConfigurationOptionsResult"))
        if containerValues.contains(.nodeConfigurationOptionList) {
            struct KeyVal0{struct NodeConfigurationOption{}}
            let nodeConfigurationOptionListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeConfigurationOption>.CodingKeys.self, forKey: .nodeConfigurationOptionList)
            if let nodeConfigurationOptionListWrappedContainer = nodeConfigurationOptionListWrappedContainer {
                let nodeConfigurationOptionListContainer = try nodeConfigurationOptionListWrappedContainer.decodeIfPresent([NodeConfigurationOption].self, forKey: .member)
                var nodeConfigurationOptionListBuffer:[NodeConfigurationOption]? = nil
                if let nodeConfigurationOptionListContainer = nodeConfigurationOptionListContainer {
                    nodeConfigurationOptionListBuffer = [NodeConfigurationOption]()
                    for structureContainer0 in nodeConfigurationOptionListContainer {
                        nodeConfigurationOptionListBuffer?.append(structureContainer0)
                    }
                }
                nodeConfigurationOptionList = nodeConfigurationOptionListBuffer
            } else {
                nodeConfigurationOptionList = []
            }
        } else {
            nodeConfigurationOptionList = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
