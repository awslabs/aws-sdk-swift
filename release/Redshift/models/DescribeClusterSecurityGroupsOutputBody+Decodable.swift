// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClusterSecurityGroupsOutputBody: Equatable {
    public let marker: String?
    public let clusterSecurityGroups: [ClusterSecurityGroup]?
}

extension DescribeClusterSecurityGroupsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterSecurityGroups = "ClusterSecurityGroups"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeClusterSecurityGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.clusterSecurityGroups) {
            struct KeyVal0{struct ClusterSecurityGroup{}}
            let clusterSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterSecurityGroup>.CodingKeys.self, forKey: .clusterSecurityGroups)
            if let clusterSecurityGroupsWrappedContainer = clusterSecurityGroupsWrappedContainer {
                let clusterSecurityGroupsContainer = try clusterSecurityGroupsWrappedContainer.decodeIfPresent([ClusterSecurityGroup].self, forKey: .member)
                var clusterSecurityGroupsBuffer:[ClusterSecurityGroup]? = nil
                if let clusterSecurityGroupsContainer = clusterSecurityGroupsContainer {
                    clusterSecurityGroupsBuffer = [ClusterSecurityGroup]()
                    for structureContainer0 in clusterSecurityGroupsContainer {
                        clusterSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                clusterSecurityGroups = clusterSecurityGroupsBuffer
            } else {
                clusterSecurityGroups = []
            }
        } else {
            clusterSecurityGroups = nil
        }
    }
}
