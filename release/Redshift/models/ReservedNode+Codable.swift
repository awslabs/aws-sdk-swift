// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReservedNode: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currencyCode = "CurrencyCode"
        case duration = "Duration"
        case fixedPrice = "FixedPrice"
        case nodeCount = "NodeCount"
        case nodeType = "NodeType"
        case offeringType = "OfferingType"
        case recurringCharges = "RecurringCharges"
        case reservedNodeId = "ReservedNodeId"
        case reservedNodeOfferingId = "ReservedNodeOfferingId"
        case reservedNodeOfferingType = "ReservedNodeOfferingType"
        case startTime = "StartTime"
        case state = "State"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let currencyCode = currencyCode {
            try container.encode(currencyCode, forKey: Key("CurrencyCode"))
        }
        if duration != 0 {
            try container.encode(duration, forKey: Key("Duration"))
        }
        if fixedPrice != 0.0 {
            try container.encode(fixedPrice, forKey: Key("FixedPrice"))
        }
        if nodeCount != 0 {
            try container.encode(nodeCount, forKey: Key("NodeCount"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: Key("NodeType"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: Key("OfferingType"))
        }
        if let recurringCharges = recurringCharges {
            var recurringChargesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("RecurringCharges"))
            for (index0, recurringcharge0) in recurringCharges.enumerated() {
                try recurringChargesContainer.encode(recurringcharge0, forKey: Key("RecurringCharge.\(index0.advanced(by: 1))"))
            }
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: Key("ReservedNodeId"))
        }
        if let reservedNodeOfferingId = reservedNodeOfferingId {
            try container.encode(reservedNodeOfferingId, forKey: Key("ReservedNodeOfferingId"))
        }
        if let reservedNodeOfferingType = reservedNodeOfferingType {
            try container.encode(reservedNodeOfferingType, forKey: Key("ReservedNodeOfferingType"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
        if usagePrice != 0.0 {
            try container.encode(usagePrice, forKey: Key("UsagePrice"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedNodeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reservedNodeId)
        reservedNodeId = reservedNodeIdDecoded
        let reservedNodeOfferingIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reservedNodeOfferingId)
        reservedNodeOfferingId = reservedNodeOfferingIdDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        var startTimeBuffer:Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let fixedPriceDecoded = try containerValues.decode(Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let usagePriceDecoded = try containerValues.decode(Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let nodeCountDecoded = try containerValues.decode(Int.self, forKey: .nodeCount)
        nodeCount = nodeCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .state)
        state = stateDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        if containerValues.contains(.recurringCharges) {
            struct KeyVal0{struct RecurringCharge{}}
            let recurringChargesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RecurringCharge>.CodingKeys.self, forKey: .recurringCharges)
            if let recurringChargesWrappedContainer = recurringChargesWrappedContainer {
                let recurringChargesContainer = try recurringChargesWrappedContainer.decodeIfPresent([RecurringCharge].self, forKey: .member)
                var recurringChargesBuffer:[RecurringCharge]? = nil
                if let recurringChargesContainer = recurringChargesContainer {
                    recurringChargesBuffer = [RecurringCharge]()
                    for structureContainer0 in recurringChargesContainer {
                        recurringChargesBuffer?.append(structureContainer0)
                    }
                }
                recurringCharges = recurringChargesBuffer
            } else {
                recurringCharges = []
            }
        } else {
            recurringCharges = nil
        }
        let reservedNodeOfferingTypeDecoded = try containerValues.decodeIfPresent(ReservedNodeOfferingType.self, forKey: .reservedNodeOfferingType)
        reservedNodeOfferingType = reservedNodeOfferingTypeDecoded
    }
}
