// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeEndpointAuthorizationOutputBody: Equatable {
    public let endpointAuthorizationList: [EndpointAuthorization]?
    public let marker: String?
}

extension DescribeEndpointAuthorizationOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endpointAuthorizationList = "EndpointAuthorizationList"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeEndpointAuthorizationResult"))
        if containerValues.contains(.endpointAuthorizationList) {
            struct KeyVal0{struct member{}}
            let endpointAuthorizationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .endpointAuthorizationList)
            if let endpointAuthorizationListWrappedContainer = endpointAuthorizationListWrappedContainer {
                let endpointAuthorizationListContainer = try endpointAuthorizationListWrappedContainer.decodeIfPresent([EndpointAuthorization].self, forKey: .member)
                var endpointAuthorizationListBuffer:[EndpointAuthorization]? = nil
                if let endpointAuthorizationListContainer = endpointAuthorizationListContainer {
                    endpointAuthorizationListBuffer = [EndpointAuthorization]()
                    for structureContainer0 in endpointAuthorizationListContainer {
                        endpointAuthorizationListBuffer?.append(structureContainer0)
                    }
                }
                endpointAuthorizationList = endpointAuthorizationListBuffer
            } else {
                endpointAuthorizationList = []
            }
        } else {
            endpointAuthorizationList = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
