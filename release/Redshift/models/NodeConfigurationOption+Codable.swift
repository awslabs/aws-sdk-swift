// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NodeConfigurationOption: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case estimatedDiskUtilizationPercent = "EstimatedDiskUtilizationPercent"
        case mode = "Mode"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let estimatedDiskUtilizationPercent = estimatedDiskUtilizationPercent {
            try container.encode(estimatedDiskUtilizationPercent, forKey: Key("EstimatedDiskUtilizationPercent"))
        }
        if let mode = mode {
            try container.encode(mode, forKey: Key("Mode"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: Key("NodeType"))
        }
        if numberOfNodes != 0 {
            try container.encode(numberOfNodes, forKey: Key("NumberOfNodes"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let numberOfNodesDecoded = try containerValues.decode(Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let estimatedDiskUtilizationPercentDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .estimatedDiskUtilizationPercent)
        estimatedDiskUtilizationPercent = estimatedDiskUtilizationPercentDecoded
        let modeDecoded = try containerValues.decodeIfPresent(Mode.self, forKey: .mode)
        mode = modeDecoded
    }
}
