// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClustersOutputBody: Equatable {
    public let marker: String?
    public let clusters: [Cluster]?
}

extension DescribeClustersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusters = "Clusters"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeClustersResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.clusters) {
            struct KeyVal0{struct Cluster{}}
            let clustersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Cluster>.CodingKeys.self, forKey: .clusters)
            if let clustersWrappedContainer = clustersWrappedContainer {
                let clustersContainer = try clustersWrappedContainer.decodeIfPresent([Cluster].self, forKey: .member)
                var clustersBuffer:[Cluster]? = nil
                if let clustersContainer = clustersContainer {
                    clustersBuffer = [Cluster]()
                    for structureContainer0 in clustersContainer {
                        clustersBuffer?.append(structureContainer0)
                    }
                }
                clusters = clustersBuffer
            } else {
                clusters = []
            }
        } else {
            clusters = nil
        }
    }
}
