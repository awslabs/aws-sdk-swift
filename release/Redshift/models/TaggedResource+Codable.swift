// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TaggedResource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceName = "ResourceName"
        case resourceType = "ResourceType"
        case tag = "Tag"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: Key("ResourceName"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: Key("ResourceType"))
        }
        if let tag = tag {
            try container.encode(tag, forKey: Key("Tag"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagDecoded = try containerValues.decodeIfPresent(Tag.self, forKey: .tag)
        tag = tagDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}
