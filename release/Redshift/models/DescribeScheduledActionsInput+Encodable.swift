// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DescribeScheduledActionsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let active = active {
            try container.encode(active, forKey: Key("Active"))
        }
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let filters = filters {
            var filtersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Filters"))
            for (index0, scheduledactionfilter0) in filters.enumerated() {
                try filtersContainer.encode(scheduledactionfilter0, forKey: Key("ScheduledActionFilter.\(index0.advanced(by: 1))"))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        if let targetActionType = targetActionType {
            try container.encode(targetActionType, forKey: Key("TargetActionType"))
        }
        try container.encode("DescribeScheduledActions", forKey:Key("Action"))
        try container.encode("2012-12-01", forKey:Key("Version"))
    }
}
