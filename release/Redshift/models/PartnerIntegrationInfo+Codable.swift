// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PartnerIntegrationInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdAt = "CreatedAt"
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let createdAt = createdAt {
            try container.encode(TimestampWrapper(createdAt, format: .dateTime), forKey: Key("createdAt"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: Key("DatabaseName"))
        }
        if let partnerName = partnerName {
            try container.encode(partnerName, forKey: Key("PartnerName"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: Key("StatusMessage"))
        }
        if let updatedAt = updatedAt {
            try container.encode(TimestampWrapper(updatedAt, format: .dateTime), forKey: Key("updatedAt"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PartnerIntegrationStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdAt)
        var createdAtBuffer:Date? = nil
        if let createdAtDecoded = createdAtDecoded {
            createdAtBuffer = try TimestampWrapperDecoder.parseDateStringValue(createdAtDecoded, format: .dateTime)
        }
        createdAt = createdAtBuffer
        let updatedAtDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updatedAt)
        var updatedAtBuffer:Date? = nil
        if let updatedAtDecoded = updatedAtDecoded {
            updatedAtBuffer = try TimestampWrapperDecoder.parseDateStringValue(updatedAtDecoded, format: .dateTime)
        }
        updatedAt = updatedAtBuffer
    }
}
