// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyUsageLimitOutputBody: Equatable {
    public let usageLimitId: String?
    public let clusterIdentifier: String?
    public let featureType: UsageLimitFeatureType?
    public let limitType: UsageLimitLimitType?
    public let amount: Int
    public let period: UsageLimitPeriod?
    public let breachAction: UsageLimitBreachAction?
    public let tags: [Tag]?
}

extension ModifyUsageLimitOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case amount = "Amount"
        case breachAction = "BreachAction"
        case clusterIdentifier = "ClusterIdentifier"
        case featureType = "FeatureType"
        case limitType = "LimitType"
        case period = "Period"
        case tags = "Tags"
        case usageLimitId = "UsageLimitId"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ModifyUsageLimitResult"))
        let usageLimitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .usageLimitId)
        usageLimitId = usageLimitIdDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let featureTypeDecoded = try containerValues.decodeIfPresent(UsageLimitFeatureType.self, forKey: .featureType)
        featureType = featureTypeDecoded
        let limitTypeDecoded = try containerValues.decodeIfPresent(UsageLimitLimitType.self, forKey: .limitType)
        limitType = limitTypeDecoded
        let amountDecoded = try containerValues.decode(Int.self, forKey: .amount)
        amount = amountDecoded
        let periodDecoded = try containerValues.decodeIfPresent(UsageLimitPeriod.self, forKey: .period)
        period = periodDecoded
        let breachActionDecoded = try containerValues.decodeIfPresent(UsageLimitBreachAction.self, forKey: .breachAction)
        breachAction = breachActionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
