// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResizeClusterMessage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case classic = "Classic"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterType = "ClusterType"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let classic = classic {
            try container.encode(classic, forKey: Key("Classic"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: Key("ClusterIdentifier"))
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: Key("ClusterType"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: Key("NumberOfNodes"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let clusterTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterType)
        clusterType = clusterTypeDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let classicDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .classic)
        classic = classicDecoded
    }
}
