// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchDeleteClusterSnapshotsOutputBody: Equatable {
    public let resources: [String]?
    public let errors: [SnapshotErrorMessage]?
}

extension BatchDeleteClusterSnapshotsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case errors = "Errors"
        case resources = "Resources"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("BatchDeleteClusterSnapshotsResult"))
        if containerValues.contains(.resources) {
            struct KeyVal0{struct String{}}
            let resourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.String>.CodingKeys.self, forKey: .resources)
            if let resourcesWrappedContainer = resourcesWrappedContainer {
                let resourcesContainer = try resourcesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var resourcesBuffer:[String]? = nil
                if let resourcesContainer = resourcesContainer {
                    resourcesBuffer = [String]()
                    for stringContainer0 in resourcesContainer {
                        resourcesBuffer?.append(stringContainer0)
                    }
                }
                resources = resourcesBuffer
            } else {
                resources = []
            }
        } else {
            resources = nil
        }
        if containerValues.contains(.errors) {
            struct KeyVal0{struct SnapshotErrorMessage{}}
            let errorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotErrorMessage>.CodingKeys.self, forKey: .errors)
            if let errorsWrappedContainer = errorsWrappedContainer {
                let errorsContainer = try errorsWrappedContainer.decodeIfPresent([SnapshotErrorMessage].self, forKey: .member)
                var errorsBuffer:[SnapshotErrorMessage]? = nil
                if let errorsContainer = errorsContainer {
                    errorsBuffer = [SnapshotErrorMessage]()
                    for structureContainer0 in errorsContainer {
                        errorsBuffer?.append(structureContainer0)
                    }
                }
                errors = errorsBuffer
            } else {
                errors = []
            }
        } else {
            errors = nil
        }
    }
}
