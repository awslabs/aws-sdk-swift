// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateClusterInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let additionalInfo = additionalInfo {
            try container.encode(additionalInfo, forKey: Key("AdditionalInfo"))
        }
        if let allowVersionUpgrade = allowVersionUpgrade {
            try container.encode(allowVersionUpgrade, forKey: Key("AllowVersionUpgrade"))
        }
        if let aquaConfigurationStatus = aquaConfigurationStatus {
            try container.encode(aquaConfigurationStatus, forKey: Key("AquaConfigurationStatus"))
        }
        if let automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod {
            try container.encode(automatedSnapshotRetentionPeriod, forKey: Key("AutomatedSnapshotRetentionPeriod"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: Key("AvailabilityZone"))
        }
        if let availabilityZoneRelocation = availabilityZoneRelocation {
            try container.encode(availabilityZoneRelocation, forKey: Key("AvailabilityZoneRelocation"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: Key("ClusterIdentifier"))
        }
        if let clusterParameterGroupName = clusterParameterGroupName {
            try container.encode(clusterParameterGroupName, forKey: Key("ClusterParameterGroupName"))
        }
        if let clusterSecurityGroups = clusterSecurityGroups {
            var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ClusterSecurityGroups"))
            for (index0, string0) in clusterSecurityGroups.enumerated() {
                try clusterSecurityGroupsContainer.encode(string0, forKey: Key("ClusterSecurityGroupName.\(index0.advanced(by: 1))"))
            }
        }
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: Key("ClusterSubnetGroupName"))
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: Key("ClusterType"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: Key("ClusterVersion"))
        }
        if let dBName = dBName {
            try container.encode(dBName, forKey: Key("DBName"))
        }
        if let elasticIp = elasticIp {
            try container.encode(elasticIp, forKey: Key("ElasticIp"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: Key("Encrypted"))
        }
        if let enhancedVpcRouting = enhancedVpcRouting {
            try container.encode(enhancedVpcRouting, forKey: Key("EnhancedVpcRouting"))
        }
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: Key("HsmClientCertificateIdentifier"))
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: Key("HsmConfigurationIdentifier"))
        }
        if let iamRoles = iamRoles {
            var iamRolesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("IamRoles"))
            for (index0, string0) in iamRoles.enumerated() {
                try iamRolesContainer.encode(string0, forKey: Key("IamRoleArn.\(index0.advanced(by: 1))"))
            }
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: Key("KmsKeyId"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: Key("MaintenanceTrackName"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: Key("ManualSnapshotRetentionPeriod"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: Key("MasterUserPassword"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: Key("MasterUsername"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: Key("NumberOfNodes"))
        }
        if let port = port {
            try container.encode(port, forKey: Key("Port"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: Key("PreferredMaintenanceWindow"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: Key("PubliclyAccessible"))
        }
        if let snapshotScheduleIdentifier = snapshotScheduleIdentifier {
            try container.encode(snapshotScheduleIdentifier, forKey: Key("SnapshotScheduleIdentifier"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("VpcSecurityGroupIds"))
            for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                try vpcSecurityGroupIdsContainer.encode(string0, forKey: Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateCluster", forKey:Key("Action"))
        try container.encode("2012-12-01", forKey:Key("Version"))
    }
}
