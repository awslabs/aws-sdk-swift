// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EndpointAuthorization: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedAllVPCs = "AllowedAllVPCs"
        case allowedVPCs = "AllowedVPCs"
        case authorizeTime = "AuthorizeTime"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterStatus = "ClusterStatus"
        case endpointCount = "EndpointCount"
        case grantee = "Grantee"
        case grantor = "Grantor"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if allowedAllVPCs != false {
            try container.encode(allowedAllVPCs, forKey: Key("AllowedAllVPCs"))
        }
        if let allowedVPCs = allowedVPCs {
            var allowedVPCsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AllowedVPCs"))
            for (index0, string0) in allowedVPCs.enumerated() {
                try allowedVPCsContainer.encode(string0, forKey: Key("VpcIdentifier.\(index0.advanced(by: 1))"))
            }
        }
        if let authorizeTime = authorizeTime {
            try container.encode(TimestampWrapper(authorizeTime, format: .dateTime), forKey: Key("authorizeTime"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: Key("ClusterIdentifier"))
        }
        if let clusterStatus = clusterStatus {
            try container.encode(clusterStatus, forKey: Key("ClusterStatus"))
        }
        if endpointCount != 0 {
            try container.encode(endpointCount, forKey: Key("EndpointCount"))
        }
        if let grantee = grantee {
            try container.encode(grantee, forKey: Key("Grantee"))
        }
        if let grantor = grantor {
            try container.encode(grantor, forKey: Key("Grantor"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let grantorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .grantor)
        grantor = grantorDecoded
        let granteeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .grantee)
        grantee = granteeDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let authorizeTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorizeTime)
        var authorizeTimeBuffer:Date? = nil
        if let authorizeTimeDecoded = authorizeTimeDecoded {
            authorizeTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(authorizeTimeDecoded, format: .dateTime)
        }
        authorizeTime = authorizeTimeBuffer
        let clusterStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterStatus)
        clusterStatus = clusterStatusDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AuthorizationStatus.self, forKey: .status)
        status = statusDecoded
        let allowedAllVPCsDecoded = try containerValues.decode(Bool.self, forKey: .allowedAllVPCs)
        allowedAllVPCs = allowedAllVPCsDecoded
        if containerValues.contains(.allowedVPCs) {
            struct KeyVal0{struct VpcIdentifier{}}
            let allowedVPCsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcIdentifier>.CodingKeys.self, forKey: .allowedVPCs)
            if let allowedVPCsWrappedContainer = allowedVPCsWrappedContainer {
                let allowedVPCsContainer = try allowedVPCsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var allowedVPCsBuffer:[String]? = nil
                if let allowedVPCsContainer = allowedVPCsContainer {
                    allowedVPCsBuffer = [String]()
                    for stringContainer0 in allowedVPCsContainer {
                        allowedVPCsBuffer?.append(stringContainer0)
                    }
                }
                allowedVPCs = allowedVPCsBuffer
            } else {
                allowedVPCs = []
            }
        } else {
            allowedVPCs = nil
        }
        let endpointCountDecoded = try containerValues.decode(Int.self, forKey: .endpointCount)
        endpointCount = endpointCountDecoded
    }
}
