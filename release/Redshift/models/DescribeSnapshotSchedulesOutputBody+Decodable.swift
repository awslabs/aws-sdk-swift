// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSnapshotSchedulesOutputBody: Equatable {
    public let snapshotSchedules: [SnapshotSchedule]?
    public let marker: String?
}

extension DescribeSnapshotSchedulesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case snapshotSchedules = "SnapshotSchedules"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeSnapshotSchedulesResult"))
        if containerValues.contains(.snapshotSchedules) {
            struct KeyVal0{struct SnapshotSchedule{}}
            let snapshotSchedulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotSchedule>.CodingKeys.self, forKey: .snapshotSchedules)
            if let snapshotSchedulesWrappedContainer = snapshotSchedulesWrappedContainer {
                let snapshotSchedulesContainer = try snapshotSchedulesWrappedContainer.decodeIfPresent([SnapshotSchedule].self, forKey: .member)
                var snapshotSchedulesBuffer:[SnapshotSchedule]? = nil
                if let snapshotSchedulesContainer = snapshotSchedulesContainer {
                    snapshotSchedulesBuffer = [SnapshotSchedule]()
                    for structureContainer0 in snapshotSchedulesContainer {
                        snapshotSchedulesBuffer?.append(structureContainer0)
                    }
                }
                snapshotSchedules = snapshotSchedulesBuffer
            } else {
                snapshotSchedules = []
            }
        } else {
            snapshotSchedules = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
