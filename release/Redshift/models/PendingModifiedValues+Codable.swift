// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PendingModifiedValues: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterType = "ClusterType"
        case clusterVersion = "ClusterVersion"
        case encryptionType = "EncryptionType"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case maintenanceTrackName = "MaintenanceTrackName"
        case masterUserPassword = "MasterUserPassword"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case publiclyAccessible = "PubliclyAccessible"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod {
            try container.encode(automatedSnapshotRetentionPeriod, forKey: Key("AutomatedSnapshotRetentionPeriod"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: Key("ClusterIdentifier"))
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: Key("ClusterType"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: Key("ClusterVersion"))
        }
        if let encryptionType = encryptionType {
            try container.encode(encryptionType, forKey: Key("EncryptionType"))
        }
        if let enhancedVpcRouting = enhancedVpcRouting {
            try container.encode(enhancedVpcRouting, forKey: Key("EnhancedVpcRouting"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: Key("MaintenanceTrackName"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: Key("MasterUserPassword"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: Key("NumberOfNodes"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: Key("PubliclyAccessible"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let clusterTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterType)
        clusterType = clusterTypeDecoded
        let clusterVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let automatedSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .automatedSnapshotRetentionPeriod)
        automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriodDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let enhancedVpcRoutingDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enhancedVpcRouting)
        enhancedVpcRouting = enhancedVpcRoutingDecoded
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
    }
}
