// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RevisionTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case databaseRevision = "DatabaseRevision"
        case databaseRevisionReleaseDate = "DatabaseRevisionReleaseDate"
        case description = "Description"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let databaseRevision = databaseRevision {
            try container.encode(databaseRevision, forKey: Key("DatabaseRevision"))
        }
        if let databaseRevisionReleaseDate = databaseRevisionReleaseDate {
            try container.encode(TimestampWrapper(databaseRevisionReleaseDate, format: .dateTime), forKey: Key("databaseRevisionReleaseDate"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseRevisionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .databaseRevision)
        databaseRevision = databaseRevisionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let databaseRevisionReleaseDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .databaseRevisionReleaseDate)
        var databaseRevisionReleaseDateBuffer:Date? = nil
        if let databaseRevisionReleaseDateDecoded = databaseRevisionReleaseDateDecoded {
            databaseRevisionReleaseDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(databaseRevisionReleaseDateDecoded, format: .dateTime)
        }
        databaseRevisionReleaseDate = databaseRevisionReleaseDateBuffer
    }
}
