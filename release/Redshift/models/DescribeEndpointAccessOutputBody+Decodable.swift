// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeEndpointAccessOutputBody: Equatable {
    public let endpointAccessList: [EndpointAccess]?
    public let marker: String?
}

extension DescribeEndpointAccessOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endpointAccessList = "EndpointAccessList"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeEndpointAccessResult"))
        if containerValues.contains(.endpointAccessList) {
            struct KeyVal0{struct member{}}
            let endpointAccessListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .endpointAccessList)
            if let endpointAccessListWrappedContainer = endpointAccessListWrappedContainer {
                let endpointAccessListContainer = try endpointAccessListWrappedContainer.decodeIfPresent([EndpointAccess].self, forKey: .member)
                var endpointAccessListBuffer:[EndpointAccess]? = nil
                if let endpointAccessListContainer = endpointAccessListContainer {
                    endpointAccessListBuffer = [EndpointAccess]()
                    for structureContainer0 in endpointAccessListContainer {
                        endpointAccessListBuffer?.append(structureContainer0)
                    }
                }
                endpointAccessList = endpointAccessListBuffer
            } else {
                endpointAccessList = []
            }
        } else {
            endpointAccessList = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
