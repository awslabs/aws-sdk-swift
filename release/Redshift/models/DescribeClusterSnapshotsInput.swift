// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p></p>
public struct DescribeClusterSnapshotsInput: Equatable {
    /// <p>A value that indicates whether to return snapshots only for an existing cluster.
    ///             You can perform table-level restore only by using a snapshot of an existing cluster,
    ///             that is, a cluster that has not been deleted. Values for this parameter work as follows: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>If <code>ClusterExists</code> is set to <code>true</code>,
    ///                         <code>ClusterIdentifier</code> is required.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If <code>ClusterExists</code> is set to <code>false</code> and
    ///                         <code>ClusterIdentifier</code> isn't specified, all snapshots
    ///                     associated with deleted clusters (orphaned snapshots) are returned. </p>
    ///             </li>
    ///             <li>
    ///                 <p>If <code>ClusterExists</code> is set to <code>false</code> and
    ///                         <code>ClusterIdentifier</code> is specified for a deleted cluster, snapshots
    ///                     associated with that cluster are returned.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If <code>ClusterExists</code> is set to <code>false</code> and
    ///                         <code>ClusterIdentifier</code> is specified for an existing cluster, no
    ///                     snapshots are returned. </p>
    ///             </li>
    ///          </ul>
    public let clusterExists: Bool?
    /// <p>The identifier of the cluster which generated the requested snapshots.</p>
    public let clusterIdentifier: String?
    /// <p>A time value that requests only snapshots created at or before the specified time.
    ///             The time value is specified in ISO 8601 format. For more information about ISO 8601, go
    ///             to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia
    ///                 page.</a>
    ///         </p>
    ///         <p>Example: <code>2012-07-16T18:00:00Z</code>
    ///         </p>
    public let endTime: Date?
    /// <p>An optional parameter that specifies the starting point to return a set of response
    ///             records. When the results of a <a>DescribeClusterSnapshots</a> request exceed
    ///             the value specified in <code>MaxRecords</code>, AWS returns a value in the
    ///                 <code>Marker</code> field of the response. You can retrieve the next set of response
    ///             records by providing the returned marker value in the <code>Marker</code> parameter and
    ///             retrying the request. </p>
    public let marker: String?
    /// <p>The maximum number of response records to return in each call. If the number of
    ///             remaining response records exceeds the specified <code>MaxRecords</code> value, a value
    ///             is returned in a <code>marker</code> field of the response. You can retrieve the next
    ///             set of records by retrying the command with the returned marker value. </p>
    ///         <p>Default: <code>100</code>
    ///         </p>
    ///         <p>Constraints: minimum 20, maximum 100.</p>
    public let maxRecords: Int?
    /// <p>The AWS customer account used to create or copy the snapshot. Use this field to
    ///             filter the results to snapshots owned by a particular account. To describe snapshots you
    ///             own, either specify your AWS customer account, or do not specify the
    ///             parameter.</p>
    public let ownerAccount: String?
    /// <p>The snapshot identifier of the snapshot about which to return
    ///             information.</p>
    public let snapshotIdentifier: String?
    /// <p>The type of snapshots for which you are requesting information. By default,
    ///             snapshots of all types are returned.</p>
    ///         <p>Valid Values: <code>automated</code> | <code>manual</code>
    ///         </p>
    public let snapshotType: String?
    /// <p></p>
    public let sortingEntities: [SnapshotSortingEntity]?
    /// <p>A value that requests only snapshots created at or after the specified time. The
    ///             time value is specified in ISO 8601 format. For more information about ISO 8601, go to
    ///             the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a>
    ///         </p>
    ///         <p>Example: <code>2012-07-16T18:00:00Z</code>
    ///         </p>
    public let startTime: Date?
    /// <p>A tag key or keys for which you want to return all matching cluster snapshots that
    ///             are associated with the specified key or keys. For example, suppose that you have
    ///             snapshots that are tagged with keys called <code>owner</code> and
    ///                 <code>environment</code>. If you specify both of these tag keys in the request,
    ///             Amazon Redshift returns a response with the snapshots that have either or both of these tag
    ///             keys associated with them.</p>
    public let tagKeys: [String]?
    /// <p>A tag value or values for which you want to return all matching cluster snapshots
    ///             that are associated with the specified tag value or values. For example, suppose that
    ///             you have snapshots that are tagged with values called <code>admin</code> and
    ///                 <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift
    ///             returns a response with the snapshots that have either or both of these tag values
    ///             associated with them.</p>
    public let tagValues: [String]?

    public init (
        clusterExists: Bool? = nil,
        clusterIdentifier: String? = nil,
        endTime: Date? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        ownerAccount: String? = nil,
        snapshotIdentifier: String? = nil,
        snapshotType: String? = nil,
        sortingEntities: [SnapshotSortingEntity]? = nil,
        startTime: Date? = nil,
        tagKeys: [String]? = nil,
        tagValues: [String]? = nil
    )
    {
        self.clusterExists = clusterExists
        self.clusterIdentifier = clusterIdentifier
        self.endTime = endTime
        self.marker = marker
        self.maxRecords = maxRecords
        self.ownerAccount = ownerAccount
        self.snapshotIdentifier = snapshotIdentifier
        self.snapshotType = snapshotType
        self.sortingEntities = sortingEntities
        self.startTime = startTime
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}
