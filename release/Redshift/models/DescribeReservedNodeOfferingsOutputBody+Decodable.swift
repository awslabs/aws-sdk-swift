// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedNodeOfferingsOutputBody: Equatable {
    public let marker: String?
    public let reservedNodeOfferings: [ReservedNodeOffering]?
}

extension DescribeReservedNodeOfferingsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case reservedNodeOfferings = "ReservedNodeOfferings"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeReservedNodeOfferingsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedNodeOfferings) {
            struct KeyVal0{struct ReservedNodeOffering{}}
            let reservedNodeOfferingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedNodeOffering>.CodingKeys.self, forKey: .reservedNodeOfferings)
            if let reservedNodeOfferingsWrappedContainer = reservedNodeOfferingsWrappedContainer {
                let reservedNodeOfferingsContainer = try reservedNodeOfferingsWrappedContainer.decodeIfPresent([ReservedNodeOffering].self, forKey: .member)
                var reservedNodeOfferingsBuffer:[ReservedNodeOffering]? = nil
                if let reservedNodeOfferingsContainer = reservedNodeOfferingsContainer {
                    reservedNodeOfferingsBuffer = [ReservedNodeOffering]()
                    for structureContainer0 in reservedNodeOfferingsContainer {
                        reservedNodeOfferingsBuffer?.append(structureContainer0)
                    }
                }
                reservedNodeOfferings = reservedNodeOfferingsBuffer
            } else {
                reservedNodeOfferings = []
            }
        } else {
            reservedNodeOfferings = nil
        }
    }
}
