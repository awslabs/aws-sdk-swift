// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case databaseVersion = "DatabaseVersion"
        case maintenanceTrackName = "MaintenanceTrackName"
        case supportedOperations = "SupportedOperations"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let databaseVersion = databaseVersion {
            try container.encode(databaseVersion, forKey: Key("DatabaseVersion"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: Key("MaintenanceTrackName"))
        }
        if let supportedOperations = supportedOperations {
            var supportedOperationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SupportedOperations"))
            for (index0, supportedoperation0) in supportedOperations.enumerated() {
                try supportedOperationsContainer.encode(supportedoperation0, forKey: Key("SupportedOperation.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let databaseVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .databaseVersion)
        databaseVersion = databaseVersionDecoded
        if containerValues.contains(.supportedOperations) {
            struct KeyVal0{struct SupportedOperation{}}
            let supportedOperationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SupportedOperation>.CodingKeys.self, forKey: .supportedOperations)
            if let supportedOperationsWrappedContainer = supportedOperationsWrappedContainer {
                let supportedOperationsContainer = try supportedOperationsWrappedContainer.decodeIfPresent([SupportedOperation].self, forKey: .member)
                var supportedOperationsBuffer:[SupportedOperation]? = nil
                if let supportedOperationsContainer = supportedOperationsContainer {
                    supportedOperationsBuffer = [SupportedOperation]()
                    for structureContainer0 in supportedOperationsContainer {
                        supportedOperationsBuffer?.append(structureContainer0)
                    }
                }
                supportedOperations = supportedOperationsBuffer
            } else {
                supportedOperations = []
            }
        } else {
            supportedOperations = nil
        }
    }
}
