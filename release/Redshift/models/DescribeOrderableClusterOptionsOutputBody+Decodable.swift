// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeOrderableClusterOptionsOutputBody: Equatable {
    public let orderableClusterOptions: [OrderableClusterOption]?
    public let marker: String?
}

extension DescribeOrderableClusterOptionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case orderableClusterOptions = "OrderableClusterOptions"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeOrderableClusterOptionsResult"))
        if containerValues.contains(.orderableClusterOptions) {
            struct KeyVal0{struct OrderableClusterOption{}}
            let orderableClusterOptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.OrderableClusterOption>.CodingKeys.self, forKey: .orderableClusterOptions)
            if let orderableClusterOptionsWrappedContainer = orderableClusterOptionsWrappedContainer {
                let orderableClusterOptionsContainer = try orderableClusterOptionsWrappedContainer.decodeIfPresent([OrderableClusterOption].self, forKey: .member)
                var orderableClusterOptionsBuffer:[OrderableClusterOption]? = nil
                if let orderableClusterOptionsContainer = orderableClusterOptionsContainer {
                    orderableClusterOptionsBuffer = [OrderableClusterOption]()
                    for structureContainer0 in orderableClusterOptionsContainer {
                        orderableClusterOptionsBuffer?.append(structureContainer0)
                    }
                }
                orderableClusterOptions = orderableClusterOptionsBuffer
            } else {
                orderableClusterOptions = []
            }
        } else {
            orderableClusterOptions = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
