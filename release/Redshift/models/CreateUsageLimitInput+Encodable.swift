// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateUsageLimitInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if amount != 0 {
            try container.encode(amount, forKey: Key("Amount"))
        }
        if let breachAction = breachAction {
            try container.encode(breachAction, forKey: Key("BreachAction"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: Key("ClusterIdentifier"))
        }
        if let featureType = featureType {
            try container.encode(featureType, forKey: Key("FeatureType"))
        }
        if let limitType = limitType {
            try container.encode(limitType, forKey: Key("LimitType"))
        }
        if let period = period {
            try container.encode(period, forKey: Key("Period"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateUsageLimit", forKey:Key("Action"))
        try container.encode("2012-12-01", forKey:Key("Version"))
    }
}
