// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Field: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blobValue
        case booleanValue
        case doubleValue
        case isNull
        case longValue
        case sdkUnknown
        case stringValue
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .blobValue(blobValue):
                if let blobValue = blobValue {
                    try container.encode(blobValue.base64EncodedString(), forKey: .blobValue)
                }
            case let .booleanValue(booleanValue):
                if let booleanValue = booleanValue {
                    try container.encode(booleanValue, forKey: .booleanValue)
                }
            case let .doubleValue(doubleValue):
                if let doubleValue = doubleValue {
                    try container.encode(doubleValue, forKey: .doubleValue)
                }
            case let .isNull(isNull):
                if let isNull = isNull {
                    try container.encode(isNull, forKey: .isNull)
                }
            case let .longValue(longValue):
                if let longValue = longValue {
                    try container.encode(longValue, forKey: .longValue)
                }
            case let .stringValue(stringValue):
                if let stringValue = stringValue {
                    try container.encode(stringValue, forKey: .stringValue)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let isNullDecoded = try values.decodeIfPresent(Bool.self, forKey: .isNull)
        if let isNull = isNullDecoded {
            self = .isNull(isNull)
            return
        }
        let booleanValueDecoded = try values.decodeIfPresent(Bool.self, forKey: .booleanValue)
        if let booleanValue = booleanValueDecoded {
            self = .booleanValue(booleanValue)
            return
        }
        let longValueDecoded = try values.decodeIfPresent(Int.self, forKey: .longValue)
        if let longValue = longValueDecoded {
            self = .longValue(longValue)
            return
        }
        let doubleValueDecoded = try values.decodeIfPresent(Double.self, forKey: .doubleValue)
        if let doubleValue = doubleValueDecoded {
            self = .doubleValue(doubleValue)
            return
        }
        let stringValueDecoded = try values.decodeIfPresent(String.self, forKey: .stringValue)
        if let stringValue = stringValueDecoded {
            self = .stringValue(stringValue)
            return
        }
        let blobValueDecoded = try values.decodeIfPresent(Data.self, forKey: .blobValue)
        if let blobValue = blobValueDecoded {
            self = .blobValue(blobValue)
            return
        }
        self = .sdkUnknown("")
    }
}
