// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ExecuteStatementInputBody: Equatable {
    public let sql: String?
    public let clusterIdentifier: String?
    public let secretArn: String?
    public let dbUser: String?
    public let database: String?
    public let withEvent: Bool?
    public let statementName: String?
}

extension ExecuteStatementInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case database = "Database"
        case dbUser = "DbUser"
        case secretArn = "SecretArn"
        case sql = "Sql"
        case statementName = "StatementName"
        case withEvent = "WithEvent"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sql)
        sql = sqlDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let dbUserDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dbUser)
        dbUser = dbUserDecoded
        let databaseDecoded = try containerValues.decodeIfPresent(String.self, forKey: .database)
        database = databaseDecoded
        let withEventDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .withEvent)
        withEvent = withEventDecoded
        let statementNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statementName)
        statementName = statementNameDecoded
    }
}
