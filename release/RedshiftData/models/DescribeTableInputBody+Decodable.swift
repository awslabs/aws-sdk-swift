// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTableInputBody: Equatable {
    public let clusterIdentifier: String?
    public let secretArn: String?
    public let dbUser: String?
    public let database: String?
    public let connectedDatabase: String?
    public let schema: String?
    public let table: String?
    public let nextToken: String?
    public let maxResults: Int
}

extension DescribeTableInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case connectedDatabase = "ConnectedDatabase"
        case database = "Database"
        case dbUser = "DbUser"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case schema = "Schema"
        case secretArn = "SecretArn"
        case table = "Table"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let dbUserDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dbUser)
        dbUser = dbUserDecoded
        let databaseDecoded = try containerValues.decodeIfPresent(String.self, forKey: .database)
        database = databaseDecoded
        let connectedDatabaseDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectedDatabase)
        connectedDatabase = connectedDatabaseDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schema)
        schema = schemaDecoded
        let tableDecoded = try containerValues.decodeIfPresent(String.self, forKey: .table)
        table = tableDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
