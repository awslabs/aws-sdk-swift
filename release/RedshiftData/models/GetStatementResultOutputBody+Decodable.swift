// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetStatementResultOutputBody: Equatable {
    public let records: [[Field]?]?
    public let columnMetadata: [ColumnMetadata]?
    public let totalNumRows: Int
    public let nextToken: String?
}

extension GetStatementResultOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case columnMetadata = "ColumnMetadata"
        case nextToken = "NextToken"
        case records = "Records"
        case totalNumRows = "TotalNumRows"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsContainer = try containerValues.decodeIfPresent([[Field]?].self, forKey: .records)
        var recordsDecoded0:[[Field]?]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [[Field]?]()
            for list0 in recordsContainer {
                var list0Decoded0 = [Field]()
                if let list0 = list0 {
                    for union1 in list0 {
                        list0Decoded0.append(union1)
                    }
                }
                recordsDecoded0?.append(list0Decoded0)
            }
        }
        records = recordsDecoded0
        let columnMetadataContainer = try containerValues.decodeIfPresent([ColumnMetadata].self, forKey: .columnMetadata)
        var columnMetadataDecoded0:[ColumnMetadata]? = nil
        if let columnMetadataContainer = columnMetadataContainer {
            columnMetadataDecoded0 = [ColumnMetadata]()
            for structure0 in columnMetadataContainer {
                columnMetadataDecoded0?.append(structure0)
            }
        }
        columnMetadata = columnMetadataDecoded0
        let totalNumRowsDecoded = try containerValues.decode(Int.self, forKey: .totalNumRows)
        totalNumRows = totalNumRowsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
