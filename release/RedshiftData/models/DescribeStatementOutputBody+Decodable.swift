// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeStatementOutputBody: Equatable {
    public let id: String?
    public let queryString: String?
    public let secretArn: String?
    public let dbUser: String?
    public let database: String?
    public let clusterIdentifier: String?
    public let resultRows: Int
    public let resultSize: Int
    public let duration: Int
    public let error: String?
    public let status: StatusString?
    public let createdAt: Date?
    public let updatedAt: Date?
    public let redshiftQueryId: Int
    public let redshiftPid: Int
    public let hasResultSet: Bool?
}

extension DescribeStatementOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case createdAt = "CreatedAt"
        case database = "Database"
        case dbUser = "DbUser"
        case duration = "Duration"
        case error = "Error"
        case hasResultSet = "HasResultSet"
        case id = "Id"
        case queryString = "QueryString"
        case redshiftPid = "RedshiftPid"
        case redshiftQueryId = "RedshiftQueryId"
        case resultRows = "ResultRows"
        case resultSize = "ResultSize"
        case secretArn = "SecretArn"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let dbUserDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dbUser)
        dbUser = dbUserDecoded
        let databaseDecoded = try containerValues.decodeIfPresent(String.self, forKey: .database)
        database = databaseDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let resultRowsDecoded = try containerValues.decode(Int.self, forKey: .resultRows)
        resultRows = resultRowsDecoded
        let resultSizeDecoded = try containerValues.decode(Int.self, forKey: .resultSize)
        resultSize = resultSizeDecoded
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let errorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .error)
        error = errorDecoded
        let statusDecoded = try containerValues.decodeIfPresent(StatusString.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let redshiftQueryIdDecoded = try containerValues.decode(Int.self, forKey: .redshiftQueryId)
        redshiftQueryId = redshiftQueryIdDecoded
        let redshiftPidDecoded = try containerValues.decode(Int.self, forKey: .redshiftPid)
        redshiftPid = redshiftPidDecoded
        let hasResultSetDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .hasResultSet)
        hasResultSet = hasResultSetDecoded
    }
}
