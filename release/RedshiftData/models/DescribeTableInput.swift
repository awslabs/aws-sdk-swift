// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeTableInput: Equatable {
    /// <p>The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. </p>
    public let clusterIdentifier: String?
    /// <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
    public let connectedDatabase: String?
    /// <p>The name of the database that contains the tables to be described.
    ///       If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
    public let database: String?
    /// <p>The database user name. This parameter is required when authenticating using temporary credentials. </p>
    public let dbUser: String?
    /// <p>The maximum number of tables to return in the response.
    ///       If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
    public let maxResults: Int
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    public let nextToken: String?
    /// <p>The schema that contains the table. If no schema is specified, then matching tables for all schemas are returned. </p>
    public let schema: String?
    /// <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. </p>
    public let secretArn: String?
    /// <p>The table name. If no table is specified, then all tables for all matching schemas are returned.
    ///        If no table and no schema is specified, then all tables for all schemas in the database are returned</p>
    public let table: String?

    public init (
        clusterIdentifier: String? = nil,
        connectedDatabase: String? = nil,
        database: String? = nil,
        dbUser: String? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil,
        schema: String? = nil,
        secretArn: String? = nil,
        table: String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.connectedDatabase = connectedDatabase
        self.database = database
        self.dbUser = dbUser
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.schema = schema
        self.secretArn = secretArn
        self.table = table
    }
}
