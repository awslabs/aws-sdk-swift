// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListTablesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case connectedDatabase = "ConnectedDatabase"
        case database = "Database"
        case dbUser = "DbUser"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case schemaPattern = "SchemaPattern"
        case secretArn = "SecretArn"
        case tablePattern = "TablePattern"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterIdentifier = clusterIdentifier {
            try encodeContainer.encode(clusterIdentifier, forKey: .clusterIdentifier)
        }
        if let connectedDatabase = connectedDatabase {
            try encodeContainer.encode(connectedDatabase, forKey: .connectedDatabase)
        }
        if let database = database {
            try encodeContainer.encode(database, forKey: .database)
        }
        if let dbUser = dbUser {
            try encodeContainer.encode(dbUser, forKey: .dbUser)
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let schemaPattern = schemaPattern {
            try encodeContainer.encode(schemaPattern, forKey: .schemaPattern)
        }
        if let secretArn = secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let tablePattern = tablePattern {
            try encodeContainer.encode(tablePattern, forKey: .tablePattern)
        }
    }
}
