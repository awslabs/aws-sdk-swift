// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum TCPFlag {
    case ack
    case cwr
    case ece
    case fin
    case psh
    case rst
    case syn
    case urg
    case sdkUnknown(String)
}

extension TCPFlag : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TCPFlag] {
        return [
            .ack,
            .cwr,
            .ece,
            .fin,
            .psh,
            .rst,
            .syn,
            .urg,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ack: return "ACK"
        case .cwr: return "CWR"
        case .ece: return "ECE"
        case .fin: return "FIN"
        case .psh: return "PSH"
        case .rst: return "RST"
        case .syn: return "SYN"
        case .urg: return "URG"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TCPFlag(rawValue: rawValue) ?? TCPFlag.sdkUnknown(rawValue)
    }
}
