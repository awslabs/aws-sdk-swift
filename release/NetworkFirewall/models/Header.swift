// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The 5-tuple criteria for AWS Network Firewall to use to inspect packet headers in stateful
///          traffic flow inspection. Traffic flows that match the criteria are a match for the
///          corresponding <a>StatefulRule</a>. </p>
public struct Header: Equatable {
    /// <p>The protocol to inspect for. To specify all, you can use <code>IP</code>, because all traffic on AWS and on the internet is IP.</p>
    public let `protocol`: StatefulRuleProtocol?
    /// <p>The destination IP address or address range to inspect for, in CIDR notation.
    ///           To match with any address, specify <code>ANY</code>. </p>
    ///          <p>Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4. </p>
    ///          <p>Examples: </p>
    ///          <ul>
    ///             <li>
    ///                <p>To configure Network Firewall to inspect for the IP address 192.0.2.44, specify <code>192.0.2.44/32</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify <code>192.0.2.0/24</code>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information about CIDR notation, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless
    ///          Inter-Domain Routing</a>.</p>
    public let destination: String?
    /// <p>The destination port to inspect for. You can specify an individual port, for
    ///            example <code>1994</code> and you can specify
    ///          a port range, for example <code>1990-1994</code>.
    ///           To match with any port, specify <code>ANY</code>. </p>
    public let destinationPort: String?
    /// <p>The direction of traffic flow to inspect. If set to <code>ANY</code>, the inspection
    ///          matches bidirectional traffic, both from the source to the destination and from the
    ///          destination to the source. If set to <code>FORWARD</code>, the inspection only matches
    ///          traffic going from the source to the destination. </p>
    public let direction: StatefulRuleDirection?
    /// <p>The source IP address or address range to inspect for, in CIDR notation.
    ///           To match with any address, specify <code>ANY</code>. </p>
    ///          <p>Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4. </p>
    ///          <p>Examples: </p>
    ///          <ul>
    ///             <li>
    ///                <p>To configure Network Firewall to inspect for the IP address 192.0.2.44, specify <code>192.0.2.44/32</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify <code>192.0.2.0/24</code>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information about CIDR notation, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless
    ///          Inter-Domain Routing</a>.</p>
    public let source: String?
    /// <p>The source port to inspect for. You can specify an individual port, for
    ///            example <code>1994</code> and you can specify a port
    ///                range, for example <code>1990-1994</code>.
    ///           To match with any port, specify <code>ANY</code>. </p>
    public let sourcePort: String?

    public init (
        `protocol`: StatefulRuleProtocol? = nil,
        destination: String? = nil,
        destinationPort: String? = nil,
        direction: StatefulRuleDirection? = nil,
        source: String? = nil,
        sourcePort: String? = nil
    )
    {
        self.`protocol` = `protocol`
        self.destination = destination
        self.destinationPort = destinationPort
        self.direction = direction
        self.source = source
        self.sourcePort = sourcePort
    }
}
