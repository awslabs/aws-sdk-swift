// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LoggingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logDestinationConfigs = "LogDestinationConfigs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logDestinationConfigs = logDestinationConfigs {
            var logDestinationConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logDestinationConfigs)
            for logdestinationconfigs0 in logDestinationConfigs {
                try logDestinationConfigsContainer.encode(logdestinationconfigs0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logDestinationConfigsContainer = try containerValues.decodeIfPresent([LogDestinationConfig].self, forKey: .logDestinationConfigs)
        var logDestinationConfigsDecoded0:[LogDestinationConfig]? = nil
        if let logDestinationConfigsContainer = logDestinationConfigsContainer {
            logDestinationConfigsDecoded0 = [LogDestinationConfig]()
            for structure0 in logDestinationConfigsContainer {
                logDestinationConfigsDecoded0?.append(structure0)
            }
        }
        logDestinationConfigs = logDestinationConfigsDecoded0
    }
}
