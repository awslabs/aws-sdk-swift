// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RulesSourceList: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case generatedRulesType = "GeneratedRulesType"
        case targetTypes = "TargetTypes"
        case targets = "Targets"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let generatedRulesType = generatedRulesType {
            try encodeContainer.encode(generatedRulesType.rawValue, forKey: .generatedRulesType)
        }
        if let targetTypes = targetTypes {
            var targetTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetTypes)
            for targettypes0 in targetTypes {
                try targetTypesContainer.encode(targettypes0.rawValue)
            }
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for ruletargets0 in targets {
                try targetsContainer.encode(ruletargets0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetsContainer = try containerValues.decodeIfPresent([String].self, forKey: .targets)
        var targetsDecoded0:[String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [String]()
            for string0 in targetsContainer {
                targetsDecoded0?.append(string0)
            }
        }
        targets = targetsDecoded0
        let targetTypesContainer = try containerValues.decodeIfPresent([TargetType].self, forKey: .targetTypes)
        var targetTypesDecoded0:[TargetType]? = nil
        if let targetTypesContainer = targetTypesContainer {
            targetTypesDecoded0 = [TargetType]()
            for string0 in targetTypesContainer {
                targetTypesDecoded0?.append(string0)
            }
        }
        targetTypes = targetTypesDecoded0
        let generatedRulesTypeDecoded = try containerValues.decodeIfPresent(GeneratedRulesType.self, forKey: .generatedRulesType)
        generatedRulesType = generatedRulesTypeDecoded
    }
}
