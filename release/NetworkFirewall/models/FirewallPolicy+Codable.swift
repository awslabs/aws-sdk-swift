// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FirewallPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case statefulRuleGroupReferences = "StatefulRuleGroupReferences"
        case statelessCustomActions = "StatelessCustomActions"
        case statelessDefaultActions = "StatelessDefaultActions"
        case statelessFragmentDefaultActions = "StatelessFragmentDefaultActions"
        case statelessRuleGroupReferences = "StatelessRuleGroupReferences"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let statefulRuleGroupReferences = statefulRuleGroupReferences {
            var statefulRuleGroupReferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statefulRuleGroupReferences)
            for statefulrulegroupreferences0 in statefulRuleGroupReferences {
                try statefulRuleGroupReferencesContainer.encode(statefulrulegroupreferences0)
            }
        }
        if let statelessCustomActions = statelessCustomActions {
            var statelessCustomActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statelessCustomActions)
            for customactions0 in statelessCustomActions {
                try statelessCustomActionsContainer.encode(customactions0)
            }
        }
        if let statelessDefaultActions = statelessDefaultActions {
            var statelessDefaultActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statelessDefaultActions)
            for statelessactions0 in statelessDefaultActions {
                try statelessDefaultActionsContainer.encode(statelessactions0)
            }
        }
        if let statelessFragmentDefaultActions = statelessFragmentDefaultActions {
            var statelessFragmentDefaultActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statelessFragmentDefaultActions)
            for statelessactions0 in statelessFragmentDefaultActions {
                try statelessFragmentDefaultActionsContainer.encode(statelessactions0)
            }
        }
        if let statelessRuleGroupReferences = statelessRuleGroupReferences {
            var statelessRuleGroupReferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statelessRuleGroupReferences)
            for statelessrulegroupreferences0 in statelessRuleGroupReferences {
                try statelessRuleGroupReferencesContainer.encode(statelessrulegroupreferences0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statelessRuleGroupReferencesContainer = try containerValues.decodeIfPresent([StatelessRuleGroupReference].self, forKey: .statelessRuleGroupReferences)
        var statelessRuleGroupReferencesDecoded0:[StatelessRuleGroupReference]? = nil
        if let statelessRuleGroupReferencesContainer = statelessRuleGroupReferencesContainer {
            statelessRuleGroupReferencesDecoded0 = [StatelessRuleGroupReference]()
            for structure0 in statelessRuleGroupReferencesContainer {
                statelessRuleGroupReferencesDecoded0?.append(structure0)
            }
        }
        statelessRuleGroupReferences = statelessRuleGroupReferencesDecoded0
        let statelessDefaultActionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .statelessDefaultActions)
        var statelessDefaultActionsDecoded0:[String]? = nil
        if let statelessDefaultActionsContainer = statelessDefaultActionsContainer {
            statelessDefaultActionsDecoded0 = [String]()
            for string0 in statelessDefaultActionsContainer {
                statelessDefaultActionsDecoded0?.append(string0)
            }
        }
        statelessDefaultActions = statelessDefaultActionsDecoded0
        let statelessFragmentDefaultActionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .statelessFragmentDefaultActions)
        var statelessFragmentDefaultActionsDecoded0:[String]? = nil
        if let statelessFragmentDefaultActionsContainer = statelessFragmentDefaultActionsContainer {
            statelessFragmentDefaultActionsDecoded0 = [String]()
            for string0 in statelessFragmentDefaultActionsContainer {
                statelessFragmentDefaultActionsDecoded0?.append(string0)
            }
        }
        statelessFragmentDefaultActions = statelessFragmentDefaultActionsDecoded0
        let statelessCustomActionsContainer = try containerValues.decodeIfPresent([CustomAction].self, forKey: .statelessCustomActions)
        var statelessCustomActionsDecoded0:[CustomAction]? = nil
        if let statelessCustomActionsContainer = statelessCustomActionsContainer {
            statelessCustomActionsDecoded0 = [CustomAction]()
            for structure0 in statelessCustomActionsContainer {
                statelessCustomActionsDecoded0?.append(structure0)
            }
        }
        statelessCustomActions = statelessCustomActionsDecoded0
        let statefulRuleGroupReferencesContainer = try containerValues.decodeIfPresent([StatefulRuleGroupReference].self, forKey: .statefulRuleGroupReferences)
        var statefulRuleGroupReferencesDecoded0:[StatefulRuleGroupReference]? = nil
        if let statefulRuleGroupReferencesContainer = statefulRuleGroupReferencesContainer {
            statefulRuleGroupReferencesDecoded0 = [StatefulRuleGroupReference]()
            for structure0 in statefulRuleGroupReferencesContainer {
                statefulRuleGroupReferencesDecoded0?.append(structure0)
            }
        }
        statefulRuleGroupReferences = statefulRuleGroupReferencesDecoded0
    }
}
