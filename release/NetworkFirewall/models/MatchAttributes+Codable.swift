// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MatchAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationPorts = "DestinationPorts"
        case destinations = "Destinations"
        case protocols = "Protocols"
        case sourcePorts = "SourcePorts"
        case sources = "Sources"
        case tCPFlags = "TCPFlags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationPorts = destinationPorts {
            var destinationPortsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinationPorts)
            for portranges0 in destinationPorts {
                try destinationPortsContainer.encode(portranges0)
            }
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for addresses0 in destinations {
                try destinationsContainer.encode(addresses0)
            }
        }
        if let protocols = protocols {
            var protocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protocols)
            for protocolnumbers0 in protocols {
                try protocolsContainer.encode(protocolnumbers0)
            }
        }
        if let sourcePorts = sourcePorts {
            var sourcePortsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourcePorts)
            for portranges0 in sourcePorts {
                try sourcePortsContainer.encode(portranges0)
            }
        }
        if let sources = sources {
            var sourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sources)
            for addresses0 in sources {
                try sourcesContainer.encode(addresses0)
            }
        }
        if let tCPFlags = tCPFlags {
            var tCPFlagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tCPFlags)
            for tcpflags0 in tCPFlags {
                try tCPFlagsContainer.encode(tcpflags0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourcesContainer = try containerValues.decodeIfPresent([Address].self, forKey: .sources)
        var sourcesDecoded0:[Address]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [Address]()
            for structure0 in sourcesContainer {
                sourcesDecoded0?.append(structure0)
            }
        }
        sources = sourcesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([Address].self, forKey: .destinations)
        var destinationsDecoded0:[Address]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [Address]()
            for structure0 in destinationsContainer {
                destinationsDecoded0?.append(structure0)
            }
        }
        destinations = destinationsDecoded0
        let sourcePortsContainer = try containerValues.decodeIfPresent([PortRange].self, forKey: .sourcePorts)
        var sourcePortsDecoded0:[PortRange]? = nil
        if let sourcePortsContainer = sourcePortsContainer {
            sourcePortsDecoded0 = [PortRange]()
            for structure0 in sourcePortsContainer {
                sourcePortsDecoded0?.append(structure0)
            }
        }
        sourcePorts = sourcePortsDecoded0
        let destinationPortsContainer = try containerValues.decodeIfPresent([PortRange].self, forKey: .destinationPorts)
        var destinationPortsDecoded0:[PortRange]? = nil
        if let destinationPortsContainer = destinationPortsContainer {
            destinationPortsDecoded0 = [PortRange]()
            for structure0 in destinationPortsContainer {
                destinationPortsDecoded0?.append(structure0)
            }
        }
        destinationPorts = destinationPortsDecoded0
        let protocolsContainer = try containerValues.decodeIfPresent([Int].self, forKey: .protocols)
        var protocolsDecoded0:[Int]? = nil
        if let protocolsContainer = protocolsContainer {
            protocolsDecoded0 = [Int]()
            for integer0 in protocolsContainer {
                protocolsDecoded0?.append(integer0)
            }
        }
        protocols = protocolsDecoded0
        let tCPFlagsContainer = try containerValues.decodeIfPresent([TCPFlagField].self, forKey: .tCPFlags)
        var tCPFlagsDecoded0:[TCPFlagField]? = nil
        if let tCPFlagsContainer = tCPFlagsContainer {
            tCPFlagsDecoded0 = [TCPFlagField]()
            for structure0 in tCPFlagsContainer {
                tCPFlagsDecoded0?.append(structure0)
            }
        }
        tCPFlags = tCPFlagsDecoded0
    }
}
