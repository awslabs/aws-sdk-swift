// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SyncState: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attachment = "Attachment"
        case config = "Config"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachment = attachment {
            try encodeContainer.encode(attachment, forKey: .attachment)
        }
        if let config = config {
            var configContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .config)
            for (dictKey0, syncstateconfig0) in config {
                try configContainer.encode(syncstateconfig0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachmentDecoded = try containerValues.decodeIfPresent(Attachment.self, forKey: .attachment)
        attachment = attachmentDecoded
        let configContainer = try containerValues.decodeIfPresent([String:PerObjectStatus].self, forKey: .config)
        var configDecoded0: [String:PerObjectStatus]? = nil
        if let configContainer = configContainer {
            configDecoded0 = [String:PerObjectStatus]()
            for (key0, perobjectstatus0) in configContainer {
                configDecoded0?[key0] = perobjectstatus0
            }
        }
        config = configDecoded0
    }
}
