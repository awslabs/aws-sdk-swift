// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PublishMetricAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dimensions = "Dimensions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for dimensions0 in dimensions {
                try dimensionsContainer.encode(dimensions0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionsContainer = try containerValues.decodeIfPresent([Dimension].self, forKey: .dimensions)
        var dimensionsDecoded0:[Dimension]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [Dimension]()
            for structure0 in dimensionsContainer {
                dimensionsDecoded0?.append(structure0)
            }
        }
        dimensions = dimensionsDecoded0
    }
}
