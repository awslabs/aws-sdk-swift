// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Criteria for Network Firewall to use to inspect an individual packet in stateless rule inspection. Each match attributes set can include one or more items such as IP address, CIDR range, port number, protocol, and TCP flags. </p>
public struct MatchAttributes: Equatable {
    /// <p>The destination ports to inspect for. If not specified, this matches with any
    ///          destination port. This setting is only used for protocols 6 (TCP) and 17 (UDP). </p>
    ///          <p>You can specify individual ports, for example <code>1994</code> and you can specify port
    ///          ranges, for example <code>1990-1994</code>. </p>
    public let destinationPorts: [PortRange]?
    /// <p>The destination IP addresses and address ranges to inspect for, in CIDR notation. If not
    ///          specified, this matches with any destination address. </p>
    public let destinations: [Address]?
    /// <p>The protocols to inspect for, specified using each protocol's assigned internet protocol
    ///          number (IANA). If not specified, this matches with any protocol. </p>
    public let protocols: [Int]?
    /// <p>The source ports to inspect for. If not specified, this matches with any source port.
    ///          This setting is only used for protocols 6 (TCP) and 17 (UDP). </p>
    ///          <p>You can specify individual ports, for example <code>1994</code> and you can specify port
    ///          ranges, for example <code>1990-1994</code>. </p>
    public let sourcePorts: [PortRange]?
    /// <p>The source IP addresses and address ranges to inspect for, in CIDR notation. If not
    ///          specified, this matches with any source address. </p>
    public let sources: [Address]?
    /// <p>The TCP flags and masks to inspect for. If not specified, this matches with any
    ///          settings. This setting is only used for protocol 6 (TCP).</p>
    public let tCPFlags: [TCPFlagField]?

    public init (
        destinationPorts: [PortRange]? = nil,
        destinations: [Address]? = nil,
        protocols: [Int]? = nil,
        sourcePorts: [PortRange]? = nil,
        sources: [Address]? = nil,
        tCPFlags: [TCPFlagField]? = nil
    )
    {
        self.destinationPorts = destinationPorts
        self.destinations = destinations
        self.protocols = protocols
        self.sourcePorts = sourcePorts
        self.sources = sources
        self.tCPFlags = tCPFlags
    }
}
