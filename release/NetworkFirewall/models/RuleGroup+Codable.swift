// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RuleGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ruleVariables = "RuleVariables"
        case rulesSource = "RulesSource"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleVariables = ruleVariables {
            try encodeContainer.encode(ruleVariables, forKey: .ruleVariables)
        }
        if let rulesSource = rulesSource {
            try encodeContainer.encode(rulesSource, forKey: .rulesSource)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleVariablesDecoded = try containerValues.decodeIfPresent(RuleVariables.self, forKey: .ruleVariables)
        ruleVariables = ruleVariablesDecoded
        let rulesSourceDecoded = try containerValues.decodeIfPresent(RulesSource.self, forKey: .rulesSource)
        rulesSource = rulesSourceDecoded
    }
}
