// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRuleGroupInputBody: Equatable {
    public let ruleGroupName: String?
    public let ruleGroup: RuleGroup?
    public let rules: String?
    public let type: RuleGroupType?
    public let description: String?
    public let capacity: Int?
    public let tags: [Tag]?
    public let dryRun: Bool
}

extension CreateRuleGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case capacity = "Capacity"
        case description = "Description"
        case dryRun = "DryRun"
        case ruleGroup = "RuleGroup"
        case ruleGroupName = "RuleGroupName"
        case rules = "Rules"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleGroupName)
        ruleGroupName = ruleGroupNameDecoded
        let ruleGroupDecoded = try containerValues.decodeIfPresent(RuleGroup.self, forKey: .ruleGroup)
        ruleGroup = ruleGroupDecoded
        let rulesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rules)
        rules = rulesDecoded
        let typeDecoded = try containerValues.decodeIfPresent(RuleGroupType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .capacity)
        capacity = capacityDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let dryRunDecoded = try containerValues.decode(Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
