// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum StatefulRuleProtocol {
    case any
    case dcerpc
    case dhcp
    case dns
    case ftp
    case http
    case icmp
    case ikev2
    case imap
    case krb5
    case msn
    case ntp
    case smb
    case smtp
    case ssh
    case tcp
    case tftp
    case tls
    case udp
    case sdkUnknown(String)
}

extension StatefulRuleProtocol : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StatefulRuleProtocol] {
        return [
            .any,
            .dcerpc,
            .dhcp,
            .dns,
            .ftp,
            .http,
            .icmp,
            .ikev2,
            .imap,
            .krb5,
            .msn,
            .ntp,
            .smb,
            .smtp,
            .ssh,
            .tcp,
            .tftp,
            .tls,
            .udp,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .any: return "IP"
        case .dcerpc: return "DCERPC"
        case .dhcp: return "DHCP"
        case .dns: return "DNS"
        case .ftp: return "FTP"
        case .http: return "HTTP"
        case .icmp: return "ICMP"
        case .ikev2: return "IKEV2"
        case .imap: return "IMAP"
        case .krb5: return "KRB5"
        case .msn: return "MSN"
        case .ntp: return "NTP"
        case .smb: return "SMB"
        case .smtp: return "SMTP"
        case .ssh: return "SSH"
        case .tcp: return "TCP"
        case .tftp: return "TFTP"
        case .tls: return "TLS"
        case .udp: return "UDP"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StatefulRuleProtocol(rawValue: rawValue) ?? StatefulRuleProtocol.sdkUnknown(rawValue)
    }
}
