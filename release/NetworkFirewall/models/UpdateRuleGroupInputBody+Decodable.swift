// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateRuleGroupInputBody: Equatable {
    public let updateToken: String?
    public let ruleGroupArn: String?
    public let ruleGroupName: String?
    public let ruleGroup: RuleGroup?
    public let rules: String?
    public let type: RuleGroupType?
    public let description: String?
    public let dryRun: Bool
}

extension UpdateRuleGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case dryRun = "DryRun"
        case ruleGroup = "RuleGroup"
        case ruleGroupArn = "RuleGroupArn"
        case ruleGroupName = "RuleGroupName"
        case rules = "Rules"
        case type = "Type"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let ruleGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleGroupArn)
        ruleGroupArn = ruleGroupArnDecoded
        let ruleGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleGroupName)
        ruleGroupName = ruleGroupNameDecoded
        let ruleGroupDecoded = try containerValues.decodeIfPresent(RuleGroup.self, forKey: .ruleGroup)
        ruleGroup = ruleGroupDecoded
        let rulesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rules)
        rules = rulesDecoded
        let typeDecoded = try containerValues.decodeIfPresent(RuleGroupType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let dryRunDecoded = try containerValues.decode(Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
