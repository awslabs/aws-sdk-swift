// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TranslateTextOutputBody: Equatable {
    public let translatedText: String?
    public let sourceLanguageCode: String?
    public let targetLanguageCode: String?
    public let appliedTerminologies: [AppliedTerminology]?
}

extension TranslateTextOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case appliedTerminologies = "AppliedTerminologies"
        case sourceLanguageCode = "SourceLanguageCode"
        case targetLanguageCode = "TargetLanguageCode"
        case translatedText = "TranslatedText"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let translatedTextDecoded = try containerValues.decodeIfPresent(String.self, forKey: .translatedText)
        translatedText = translatedTextDecoded
        let sourceLanguageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceLanguageCode)
        sourceLanguageCode = sourceLanguageCodeDecoded
        let targetLanguageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetLanguageCode)
        targetLanguageCode = targetLanguageCodeDecoded
        let appliedTerminologiesContainer = try containerValues.decodeIfPresent([AppliedTerminology].self, forKey: .appliedTerminologies)
        var appliedTerminologiesDecoded0:[AppliedTerminology]? = nil
        if let appliedTerminologiesContainer = appliedTerminologiesContainer {
            appliedTerminologiesDecoded0 = [AppliedTerminology]()
            for structure0 in appliedTerminologiesContainer {
                appliedTerminologiesDecoded0?.append(structure0)
            }
        }
        appliedTerminologies = appliedTerminologiesDecoded0
    }
}
