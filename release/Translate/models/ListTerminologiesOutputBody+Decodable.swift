// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTerminologiesOutputBody: Equatable {
    public let terminologyPropertiesList: [TerminologyProperties]?
    public let nextToken: String?
}

extension ListTerminologiesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case terminologyPropertiesList = "TerminologyPropertiesList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let terminologyPropertiesListContainer = try containerValues.decodeIfPresent([TerminologyProperties].self, forKey: .terminologyPropertiesList)
        var terminologyPropertiesListDecoded0:[TerminologyProperties]? = nil
        if let terminologyPropertiesListContainer = terminologyPropertiesListContainer {
            terminologyPropertiesListDecoded0 = [TerminologyProperties]()
            for structure0 in terminologyPropertiesListContainer {
                terminologyPropertiesListDecoded0?.append(structure0)
            }
        }
        terminologyPropertiesList = terminologyPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
