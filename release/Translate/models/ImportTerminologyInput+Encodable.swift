// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImportTerminologyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case encryptionKey = "EncryptionKey"
        case mergeStrategy = "MergeStrategy"
        case name = "Name"
        case terminologyData = "TerminologyData"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encryptionKey = encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let mergeStrategy = mergeStrategy {
            try encodeContainer.encode(mergeStrategy.rawValue, forKey: .mergeStrategy)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let terminologyData = terminologyData {
            try encodeContainer.encode(terminologyData, forKey: .terminologyData)
        }
    }
}
