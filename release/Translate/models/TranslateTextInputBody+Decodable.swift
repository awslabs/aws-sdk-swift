// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TranslateTextInputBody: Equatable {
    public let text: String?
    public let terminologyNames: [String]?
    public let sourceLanguageCode: String?
    public let targetLanguageCode: String?
}

extension TranslateTextInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case sourceLanguageCode = "SourceLanguageCode"
        case targetLanguageCode = "TargetLanguageCode"
        case terminologyNames = "TerminologyNames"
        case text = "Text"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(String.self, forKey: .text)
        text = textDecoded
        let terminologyNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .terminologyNames)
        var terminologyNamesDecoded0:[String]? = nil
        if let terminologyNamesContainer = terminologyNamesContainer {
            terminologyNamesDecoded0 = [String]()
            for string0 in terminologyNamesContainer {
                terminologyNamesDecoded0?.append(string0)
            }
        }
        terminologyNames = terminologyNamesDecoded0
        let sourceLanguageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceLanguageCode)
        sourceLanguageCode = sourceLanguageCodeDecoded
        let targetLanguageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetLanguageCode)
        targetLanguageCode = targetLanguageCodeDecoded
    }
}
