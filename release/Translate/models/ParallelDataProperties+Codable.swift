// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ParallelDataProperties: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case createdAt = "CreatedAt"
        case description = "Description"
        case encryptionKey = "EncryptionKey"
        case failedRecordCount = "FailedRecordCount"
        case importedDataSize = "ImportedDataSize"
        case importedRecordCount = "ImportedRecordCount"
        case lastUpdatedAt = "LastUpdatedAt"
        case latestUpdateAttemptAt = "LatestUpdateAttemptAt"
        case latestUpdateAttemptStatus = "LatestUpdateAttemptStatus"
        case message = "Message"
        case name = "Name"
        case parallelDataConfig = "ParallelDataConfig"
        case skippedRecordCount = "SkippedRecordCount"
        case sourceLanguageCode = "SourceLanguageCode"
        case status = "Status"
        case targetLanguageCodes = "TargetLanguageCodes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encryptionKey = encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let failedRecordCount = failedRecordCount {
            try encodeContainer.encode(failedRecordCount, forKey: .failedRecordCount)
        }
        if let importedDataSize = importedDataSize {
            try encodeContainer.encode(importedDataSize, forKey: .importedDataSize)
        }
        if let importedRecordCount = importedRecordCount {
            try encodeContainer.encode(importedRecordCount, forKey: .importedRecordCount)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let latestUpdateAttemptAt = latestUpdateAttemptAt {
            try encodeContainer.encode(latestUpdateAttemptAt.timeIntervalSince1970, forKey: .latestUpdateAttemptAt)
        }
        if let latestUpdateAttemptStatus = latestUpdateAttemptStatus {
            try encodeContainer.encode(latestUpdateAttemptStatus.rawValue, forKey: .latestUpdateAttemptStatus)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parallelDataConfig = parallelDataConfig {
            try encodeContainer.encode(parallelDataConfig, forKey: .parallelDataConfig)
        }
        if let skippedRecordCount = skippedRecordCount {
            try encodeContainer.encode(skippedRecordCount, forKey: .skippedRecordCount)
        }
        if let sourceLanguageCode = sourceLanguageCode {
            try encodeContainer.encode(sourceLanguageCode, forKey: .sourceLanguageCode)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetLanguageCodes = targetLanguageCodes {
            var targetLanguageCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetLanguageCodes)
            for languagecodestringlist0 in targetLanguageCodes {
                try targetLanguageCodesContainer.encode(languagecodestringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ParallelDataStatus.self, forKey: .status)
        status = statusDecoded
        let sourceLanguageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceLanguageCode)
        sourceLanguageCode = sourceLanguageCodeDecoded
        let targetLanguageCodesContainer = try containerValues.decodeIfPresent([String].self, forKey: .targetLanguageCodes)
        var targetLanguageCodesDecoded0:[String]? = nil
        if let targetLanguageCodesContainer = targetLanguageCodesContainer {
            targetLanguageCodesDecoded0 = [String]()
            for string0 in targetLanguageCodesContainer {
                targetLanguageCodesDecoded0?.append(string0)
            }
        }
        targetLanguageCodes = targetLanguageCodesDecoded0
        let parallelDataConfigDecoded = try containerValues.decodeIfPresent(ParallelDataConfig.self, forKey: .parallelDataConfig)
        parallelDataConfig = parallelDataConfigDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let importedDataSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .importedDataSize)
        importedDataSize = importedDataSizeDecoded
        let importedRecordCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .importedRecordCount)
        importedRecordCount = importedRecordCountDecoded
        let failedRecordCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .failedRecordCount)
        failedRecordCount = failedRecordCountDecoded
        let skippedRecordCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .skippedRecordCount)
        skippedRecordCount = skippedRecordCountDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(EncryptionKey.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let latestUpdateAttemptStatusDecoded = try containerValues.decodeIfPresent(ParallelDataStatus.self, forKey: .latestUpdateAttemptStatus)
        latestUpdateAttemptStatus = latestUpdateAttemptStatusDecoded
        let latestUpdateAttemptAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .latestUpdateAttemptAt)
        latestUpdateAttemptAt = latestUpdateAttemptAtDecoded
    }
}
