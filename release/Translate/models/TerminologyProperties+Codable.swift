// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TerminologyProperties: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case createdAt = "CreatedAt"
        case description = "Description"
        case encryptionKey = "EncryptionKey"
        case lastUpdatedAt = "LastUpdatedAt"
        case name = "Name"
        case sizeBytes = "SizeBytes"
        case sourceLanguageCode = "SourceLanguageCode"
        case targetLanguageCodes = "TargetLanguageCodes"
        case termCount = "TermCount"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encryptionKey = encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let sizeBytes = sizeBytes {
            try encodeContainer.encode(sizeBytes, forKey: .sizeBytes)
        }
        if let sourceLanguageCode = sourceLanguageCode {
            try encodeContainer.encode(sourceLanguageCode, forKey: .sourceLanguageCode)
        }
        if let targetLanguageCodes = targetLanguageCodes {
            var targetLanguageCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetLanguageCodes)
            for languagecodestringlist0 in targetLanguageCodes {
                try targetLanguageCodesContainer.encode(languagecodestringlist0)
            }
        }
        if let termCount = termCount {
            try encodeContainer.encode(termCount, forKey: .termCount)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let sourceLanguageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceLanguageCode)
        sourceLanguageCode = sourceLanguageCodeDecoded
        let targetLanguageCodesContainer = try containerValues.decodeIfPresent([String].self, forKey: .targetLanguageCodes)
        var targetLanguageCodesDecoded0:[String]? = nil
        if let targetLanguageCodesContainer = targetLanguageCodesContainer {
            targetLanguageCodesDecoded0 = [String]()
            for string0 in targetLanguageCodesContainer {
                targetLanguageCodesDecoded0?.append(string0)
            }
        }
        targetLanguageCodes = targetLanguageCodesDecoded0
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(EncryptionKey.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let sizeBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .sizeBytes)
        sizeBytes = sizeBytesDecoded
        let termCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .termCount)
        termCount = termCountDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
    }
}
