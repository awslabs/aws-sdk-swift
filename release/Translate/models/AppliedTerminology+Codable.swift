// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppliedTerminology: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case terms = "Terms"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let terms = terms {
            var termsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .terms)
            for termlist0 in terms {
                try termsContainer.encode(termlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let termsContainer = try containerValues.decodeIfPresent([Term].self, forKey: .terms)
        var termsDecoded0:[Term]? = nil
        if let termsContainer = termsContainer {
            termsDecoded0 = [Term]()
            for structure0 in termsContainer {
                termsDecoded0?.append(structure0)
            }
        }
        terms = termsDecoded0
    }
}
