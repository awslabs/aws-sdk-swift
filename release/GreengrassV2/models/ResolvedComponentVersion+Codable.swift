// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResolvedComponentVersion: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case componentName
        case componentVersion
        case recipe
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let componentName = componentName {
            try encodeContainer.encode(componentName, forKey: .componentName)
        }
        if let componentVersion = componentVersion {
            try encodeContainer.encode(componentVersion, forKey: .componentVersion)
        }
        if let recipe = recipe {
            try encodeContainer.encode(recipe.base64EncodedString(), forKey: .recipe)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let componentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .componentName)
        componentName = componentNameDecoded
        let componentVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .componentVersion)
        componentVersion = componentVersionDecoded
        let recipeDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .recipe)
        recipe = recipeDecoded
    }
}
