// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComponentConfigurationUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case merge
        case reset
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let merge = merge {
            try encodeContainer.encode(merge, forKey: .merge)
        }
        if let reset = reset {
            var resetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reset)
            for componentconfigurationpathlist0 in reset {
                try resetContainer.encode(componentconfigurationpathlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mergeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .merge)
        merge = mergeDecoded
        let resetContainer = try containerValues.decodeIfPresent([String].self, forKey: .reset)
        var resetDecoded0:[String]? = nil
        if let resetContainer = resetContainer {
            resetDecoded0 = [String]()
            for string0 in resetContainer {
                resetDecoded0?.append(string0)
            }
        }
        reset = resetDecoded0
    }
}
