// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ResolveComponentCandidatesInputBody: Equatable {
    public let platform: ComponentPlatform?
    public let componentCandidates: [ComponentCandidate]?
}

extension ResolveComponentCandidatesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case componentCandidates
        case platform
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformDecoded = try containerValues.decodeIfPresent(ComponentPlatform.self, forKey: .platform)
        platform = platformDecoded
        let componentCandidatesContainer = try containerValues.decodeIfPresent([ComponentCandidate].self, forKey: .componentCandidates)
        var componentCandidatesDecoded0:[ComponentCandidate]? = nil
        if let componentCandidatesContainer = componentCandidatesContainer {
            componentCandidatesDecoded0 = [ComponentCandidate]()
            for structure0 in componentCandidatesContainer {
                componentCandidatesDecoded0?.append(structure0)
            }
        }
        componentCandidates = componentCandidatesDecoded0
    }
}
