// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListComponentsOutputBody: Equatable {
    public let components: [Component]?
    public let nextToken: String?
}

extension ListComponentsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case components
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let componentsContainer = try containerValues.decodeIfPresent([Component].self, forKey: .components)
        var componentsDecoded0:[Component]? = nil
        if let componentsContainer = componentsContainer {
            componentsDecoded0 = [Component]()
            for structure0 in componentsContainer {
                componentsDecoded0?.append(structure0)
            }
        }
        components = componentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
