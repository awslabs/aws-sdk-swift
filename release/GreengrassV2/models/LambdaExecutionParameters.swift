// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains parameters for a Lambda function that runs on AWS IoT Greengrass.</p>
public struct LambdaExecutionParameters: Equatable {
    /// <p>The map of environment variables that are available to the Lambda function when it runs.</p>
    public let environmentVariables: [String:String]?
    /// <p>The list of event sources to which to subscribe to receive work messages. The Lambda
    ///       function runs when it receives a message from an event source. You can subscribe this function
    ///       to local publish/subscribe messages and AWS IoT Core MQTT messages.</p>
    public let eventSources: [LambdaEventSource]?
    /// <p>The list of arguments to pass to the Lambda function when it runs.</p>
    public let execArgs: [String]?
    /// <p>The encoding type that the Lambda function supports.</p>
    ///          <p>Default: <code>json</code>
    ///          </p>
    public let inputPayloadEncodingType: LambdaInputPayloadEncodingType?
    /// <p>The parameters for the Linux process that contains the Lambda function.</p>
    public let linuxProcessParams: LambdaLinuxProcessParams?
    /// <p>The maximum amount of time in seconds that a non-pinned Lambda function can idle before the
    ///       AWS IoT Greengrass Core software stops its process.</p>
    public let maxIdleTimeInSeconds: Int
    /// <p>The maximum number of instances that a non-pinned Lambda function can run at the same
    ///       time.</p>
    public let maxInstancesCount: Int
    /// <p>The maximum size of the message queue for the Lambda function component. The AWS IoT Greengrass core
    ///       stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to
    ///       consume each message.</p>
    public let maxQueueSize: Int
    /// <p>Whether or not the Lambda function is pinned, or long-lived.</p>
    ///          <ul>
    ///             <li>
    ///                <p>A pinned Lambda function starts
    ///           when AWS IoT Greengrass starts and keeps running in its own container.</p>
    ///             </li>
    ///             <li>
    ///                <p>A non-pinned Lambda function starts only when it receives a work item and exists after
    ///           it idles for <code>maxIdleTimeInSeconds</code>. If the function has multiple work items,
    ///           the AWS IoT Greengrass Core software creates multiple instances of the function.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Default: <code>true</code>
    ///          </p>
    public let pinned: Bool
    /// <p>The interval in seconds at which a pinned (also known as long-lived) Lambda function
    ///       component sends status updates to the Lambda manager component.</p>
    public let statusTimeoutInSeconds: Int
    /// <p>The maximum amount of time in seconds that the Lambda function can process a work
    ///       item.</p>
    public let timeoutInSeconds: Int

    public init (
        environmentVariables: [String:String]? = nil,
        eventSources: [LambdaEventSource]? = nil,
        execArgs: [String]? = nil,
        inputPayloadEncodingType: LambdaInputPayloadEncodingType? = nil,
        linuxProcessParams: LambdaLinuxProcessParams? = nil,
        maxIdleTimeInSeconds: Int = 0,
        maxInstancesCount: Int = 0,
        maxQueueSize: Int = 0,
        pinned: Bool = false,
        statusTimeoutInSeconds: Int = 0,
        timeoutInSeconds: Int = 0
    )
    {
        self.environmentVariables = environmentVariables
        self.eventSources = eventSources
        self.execArgs = execArgs
        self.inputPayloadEncodingType = inputPayloadEncodingType
        self.linuxProcessParams = linuxProcessParams
        self.maxIdleTimeInSeconds = maxIdleTimeInSeconds
        self.maxInstancesCount = maxInstancesCount
        self.maxQueueSize = maxQueueSize
        self.pinned = pinned
        self.statusTimeoutInSeconds = statusTimeoutInSeconds
        self.timeoutInSeconds = timeoutInSeconds
    }
}
