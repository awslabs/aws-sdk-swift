// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeComponentOutputBody: Equatable {
    public let arn: String?
    public let componentName: String?
    public let componentVersion: String?
    public let creationTimestamp: Date?
    public let publisher: String?
    public let description: String?
    public let status: CloudComponentStatus?
    public let platforms: [ComponentPlatform]?
    public let tags: [String:String]?
}

extension DescribeComponentOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn
        case componentName
        case componentVersion
        case creationTimestamp
        case description
        case platforms
        case publisher
        case status
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let componentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .componentName)
        componentName = componentNameDecoded
        let componentVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .componentVersion)
        componentVersion = componentVersionDecoded
        let creationTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let publisherDecoded = try containerValues.decodeIfPresent(String.self, forKey: .publisher)
        publisher = publisherDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudComponentStatus.self, forKey: .status)
        status = statusDecoded
        let platformsContainer = try containerValues.decodeIfPresent([ComponentPlatform].self, forKey: .platforms)
        var platformsDecoded0:[ComponentPlatform]? = nil
        if let platformsContainer = platformsContainer {
            platformsDecoded0 = [ComponentPlatform]()
            for structure0 in platformsContainer {
                platformsDecoded0?.append(structure0)
            }
        }
        platforms = platformsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
