// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListComponentVersionsOutputBody: Equatable {
    public let componentVersions: [ComponentVersionListItem]?
    public let nextToken: String?
}

extension ListComponentVersionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case componentVersions
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let componentVersionsContainer = try containerValues.decodeIfPresent([ComponentVersionListItem].self, forKey: .componentVersions)
        var componentVersionsDecoded0:[ComponentVersionListItem]? = nil
        if let componentVersionsContainer = componentVersionsContainer {
            componentVersionsDecoded0 = [ComponentVersionListItem]()
            for structure0 in componentVersionsContainer {
                componentVersionsDecoded0?.append(structure0)
            }
        }
        componentVersions = componentVersionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
