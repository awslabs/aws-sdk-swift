// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LambdaVolumeMount: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addGroupOwner
        case destinationPath
        case permission
        case sourcePath
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if addGroupOwner != false {
            try encodeContainer.encode(addGroupOwner, forKey: .addGroupOwner)
        }
        if let destinationPath = destinationPath {
            try encodeContainer.encode(destinationPath, forKey: .destinationPath)
        }
        if let permission = permission {
            try encodeContainer.encode(permission.rawValue, forKey: .permission)
        }
        if let sourcePath = sourcePath {
            try encodeContainer.encode(sourcePath, forKey: .sourcePath)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourcePathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourcePath)
        sourcePath = sourcePathDecoded
        let destinationPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationPath)
        destinationPath = destinationPathDecoded
        let permissionDecoded = try containerValues.decodeIfPresent(LambdaFilesystemPermission.self, forKey: .permission)
        permission = permissionDecoded
        let addGroupOwnerDecoded = try containerValues.decode(Bool.self, forKey: .addGroupOwner)
        addGroupOwner = addGroupOwnerDecoded
    }
}
