// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>AWS IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities
///       to edge devices. This enables devices to collect and analyze data closer to the source of
///       information, react autonomously to local events, and communicate securely with each other on
///       local networks. Local devices can also communicate securely with AWS IoT Core and export IoT data
///       to the AWS Cloud. AWS IoT Greengrass developers can use AWS Lambda functions and components to create and
///       deploy applications to fleets of edge devices for local operation.</p>
///          <p>AWS IoT Greengrass Version 2 provides a new major version of the AWS IoT Greengrass Core software, new APIs, and a new console.
///       Use this API reference to learn how to use the AWS IoT Greengrass V2 API operations to manage components,
///       manage deployments, and core devices.</p>
///          <p>For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html">What is AWS IoT Greengrass?</a> in
///       the <i>AWS IoT Greengrass V2 Developer Guide</i>.</p>
public protocol GreengrassV2ClientProtocol {
    /// <p>Cancels a deployment. This operation cancels the deployment for devices that haven't yet
    ///       received it. If a device already received the deployment, this operation doesn't change
    ///       anything for that device.</p>
    func cancelDeployment(input: CancelDeploymentInput, completion: @escaping (SdkResult<CancelDeploymentOutputResponse, CancelDeploymentOutputError>) -> Void)
    /// <p>Creates a component. Components are software that run on AWS IoT Greengrass core devices. After you
    ///       develop and test a component on your core device, you can use this operation to upload your
    ///       component to AWS IoT Greengrass. Then, you can deploy the component to other core devices.</p>
    ///          <p>You can use this operation to do the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Create components from recipes</b>
    ///                </p>
    ///                <p>Create a component from a recipe, which is a file that defines the component's
    ///           metadata, parameters, dependencies, lifecycle, artifacts, and platform capability. For
    ///           more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/component-recipe-reference.html">AWS IoT Greengrass component recipe
    ///             reference</a> in the <i>AWS IoT Greengrass V2 Developer Guide</i>.</p>
    ///                <p>To create a component from a recipe, specify <code>inlineRecipe</code> when you call
    ///           this operation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Create components from Lambda functions</b>
    ///                </p>
    ///                <p>Create a component from an AWS Lambda function that runs on AWS IoT Greengrass. This creates a recipe
    ///           and artifacts from the Lambda function's deployment package. You can use this operation to
    ///           migrate Lambda functions from AWS IoT Greengrass V1 to AWS IoT Greengrass V2.</p>
    ///                <p>This function only accepts Lambda functions that use the following runtimes:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Python 2.7 – <code>python2.7</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Python 3.7 – <code>python3.7</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Python 3.8 – <code>python3.8</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Java 8 – <code>java8</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Node.js 10 – <code>nodejs10.x</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Node.js 12 – <code>nodejs12.x</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <p>To create a component from a Lambda function, specify <code>lambdaFunction</code>
    ///           when you call this operation.</p>
    ///             </li>
    ///          </ul>
    func createComponentVersion(input: CreateComponentVersionInput, completion: @escaping (SdkResult<CreateComponentVersionOutputResponse, CreateComponentVersionOutputError>) -> Void)
    /// <p>Creates a continuous deployment for a target, which is a AWS IoT Greengrass core device or group of core
    ///       devices. When you add a new core device to a group of core devices that has a deployment, AWS IoT Greengrass
    ///       deploys that group's deployment to the new device.</p>
    ///          <p>You can define one deployment for each target. When you create a new deployment for a
    ///       target that has an existing deployment, you replace the previous deployment. AWS IoT Greengrass applies the
    ///       new deployment to the target devices.</p>
    ///          <p>Every deployment has a revision number that indicates how many deployment revisions you
    ///       define for a target. Use this operation to create a new revision of an existing deployment.
    ///       This operation returns the revision number of the new deployment when you create it.</p>
    ///          <p>For more information, see the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html">Create deployments</a> in the
    ///         <i>AWS IoT Greengrass V2 Developer Guide</i>.</p>
    func createDeployment(input: CreateDeploymentInput, completion: @escaping (SdkResult<CreateDeploymentOutputResponse, CreateDeploymentOutputError>) -> Void)
    /// <p>Deletes a version of a component from AWS IoT Greengrass.</p>
    ///          <note>
    ///             <p>This operation deletes the component's recipe and artifacts. As a result, deployments
    ///         that refer to this component version will fail. If you have deployments that use this
    ///         component version, you can remove the component from the deployment or update the deployment
    ///         to use a valid version.</p>
    ///          </note>
    func deleteComponent(input: DeleteComponentInput, completion: @escaping (SdkResult<DeleteComponentOutputResponse, DeleteComponentOutputError>) -> Void)
    /// <p>Deletes a AWS IoT Greengrass core device, which is an AWS IoT thing. This operation removes the core
    ///       device from the list of core devices. This operation doesn't delete the AWS IoT thing. For more
    ///       information about how to delete the AWS IoT thing, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_DeleteThing.html">DeleteThing</a> in the
    ///         <i>AWS IoT API Reference</i>.</p>
    func deleteCoreDevice(input: DeleteCoreDeviceInput, completion: @escaping (SdkResult<DeleteCoreDeviceOutputResponse, DeleteCoreDeviceOutputError>) -> Void)
    /// <p>Retrieves metadata for a version of a component.</p>
    func describeComponent(input: DescribeComponentInput, completion: @escaping (SdkResult<DescribeComponentOutputResponse, DescribeComponentOutputError>) -> Void)
    /// <p>Gets the recipe for a version of a component. Core devices can call this operation to
    ///       identify the artifacts and requirements to install a component.</p>
    func getComponent(input: GetComponentInput, completion: @escaping (SdkResult<GetComponentOutputResponse, GetComponentOutputError>) -> Void)
    /// <p>Gets the pre-signed URL to download a public component artifact. Core devices call this
    ///       operation to identify the URL that they can use to download an artifact to install.</p>
    func getComponentVersionArtifact(input: GetComponentVersionArtifactInput, completion: @escaping (SdkResult<GetComponentVersionArtifactOutputResponse, GetComponentVersionArtifactOutputError>) -> Void)
    /// <p>Retrieves metadata for a AWS IoT Greengrass core device.</p>
    func getCoreDevice(input: GetCoreDeviceInput, completion: @escaping (SdkResult<GetCoreDeviceOutputResponse, GetCoreDeviceOutputError>) -> Void)
    /// <p>Gets a deployment. Deployments define the components that run on AWS IoT Greengrass core devices.</p>
    func getDeployment(input: GetDeploymentInput, completion: @escaping (SdkResult<GetDeploymentOutputResponse, GetDeploymentOutputError>) -> Void)
    /// <p>Retrieves a paginated list of component summaries. This list includes components that you
    ///       have permission to view.</p>
    func listComponents(input: ListComponentsInput, completion: @escaping (SdkResult<ListComponentsOutputResponse, ListComponentsOutputError>) -> Void)
    /// <p>Retrieves a paginated list of all versions for a component.</p>
    func listComponentVersions(input: ListComponentVersionsInput, completion: @escaping (SdkResult<ListComponentVersionsOutputResponse, ListComponentVersionsOutputError>) -> Void)
    /// <p>Retrieves a paginated list of AWS IoT Greengrass core devices.</p>
    func listCoreDevices(input: ListCoreDevicesInput, completion: @escaping (SdkResult<ListCoreDevicesOutputResponse, ListCoreDevicesOutputError>) -> Void)
    /// <p>Retrieves a paginated list of deployments.</p>
    func listDeployments(input: ListDeploymentsInput, completion: @escaping (SdkResult<ListDeploymentsOutputResponse, ListDeploymentsOutputError>) -> Void)
    /// <p>Retrieves a paginated list of deployment jobs that AWS IoT Greengrass sends to AWS IoT Greengrass core
    ///       devices.</p>
    func listEffectiveDeployments(input: ListEffectiveDeploymentsInput, completion: @escaping (SdkResult<ListEffectiveDeploymentsOutputResponse, ListEffectiveDeploymentsOutputError>) -> Void)
    /// <p>Retrieves a paginated list of the components that a AWS IoT Greengrass core device runs.</p>
    func listInstalledComponents(input: ListInstalledComponentsInput, completion: @escaping (SdkResult<ListInstalledComponentsOutputResponse, ListInstalledComponentsOutputError>) -> Void)
    /// <p>Retrieves the list of tags for an AWS IoT Greengrass resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Retrieves a list of components that meet the component, version, and platform requirements
    ///       of a deployment. AWS IoT Greengrass core devices call this operation when they receive a deployment to
    ///       identify the components to install.</p>
    ///          <p>This operation identifies components that meet all dependency requirements for a
    ///       deployment. If the requirements conflict, then this operation returns an error and the
    ///       deployment fails. For example, this occurs if component <code>A</code> requires version
    ///         <code>>2.0.0</code> and component <code>B</code> requires version <code><2.0.0</code>
    ///       of a component dependency.</p>
    ///          <p>When you specify the component candidates to resolve, AWS IoT Greengrass compares each component's
    ///       digest from the core device with the component's digest in the AWS Cloud. If the digests don't
    ///       match, then AWS IoT Greengrass specifies to use the version from the AWS Cloud.</p>
    ///          <important>
    ///             <p>To use this operation, you must use the data plane API endpoint and authenticate with an
    ///         AWS IoT device certificate. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/greengrass.html">AWS IoT Greengrass endpoints and quotas</a>.</p>
    ///          </important>
    func resolveComponentCandidates(input: ResolveComponentCandidatesInput, completion: @escaping (SdkResult<ResolveComponentCandidatesOutputResponse, ResolveComponentCandidatesOutputError>) -> Void)
    /// <p>Adds tags to an AWS IoT Greengrass resource. If a tag already exists for the resource, this operation
    ///       updates the tag's value.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes a tag from an AWS IoT Greengrass resource.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
}
