// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum MetricType {
    case albrequestcountpertarget
    case appstreamaveragecapacityutilization
    case cassandrareadcapacityutilization
    case cassandrawritecapacityutilization
    case comprehendinferenceutilization
    case dynamodbreadcapacityutilization
    case dynamodbwritecapacityutilization
    case ec2spotfleetrequestaveragecpuutilization
    case ec2spotfleetrequestaveragenetworkin
    case ec2spotfleetrequestaveragenetworkout
    case ecsserviceaveragecpuutilization
    case ecsserviceaveragememoryutilization
    case kafkabrokerstorageutilization
    case lambdaprovisionedconcurrencyutilization
    case rdsreaderaveragecpuutilization
    case rdsreaderaveragedatabaseconnections
    case sagemakervariantinvocationsperinstance
    case sdkUnknown(String)
}

extension MetricType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MetricType] {
        return [
            .albrequestcountpertarget,
            .appstreamaveragecapacityutilization,
            .cassandrareadcapacityutilization,
            .cassandrawritecapacityutilization,
            .comprehendinferenceutilization,
            .dynamodbreadcapacityutilization,
            .dynamodbwritecapacityutilization,
            .ec2spotfleetrequestaveragecpuutilization,
            .ec2spotfleetrequestaveragenetworkin,
            .ec2spotfleetrequestaveragenetworkout,
            .ecsserviceaveragecpuutilization,
            .ecsserviceaveragememoryutilization,
            .kafkabrokerstorageutilization,
            .lambdaprovisionedconcurrencyutilization,
            .rdsreaderaveragecpuutilization,
            .rdsreaderaveragedatabaseconnections,
            .sagemakervariantinvocationsperinstance,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .albrequestcountpertarget: return "ALBRequestCountPerTarget"
        case .appstreamaveragecapacityutilization: return "AppStreamAverageCapacityUtilization"
        case .cassandrareadcapacityutilization: return "CassandraReadCapacityUtilization"
        case .cassandrawritecapacityutilization: return "CassandraWriteCapacityUtilization"
        case .comprehendinferenceutilization: return "ComprehendInferenceUtilization"
        case .dynamodbreadcapacityutilization: return "DynamoDBReadCapacityUtilization"
        case .dynamodbwritecapacityutilization: return "DynamoDBWriteCapacityUtilization"
        case .ec2spotfleetrequestaveragecpuutilization: return "EC2SpotFleetRequestAverageCPUUtilization"
        case .ec2spotfleetrequestaveragenetworkin: return "EC2SpotFleetRequestAverageNetworkIn"
        case .ec2spotfleetrequestaveragenetworkout: return "EC2SpotFleetRequestAverageNetworkOut"
        case .ecsserviceaveragecpuutilization: return "ECSServiceAverageCPUUtilization"
        case .ecsserviceaveragememoryutilization: return "ECSServiceAverageMemoryUtilization"
        case .kafkabrokerstorageutilization: return "KafkaBrokerStorageUtilization"
        case .lambdaprovisionedconcurrencyutilization: return "LambdaProvisionedConcurrencyUtilization"
        case .rdsreaderaveragecpuutilization: return "RDSReaderAverageCPUUtilization"
        case .rdsreaderaveragedatabaseconnections: return "RDSReaderAverageDatabaseConnections"
        case .sagemakervariantinvocationsperinstance: return "SageMakerVariantInvocationsPerInstance"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MetricType(rawValue: rawValue) ?? MetricType.sdkUnknown(rawValue)
    }
}
