// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ScalingPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarms = "Alarms"
        case creationTime = "CreationTime"
        case policyARN = "PolicyARN"
        case policyName = "PolicyName"
        case policyType = "PolicyType"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case stepScalingPolicyConfiguration = "StepScalingPolicyConfiguration"
        case targetTrackingScalingPolicyConfiguration = "TargetTrackingScalingPolicyConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarms = alarms {
            var alarmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alarms)
            for alarms0 in alarms {
                try alarmsContainer.encode(alarms0)
            }
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let policyARN = policyARN {
            try encodeContainer.encode(policyARN, forKey: .policyARN)
        }
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyType = policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let stepScalingPolicyConfiguration = stepScalingPolicyConfiguration {
            try encodeContainer.encode(stepScalingPolicyConfiguration, forKey: .stepScalingPolicyConfiguration)
        }
        if let targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration {
            try encodeContainer.encode(targetTrackingScalingPolicyConfiguration, forKey: .targetTrackingScalingPolicyConfiguration)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyARN)
        policyARN = policyARNDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let stepScalingPolicyConfigurationDecoded = try containerValues.decodeIfPresent(StepScalingPolicyConfiguration.self, forKey: .stepScalingPolicyConfiguration)
        stepScalingPolicyConfiguration = stepScalingPolicyConfigurationDecoded
        let targetTrackingScalingPolicyConfigurationDecoded = try containerValues.decodeIfPresent(TargetTrackingScalingPolicyConfiguration.self, forKey: .targetTrackingScalingPolicyConfiguration)
        targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfigurationDecoded
        let alarmsContainer = try containerValues.decodeIfPresent([Alarm].self, forKey: .alarms)
        var alarmsDecoded0:[Alarm]? = nil
        if let alarmsContainer = alarmsContainer {
            alarmsDecoded0 = [Alarm]()
            for structure0 in alarmsContainer {
                alarmsDecoded0?.append(structure0)
            }
        }
        alarms = alarmsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
