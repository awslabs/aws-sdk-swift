// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SuspendedState: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dynamicScalingInSuspended = "DynamicScalingInSuspended"
        case dynamicScalingOutSuspended = "DynamicScalingOutSuspended"
        case scheduledScalingSuspended = "ScheduledScalingSuspended"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dynamicScalingInSuspended = dynamicScalingInSuspended {
            try encodeContainer.encode(dynamicScalingInSuspended, forKey: .dynamicScalingInSuspended)
        }
        if let dynamicScalingOutSuspended = dynamicScalingOutSuspended {
            try encodeContainer.encode(dynamicScalingOutSuspended, forKey: .dynamicScalingOutSuspended)
        }
        if let scheduledScalingSuspended = scheduledScalingSuspended {
            try encodeContainer.encode(scheduledScalingSuspended, forKey: .scheduledScalingSuspended)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dynamicScalingInSuspendedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .dynamicScalingInSuspended)
        dynamicScalingInSuspended = dynamicScalingInSuspendedDecoded
        let dynamicScalingOutSuspendedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .dynamicScalingOutSuspended)
        dynamicScalingOutSuspended = dynamicScalingOutSuspendedDecoded
        let scheduledScalingSuspendedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .scheduledScalingSuspended)
        scheduledScalingSuspended = scheduledScalingSuspendedDecoded
    }
}
