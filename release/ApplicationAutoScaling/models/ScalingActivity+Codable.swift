// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ScalingActivity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityId = "ActivityId"
        case cause = "Cause"
        case description = "Description"
        case details = "Details"
        case endTime = "EndTime"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case startTime = "StartTime"
        case statusCode = "StatusCode"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
        if let cause = cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let statusCode = statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let causeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cause)
        cause = causeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(ScalingActivityStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
    }
}
