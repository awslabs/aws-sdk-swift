// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeScalingPoliciesInputBody: Equatable {
    public let policyNames: [String]?
    public let serviceNamespace: ServiceNamespace?
    public let resourceId: String?
    public let scalableDimension: ScalableDimension?
    public let maxResults: Int?
    public let nextToken: String?
}

extension DescribeScalingPoliciesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case policyNames = "PolicyNames"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .policyNames)
        var policyNamesDecoded0:[String]? = nil
        if let policyNamesContainer = policyNamesContainer {
            policyNamesDecoded0 = [String]()
            for string0 in policyNamesContainer {
                policyNamesDecoded0?.append(string0)
            }
        }
        policyNames = policyNamesDecoded0
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
