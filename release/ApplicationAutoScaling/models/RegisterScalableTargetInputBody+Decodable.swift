// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterScalableTargetInputBody: Equatable {
    public let serviceNamespace: ServiceNamespace?
    public let resourceId: String?
    public let scalableDimension: ScalableDimension?
    public let minCapacity: Int?
    public let maxCapacity: Int?
    public let roleARN: String?
    public let suspendedState: SuspendedState?
}

extension RegisterScalableTargetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
        case resourceId = "ResourceId"
        case roleARN = "RoleARN"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case suspendedState = "SuspendedState"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let minCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minCapacity)
        minCapacity = minCapacityDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let suspendedStateDecoded = try containerValues.decodeIfPresent(SuspendedState.self, forKey: .suspendedState)
        suspendedState = suspendedStateDecoded
    }
}
