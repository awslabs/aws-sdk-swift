// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents a step scaling policy configuration to use with Application Auto Scaling.</p>
public struct StepScalingPolicyConfiguration: Equatable {
    /// <p>Specifies how the <code>ScalingAdjustment</code> value in a <a href="https://docs.aws.amazon.com/autoscaling/application/APIReference/API_StepAdjustment.html">StepAdjustment</a> is interpreted (for example, an absolute number or a
    ///          percentage). The valid values are <code>ChangeInCapacity</code>,
    ///          <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>. </p>
    ///          <p>
    ///             <code>AdjustmentType</code> is required if you are adding a new step scaling policy
    ///          configuration.</p>
    public let adjustmentType: AdjustmentType?
    /// <p>The amount of time, in seconds, to wait for a previous scaling activity to take effect. </p>
    ///          <p>With scale-out policies, the intention is to continuously (but not excessively) scale out.
    ///       After Application Auto Scaling successfully scales out using a step scaling policy, it starts to calculate the
    ///       cooldown time. The scaling policy won't increase the desired capacity again unless either a
    ///       larger scale out is triggered or the cooldown period ends. While the cooldown period is in
    ///       effect, capacity added by the initiating scale-out activity is calculated as part of the
    ///       desired capacity for the next scale-out activity. For example, when an alarm triggers a step
    ///       scaling policy to increase the capacity by 2, the scaling activity completes successfully, and
    ///       a cooldown period starts. If the alarm triggers again during the cooldown period but at a more
    ///       aggressive step adjustment of 3, the previous increase of 2 is considered part of the current
    ///       capacity. Therefore, only 1 is added to the capacity.</p>
    ///          <p>With scale-in policies, the intention is to scale in conservatively to protect your
    ///       applicationâ€™s availability, so scale-in activities are blocked until the cooldown period has
    ///       expired. However, if another alarm triggers a scale-out activity during the cooldown period
    ///       after a scale-in activity, Application Auto Scaling scales out the target immediately. In this case, the
    ///       cooldown period for the scale-in activity stops and doesn't complete.</p>
    ///          <p>Application Auto Scaling provides a default value of 300 for the following scalable targets:</p>
    ///          <ul>
    ///             <li>
    ///                <p>ECS services</p>
    ///            </li>
    ///             <li>
    ///                <p>Spot Fleet requests</p>
    ///            </li>
    ///             <li>
    ///                <p>EMR clusters</p>
    ///            </li>
    ///             <li>
    ///                <p>AppStream 2.0 fleets</p>
    ///            </li>
    ///             <li>
    ///                <p>Aurora DB clusters</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon SageMaker endpoint variants</p>
    ///            </li>
    ///             <li>
    ///                <p>Custom resources</p>
    ///            </li>
    ///          </ul>
    ///          <p>For all other scalable targets, the default value is 0:</p>
    ///          <ul>
    ///             <li>
    ///                <p>DynamoDB tables</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB global secondary indexes</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend document classification and entity recognizer endpoints</p>
    ///            </li>
    ///             <li>
    ///                <p>Lambda provisioned concurrency</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Keyspaces tables</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon MSK broker storage</p>
    ///            </li>
    ///          </ul>
    public let cooldown: Int?
    /// <p>The aggregation type for the CloudWatch metrics. Valid values are <code>Minimum</code>,
    ///             <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the
    ///          value is treated as <code>Average</code>.</p>
    public let metricAggregationType: MetricAggregationType?
    /// <p>The minimum value to scale by when the adjustment type is
    ///             <code>PercentChangeInCapacity</code>. For example, suppose that you create a step
    ///          scaling policy to scale out an Amazon ECS service by 25 percent and you specify a
    ///             <code>MinAdjustmentMagnitude</code> of 2. If the service has 4 tasks and the scaling
    ///          policy is performed, 25 percent of 4 is 1. However, because you specified a
    ///             <code>MinAdjustmentMagnitude</code> of 2, Application Auto Scaling scales out the service by 2
    ///          tasks.</p>
    public let minAdjustmentMagnitude: Int?
    /// <p>A set of adjustments that enable you to scale based on the size of the alarm
    ///          breach.</p>
    ///          <p>At least one step adjustment is required if you are adding a new step scaling policy
    ///          configuration.</p>
    public let stepAdjustments: [StepAdjustment]?

    public init (
        adjustmentType: AdjustmentType? = nil,
        cooldown: Int? = nil,
        metricAggregationType: MetricAggregationType? = nil,
        minAdjustmentMagnitude: Int? = nil,
        stepAdjustments: [StepAdjustment]? = nil
    )
    {
        self.adjustmentType = adjustmentType
        self.cooldown = cooldown
        self.metricAggregationType = metricAggregationType
        self.minAdjustmentMagnitude = minAdjustmentMagnitude
        self.stepAdjustments = stepAdjustments
    }
}
