// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ScalableDimension {
    case appstreamfleetdesiredcapacity
    case cassandratablereadcapacityunits
    case cassandratablewritecapacityunits
    case comprehenddocclassifierendpointinferenceunits
    case comprehendentityrecognizerendpointinferenceunits
    case customresourcescalabledimension
    case dynamodbindexreadcapacityunits
    case dynamodbindexwritecapacityunits
    case dynamodbtablereadcapacityunits
    case dynamodbtablewritecapacityunits
    case ec2spotfleetrequesttargetcapacity
    case ecsservicedesiredcount
    case emrinstancegroupinstancecount
    case kafkabrokerstoragevolumesize
    case lambdafunctionprovisionedconcurrency
    case rdsclusterreadreplicacount
    case sagemakervariantdesiredinstancecount
    case sdkUnknown(String)
}

extension ScalableDimension : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ScalableDimension] {
        return [
            .appstreamfleetdesiredcapacity,
            .cassandratablereadcapacityunits,
            .cassandratablewritecapacityunits,
            .comprehenddocclassifierendpointinferenceunits,
            .comprehendentityrecognizerendpointinferenceunits,
            .customresourcescalabledimension,
            .dynamodbindexreadcapacityunits,
            .dynamodbindexwritecapacityunits,
            .dynamodbtablereadcapacityunits,
            .dynamodbtablewritecapacityunits,
            .ec2spotfleetrequesttargetcapacity,
            .ecsservicedesiredcount,
            .emrinstancegroupinstancecount,
            .kafkabrokerstoragevolumesize,
            .lambdafunctionprovisionedconcurrency,
            .rdsclusterreadreplicacount,
            .sagemakervariantdesiredinstancecount,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .appstreamfleetdesiredcapacity: return "appstream:fleet:DesiredCapacity"
        case .cassandratablereadcapacityunits: return "cassandra:table:ReadCapacityUnits"
        case .cassandratablewritecapacityunits: return "cassandra:table:WriteCapacityUnits"
        case .comprehenddocclassifierendpointinferenceunits: return "comprehend:document-classifier-endpoint:DesiredInferenceUnits"
        case .comprehendentityrecognizerendpointinferenceunits: return "comprehend:entity-recognizer-endpoint:DesiredInferenceUnits"
        case .customresourcescalabledimension: return "custom-resource:ResourceType:Property"
        case .dynamodbindexreadcapacityunits: return "dynamodb:index:ReadCapacityUnits"
        case .dynamodbindexwritecapacityunits: return "dynamodb:index:WriteCapacityUnits"
        case .dynamodbtablereadcapacityunits: return "dynamodb:table:ReadCapacityUnits"
        case .dynamodbtablewritecapacityunits: return "dynamodb:table:WriteCapacityUnits"
        case .ec2spotfleetrequesttargetcapacity: return "ec2:spot-fleet-request:TargetCapacity"
        case .ecsservicedesiredcount: return "ecs:service:DesiredCount"
        case .emrinstancegroupinstancecount: return "elasticmapreduce:instancegroup:InstanceCount"
        case .kafkabrokerstoragevolumesize: return "kafka:broker-storage:VolumeSize"
        case .lambdafunctionprovisionedconcurrency: return "lambda:function:ProvisionedConcurrency"
        case .rdsclusterreadreplicacount: return "rds:cluster:ReadReplicaCount"
        case .sagemakervariantdesiredinstancecount: return "sagemaker:variant:DesiredInstanceCount"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ScalableDimension(rawValue: rawValue) ?? ScalableDimension.sdkUnknown(rawValue)
    }
}
