// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RegisterScalableTargetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
        case resourceId = "ResourceId"
        case roleARN = "RoleARN"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case suspendedState = "SuspendedState"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let minCapacity = minCapacity {
            try encodeContainer.encode(minCapacity, forKey: .minCapacity)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let roleARN = roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let suspendedState = suspendedState {
            try encodeContainer.encode(suspendedState, forKey: .suspendedState)
        }
    }
}
