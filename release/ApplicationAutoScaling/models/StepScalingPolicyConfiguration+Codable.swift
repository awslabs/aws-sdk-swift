// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StepScalingPolicyConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adjustmentType = "AdjustmentType"
        case cooldown = "Cooldown"
        case metricAggregationType = "MetricAggregationType"
        case minAdjustmentMagnitude = "MinAdjustmentMagnitude"
        case stepAdjustments = "StepAdjustments"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adjustmentType = adjustmentType {
            try encodeContainer.encode(adjustmentType.rawValue, forKey: .adjustmentType)
        }
        if let cooldown = cooldown {
            try encodeContainer.encode(cooldown, forKey: .cooldown)
        }
        if let metricAggregationType = metricAggregationType {
            try encodeContainer.encode(metricAggregationType.rawValue, forKey: .metricAggregationType)
        }
        if let minAdjustmentMagnitude = minAdjustmentMagnitude {
            try encodeContainer.encode(minAdjustmentMagnitude, forKey: .minAdjustmentMagnitude)
        }
        if let stepAdjustments = stepAdjustments {
            var stepAdjustmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stepAdjustments)
            for stepadjustments0 in stepAdjustments {
                try stepAdjustmentsContainer.encode(stepadjustments0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adjustmentTypeDecoded = try containerValues.decodeIfPresent(AdjustmentType.self, forKey: .adjustmentType)
        adjustmentType = adjustmentTypeDecoded
        let stepAdjustmentsContainer = try containerValues.decodeIfPresent([StepAdjustment].self, forKey: .stepAdjustments)
        var stepAdjustmentsDecoded0:[StepAdjustment]? = nil
        if let stepAdjustmentsContainer = stepAdjustmentsContainer {
            stepAdjustmentsDecoded0 = [StepAdjustment]()
            for structure0 in stepAdjustmentsContainer {
                stepAdjustmentsDecoded0?.append(structure0)
            }
        }
        stepAdjustments = stepAdjustmentsDecoded0
        let minAdjustmentMagnitudeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minAdjustmentMagnitude)
        minAdjustmentMagnitude = minAdjustmentMagnitudeDecoded
        let cooldownDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .cooldown)
        cooldown = cooldownDecoded
        let metricAggregationTypeDecoded = try containerValues.decodeIfPresent(MetricAggregationType.self, forKey: .metricAggregationType)
        metricAggregationType = metricAggregationTypeDecoded
    }
}
