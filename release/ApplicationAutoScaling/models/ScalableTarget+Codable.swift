// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ScalableTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
        case resourceId = "ResourceId"
        case roleARN = "RoleARN"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case suspendedState = "SuspendedState"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let minCapacity = minCapacity {
            try encodeContainer.encode(minCapacity, forKey: .minCapacity)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let roleARN = roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let suspendedState = suspendedState {
            try encodeContainer.encode(suspendedState, forKey: .suspendedState)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let minCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minCapacity)
        minCapacity = minCapacityDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let suspendedStateDecoded = try containerValues.decodeIfPresent(SuspendedState.self, forKey: .suspendedState)
        suspendedState = suspendedStateDecoded
    }
}
