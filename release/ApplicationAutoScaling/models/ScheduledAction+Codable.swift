// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ScheduledAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case endTime = "EndTime"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scalableTargetAction = "ScalableTargetAction"
        case schedule = "Schedule"
        case scheduledActionARN = "ScheduledActionARN"
        case scheduledActionName = "ScheduledActionName"
        case serviceNamespace = "ServiceNamespace"
        case startTime = "StartTime"
        case timezone = "Timezone"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let scalableTargetAction = scalableTargetAction {
            try encodeContainer.encode(scalableTargetAction, forKey: .scalableTargetAction)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let scheduledActionARN = scheduledActionARN {
            try encodeContainer.encode(scheduledActionARN, forKey: .scheduledActionARN)
        }
        if let scheduledActionName = scheduledActionName {
            try encodeContainer.encode(scheduledActionName, forKey: .scheduledActionName)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let timezone = timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let scheduledActionARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduledActionARN)
        scheduledActionARN = scheduledActionARNDecoded
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let scalableTargetActionDecoded = try containerValues.decodeIfPresent(ScalableTargetAction.self, forKey: .scalableTargetAction)
        scalableTargetAction = scalableTargetActionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
