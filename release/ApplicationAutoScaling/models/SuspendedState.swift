// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Specifies whether the scaling activities for a scalable target are in a suspended state.
///       </p>
public struct SuspendedState: Equatable {
    /// <p>Whether scale in by a target tracking scaling policy or a step scaling policy is
    ///          suspended. Set the value to <code>true</code> if you don't want Application Auto Scaling to remove capacity
    ///          when a scaling policy is triggered. The default is <code>false</code>. </p>
    public let dynamicScalingInSuspended: Bool?
    /// <p>Whether scale out by a target tracking scaling policy or a step scaling policy is
    ///          suspended. Set the value to <code>true</code> if you don't want Application Auto Scaling to add capacity
    ///          when a scaling policy is triggered. The default is <code>false</code>. </p>
    public let dynamicScalingOutSuspended: Bool?
    /// <p>Whether scheduled scaling is suspended. Set the value to <code>true</code> if you don't
    ///          want Application Auto Scaling to add or remove capacity by initiating scheduled actions. The default is
    ///             <code>false</code>. </p>
    public let scheduledScalingSuspended: Bool?

    public init (
        dynamicScalingInSuspended: Bool? = nil,
        dynamicScalingOutSuspended: Bool? = nil,
        scheduledScalingSuspended: Bool? = nil
    )
    {
        self.dynamicScalingInSuspended = dynamicScalingInSuspended
        self.dynamicScalingOutSuspended = dynamicScalingOutSuspended
        self.scheduledScalingSuspended = scheduledScalingSuspended
    }
}
