// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutScheduledActionInputBody: Equatable {
    public let serviceNamespace: ServiceNamespace?
    public let schedule: String?
    public let timezone: String?
    public let scheduledActionName: String?
    public let resourceId: String?
    public let scalableDimension: ScalableDimension?
    public let startTime: Date?
    public let endTime: Date?
    public let scalableTargetAction: ScalableTargetAction?
}

extension PutScheduledActionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endTime = "EndTime"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scalableTargetAction = "ScalableTargetAction"
        case schedule = "Schedule"
        case scheduledActionName = "ScheduledActionName"
        case serviceNamespace = "ServiceNamespace"
        case startTime = "StartTime"
        case timezone = "Timezone"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let scalableTargetActionDecoded = try containerValues.decodeIfPresent(ScalableTargetAction.self, forKey: .scalableTargetAction)
        scalableTargetAction = scalableTargetActionDecoded
    }
}
