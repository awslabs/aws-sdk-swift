// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FlowExecutionMessage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eventType
        case messageId
        case payload
        case timestamp
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventType = eventType {
            try encodeContainer.encode(eventType.rawValue, forKey: .eventType)
        }
        if let messageId = messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
        if let payload = payload {
            try encodeContainer.encode(payload, forKey: .payload)
        }
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp.timeIntervalSince1970, forKey: .timestamp)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(FlowExecutionEventType.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let payloadDecoded = try containerValues.decodeIfPresent(String.self, forKey: .payload)
        payload = payloadDecoded
    }
}
