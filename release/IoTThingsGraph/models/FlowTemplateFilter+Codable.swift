// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FlowTemplateFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
        case value
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let value = value {
            var valueContainer = encodeContainer.nestedUnkeyedContainer(forKey: .value)
            for flowtemplatefiltervalues0 in value {
                try valueContainer.encode(flowtemplatefiltervalues0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(FlowTemplateFilterName.self, forKey: .name)
        name = nameDecoded
        let valueContainer = try containerValues.decodeIfPresent([String].self, forKey: .value)
        var valueDecoded0:[String]? = nil
        if let valueContainer = valueContainer {
            valueDecoded0 = [String]()
            for string0 in valueContainer {
                valueDecoded0?.append(string0)
            }
        }
        value = valueDecoded0
    }
}
