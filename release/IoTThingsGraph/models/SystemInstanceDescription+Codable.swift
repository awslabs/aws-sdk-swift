// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SystemInstanceDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case definition
        case flowActionsRoleArn
        case metricsConfiguration
        case s3BucketName
        case summary
        case validatedDependencyRevisions
        case validatedNamespaceVersion
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let definition = definition {
            try encodeContainer.encode(definition, forKey: .definition)
        }
        if let flowActionsRoleArn = flowActionsRoleArn {
            try encodeContainer.encode(flowActionsRoleArn, forKey: .flowActionsRoleArn)
        }
        if let metricsConfiguration = metricsConfiguration {
            try encodeContainer.encode(metricsConfiguration, forKey: .metricsConfiguration)
        }
        if let s3BucketName = s3BucketName {
            try encodeContainer.encode(s3BucketName, forKey: .s3BucketName)
        }
        if let summary = summary {
            try encodeContainer.encode(summary, forKey: .summary)
        }
        if let validatedDependencyRevisions = validatedDependencyRevisions {
            var validatedDependencyRevisionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validatedDependencyRevisions)
            for dependencyrevisions0 in validatedDependencyRevisions {
                try validatedDependencyRevisionsContainer.encode(dependencyrevisions0)
            }
        }
        if let validatedNamespaceVersion = validatedNamespaceVersion {
            try encodeContainer.encode(validatedNamespaceVersion, forKey: .validatedNamespaceVersion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryDecoded = try containerValues.decodeIfPresent(SystemInstanceSummary.self, forKey: .summary)
        summary = summaryDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(DefinitionDocument.self, forKey: .definition)
        definition = definitionDecoded
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let metricsConfigurationDecoded = try containerValues.decodeIfPresent(MetricsConfiguration.self, forKey: .metricsConfiguration)
        metricsConfiguration = metricsConfigurationDecoded
        let validatedNamespaceVersionDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .validatedNamespaceVersion)
        validatedNamespaceVersion = validatedNamespaceVersionDecoded
        let validatedDependencyRevisionsContainer = try containerValues.decodeIfPresent([DependencyRevision].self, forKey: .validatedDependencyRevisions)
        var validatedDependencyRevisionsDecoded0:[DependencyRevision]? = nil
        if let validatedDependencyRevisionsContainer = validatedDependencyRevisionsContainer {
            validatedDependencyRevisionsDecoded0 = [DependencyRevision]()
            for structure0 in validatedDependencyRevisionsContainer {
                validatedDependencyRevisionsDecoded0?.append(structure0)
            }
        }
        validatedDependencyRevisions = validatedDependencyRevisionsDecoded0
        let flowActionsRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .flowActionsRoleArn)
        flowActionsRoleArn = flowActionsRoleArnDecoded
    }
}
