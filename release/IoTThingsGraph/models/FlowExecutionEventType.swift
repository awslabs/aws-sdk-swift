// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum FlowExecutionEventType {
    case acknowledgeTaskMessage
    case activityFailed
    case activityScheduled
    case activityStarted
    case activitySucceeded
    case executionAborted
    case executionFailed
    case executionStarted
    case executionSucceeded
    case scheduleNextReadyStepsTask
    case startFlowExecutionTask
    case stepFailed
    case stepStarted
    case stepSucceeded
    case thingActionTask
    case thingActionTaskFailed
    case thingActionTaskSucceeded
    case sdkUnknown(String)
}

extension FlowExecutionEventType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FlowExecutionEventType] {
        return [
            .acknowledgeTaskMessage,
            .activityFailed,
            .activityScheduled,
            .activityStarted,
            .activitySucceeded,
            .executionAborted,
            .executionFailed,
            .executionStarted,
            .executionSucceeded,
            .scheduleNextReadyStepsTask,
            .startFlowExecutionTask,
            .stepFailed,
            .stepStarted,
            .stepSucceeded,
            .thingActionTask,
            .thingActionTaskFailed,
            .thingActionTaskSucceeded,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .acknowledgeTaskMessage: return "ACKNOWLEDGE_TASK_MESSAGE"
        case .activityFailed: return "ACTIVITY_FAILED"
        case .activityScheduled: return "ACTIVITY_SCHEDULED"
        case .activityStarted: return "ACTIVITY_STARTED"
        case .activitySucceeded: return "ACTIVITY_SUCCEEDED"
        case .executionAborted: return "EXECUTION_ABORTED"
        case .executionFailed: return "EXECUTION_FAILED"
        case .executionStarted: return "EXECUTION_STARTED"
        case .executionSucceeded: return "EXECUTION_SUCCEEDED"
        case .scheduleNextReadyStepsTask: return "SCHEDULE_NEXT_READY_STEPS_TASK"
        case .startFlowExecutionTask: return "START_FLOW_EXECUTION_TASK"
        case .stepFailed: return "STEP_FAILED"
        case .stepStarted: return "STEP_STARTED"
        case .stepSucceeded: return "STEP_SUCCEEDED"
        case .thingActionTask: return "THING_ACTION_TASK"
        case .thingActionTaskFailed: return "THING_ACTION_TASK_FAILED"
        case .thingActionTaskSucceeded: return "THING_ACTION_TASK_SUCCEEDED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FlowExecutionEventType(rawValue: rawValue) ?? FlowExecutionEventType.sdkUnknown(rawValue)
    }
}
