// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum EntityType {
    case action
    case capability
    case device
    case deviceModel
    case `enum`
    case event
    case mapping
    case property
    case service
    case state
    case sdkUnknown(String)
}

extension EntityType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EntityType] {
        return [
            .action,
            .capability,
            .device,
            .deviceModel,
            .enum,
            .event,
            .mapping,
            .property,
            .service,
            .state,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .action: return "ACTION"
        case .capability: return "CAPABILITY"
        case .device: return "DEVICE"
        case .deviceModel: return "DEVICE_MODEL"
        case .enum: return "ENUM"
        case .event: return "EVENT"
        case .mapping: return "MAPPING"
        case .property: return "PROPERTY"
        case .service: return "SERVICE"
        case .state: return "STATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EntityType(rawValue: rawValue) ?? EntityType.sdkUnknown(rawValue)
    }
}
