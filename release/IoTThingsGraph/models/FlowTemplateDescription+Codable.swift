// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FlowTemplateDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case definition
        case summary
        case validatedNamespaceVersion
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let definition = definition {
            try encodeContainer.encode(definition, forKey: .definition)
        }
        if let summary = summary {
            try encodeContainer.encode(summary, forKey: .summary)
        }
        if let validatedNamespaceVersion = validatedNamespaceVersion {
            try encodeContainer.encode(validatedNamespaceVersion, forKey: .validatedNamespaceVersion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryDecoded = try containerValues.decodeIfPresent(FlowTemplateSummary.self, forKey: .summary)
        summary = summaryDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(DefinitionDocument.self, forKey: .definition)
        definition = definitionDecoded
        let validatedNamespaceVersionDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .validatedNamespaceVersion)
        validatedNamespaceVersion = validatedNamespaceVersionDecoded
    }
}
