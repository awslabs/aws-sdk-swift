// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPreparedStatementsOutputBody: Equatable {
    public let preparedStatements: [PreparedStatementSummary]?
    public let nextToken: String?
}

extension ListPreparedStatementsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case preparedStatements = "PreparedStatements"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let preparedStatementsContainer = try containerValues.decodeIfPresent([PreparedStatementSummary].self, forKey: .preparedStatements)
        var preparedStatementsDecoded0:[PreparedStatementSummary]? = nil
        if let preparedStatementsContainer = preparedStatementsContainer {
            preparedStatementsDecoded0 = [PreparedStatementSummary]()
            for structure0 in preparedStatementsContainer {
                preparedStatementsDecoded0?.append(structure0)
            }
        }
        preparedStatements = preparedStatementsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
