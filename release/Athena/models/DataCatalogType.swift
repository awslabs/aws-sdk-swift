// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum DataCatalogType {
    case glue
    case hive
    case lambda
    case sdkUnknown(String)
}

extension DataCatalogType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DataCatalogType] {
        return [
            .glue,
            .hive,
            .lambda,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .glue: return "GLUE"
        case .hive: return "HIVE"
        case .lambda: return "LAMBDA"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DataCatalogType(rawValue: rawValue) ?? DataCatalogType.sdkUnknown(rawValue)
    }
}
