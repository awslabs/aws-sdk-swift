// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The amount of data scanned during the query execution and the amount of time that it
///             took to execute, and the type of statement that was run.</p>
public struct QueryExecutionStatistics: Equatable {
    /// <p>The location and file name of a data manifest file. The manifest file is saved to the
    ///             Athena query results location in Amazon S3. The manifest file tracks files that the
    ///             query wrote to Amazon S3. If the query fails, the manifest file also tracks files that
    ///             the query intended to write. The manifest is useful for identifying orphaned files
    ///             resulting from a failed query. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Working with Query Results, Output Files, and
    ///                 Query History</a> in the <i>Amazon Athena User Guide</i>.</p>
    public let dataManifestLocation: String?
    /// <p>The number of bytes in the data that was queried.</p>
    public let dataScannedInBytes: Int?
    /// <p>The number of milliseconds that the query took to execute.</p>
    public let engineExecutionTimeInMillis: Int?
    /// <p>The number of milliseconds that Athena took to plan the query processing flow. This
    ///             includes the time spent retrieving table partitions from the data source. Note that
    ///             because the query engine performs the query planning, query planning time is a subset of
    ///             engine processing time.</p>
    public let queryPlanningTimeInMillis: Int?
    /// <p>The number of milliseconds that the query was in your query queue waiting for
    ///             resources. Note that if transient errors occur, Athena might automatically add the query
    ///             back to the queue.</p>
    public let queryQueueTimeInMillis: Int?
    /// <p>The number of milliseconds that Athena took to finalize and publish the query results
    ///             after the query engine finished running the query.</p>
    public let serviceProcessingTimeInMillis: Int?
    /// <p>The number of milliseconds that Athena took to run the query.</p>
    public let totalExecutionTimeInMillis: Int?

    public init (
        dataManifestLocation: String? = nil,
        dataScannedInBytes: Int? = nil,
        engineExecutionTimeInMillis: Int? = nil,
        queryPlanningTimeInMillis: Int? = nil,
        queryQueueTimeInMillis: Int? = nil,
        serviceProcessingTimeInMillis: Int? = nil,
        totalExecutionTimeInMillis: Int? = nil
    )
    {
        self.dataManifestLocation = dataManifestLocation
        self.dataScannedInBytes = dataScannedInBytes
        self.engineExecutionTimeInMillis = engineExecutionTimeInMillis
        self.queryPlanningTimeInMillis = queryPlanningTimeInMillis
        self.queryQueueTimeInMillis = queryQueueTimeInMillis
        self.serviceProcessingTimeInMillis = serviceProcessingTimeInMillis
        self.totalExecutionTimeInMillis = totalExecutionTimeInMillis
    }
}
