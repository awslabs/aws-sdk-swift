// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QueryExecutionStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case completionDateTime = "CompletionDateTime"
        case state = "State"
        case stateChangeReason = "StateChangeReason"
        case submissionDateTime = "SubmissionDateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionDateTime = completionDateTime {
            try encodeContainer.encode(completionDateTime.timeIntervalSince1970, forKey: .completionDateTime)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
        if let submissionDateTime = submissionDateTime {
            try encodeContainer.encode(submissionDateTime.timeIntervalSince1970, forKey: .submissionDateTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(QueryExecutionState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
        let submissionDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .submissionDateTime)
        submissionDateTime = submissionDateTimeDecoded
        let completionDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completionDateTime)
        completionDateTime = completionDateTimeDecoded
    }
}
