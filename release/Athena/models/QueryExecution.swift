// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Information about a single instance of a query execution.</p>
public struct QueryExecution: Equatable {
    /// <p>The engine version that executed the query.</p>
    public let engineVersion: EngineVersion?
    /// <p>The SQL query statements which the query execution ran.</p>
    public let query: String?
    /// <p>The database in which the query execution occurred.</p>
    public let queryExecutionContext: QueryExecutionContext?
    /// <p>The unique identifier for each query execution.</p>
    public let queryExecutionId: String?
    /// <p>The location in Amazon S3 where query results were stored and the encryption option,
    ///             if any, used for query results. These are known as "client-side settings". If workgroup
    ///             settings override client-side settings, then the query uses the location for the query
    ///             results and the encryption configuration that are specified for the workgroup.</p>
    public let resultConfiguration: ResultConfiguration?
    /// <p>The type of query statement that was run. <code>DDL</code> indicates DDL query
    ///             statements. <code>DML</code> indicates DML (Data Manipulation Language) query
    ///             statements, such as <code>CREATE TABLE AS SELECT</code>. <code>UTILITY</code> indicates
    ///             query statements other than DDL and DML, such as <code>SHOW CREATE TABLE</code>, or
    ///                 <code>DESCRIBE <table></code>.</p>
    public let statementType: StatementType?
    /// <p>Query execution statistics, such as the amount of data scanned, the amount of time
    ///             that the query took to process, and the type of statement that was run.</p>
    public let statistics: QueryExecutionStatistics?
    /// <p>The completion date, current state, submission time, and state change reason (if
    ///             applicable) for the query execution.</p>
    public let status: QueryExecutionStatus?
    /// <p>The name of the workgroup in which the query ran.</p>
    public let workGroup: String?

    public init (
        engineVersion: EngineVersion? = nil,
        query: String? = nil,
        queryExecutionContext: QueryExecutionContext? = nil,
        queryExecutionId: String? = nil,
        resultConfiguration: ResultConfiguration? = nil,
        statementType: StatementType? = nil,
        statistics: QueryExecutionStatistics? = nil,
        status: QueryExecutionStatus? = nil,
        workGroup: String? = nil
    )
    {
        self.engineVersion = engineVersion
        self.query = query
        self.queryExecutionContext = queryExecutionContext
        self.queryExecutionId = queryExecutionId
        self.resultConfiguration = resultConfiguration
        self.statementType = statementType
        self.statistics = statistics
        self.status = status
        self.workGroup = workGroup
    }
}
