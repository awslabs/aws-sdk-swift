// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Row: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case data = "Data"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = data {
            var dataContainer = encodeContainer.nestedUnkeyedContainer(forKey: .data)
            for datumlist0 in data {
                try dataContainer.encode(datumlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataContainer = try containerValues.decodeIfPresent([Datum].self, forKey: .data)
        var dataDecoded0:[Datum]? = nil
        if let dataContainer = dataContainer {
            dataDecoded0 = [Datum]()
            for structure0 in dataContainer {
                dataDecoded0?.append(structure0)
            }
        }
        data = dataDecoded0
    }
}
