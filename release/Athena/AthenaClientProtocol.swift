// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Amazon Athena is an interactive query service that lets you use standard SQL to
///             analyze data directly in Amazon S3. You can point Athena at your data in Amazon S3 and
///             run ad-hoc queries and get results in seconds. Athena is serverless, so there is no
///             infrastructure to set up or manage. You pay only for the queries you run. Athena scales
///             automatically—executing queries in parallel—so results are fast, even with large
///             datasets and complex queries. For more information, see <a href="http://docs.aws.amazon.com/athena/latest/ug/what-is.html">What is Amazon
///                 Athena</a> in the <i>Amazon Athena User Guide</i>.</p>
///         <p>If you connect to Athena using the JDBC driver, use version 1.1.0 of the driver or
///             later with the Amazon Athena API. Earlier version drivers do not support the API. For
///             more information and to download the driver, see <a href="https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html">Accessing
///                 Amazon Athena with JDBC</a>.</p>
///         <p>For code samples using the AWS SDK for Java, see <a href="https://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
///                 Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
public protocol AthenaClientProtocol {
    /// <p>Returns the details of a single named query or a list of up to 50 queries, which you
    ///             provide as an array of query ID strings. Requires you to have access to the workgroup in
    ///             which the queries were saved. Use <a>ListNamedQueriesInput</a> to get the
    ///             list of named query IDs in the specified workgroup. If information could not be
    ///             retrieved for a submitted query ID, information about the query ID submitted is listed
    ///             under <a>UnprocessedNamedQueryId</a>. Named queries differ from executed
    ///             queries. Use <a>BatchGetQueryExecutionInput</a> to get details about each
    ///             unique query execution, and <a>ListQueryExecutionsInput</a> to get a list of
    ///             query execution IDs.</p>
    func batchGetNamedQuery(input: BatchGetNamedQueryInput, completion: @escaping (SdkResult<BatchGetNamedQueryOutputResponse, BatchGetNamedQueryOutputError>) -> Void)
    /// <p>Returns the details of a single query execution or a list of up to 50 query
    ///             executions, which you provide as an array of query execution ID strings. Requires you to
    ///             have access to the workgroup in which the queries ran. To get a list of query execution
    ///             IDs, use <a>ListQueryExecutionsInput$WorkGroup</a>. Query executions differ
    ///             from named (saved) queries. Use <a>BatchGetNamedQueryInput</a> to get details
    ///             about named queries.</p>
    func batchGetQueryExecution(input: BatchGetQueryExecutionInput, completion: @escaping (SdkResult<BatchGetQueryExecutionOutputResponse, BatchGetQueryExecutionOutputError>) -> Void)
    /// <p>Creates (registers) a data catalog with the specified name and properties. Catalogs
    ///             created are visible to all users of the same AWS account.</p>
    func createDataCatalog(input: CreateDataCatalogInput, completion: @escaping (SdkResult<CreateDataCatalogOutputResponse, CreateDataCatalogOutputError>) -> Void)
    /// <p>Creates a named query in the specified workgroup. Requires that you have access to the
    ///             workgroup.</p>
    ///         <p>For code samples using the AWS SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
    ///                 Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
    func createNamedQuery(input: CreateNamedQueryInput, completion: @escaping (SdkResult<CreateNamedQueryOutputResponse, CreateNamedQueryOutputError>) -> Void)
    /// <p>Creates a prepared statement for use with SQL queries in Athena.</p>
    func createPreparedStatement(input: CreatePreparedStatementInput, completion: @escaping (SdkResult<CreatePreparedStatementOutputResponse, CreatePreparedStatementOutputError>) -> Void)
    /// <p>Creates a workgroup with the specified name.</p>
    func createWorkGroup(input: CreateWorkGroupInput, completion: @escaping (SdkResult<CreateWorkGroupOutputResponse, CreateWorkGroupOutputError>) -> Void)
    /// <p>Deletes a data catalog.</p>
    func deleteDataCatalog(input: DeleteDataCatalogInput, completion: @escaping (SdkResult<DeleteDataCatalogOutputResponse, DeleteDataCatalogOutputError>) -> Void)
    /// <p>Deletes the named query if you have access to the workgroup in which the query was
    ///             saved.</p>
    ///         <p>For code samples using the AWS SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
    ///                 Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
    func deleteNamedQuery(input: DeleteNamedQueryInput, completion: @escaping (SdkResult<DeleteNamedQueryOutputResponse, DeleteNamedQueryOutputError>) -> Void)
    /// <p>Deletes the prepared statement with the specified name from the specified
    ///             workgroup.</p>
    func deletePreparedStatement(input: DeletePreparedStatementInput, completion: @escaping (SdkResult<DeletePreparedStatementOutputResponse, DeletePreparedStatementOutputError>) -> Void)
    /// <p>Deletes the workgroup with the specified name. The primary workgroup cannot be
    ///             deleted.</p>
    func deleteWorkGroup(input: DeleteWorkGroupInput, completion: @escaping (SdkResult<DeleteWorkGroupOutputResponse, DeleteWorkGroupOutputError>) -> Void)
    /// <p>Returns a database object for the specified database and data catalog.</p>
    func getDatabase(input: GetDatabaseInput, completion: @escaping (SdkResult<GetDatabaseOutputResponse, GetDatabaseOutputError>) -> Void)
    /// <p>Returns the specified data catalog.</p>
    func getDataCatalog(input: GetDataCatalogInput, completion: @escaping (SdkResult<GetDataCatalogOutputResponse, GetDataCatalogOutputError>) -> Void)
    /// <p>Returns information about a single query. Requires that you have access to the
    ///             workgroup in which the query was saved.</p>
    func getNamedQuery(input: GetNamedQueryInput, completion: @escaping (SdkResult<GetNamedQueryOutputResponse, GetNamedQueryOutputError>) -> Void)
    /// <p>Retrieves the prepared statement with the specified name from the specified
    ///             workgroup.</p>
    func getPreparedStatement(input: GetPreparedStatementInput, completion: @escaping (SdkResult<GetPreparedStatementOutputResponse, GetPreparedStatementOutputError>) -> Void)
    /// <p>Returns information about a single execution of a query if you have access to the
    ///             workgroup in which the query ran. Each time a query executes, information about the
    ///             query execution is saved with a unique ID.</p>
    func getQueryExecution(input: GetQueryExecutionInput, completion: @escaping (SdkResult<GetQueryExecutionOutputResponse, GetQueryExecutionOutputError>) -> Void)
    /// <p>Streams the results of a single query execution specified by
    ///                 <code>QueryExecutionId</code> from the Athena query results location in Amazon S3.
    ///             For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query Results</a> in the <i>Amazon
    ///                 Athena User Guide</i>. This request does not execute the query but returns
    ///             results. Use <a>StartQueryExecution</a> to run a query.</p>
    ///         <p>To stream query results successfully, the IAM principal with permission to call
    ///                 <code>GetQueryResults</code> also must have permissions to the Amazon S3
    ///                 <code>GetObject</code> action for the Athena query results location.</p>
    ///         <important>
    ///             <p>IAM principals with permission to the Amazon S3 <code>GetObject</code> action for
    ///                 the query results location are able to retrieve query results from Amazon S3 even if
    ///                 permission to the <code>GetQueryResults</code> action is denied. To restrict user or
    ///                 role access, ensure that Amazon S3 permissions to the Athena query location are
    ///                 denied.</p>
    ///         </important>
    func getQueryResults(input: GetQueryResultsInput, completion: @escaping (SdkResult<GetQueryResultsOutputResponse, GetQueryResultsOutputError>) -> Void)
    /// <p>Returns table metadata for the specified catalog, database, and table.</p>
    func getTableMetadata(input: GetTableMetadataInput, completion: @escaping (SdkResult<GetTableMetadataOutputResponse, GetTableMetadataOutputError>) -> Void)
    /// <p>Returns information about the workgroup with the specified name.</p>
    func getWorkGroup(input: GetWorkGroupInput, completion: @escaping (SdkResult<GetWorkGroupOutputResponse, GetWorkGroupOutputError>) -> Void)
    /// <p>Lists the databases in the specified data catalog.</p>
    func listDatabases(input: ListDatabasesInput, completion: @escaping (SdkResult<ListDatabasesOutputResponse, ListDatabasesOutputError>) -> Void)
    /// <p>Lists the data catalogs in the current AWS account.</p>
    func listDataCatalogs(input: ListDataCatalogsInput, completion: @escaping (SdkResult<ListDataCatalogsOutputResponse, ListDataCatalogsOutputError>) -> Void)
    /// <p>Returns a list of engine versions that are available to choose from, including the
    ///             Auto option.</p>
    func listEngineVersions(input: ListEngineVersionsInput, completion: @escaping (SdkResult<ListEngineVersionsOutputResponse, ListEngineVersionsOutputError>) -> Void)
    /// <p>Provides a list of available query IDs only for queries saved in the specified
    ///             workgroup. Requires that you have access to the specified workgroup. If a workgroup is
    ///             not specified, lists the saved queries for the primary workgroup.</p>
    ///         <p>For code samples using the AWS SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
    ///                 Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
    func listNamedQueries(input: ListNamedQueriesInput, completion: @escaping (SdkResult<ListNamedQueriesOutputResponse, ListNamedQueriesOutputError>) -> Void)
    /// <p>Lists the prepared statements in the specfied workgroup.</p>
    func listPreparedStatements(input: ListPreparedStatementsInput, completion: @escaping (SdkResult<ListPreparedStatementsOutputResponse, ListPreparedStatementsOutputError>) -> Void)
    /// <p>Provides a list of available query execution IDs for the queries in the specified
    ///             workgroup. If a workgroup is not specified, returns a list of query execution IDs for
    ///             the primary workgroup. Requires you to have access to the workgroup in which the queries
    ///             ran.</p>
    ///         <p>For code samples using the AWS SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
    ///                 Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
    func listQueryExecutions(input: ListQueryExecutionsInput, completion: @escaping (SdkResult<ListQueryExecutionsOutputResponse, ListQueryExecutionsOutputError>) -> Void)
    /// <p>Lists the metadata for the tables in the specified data catalog database.</p>
    func listTableMetadata(input: ListTableMetadataInput, completion: @escaping (SdkResult<ListTableMetadataOutputResponse, ListTableMetadataOutputError>) -> Void)
    /// <p>Lists the tags associated with an Athena workgroup or data catalog resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Lists available workgroups for the account.</p>
    func listWorkGroups(input: ListWorkGroupsInput, completion: @escaping (SdkResult<ListWorkGroupsOutputResponse, ListWorkGroupsOutputError>) -> Void)
    /// <p>Runs the SQL query statements contained in the <code>Query</code>. Requires you to
    ///             have access to the workgroup in which the query ran. Running queries against an external
    ///             catalog requires <a>GetDataCatalog</a> permission to the catalog. For code
    ///             samples using the AWS SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
    ///                 Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
    func startQueryExecution(input: StartQueryExecutionInput, completion: @escaping (SdkResult<StartQueryExecutionOutputResponse, StartQueryExecutionOutputError>) -> Void)
    /// <p>Stops a query execution. Requires you to have access to the workgroup in which the
    ///             query ran.</p>
    ///         <p>For code samples using the AWS SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
    ///                 Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
    func stopQueryExecution(input: StopQueryExecutionInput, completion: @escaping (SdkResult<StopQueryExecutionOutputResponse, StopQueryExecutionOutputError>) -> Void)
    /// <p>Adds one or more tags to an Athena resource. A tag is a label that you assign to a
    ///             resource. In Athena, a resource can be a workgroup or data catalog. Each tag consists of
    ///             a key and an optional value, both of which you define. For example, you can use tags to
    ///             categorize Athena workgroups or data catalogs by purpose, owner, or environment. Use a
    ///             consistent set of tag keys to make it easier to search and filter workgroups or data
    ///             catalogs in your account. For best practices, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Tagging Best Practices</a>. Tag keys can be from 1 to 128 UTF-8 Unicode
    ///             characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use
    ///             letters and numbers representable in UTF-8, and the following characters: + - = . _ : /
    ///             @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you
    ///             specify more than one tag, separate them by commas.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes one or more tags from a data catalog or workgroup resource.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates the data catalog that has the specified name.</p>
    func updateDataCatalog(input: UpdateDataCatalogInput, completion: @escaping (SdkResult<UpdateDataCatalogOutputResponse, UpdateDataCatalogOutputError>) -> Void)
    /// <p>Updates a prepared statement.</p>
    func updatePreparedStatement(input: UpdatePreparedStatementInput, completion: @escaping (SdkResult<UpdatePreparedStatementOutputResponse, UpdatePreparedStatementOutputError>) -> Void)
    /// <p>Updates the workgroup with the specified name. The workgroup's name cannot be
    ///             changed.</p>
    func updateWorkGroup(input: UpdateWorkGroupInput, completion: @escaping (SdkResult<UpdateWorkGroupOutputResponse, UpdateWorkGroupOutputError>) -> Void)
}
