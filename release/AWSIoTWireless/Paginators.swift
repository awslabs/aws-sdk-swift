// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListDestinationsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListDestinationsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListDestinationsOutputResponse`
extension IotWirelessClient {
    public func listDestinationsPaginated(input: ListDestinationsInput) -> ClientRuntime.PaginatorSequence<ListDestinationsInput, ListDestinationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDestinationsInput, ListDestinationsOutputResponse>(input: input, inputKey: \ListDestinationsInput.nextToken, outputKey: \ListDestinationsOutputResponse.nextToken, paginationFunction: self.listDestinations(input:))
    }
}

extension ListDestinationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDestinationsInput {
        return ListDestinationsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListDeviceProfilesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListDeviceProfilesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListDeviceProfilesOutputResponse`
extension IotWirelessClient {
    public func listDeviceProfilesPaginated(input: ListDeviceProfilesInput) -> ClientRuntime.PaginatorSequence<ListDeviceProfilesInput, ListDeviceProfilesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDeviceProfilesInput, ListDeviceProfilesOutputResponse>(input: input, inputKey: \ListDeviceProfilesInput.nextToken, outputKey: \ListDeviceProfilesOutputResponse.nextToken, paginationFunction: self.listDeviceProfiles(input:))
    }
}

extension ListDeviceProfilesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDeviceProfilesInput {
        return ListDeviceProfilesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListFuotaTasksOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListFuotaTasksInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListFuotaTasksOutputResponse`
extension IotWirelessClient {
    public func listFuotaTasksPaginated(input: ListFuotaTasksInput) -> ClientRuntime.PaginatorSequence<ListFuotaTasksInput, ListFuotaTasksOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListFuotaTasksInput, ListFuotaTasksOutputResponse>(input: input, inputKey: \ListFuotaTasksInput.nextToken, outputKey: \ListFuotaTasksOutputResponse.nextToken, paginationFunction: self.listFuotaTasks(input:))
    }
}

extension ListFuotaTasksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFuotaTasksInput {
        return ListFuotaTasksInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListMulticastGroupsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListMulticastGroupsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListMulticastGroupsOutputResponse`
extension IotWirelessClient {
    public func listMulticastGroupsPaginated(input: ListMulticastGroupsInput) -> ClientRuntime.PaginatorSequence<ListMulticastGroupsInput, ListMulticastGroupsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListMulticastGroupsInput, ListMulticastGroupsOutputResponse>(input: input, inputKey: \ListMulticastGroupsInput.nextToken, outputKey: \ListMulticastGroupsOutputResponse.nextToken, paginationFunction: self.listMulticastGroups(input:))
    }
}

extension ListMulticastGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMulticastGroupsInput {
        return ListMulticastGroupsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListMulticastGroupsByFuotaTaskOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListMulticastGroupsByFuotaTaskInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListMulticastGroupsByFuotaTaskOutputResponse`
extension IotWirelessClient {
    public func listMulticastGroupsByFuotaTaskPaginated(input: ListMulticastGroupsByFuotaTaskInput) -> ClientRuntime.PaginatorSequence<ListMulticastGroupsByFuotaTaskInput, ListMulticastGroupsByFuotaTaskOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListMulticastGroupsByFuotaTaskInput, ListMulticastGroupsByFuotaTaskOutputResponse>(input: input, inputKey: \ListMulticastGroupsByFuotaTaskInput.nextToken, outputKey: \ListMulticastGroupsByFuotaTaskOutputResponse.nextToken, paginationFunction: self.listMulticastGroupsByFuotaTask(input:))
    }
}

extension ListMulticastGroupsByFuotaTaskInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMulticastGroupsByFuotaTaskInput {
        return ListMulticastGroupsByFuotaTaskInput(
            id: self.id,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListNetworkAnalyzerConfigurationsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListNetworkAnalyzerConfigurationsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListNetworkAnalyzerConfigurationsOutputResponse`
extension IotWirelessClient {
    public func listNetworkAnalyzerConfigurationsPaginated(input: ListNetworkAnalyzerConfigurationsInput) -> ClientRuntime.PaginatorSequence<ListNetworkAnalyzerConfigurationsInput, ListNetworkAnalyzerConfigurationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListNetworkAnalyzerConfigurationsInput, ListNetworkAnalyzerConfigurationsOutputResponse>(input: input, inputKey: \ListNetworkAnalyzerConfigurationsInput.nextToken, outputKey: \ListNetworkAnalyzerConfigurationsOutputResponse.nextToken, paginationFunction: self.listNetworkAnalyzerConfigurations(input:))
    }
}

extension ListNetworkAnalyzerConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListNetworkAnalyzerConfigurationsInput {
        return ListNetworkAnalyzerConfigurationsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListPositionConfigurationsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListPositionConfigurationsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListPositionConfigurationsOutputResponse`
extension IotWirelessClient {
    public func listPositionConfigurationsPaginated(input: ListPositionConfigurationsInput) -> ClientRuntime.PaginatorSequence<ListPositionConfigurationsInput, ListPositionConfigurationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListPositionConfigurationsInput, ListPositionConfigurationsOutputResponse>(input: input, inputKey: \ListPositionConfigurationsInput.nextToken, outputKey: \ListPositionConfigurationsOutputResponse.nextToken, paginationFunction: self.listPositionConfigurations(input:))
    }
}

extension ListPositionConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPositionConfigurationsInput {
        return ListPositionConfigurationsInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceType: self.resourceType
        )}
}

/// Paginate over `[ListQueuedMessagesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListQueuedMessagesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListQueuedMessagesOutputResponse`
extension IotWirelessClient {
    public func listQueuedMessagesPaginated(input: ListQueuedMessagesInput) -> ClientRuntime.PaginatorSequence<ListQueuedMessagesInput, ListQueuedMessagesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListQueuedMessagesInput, ListQueuedMessagesOutputResponse>(input: input, inputKey: \ListQueuedMessagesInput.nextToken, outputKey: \ListQueuedMessagesOutputResponse.nextToken, paginationFunction: self.listQueuedMessages(input:))
    }
}

extension ListQueuedMessagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListQueuedMessagesInput {
        return ListQueuedMessagesInput(
            id: self.id,
            maxResults: self.maxResults,
            nextToken: token,
            wirelessDeviceType: self.wirelessDeviceType
        )}
}

/// Paginate over `[ListServiceProfilesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListServiceProfilesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListServiceProfilesOutputResponse`
extension IotWirelessClient {
    public func listServiceProfilesPaginated(input: ListServiceProfilesInput) -> ClientRuntime.PaginatorSequence<ListServiceProfilesInput, ListServiceProfilesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListServiceProfilesInput, ListServiceProfilesOutputResponse>(input: input, inputKey: \ListServiceProfilesInput.nextToken, outputKey: \ListServiceProfilesOutputResponse.nextToken, paginationFunction: self.listServiceProfiles(input:))
    }
}

extension ListServiceProfilesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListServiceProfilesInput {
        return ListServiceProfilesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListWirelessDevicesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListWirelessDevicesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListWirelessDevicesOutputResponse`
extension IotWirelessClient {
    public func listWirelessDevicesPaginated(input: ListWirelessDevicesInput) -> ClientRuntime.PaginatorSequence<ListWirelessDevicesInput, ListWirelessDevicesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListWirelessDevicesInput, ListWirelessDevicesOutputResponse>(input: input, inputKey: \ListWirelessDevicesInput.nextToken, outputKey: \ListWirelessDevicesOutputResponse.nextToken, paginationFunction: self.listWirelessDevices(input:))
    }
}

extension ListWirelessDevicesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListWirelessDevicesInput {
        return ListWirelessDevicesInput(
            destinationName: self.destinationName,
            deviceProfileId: self.deviceProfileId,
            fuotaTaskId: self.fuotaTaskId,
            maxResults: self.maxResults,
            multicastGroupId: self.multicastGroupId,
            nextToken: token,
            serviceProfileId: self.serviceProfileId,
            wirelessDeviceType: self.wirelessDeviceType
        )}
}

/// Paginate over `[ListWirelessGatewaysOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListWirelessGatewaysInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListWirelessGatewaysOutputResponse`
extension IotWirelessClient {
    public func listWirelessGatewaysPaginated(input: ListWirelessGatewaysInput) -> ClientRuntime.PaginatorSequence<ListWirelessGatewaysInput, ListWirelessGatewaysOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListWirelessGatewaysInput, ListWirelessGatewaysOutputResponse>(input: input, inputKey: \ListWirelessGatewaysInput.nextToken, outputKey: \ListWirelessGatewaysOutputResponse.nextToken, paginationFunction: self.listWirelessGateways(input:))
    }
}

extension ListWirelessGatewaysInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListWirelessGatewaysInput {
        return ListWirelessGatewaysInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
