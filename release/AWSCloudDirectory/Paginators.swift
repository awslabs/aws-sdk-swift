// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListAppliedSchemaArnsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListAppliedSchemaArnsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListAppliedSchemaArnsOutputResponse`
extension CloudDirectoryClient {
    public func listAppliedSchemaArnsPaginated(input: ListAppliedSchemaArnsInput) -> ClientRuntime.PaginatorSequence<ListAppliedSchemaArnsInput, ListAppliedSchemaArnsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAppliedSchemaArnsInput, ListAppliedSchemaArnsOutputResponse>(input: input, inputKey: \ListAppliedSchemaArnsInput.nextToken, outputKey: \ListAppliedSchemaArnsOutputResponse.nextToken, paginationFunction: self.listAppliedSchemaArns(input:))
    }
}

extension ListAppliedSchemaArnsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppliedSchemaArnsInput {
        return ListAppliedSchemaArnsInput(
            directoryArn: self.directoryArn,
            maxResults: self.maxResults,
            nextToken: token,
            schemaArn: self.schemaArn
        )}
}

/// Paginate over `[ListAttachedIndicesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListAttachedIndicesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListAttachedIndicesOutputResponse`
extension CloudDirectoryClient {
    public func listAttachedIndicesPaginated(input: ListAttachedIndicesInput) -> ClientRuntime.PaginatorSequence<ListAttachedIndicesInput, ListAttachedIndicesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAttachedIndicesInput, ListAttachedIndicesOutputResponse>(input: input, inputKey: \ListAttachedIndicesInput.nextToken, outputKey: \ListAttachedIndicesOutputResponse.nextToken, paginationFunction: self.listAttachedIndices(input:))
    }
}

extension ListAttachedIndicesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAttachedIndicesInput {
        return ListAttachedIndicesInput(
            consistencyLevel: self.consistencyLevel,
            directoryArn: self.directoryArn,
            maxResults: self.maxResults,
            nextToken: token,
            targetReference: self.targetReference
        )}
}

/// Paginate over `[ListDevelopmentSchemaArnsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListDevelopmentSchemaArnsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListDevelopmentSchemaArnsOutputResponse`
extension CloudDirectoryClient {
    public func listDevelopmentSchemaArnsPaginated(input: ListDevelopmentSchemaArnsInput) -> ClientRuntime.PaginatorSequence<ListDevelopmentSchemaArnsInput, ListDevelopmentSchemaArnsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDevelopmentSchemaArnsInput, ListDevelopmentSchemaArnsOutputResponse>(input: input, inputKey: \ListDevelopmentSchemaArnsInput.nextToken, outputKey: \ListDevelopmentSchemaArnsOutputResponse.nextToken, paginationFunction: self.listDevelopmentSchemaArns(input:))
    }
}

extension ListDevelopmentSchemaArnsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDevelopmentSchemaArnsInput {
        return ListDevelopmentSchemaArnsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListDirectoriesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListDirectoriesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListDirectoriesOutputResponse`
extension CloudDirectoryClient {
    public func listDirectoriesPaginated(input: ListDirectoriesInput) -> ClientRuntime.PaginatorSequence<ListDirectoriesInput, ListDirectoriesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDirectoriesInput, ListDirectoriesOutputResponse>(input: input, inputKey: \ListDirectoriesInput.nextToken, outputKey: \ListDirectoriesOutputResponse.nextToken, paginationFunction: self.listDirectories(input:))
    }
}

extension ListDirectoriesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDirectoriesInput {
        return ListDirectoriesInput(
            maxResults: self.maxResults,
            nextToken: token,
            state: self.state
        )}
}

/// Paginate over `[ListFacetAttributesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListFacetAttributesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListFacetAttributesOutputResponse`
extension CloudDirectoryClient {
    public func listFacetAttributesPaginated(input: ListFacetAttributesInput) -> ClientRuntime.PaginatorSequence<ListFacetAttributesInput, ListFacetAttributesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListFacetAttributesInput, ListFacetAttributesOutputResponse>(input: input, inputKey: \ListFacetAttributesInput.nextToken, outputKey: \ListFacetAttributesOutputResponse.nextToken, paginationFunction: self.listFacetAttributes(input:))
    }
}

extension ListFacetAttributesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFacetAttributesInput {
        return ListFacetAttributesInput(
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            schemaArn: self.schemaArn
        )}
}

/// Paginate over `[ListFacetNamesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListFacetNamesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListFacetNamesOutputResponse`
extension CloudDirectoryClient {
    public func listFacetNamesPaginated(input: ListFacetNamesInput) -> ClientRuntime.PaginatorSequence<ListFacetNamesInput, ListFacetNamesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListFacetNamesInput, ListFacetNamesOutputResponse>(input: input, inputKey: \ListFacetNamesInput.nextToken, outputKey: \ListFacetNamesOutputResponse.nextToken, paginationFunction: self.listFacetNames(input:))
    }
}

extension ListFacetNamesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFacetNamesInput {
        return ListFacetNamesInput(
            maxResults: self.maxResults,
            nextToken: token,
            schemaArn: self.schemaArn
        )}
}

/// Paginate over `[ListIndexOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListIndexInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListIndexOutputResponse`
extension CloudDirectoryClient {
    public func listIndexPaginated(input: ListIndexInput) -> ClientRuntime.PaginatorSequence<ListIndexInput, ListIndexOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListIndexInput, ListIndexOutputResponse>(input: input, inputKey: \ListIndexInput.nextToken, outputKey: \ListIndexOutputResponse.nextToken, paginationFunction: self.listIndex(input:))
    }
}

extension ListIndexInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListIndexInput {
        return ListIndexInput(
            consistencyLevel: self.consistencyLevel,
            directoryArn: self.directoryArn,
            indexReference: self.indexReference,
            maxResults: self.maxResults,
            nextToken: token,
            rangesOnIndexedValues: self.rangesOnIndexedValues
        )}
}

/// Paginate over `[ListManagedSchemaArnsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListManagedSchemaArnsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListManagedSchemaArnsOutputResponse`
extension CloudDirectoryClient {
    public func listManagedSchemaArnsPaginated(input: ListManagedSchemaArnsInput) -> ClientRuntime.PaginatorSequence<ListManagedSchemaArnsInput, ListManagedSchemaArnsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListManagedSchemaArnsInput, ListManagedSchemaArnsOutputResponse>(input: input, inputKey: \ListManagedSchemaArnsInput.nextToken, outputKey: \ListManagedSchemaArnsOutputResponse.nextToken, paginationFunction: self.listManagedSchemaArns(input:))
    }
}

extension ListManagedSchemaArnsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListManagedSchemaArnsInput {
        return ListManagedSchemaArnsInput(
            maxResults: self.maxResults,
            nextToken: token,
            schemaArn: self.schemaArn
        )}
}

/// Paginate over `[ListObjectAttributesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListObjectAttributesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListObjectAttributesOutputResponse`
extension CloudDirectoryClient {
    public func listObjectAttributesPaginated(input: ListObjectAttributesInput) -> ClientRuntime.PaginatorSequence<ListObjectAttributesInput, ListObjectAttributesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListObjectAttributesInput, ListObjectAttributesOutputResponse>(input: input, inputKey: \ListObjectAttributesInput.nextToken, outputKey: \ListObjectAttributesOutputResponse.nextToken, paginationFunction: self.listObjectAttributes(input:))
    }
}

extension ListObjectAttributesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListObjectAttributesInput {
        return ListObjectAttributesInput(
            consistencyLevel: self.consistencyLevel,
            directoryArn: self.directoryArn,
            facetFilter: self.facetFilter,
            maxResults: self.maxResults,
            nextToken: token,
            objectReference: self.objectReference
        )}
}

/// Paginate over `[ListObjectChildrenOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListObjectChildrenInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListObjectChildrenOutputResponse`
extension CloudDirectoryClient {
    public func listObjectChildrenPaginated(input: ListObjectChildrenInput) -> ClientRuntime.PaginatorSequence<ListObjectChildrenInput, ListObjectChildrenOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListObjectChildrenInput, ListObjectChildrenOutputResponse>(input: input, inputKey: \ListObjectChildrenInput.nextToken, outputKey: \ListObjectChildrenOutputResponse.nextToken, paginationFunction: self.listObjectChildren(input:))
    }
}

extension ListObjectChildrenInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListObjectChildrenInput {
        return ListObjectChildrenInput(
            consistencyLevel: self.consistencyLevel,
            directoryArn: self.directoryArn,
            maxResults: self.maxResults,
            nextToken: token,
            objectReference: self.objectReference
        )}
}

/// Paginate over `[ListObjectParentPathsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListObjectParentPathsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListObjectParentPathsOutputResponse`
extension CloudDirectoryClient {
    public func listObjectParentPathsPaginated(input: ListObjectParentPathsInput) -> ClientRuntime.PaginatorSequence<ListObjectParentPathsInput, ListObjectParentPathsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListObjectParentPathsInput, ListObjectParentPathsOutputResponse>(input: input, inputKey: \ListObjectParentPathsInput.nextToken, outputKey: \ListObjectParentPathsOutputResponse.nextToken, paginationFunction: self.listObjectParentPaths(input:))
    }
}

extension ListObjectParentPathsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListObjectParentPathsInput {
        return ListObjectParentPathsInput(
            directoryArn: self.directoryArn,
            maxResults: self.maxResults,
            nextToken: token,
            objectReference: self.objectReference
        )}
}

/// Paginate over `[ListObjectParentsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListObjectParentsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListObjectParentsOutputResponse`
extension CloudDirectoryClient {
    public func listObjectParentsPaginated(input: ListObjectParentsInput) -> ClientRuntime.PaginatorSequence<ListObjectParentsInput, ListObjectParentsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListObjectParentsInput, ListObjectParentsOutputResponse>(input: input, inputKey: \ListObjectParentsInput.nextToken, outputKey: \ListObjectParentsOutputResponse.nextToken, paginationFunction: self.listObjectParents(input:))
    }
}

extension ListObjectParentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListObjectParentsInput {
        return ListObjectParentsInput(
            consistencyLevel: self.consistencyLevel,
            directoryArn: self.directoryArn,
            includeAllLinksToEachParent: self.includeAllLinksToEachParent,
            maxResults: self.maxResults,
            nextToken: token,
            objectReference: self.objectReference
        )}
}

/// Paginate over `[ListObjectPoliciesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListObjectPoliciesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListObjectPoliciesOutputResponse`
extension CloudDirectoryClient {
    public func listObjectPoliciesPaginated(input: ListObjectPoliciesInput) -> ClientRuntime.PaginatorSequence<ListObjectPoliciesInput, ListObjectPoliciesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListObjectPoliciesInput, ListObjectPoliciesOutputResponse>(input: input, inputKey: \ListObjectPoliciesInput.nextToken, outputKey: \ListObjectPoliciesOutputResponse.nextToken, paginationFunction: self.listObjectPolicies(input:))
    }
}

extension ListObjectPoliciesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListObjectPoliciesInput {
        return ListObjectPoliciesInput(
            consistencyLevel: self.consistencyLevel,
            directoryArn: self.directoryArn,
            maxResults: self.maxResults,
            nextToken: token,
            objectReference: self.objectReference
        )}
}

/// Paginate over `[ListPolicyAttachmentsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListPolicyAttachmentsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListPolicyAttachmentsOutputResponse`
extension CloudDirectoryClient {
    public func listPolicyAttachmentsPaginated(input: ListPolicyAttachmentsInput) -> ClientRuntime.PaginatorSequence<ListPolicyAttachmentsInput, ListPolicyAttachmentsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListPolicyAttachmentsInput, ListPolicyAttachmentsOutputResponse>(input: input, inputKey: \ListPolicyAttachmentsInput.nextToken, outputKey: \ListPolicyAttachmentsOutputResponse.nextToken, paginationFunction: self.listPolicyAttachments(input:))
    }
}

extension ListPolicyAttachmentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPolicyAttachmentsInput {
        return ListPolicyAttachmentsInput(
            consistencyLevel: self.consistencyLevel,
            directoryArn: self.directoryArn,
            maxResults: self.maxResults,
            nextToken: token,
            policyReference: self.policyReference
        )}
}

/// Paginate over `[ListPublishedSchemaArnsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListPublishedSchemaArnsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListPublishedSchemaArnsOutputResponse`
extension CloudDirectoryClient {
    public func listPublishedSchemaArnsPaginated(input: ListPublishedSchemaArnsInput) -> ClientRuntime.PaginatorSequence<ListPublishedSchemaArnsInput, ListPublishedSchemaArnsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListPublishedSchemaArnsInput, ListPublishedSchemaArnsOutputResponse>(input: input, inputKey: \ListPublishedSchemaArnsInput.nextToken, outputKey: \ListPublishedSchemaArnsOutputResponse.nextToken, paginationFunction: self.listPublishedSchemaArns(input:))
    }
}

extension ListPublishedSchemaArnsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPublishedSchemaArnsInput {
        return ListPublishedSchemaArnsInput(
            maxResults: self.maxResults,
            nextToken: token,
            schemaArn: self.schemaArn
        )}
}

/// Paginate over `[ListTagsForResourceOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListTagsForResourceInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListTagsForResourceOutputResponse`
extension CloudDirectoryClient {
    public func listTagsForResourcePaginated(input: ListTagsForResourceInput) -> ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse>(input: input, inputKey: \ListTagsForResourceInput.nextToken, outputKey: \ListTagsForResourceOutputResponse.nextToken, paginationFunction: self.listTagsForResource(input:))
    }
}

extension ListTagsForResourceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTagsForResourceInput {
        return ListTagsForResourceInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceArn: self.resourceArn
        )}
}

/// Paginate over `[ListTypedLinkFacetAttributesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListTypedLinkFacetAttributesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListTypedLinkFacetAttributesOutputResponse`
extension CloudDirectoryClient {
    public func listTypedLinkFacetAttributesPaginated(input: ListTypedLinkFacetAttributesInput) -> ClientRuntime.PaginatorSequence<ListTypedLinkFacetAttributesInput, ListTypedLinkFacetAttributesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTypedLinkFacetAttributesInput, ListTypedLinkFacetAttributesOutputResponse>(input: input, inputKey: \ListTypedLinkFacetAttributesInput.nextToken, outputKey: \ListTypedLinkFacetAttributesOutputResponse.nextToken, paginationFunction: self.listTypedLinkFacetAttributes(input:))
    }
}

extension ListTypedLinkFacetAttributesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTypedLinkFacetAttributesInput {
        return ListTypedLinkFacetAttributesInput(
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            schemaArn: self.schemaArn
        )}
}

/// Paginate over `[ListTypedLinkFacetNamesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListTypedLinkFacetNamesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListTypedLinkFacetNamesOutputResponse`
extension CloudDirectoryClient {
    public func listTypedLinkFacetNamesPaginated(input: ListTypedLinkFacetNamesInput) -> ClientRuntime.PaginatorSequence<ListTypedLinkFacetNamesInput, ListTypedLinkFacetNamesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTypedLinkFacetNamesInput, ListTypedLinkFacetNamesOutputResponse>(input: input, inputKey: \ListTypedLinkFacetNamesInput.nextToken, outputKey: \ListTypedLinkFacetNamesOutputResponse.nextToken, paginationFunction: self.listTypedLinkFacetNames(input:))
    }
}

extension ListTypedLinkFacetNamesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTypedLinkFacetNamesInput {
        return ListTypedLinkFacetNamesInput(
            maxResults: self.maxResults,
            nextToken: token,
            schemaArn: self.schemaArn
        )}
}

/// Paginate over `[LookupPolicyOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[LookupPolicyInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `LookupPolicyOutputResponse`
extension CloudDirectoryClient {
    public func lookupPolicyPaginated(input: LookupPolicyInput) -> ClientRuntime.PaginatorSequence<LookupPolicyInput, LookupPolicyOutputResponse> {
        return ClientRuntime.PaginatorSequence<LookupPolicyInput, LookupPolicyOutputResponse>(input: input, inputKey: \LookupPolicyInput.nextToken, outputKey: \LookupPolicyOutputResponse.nextToken, paginationFunction: self.lookupPolicy(input:))
    }
}

extension LookupPolicyInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> LookupPolicyInput {
        return LookupPolicyInput(
            directoryArn: self.directoryArn,
            maxResults: self.maxResults,
            nextToken: token,
            objectReference: self.objectReference
        )}
}
