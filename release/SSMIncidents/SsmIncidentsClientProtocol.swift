// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>AWS Systems Manager Incident Manager is an incident management console designed to help
///       users mitigate and recover from incidents affecting their AWS-hosted applications. An incident
///       is any unplanned interruption or reduction in quality of services. </p>
///          <p>Incident Manager increases incident resolution by notifying responders of impact,
///       highlighting relevant troubleshooting data, and providing collaboration tools to get services
///       back up and running. To achieve the primary goal of reducing the time-to-resolution of
///       critical incidents, Incident Manager automates response plans and enables responder team
///       escalation. </p>
public protocol SsmIncidentsClientProtocol {
    /// <p>A replication set replicates and encrypts your data to the provided Regions with the
    ///             provided KMS key. </p>
    func createReplicationSet(input: CreateReplicationSetInput, completion: @escaping (SdkResult<CreateReplicationSetOutput, CreateReplicationSetOutputError>) -> Void)
    /// <p>Creates a response plan that automates the initial response to incidents. A response
    ///             plan engages contacts, starts chat channel collaboration, and
    ///             initiates
    ///             runbooks at the beginning of an incident.</p>
    func createResponsePlan(input: CreateResponsePlanInput, completion: @escaping (SdkResult<CreateResponsePlanOutput, CreateResponsePlanOutputError>) -> Void)
    /// <p>Creates a custom timeline event on the incident details page of an incident record.
    ///             Timeline events are automatically created by Incident Manager, marking key moment during an
    ///             incident. You can create custom timeline events to mark important events that are
    ///             automatically detected by Incident Manager.</p>
    func createTimelineEvent(input: CreateTimelineEventInput, completion: @escaping (SdkResult<CreateTimelineEventOutput, CreateTimelineEventOutputError>) -> Void)
    /// <p>Delete an incident record from Incident Manager. </p>
    func deleteIncidentRecord(input: DeleteIncidentRecordInput, completion: @escaping (SdkResult<DeleteIncidentRecordOutput, DeleteIncidentRecordOutputError>) -> Void)
    /// <p>Deletes all Regions in your replication set. Deleting the replication set deletes all
    ///             Incident Manager data.</p>
    func deleteReplicationSet(input: DeleteReplicationSetInput, completion: @escaping (SdkResult<DeleteReplicationSetOutput, DeleteReplicationSetOutputError>) -> Void)
    /// <p>Deletes the resource policy that
    ///             AWS
    ///             Resource Access Manager uses to share your Incident Manager resource.</p>
    func deleteResourcePolicy(input: DeleteResourcePolicyInput, completion: @escaping (SdkResult<DeleteResourcePolicyOutput, DeleteResourcePolicyOutputError>) -> Void)
    /// <p>Deletes the specified response plan. Deleting a response plan stops all linked
    ///             CloudWatch alarms and EventBridge events from creating an incident with this response
    ///             plan.</p>
    func deleteResponsePlan(input: DeleteResponsePlanInput, completion: @escaping (SdkResult<DeleteResponsePlanOutput, DeleteResponsePlanOutputError>) -> Void)
    /// <p>Deletes a timeline event from an incident.</p>
    func deleteTimelineEvent(input: DeleteTimelineEventInput, completion: @escaping (SdkResult<DeleteTimelineEventOutput, DeleteTimelineEventOutputError>) -> Void)
    /// <p>Returns the details of the specified incident record.</p>
    func getIncidentRecord(input: GetIncidentRecordInput, completion: @escaping (SdkResult<GetIncidentRecordOutput, GetIncidentRecordOutputError>) -> Void)
    /// <p>Retrieve your Incident Manager replication set.</p>
    func getReplicationSet(input: GetReplicationSetInput, completion: @escaping (SdkResult<GetReplicationSetOutput, GetReplicationSetOutputError>) -> Void)
    /// <p>Retrieves the resource policies attached to the specified response plan.</p>
    func getResourcePolicies(input: GetResourcePoliciesInput, completion: @escaping (SdkResult<GetResourcePoliciesOutput, GetResourcePoliciesOutputError>) -> Void)
    /// <p>Retrieves the details of the specified response plan.</p>
    func getResponsePlan(input: GetResponsePlanInput, completion: @escaping (SdkResult<GetResponsePlanOutput, GetResponsePlanOutputError>) -> Void)
    /// <p>Retrieves a timeline event based on its ID and incident record.</p>
    func getTimelineEvent(input: GetTimelineEventInput, completion: @escaping (SdkResult<GetTimelineEventOutput, GetTimelineEventOutputError>) -> Void)
    /// <p>Lists all incident records in your account. Use this command to retrieve the Amazon
    ///             Resource Name (ARN) of the incident record you want to update. </p>
    func listIncidentRecords(input: ListIncidentRecordsInput, completion: @escaping (SdkResult<ListIncidentRecordsOutput, ListIncidentRecordsOutputError>) -> Void)
    /// <p>List all related items for an incident record.</p>
    func listRelatedItems(input: ListRelatedItemsInput, completion: @escaping (SdkResult<ListRelatedItemsOutput, ListRelatedItemsOutputError>) -> Void)
    /// <p>Lists details about the replication set configured in your account. </p>
    func listReplicationSets(input: ListReplicationSetsInput, completion: @escaping (SdkResult<ListReplicationSetsOutput, ListReplicationSetsOutputError>) -> Void)
    /// <p>Lists all response plans in your account.</p>
    func listResponsePlans(input: ListResponsePlansInput, completion: @escaping (SdkResult<ListResponsePlansOutput, ListResponsePlansOutputError>) -> Void)
    /// <p>Lists the tags that are attached to the specified response plan.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutput, ListTagsForResourceOutputError>) -> Void)
    /// <p>Lists timeline events of the specified incident record.</p>
    func listTimelineEvents(input: ListTimelineEventsInput, completion: @escaping (SdkResult<ListTimelineEventsOutput, ListTimelineEventsOutputError>) -> Void)
    /// <p>Adds a resource policy to the specified response plan.</p>
    func putResourcePolicy(input: PutResourcePolicyInput, completion: @escaping (SdkResult<PutResourcePolicyOutput, PutResourcePolicyOutputError>) -> Void)
    /// <p>Used to start an incident from CloudWatch alarms, EventBridge events, or manually. </p>
    func startIncident(input: StartIncidentInput, completion: @escaping (SdkResult<StartIncidentOutput, StartIncidentOutputError>) -> Void)
    /// <p>Adds a tag to a response plan.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutput, TagResourceOutputError>) -> Void)
    /// <p>Removes a tag from a resource.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutput, UntagResourceOutputError>) -> Void)
    /// <p>Update deletion protection to either allow or deny deletion of the final Region in a
    ///             replication set.</p>
    func updateDeletionProtection(input: UpdateDeletionProtectionInput, completion: @escaping (SdkResult<UpdateDeletionProtectionOutput, UpdateDeletionProtectionOutputError>) -> Void)
    /// <p>Update the details of an incident record. You can use this action to update an
    ///             incident record from the defined chat channel. For more information about using actions
    ///             in chat channels, see <a href="https://docs.aws.amazon.com/incident-manager/latest/userguide/chat.html#chat-interact">Interacting through chat</a>.</p>
    func updateIncidentRecord(input: UpdateIncidentRecordInput, completion: @escaping (SdkResult<UpdateIncidentRecordOutput, UpdateIncidentRecordOutputError>) -> Void)
    /// <p>Add or remove related items from the related items tab of an incident record.</p>
    func updateRelatedItems(input: UpdateRelatedItemsInput, completion: @escaping (SdkResult<UpdateRelatedItemsOutput, UpdateRelatedItemsOutputError>) -> Void)
    /// <p>Add or delete Regions from your replication set.</p>
    func updateReplicationSet(input: UpdateReplicationSetInput, completion: @escaping (SdkResult<UpdateReplicationSetOutput, UpdateReplicationSetOutputError>) -> Void)
    /// <p>Updates the specified response plan.</p>
    func updateResponsePlan(input: UpdateResponsePlanInput, completion: @escaping (SdkResult<UpdateResponsePlanOutput, UpdateResponsePlanOutputError>) -> Void)
    /// <p>Updates a timeline event. You can update events of type <code>Custom
    ///             Event</code>.</p>
    func updateTimelineEvent(input: UpdateTimelineEventInput, completion: @escaping (SdkResult<UpdateTimelineEventOutput, UpdateTimelineEventOutputError>) -> Void)
}
