// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IncidentTemplate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dedupeString
        case impact
        case notificationTargets
        case summary
        case title
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dedupeString = dedupeString {
            try encodeContainer.encode(dedupeString, forKey: .dedupeString)
        }
        if let impact = impact {
            try encodeContainer.encode(impact, forKey: .impact)
        }
        if let notificationTargets = notificationTargets {
            var notificationTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notificationTargets)
            for notificationtargetset0 in notificationTargets {
                try notificationTargetsContainer.encode(notificationtargetset0)
            }
        }
        if let summary = summary {
            try encodeContainer.encode(summary, forKey: .summary)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let titleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .title)
        title = titleDecoded
        let impactDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .impact)
        impact = impactDecoded
        let summaryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .summary)
        summary = summaryDecoded
        let dedupeStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dedupeString)
        dedupeString = dedupeStringDecoded
        let notificationTargetsContainer = try containerValues.decodeIfPresent(Set<NotificationTargetItem>.self, forKey: .notificationTargets)
        var notificationTargetsDecoded0:Set<NotificationTargetItem>? = nil
        if let notificationTargetsContainer = notificationTargetsContainer {
            notificationTargetsDecoded0 = Set<NotificationTargetItem>()
            for union0 in notificationTargetsContainer {
                notificationTargetsDecoded0?.insert(union0)
            }
        }
        notificationTargets = notificationTargetsDecoded0
    }
}
