// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartIncidentInputBody: Equatable {
    public let clientToken: String?
    public let responsePlanArn: String?
    public let title: String?
    public let impact: Int?
    public let triggerDetails: TriggerDetails?
    public let relatedItems: [RelatedItem]?
}

extension StartIncidentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken
        case impact
        case relatedItems
        case responsePlanArn
        case title
        case triggerDetails
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let responsePlanArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .responsePlanArn)
        responsePlanArn = responsePlanArnDecoded
        let titleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .title)
        title = titleDecoded
        let impactDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .impact)
        impact = impactDecoded
        let triggerDetailsDecoded = try containerValues.decodeIfPresent(TriggerDetails.self, forKey: .triggerDetails)
        triggerDetails = triggerDetailsDecoded
        let relatedItemsContainer = try containerValues.decodeIfPresent([RelatedItem].self, forKey: .relatedItems)
        var relatedItemsDecoded0:[RelatedItem]? = nil
        if let relatedItemsContainer = relatedItemsContainer {
            relatedItemsDecoded0 = [RelatedItem]()
            for structure0 in relatedItemsContainer {
                relatedItemsDecoded0?.append(structure0)
            }
        }
        relatedItems = relatedItemsDecoded0
    }
}
