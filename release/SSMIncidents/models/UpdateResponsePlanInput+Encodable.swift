// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateResponsePlanInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions
        case arn
        case chatChannel
        case clientToken
        case displayName
        case engagements
        case incidentTemplateDedupeString
        case incidentTemplateImpact
        case incidentTemplateNotificationTargets
        case incidentTemplateSummary
        case incidentTemplateTitle
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionslist0 in actions {
                try actionsContainer.encode(actionslist0)
            }
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let chatChannel = chatChannel {
            try encodeContainer.encode(chatChannel, forKey: .chatChannel)
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let engagements = engagements {
            var engagementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .engagements)
            for engagementset0 in engagements {
                try engagementsContainer.encode(engagementset0)
            }
        }
        if let incidentTemplateDedupeString = incidentTemplateDedupeString {
            try encodeContainer.encode(incidentTemplateDedupeString, forKey: .incidentTemplateDedupeString)
        }
        if let incidentTemplateImpact = incidentTemplateImpact {
            try encodeContainer.encode(incidentTemplateImpact, forKey: .incidentTemplateImpact)
        }
        if let incidentTemplateNotificationTargets = incidentTemplateNotificationTargets {
            var incidentTemplateNotificationTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .incidentTemplateNotificationTargets)
            for notificationtargetset0 in incidentTemplateNotificationTargets {
                try incidentTemplateNotificationTargetsContainer.encode(notificationtargetset0)
            }
        }
        if let incidentTemplateSummary = incidentTemplateSummary {
            try encodeContainer.encode(incidentTemplateSummary, forKey: .incidentTemplateSummary)
        }
        if let incidentTemplateTitle = incidentTemplateTitle {
            try encodeContainer.encode(incidentTemplateTitle, forKey: .incidentTemplateTitle)
        }
    }
}
