// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetResponsePlanOutputBody: Equatable {
    public let arn: String?
    public let name: String?
    public let displayName: String?
    public let incidentTemplate: IncidentTemplate?
    public let chatChannel: ChatChannel?
    public let engagements: Set<String>?
    public let actions: [Action]?
}

extension GetResponsePlanOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case actions
        case arn
        case chatChannel
        case displayName
        case engagements
        case incidentTemplate
        case name
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let incidentTemplateDecoded = try containerValues.decodeIfPresent(IncidentTemplate.self, forKey: .incidentTemplate)
        incidentTemplate = incidentTemplateDecoded
        let chatChannelDecoded = try containerValues.decodeIfPresent(ChatChannel.self, forKey: .chatChannel)
        chatChannel = chatChannelDecoded
        let engagementsContainer = try containerValues.decodeIfPresent(Set<String>.self, forKey: .engagements)
        var engagementsDecoded0:Set<String>? = nil
        if let engagementsContainer = engagementsContainer {
            engagementsDecoded0 = Set<String>()
            for string0 in engagementsContainer {
                engagementsDecoded0?.insert(string0)
            }
        }
        engagements = engagementsDecoded0
        let actionsContainer = try containerValues.decodeIfPresent([Action].self, forKey: .actions)
        var actionsDecoded0:[Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [Action]()
            for union0 in actionsContainer {
                actionsDecoded0?.append(union0)
            }
        }
        actions = actionsDecoded0
    }
}
