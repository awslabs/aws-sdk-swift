// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IncidentRecordSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case creationTime
        case impact
        case incidentRecordSource
        case resolvedTime
        case status
        case title
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let impact = impact {
            try encodeContainer.encode(impact, forKey: .impact)
        }
        if let incidentRecordSource = incidentRecordSource {
            try encodeContainer.encode(incidentRecordSource, forKey: .incidentRecordSource)
        }
        if let resolvedTime = resolvedTime {
            try encodeContainer.encode(resolvedTime.timeIntervalSince1970, forKey: .resolvedTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let titleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .title)
        title = titleDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IncidentRecordStatus.self, forKey: .status)
        status = statusDecoded
        let impactDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .impact)
        impact = impactDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let resolvedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .resolvedTime)
        resolvedTime = resolvedTimeDecoded
        let incidentRecordSourceDecoded = try containerValues.decodeIfPresent(IncidentRecordSource.self, forKey: .incidentRecordSource)
        incidentRecordSource = incidentRecordSourceDecoded
    }
}
