// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChatChannel: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case chatbotSns
        case empty
        case sdkUnknown
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .chatbotSns(chatbotSns):
                if let chatbotSns = chatbotSns {
                    var chatbotSnsContainer = container.nestedUnkeyedContainer(forKey: .chatbotSns)
                    for chatbotsnsconfigurationset0 in chatbotSns {
                        try chatbotSnsContainer.encode(chatbotsnsconfigurationset0)
                    }
                }
            case let .empty(empty):
                if let empty = empty {
                    try container.encode(empty, forKey: .empty)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let emptyDecoded = try values.decodeIfPresent(EmptyChatChannel.self, forKey: .empty)
        if let empty = emptyDecoded {
            self = .empty(empty)
            return
        }
        let chatbotSnsContainer = try values.decodeIfPresent(Set<String>.self, forKey: .chatbotSns)
        var chatbotSnsDecoded0:Set<String>? = nil
        if let chatbotSnsContainer = chatbotSnsContainer {
            chatbotSnsDecoded0 = Set<String>()
            for string0 in chatbotSnsContainer {
                chatbotSnsDecoded0?.insert(string0)
            }
        }
        if let chatbotSns = chatbotSnsDecoded0 {
            self = .chatbotSns(chatbotSns)
            return
        }
        self = .sdkUnknown("")
    }
}
