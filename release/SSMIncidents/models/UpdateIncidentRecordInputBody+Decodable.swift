// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateIncidentRecordInputBody: Equatable {
    public let clientToken: String?
    public let arn: String?
    public let title: String?
    public let summary: String?
    public let impact: Int?
    public let status: IncidentRecordStatus?
    public let chatChannel: ChatChannel?
    public let notificationTargets: Set<NotificationTargetItem>?
}

extension UpdateIncidentRecordInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn
        case chatChannel
        case clientToken
        case impact
        case notificationTargets
        case status
        case summary
        case title
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let titleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .title)
        title = titleDecoded
        let summaryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .summary)
        summary = summaryDecoded
        let impactDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .impact)
        impact = impactDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IncidentRecordStatus.self, forKey: .status)
        status = statusDecoded
        let chatChannelDecoded = try containerValues.decodeIfPresent(ChatChannel.self, forKey: .chatChannel)
        chatChannel = chatChannelDecoded
        let notificationTargetsContainer = try containerValues.decodeIfPresent(Set<NotificationTargetItem>.self, forKey: .notificationTargets)
        var notificationTargetsDecoded0:Set<NotificationTargetItem>? = nil
        if let notificationTargetsContainer = notificationTargetsContainer {
            notificationTargetsDecoded0 = Set<NotificationTargetItem>()
            for union0 in notificationTargetsContainer {
                notificationTargetsDecoded0?.insert(union0)
            }
        }
        notificationTargets = notificationTargetsDecoded0
    }
}
