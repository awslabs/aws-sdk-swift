// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmAutomation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case documentName
        case documentVersion
        case parameters
        case roleArn
        case targetAccount
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentName = documentName {
            try encodeContainer.encode(documentName, forKey: .documentName)
        }
        if let documentVersion = documentVersion {
            try encodeContainer.encode(documentVersion, forKey: .documentVersion)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .parameters)
            for (dictKey0, ssmparameters0) in parameters {
                try parametersContainer.encode(ssmparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let targetAccount = targetAccount {
            try encodeContainer.encode(targetAccount.rawValue, forKey: .targetAccount)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let documentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentName)
        documentName = documentNameDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let targetAccountDecoded = try containerValues.decodeIfPresent(SsmTargetAccount.self, forKey: .targetAccount)
        targetAccount = targetAccountDecoded
        let parametersContainer = try containerValues.decodeIfPresent([String:[String]?].self, forKey: .parameters)
        var parametersDecoded0: [String:[String]?]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [String:[String]?]()
            for (key0, ssmparametervalues0) in parametersContainer {
                var ssmparametervalues0Decoded0 = [String]()
                if let ssmparametervalues0 = ssmparametervalues0 {
                    for string1 in ssmparametervalues0 {
                        ssmparametervalues0Decoded0.append(string1)
                    }
                }
                parametersDecoded0?[key0] = ssmparametervalues0Decoded0
            }
        }
        parameters = parametersDecoded0
    }
}
