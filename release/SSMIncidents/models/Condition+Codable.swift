// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Condition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case after
        case before
        case equals
        case sdkUnknown
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .after(after):
                if let after = after {
                    try container.encode(after.timeIntervalSince1970, forKey: .after)
                }
            case let .before(before):
                if let before = before {
                    try container.encode(before.timeIntervalSince1970, forKey: .before)
                }
            case let .equals(equals):
                if let equals = equals {
                    try container.encode(equals, forKey: .equals)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let beforeDecoded = try values.decodeIfPresent(Date.self, forKey: .before)
        if let before = beforeDecoded {
            self = .before(before)
            return
        }
        let afterDecoded = try values.decodeIfPresent(Date.self, forKey: .after)
        if let after = afterDecoded {
            self = .after(after)
            return
        }
        let equalsDecoded = try values.decodeIfPresent(AttributeValueList.self, forKey: .equals)
        if let equals = equalsDecoded {
            self = .equals(equals)
            return
        }
        self = .sdkUnknown("")
    }
}
