// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AttributeValueList: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case integerValues
        case sdkUnknown
        case stringValues
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .integerValues(integerValues):
                if let integerValues = integerValues {
                    var integerValuesContainer = container.nestedUnkeyedContainer(forKey: .integerValues)
                    for integerlist0 in integerValues {
                        try integerValuesContainer.encode(integerlist0)
                    }
                }
            case let .stringValues(stringValues):
                if let stringValues = stringValues {
                    var stringValuesContainer = container.nestedUnkeyedContainer(forKey: .stringValues)
                    for stringlist0 in stringValues {
                        try stringValuesContainer.encode(stringlist0)
                    }
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let stringValuesContainer = try values.decodeIfPresent([String].self, forKey: .stringValues)
        var stringValuesDecoded0:[String]? = nil
        if let stringValuesContainer = stringValuesContainer {
            stringValuesDecoded0 = [String]()
            for string0 in stringValuesContainer {
                stringValuesDecoded0?.append(string0)
            }
        }
        if let stringValues = stringValuesDecoded0 {
            self = .stringValues(stringValues)
            return
        }
        let integerValuesContainer = try values.decodeIfPresent([Int].self, forKey: .integerValues)
        var integerValuesDecoded0:[Int]? = nil
        if let integerValuesContainer = integerValuesContainer {
            integerValuesDecoded0 = [Int]()
            for integer0 in integerValuesContainer {
                integerValuesDecoded0?.append(integer0)
            }
        }
        if let integerValues = integerValuesDecoded0 {
            self = .integerValues(integerValues)
            return
        }
        self = .sdkUnknown("")
    }
}
