// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTimelineEventsInputBody: Equatable {
    public let incidentRecordArn: String?
    public let filters: [Filter]?
    public let sortBy: TimelineEventSort?
    public let sortOrder: SortOrder?
    public let maxResults: Int?
    public let nextToken: String?
}

extension ListTimelineEventsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filters
        case incidentRecordArn
        case maxResults
        case nextToken
        case sortBy
        case sortOrder
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let incidentRecordArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .incidentRecordArn)
        incidentRecordArn = incidentRecordArnDecoded
        let filtersContainer = try containerValues.decodeIfPresent([Filter].self, forKey: .filters)
        var filtersDecoded0:[Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [Filter]()
            for structure0 in filtersContainer {
                filtersDecoded0?.append(structure0)
            }
        }
        filters = filtersDecoded0
        let sortByDecoded = try containerValues.decodeIfPresent(TimelineEventSort.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
