// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IncidentRecordSource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdBy
        case invokedBy
        case resourceArn
        case source
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let invokedBy = invokedBy {
            try encodeContainer.encode(invokedBy, forKey: .invokedBy)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let invokedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .invokedBy)
        invokedBy = invokedByDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .source)
        source = sourceDecoded
    }
}
