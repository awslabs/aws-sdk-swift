// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateIncidentRecordInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the incident record you are updating.</p>
    public let arn: String?
    /// <p>The AWS Chatbot chat channel for responders to collaborate in.</p>
    public let chatChannel: ChatChannel?
    /// <p>A token ensuring that the action is called only once with the specified details.</p>
    public var clientToken: String?
    /// <p>Defines the impact to customers and applications. Providing an impact overwrites the
    ///             impact provided by the response plan.</p>
    ///         <p class="title">
    ///             <b>Possible impacts:</b>
    ///          </p>
    ///          <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>1</code> - Critical impact, this typically relates to full application
    ///                     failure that impacts many to all customers. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>2</code> - High impact, partial application failure with impact to many
    ///                     customers.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>3</code> -  Medium impact, the application is providing reduced service
    ///                     to customers.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>4</code> -  Low impact, customer might aren't impacted by the problem
    ///                     yet.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>5</code> - No impact, customers aren't currently impacted but urgent
    ///                     action is needed to avoid impact.</p>
    ///             </li>
    ///          </ul>
    public let impact: Int?
    /// <p>The SNS targets that AWS Chatbot uses to notify the chat channel of updates to an
    ///             incident. You can also make updates to the incident through the chat channel using the
    ///             SNS topics. </p>
    ///         <p>Using multiple SNS topics creates redundancy in the case that a Region is down during
    ///             the incident.</p>
    public let notificationTargets: Set<NotificationTargetItem>?
    /// <p>The status of the incident. An incident can be <code>Open</code> or <code>Resolved</code>.</p>
    public let status: IncidentRecordStatus?
    /// <p>The summary describes what has happened during the incident.</p>
    public let summary: String?
    /// <p>The title of the incident is a brief and easily recognizable.</p>
    public let title: String?

    public init (
        arn: String? = nil,
        chatChannel: ChatChannel? = nil,
        clientToken: String? = nil,
        impact: Int? = nil,
        notificationTargets: Set<NotificationTargetItem>? = nil,
        status: IncidentRecordStatus? = nil,
        summary: String? = nil,
        title: String? = nil
    )
    {
        self.arn = arn
        self.chatChannel = chatChannel
        self.clientToken = clientToken
        self.impact = impact
        self.notificationTargets = notificationTargets
        self.status = status
        self.summary = summary
        self.title = title
    }
}
