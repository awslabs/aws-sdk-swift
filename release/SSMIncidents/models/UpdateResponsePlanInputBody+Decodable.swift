// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateResponsePlanInputBody: Equatable {
    public let clientToken: String?
    public let arn: String?
    public let displayName: String?
    public let incidentTemplateTitle: String?
    public let incidentTemplateImpact: Int?
    public let incidentTemplateSummary: String?
    public let incidentTemplateDedupeString: String?
    public let incidentTemplateNotificationTargets: Set<NotificationTargetItem>?
    public let chatChannel: ChatChannel?
    public let engagements: Set<String>?
    public let actions: [Action]?
}

extension UpdateResponsePlanInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case actions
        case arn
        case chatChannel
        case clientToken
        case displayName
        case engagements
        case incidentTemplateDedupeString
        case incidentTemplateImpact
        case incidentTemplateNotificationTargets
        case incidentTemplateSummary
        case incidentTemplateTitle
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let incidentTemplateTitleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .incidentTemplateTitle)
        incidentTemplateTitle = incidentTemplateTitleDecoded
        let incidentTemplateImpactDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .incidentTemplateImpact)
        incidentTemplateImpact = incidentTemplateImpactDecoded
        let incidentTemplateSummaryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .incidentTemplateSummary)
        incidentTemplateSummary = incidentTemplateSummaryDecoded
        let incidentTemplateDedupeStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .incidentTemplateDedupeString)
        incidentTemplateDedupeString = incidentTemplateDedupeStringDecoded
        let incidentTemplateNotificationTargetsContainer = try containerValues.decodeIfPresent(Set<NotificationTargetItem>.self, forKey: .incidentTemplateNotificationTargets)
        var incidentTemplateNotificationTargetsDecoded0:Set<NotificationTargetItem>? = nil
        if let incidentTemplateNotificationTargetsContainer = incidentTemplateNotificationTargetsContainer {
            incidentTemplateNotificationTargetsDecoded0 = Set<NotificationTargetItem>()
            for union0 in incidentTemplateNotificationTargetsContainer {
                incidentTemplateNotificationTargetsDecoded0?.insert(union0)
            }
        }
        incidentTemplateNotificationTargets = incidentTemplateNotificationTargetsDecoded0
        let chatChannelDecoded = try containerValues.decodeIfPresent(ChatChannel.self, forKey: .chatChannel)
        chatChannel = chatChannelDecoded
        let engagementsContainer = try containerValues.decodeIfPresent(Set<String>.self, forKey: .engagements)
        var engagementsDecoded0:Set<String>? = nil
        if let engagementsContainer = engagementsContainer {
            engagementsDecoded0 = Set<String>()
            for string0 in engagementsContainer {
                engagementsDecoded0?.insert(string0)
            }
        }
        engagements = engagementsDecoded0
        let actionsContainer = try containerValues.decodeIfPresent([Action].self, forKey: .actions)
        var actionsDecoded0:[Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [Action]()
            for union0 in actionsContainer {
                actionsDecoded0?.append(union0)
            }
        }
        actions = actionsDecoded0
    }
}
