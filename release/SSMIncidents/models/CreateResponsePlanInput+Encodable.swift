// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateResponsePlanInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions
        case chatChannel
        case clientToken
        case displayName
        case engagements
        case incidentTemplate
        case name
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionslist0 in actions {
                try actionsContainer.encode(actionslist0)
            }
        }
        if let chatChannel = chatChannel {
            try encodeContainer.encode(chatChannel, forKey: .chatChannel)
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let engagements = engagements {
            var engagementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .engagements)
            for engagementset0 in engagements {
                try engagementsContainer.encode(engagementset0)
            }
        }
        if let incidentTemplate = incidentTemplate {
            try encodeContainer.encode(incidentTemplate, forKey: .incidentTemplate)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
