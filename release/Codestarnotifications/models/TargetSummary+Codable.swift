// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TargetSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case targetAddress = "TargetAddress"
        case targetStatus = "TargetStatus"
        case targetType = "TargetType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let targetAddress = targetAddress {
            try encodeContainer.encode(targetAddress, forKey: .targetAddress)
        }
        if let targetStatus = targetStatus {
            try encodeContainer.encode(targetStatus.rawValue, forKey: .targetStatus)
        }
        if let targetType = targetType {
            try encodeContainer.encode(targetType, forKey: .targetType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetAddress)
        targetAddress = targetAddressDecoded
        let targetTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetType)
        targetType = targetTypeDecoded
        let targetStatusDecoded = try containerValues.decodeIfPresent(TargetStatus.self, forKey: .targetStatus)
        targetStatus = targetStatusDecoded
    }
}
