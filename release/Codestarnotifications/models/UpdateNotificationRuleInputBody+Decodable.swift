// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateNotificationRuleInputBody: Equatable {
    public let arn: String?
    public let name: String?
    public let status: NotificationRuleStatus?
    public let eventTypeIds: [String]?
    public let targets: [Target]?
    public let detailType: DetailType?
}

extension UpdateNotificationRuleInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case detailType = "DetailType"
        case eventTypeIds = "EventTypeIds"
        case name = "Name"
        case status = "Status"
        case targets = "Targets"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NotificationRuleStatus.self, forKey: .status)
        status = statusDecoded
        let eventTypeIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .eventTypeIds)
        var eventTypeIdsDecoded0:[String]? = nil
        if let eventTypeIdsContainer = eventTypeIdsContainer {
            eventTypeIdsDecoded0 = [String]()
            for string0 in eventTypeIdsContainer {
                eventTypeIdsDecoded0?.append(string0)
            }
        }
        eventTypeIds = eventTypeIdsDecoded0
        let targetsContainer = try containerValues.decodeIfPresent([Target].self, forKey: .targets)
        var targetsDecoded0:[Target]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Target]()
            for structure0 in targetsContainer {
                targetsDecoded0?.append(structure0)
            }
        }
        targets = targetsDecoded0
        let detailTypeDecoded = try containerValues.decodeIfPresent(DetailType.self, forKey: .detailType)
        detailType = detailTypeDecoded
    }
}
