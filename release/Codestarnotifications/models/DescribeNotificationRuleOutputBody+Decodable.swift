// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNotificationRuleOutputBody: Equatable {
    public let arn: String?
    public let name: String?
    public let eventTypes: [EventTypeSummary]?
    public let resource: String?
    public let targets: [TargetSummary]?
    public let detailType: DetailType?
    public let createdBy: String?
    public let status: NotificationRuleStatus?
    public let createdTimestamp: Date?
    public let lastModifiedTimestamp: Date?
    public let tags: [String:String]?
}

extension DescribeNotificationRuleOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case createdBy = "CreatedBy"
        case createdTimestamp = "CreatedTimestamp"
        case detailType = "DetailType"
        case eventTypes = "EventTypes"
        case lastModifiedTimestamp = "LastModifiedTimestamp"
        case name = "Name"
        case resource = "Resource"
        case status = "Status"
        case tags = "Tags"
        case targets = "Targets"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let eventTypesContainer = try containerValues.decodeIfPresent([EventTypeSummary].self, forKey: .eventTypes)
        var eventTypesDecoded0:[EventTypeSummary]? = nil
        if let eventTypesContainer = eventTypesContainer {
            eventTypesDecoded0 = [EventTypeSummary]()
            for structure0 in eventTypesContainer {
                eventTypesDecoded0?.append(structure0)
            }
        }
        eventTypes = eventTypesDecoded0
        let resourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resource)
        resource = resourceDecoded
        let targetsContainer = try containerValues.decodeIfPresent([TargetSummary].self, forKey: .targets)
        var targetsDecoded0:[TargetSummary]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [TargetSummary]()
            for structure0 in targetsContainer {
                targetsDecoded0?.append(structure0)
            }
        }
        targets = targetsDecoded0
        let detailTypeDecoded = try containerValues.decodeIfPresent(DetailType.self, forKey: .detailType)
        detailType = detailTypeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NotificationRuleStatus.self, forKey: .status)
        status = statusDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let lastModifiedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTimestamp)
        lastModifiedTimestamp = lastModifiedTimestampDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
