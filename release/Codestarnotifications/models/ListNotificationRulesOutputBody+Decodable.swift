// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListNotificationRulesOutputBody: Equatable {
    public let nextToken: String?
    public let notificationRules: [NotificationRuleSummary]?
}

extension ListNotificationRulesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case notificationRules = "NotificationRules"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let notificationRulesContainer = try containerValues.decodeIfPresent([NotificationRuleSummary].self, forKey: .notificationRules)
        var notificationRulesDecoded0:[NotificationRuleSummary]? = nil
        if let notificationRulesContainer = notificationRulesContainer {
            notificationRulesDecoded0 = [NotificationRuleSummary]()
            for structure0 in notificationRulesContainer {
                notificationRulesDecoded0?.append(structure0)
            }
        }
        notificationRules = notificationRulesDecoded0
    }
}
