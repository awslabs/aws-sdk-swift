// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateNotificationRuleInputBody: Equatable {
    public let name: String?
    public let eventTypeIds: [String]?
    public let resource: String?
    public let targets: [Target]?
    public let detailType: DetailType?
    public let clientRequestToken: String?
    public let tags: [String:String]?
    public let status: NotificationRuleStatus?
}

extension CreateNotificationRuleInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case detailType = "DetailType"
        case eventTypeIds = "EventTypeIds"
        case name = "Name"
        case resource = "Resource"
        case status = "Status"
        case tags = "Tags"
        case targets = "Targets"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let eventTypeIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .eventTypeIds)
        var eventTypeIdsDecoded0:[String]? = nil
        if let eventTypeIdsContainer = eventTypeIdsContainer {
            eventTypeIdsDecoded0 = [String]()
            for string0 in eventTypeIdsContainer {
                eventTypeIdsDecoded0?.append(string0)
            }
        }
        eventTypeIds = eventTypeIdsDecoded0
        let resourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resource)
        resource = resourceDecoded
        let targetsContainer = try containerValues.decodeIfPresent([Target].self, forKey: .targets)
        var targetsDecoded0:[Target]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Target]()
            for structure0 in targetsContainer {
                targetsDecoded0?.append(structure0)
            }
        }
        targets = targetsDecoded0
        let detailTypeDecoded = try containerValues.decodeIfPresent(DetailType.self, forKey: .detailType)
        detailType = detailTypeDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(NotificationRuleStatus.self, forKey: .status)
        status = statusDecoded
    }
}
