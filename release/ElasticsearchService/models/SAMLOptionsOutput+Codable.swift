// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SAMLOptionsOutput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case enabled = "Enabled"
        case idp = "Idp"
        case rolesKey = "RolesKey"
        case sessionTimeoutMinutes = "SessionTimeoutMinutes"
        case subjectKey = "SubjectKey"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let idp = idp {
            try encodeContainer.encode(idp, forKey: .idp)
        }
        if let rolesKey = rolesKey {
            try encodeContainer.encode(rolesKey, forKey: .rolesKey)
        }
        if let sessionTimeoutMinutes = sessionTimeoutMinutes {
            try encodeContainer.encode(sessionTimeoutMinutes, forKey: .sessionTimeoutMinutes)
        }
        if let subjectKey = subjectKey {
            try encodeContainer.encode(subjectKey, forKey: .subjectKey)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let idpDecoded = try containerValues.decodeIfPresent(SAMLIdp.self, forKey: .idp)
        idp = idpDecoded
        let subjectKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subjectKey)
        subjectKey = subjectKeyDecoded
        let rolesKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rolesKey)
        rolesKey = rolesKeyDecoded
        let sessionTimeoutMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .sessionTimeoutMinutes)
        sessionTimeoutMinutes = sessionTimeoutMinutesDecoded
    }
}
