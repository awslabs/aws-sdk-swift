// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServiceSoftwareOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case automatedUpdateDate = "AutomatedUpdateDate"
        case cancellable = "Cancellable"
        case currentVersion = "CurrentVersion"
        case description = "Description"
        case newVersion = "NewVersion"
        case optionalDeployment = "OptionalDeployment"
        case updateAvailable = "UpdateAvailable"
        case updateStatus = "UpdateStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automatedUpdateDate = automatedUpdateDate {
            try encodeContainer.encode(automatedUpdateDate.timeIntervalSince1970, forKey: .automatedUpdateDate)
        }
        if let cancellable = cancellable {
            try encodeContainer.encode(cancellable, forKey: .cancellable)
        }
        if let currentVersion = currentVersion {
            try encodeContainer.encode(currentVersion, forKey: .currentVersion)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let newVersion = newVersion {
            try encodeContainer.encode(newVersion, forKey: .newVersion)
        }
        if let optionalDeployment = optionalDeployment {
            try encodeContainer.encode(optionalDeployment, forKey: .optionalDeployment)
        }
        if let updateAvailable = updateAvailable {
            try encodeContainer.encode(updateAvailable, forKey: .updateAvailable)
        }
        if let updateStatus = updateStatus {
            try encodeContainer.encode(updateStatus.rawValue, forKey: .updateStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let currentVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currentVersion)
        currentVersion = currentVersionDecoded
        let newVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .newVersion)
        newVersion = newVersionDecoded
        let updateAvailableDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .updateAvailable)
        updateAvailable = updateAvailableDecoded
        let cancellableDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .cancellable)
        cancellable = cancellableDecoded
        let updateStatusDecoded = try containerValues.decodeIfPresent(DeploymentStatus.self, forKey: .updateStatus)
        updateStatus = updateStatusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let automatedUpdateDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .automatedUpdateDate)
        automatedUpdateDate = automatedUpdateDateDecoded
        let optionalDeploymentDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .optionalDeployment)
        optionalDeployment = optionalDeploymentDecoded
    }
}
