// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoTuneMaintenanceSchedule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cronExpressionForRecurrence = "CronExpressionForRecurrence"
        case duration = "Duration"
        case startAt = "StartAt"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cronExpressionForRecurrence = cronExpressionForRecurrence {
            try encodeContainer.encode(cronExpressionForRecurrence, forKey: .cronExpressionForRecurrence)
        }
        if let duration = duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let startAt = startAt {
            try encodeContainer.encode(startAt.timeIntervalSince1970, forKey: .startAt)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startAt)
        startAt = startAtDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Duration.self, forKey: .duration)
        duration = durationDecoded
        let cronExpressionForRecurrenceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cronExpressionForRecurrence)
        cronExpressionForRecurrence = cronExpressionForRecurrenceDecoded
    }
}
