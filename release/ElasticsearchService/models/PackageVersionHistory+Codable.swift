// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PackageVersionHistory: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case commitMessage = "CommitMessage"
        case createdAt = "CreatedAt"
        case packageVersion = "PackageVersion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commitMessage = commitMessage {
            try encodeContainer.encode(commitMessage, forKey: .commitMessage)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let packageVersion = packageVersion {
            try encodeContainer.encode(packageVersion, forKey: .packageVersion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .packageVersion)
        packageVersion = packageVersionDecoded
        let commitMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .commitMessage)
        commitMessage = commitMessageDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}
