// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpgradeStepItem: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case issues = "Issues"
        case progressPercent = "ProgressPercent"
        case upgradeStep = "UpgradeStep"
        case upgradeStepStatus = "UpgradeStepStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let issues = issues {
            var issuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .issues)
            for issues0 in issues {
                try issuesContainer.encode(issues0)
            }
        }
        if let progressPercent = progressPercent {
            try encodeContainer.encode(progressPercent, forKey: .progressPercent)
        }
        if let upgradeStep = upgradeStep {
            try encodeContainer.encode(upgradeStep.rawValue, forKey: .upgradeStep)
        }
        if let upgradeStepStatus = upgradeStepStatus {
            try encodeContainer.encode(upgradeStepStatus.rawValue, forKey: .upgradeStepStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeStepDecoded = try containerValues.decodeIfPresent(UpgradeStep.self, forKey: .upgradeStep)
        upgradeStep = upgradeStepDecoded
        let upgradeStepStatusDecoded = try containerValues.decodeIfPresent(UpgradeStatus.self, forKey: .upgradeStepStatus)
        upgradeStepStatus = upgradeStepStatusDecoded
        let issuesContainer = try containerValues.decodeIfPresent([String].self, forKey: .issues)
        var issuesDecoded0:[String]? = nil
        if let issuesContainer = issuesContainer {
            issuesDecoded0 = [String]()
            for string0 in issuesContainer {
                issuesDecoded0?.append(string0)
            }
        }
        issues = issuesDecoded0
        let progressPercentDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .progressPercent)
        progressPercent = progressPercentDecoded
    }
}
