// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreatePackageInputBody: Equatable {
    public let packageName: String?
    public let packageType: PackageType?
    public let packageDescription: String?
    public let packageSource: PackageSource?
}

extension CreatePackageInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case packageDescription = "PackageDescription"
        case packageName = "PackageName"
        case packageSource = "PackageSource"
        case packageType = "PackageType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let packageTypeDecoded = try containerValues.decodeIfPresent(PackageType.self, forKey: .packageType)
        packageType = packageTypeDecoded
        let packageDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .packageDescription)
        packageDescription = packageDescriptionDecoded
        let packageSourceDecoded = try containerValues.decodeIfPresent(PackageSource.self, forKey: .packageSource)
        packageSource = packageSourceDecoded
    }
}
