// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdatePackageInputBody: Equatable {
    public let packageID: String?
    public let packageSource: PackageSource?
    public let packageDescription: String?
    public let commitMessage: String?
}

extension UpdatePackageInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case commitMessage = "CommitMessage"
        case packageDescription = "PackageDescription"
        case packageID = "PackageID"
        case packageSource = "PackageSource"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageSourceDecoded = try containerValues.decodeIfPresent(PackageSource.self, forKey: .packageSource)
        packageSource = packageSourceDecoded
        let packageDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .packageDescription)
        packageDescription = packageDescriptionDecoded
        let commitMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .commitMessage)
        commitMessage = commitMessageDecoded
    }
}
