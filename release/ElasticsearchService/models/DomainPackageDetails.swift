// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Information on a package that is associated with a domain.</p>
public struct DomainPackageDetails: Equatable {
    /// <p>Name of the domain you've associated a package with.</p>
    public let domainName: String?
    /// <p>State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.</p>
    public let domainPackageStatus: DomainPackageStatus?
    /// <p>Additional information if the package is in an error state. Null otherwise.</p>
    public let errorDetails: ErrorDetails?
    /// <p>Timestamp of the most-recent update to the association status.</p>
    public let lastUpdated: Date?
    /// <p>Internal ID of the package.</p>
    public let packageID: String?
    /// <p>User specified name of the package.</p>
    public let packageName: String?
    /// <p>Currently supports only TXT-DICTIONARY.</p>
    public let packageType: PackageType?
    public let packageVersion: String?
    /// <p>The relative path on Amazon ES nodes, which can be used as synonym_path when the package is synonym file.</p>
    public let referencePath: String?

    public init (
        domainName: String? = nil,
        domainPackageStatus: DomainPackageStatus? = nil,
        errorDetails: ErrorDetails? = nil,
        lastUpdated: Date? = nil,
        packageID: String? = nil,
        packageName: String? = nil,
        packageType: PackageType? = nil,
        packageVersion: String? = nil,
        referencePath: String? = nil
    )
    {
        self.domainName = domainName
        self.domainPackageStatus = domainPackageStatus
        self.errorDetails = errorDetails
        self.lastUpdated = lastUpdated
        self.packageID = packageID
        self.packageName = packageName
        self.packageType = packageType
        self.packageVersion = packageVersion
        self.referencePath = referencePath
    }
}
