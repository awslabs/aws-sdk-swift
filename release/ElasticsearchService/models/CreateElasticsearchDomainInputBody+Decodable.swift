// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateElasticsearchDomainInputBody: Equatable {
    public let domainName: String?
    public let elasticsearchVersion: String?
    public let elasticsearchClusterConfig: ElasticsearchClusterConfig?
    public let eBSOptions: EBSOptions?
    public let accessPolicies: String?
    public let snapshotOptions: SnapshotOptions?
    public let vPCOptions: VPCOptions?
    public let cognitoOptions: CognitoOptions?
    public let encryptionAtRestOptions: EncryptionAtRestOptions?
    public let nodeToNodeEncryptionOptions: NodeToNodeEncryptionOptions?
    public let advancedOptions: [String:String]?
    public let logPublishingOptions: [String:LogPublishingOption]?
    public let domainEndpointOptions: DomainEndpointOptions?
    public let advancedSecurityOptions: AdvancedSecurityOptionsInput?
    public let autoTuneOptions: AutoTuneOptionsInput?
    public let tagList: [Tag]?
}

extension CreateElasticsearchDomainInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case domainName = "DomainName"
        case eBSOptions = "EBSOptions"
        case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
        case elasticsearchVersion = "ElasticsearchVersion"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case tagList = "TagList"
        case vPCOptions = "VPCOptions"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let elasticsearchVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .elasticsearchVersion)
        elasticsearchVersion = elasticsearchVersionDecoded
        let elasticsearchClusterConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClusterConfig.self, forKey: .elasticsearchClusterConfig)
        elasticsearchClusterConfig = elasticsearchClusterConfigDecoded
        let eBSOptionsDecoded = try containerValues.decodeIfPresent(EBSOptions.self, forKey: .eBSOptions)
        eBSOptions = eBSOptionsDecoded
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(SnapshotOptions.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vPCOptionsDecoded = try containerValues.decodeIfPresent(VPCOptions.self, forKey: .vPCOptions)
        vPCOptions = vPCOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(CognitoOptions.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(EncryptionAtRestOptions.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(NodeToNodeEncryptionOptions.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let advancedOptionsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .advancedOptions)
        var advancedOptionsDecoded0: [String:String]? = nil
        if let advancedOptionsContainer = advancedOptionsContainer {
            advancedOptionsDecoded0 = [String:String]()
            for (key0, string0) in advancedOptionsContainer {
                advancedOptionsDecoded0?[key0] = string0
            }
        }
        advancedOptions = advancedOptionsDecoded0
        let logPublishingOptionsContainer = try containerValues.decodeIfPresent([String:LogPublishingOption].self, forKey: .logPublishingOptions)
        var logPublishingOptionsDecoded0: [String:LogPublishingOption]? = nil
        if let logPublishingOptionsContainer = logPublishingOptionsContainer {
            logPublishingOptionsDecoded0 = [String:LogPublishingOption]()
            for (key0, logpublishingoption0) in logPublishingOptionsContainer {
                logPublishingOptionsDecoded0?[key0] = logpublishingoption0
            }
        }
        logPublishingOptions = logPublishingOptionsDecoded0
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(DomainEndpointOptions.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(AdvancedSecurityOptionsInput.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(AutoTuneOptionsInput.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
        let tagListContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tagList)
        var tagListDecoded0:[Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [Tag]()
            for structure0 in tagListContainer {
                tagListDecoded0?.append(structure0)
            }
        }
        tagList = tagListDecoded0
    }
}
