// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDomainsForPackageOutputBody: Equatable {
    public let domainPackageDetailsList: [DomainPackageDetails]?
    public let nextToken: String?
}

extension ListDomainsForPackageOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domainPackageDetailsList = "DomainPackageDetailsList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainPackageDetailsListContainer = try containerValues.decodeIfPresent([DomainPackageDetails].self, forKey: .domainPackageDetailsList)
        var domainPackageDetailsListDecoded0:[DomainPackageDetails]? = nil
        if let domainPackageDetailsListContainer = domainPackageDetailsListContainer {
            domainPackageDetailsListDecoded0 = [DomainPackageDetails]()
            for structure0 in domainPackageDetailsListContainer {
                domainPackageDetailsListDecoded0?.append(structure0)
            }
        }
        domainPackageDetailsList = domainPackageDetailsListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
