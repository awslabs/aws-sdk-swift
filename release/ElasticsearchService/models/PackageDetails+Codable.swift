// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PackageDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availablePackageVersion = "AvailablePackageVersion"
        case createdAt = "CreatedAt"
        case errorDetails = "ErrorDetails"
        case lastUpdatedAt = "LastUpdatedAt"
        case packageDescription = "PackageDescription"
        case packageID = "PackageID"
        case packageName = "PackageName"
        case packageStatus = "PackageStatus"
        case packageType = "PackageType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availablePackageVersion = availablePackageVersion {
            try encodeContainer.encode(availablePackageVersion, forKey: .availablePackageVersion)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let errorDetails = errorDetails {
            try encodeContainer.encode(errorDetails, forKey: .errorDetails)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let packageDescription = packageDescription {
            try encodeContainer.encode(packageDescription, forKey: .packageDescription)
        }
        if let packageID = packageID {
            try encodeContainer.encode(packageID, forKey: .packageID)
        }
        if let packageName = packageName {
            try encodeContainer.encode(packageName, forKey: .packageName)
        }
        if let packageStatus = packageStatus {
            try encodeContainer.encode(packageStatus.rawValue, forKey: .packageStatus)
        }
        if let packageType = packageType {
            try encodeContainer.encode(packageType.rawValue, forKey: .packageType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let packageTypeDecoded = try containerValues.decodeIfPresent(PackageType.self, forKey: .packageType)
        packageType = packageTypeDecoded
        let packageDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .packageDescription)
        packageDescription = packageDescriptionDecoded
        let packageStatusDecoded = try containerValues.decodeIfPresent(PackageStatus.self, forKey: .packageStatus)
        packageStatus = packageStatusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let availablePackageVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availablePackageVersion)
        availablePackageVersion = availablePackageVersionDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(ErrorDetails.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}
