// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LogPublishingOptionsStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            var optionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .options)
            for (dictKey0, logpublishingoptions0) in options {
                try optionsContainer.encode(logpublishingoptions0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsContainer = try containerValues.decodeIfPresent([String:LogPublishingOption].self, forKey: .options)
        var optionsDecoded0: [String:LogPublishingOption]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [String:LogPublishingOption]()
            for (key0, logpublishingoption0) in optionsContainer {
                optionsDecoded0?[key0] = logpublishingoption0
            }
        }
        options = optionsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}
