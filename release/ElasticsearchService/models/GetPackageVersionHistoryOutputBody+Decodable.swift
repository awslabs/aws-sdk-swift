// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetPackageVersionHistoryOutputBody: Equatable {
    public let packageID: String?
    public let packageVersionHistoryList: [PackageVersionHistory]?
    public let nextToken: String?
}

extension GetPackageVersionHistoryOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case packageID = "PackageID"
        case packageVersionHistoryList = "PackageVersionHistoryList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageVersionHistoryListContainer = try containerValues.decodeIfPresent([PackageVersionHistory].self, forKey: .packageVersionHistoryList)
        var packageVersionHistoryListDecoded0:[PackageVersionHistory]? = nil
        if let packageVersionHistoryListContainer = packageVersionHistoryListContainer {
            packageVersionHistoryListDecoded0 = [PackageVersionHistory]()
            for structure0 in packageVersionHistoryListContainer {
                packageVersionHistoryListDecoded0?.append(structure0)
            }
        }
        packageVersionHistoryList = packageVersionHistoryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
