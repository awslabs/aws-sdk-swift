// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoTuneOptionsInput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case desiredState = "DesiredState"
        case maintenanceSchedules = "MaintenanceSchedules"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredState = desiredState {
            try encodeContainer.encode(desiredState.rawValue, forKey: .desiredState)
        }
        if let maintenanceSchedules = maintenanceSchedules {
            var maintenanceSchedulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .maintenanceSchedules)
            for autotunemaintenanceschedulelist0 in maintenanceSchedules {
                try maintenanceSchedulesContainer.encode(autotunemaintenanceschedulelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let desiredStateDecoded = try containerValues.decodeIfPresent(AutoTuneDesiredState.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let maintenanceSchedulesContainer = try containerValues.decodeIfPresent([AutoTuneMaintenanceSchedule].self, forKey: .maintenanceSchedules)
        var maintenanceSchedulesDecoded0:[AutoTuneMaintenanceSchedule]? = nil
        if let maintenanceSchedulesContainer = maintenanceSchedulesContainer {
            maintenanceSchedulesDecoded0 = [AutoTuneMaintenanceSchedule]()
            for structure0 in maintenanceSchedulesContainer {
                maintenanceSchedulesDecoded0?.append(structure0)
            }
        }
        maintenanceSchedules = maintenanceSchedulesDecoded0
    }
}
