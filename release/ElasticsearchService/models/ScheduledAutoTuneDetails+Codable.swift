// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ScheduledAutoTuneDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case actionType = "ActionType"
        case date = "Date"
        case severity = "Severity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let actionType = actionType {
            try encodeContainer.encode(actionType.rawValue, forKey: .actionType)
        }
        if let date = date {
            try encodeContainer.encode(date.timeIntervalSince1970, forKey: .date)
        }
        if let severity = severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .date)
        date = dateDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(ScheduledAutoTuneActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let actionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .action)
        action = actionDecoded
        let severityDecoded = try containerValues.decodeIfPresent(ScheduledAutoTuneSeverityType.self, forKey: .severity)
        severity = severityDecoded
    }
}
