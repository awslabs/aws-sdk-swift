// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticsearchClusterConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case coldStorageOptions = "ColdStorageOptions"
        case dedicatedMasterCount = "DedicatedMasterCount"
        case dedicatedMasterEnabled = "DedicatedMasterEnabled"
        case dedicatedMasterType = "DedicatedMasterType"
        case instanceCount = "InstanceCount"
        case instanceType = "InstanceType"
        case warmCount = "WarmCount"
        case warmEnabled = "WarmEnabled"
        case warmType = "WarmType"
        case zoneAwarenessConfig = "ZoneAwarenessConfig"
        case zoneAwarenessEnabled = "ZoneAwarenessEnabled"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let coldStorageOptions = coldStorageOptions {
            try encodeContainer.encode(coldStorageOptions, forKey: .coldStorageOptions)
        }
        if let dedicatedMasterCount = dedicatedMasterCount {
            try encodeContainer.encode(dedicatedMasterCount, forKey: .dedicatedMasterCount)
        }
        if let dedicatedMasterEnabled = dedicatedMasterEnabled {
            try encodeContainer.encode(dedicatedMasterEnabled, forKey: .dedicatedMasterEnabled)
        }
        if let dedicatedMasterType = dedicatedMasterType {
            try encodeContainer.encode(dedicatedMasterType.rawValue, forKey: .dedicatedMasterType)
        }
        if let instanceCount = instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let warmCount = warmCount {
            try encodeContainer.encode(warmCount, forKey: .warmCount)
        }
        if let warmEnabled = warmEnabled {
            try encodeContainer.encode(warmEnabled, forKey: .warmEnabled)
        }
        if let warmType = warmType {
            try encodeContainer.encode(warmType.rawValue, forKey: .warmType)
        }
        if let zoneAwarenessConfig = zoneAwarenessConfig {
            try encodeContainer.encode(zoneAwarenessConfig, forKey: .zoneAwarenessConfig)
        }
        if let zoneAwarenessEnabled = zoneAwarenessEnabled {
            try encodeContainer.encode(zoneAwarenessEnabled, forKey: .zoneAwarenessEnabled)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(ESPartitionInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let dedicatedMasterEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .dedicatedMasterEnabled)
        dedicatedMasterEnabled = dedicatedMasterEnabledDecoded
        let zoneAwarenessEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .zoneAwarenessEnabled)
        zoneAwarenessEnabled = zoneAwarenessEnabledDecoded
        let zoneAwarenessConfigDecoded = try containerValues.decodeIfPresent(ZoneAwarenessConfig.self, forKey: .zoneAwarenessConfig)
        zoneAwarenessConfig = zoneAwarenessConfigDecoded
        let dedicatedMasterTypeDecoded = try containerValues.decodeIfPresent(ESPartitionInstanceType.self, forKey: .dedicatedMasterType)
        dedicatedMasterType = dedicatedMasterTypeDecoded
        let dedicatedMasterCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .dedicatedMasterCount)
        dedicatedMasterCount = dedicatedMasterCountDecoded
        let warmEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .warmEnabled)
        warmEnabled = warmEnabledDecoded
        let warmTypeDecoded = try containerValues.decodeIfPresent(ESWarmPartitionInstanceType.self, forKey: .warmType)
        warmType = warmTypeDecoded
        let warmCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .warmCount)
        warmCount = warmCountDecoded
        let coldStorageOptionsDecoded = try containerValues.decodeIfPresent(ColdStorageOptions.self, forKey: .coldStorageOptions)
        coldStorageOptions = coldStorageOptionsDecoded
    }
}
