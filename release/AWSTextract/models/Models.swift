// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You aren't authorized to perform the action. Use the Amazon Resource Name (ARN) of an authorized user or IAM role to perform the operation.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension AnalyzeDocumentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case document = "Document"
        case featureTypes = "FeatureTypes"
        case humanLoopConfig = "HumanLoopConfig"
        case queriesConfig = "QueriesConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let document = self.document {
            try encodeContainer.encode(document, forKey: .document)
        }
        if let featureTypes = featureTypes {
            var featureTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .featureTypes)
            for featuretype0 in featureTypes {
                try featureTypesContainer.encode(featuretype0.rawValue)
            }
        }
        if let humanLoopConfig = self.humanLoopConfig {
            try encodeContainer.encode(humanLoopConfig, forKey: .humanLoopConfig)
        }
        if let queriesConfig = self.queriesConfig {
            try encodeContainer.encode(queriesConfig, forKey: .queriesConfig)
        }
    }
}

extension AnalyzeDocumentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AnalyzeDocumentInput: Swift.Equatable {
    /// The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can't pass image bytes. The document must be an image in JPEG, PNG, PDF, or TIFF format. If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes that are passed using the Bytes field.
    /// This member is required.
    public var document: TextractClientTypes.Document?
    /// A list of the types of analysis to perform. Add TABLES to the list to return information about the tables that are detected in the input document. Add FORMS to return detected form data. Add SIGNATURES to return the locations of detected signatures. To perform both forms and table analysis, add TABLES and FORMS to FeatureTypes. To detect signatures within form data and table data, add SIGNATURES to either TABLES or FORMS. All lines and words detected in the document are included in the response (including text that isn't related to the value of FeatureTypes).
    /// This member is required.
    public var featureTypes: [TextractClientTypes.FeatureType]?
    /// Sets the configuration for the human in the loop workflow for analyzing documents.
    public var humanLoopConfig: TextractClientTypes.HumanLoopConfig?
    /// Contains Queries and the alias for those Queries, as determined by the input.
    public var queriesConfig: TextractClientTypes.QueriesConfig?

    public init (
        document: TextractClientTypes.Document? = nil,
        featureTypes: [TextractClientTypes.FeatureType]? = nil,
        humanLoopConfig: TextractClientTypes.HumanLoopConfig? = nil,
        queriesConfig: TextractClientTypes.QueriesConfig? = nil
    )
    {
        self.document = document
        self.featureTypes = featureTypes
        self.humanLoopConfig = humanLoopConfig
        self.queriesConfig = queriesConfig
    }
}

struct AnalyzeDocumentInputBody: Swift.Equatable {
    let document: TextractClientTypes.Document?
    let featureTypes: [TextractClientTypes.FeatureType]?
    let humanLoopConfig: TextractClientTypes.HumanLoopConfig?
    let queriesConfig: TextractClientTypes.QueriesConfig?
}

extension AnalyzeDocumentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case document = "Document"
        case featureTypes = "FeatureTypes"
        case humanLoopConfig = "HumanLoopConfig"
        case queriesConfig = "QueriesConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentDecoded = try containerValues.decodeIfPresent(TextractClientTypes.Document.self, forKey: .document)
        document = documentDecoded
        let featureTypesContainer = try containerValues.decodeIfPresent([TextractClientTypes.FeatureType?].self, forKey: .featureTypes)
        var featureTypesDecoded0:[TextractClientTypes.FeatureType]? = nil
        if let featureTypesContainer = featureTypesContainer {
            featureTypesDecoded0 = [TextractClientTypes.FeatureType]()
            for enum0 in featureTypesContainer {
                if let enum0 = enum0 {
                    featureTypesDecoded0?.append(enum0)
                }
            }
        }
        featureTypes = featureTypesDecoded0
        let humanLoopConfigDecoded = try containerValues.decodeIfPresent(TextractClientTypes.HumanLoopConfig.self, forKey: .humanLoopConfig)
        humanLoopConfig = humanLoopConfigDecoded
        let queriesConfigDecoded = try containerValues.decodeIfPresent(TextractClientTypes.QueriesConfig.self, forKey: .queriesConfig)
        queriesConfig = queriesConfigDecoded
    }
}

extension AnalyzeDocumentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AnalyzeDocumentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadDocumentException" : self = .badDocumentException(try BadDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DocumentTooLargeException" : self = .documentTooLargeException(try DocumentTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HumanLoopQuotaExceededException" : self = .humanLoopQuotaExceededException(try HumanLoopQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedDocumentException" : self = .unsupportedDocumentException(try UnsupportedDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AnalyzeDocumentOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case badDocumentException(BadDocumentException)
    case documentTooLargeException(DocumentTooLargeException)
    case humanLoopQuotaExceededException(HumanLoopQuotaExceededException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unsupportedDocumentException(UnsupportedDocumentException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AnalyzeDocumentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AnalyzeDocumentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.analyzeDocumentModelVersion = output.analyzeDocumentModelVersion
            self.blocks = output.blocks
            self.documentMetadata = output.documentMetadata
            self.humanLoopActivationOutput = output.humanLoopActivationOutput
        } else {
            self.analyzeDocumentModelVersion = nil
            self.blocks = nil
            self.documentMetadata = nil
            self.humanLoopActivationOutput = nil
        }
    }
}

public struct AnalyzeDocumentOutputResponse: Swift.Equatable {
    /// The version of the model used to analyze the document.
    public var analyzeDocumentModelVersion: Swift.String?
    /// The items that are detected and analyzed by AnalyzeDocument.
    public var blocks: [TextractClientTypes.Block]?
    /// Metadata about the analyzed document. An example is the number of pages.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// Shows the results of the human in the loop evaluation.
    public var humanLoopActivationOutput: TextractClientTypes.HumanLoopActivationOutput?

    public init (
        analyzeDocumentModelVersion: Swift.String? = nil,
        blocks: [TextractClientTypes.Block]? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        humanLoopActivationOutput: TextractClientTypes.HumanLoopActivationOutput? = nil
    )
    {
        self.analyzeDocumentModelVersion = analyzeDocumentModelVersion
        self.blocks = blocks
        self.documentMetadata = documentMetadata
        self.humanLoopActivationOutput = humanLoopActivationOutput
    }
}

struct AnalyzeDocumentOutputResponseBody: Swift.Equatable {
    let documentMetadata: TextractClientTypes.DocumentMetadata?
    let blocks: [TextractClientTypes.Block]?
    let humanLoopActivationOutput: TextractClientTypes.HumanLoopActivationOutput?
    let analyzeDocumentModelVersion: Swift.String?
}

extension AnalyzeDocumentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyzeDocumentModelVersion = "AnalyzeDocumentModelVersion"
        case blocks = "Blocks"
        case documentMetadata = "DocumentMetadata"
        case humanLoopActivationOutput = "HumanLoopActivationOutput"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentMetadataDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentMetadata.self, forKey: .documentMetadata)
        documentMetadata = documentMetadataDecoded
        let blocksContainer = try containerValues.decodeIfPresent([TextractClientTypes.Block?].self, forKey: .blocks)
        var blocksDecoded0:[TextractClientTypes.Block]? = nil
        if let blocksContainer = blocksContainer {
            blocksDecoded0 = [TextractClientTypes.Block]()
            for structure0 in blocksContainer {
                if let structure0 = structure0 {
                    blocksDecoded0?.append(structure0)
                }
            }
        }
        blocks = blocksDecoded0
        let humanLoopActivationOutputDecoded = try containerValues.decodeIfPresent(TextractClientTypes.HumanLoopActivationOutput.self, forKey: .humanLoopActivationOutput)
        humanLoopActivationOutput = humanLoopActivationOutputDecoded
        let analyzeDocumentModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .analyzeDocumentModelVersion)
        analyzeDocumentModelVersion = analyzeDocumentModelVersionDecoded
    }
}

extension AnalyzeExpenseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case document = "Document"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let document = self.document {
            try encodeContainer.encode(document, forKey: .document)
        }
    }
}

extension AnalyzeExpenseInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AnalyzeExpenseInput: Swift.Equatable {
    /// The input document, either as bytes or as an S3 object. You pass image bytes to an Amazon Textract API operation by using the Bytes property. For example, you would use the Bytes property to pass a document loaded from a local file system. Image bytes passed by using the Bytes property must be base64 encoded. Your code might not need to encode document file bytes if you're using an AWS SDK to call Amazon Textract API operations. You pass images stored in an S3 bucket to an Amazon Textract API operation by using the S3Object property. Documents stored in an S3 bucket don't need to be base64 encoded. The AWS Region for the S3 bucket that contains the S3 object must match the AWS Region that you use for Amazon Textract operations. If you use the AWS CLI to call Amazon Textract operations, passing image bytes using the Bytes property isn't supported. You must first upload the document to an Amazon S3 bucket, and then call the operation using the S3Object property. For Amazon Textract to process an S3 object, the user must have permission to access the S3 object.
    /// This member is required.
    public var document: TextractClientTypes.Document?

    public init (
        document: TextractClientTypes.Document? = nil
    )
    {
        self.document = document
    }
}

struct AnalyzeExpenseInputBody: Swift.Equatable {
    let document: TextractClientTypes.Document?
}

extension AnalyzeExpenseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case document = "Document"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentDecoded = try containerValues.decodeIfPresent(TextractClientTypes.Document.self, forKey: .document)
        document = documentDecoded
    }
}

extension AnalyzeExpenseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AnalyzeExpenseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadDocumentException" : self = .badDocumentException(try BadDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DocumentTooLargeException" : self = .documentTooLargeException(try DocumentTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedDocumentException" : self = .unsupportedDocumentException(try UnsupportedDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AnalyzeExpenseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case badDocumentException(BadDocumentException)
    case documentTooLargeException(DocumentTooLargeException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unsupportedDocumentException(UnsupportedDocumentException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AnalyzeExpenseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AnalyzeExpenseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.documentMetadata = output.documentMetadata
            self.expenseDocuments = output.expenseDocuments
        } else {
            self.documentMetadata = nil
            self.expenseDocuments = nil
        }
    }
}

public struct AnalyzeExpenseOutputResponse: Swift.Equatable {
    /// Information about the input document.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// The expenses detected by Amazon Textract.
    public var expenseDocuments: [TextractClientTypes.ExpenseDocument]?

    public init (
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        expenseDocuments: [TextractClientTypes.ExpenseDocument]? = nil
    )
    {
        self.documentMetadata = documentMetadata
        self.expenseDocuments = expenseDocuments
    }
}

struct AnalyzeExpenseOutputResponseBody: Swift.Equatable {
    let documentMetadata: TextractClientTypes.DocumentMetadata?
    let expenseDocuments: [TextractClientTypes.ExpenseDocument]?
}

extension AnalyzeExpenseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentMetadata = "DocumentMetadata"
        case expenseDocuments = "ExpenseDocuments"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentMetadataDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentMetadata.self, forKey: .documentMetadata)
        documentMetadata = documentMetadataDecoded
        let expenseDocumentsContainer = try containerValues.decodeIfPresent([TextractClientTypes.ExpenseDocument?].self, forKey: .expenseDocuments)
        var expenseDocumentsDecoded0:[TextractClientTypes.ExpenseDocument]? = nil
        if let expenseDocumentsContainer = expenseDocumentsContainer {
            expenseDocumentsDecoded0 = [TextractClientTypes.ExpenseDocument]()
            for structure0 in expenseDocumentsContainer {
                if let structure0 = structure0 {
                    expenseDocumentsDecoded0?.append(structure0)
                }
            }
        }
        expenseDocuments = expenseDocumentsDecoded0
    }
}

extension TextractClientTypes.AnalyzeIDDetections: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case normalizedValue = "NormalizedValue"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let normalizedValue = self.normalizedValue {
            try encodeContainer.encode(normalizedValue, forKey: .normalizedValue)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let normalizedValueDecoded = try containerValues.decodeIfPresent(TextractClientTypes.NormalizedValue.self, forKey: .normalizedValue)
        normalizedValue = normalizedValueDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension TextractClientTypes {
    /// Used to contain the information detected by an AnalyzeID operation.
    public struct AnalyzeIDDetections: Swift.Equatable {
        /// The confidence score of the detected text.
        public var confidence: Swift.Float?
        /// Only returned for dates, returns the type of value detected and the date written in a more machine readable way.
        public var normalizedValue: TextractClientTypes.NormalizedValue?
        /// Text of either the normalized field or value associated with it.
        /// This member is required.
        public var text: Swift.String?

        public init (
            confidence: Swift.Float? = nil,
            normalizedValue: TextractClientTypes.NormalizedValue? = nil,
            text: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.normalizedValue = normalizedValue
            self.text = text
        }
    }

}

extension AnalyzeIDInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentPages = "DocumentPages"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentPages = documentPages {
            var documentPagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .documentPages)
            for document0 in documentPages {
                try documentPagesContainer.encode(document0)
            }
        }
    }
}

extension AnalyzeIDInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AnalyzeIDInput: Swift.Equatable {
    /// The document being passed to AnalyzeID.
    /// This member is required.
    public var documentPages: [TextractClientTypes.Document]?

    public init (
        documentPages: [TextractClientTypes.Document]? = nil
    )
    {
        self.documentPages = documentPages
    }
}

struct AnalyzeIDInputBody: Swift.Equatable {
    let documentPages: [TextractClientTypes.Document]?
}

extension AnalyzeIDInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentPages = "DocumentPages"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentPagesContainer = try containerValues.decodeIfPresent([TextractClientTypes.Document?].self, forKey: .documentPages)
        var documentPagesDecoded0:[TextractClientTypes.Document]? = nil
        if let documentPagesContainer = documentPagesContainer {
            documentPagesDecoded0 = [TextractClientTypes.Document]()
            for structure0 in documentPagesContainer {
                if let structure0 = structure0 {
                    documentPagesDecoded0?.append(structure0)
                }
            }
        }
        documentPages = documentPagesDecoded0
    }
}

extension AnalyzeIDOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AnalyzeIDOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadDocumentException" : self = .badDocumentException(try BadDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DocumentTooLargeException" : self = .documentTooLargeException(try DocumentTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedDocumentException" : self = .unsupportedDocumentException(try UnsupportedDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AnalyzeIDOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case badDocumentException(BadDocumentException)
    case documentTooLargeException(DocumentTooLargeException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unsupportedDocumentException(UnsupportedDocumentException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AnalyzeIDOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AnalyzeIDOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.analyzeIDModelVersion = output.analyzeIDModelVersion
            self.documentMetadata = output.documentMetadata
            self.identityDocuments = output.identityDocuments
        } else {
            self.analyzeIDModelVersion = nil
            self.documentMetadata = nil
            self.identityDocuments = nil
        }
    }
}

public struct AnalyzeIDOutputResponse: Swift.Equatable {
    /// The version of the AnalyzeIdentity API being used to process documents.
    public var analyzeIDModelVersion: Swift.String?
    /// Information about the input document.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// The list of documents processed by AnalyzeID. Includes a number denoting their place in the list and the response structure for the document.
    public var identityDocuments: [TextractClientTypes.IdentityDocument]?

    public init (
        analyzeIDModelVersion: Swift.String? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        identityDocuments: [TextractClientTypes.IdentityDocument]? = nil
    )
    {
        self.analyzeIDModelVersion = analyzeIDModelVersion
        self.documentMetadata = documentMetadata
        self.identityDocuments = identityDocuments
    }
}

struct AnalyzeIDOutputResponseBody: Swift.Equatable {
    let identityDocuments: [TextractClientTypes.IdentityDocument]?
    let documentMetadata: TextractClientTypes.DocumentMetadata?
    let analyzeIDModelVersion: Swift.String?
}

extension AnalyzeIDOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyzeIDModelVersion = "AnalyzeIDModelVersion"
        case documentMetadata = "DocumentMetadata"
        case identityDocuments = "IdentityDocuments"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDocumentsContainer = try containerValues.decodeIfPresent([TextractClientTypes.IdentityDocument?].self, forKey: .identityDocuments)
        var identityDocumentsDecoded0:[TextractClientTypes.IdentityDocument]? = nil
        if let identityDocumentsContainer = identityDocumentsContainer {
            identityDocumentsDecoded0 = [TextractClientTypes.IdentityDocument]()
            for structure0 in identityDocumentsContainer {
                if let structure0 = structure0 {
                    identityDocumentsDecoded0?.append(structure0)
                }
            }
        }
        identityDocuments = identityDocumentsDecoded0
        let documentMetadataDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentMetadata.self, forKey: .documentMetadata)
        documentMetadata = documentMetadataDecoded
        let analyzeIDModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .analyzeIDModelVersion)
        analyzeIDModelVersion = analyzeIDModelVersionDecoded
    }
}

extension BadDocumentException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BadDocumentExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Amazon Textract isn't able to read the document. For more information on the document limits in Amazon Textract, see [limits].
public struct BadDocumentException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct BadDocumentExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
}

extension BadDocumentExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension TextractClientTypes.Block: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockType = "BlockType"
        case columnIndex = "ColumnIndex"
        case columnSpan = "ColumnSpan"
        case confidence = "Confidence"
        case entityTypes = "EntityTypes"
        case geometry = "Geometry"
        case id = "Id"
        case page = "Page"
        case query = "Query"
        case relationships = "Relationships"
        case rowIndex = "RowIndex"
        case rowSpan = "RowSpan"
        case selectionStatus = "SelectionStatus"
        case text = "Text"
        case textType = "TextType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockType = self.blockType {
            try encodeContainer.encode(blockType.rawValue, forKey: .blockType)
        }
        if let columnIndex = self.columnIndex {
            try encodeContainer.encode(columnIndex, forKey: .columnIndex)
        }
        if let columnSpan = self.columnSpan {
            try encodeContainer.encode(columnSpan, forKey: .columnSpan)
        }
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let entityTypes = entityTypes {
            var entityTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityTypes)
            for entitytype0 in entityTypes {
                try entityTypesContainer.encode(entitytype0.rawValue)
            }
        }
        if let geometry = self.geometry {
            try encodeContainer.encode(geometry, forKey: .geometry)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let page = self.page {
            try encodeContainer.encode(page, forKey: .page)
        }
        if let query = self.query {
            try encodeContainer.encode(query, forKey: .query)
        }
        if let relationships = relationships {
            var relationshipsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relationships)
            for relationship0 in relationships {
                try relationshipsContainer.encode(relationship0)
            }
        }
        if let rowIndex = self.rowIndex {
            try encodeContainer.encode(rowIndex, forKey: .rowIndex)
        }
        if let rowSpan = self.rowSpan {
            try encodeContainer.encode(rowSpan, forKey: .rowSpan)
        }
        if let selectionStatus = self.selectionStatus {
            try encodeContainer.encode(selectionStatus.rawValue, forKey: .selectionStatus)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
        if let textType = self.textType {
            try encodeContainer.encode(textType.rawValue, forKey: .textType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockTypeDecoded = try containerValues.decodeIfPresent(TextractClientTypes.BlockType.self, forKey: .blockType)
        blockType = blockTypeDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let textTypeDecoded = try containerValues.decodeIfPresent(TextractClientTypes.TextType.self, forKey: .textType)
        textType = textTypeDecoded
        let rowIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rowIndex)
        rowIndex = rowIndexDecoded
        let columnIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .columnIndex)
        columnIndex = columnIndexDecoded
        let rowSpanDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rowSpan)
        rowSpan = rowSpanDecoded
        let columnSpanDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .columnSpan)
        columnSpan = columnSpanDecoded
        let geometryDecoded = try containerValues.decodeIfPresent(TextractClientTypes.Geometry.self, forKey: .geometry)
        geometry = geometryDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let relationshipsContainer = try containerValues.decodeIfPresent([TextractClientTypes.Relationship?].self, forKey: .relationships)
        var relationshipsDecoded0:[TextractClientTypes.Relationship]? = nil
        if let relationshipsContainer = relationshipsContainer {
            relationshipsDecoded0 = [TextractClientTypes.Relationship]()
            for structure0 in relationshipsContainer {
                if let structure0 = structure0 {
                    relationshipsDecoded0?.append(structure0)
                }
            }
        }
        relationships = relationshipsDecoded0
        let entityTypesContainer = try containerValues.decodeIfPresent([TextractClientTypes.EntityType?].self, forKey: .entityTypes)
        var entityTypesDecoded0:[TextractClientTypes.EntityType]? = nil
        if let entityTypesContainer = entityTypesContainer {
            entityTypesDecoded0 = [TextractClientTypes.EntityType]()
            for enum0 in entityTypesContainer {
                if let enum0 = enum0 {
                    entityTypesDecoded0?.append(enum0)
                }
            }
        }
        entityTypes = entityTypesDecoded0
        let selectionStatusDecoded = try containerValues.decodeIfPresent(TextractClientTypes.SelectionStatus.self, forKey: .selectionStatus)
        selectionStatus = selectionStatusDecoded
        let pageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .page)
        page = pageDecoded
        let queryDecoded = try containerValues.decodeIfPresent(TextractClientTypes.Query.self, forKey: .query)
        query = queryDecoded
    }
}

extension TextractClientTypes {
    /// A Block represents items that are recognized in a document within a group of pixels close to each other. The information returned in a Block object depends on the type of operation. In text detection for documents (for example [DetectDocumentText]), you get information about the detected words and lines of text. In text analysis (for example [AnalyzeDocument]), you can also get information about the fields, tables, and selection elements that are detected in the document. An array of Block objects is returned by both synchronous and asynchronous operations. In synchronous operations, such as [DetectDocumentText], the array of Block objects is the entire set of results. In asynchronous operations, such as [GetDocumentAnalysis], the array is returned over one or more responses. For more information, see [How Amazon Textract Works](https://docs.aws.amazon.com/textract/latest/dg/how-it-works.html).
    public struct Block: Swift.Equatable {
        /// The type of text item that's recognized. In operations for text detection, the following types are returned:
        ///
        /// * PAGE - Contains a list of the LINE Block objects that are detected on a document page.
        ///
        /// * WORD - A word detected on a document page. A word is one or more ISO basic Latin script characters that aren't separated by spaces.
        ///
        /// * LINE - A string of tab-delimited, contiguous words that are detected on a document page.
        ///
        ///
        /// In text analysis operations, the following types are returned:
        ///
        /// * PAGE - Contains a list of child Block objects that are detected on a document page.
        ///
        /// * KEY_VALUE_SET - Stores the KEY and VALUE Block objects for linked text that's detected on a document page. Use the EntityType field to determine if a KEY_VALUE_SET object is a KEY Block object or a VALUE Block object.
        ///
        /// * WORD - A word that's detected on a document page. A word is one or more ISO basic Latin script characters that aren't separated by spaces.
        ///
        /// * LINE - A string of tab-delimited, contiguous words that are detected on a document page.
        ///
        /// * TABLE - A table that's detected on a document page. A table is grid-based information with two or more rows or columns, with a cell span of one row and one column each.
        ///
        /// * CELL - A cell within a detected table. The cell is the parent of the block that contains the text in the cell.
        ///
        /// * SELECTION_ELEMENT - A selection element such as an option button (radio button) or a check box that's detected on a document page. Use the value of SelectionStatus to determine the status of the selection element.
        ///
        /// * SIGNATURE - The location and confidene score of a signature detected on a document page. Can be returned as part of a Key-Value pair or a detected cell.
        ///
        /// * QUERY - A question asked during the call of AnalyzeDocument. Contains an alias and an ID that attaches it to its answer.
        ///
        /// * QUERY_RESULT - A response to a question asked during the call of analyze document. Comes with an alias and ID for ease of locating in a response. Also contains location and confidence score.
        public var blockType: TextractClientTypes.BlockType?
        /// The column in which a table cell appears. The first column position is 1. ColumnIndex isn't returned by DetectDocumentText and GetDocumentTextDetection.
        public var columnIndex: Swift.Int?
        /// The number of columns that a table cell spans. Currently this value is always 1, even if the number of columns spanned is greater than 1. ColumnSpan isn't returned by DetectDocumentText and GetDocumentTextDetection.
        public var columnSpan: Swift.Int?
        /// The confidence score that Amazon Textract has in the accuracy of the recognized text and the accuracy of the geometry points around the recognized text.
        public var confidence: Swift.Float?
        /// The type of entity. The following can be returned:
        ///
        /// * KEY - An identifier for a field on the document.
        ///
        /// * VALUE - The field text.
        ///
        ///
        /// EntityTypes isn't returned by DetectDocumentText and GetDocumentTextDetection.
        public var entityTypes: [TextractClientTypes.EntityType]?
        /// The location of the recognized text on the image. It includes an axis-aligned, coarse bounding box that surrounds the text, and a finer-grain polygon for more accurate spatial information.
        public var geometry: TextractClientTypes.Geometry?
        /// The identifier for the recognized text. The identifier is only unique for a single operation.
        public var id: Swift.String?
        /// The page on which a block was detected. Page is returned by synchronous and asynchronous operations. Page values greater than 1 are only returned for multipage documents that are in PDF or TIFF format. A scanned image (JPEG/PNG) provided to an asynchronous operation, even if it contains multiple document pages, is considered a single-page document. This means that for scanned images the value of Page is always 1. Synchronous operations operations will also return a Page value of 1 because every input document is considered to be a single-page document.
        public var page: Swift.Int?
        ///
        public var query: TextractClientTypes.Query?
        /// A list of child blocks of the current block. For example, a LINE object has child blocks for each WORD block that's part of the line of text. There aren't Relationship objects in the list for relationships that don't exist, such as when the current block has no child blocks. The list size can be the following:
        ///
        /// * 0 - The block has no child blocks.
        ///
        /// * 1 - The block has child blocks.
        public var relationships: [TextractClientTypes.Relationship]?
        /// The row in which a table cell is located. The first row position is 1. RowIndex isn't returned by DetectDocumentText and GetDocumentTextDetection.
        public var rowIndex: Swift.Int?
        /// The number of rows that a table cell spans. Currently this value is always 1, even if the number of rows spanned is greater than 1. RowSpan isn't returned by DetectDocumentText and GetDocumentTextDetection.
        public var rowSpan: Swift.Int?
        /// The selection status of a selection element, such as an option button or check box.
        public var selectionStatus: TextractClientTypes.SelectionStatus?
        /// The word or line of text that's recognized by Amazon Textract.
        public var text: Swift.String?
        /// The kind of text that Amazon Textract has detected. Can check for handwritten text and printed text.
        public var textType: TextractClientTypes.TextType?

        public init (
            blockType: TextractClientTypes.BlockType? = nil,
            columnIndex: Swift.Int? = nil,
            columnSpan: Swift.Int? = nil,
            confidence: Swift.Float? = nil,
            entityTypes: [TextractClientTypes.EntityType]? = nil,
            geometry: TextractClientTypes.Geometry? = nil,
            id: Swift.String? = nil,
            page: Swift.Int? = nil,
            query: TextractClientTypes.Query? = nil,
            relationships: [TextractClientTypes.Relationship]? = nil,
            rowIndex: Swift.Int? = nil,
            rowSpan: Swift.Int? = nil,
            selectionStatus: TextractClientTypes.SelectionStatus? = nil,
            text: Swift.String? = nil,
            textType: TextractClientTypes.TextType? = nil
        )
        {
            self.blockType = blockType
            self.columnIndex = columnIndex
            self.columnSpan = columnSpan
            self.confidence = confidence
            self.entityTypes = entityTypes
            self.geometry = geometry
            self.id = id
            self.page = page
            self.query = query
            self.relationships = relationships
            self.rowIndex = rowIndex
            self.rowSpan = rowSpan
            self.selectionStatus = selectionStatus
            self.text = text
            self.textType = textType
        }
    }

}

extension TextractClientTypes {
    public enum BlockType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cell
        case keyValueSet
        case line
        case mergedCell
        case page
        case query
        case queryResult
        case selectionElement
        case signature
        case table
        case title
        case word
        case sdkUnknown(Swift.String)

        public static var allCases: [BlockType] {
            return [
                .cell,
                .keyValueSet,
                .line,
                .mergedCell,
                .page,
                .query,
                .queryResult,
                .selectionElement,
                .signature,
                .table,
                .title,
                .word,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cell: return "CELL"
            case .keyValueSet: return "KEY_VALUE_SET"
            case .line: return "LINE"
            case .mergedCell: return "MERGED_CELL"
            case .page: return "PAGE"
            case .query: return "QUERY"
            case .queryResult: return "QUERY_RESULT"
            case .selectionElement: return "SELECTION_ELEMENT"
            case .signature: return "SIGNATURE"
            case .table: return "TABLE"
            case .title: return "TITLE"
            case .word: return "WORD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BlockType(rawValue: rawValue) ?? BlockType.sdkUnknown(rawValue)
        }
    }
}

extension TextractClientTypes.BoundingBox: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case height = "Height"
        case `left` = "Left"
        case top = "Top"
        case width = "Width"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if height != 0.0 {
            try encodeContainer.encode(height, forKey: .height)
        }
        if `left` != 0.0 {
            try encodeContainer.encode(`left`, forKey: .`left`)
        }
        if top != 0.0 {
            try encodeContainer.encode(top, forKey: .top)
        }
        if width != 0.0 {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let widthDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .width) ?? 0.0
        width = widthDecoded
        let heightDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .height) ?? 0.0
        height = heightDecoded
        let leftDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .left) ?? 0.0
        `left` = leftDecoded
        let topDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .top) ?? 0.0
        top = topDecoded
    }
}

extension TextractClientTypes {
    /// The bounding box around the detected page, text, key-value pair, table, table cell, or selection element on a document page. The left (x-coordinate) and top (y-coordinate) are coordinates that represent the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). The top and left values returned are ratios of the overall document page size. For example, if the input image is 700 x 200 pixels, and the top-left coordinate of the bounding box is 350 x 50 pixels, the API returns a left value of 0.5 (350/700) and a top value of 0.25 (50/200). The width and height values represent the dimensions of the bounding box as a ratio of the overall document page dimension. For example, if the document page size is 700 x 200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1.
    public struct BoundingBox: Swift.Equatable {
        /// The height of the bounding box as a ratio of the overall document page height.
        public var height: Swift.Float
        /// The left coordinate of the bounding box as a ratio of overall document page width.
        public var `left`: Swift.Float
        /// The top coordinate of the bounding box as a ratio of overall document page height.
        public var top: Swift.Float
        /// The width of the bounding box as a ratio of the overall document page width.
        public var width: Swift.Float

        public init (
            height: Swift.Float = 0.0,
            `left`: Swift.Float = 0.0,
            top: Swift.Float = 0.0,
            width: Swift.Float = 0.0
        )
        {
            self.height = height
            self.`left` = `left`
            self.top = top
            self.width = width
        }
    }

}

extension TextractClientTypes {
    public enum ContentClassifier: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case freeOfAdultContent
        case freeOfPersonallyIdentifiableInformation
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentClassifier] {
            return [
                .freeOfAdultContent,
                .freeOfPersonallyIdentifiableInformation,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .freeOfAdultContent: return "FreeOfAdultContent"
            case .freeOfPersonallyIdentifiableInformation: return "FreeOfPersonallyIdentifiableInformation"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContentClassifier(rawValue: rawValue) ?? ContentClassifier.sdkUnknown(rawValue)
        }
    }
}

extension DetectDocumentTextInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case document = "Document"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let document = self.document {
            try encodeContainer.encode(document, forKey: .document)
        }
    }
}

extension DetectDocumentTextInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectDocumentTextInput: Swift.Equatable {
    /// The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can't pass image bytes. The document must be an image in JPEG or PNG format. If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes that are passed using the Bytes field.
    /// This member is required.
    public var document: TextractClientTypes.Document?

    public init (
        document: TextractClientTypes.Document? = nil
    )
    {
        self.document = document
    }
}

struct DetectDocumentTextInputBody: Swift.Equatable {
    let document: TextractClientTypes.Document?
}

extension DetectDocumentTextInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case document = "Document"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentDecoded = try containerValues.decodeIfPresent(TextractClientTypes.Document.self, forKey: .document)
        document = documentDecoded
    }
}

extension DetectDocumentTextOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetectDocumentTextOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadDocumentException" : self = .badDocumentException(try BadDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DocumentTooLargeException" : self = .documentTooLargeException(try DocumentTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedDocumentException" : self = .unsupportedDocumentException(try UnsupportedDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectDocumentTextOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case badDocumentException(BadDocumentException)
    case documentTooLargeException(DocumentTooLargeException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unsupportedDocumentException(UnsupportedDocumentException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectDocumentTextOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectDocumentTextOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blocks = output.blocks
            self.detectDocumentTextModelVersion = output.detectDocumentTextModelVersion
            self.documentMetadata = output.documentMetadata
        } else {
            self.blocks = nil
            self.detectDocumentTextModelVersion = nil
            self.documentMetadata = nil
        }
    }
}

public struct DetectDocumentTextOutputResponse: Swift.Equatable {
    /// An array of Block objects that contain the text that's detected in the document.
    public var blocks: [TextractClientTypes.Block]?
    ///
    public var detectDocumentTextModelVersion: Swift.String?
    /// Metadata about the document. It contains the number of pages that are detected in the document.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?

    public init (
        blocks: [TextractClientTypes.Block]? = nil,
        detectDocumentTextModelVersion: Swift.String? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil
    )
    {
        self.blocks = blocks
        self.detectDocumentTextModelVersion = detectDocumentTextModelVersion
        self.documentMetadata = documentMetadata
    }
}

struct DetectDocumentTextOutputResponseBody: Swift.Equatable {
    let documentMetadata: TextractClientTypes.DocumentMetadata?
    let blocks: [TextractClientTypes.Block]?
    let detectDocumentTextModelVersion: Swift.String?
}

extension DetectDocumentTextOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blocks = "Blocks"
        case detectDocumentTextModelVersion = "DetectDocumentTextModelVersion"
        case documentMetadata = "DocumentMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentMetadataDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentMetadata.self, forKey: .documentMetadata)
        documentMetadata = documentMetadataDecoded
        let blocksContainer = try containerValues.decodeIfPresent([TextractClientTypes.Block?].self, forKey: .blocks)
        var blocksDecoded0:[TextractClientTypes.Block]? = nil
        if let blocksContainer = blocksContainer {
            blocksDecoded0 = [TextractClientTypes.Block]()
            for structure0 in blocksContainer {
                if let structure0 = structure0 {
                    blocksDecoded0?.append(structure0)
                }
            }
        }
        blocks = blocksDecoded0
        let detectDocumentTextModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectDocumentTextModelVersion)
        detectDocumentTextModelVersion = detectDocumentTextModelVersionDecoded
    }
}

extension TextractClientTypes.DetectedSignature: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case page = "Page"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let page = self.page {
            try encodeContainer.encode(page, forKey: .page)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .page)
        page = pageDecoded
    }
}

extension TextractClientTypes {
    /// A structure that holds information regarding a detected signature on a page.
    public struct DetectedSignature: Swift.Equatable {
        /// The page a detected signature was found on.
        public var page: Swift.Int?

        public init (
            page: Swift.Int? = nil
        )
        {
            self.page = page
        }
    }

}

extension TextractClientTypes.Document: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bytes = "Bytes"
        case s3Object = "S3Object"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bytes = self.bytes {
            try encodeContainer.encode(bytes.base64EncodedString(), forKey: .bytes)
        }
        if let s3Object = self.s3Object {
            try encodeContainer.encode(s3Object, forKey: .s3Object)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bytesDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .bytes)
        bytes = bytesDecoded
        let s3ObjectDecoded = try containerValues.decodeIfPresent(TextractClientTypes.S3Object.self, forKey: .s3Object)
        s3Object = s3ObjectDecoded
    }
}

extension TextractClientTypes {
    /// The input document, either as bytes or as an S3 object. You pass image bytes to an Amazon Textract API operation by using the Bytes property. For example, you would use the Bytes property to pass a document loaded from a local file system. Image bytes passed by using the Bytes property must be base64 encoded. Your code might not need to encode document file bytes if you're using an AWS SDK to call Amazon Textract API operations. You pass images stored in an S3 bucket to an Amazon Textract API operation by using the S3Object property. Documents stored in an S3 bucket don't need to be base64 encoded. The AWS Region for the S3 bucket that contains the S3 object must match the AWS Region that you use for Amazon Textract operations. If you use the AWS CLI to call Amazon Textract operations, passing image bytes using the Bytes property isn't supported. You must first upload the document to an Amazon S3 bucket, and then call the operation using the S3Object property. For Amazon Textract to process an S3 object, the user must have permission to access the S3 object.
    public struct Document: Swift.Equatable {
        /// A blob of base64-encoded document bytes. The maximum size of a document that's provided in a blob of bytes is 5 MB. The document bytes must be in PNG or JPEG format. If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes passed using the Bytes field.
        public var bytes: ClientRuntime.Data?
        /// Identifies an S3 object as the document source. The maximum size of a document that's stored in an S3 bucket is 5 MB.
        public var s3Object: TextractClientTypes.S3Object?

        public init (
            bytes: ClientRuntime.Data? = nil,
            s3Object: TextractClientTypes.S3Object? = nil
        )
        {
            self.bytes = bytes
            self.s3Object = s3Object
        }
    }

}

extension TextractClientTypes.DocumentGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectedSignatures = "DetectedSignatures"
        case splitDocuments = "SplitDocuments"
        case type = "Type"
        case undetectedSignatures = "UndetectedSignatures"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let detectedSignatures = detectedSignatures {
            var detectedSignaturesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .detectedSignatures)
            for detectedsignature0 in detectedSignatures {
                try detectedSignaturesContainer.encode(detectedsignature0)
            }
        }
        if let splitDocuments = splitDocuments {
            var splitDocumentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .splitDocuments)
            for splitdocument0 in splitDocuments {
                try splitDocumentsContainer.encode(splitdocument0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let undetectedSignatures = undetectedSignatures {
            var undetectedSignaturesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .undetectedSignatures)
            for undetectedsignature0 in undetectedSignatures {
                try undetectedSignaturesContainer.encode(undetectedsignature0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let splitDocumentsContainer = try containerValues.decodeIfPresent([TextractClientTypes.SplitDocument?].self, forKey: .splitDocuments)
        var splitDocumentsDecoded0:[TextractClientTypes.SplitDocument]? = nil
        if let splitDocumentsContainer = splitDocumentsContainer {
            splitDocumentsDecoded0 = [TextractClientTypes.SplitDocument]()
            for structure0 in splitDocumentsContainer {
                if let structure0 = structure0 {
                    splitDocumentsDecoded0?.append(structure0)
                }
            }
        }
        splitDocuments = splitDocumentsDecoded0
        let detectedSignaturesContainer = try containerValues.decodeIfPresent([TextractClientTypes.DetectedSignature?].self, forKey: .detectedSignatures)
        var detectedSignaturesDecoded0:[TextractClientTypes.DetectedSignature]? = nil
        if let detectedSignaturesContainer = detectedSignaturesContainer {
            detectedSignaturesDecoded0 = [TextractClientTypes.DetectedSignature]()
            for structure0 in detectedSignaturesContainer {
                if let structure0 = structure0 {
                    detectedSignaturesDecoded0?.append(structure0)
                }
            }
        }
        detectedSignatures = detectedSignaturesDecoded0
        let undetectedSignaturesContainer = try containerValues.decodeIfPresent([TextractClientTypes.UndetectedSignature?].self, forKey: .undetectedSignatures)
        var undetectedSignaturesDecoded0:[TextractClientTypes.UndetectedSignature]? = nil
        if let undetectedSignaturesContainer = undetectedSignaturesContainer {
            undetectedSignaturesDecoded0 = [TextractClientTypes.UndetectedSignature]()
            for structure0 in undetectedSignaturesContainer {
                if let structure0 = structure0 {
                    undetectedSignaturesDecoded0?.append(structure0)
                }
            }
        }
        undetectedSignatures = undetectedSignaturesDecoded0
    }
}

extension TextractClientTypes {
    /// Summary information about documents grouped by the same document type.
    public struct DocumentGroup: Swift.Equatable {
        /// A list of the detected signatures found in a document group.
        public var detectedSignatures: [TextractClientTypes.DetectedSignature]?
        /// An array that contains information about the pages of a document, defined by logical boundary.
        public var splitDocuments: [TextractClientTypes.SplitDocument]?
        /// The type of document that Amazon Textract has detected. See LINK for a list of all types returned by Textract.
        public var type: Swift.String?
        /// A list of any expected signatures not found in a document group.
        public var undetectedSignatures: [TextractClientTypes.UndetectedSignature]?

        public init (
            detectedSignatures: [TextractClientTypes.DetectedSignature]? = nil,
            splitDocuments: [TextractClientTypes.SplitDocument]? = nil,
            type: Swift.String? = nil,
            undetectedSignatures: [TextractClientTypes.UndetectedSignature]? = nil
        )
        {
            self.detectedSignatures = detectedSignatures
            self.splitDocuments = splitDocuments
            self.type = type
            self.undetectedSignatures = undetectedSignatures
        }
    }

}

extension TextractClientTypes.DocumentLocation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Object = "S3Object"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Object = self.s3Object {
            try encodeContainer.encode(s3Object, forKey: .s3Object)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3ObjectDecoded = try containerValues.decodeIfPresent(TextractClientTypes.S3Object.self, forKey: .s3Object)
        s3Object = s3ObjectDecoded
    }
}

extension TextractClientTypes {
    /// The Amazon S3 bucket that contains the document to be processed. It's used by asynchronous operations. The input document can be an image file in JPEG or PNG format. It can also be a file in PDF format.
    public struct DocumentLocation: Swift.Equatable {
        /// The Amazon S3 bucket that contains the input document.
        public var s3Object: TextractClientTypes.S3Object?

        public init (
            s3Object: TextractClientTypes.S3Object? = nil
        )
        {
            self.s3Object = s3Object
        }
    }

}

extension TextractClientTypes.DocumentMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pages = "Pages"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pages = self.pages {
            try encodeContainer.encode(pages, forKey: .pages)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pagesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pages)
        pages = pagesDecoded
    }
}

extension TextractClientTypes {
    /// Information about the input document.
    public struct DocumentMetadata: Swift.Equatable {
        /// The number of pages that are detected in the document.
        public var pages: Swift.Int?

        public init (
            pages: Swift.Int? = nil
        )
        {
            self.pages = pages
        }
    }

}

extension DocumentTooLargeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DocumentTooLargeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The document can't be processed because it's too large. The maximum document size for synchronous operations 10 MB. The maximum document size for asynchronous operations is 500 MB for PDF files.
public struct DocumentTooLargeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct DocumentTooLargeExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
}

extension DocumentTooLargeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension TextractClientTypes {
    public enum EntityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case columnHeader
        case key
        case value
        case sdkUnknown(Swift.String)

        public static var allCases: [EntityType] {
            return [
                .columnHeader,
                .key,
                .value,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .columnHeader: return "COLUMN_HEADER"
            case .key: return "KEY"
            case .value: return "VALUE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EntityType(rawValue: rawValue) ?? EntityType.sdkUnknown(rawValue)
        }
    }
}

extension TextractClientTypes.ExpenseCurrency: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case confidence = "Confidence"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension TextractClientTypes {
    /// Returns the kind of currency detected.
    public struct ExpenseCurrency: Swift.Equatable {
        /// Currency code for detected currency. the current supported codes are:
        ///
        /// * USD
        ///
        /// * EUR
        ///
        /// * GBP
        ///
        /// * CAD
        ///
        /// * INR
        ///
        /// * JPY
        ///
        /// * CHF
        ///
        /// * AUD
        ///
        /// * CNY
        ///
        /// * BZR
        ///
        /// * SEK
        ///
        /// * HKD
        public var code: Swift.String?
        /// Percentage confideence in the detected currency.
        public var confidence: Swift.Float?

        public init (
            code: Swift.String? = nil,
            confidence: Swift.Float? = nil
        )
        {
            self.code = code
            self.confidence = confidence
        }
    }

}

extension TextractClientTypes.ExpenseDetection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case geometry = "Geometry"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let geometry = self.geometry {
            try encodeContainer.encode(geometry, forKey: .geometry)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let geometryDecoded = try containerValues.decodeIfPresent(TextractClientTypes.Geometry.self, forKey: .geometry)
        geometry = geometryDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension TextractClientTypes {
    /// An object used to store information about the Value or Label detected by Amazon Textract.
    public struct ExpenseDetection: Swift.Equatable {
        /// The confidence in detection, as a percentage
        public var confidence: Swift.Float?
        /// Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.
        public var geometry: TextractClientTypes.Geometry?
        /// The word or line of text recognized by Amazon Textract
        public var text: Swift.String?

        public init (
            confidence: Swift.Float? = nil,
            geometry: TextractClientTypes.Geometry? = nil,
            text: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.geometry = geometry
            self.text = text
        }
    }

}

extension TextractClientTypes.ExpenseDocument: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blocks = "Blocks"
        case expenseIndex = "ExpenseIndex"
        case lineItemGroups = "LineItemGroups"
        case summaryFields = "SummaryFields"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blocks = blocks {
            var blocksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .blocks)
            for block0 in blocks {
                try blocksContainer.encode(block0)
            }
        }
        if let expenseIndex = self.expenseIndex {
            try encodeContainer.encode(expenseIndex, forKey: .expenseIndex)
        }
        if let lineItemGroups = lineItemGroups {
            var lineItemGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lineItemGroups)
            for lineitemgroup0 in lineItemGroups {
                try lineItemGroupsContainer.encode(lineitemgroup0)
            }
        }
        if let summaryFields = summaryFields {
            var summaryFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .summaryFields)
            for expensefield0 in summaryFields {
                try summaryFieldsContainer.encode(expensefield0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expenseIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expenseIndex)
        expenseIndex = expenseIndexDecoded
        let summaryFieldsContainer = try containerValues.decodeIfPresent([TextractClientTypes.ExpenseField?].self, forKey: .summaryFields)
        var summaryFieldsDecoded0:[TextractClientTypes.ExpenseField]? = nil
        if let summaryFieldsContainer = summaryFieldsContainer {
            summaryFieldsDecoded0 = [TextractClientTypes.ExpenseField]()
            for structure0 in summaryFieldsContainer {
                if let structure0 = structure0 {
                    summaryFieldsDecoded0?.append(structure0)
                }
            }
        }
        summaryFields = summaryFieldsDecoded0
        let lineItemGroupsContainer = try containerValues.decodeIfPresent([TextractClientTypes.LineItemGroup?].self, forKey: .lineItemGroups)
        var lineItemGroupsDecoded0:[TextractClientTypes.LineItemGroup]? = nil
        if let lineItemGroupsContainer = lineItemGroupsContainer {
            lineItemGroupsDecoded0 = [TextractClientTypes.LineItemGroup]()
            for structure0 in lineItemGroupsContainer {
                if let structure0 = structure0 {
                    lineItemGroupsDecoded0?.append(structure0)
                }
            }
        }
        lineItemGroups = lineItemGroupsDecoded0
        let blocksContainer = try containerValues.decodeIfPresent([TextractClientTypes.Block?].self, forKey: .blocks)
        var blocksDecoded0:[TextractClientTypes.Block]? = nil
        if let blocksContainer = blocksContainer {
            blocksDecoded0 = [TextractClientTypes.Block]()
            for structure0 in blocksContainer {
                if let structure0 = structure0 {
                    blocksDecoded0?.append(structure0)
                }
            }
        }
        blocks = blocksDecoded0
    }
}

extension TextractClientTypes {
    /// The structure holding all the information returned by AnalyzeExpense
    public struct ExpenseDocument: Swift.Equatable {
        /// This is a block object, the same as reported when DetectDocumentText is run on a document. It provides word level recognition of text.
        public var blocks: [TextractClientTypes.Block]?
        /// Denotes which invoice or receipt in the document the information is coming from. First document will be 1, the second 2, and so on.
        public var expenseIndex: Swift.Int?
        /// Information detected on each table of a document, seperated into LineItems.
        public var lineItemGroups: [TextractClientTypes.LineItemGroup]?
        /// Any information found outside of a table by Amazon Textract.
        public var summaryFields: [TextractClientTypes.ExpenseField]?

        public init (
            blocks: [TextractClientTypes.Block]? = nil,
            expenseIndex: Swift.Int? = nil,
            lineItemGroups: [TextractClientTypes.LineItemGroup]? = nil,
            summaryFields: [TextractClientTypes.ExpenseField]? = nil
        )
        {
            self.blocks = blocks
            self.expenseIndex = expenseIndex
            self.lineItemGroups = lineItemGroups
            self.summaryFields = summaryFields
        }
    }

}

extension TextractClientTypes.ExpenseField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currency = "Currency"
        case groupProperties = "GroupProperties"
        case labelDetection = "LabelDetection"
        case pageNumber = "PageNumber"
        case type = "Type"
        case valueDetection = "ValueDetection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currency = self.currency {
            try encodeContainer.encode(currency, forKey: .currency)
        }
        if let groupProperties = groupProperties {
            var groupPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groupProperties)
            for expensegroupproperty0 in groupProperties {
                try groupPropertiesContainer.encode(expensegroupproperty0)
            }
        }
        if let labelDetection = self.labelDetection {
            try encodeContainer.encode(labelDetection, forKey: .labelDetection)
        }
        if let pageNumber = self.pageNumber {
            try encodeContainer.encode(pageNumber, forKey: .pageNumber)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let valueDetection = self.valueDetection {
            try encodeContainer.encode(valueDetection, forKey: .valueDetection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(TextractClientTypes.ExpenseType.self, forKey: .type)
        type = typeDecoded
        let labelDetectionDecoded = try containerValues.decodeIfPresent(TextractClientTypes.ExpenseDetection.self, forKey: .labelDetection)
        labelDetection = labelDetectionDecoded
        let valueDetectionDecoded = try containerValues.decodeIfPresent(TextractClientTypes.ExpenseDetection.self, forKey: .valueDetection)
        valueDetection = valueDetectionDecoded
        let pageNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pageNumber)
        pageNumber = pageNumberDecoded
        let currencyDecoded = try containerValues.decodeIfPresent(TextractClientTypes.ExpenseCurrency.self, forKey: .currency)
        currency = currencyDecoded
        let groupPropertiesContainer = try containerValues.decodeIfPresent([TextractClientTypes.ExpenseGroupProperty?].self, forKey: .groupProperties)
        var groupPropertiesDecoded0:[TextractClientTypes.ExpenseGroupProperty]? = nil
        if let groupPropertiesContainer = groupPropertiesContainer {
            groupPropertiesDecoded0 = [TextractClientTypes.ExpenseGroupProperty]()
            for structure0 in groupPropertiesContainer {
                if let structure0 = structure0 {
                    groupPropertiesDecoded0?.append(structure0)
                }
            }
        }
        groupProperties = groupPropertiesDecoded0
    }
}

extension TextractClientTypes {
    /// Breakdown of detected information, seperated into the catagories Type, LabelDetection, and ValueDetection
    public struct ExpenseField: Swift.Equatable {
        /// Shows the kind of currency, both the code and confidence associated with any monatary value detected.
        public var currency: TextractClientTypes.ExpenseCurrency?
        /// Shows which group a response object belongs to, such as whether an address line belongs to the vendor's address or the recipent's address.
        public var groupProperties: [TextractClientTypes.ExpenseGroupProperty]?
        /// The explicitly stated label of a detected element.
        public var labelDetection: TextractClientTypes.ExpenseDetection?
        /// The page number the value was detected on.
        public var pageNumber: Swift.Int?
        /// The implied label of a detected element. Present alongside LabelDetection for explicit elements.
        public var type: TextractClientTypes.ExpenseType?
        /// The value of a detected element. Present in explicit and implicit elements.
        public var valueDetection: TextractClientTypes.ExpenseDetection?

        public init (
            currency: TextractClientTypes.ExpenseCurrency? = nil,
            groupProperties: [TextractClientTypes.ExpenseGroupProperty]? = nil,
            labelDetection: TextractClientTypes.ExpenseDetection? = nil,
            pageNumber: Swift.Int? = nil,
            type: TextractClientTypes.ExpenseType? = nil,
            valueDetection: TextractClientTypes.ExpenseDetection? = nil
        )
        {
            self.currency = currency
            self.groupProperties = groupProperties
            self.labelDetection = labelDetection
            self.pageNumber = pageNumber
            self.type = type
            self.valueDetection = valueDetection
        }
    }

}

extension TextractClientTypes.ExpenseGroupProperty: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case types = "Types"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let types = types {
            var typesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .types)
            for string0 in types {
                try typesContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .types)
        var typesDecoded0:[Swift.String]? = nil
        if let typesContainer = typesContainer {
            typesDecoded0 = [Swift.String]()
            for string0 in typesContainer {
                if let string0 = string0 {
                    typesDecoded0?.append(string0)
                }
            }
        }
        types = typesDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension TextractClientTypes {
    /// Shows the group that a certain key belongs to. This helps differentiate between names and addresses for different organizations, that can be hard to determine via JSON response.
    public struct ExpenseGroupProperty: Swift.Equatable {
        /// Provides a group Id number, which will be the same for each in the group.
        public var id: Swift.String?
        /// Informs you on whether the expense group is a name or an address.
        public var types: [Swift.String]?

        public init (
            id: Swift.String? = nil,
            types: [Swift.String]? = nil
        )
        {
            self.id = id
            self.types = types
        }
    }

}

extension TextractClientTypes.ExpenseType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension TextractClientTypes {
    /// An object used to store information about the Type detected by Amazon Textract.
    public struct ExpenseType: Swift.Equatable {
        /// The confidence of accuracy, as a percentage.
        public var confidence: Swift.Float?
        /// The word or line of text detected by Amazon Textract.
        public var text: Swift.String?

        public init (
            confidence: Swift.Float? = nil,
            text: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.text = text
        }
    }

}

extension TextractClientTypes.Extraction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expenseDocument = "ExpenseDocument"
        case identityDocument = "IdentityDocument"
        case lendingDocument = "LendingDocument"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expenseDocument = self.expenseDocument {
            try encodeContainer.encode(expenseDocument, forKey: .expenseDocument)
        }
        if let identityDocument = self.identityDocument {
            try encodeContainer.encode(identityDocument, forKey: .identityDocument)
        }
        if let lendingDocument = self.lendingDocument {
            try encodeContainer.encode(lendingDocument, forKey: .lendingDocument)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lendingDocumentDecoded = try containerValues.decodeIfPresent(TextractClientTypes.LendingDocument.self, forKey: .lendingDocument)
        lendingDocument = lendingDocumentDecoded
        let expenseDocumentDecoded = try containerValues.decodeIfPresent(TextractClientTypes.ExpenseDocument.self, forKey: .expenseDocument)
        expenseDocument = expenseDocumentDecoded
        let identityDocumentDecoded = try containerValues.decodeIfPresent(TextractClientTypes.IdentityDocument.self, forKey: .identityDocument)
        identityDocument = identityDocumentDecoded
    }
}

extension TextractClientTypes {
    /// Contains information extracted by an analysis operation after using StartLendingAnalysis.
    public struct Extraction: Swift.Equatable {
        /// The structure holding all the information returned by AnalyzeExpense
        public var expenseDocument: TextractClientTypes.ExpenseDocument?
        /// The structure that lists each document processed in an AnalyzeID operation.
        public var identityDocument: TextractClientTypes.IdentityDocument?
        /// Holds the structured data returned by AnalyzeDocument for lending documents.
        public var lendingDocument: TextractClientTypes.LendingDocument?

        public init (
            expenseDocument: TextractClientTypes.ExpenseDocument? = nil,
            identityDocument: TextractClientTypes.IdentityDocument? = nil,
            lendingDocument: TextractClientTypes.LendingDocument? = nil
        )
        {
            self.expenseDocument = expenseDocument
            self.identityDocument = identityDocument
            self.lendingDocument = lendingDocument
        }
    }

}

extension TextractClientTypes {
    public enum FeatureType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case forms
        case queries
        case signatures
        case tables
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureType] {
            return [
                .forms,
                .queries,
                .signatures,
                .tables,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .forms: return "FORMS"
            case .queries: return "QUERIES"
            case .signatures: return "SIGNATURES"
            case .tables: return "TABLES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FeatureType(rawValue: rawValue) ?? FeatureType.sdkUnknown(rawValue)
        }
    }
}

extension TextractClientTypes.Geometry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case boundingBox = "BoundingBox"
        case polygon = "Polygon"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let polygon = polygon {
            var polygonContainer = encodeContainer.nestedUnkeyedContainer(forKey: .polygon)
            for point0 in polygon {
                try polygonContainer.encode(point0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let boundingBoxDecoded = try containerValues.decodeIfPresent(TextractClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let polygonContainer = try containerValues.decodeIfPresent([TextractClientTypes.Point?].self, forKey: .polygon)
        var polygonDecoded0:[TextractClientTypes.Point]? = nil
        if let polygonContainer = polygonContainer {
            polygonDecoded0 = [TextractClientTypes.Point]()
            for structure0 in polygonContainer {
                if let structure0 = structure0 {
                    polygonDecoded0?.append(structure0)
                }
            }
        }
        polygon = polygonDecoded0
    }
}

extension TextractClientTypes {
    /// Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.
    public struct Geometry: Swift.Equatable {
        /// An axis-aligned coarse representation of the location of the recognized item on the document page.
        public var boundingBox: TextractClientTypes.BoundingBox?
        /// Within the bounding box, a fine-grained polygon around the recognized item.
        public var polygon: [TextractClientTypes.Point]?

        public init (
            boundingBox: TextractClientTypes.BoundingBox? = nil,
            polygon: [TextractClientTypes.Point]? = nil
        )
        {
            self.boundingBox = boundingBox
            self.polygon = polygon
        }
    }

}

extension GetDocumentAnalysisInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetDocumentAnalysisInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDocumentAnalysisInput: Swift.Equatable {
    /// A unique identifier for the text-detection job. The JobId is returned from StartDocumentAnalysis. A JobId value is only valid for 7 days.
    /// This member is required.
    public var jobId: Swift.String?
    /// The maximum number of results to return per paginated call. The largest value that you can specify is 1,000. If you specify a value greater than 1,000, a maximum of 1,000 results is returned. The default value is 1,000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.
    public var nextToken: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetDocumentAnalysisInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetDocumentAnalysisInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetDocumentAnalysisOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDocumentAnalysisOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidJobIdException" : self = .invalidJobIdException(try InvalidJobIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyException" : self = .invalidKMSKeyException(try InvalidKMSKeyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDocumentAnalysisOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidJobIdException(InvalidJobIdException)
    case invalidKMSKeyException(InvalidKMSKeyException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDocumentAnalysisOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDocumentAnalysisOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.analyzeDocumentModelVersion = output.analyzeDocumentModelVersion
            self.blocks = output.blocks
            self.documentMetadata = output.documentMetadata
            self.jobStatus = output.jobStatus
            self.nextToken = output.nextToken
            self.statusMessage = output.statusMessage
            self.warnings = output.warnings
        } else {
            self.analyzeDocumentModelVersion = nil
            self.blocks = nil
            self.documentMetadata = nil
            self.jobStatus = nil
            self.nextToken = nil
            self.statusMessage = nil
            self.warnings = nil
        }
    }
}

public struct GetDocumentAnalysisOutputResponse: Swift.Equatable {
    ///
    public var analyzeDocumentModelVersion: Swift.String?
    /// The results of the text-analysis operation.
    public var blocks: [TextractClientTypes.Block]?
    /// Information about a document that Amazon Textract processed. DocumentMetadata is returned in every page of paginated responses from an Amazon Textract video operation.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// The current status of the text detection job.
    public var jobStatus: TextractClientTypes.JobStatus?
    /// If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text detection results.
    public var nextToken: Swift.String?
    /// Returns if the detection job could not be completed. Contains explanation for what error occured.
    public var statusMessage: Swift.String?
    /// A list of warnings that occurred during the document-analysis operation.
    public var warnings: [TextractClientTypes.Warning]?

    public init (
        analyzeDocumentModelVersion: Swift.String? = nil,
        blocks: [TextractClientTypes.Block]? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        jobStatus: TextractClientTypes.JobStatus? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        warnings: [TextractClientTypes.Warning]? = nil
    )
    {
        self.analyzeDocumentModelVersion = analyzeDocumentModelVersion
        self.blocks = blocks
        self.documentMetadata = documentMetadata
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.warnings = warnings
    }
}

struct GetDocumentAnalysisOutputResponseBody: Swift.Equatable {
    let documentMetadata: TextractClientTypes.DocumentMetadata?
    let jobStatus: TextractClientTypes.JobStatus?
    let nextToken: Swift.String?
    let blocks: [TextractClientTypes.Block]?
    let warnings: [TextractClientTypes.Warning]?
    let statusMessage: Swift.String?
    let analyzeDocumentModelVersion: Swift.String?
}

extension GetDocumentAnalysisOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyzeDocumentModelVersion = "AnalyzeDocumentModelVersion"
        case blocks = "Blocks"
        case documentMetadata = "DocumentMetadata"
        case jobStatus = "JobStatus"
        case nextToken = "NextToken"
        case statusMessage = "StatusMessage"
        case warnings = "Warnings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentMetadataDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentMetadata.self, forKey: .documentMetadata)
        documentMetadata = documentMetadataDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(TextractClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let blocksContainer = try containerValues.decodeIfPresent([TextractClientTypes.Block?].self, forKey: .blocks)
        var blocksDecoded0:[TextractClientTypes.Block]? = nil
        if let blocksContainer = blocksContainer {
            blocksDecoded0 = [TextractClientTypes.Block]()
            for structure0 in blocksContainer {
                if let structure0 = structure0 {
                    blocksDecoded0?.append(structure0)
                }
            }
        }
        blocks = blocksDecoded0
        let warningsContainer = try containerValues.decodeIfPresent([TextractClientTypes.Warning?].self, forKey: .warnings)
        var warningsDecoded0:[TextractClientTypes.Warning]? = nil
        if let warningsContainer = warningsContainer {
            warningsDecoded0 = [TextractClientTypes.Warning]()
            for structure0 in warningsContainer {
                if let structure0 = structure0 {
                    warningsDecoded0?.append(structure0)
                }
            }
        }
        warnings = warningsDecoded0
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let analyzeDocumentModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .analyzeDocumentModelVersion)
        analyzeDocumentModelVersion = analyzeDocumentModelVersionDecoded
    }
}

extension GetDocumentTextDetectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetDocumentTextDetectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDocumentTextDetectionInput: Swift.Equatable {
    /// A unique identifier for the text detection job. The JobId is returned from StartDocumentTextDetection. A JobId value is only valid for 7 days.
    /// This member is required.
    public var jobId: Swift.String?
    /// The maximum number of results to return per paginated call. The largest value you can specify is 1,000. If you specify a value greater than 1,000, a maximum of 1,000 results is returned. The default value is 1,000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.
    public var nextToken: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetDocumentTextDetectionInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetDocumentTextDetectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetDocumentTextDetectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDocumentTextDetectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidJobIdException" : self = .invalidJobIdException(try InvalidJobIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyException" : self = .invalidKMSKeyException(try InvalidKMSKeyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDocumentTextDetectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidJobIdException(InvalidJobIdException)
    case invalidKMSKeyException(InvalidKMSKeyException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDocumentTextDetectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDocumentTextDetectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blocks = output.blocks
            self.detectDocumentTextModelVersion = output.detectDocumentTextModelVersion
            self.documentMetadata = output.documentMetadata
            self.jobStatus = output.jobStatus
            self.nextToken = output.nextToken
            self.statusMessage = output.statusMessage
            self.warnings = output.warnings
        } else {
            self.blocks = nil
            self.detectDocumentTextModelVersion = nil
            self.documentMetadata = nil
            self.jobStatus = nil
            self.nextToken = nil
            self.statusMessage = nil
            self.warnings = nil
        }
    }
}

public struct GetDocumentTextDetectionOutputResponse: Swift.Equatable {
    /// The results of the text-detection operation.
    public var blocks: [TextractClientTypes.Block]?
    ///
    public var detectDocumentTextModelVersion: Swift.String?
    /// Information about a document that Amazon Textract processed. DocumentMetadata is returned in every page of paginated responses from an Amazon Textract video operation.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// The current status of the text detection job.
    public var jobStatus: TextractClientTypes.JobStatus?
    /// If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text-detection results.
    public var nextToken: Swift.String?
    /// Returns if the detection job could not be completed. Contains explanation for what error occured.
    public var statusMessage: Swift.String?
    /// A list of warnings that occurred during the text-detection operation for the document.
    public var warnings: [TextractClientTypes.Warning]?

    public init (
        blocks: [TextractClientTypes.Block]? = nil,
        detectDocumentTextModelVersion: Swift.String? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        jobStatus: TextractClientTypes.JobStatus? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        warnings: [TextractClientTypes.Warning]? = nil
    )
    {
        self.blocks = blocks
        self.detectDocumentTextModelVersion = detectDocumentTextModelVersion
        self.documentMetadata = documentMetadata
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.warnings = warnings
    }
}

struct GetDocumentTextDetectionOutputResponseBody: Swift.Equatable {
    let documentMetadata: TextractClientTypes.DocumentMetadata?
    let jobStatus: TextractClientTypes.JobStatus?
    let nextToken: Swift.String?
    let blocks: [TextractClientTypes.Block]?
    let warnings: [TextractClientTypes.Warning]?
    let statusMessage: Swift.String?
    let detectDocumentTextModelVersion: Swift.String?
}

extension GetDocumentTextDetectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blocks = "Blocks"
        case detectDocumentTextModelVersion = "DetectDocumentTextModelVersion"
        case documentMetadata = "DocumentMetadata"
        case jobStatus = "JobStatus"
        case nextToken = "NextToken"
        case statusMessage = "StatusMessage"
        case warnings = "Warnings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentMetadataDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentMetadata.self, forKey: .documentMetadata)
        documentMetadata = documentMetadataDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(TextractClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let blocksContainer = try containerValues.decodeIfPresent([TextractClientTypes.Block?].self, forKey: .blocks)
        var blocksDecoded0:[TextractClientTypes.Block]? = nil
        if let blocksContainer = blocksContainer {
            blocksDecoded0 = [TextractClientTypes.Block]()
            for structure0 in blocksContainer {
                if let structure0 = structure0 {
                    blocksDecoded0?.append(structure0)
                }
            }
        }
        blocks = blocksDecoded0
        let warningsContainer = try containerValues.decodeIfPresent([TextractClientTypes.Warning?].self, forKey: .warnings)
        var warningsDecoded0:[TextractClientTypes.Warning]? = nil
        if let warningsContainer = warningsContainer {
            warningsDecoded0 = [TextractClientTypes.Warning]()
            for structure0 in warningsContainer {
                if let structure0 = structure0 {
                    warningsDecoded0?.append(structure0)
                }
            }
        }
        warnings = warningsDecoded0
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let detectDocumentTextModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectDocumentTextModelVersion)
        detectDocumentTextModelVersion = detectDocumentTextModelVersionDecoded
    }
}

extension GetExpenseAnalysisInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetExpenseAnalysisInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetExpenseAnalysisInput: Swift.Equatable {
    /// A unique identifier for the text detection job. The JobId is returned from StartExpenseAnalysis. A JobId value is only valid for 7 days.
    /// This member is required.
    public var jobId: Swift.String?
    /// The maximum number of results to return per paginated call. The largest value you can specify is 20. If you specify a value greater than 20, a maximum of 20 results is returned. The default value is 20.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.
    public var nextToken: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetExpenseAnalysisInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetExpenseAnalysisInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetExpenseAnalysisOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetExpenseAnalysisOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidJobIdException" : self = .invalidJobIdException(try InvalidJobIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyException" : self = .invalidKMSKeyException(try InvalidKMSKeyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetExpenseAnalysisOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidJobIdException(InvalidJobIdException)
    case invalidKMSKeyException(InvalidKMSKeyException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetExpenseAnalysisOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetExpenseAnalysisOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.analyzeExpenseModelVersion = output.analyzeExpenseModelVersion
            self.documentMetadata = output.documentMetadata
            self.expenseDocuments = output.expenseDocuments
            self.jobStatus = output.jobStatus
            self.nextToken = output.nextToken
            self.statusMessage = output.statusMessage
            self.warnings = output.warnings
        } else {
            self.analyzeExpenseModelVersion = nil
            self.documentMetadata = nil
            self.expenseDocuments = nil
            self.jobStatus = nil
            self.nextToken = nil
            self.statusMessage = nil
            self.warnings = nil
        }
    }
}

public struct GetExpenseAnalysisOutputResponse: Swift.Equatable {
    /// The current model version of AnalyzeExpense.
    public var analyzeExpenseModelVersion: Swift.String?
    /// Information about a document that Amazon Textract processed. DocumentMetadata is returned in every page of paginated responses from an Amazon Textract operation.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// The expenses detected by Amazon Textract.
    public var expenseDocuments: [TextractClientTypes.ExpenseDocument]?
    /// The current status of the text detection job.
    public var jobStatus: TextractClientTypes.JobStatus?
    /// If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text-detection results.
    public var nextToken: Swift.String?
    /// Returns if the detection job could not be completed. Contains explanation for what error occured.
    public var statusMessage: Swift.String?
    /// A list of warnings that occurred during the text-detection operation for the document.
    public var warnings: [TextractClientTypes.Warning]?

    public init (
        analyzeExpenseModelVersion: Swift.String? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        expenseDocuments: [TextractClientTypes.ExpenseDocument]? = nil,
        jobStatus: TextractClientTypes.JobStatus? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        warnings: [TextractClientTypes.Warning]? = nil
    )
    {
        self.analyzeExpenseModelVersion = analyzeExpenseModelVersion
        self.documentMetadata = documentMetadata
        self.expenseDocuments = expenseDocuments
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.warnings = warnings
    }
}

struct GetExpenseAnalysisOutputResponseBody: Swift.Equatable {
    let documentMetadata: TextractClientTypes.DocumentMetadata?
    let jobStatus: TextractClientTypes.JobStatus?
    let nextToken: Swift.String?
    let expenseDocuments: [TextractClientTypes.ExpenseDocument]?
    let warnings: [TextractClientTypes.Warning]?
    let statusMessage: Swift.String?
    let analyzeExpenseModelVersion: Swift.String?
}

extension GetExpenseAnalysisOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyzeExpenseModelVersion = "AnalyzeExpenseModelVersion"
        case documentMetadata = "DocumentMetadata"
        case expenseDocuments = "ExpenseDocuments"
        case jobStatus = "JobStatus"
        case nextToken = "NextToken"
        case statusMessage = "StatusMessage"
        case warnings = "Warnings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentMetadataDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentMetadata.self, forKey: .documentMetadata)
        documentMetadata = documentMetadataDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(TextractClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let expenseDocumentsContainer = try containerValues.decodeIfPresent([TextractClientTypes.ExpenseDocument?].self, forKey: .expenseDocuments)
        var expenseDocumentsDecoded0:[TextractClientTypes.ExpenseDocument]? = nil
        if let expenseDocumentsContainer = expenseDocumentsContainer {
            expenseDocumentsDecoded0 = [TextractClientTypes.ExpenseDocument]()
            for structure0 in expenseDocumentsContainer {
                if let structure0 = structure0 {
                    expenseDocumentsDecoded0?.append(structure0)
                }
            }
        }
        expenseDocuments = expenseDocumentsDecoded0
        let warningsContainer = try containerValues.decodeIfPresent([TextractClientTypes.Warning?].self, forKey: .warnings)
        var warningsDecoded0:[TextractClientTypes.Warning]? = nil
        if let warningsContainer = warningsContainer {
            warningsDecoded0 = [TextractClientTypes.Warning]()
            for structure0 in warningsContainer {
                if let structure0 = structure0 {
                    warningsDecoded0?.append(structure0)
                }
            }
        }
        warnings = warningsDecoded0
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let analyzeExpenseModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .analyzeExpenseModelVersion)
        analyzeExpenseModelVersion = analyzeExpenseModelVersionDecoded
    }
}

extension GetLendingAnalysisInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetLendingAnalysisInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLendingAnalysisInput: Swift.Equatable {
    /// A unique identifier for the lending or text-detection job. The JobId is returned from StartLendingAnalysis. A JobId value is only valid for 7 days.
    /// This member is required.
    public var jobId: Swift.String?
    /// The maximum number of results to return per paginated call. The largest value that you can specify is 30. If you specify a value greater than 30, a maximum of 30 results is returned. The default value is 30.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete, Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of lending results.
    public var nextToken: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetLendingAnalysisInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetLendingAnalysisInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetLendingAnalysisOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLendingAnalysisOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidJobIdException" : self = .invalidJobIdException(try InvalidJobIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyException" : self = .invalidKMSKeyException(try InvalidKMSKeyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetLendingAnalysisOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidJobIdException(InvalidJobIdException)
    case invalidKMSKeyException(InvalidKMSKeyException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLendingAnalysisOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetLendingAnalysisOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.analyzeLendingModelVersion = output.analyzeLendingModelVersion
            self.documentMetadata = output.documentMetadata
            self.jobStatus = output.jobStatus
            self.nextToken = output.nextToken
            self.results = output.results
            self.statusMessage = output.statusMessage
            self.warnings = output.warnings
        } else {
            self.analyzeLendingModelVersion = nil
            self.documentMetadata = nil
            self.jobStatus = nil
            self.nextToken = nil
            self.results = nil
            self.statusMessage = nil
            self.warnings = nil
        }
    }
}

public struct GetLendingAnalysisOutputResponse: Swift.Equatable {
    /// The current model version of the Analyze Lending API.
    public var analyzeLendingModelVersion: Swift.String?
    /// Information about the input document.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// The current status of the lending analysis job.
    public var jobStatus: TextractClientTypes.JobStatus?
    /// If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of lending results.
    public var nextToken: Swift.String?
    /// Holds the information returned by one of AmazonTextract's document analysis operations for the pinstripe.
    public var results: [TextractClientTypes.LendingResult]?
    /// Returns if the lending analysis job could not be completed. Contains explanation for what error occurred.
    public var statusMessage: Swift.String?
    /// A list of warnings that occurred during the lending analysis operation.
    public var warnings: [TextractClientTypes.Warning]?

    public init (
        analyzeLendingModelVersion: Swift.String? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        jobStatus: TextractClientTypes.JobStatus? = nil,
        nextToken: Swift.String? = nil,
        results: [TextractClientTypes.LendingResult]? = nil,
        statusMessage: Swift.String? = nil,
        warnings: [TextractClientTypes.Warning]? = nil
    )
    {
        self.analyzeLendingModelVersion = analyzeLendingModelVersion
        self.documentMetadata = documentMetadata
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.results = results
        self.statusMessage = statusMessage
        self.warnings = warnings
    }
}

struct GetLendingAnalysisOutputResponseBody: Swift.Equatable {
    let documentMetadata: TextractClientTypes.DocumentMetadata?
    let jobStatus: TextractClientTypes.JobStatus?
    let nextToken: Swift.String?
    let results: [TextractClientTypes.LendingResult]?
    let warnings: [TextractClientTypes.Warning]?
    let statusMessage: Swift.String?
    let analyzeLendingModelVersion: Swift.String?
}

extension GetLendingAnalysisOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyzeLendingModelVersion = "AnalyzeLendingModelVersion"
        case documentMetadata = "DocumentMetadata"
        case jobStatus = "JobStatus"
        case nextToken = "NextToken"
        case results = "Results"
        case statusMessage = "StatusMessage"
        case warnings = "Warnings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentMetadataDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentMetadata.self, forKey: .documentMetadata)
        documentMetadata = documentMetadataDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(TextractClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let resultsContainer = try containerValues.decodeIfPresent([TextractClientTypes.LendingResult?].self, forKey: .results)
        var resultsDecoded0:[TextractClientTypes.LendingResult]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [TextractClientTypes.LendingResult]()
            for structure0 in resultsContainer {
                if let structure0 = structure0 {
                    resultsDecoded0?.append(structure0)
                }
            }
        }
        results = resultsDecoded0
        let warningsContainer = try containerValues.decodeIfPresent([TextractClientTypes.Warning?].self, forKey: .warnings)
        var warningsDecoded0:[TextractClientTypes.Warning]? = nil
        if let warningsContainer = warningsContainer {
            warningsDecoded0 = [TextractClientTypes.Warning]()
            for structure0 in warningsContainer {
                if let structure0 = structure0 {
                    warningsDecoded0?.append(structure0)
                }
            }
        }
        warnings = warningsDecoded0
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let analyzeLendingModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .analyzeLendingModelVersion)
        analyzeLendingModelVersion = analyzeLendingModelVersionDecoded
    }
}

extension GetLendingAnalysisSummaryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension GetLendingAnalysisSummaryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLendingAnalysisSummaryInput: Swift.Equatable {
    /// A unique identifier for the lending or text-detection job. The JobId is returned from StartLendingAnalysis. A JobId value is only valid for 7 days.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct GetLendingAnalysisSummaryInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension GetLendingAnalysisSummaryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension GetLendingAnalysisSummaryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLendingAnalysisSummaryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidJobIdException" : self = .invalidJobIdException(try InvalidJobIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyException" : self = .invalidKMSKeyException(try InvalidKMSKeyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetLendingAnalysisSummaryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidJobIdException(InvalidJobIdException)
    case invalidKMSKeyException(InvalidKMSKeyException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLendingAnalysisSummaryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetLendingAnalysisSummaryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.analyzeLendingModelVersion = output.analyzeLendingModelVersion
            self.documentMetadata = output.documentMetadata
            self.jobStatus = output.jobStatus
            self.statusMessage = output.statusMessage
            self.summary = output.summary
            self.warnings = output.warnings
        } else {
            self.analyzeLendingModelVersion = nil
            self.documentMetadata = nil
            self.jobStatus = nil
            self.statusMessage = nil
            self.summary = nil
            self.warnings = nil
        }
    }
}

public struct GetLendingAnalysisSummaryOutputResponse: Swift.Equatable {
    /// The current model version of the Analyze Lending API.
    public var analyzeLendingModelVersion: Swift.String?
    /// Information about the input document.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// The current status of the lending analysis job.
    public var jobStatus: TextractClientTypes.JobStatus?
    /// Returns if the lending analysis could not be completed. Contains explanation for what error occurred.
    public var statusMessage: Swift.String?
    /// Contains summary information for documents grouped by type.
    public var summary: TextractClientTypes.LendingSummary?
    /// A list of warnings that occurred during the lending analysis operation.
    public var warnings: [TextractClientTypes.Warning]?

    public init (
        analyzeLendingModelVersion: Swift.String? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        jobStatus: TextractClientTypes.JobStatus? = nil,
        statusMessage: Swift.String? = nil,
        summary: TextractClientTypes.LendingSummary? = nil,
        warnings: [TextractClientTypes.Warning]? = nil
    )
    {
        self.analyzeLendingModelVersion = analyzeLendingModelVersion
        self.documentMetadata = documentMetadata
        self.jobStatus = jobStatus
        self.statusMessage = statusMessage
        self.summary = summary
        self.warnings = warnings
    }
}

struct GetLendingAnalysisSummaryOutputResponseBody: Swift.Equatable {
    let documentMetadata: TextractClientTypes.DocumentMetadata?
    let jobStatus: TextractClientTypes.JobStatus?
    let summary: TextractClientTypes.LendingSummary?
    let warnings: [TextractClientTypes.Warning]?
    let statusMessage: Swift.String?
    let analyzeLendingModelVersion: Swift.String?
}

extension GetLendingAnalysisSummaryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyzeLendingModelVersion = "AnalyzeLendingModelVersion"
        case documentMetadata = "DocumentMetadata"
        case jobStatus = "JobStatus"
        case statusMessage = "StatusMessage"
        case summary = "Summary"
        case warnings = "Warnings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentMetadataDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentMetadata.self, forKey: .documentMetadata)
        documentMetadata = documentMetadataDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(TextractClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let summaryDecoded = try containerValues.decodeIfPresent(TextractClientTypes.LendingSummary.self, forKey: .summary)
        summary = summaryDecoded
        let warningsContainer = try containerValues.decodeIfPresent([TextractClientTypes.Warning?].self, forKey: .warnings)
        var warningsDecoded0:[TextractClientTypes.Warning]? = nil
        if let warningsContainer = warningsContainer {
            warningsDecoded0 = [TextractClientTypes.Warning]()
            for structure0 in warningsContainer {
                if let structure0 = structure0 {
                    warningsDecoded0?.append(structure0)
                }
            }
        }
        warnings = warningsDecoded0
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let analyzeLendingModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .analyzeLendingModelVersion)
        analyzeLendingModelVersion = analyzeLendingModelVersionDecoded
    }
}

extension TextractClientTypes.HumanLoopActivationOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanLoopActivationConditionsEvaluationResults = "HumanLoopActivationConditionsEvaluationResults"
        case humanLoopActivationReasons = "HumanLoopActivationReasons"
        case humanLoopArn = "HumanLoopArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanLoopActivationConditionsEvaluationResults = self.humanLoopActivationConditionsEvaluationResults {
            try encodeContainer.encode(humanLoopActivationConditionsEvaluationResults, forKey: .humanLoopActivationConditionsEvaluationResults)
        }
        if let humanLoopActivationReasons = humanLoopActivationReasons {
            var humanLoopActivationReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .humanLoopActivationReasons)
            for humanloopactivationreason0 in humanLoopActivationReasons {
                try humanLoopActivationReasonsContainer.encode(humanloopactivationreason0)
            }
        }
        if let humanLoopArn = self.humanLoopArn {
            try encodeContainer.encode(humanLoopArn, forKey: .humanLoopArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanLoopArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanLoopArn)
        humanLoopArn = humanLoopArnDecoded
        let humanLoopActivationReasonsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .humanLoopActivationReasons)
        var humanLoopActivationReasonsDecoded0:[Swift.String]? = nil
        if let humanLoopActivationReasonsContainer = humanLoopActivationReasonsContainer {
            humanLoopActivationReasonsDecoded0 = [Swift.String]()
            for string0 in humanLoopActivationReasonsContainer {
                if let string0 = string0 {
                    humanLoopActivationReasonsDecoded0?.append(string0)
                }
            }
        }
        humanLoopActivationReasons = humanLoopActivationReasonsDecoded0
        let humanLoopActivationConditionsEvaluationResultsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanLoopActivationConditionsEvaluationResults)
        humanLoopActivationConditionsEvaluationResults = humanLoopActivationConditionsEvaluationResultsDecoded
    }
}

extension TextractClientTypes {
    /// Shows the results of the human in the loop evaluation. If there is no HumanLoopArn, the input did not trigger human review.
    public struct HumanLoopActivationOutput: Swift.Equatable {
        /// Shows the result of condition evaluations, including those conditions which activated a human review.
        public var humanLoopActivationConditionsEvaluationResults: Swift.String?
        /// Shows if and why human review was needed.
        public var humanLoopActivationReasons: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the HumanLoop created.
        public var humanLoopArn: Swift.String?

        public init (
            humanLoopActivationConditionsEvaluationResults: Swift.String? = nil,
            humanLoopActivationReasons: [Swift.String]? = nil,
            humanLoopArn: Swift.String? = nil
        )
        {
            self.humanLoopActivationConditionsEvaluationResults = humanLoopActivationConditionsEvaluationResults
            self.humanLoopActivationReasons = humanLoopActivationReasons
            self.humanLoopArn = humanLoopArn
        }
    }

}

extension TextractClientTypes.HumanLoopConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAttributes = "DataAttributes"
        case flowDefinitionArn = "FlowDefinitionArn"
        case humanLoopName = "HumanLoopName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAttributes = self.dataAttributes {
            try encodeContainer.encode(dataAttributes, forKey: .dataAttributes)
        }
        if let flowDefinitionArn = self.flowDefinitionArn {
            try encodeContainer.encode(flowDefinitionArn, forKey: .flowDefinitionArn)
        }
        if let humanLoopName = self.humanLoopName {
            try encodeContainer.encode(humanLoopName, forKey: .humanLoopName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanLoopNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanLoopName)
        humanLoopName = humanLoopNameDecoded
        let flowDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .flowDefinitionArn)
        flowDefinitionArn = flowDefinitionArnDecoded
        let dataAttributesDecoded = try containerValues.decodeIfPresent(TextractClientTypes.HumanLoopDataAttributes.self, forKey: .dataAttributes)
        dataAttributes = dataAttributesDecoded
    }
}

extension TextractClientTypes {
    /// Sets up the human review workflow the document will be sent to if one of the conditions is met. You can also set certain attributes of the image before review.
    public struct HumanLoopConfig: Swift.Equatable {
        /// Sets attributes of the input data.
        public var dataAttributes: TextractClientTypes.HumanLoopDataAttributes?
        /// The Amazon Resource Name (ARN) of the flow definition.
        /// This member is required.
        public var flowDefinitionArn: Swift.String?
        /// The name of the human workflow used for this image. This should be kept unique within a region.
        /// This member is required.
        public var humanLoopName: Swift.String?

        public init (
            dataAttributes: TextractClientTypes.HumanLoopDataAttributes? = nil,
            flowDefinitionArn: Swift.String? = nil,
            humanLoopName: Swift.String? = nil
        )
        {
            self.dataAttributes = dataAttributes
            self.flowDefinitionArn = flowDefinitionArn
            self.humanLoopName = humanLoopName
        }
    }

}

extension TextractClientTypes.HumanLoopDataAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentClassifiers = "ContentClassifiers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentClassifiers = contentClassifiers {
            var contentClassifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contentClassifiers)
            for contentclassifier0 in contentClassifiers {
                try contentClassifiersContainer.encode(contentclassifier0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentClassifiersContainer = try containerValues.decodeIfPresent([TextractClientTypes.ContentClassifier?].self, forKey: .contentClassifiers)
        var contentClassifiersDecoded0:[TextractClientTypes.ContentClassifier]? = nil
        if let contentClassifiersContainer = contentClassifiersContainer {
            contentClassifiersDecoded0 = [TextractClientTypes.ContentClassifier]()
            for enum0 in contentClassifiersContainer {
                if let enum0 = enum0 {
                    contentClassifiersDecoded0?.append(enum0)
                }
            }
        }
        contentClassifiers = contentClassifiersDecoded0
    }
}

extension TextractClientTypes {
    /// Allows you to set attributes of the image. Currently, you can declare an image as free of personally identifiable information and adult content.
    public struct HumanLoopDataAttributes: Swift.Equatable {
        /// Sets whether the input image is free of personally identifiable information or adult content.
        public var contentClassifiers: [TextractClientTypes.ContentClassifier]?

        public init (
            contentClassifiers: [TextractClientTypes.ContentClassifier]? = nil
        )
        {
            self.contentClassifiers = contentClassifiers
        }
    }

}

extension HumanLoopQuotaExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: HumanLoopQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
            self.quotaCode = output.quotaCode
            self.resourceType = output.resourceType
            self.serviceCode = output.serviceCode
        } else {
            self.code = nil
            self.message = nil
            self.quotaCode = nil
            self.resourceType = nil
            self.serviceCode = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates you have exceeded the maximum number of active human in the loop workflows available
public struct HumanLoopQuotaExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?
    /// The quota code.
    public var quotaCode: Swift.String?
    /// The resource type.
    public var resourceType: Swift.String?
    /// The service code.
    public var serviceCode: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
        self.quotaCode = quotaCode
        self.resourceType = resourceType
        self.serviceCode = serviceCode
    }
}

struct HumanLoopQuotaExceededExceptionBody: Swift.Equatable {
    let resourceType: Swift.String?
    let quotaCode: Swift.String?
    let serviceCode: Swift.String?
    let message: Swift.String?
    let code: Swift.String?
}

extension HumanLoopQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
        case quotaCode = "QuotaCode"
        case resourceType = "ResourceType"
        case serviceCode = "ServiceCode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let quotaCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quotaCode)
        quotaCode = quotaCodeDecoded
        let serviceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceCode)
        serviceCode = serviceCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension IdempotentParameterMismatchException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IdempotentParameterMismatchExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A ClientRequestToken input parameter was reused with an operation, but at least one of the other input parameters is different from the previous call to the operation.
public struct IdempotentParameterMismatchException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct IdempotentParameterMismatchExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
}

extension IdempotentParameterMismatchExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension TextractClientTypes.IdentityDocument: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blocks = "Blocks"
        case documentIndex = "DocumentIndex"
        case identityDocumentFields = "IdentityDocumentFields"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blocks = blocks {
            var blocksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .blocks)
            for block0 in blocks {
                try blocksContainer.encode(block0)
            }
        }
        if let documentIndex = self.documentIndex {
            try encodeContainer.encode(documentIndex, forKey: .documentIndex)
        }
        if let identityDocumentFields = identityDocumentFields {
            var identityDocumentFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .identityDocumentFields)
            for identitydocumentfield0 in identityDocumentFields {
                try identityDocumentFieldsContainer.encode(identitydocumentfield0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .documentIndex)
        documentIndex = documentIndexDecoded
        let identityDocumentFieldsContainer = try containerValues.decodeIfPresent([TextractClientTypes.IdentityDocumentField?].self, forKey: .identityDocumentFields)
        var identityDocumentFieldsDecoded0:[TextractClientTypes.IdentityDocumentField]? = nil
        if let identityDocumentFieldsContainer = identityDocumentFieldsContainer {
            identityDocumentFieldsDecoded0 = [TextractClientTypes.IdentityDocumentField]()
            for structure0 in identityDocumentFieldsContainer {
                if let structure0 = structure0 {
                    identityDocumentFieldsDecoded0?.append(structure0)
                }
            }
        }
        identityDocumentFields = identityDocumentFieldsDecoded0
        let blocksContainer = try containerValues.decodeIfPresent([TextractClientTypes.Block?].self, forKey: .blocks)
        var blocksDecoded0:[TextractClientTypes.Block]? = nil
        if let blocksContainer = blocksContainer {
            blocksDecoded0 = [TextractClientTypes.Block]()
            for structure0 in blocksContainer {
                if let structure0 = structure0 {
                    blocksDecoded0?.append(structure0)
                }
            }
        }
        blocks = blocksDecoded0
    }
}

extension TextractClientTypes {
    /// The structure that lists each document processed in an AnalyzeID operation.
    public struct IdentityDocument: Swift.Equatable {
        /// Individual word recognition, as returned by document detection.
        public var blocks: [TextractClientTypes.Block]?
        /// Denotes the placement of a document in the IdentityDocument list. The first document is marked 1, the second 2 and so on.
        public var documentIndex: Swift.Int?
        /// The structure used to record information extracted from identity documents. Contains both normalized field and value of the extracted text.
        public var identityDocumentFields: [TextractClientTypes.IdentityDocumentField]?

        public init (
            blocks: [TextractClientTypes.Block]? = nil,
            documentIndex: Swift.Int? = nil,
            identityDocumentFields: [TextractClientTypes.IdentityDocumentField]? = nil
        )
        {
            self.blocks = blocks
            self.documentIndex = documentIndex
            self.identityDocumentFields = identityDocumentFields
        }
    }

}

extension TextractClientTypes.IdentityDocumentField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
        case valueDetection = "ValueDetection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let valueDetection = self.valueDetection {
            try encodeContainer.encode(valueDetection, forKey: .valueDetection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(TextractClientTypes.AnalyzeIDDetections.self, forKey: .type)
        type = typeDecoded
        let valueDetectionDecoded = try containerValues.decodeIfPresent(TextractClientTypes.AnalyzeIDDetections.self, forKey: .valueDetection)
        valueDetection = valueDetectionDecoded
    }
}

extension TextractClientTypes {
    /// Structure containing both the normalized type of the extracted information and the text associated with it. These are extracted as Type and Value respectively.
    public struct IdentityDocumentField: Swift.Equatable {
        /// Used to contain the information detected by an AnalyzeID operation.
        public var type: TextractClientTypes.AnalyzeIDDetections?
        /// Used to contain the information detected by an AnalyzeID operation.
        public var valueDetection: TextractClientTypes.AnalyzeIDDetections?

        public init (
            type: TextractClientTypes.AnalyzeIDDetections? = nil,
            valueDetection: TextractClientTypes.AnalyzeIDDetections? = nil
        )
        {
            self.type = type
            self.valueDetection = valueDetection
        }
    }

}

extension InternalServerError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerErrorBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Amazon Textract experienced a service issue. Try your call again.
public struct InternalServerError: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct InternalServerErrorBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
}

extension InternalServerErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension InvalidJobIdException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidJobIdExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An invalid job identifier was passed to an asynchronous analysis operation.
public struct InvalidJobIdException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct InvalidJobIdExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
}

extension InvalidJobIdExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension InvalidKMSKeyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidKMSKeyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates you do not have decrypt permissions with the KMS key entered, or the KMS key was entered incorrectly.
public struct InvalidKMSKeyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct InvalidKMSKeyExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
}

extension InvalidKMSKeyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension InvalidParameterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidParameterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An input parameter violated a constraint. For example, in synchronous operations, an InvalidParameterException exception occurs when neither of the S3Object or Bytes values are supplied in the Document request parameter. Validate your parameter before calling the API operation again.
public struct InvalidParameterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct InvalidParameterExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
}

extension InvalidParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension InvalidS3ObjectException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidS3ObjectExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Amazon Textract is unable to access the S3 object that's specified in the request. for more information, [Configure Access to Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html) For troubleshooting information, see [Troubleshooting Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/troubleshooting.html)
public struct InvalidS3ObjectException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct InvalidS3ObjectExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
}

extension InvalidS3ObjectExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension TextractClientTypes {
    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case partialSuccess
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .failed,
                .inProgress,
                .partialSuccess,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .partialSuccess: return "PARTIAL_SUCCESS"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobStatus(rawValue: rawValue) ?? JobStatus.sdkUnknown(rawValue)
        }
    }
}

extension TextractClientTypes.LendingDetection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case geometry = "Geometry"
        case selectionStatus = "SelectionStatus"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let geometry = self.geometry {
            try encodeContainer.encode(geometry, forKey: .geometry)
        }
        if let selectionStatus = self.selectionStatus {
            try encodeContainer.encode(selectionStatus.rawValue, forKey: .selectionStatus)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let selectionStatusDecoded = try containerValues.decodeIfPresent(TextractClientTypes.SelectionStatus.self, forKey: .selectionStatus)
        selectionStatus = selectionStatusDecoded
        let geometryDecoded = try containerValues.decodeIfPresent(TextractClientTypes.Geometry.self, forKey: .geometry)
        geometry = geometryDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension TextractClientTypes {
    /// The results extracted for a lending document.
    public struct LendingDetection: Swift.Equatable {
        /// The confidence level for the text of a detected value in a lending document.
        public var confidence: Swift.Float?
        /// Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.
        public var geometry: TextractClientTypes.Geometry?
        /// The selection status of a selection element, such as an option button or check box.
        public var selectionStatus: TextractClientTypes.SelectionStatus?
        /// The text extracted for a detected value in a lending document.
        public var text: Swift.String?

        public init (
            confidence: Swift.Float? = nil,
            geometry: TextractClientTypes.Geometry? = nil,
            selectionStatus: TextractClientTypes.SelectionStatus? = nil,
            text: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.geometry = geometry
            self.selectionStatus = selectionStatus
            self.text = text
        }
    }

}

extension TextractClientTypes.LendingDocument: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lendingFields = "LendingFields"
        case signatureDetections = "SignatureDetections"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lendingFields = lendingFields {
            var lendingFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lendingFields)
            for lendingfield0 in lendingFields {
                try lendingFieldsContainer.encode(lendingfield0)
            }
        }
        if let signatureDetections = signatureDetections {
            var signatureDetectionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .signatureDetections)
            for signaturedetection0 in signatureDetections {
                try signatureDetectionsContainer.encode(signaturedetection0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lendingFieldsContainer = try containerValues.decodeIfPresent([TextractClientTypes.LendingField?].self, forKey: .lendingFields)
        var lendingFieldsDecoded0:[TextractClientTypes.LendingField]? = nil
        if let lendingFieldsContainer = lendingFieldsContainer {
            lendingFieldsDecoded0 = [TextractClientTypes.LendingField]()
            for structure0 in lendingFieldsContainer {
                if let structure0 = structure0 {
                    lendingFieldsDecoded0?.append(structure0)
                }
            }
        }
        lendingFields = lendingFieldsDecoded0
        let signatureDetectionsContainer = try containerValues.decodeIfPresent([TextractClientTypes.SignatureDetection?].self, forKey: .signatureDetections)
        var signatureDetectionsDecoded0:[TextractClientTypes.SignatureDetection]? = nil
        if let signatureDetectionsContainer = signatureDetectionsContainer {
            signatureDetectionsDecoded0 = [TextractClientTypes.SignatureDetection]()
            for structure0 in signatureDetectionsContainer {
                if let structure0 = structure0 {
                    signatureDetectionsDecoded0?.append(structure0)
                }
            }
        }
        signatureDetections = signatureDetectionsDecoded0
    }
}

extension TextractClientTypes {
    /// Holds the structured data returned by AnalyzeDocument for lending documents.
    public struct LendingDocument: Swift.Equatable {
        /// An array of LendingField objects.
        public var lendingFields: [TextractClientTypes.LendingField]?
        /// A list of signatures detected in a lending document.
        public var signatureDetections: [TextractClientTypes.SignatureDetection]?

        public init (
            lendingFields: [TextractClientTypes.LendingField]? = nil,
            signatureDetections: [TextractClientTypes.SignatureDetection]? = nil
        )
        {
            self.lendingFields = lendingFields
            self.signatureDetections = signatureDetections
        }
    }

}

extension TextractClientTypes.LendingField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyDetection = "KeyDetection"
        case type = "Type"
        case valueDetections = "ValueDetections"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyDetection = self.keyDetection {
            try encodeContainer.encode(keyDetection, forKey: .keyDetection)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let valueDetections = valueDetections {
            var valueDetectionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .valueDetections)
            for lendingdetection0 in valueDetections {
                try valueDetectionsContainer.encode(lendingdetection0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let keyDetectionDecoded = try containerValues.decodeIfPresent(TextractClientTypes.LendingDetection.self, forKey: .keyDetection)
        keyDetection = keyDetectionDecoded
        let valueDetectionsContainer = try containerValues.decodeIfPresent([TextractClientTypes.LendingDetection?].self, forKey: .valueDetections)
        var valueDetectionsDecoded0:[TextractClientTypes.LendingDetection]? = nil
        if let valueDetectionsContainer = valueDetectionsContainer {
            valueDetectionsDecoded0 = [TextractClientTypes.LendingDetection]()
            for structure0 in valueDetectionsContainer {
                if let structure0 = structure0 {
                    valueDetectionsDecoded0?.append(structure0)
                }
            }
        }
        valueDetections = valueDetectionsDecoded0
    }
}

extension TextractClientTypes {
    /// Holds the normalized key-value pairs returned by AnalyzeDocument, including the document type, detected text, and geometry.
    public struct LendingField: Swift.Equatable {
        /// The results extracted for a lending document.
        public var keyDetection: TextractClientTypes.LendingDetection?
        /// The type of the lending document.
        public var type: Swift.String?
        /// An array of LendingDetection objects.
        public var valueDetections: [TextractClientTypes.LendingDetection]?

        public init (
            keyDetection: TextractClientTypes.LendingDetection? = nil,
            type: Swift.String? = nil,
            valueDetections: [TextractClientTypes.LendingDetection]? = nil
        )
        {
            self.keyDetection = keyDetection
            self.type = type
            self.valueDetections = valueDetections
        }
    }

}

extension TextractClientTypes.LendingResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case extractions = "Extractions"
        case page = "Page"
        case pageClassification = "PageClassification"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let extractions = extractions {
            var extractionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .extractions)
            for extraction0 in extractions {
                try extractionsContainer.encode(extraction0)
            }
        }
        if let page = self.page {
            try encodeContainer.encode(page, forKey: .page)
        }
        if let pageClassification = self.pageClassification {
            try encodeContainer.encode(pageClassification, forKey: .pageClassification)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .page)
        page = pageDecoded
        let pageClassificationDecoded = try containerValues.decodeIfPresent(TextractClientTypes.PageClassification.self, forKey: .pageClassification)
        pageClassification = pageClassificationDecoded
        let extractionsContainer = try containerValues.decodeIfPresent([TextractClientTypes.Extraction?].self, forKey: .extractions)
        var extractionsDecoded0:[TextractClientTypes.Extraction]? = nil
        if let extractionsContainer = extractionsContainer {
            extractionsDecoded0 = [TextractClientTypes.Extraction]()
            for structure0 in extractionsContainer {
                if let structure0 = structure0 {
                    extractionsDecoded0?.append(structure0)
                }
            }
        }
        extractions = extractionsDecoded0
    }
}

extension TextractClientTypes {
    /// Contains the detections for each page analyzed through the Analyze Lending API.
    public struct LendingResult: Swift.Equatable {
        /// An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .
        public var extractions: [TextractClientTypes.Extraction]?
        /// The page number for a page, with regard to whole submission.
        public var page: Swift.Int?
        /// The classifier result for a given page.
        public var pageClassification: TextractClientTypes.PageClassification?

        public init (
            extractions: [TextractClientTypes.Extraction]? = nil,
            page: Swift.Int? = nil,
            pageClassification: TextractClientTypes.PageClassification? = nil
        )
        {
            self.extractions = extractions
            self.page = page
            self.pageClassification = pageClassification
        }
    }

}

extension TextractClientTypes.LendingSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentGroups = "DocumentGroups"
        case undetectedDocumentTypes = "UndetectedDocumentTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentGroups = documentGroups {
            var documentGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .documentGroups)
            for documentgroup0 in documentGroups {
                try documentGroupsContainer.encode(documentgroup0)
            }
        }
        if let undetectedDocumentTypes = undetectedDocumentTypes {
            var undetectedDocumentTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .undetectedDocumentTypes)
            for nonemptystring0 in undetectedDocumentTypes {
                try undetectedDocumentTypesContainer.encode(nonemptystring0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentGroupsContainer = try containerValues.decodeIfPresent([TextractClientTypes.DocumentGroup?].self, forKey: .documentGroups)
        var documentGroupsDecoded0:[TextractClientTypes.DocumentGroup]? = nil
        if let documentGroupsContainer = documentGroupsContainer {
            documentGroupsDecoded0 = [TextractClientTypes.DocumentGroup]()
            for structure0 in documentGroupsContainer {
                if let structure0 = structure0 {
                    documentGroupsDecoded0?.append(structure0)
                }
            }
        }
        documentGroups = documentGroupsDecoded0
        let undetectedDocumentTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .undetectedDocumentTypes)
        var undetectedDocumentTypesDecoded0:[Swift.String]? = nil
        if let undetectedDocumentTypesContainer = undetectedDocumentTypesContainer {
            undetectedDocumentTypesDecoded0 = [Swift.String]()
            for string0 in undetectedDocumentTypesContainer {
                if let string0 = string0 {
                    undetectedDocumentTypesDecoded0?.append(string0)
                }
            }
        }
        undetectedDocumentTypes = undetectedDocumentTypesDecoded0
    }
}

extension TextractClientTypes {
    /// Contains information regarding DocumentGroups and UndetectedDocumentTypes.
    public struct LendingSummary: Swift.Equatable {
        /// Contains an array of all DocumentGroup objects.
        public var documentGroups: [TextractClientTypes.DocumentGroup]?
        /// UndetectedDocumentTypes.
        public var undetectedDocumentTypes: [Swift.String]?

        public init (
            documentGroups: [TextractClientTypes.DocumentGroup]? = nil,
            undetectedDocumentTypes: [Swift.String]? = nil
        )
        {
            self.documentGroups = documentGroups
            self.undetectedDocumentTypes = undetectedDocumentTypes
        }
    }

}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An Amazon Textract service limit was exceeded. For example, if you start too many asynchronous jobs concurrently, calls to start operations (StartDocumentTextDetection, for example) raise a LimitExceededException exception (HTTP status code: 400) until the number of concurrently running jobs is below the Amazon Textract service limit.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension TextractClientTypes.LineItemFields: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lineItemExpenseFields = "LineItemExpenseFields"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lineItemExpenseFields = lineItemExpenseFields {
            var lineItemExpenseFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lineItemExpenseFields)
            for expensefield0 in lineItemExpenseFields {
                try lineItemExpenseFieldsContainer.encode(expensefield0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lineItemExpenseFieldsContainer = try containerValues.decodeIfPresent([TextractClientTypes.ExpenseField?].self, forKey: .lineItemExpenseFields)
        var lineItemExpenseFieldsDecoded0:[TextractClientTypes.ExpenseField]? = nil
        if let lineItemExpenseFieldsContainer = lineItemExpenseFieldsContainer {
            lineItemExpenseFieldsDecoded0 = [TextractClientTypes.ExpenseField]()
            for structure0 in lineItemExpenseFieldsContainer {
                if let structure0 = structure0 {
                    lineItemExpenseFieldsDecoded0?.append(structure0)
                }
            }
        }
        lineItemExpenseFields = lineItemExpenseFieldsDecoded0
    }
}

extension TextractClientTypes {
    /// A structure that holds information about the different lines found in a document's tables.
    public struct LineItemFields: Swift.Equatable {
        /// ExpenseFields used to show information from detected lines on a table.
        public var lineItemExpenseFields: [TextractClientTypes.ExpenseField]?

        public init (
            lineItemExpenseFields: [TextractClientTypes.ExpenseField]? = nil
        )
        {
            self.lineItemExpenseFields = lineItemExpenseFields
        }
    }

}

extension TextractClientTypes.LineItemGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lineItemGroupIndex = "LineItemGroupIndex"
        case lineItems = "LineItems"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lineItemGroupIndex = self.lineItemGroupIndex {
            try encodeContainer.encode(lineItemGroupIndex, forKey: .lineItemGroupIndex)
        }
        if let lineItems = lineItems {
            var lineItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lineItems)
            for lineitemfields0 in lineItems {
                try lineItemsContainer.encode(lineitemfields0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lineItemGroupIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lineItemGroupIndex)
        lineItemGroupIndex = lineItemGroupIndexDecoded
        let lineItemsContainer = try containerValues.decodeIfPresent([TextractClientTypes.LineItemFields?].self, forKey: .lineItems)
        var lineItemsDecoded0:[TextractClientTypes.LineItemFields]? = nil
        if let lineItemsContainer = lineItemsContainer {
            lineItemsDecoded0 = [TextractClientTypes.LineItemFields]()
            for structure0 in lineItemsContainer {
                if let structure0 = structure0 {
                    lineItemsDecoded0?.append(structure0)
                }
            }
        }
        lineItems = lineItemsDecoded0
    }
}

extension TextractClientTypes {
    /// A grouping of tables which contain LineItems, with each table identified by the table's LineItemGroupIndex.
    public struct LineItemGroup: Swift.Equatable {
        /// The number used to identify a specific table in a document. The first table encountered will have a LineItemGroupIndex of 1, the second 2, etc.
        public var lineItemGroupIndex: Swift.Int?
        /// The breakdown of information on a particular line of a table.
        public var lineItems: [TextractClientTypes.LineItemFields]?

        public init (
            lineItemGroupIndex: Swift.Int? = nil,
            lineItems: [TextractClientTypes.LineItemFields]? = nil
        )
        {
            self.lineItemGroupIndex = lineItemGroupIndex
            self.lineItems = lineItems
        }
    }

}

extension TextractClientTypes.NormalizedValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case value = "Value"
        case valueType = "ValueType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
        if let valueType = self.valueType {
            try encodeContainer.encode(valueType.rawValue, forKey: .valueType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let valueTypeDecoded = try containerValues.decodeIfPresent(TextractClientTypes.ValueType.self, forKey: .valueType)
        valueType = valueTypeDecoded
    }
}

extension TextractClientTypes {
    /// Contains information relating to dates in a document, including the type of value, and the value.
    public struct NormalizedValue: Swift.Equatable {
        /// The value of the date, written as Year-Month-DayTHour:Minute:Second.
        public var value: Swift.String?
        /// The normalized type of the value detected. In this case, DATE.
        public var valueType: TextractClientTypes.ValueType?

        public init (
            value: Swift.String? = nil,
            valueType: TextractClientTypes.ValueType? = nil
        )
        {
            self.value = value
            self.valueType = valueType
        }
    }

}

extension TextractClientTypes.NotificationChannel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleArn = "RoleArn"
        case snsTopicArn = "SNSTopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let snsTopicArn = self.snsTopicArn {
            try encodeContainer.encode(snsTopicArn, forKey: .snsTopicArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension TextractClientTypes {
    /// The Amazon Simple Notification Service (Amazon SNS) topic to which Amazon Textract publishes the completion status of an asynchronous document operation.
    public struct NotificationChannel: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of an IAM role that gives Amazon Textract publishing permissions to the Amazon SNS topic.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The Amazon SNS topic that Amazon Textract posts the completion status to.
        /// This member is required.
        public var snsTopicArn: Swift.String?

        public init (
            roleArn: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil
        )
        {
            self.roleArn = roleArn
            self.snsTopicArn = snsTopicArn
        }
    }

}

extension TextractClientTypes.OutputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Bucket = "S3Bucket"
        case s3Prefix = "S3Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Bucket = self.s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
        if let s3Prefix = self.s3Prefix {
            try encodeContainer.encode(s3Prefix, forKey: .s3Prefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3PrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Prefix)
        s3Prefix = s3PrefixDecoded
    }
}

extension TextractClientTypes {
    /// Sets whether or not your output will go to a user created bucket. Used to set the name of the bucket, and the prefix on the output file. OutputConfig is an optional parameter which lets you adjust where your output will be placed. By default, Amazon Textract will store the results internally and can only be accessed by the Get API operations. With OutputConfig enabled, you can set the name of the bucket the output will be sent to the file prefix of the results where you can download your results. Additionally, you can set the KMSKeyID parameter to a customer master key (CMK) to encrypt your output. Without this parameter set Amazon Textract will encrypt server-side using the AWS managed CMK for Amazon S3. Decryption of Customer Content is necessary for processing of the documents by Amazon Textract. If your account is opted out under an AI services opt out policy then all unencrypted Customer Content is immediately and permanently deleted after the Customer Content has been processed by the service. No copy of of the output is retained by Amazon Textract. For information about how to opt out, see [ Managing AI services opt-out policy. ](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html) For more information on data privacy, see the [Data Privacy FAQ](https://aws.amazon.com/compliance/data-privacy-faq/).
    public struct OutputConfig: Swift.Equatable {
        /// The name of the bucket your output will go to.
        /// This member is required.
        public var s3Bucket: Swift.String?
        /// The prefix of the object key that the output will be saved to. When not enabled, the prefix will be “textract_output".
        public var s3Prefix: Swift.String?

        public init (
            s3Bucket: Swift.String? = nil,
            s3Prefix: Swift.String? = nil
        )
        {
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }
    }

}

extension TextractClientTypes.PageClassification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageNumber = "PageNumber"
        case pageType = "PageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageNumber = pageNumber {
            var pageNumberContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pageNumber)
            for prediction0 in pageNumber {
                try pageNumberContainer.encode(prediction0)
            }
        }
        if let pageType = pageType {
            var pageTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pageType)
            for prediction0 in pageType {
                try pageTypeContainer.encode(prediction0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTypeContainer = try containerValues.decodeIfPresent([TextractClientTypes.Prediction?].self, forKey: .pageType)
        var pageTypeDecoded0:[TextractClientTypes.Prediction]? = nil
        if let pageTypeContainer = pageTypeContainer {
            pageTypeDecoded0 = [TextractClientTypes.Prediction]()
            for structure0 in pageTypeContainer {
                if let structure0 = structure0 {
                    pageTypeDecoded0?.append(structure0)
                }
            }
        }
        pageType = pageTypeDecoded0
        let pageNumberContainer = try containerValues.decodeIfPresent([TextractClientTypes.Prediction?].self, forKey: .pageNumber)
        var pageNumberDecoded0:[TextractClientTypes.Prediction]? = nil
        if let pageNumberContainer = pageNumberContainer {
            pageNumberDecoded0 = [TextractClientTypes.Prediction]()
            for structure0 in pageNumberContainer {
                if let structure0 = structure0 {
                    pageNumberDecoded0?.append(structure0)
                }
            }
        }
        pageNumber = pageNumberDecoded0
    }
}

extension TextractClientTypes {
    /// The class assigned to a Page object detected in an input document. Contains information regarding the predicted type/class of a document's page and the page number that the Page object was detected on.
    public struct PageClassification: Swift.Equatable {
        /// The page number the value was detected on, relative to Amazon Textract's starting position.
        /// This member is required.
        public var pageNumber: [TextractClientTypes.Prediction]?
        /// The class, or document type, assigned to a detected Page object. The class, or document type, assigned to a detected Page object.
        /// This member is required.
        public var pageType: [TextractClientTypes.Prediction]?

        public init (
            pageNumber: [TextractClientTypes.Prediction]? = nil,
            pageType: [TextractClientTypes.Prediction]? = nil
        )
        {
            self.pageNumber = pageNumber
            self.pageType = pageType
        }
    }

}

extension TextractClientTypes.Point: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case x = "X"
        case y = "Y"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if x != 0.0 {
            try encodeContainer.encode(x, forKey: .x)
        }
        if y != 0.0 {
            try encodeContainer.encode(y, forKey: .y)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let xDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .x) ?? 0.0
        x = xDecoded
        let yDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .y) ?? 0.0
        y = yDecoded
    }
}

extension TextractClientTypes {
    /// The X and Y coordinates of a point on a document page. The X and Y values that are returned are ratios of the overall document page size. For example, if the input document is 700 x 200 and the operation returns X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on the document page. An array of Point objects, Polygon, is returned by [DetectDocumentText]. Polygon represents a fine-grained polygon around detected text. For more information, see Geometry in the Amazon Textract Developer Guide.
    public struct Point: Swift.Equatable {
        /// The value of the X coordinate for a point on a Polygon.
        public var x: Swift.Float
        /// The value of the Y coordinate for a point on a Polygon.
        public var y: Swift.Float

        public init (
            x: Swift.Float = 0.0,
            y: Swift.Float = 0.0
        )
        {
            self.x = x
            self.y = y
        }
    }

}

extension TextractClientTypes.Prediction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension TextractClientTypes {
    /// Contains information regarding predicted values returned by Amazon Textract operations, including the predicted value and the confidence in the predicted value.
    public struct Prediction: Swift.Equatable {
        /// Amazon Textract's confidence in its predicted value.
        public var confidence: Swift.Float?
        /// The predicted value of a detected object.
        public var value: Swift.String?

        public init (
            confidence: Swift.Float? = nil,
            value: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension ProvisionedThroughputExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ProvisionedThroughputExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The number of requests exceeded your throughput limit. If you want to increase this limit, contact Amazon Textract.
public struct ProvisionedThroughputExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct ProvisionedThroughputExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
}

extension ProvisionedThroughputExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension TextractClientTypes.QueriesConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queries = "Queries"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queries = queries {
            var queriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queries)
            for query0 in queries {
                try queriesContainer.encode(query0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queriesContainer = try containerValues.decodeIfPresent([TextractClientTypes.Query?].self, forKey: .queries)
        var queriesDecoded0:[TextractClientTypes.Query]? = nil
        if let queriesContainer = queriesContainer {
            queriesDecoded0 = [TextractClientTypes.Query]()
            for structure0 in queriesContainer {
                if let structure0 = structure0 {
                    queriesDecoded0?.append(structure0)
                }
            }
        }
        queries = queriesDecoded0
    }
}

extension TextractClientTypes {
    ///
    public struct QueriesConfig: Swift.Equatable {
        ///
        /// This member is required.
        public var queries: [TextractClientTypes.Query]?

        public init (
            queries: [TextractClientTypes.Query]? = nil
        )
        {
            self.queries = queries
        }
    }

}

extension TextractClientTypes.Query: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
        case pages = "Pages"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alias = self.alias {
            try encodeContainer.encode(alias, forKey: .alias)
        }
        if let pages = pages {
            var pagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pages)
            for querypage0 in pages {
                try pagesContainer.encode(querypage0)
            }
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let aliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alias)
        alias = aliasDecoded
        let pagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .pages)
        var pagesDecoded0:[Swift.String]? = nil
        if let pagesContainer = pagesContainer {
            pagesDecoded0 = [Swift.String]()
            for string0 in pagesContainer {
                if let string0 = string0 {
                    pagesDecoded0?.append(string0)
                }
            }
        }
        pages = pagesDecoded0
    }
}

extension TextractClientTypes {
    /// Each query contains the question you want to ask in the Text and the alias you want to associate.
    public struct Query: Swift.Equatable {
        /// Alias attached to the query, for ease of location.
        public var alias: Swift.String?
        /// Pages is a parameter that the user inputs to specify which pages to apply a query to. The following is a list of rules for using this parameter.
        ///
        /// * If a page is not specified, it is set to ["1"] by default.
        ///
        /// * The following characters are allowed in the parameter's string: 0 1 2 3 4 5 6 7 8 9 - *. No whitespace is allowed.
        ///
        /// * When using * to indicate all pages, it must be the only element in the list.
        ///
        /// * You can use page intervals, such as [“1-3”, “1-1”, “4-*”]. Where * indicates last page of document.
        ///
        /// * Specified pages must be greater than 0 and less than or equal to the number of pages in the document.
        public var pages: [Swift.String]?
        /// Question that Amazon Textract will apply to the document. An example would be "What is the customer's SSN?"
        /// This member is required.
        public var text: Swift.String?

        public init (
            alias: Swift.String? = nil,
            pages: [Swift.String]? = nil,
            text: Swift.String? = nil
        )
        {
            self.alias = alias
            self.pages = pages
            self.text = text
        }
    }

}

extension TextractClientTypes.Relationship: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ids = "Ids"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ids = ids {
            var idsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ids)
            for nonemptystring0 in ids {
                try idsContainer.encode(nonemptystring0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(TextractClientTypes.RelationshipType.self, forKey: .type)
        type = typeDecoded
        let idsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ids)
        var idsDecoded0:[Swift.String]? = nil
        if let idsContainer = idsContainer {
            idsDecoded0 = [Swift.String]()
            for string0 in idsContainer {
                if let string0 = string0 {
                    idsDecoded0?.append(string0)
                }
            }
        }
        ids = idsDecoded0
    }
}

extension TextractClientTypes {
    /// Information about how blocks are related to each other. A Block object contains 0 or more Relation objects in a list, Relationships. For more information, see [Block]. The Type element provides the type of the relationship for all blocks in the IDs array.
    public struct Relationship: Swift.Equatable {
        /// An array of IDs for related blocks. You can get the type of the relationship from the Type element.
        public var ids: [Swift.String]?
        /// The type of relationship that the blocks in the IDs array have with the current block. The relationship can be VALUE or CHILD. A relationship of type VALUE is a list that contains the ID of the VALUE block that's associated with the KEY of a key-value pair. A relationship of type CHILD is a list of IDs that identify WORD blocks in the case of lines Cell blocks in the case of Tables, and WORD blocks in the case of Selection Elements.
        public var type: TextractClientTypes.RelationshipType?

        public init (
            ids: [Swift.String]? = nil,
            type: TextractClientTypes.RelationshipType? = nil
        )
        {
            self.ids = ids
            self.type = type
        }
    }

}

extension TextractClientTypes {
    public enum RelationshipType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case answer
        case child
        case complexFeatures
        case mergedCell
        case title
        case value
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationshipType] {
            return [
                .answer,
                .child,
                .complexFeatures,
                .mergedCell,
                .title,
                .value,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .answer: return "ANSWER"
            case .child: return "CHILD"
            case .complexFeatures: return "COMPLEX_FEATURES"
            case .mergedCell: return "MERGED_CELL"
            case .title: return "TITLE"
            case .value: return "VALUE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RelationshipType(rawValue: rawValue) ?? RelationshipType.sdkUnknown(rawValue)
        }
    }
}

extension TextractClientTypes.S3Object: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case name = "Name"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension TextractClientTypes {
    /// The S3 bucket name and file name that identifies the document. The AWS Region for the S3 bucket that contains the document must match the Region that you use for Amazon Textract operations. For Amazon Textract to process a file in an S3 bucket, the user must have permission to access the S3 bucket and file.
    public struct S3Object: Swift.Equatable {
        /// The name of the S3 bucket. Note that the # character is not valid in the file name.
        public var bucket: Swift.String?
        /// The file name of the input document. Synchronous operations can use image files that are in JPEG or PNG format. Asynchronous operations also support PDF and TIFF format files.
        public var name: Swift.String?
        /// If the bucket has versioning enabled, you can specify the object version.
        public var version: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.name = name
            self.version = version
        }
    }

}

extension TextractClientTypes {
    public enum SelectionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case notSelected
        case selected
        case sdkUnknown(Swift.String)

        public static var allCases: [SelectionStatus] {
            return [
                .notSelected,
                .selected,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .notSelected: return "NOT_SELECTED"
            case .selected: return "SELECTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SelectionStatus(rawValue: rawValue) ?? SelectionStatus.sdkUnknown(rawValue)
        }
    }
}

extension TextractClientTypes.SignatureDetection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case geometry = "Geometry"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let geometry = self.geometry {
            try encodeContainer.encode(geometry, forKey: .geometry)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let geometryDecoded = try containerValues.decodeIfPresent(TextractClientTypes.Geometry.self, forKey: .geometry)
        geometry = geometryDecoded
    }
}

extension TextractClientTypes {
    /// Information regarding a detected signature on a page.
    public struct SignatureDetection: Swift.Equatable {
        /// The confidence, from 0 to 100, in the predicted values for a detected signature.
        public var confidence: Swift.Float?
        /// Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.
        public var geometry: TextractClientTypes.Geometry?

        public init (
            confidence: Swift.Float? = nil,
            geometry: TextractClientTypes.Geometry? = nil
        )
        {
            self.confidence = confidence
            self.geometry = geometry
        }
    }

}

extension TextractClientTypes.SplitDocument: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case index = "Index"
        case pages = "Pages"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let index = self.index {
            try encodeContainer.encode(index, forKey: .index)
        }
        if let pages = pages {
            var pagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pages)
            for uinteger0 in pages {
                try pagesContainer.encode(uinteger0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .index)
        index = indexDecoded
        let pagesContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .pages)
        var pagesDecoded0:[Swift.Int]? = nil
        if let pagesContainer = pagesContainer {
            pagesDecoded0 = [Swift.Int]()
            for integer0 in pagesContainer {
                if let integer0 = integer0 {
                    pagesDecoded0?.append(integer0)
                }
            }
        }
        pages = pagesDecoded0
    }
}

extension TextractClientTypes {
    /// Contains information about the pages of a document, defined by logical boundary.
    public struct SplitDocument: Swift.Equatable {
        /// The index for a given document in a DocumentGroup of a specific Type.
        public var index: Swift.Int?
        /// An array of page numbers for a for a given document, ordered by logical boundary.
        public var pages: [Swift.Int]?

        public init (
            index: Swift.Int? = nil,
            pages: [Swift.Int]? = nil
        )
        {
            self.index = index
            self.pages = pages
        }
    }

}

extension StartDocumentAnalysisInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case documentLocation = "DocumentLocation"
        case featureTypes = "FeatureTypes"
        case jobTag = "JobTag"
        case kmsKeyId = "KMSKeyId"
        case notificationChannel = "NotificationChannel"
        case outputConfig = "OutputConfig"
        case queriesConfig = "QueriesConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let documentLocation = self.documentLocation {
            try encodeContainer.encode(documentLocation, forKey: .documentLocation)
        }
        if let featureTypes = featureTypes {
            var featureTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .featureTypes)
            for featuretype0 in featureTypes {
                try featureTypesContainer.encode(featuretype0.rawValue)
            }
        }
        if let jobTag = self.jobTag {
            try encodeContainer.encode(jobTag, forKey: .jobTag)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let notificationChannel = self.notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let outputConfig = self.outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let queriesConfig = self.queriesConfig {
            try encodeContainer.encode(queriesConfig, forKey: .queriesConfig)
        }
    }
}

extension StartDocumentAnalysisInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartDocumentAnalysisInput: Swift.Equatable {
    /// The idempotent token that you use to identify the start request. If you use the same token with multiple StartDocumentAnalysis requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidentally started more than once. For more information, see [Calling Amazon Textract Asynchronous Operations](https://docs.aws.amazon.com/textract/latest/dg/api-async.html).
    public var clientRequestToken: Swift.String?
    /// The location of the document to be processed.
    /// This member is required.
    public var documentLocation: TextractClientTypes.DocumentLocation?
    /// A list of the types of analysis to perform. Add TABLES to the list to return information about the tables that are detected in the input document. Add FORMS to return detected form data. To perform both types of analysis, add TABLES and FORMS to FeatureTypes. All lines and words detected in the document are included in the response (including text that isn't related to the value of FeatureTypes).
    /// This member is required.
    public var featureTypes: [TextractClientTypes.FeatureType]?
    /// An identifier that you specify that's included in the completion notification published to the Amazon SNS topic. For example, you can use JobTag to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).
    public var jobTag: Swift.String?
    /// The KMS key used to encrypt the inference results. This can be in either Key ID or Key Alias format. When a KMS key is provided, the KMS key will be used for server-side encryption of the objects in the customer bucket. When this parameter is not enabled, the result will be encrypted server side,using SSE-S3.
    public var kmsKeyId: Swift.String?
    /// The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the operation to.
    public var notificationChannel: TextractClientTypes.NotificationChannel?
    /// Sets if the output will go to a customer defined bucket. By default, Amazon Textract will save the results internally to be accessed by the GetDocumentAnalysis operation.
    public var outputConfig: TextractClientTypes.OutputConfig?
    ///
    public var queriesConfig: TextractClientTypes.QueriesConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        documentLocation: TextractClientTypes.DocumentLocation? = nil,
        featureTypes: [TextractClientTypes.FeatureType]? = nil,
        jobTag: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        notificationChannel: TextractClientTypes.NotificationChannel? = nil,
        outputConfig: TextractClientTypes.OutputConfig? = nil,
        queriesConfig: TextractClientTypes.QueriesConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.documentLocation = documentLocation
        self.featureTypes = featureTypes
        self.jobTag = jobTag
        self.kmsKeyId = kmsKeyId
        self.notificationChannel = notificationChannel
        self.outputConfig = outputConfig
        self.queriesConfig = queriesConfig
    }
}

struct StartDocumentAnalysisInputBody: Swift.Equatable {
    let documentLocation: TextractClientTypes.DocumentLocation?
    let featureTypes: [TextractClientTypes.FeatureType]?
    let clientRequestToken: Swift.String?
    let jobTag: Swift.String?
    let notificationChannel: TextractClientTypes.NotificationChannel?
    let outputConfig: TextractClientTypes.OutputConfig?
    let kmsKeyId: Swift.String?
    let queriesConfig: TextractClientTypes.QueriesConfig?
}

extension StartDocumentAnalysisInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case documentLocation = "DocumentLocation"
        case featureTypes = "FeatureTypes"
        case jobTag = "JobTag"
        case kmsKeyId = "KMSKeyId"
        case notificationChannel = "NotificationChannel"
        case outputConfig = "OutputConfig"
        case queriesConfig = "QueriesConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentLocationDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentLocation.self, forKey: .documentLocation)
        documentLocation = documentLocationDecoded
        let featureTypesContainer = try containerValues.decodeIfPresent([TextractClientTypes.FeatureType?].self, forKey: .featureTypes)
        var featureTypesDecoded0:[TextractClientTypes.FeatureType]? = nil
        if let featureTypesContainer = featureTypesContainer {
            featureTypesDecoded0 = [TextractClientTypes.FeatureType]()
            for enum0 in featureTypesContainer {
                if let enum0 = enum0 {
                    featureTypesDecoded0?.append(enum0)
                }
            }
        }
        featureTypes = featureTypesDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let jobTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTag)
        jobTag = jobTagDecoded
        let notificationChannelDecoded = try containerValues.decodeIfPresent(TextractClientTypes.NotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(TextractClientTypes.OutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let queriesConfigDecoded = try containerValues.decodeIfPresent(TextractClientTypes.QueriesConfig.self, forKey: .queriesConfig)
        queriesConfig = queriesConfigDecoded
    }
}

extension StartDocumentAnalysisOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartDocumentAnalysisOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadDocumentException" : self = .badDocumentException(try BadDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DocumentTooLargeException" : self = .documentTooLargeException(try DocumentTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyException" : self = .invalidKMSKeyException(try InvalidKMSKeyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedDocumentException" : self = .unsupportedDocumentException(try UnsupportedDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartDocumentAnalysisOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case badDocumentException(BadDocumentException)
    case documentTooLargeException(DocumentTooLargeException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case invalidKMSKeyException(InvalidKMSKeyException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unsupportedDocumentException(UnsupportedDocumentException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartDocumentAnalysisOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartDocumentAnalysisOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

public struct StartDocumentAnalysisOutputResponse: Swift.Equatable {
    /// The identifier for the document text detection job. Use JobId to identify the job in a subsequent call to GetDocumentAnalysis. A JobId value is only valid for 7 days.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StartDocumentAnalysisOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StartDocumentAnalysisOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StartDocumentTextDetectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case documentLocation = "DocumentLocation"
        case jobTag = "JobTag"
        case kmsKeyId = "KMSKeyId"
        case notificationChannel = "NotificationChannel"
        case outputConfig = "OutputConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let documentLocation = self.documentLocation {
            try encodeContainer.encode(documentLocation, forKey: .documentLocation)
        }
        if let jobTag = self.jobTag {
            try encodeContainer.encode(jobTag, forKey: .jobTag)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let notificationChannel = self.notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let outputConfig = self.outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
    }
}

extension StartDocumentTextDetectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartDocumentTextDetectionInput: Swift.Equatable {
    /// The idempotent token that's used to identify the start request. If you use the same token with multiple StartDocumentTextDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidentally started more than once. For more information, see [Calling Amazon Textract Asynchronous Operations](https://docs.aws.amazon.com/textract/latest/dg/api-async.html).
    public var clientRequestToken: Swift.String?
    /// The location of the document to be processed.
    /// This member is required.
    public var documentLocation: TextractClientTypes.DocumentLocation?
    /// An identifier that you specify that's included in the completion notification published to the Amazon SNS topic. For example, you can use JobTag to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).
    public var jobTag: Swift.String?
    /// The KMS key used to encrypt the inference results. This can be in either Key ID or Key Alias format. When a KMS key is provided, the KMS key will be used for server-side encryption of the objects in the customer bucket. When this parameter is not enabled, the result will be encrypted server side,using SSE-S3.
    public var kmsKeyId: Swift.String?
    /// The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the operation to.
    public var notificationChannel: TextractClientTypes.NotificationChannel?
    /// Sets if the output will go to a customer defined bucket. By default Amazon Textract will save the results internally to be accessed with the GetDocumentTextDetection operation.
    public var outputConfig: TextractClientTypes.OutputConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        documentLocation: TextractClientTypes.DocumentLocation? = nil,
        jobTag: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        notificationChannel: TextractClientTypes.NotificationChannel? = nil,
        outputConfig: TextractClientTypes.OutputConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.documentLocation = documentLocation
        self.jobTag = jobTag
        self.kmsKeyId = kmsKeyId
        self.notificationChannel = notificationChannel
        self.outputConfig = outputConfig
    }
}

struct StartDocumentTextDetectionInputBody: Swift.Equatable {
    let documentLocation: TextractClientTypes.DocumentLocation?
    let clientRequestToken: Swift.String?
    let jobTag: Swift.String?
    let notificationChannel: TextractClientTypes.NotificationChannel?
    let outputConfig: TextractClientTypes.OutputConfig?
    let kmsKeyId: Swift.String?
}

extension StartDocumentTextDetectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case documentLocation = "DocumentLocation"
        case jobTag = "JobTag"
        case kmsKeyId = "KMSKeyId"
        case notificationChannel = "NotificationChannel"
        case outputConfig = "OutputConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentLocationDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentLocation.self, forKey: .documentLocation)
        documentLocation = documentLocationDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let jobTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTag)
        jobTag = jobTagDecoded
        let notificationChannelDecoded = try containerValues.decodeIfPresent(TextractClientTypes.NotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(TextractClientTypes.OutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension StartDocumentTextDetectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartDocumentTextDetectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadDocumentException" : self = .badDocumentException(try BadDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DocumentTooLargeException" : self = .documentTooLargeException(try DocumentTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyException" : self = .invalidKMSKeyException(try InvalidKMSKeyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedDocumentException" : self = .unsupportedDocumentException(try UnsupportedDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartDocumentTextDetectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case badDocumentException(BadDocumentException)
    case documentTooLargeException(DocumentTooLargeException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case invalidKMSKeyException(InvalidKMSKeyException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unsupportedDocumentException(UnsupportedDocumentException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartDocumentTextDetectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartDocumentTextDetectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

public struct StartDocumentTextDetectionOutputResponse: Swift.Equatable {
    /// The identifier of the text detection job for the document. Use JobId to identify the job in a subsequent call to GetDocumentTextDetection. A JobId value is only valid for 7 days.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StartDocumentTextDetectionOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StartDocumentTextDetectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StartExpenseAnalysisInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case documentLocation = "DocumentLocation"
        case jobTag = "JobTag"
        case kmsKeyId = "KMSKeyId"
        case notificationChannel = "NotificationChannel"
        case outputConfig = "OutputConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let documentLocation = self.documentLocation {
            try encodeContainer.encode(documentLocation, forKey: .documentLocation)
        }
        if let jobTag = self.jobTag {
            try encodeContainer.encode(jobTag, forKey: .jobTag)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let notificationChannel = self.notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let outputConfig = self.outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
    }
}

extension StartExpenseAnalysisInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartExpenseAnalysisInput: Swift.Equatable {
    /// The idempotent token that's used to identify the start request. If you use the same token with multiple StartDocumentTextDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidentally started more than once. For more information, see [Calling Amazon Textract Asynchronous Operations](https://docs.aws.amazon.com/textract/latest/dg/api-async.html)
    public var clientRequestToken: Swift.String?
    /// The location of the document to be processed.
    /// This member is required.
    public var documentLocation: TextractClientTypes.DocumentLocation?
    /// An identifier you specify that's included in the completion notification published to the Amazon SNS topic. For example, you can use JobTag to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).
    public var jobTag: Swift.String?
    /// The KMS key used to encrypt the inference results. This can be in either Key ID or Key Alias format. When a KMS key is provided, the KMS key will be used for server-side encryption of the objects in the customer bucket. When this parameter is not enabled, the result will be encrypted server side,using SSE-S3.
    public var kmsKeyId: Swift.String?
    /// The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the operation to.
    public var notificationChannel: TextractClientTypes.NotificationChannel?
    /// Sets if the output will go to a customer defined bucket. By default, Amazon Textract will save the results internally to be accessed by the GetExpenseAnalysis operation.
    public var outputConfig: TextractClientTypes.OutputConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        documentLocation: TextractClientTypes.DocumentLocation? = nil,
        jobTag: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        notificationChannel: TextractClientTypes.NotificationChannel? = nil,
        outputConfig: TextractClientTypes.OutputConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.documentLocation = documentLocation
        self.jobTag = jobTag
        self.kmsKeyId = kmsKeyId
        self.notificationChannel = notificationChannel
        self.outputConfig = outputConfig
    }
}

struct StartExpenseAnalysisInputBody: Swift.Equatable {
    let documentLocation: TextractClientTypes.DocumentLocation?
    let clientRequestToken: Swift.String?
    let jobTag: Swift.String?
    let notificationChannel: TextractClientTypes.NotificationChannel?
    let outputConfig: TextractClientTypes.OutputConfig?
    let kmsKeyId: Swift.String?
}

extension StartExpenseAnalysisInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case documentLocation = "DocumentLocation"
        case jobTag = "JobTag"
        case kmsKeyId = "KMSKeyId"
        case notificationChannel = "NotificationChannel"
        case outputConfig = "OutputConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentLocationDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentLocation.self, forKey: .documentLocation)
        documentLocation = documentLocationDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let jobTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTag)
        jobTag = jobTagDecoded
        let notificationChannelDecoded = try containerValues.decodeIfPresent(TextractClientTypes.NotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(TextractClientTypes.OutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension StartExpenseAnalysisOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartExpenseAnalysisOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadDocumentException" : self = .badDocumentException(try BadDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DocumentTooLargeException" : self = .documentTooLargeException(try DocumentTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyException" : self = .invalidKMSKeyException(try InvalidKMSKeyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedDocumentException" : self = .unsupportedDocumentException(try UnsupportedDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartExpenseAnalysisOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case badDocumentException(BadDocumentException)
    case documentTooLargeException(DocumentTooLargeException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case invalidKMSKeyException(InvalidKMSKeyException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unsupportedDocumentException(UnsupportedDocumentException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartExpenseAnalysisOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartExpenseAnalysisOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

public struct StartExpenseAnalysisOutputResponse: Swift.Equatable {
    /// A unique identifier for the text detection job. The JobId is returned from StartExpenseAnalysis. A JobId value is only valid for 7 days.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StartExpenseAnalysisOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StartExpenseAnalysisOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StartLendingAnalysisInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case documentLocation = "DocumentLocation"
        case jobTag = "JobTag"
        case kmsKeyId = "KMSKeyId"
        case notificationChannel = "NotificationChannel"
        case outputConfig = "OutputConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let documentLocation = self.documentLocation {
            try encodeContainer.encode(documentLocation, forKey: .documentLocation)
        }
        if let jobTag = self.jobTag {
            try encodeContainer.encode(jobTag, forKey: .jobTag)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let notificationChannel = self.notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let outputConfig = self.outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
    }
}

extension StartLendingAnalysisInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartLendingAnalysisInput: Swift.Equatable {
    /// The idempotent token that you use to identify the start request. If you use the same token with multiple StartLendingAnalysis requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidentally started more than once. For more information, see [Calling Amazon Textract Asynchronous Operations](https://docs.aws.amazon.com/textract/latest/dg/api-sync.html).
    public var clientRequestToken: Swift.String?
    /// The Amazon S3 bucket that contains the document to be processed. It's used by asynchronous operations. The input document can be an image file in JPEG or PNG format. It can also be a file in PDF format.
    /// This member is required.
    public var documentLocation: TextractClientTypes.DocumentLocation?
    /// An identifier that you specify to be included in the completion notification published to the Amazon SNS topic. For example, you can use JobTag to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).
    public var jobTag: Swift.String?
    /// The KMS key used to encrypt the inference results. This can be in either Key ID or Key Alias format. When a KMS key is provided, the KMS key will be used for server-side encryption of the objects in the customer bucket. When this parameter is not enabled, the result will be encrypted server side, using SSE-S3.
    public var kmsKeyId: Swift.String?
    /// The Amazon Simple Notification Service (Amazon SNS) topic to which Amazon Textract publishes the completion status of an asynchronous document operation.
    public var notificationChannel: TextractClientTypes.NotificationChannel?
    /// Sets whether or not your output will go to a user created bucket. Used to set the name of the bucket, and the prefix on the output file. OutputConfig is an optional parameter which lets you adjust where your output will be placed. By default, Amazon Textract will store the results internally and can only be accessed by the Get API operations. With OutputConfig enabled, you can set the name of the bucket the output will be sent to the file prefix of the results where you can download your results. Additionally, you can set the KMSKeyID parameter to a customer master key (CMK) to encrypt your output. Without this parameter set Amazon Textract will encrypt server-side using the AWS managed CMK for Amazon S3. Decryption of Customer Content is necessary for processing of the documents by Amazon Textract. If your account is opted out under an AI services opt out policy then all unencrypted Customer Content is immediately and permanently deleted after the Customer Content has been processed by the service. No copy of of the output is retained by Amazon Textract. For information about how to opt out, see [ Managing AI services opt-out policy. ](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html) For more information on data privacy, see the [Data Privacy FAQ](https://aws.amazon.com/compliance/data-privacy-faq/).
    public var outputConfig: TextractClientTypes.OutputConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        documentLocation: TextractClientTypes.DocumentLocation? = nil,
        jobTag: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        notificationChannel: TextractClientTypes.NotificationChannel? = nil,
        outputConfig: TextractClientTypes.OutputConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.documentLocation = documentLocation
        self.jobTag = jobTag
        self.kmsKeyId = kmsKeyId
        self.notificationChannel = notificationChannel
        self.outputConfig = outputConfig
    }
}

struct StartLendingAnalysisInputBody: Swift.Equatable {
    let documentLocation: TextractClientTypes.DocumentLocation?
    let clientRequestToken: Swift.String?
    let jobTag: Swift.String?
    let notificationChannel: TextractClientTypes.NotificationChannel?
    let outputConfig: TextractClientTypes.OutputConfig?
    let kmsKeyId: Swift.String?
}

extension StartLendingAnalysisInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case documentLocation = "DocumentLocation"
        case jobTag = "JobTag"
        case kmsKeyId = "KMSKeyId"
        case notificationChannel = "NotificationChannel"
        case outputConfig = "OutputConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentLocationDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentLocation.self, forKey: .documentLocation)
        documentLocation = documentLocationDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let jobTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTag)
        jobTag = jobTagDecoded
        let notificationChannelDecoded = try containerValues.decodeIfPresent(TextractClientTypes.NotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(TextractClientTypes.OutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension StartLendingAnalysisOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartLendingAnalysisOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadDocumentException" : self = .badDocumentException(try BadDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DocumentTooLargeException" : self = .documentTooLargeException(try DocumentTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyException" : self = .invalidKMSKeyException(try InvalidKMSKeyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedDocumentException" : self = .unsupportedDocumentException(try UnsupportedDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartLendingAnalysisOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case badDocumentException(BadDocumentException)
    case documentTooLargeException(DocumentTooLargeException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case invalidKMSKeyException(InvalidKMSKeyException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unsupportedDocumentException(UnsupportedDocumentException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartLendingAnalysisOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartLendingAnalysisOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

public struct StartLendingAnalysisOutputResponse: Swift.Equatable {
    /// A unique identifier for the lending or text-detection job. The JobId is returned from StartLendingAnalysis. A JobId value is only valid for 7 days.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StartLendingAnalysisOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StartLendingAnalysisOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension TextractClientTypes {
    public enum TextType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case handwriting
        case printed
        case sdkUnknown(Swift.String)

        public static var allCases: [TextType] {
            return [
                .handwriting,
                .printed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .handwriting: return "HANDWRITING"
            case .printed: return "PRINTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TextType(rawValue: rawValue) ?? TextType.sdkUnknown(rawValue)
        }
    }
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Amazon Textract is temporarily unable to process the request. Try your call again.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension TextractClientTypes.UndetectedSignature: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case page = "Page"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let page = self.page {
            try encodeContainer.encode(page, forKey: .page)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .page)
        page = pageDecoded
    }
}

extension TextractClientTypes {
    /// A structure containing information about an undetected signature on a page where it was expected but not found.
    public struct UndetectedSignature: Swift.Equatable {
        /// The page where a signature was expected but not found.
        public var page: Swift.Int?

        public init (
            page: Swift.Int? = nil
        )
        {
            self.page = page
        }
    }

}

extension UnsupportedDocumentException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnsupportedDocumentExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The format of the input document isn't supported. Documents for operations can be in PNG, JPEG, PDF, or TIFF format.
public struct UnsupportedDocumentException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct UnsupportedDocumentExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
}

extension UnsupportedDocumentExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension TextractClientTypes {
    public enum ValueType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case date
        case sdkUnknown(Swift.String)

        public static var allCases: [ValueType] {
            return [
                .date,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .date: return "DATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ValueType(rawValue: rawValue) ?? ValueType.sdkUnknown(rawValue)
        }
    }
}

extension TextractClientTypes.Warning: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case pages = "Pages"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let pages = pages {
            var pagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pages)
            for uinteger0 in pages {
                try pagesContainer.encode(uinteger0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let pagesContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .pages)
        var pagesDecoded0:[Swift.Int]? = nil
        if let pagesContainer = pagesContainer {
            pagesDecoded0 = [Swift.Int]()
            for integer0 in pagesContainer {
                if let integer0 = integer0 {
                    pagesDecoded0?.append(integer0)
                }
            }
        }
        pages = pagesDecoded0
    }
}

extension TextractClientTypes {
    /// A warning about an issue that occurred during asynchronous text analysis ([StartDocumentAnalysis]) or asynchronous document text detection ([StartDocumentTextDetection]).
    public struct Warning: Swift.Equatable {
        /// The error code for the warning.
        public var errorCode: Swift.String?
        /// A list of the pages that the warning applies to.
        public var pages: [Swift.Int]?

        public init (
            errorCode: Swift.String? = nil,
            pages: [Swift.Int]? = nil
        )
        {
            self.errorCode = errorCode
            self.pages = pages
        }
    }

}
