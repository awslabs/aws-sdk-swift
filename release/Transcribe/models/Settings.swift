// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Provides optional settings for the <code>StartTranscriptionJob</code>
///             operation.</p>
public struct Settings: Equatable {
    /// <p>Instructs Amazon Transcribe to process each audio channel separately and then merge the
    ///             transcription output of each channel into a single transcription. </p>
    ///         <p>Amazon Transcribe also produces a transcription of each item detected on an audio channel,
    ///             including the start time and end time of the item and alternative transcriptions of the
    ///             item including the confidence that Amazon Transcribe has in the transcription.</p>
    ///         <p>You can't set both <code>ShowSpeakerLabels</code> and
    ///                 <code>ChannelIdentification</code> in the same request. If you set both, your
    ///             request returns a <code>BadRequestException</code>.</p>
    public let channelIdentification: Bool?
    /// <p>The number of alternative transcriptions that the service should return. If you
    ///             specify the <code>MaxAlternatives</code> field, you must set the
    ///                 <code>ShowAlternatives</code> field to true.</p>
    public let maxAlternatives: Int?
    /// <p>The maximum number of speakers to identify in the input audio. If there are more
    ///             speakers in the audio than this number, multiple speakers are identified as a single
    ///             speaker. If you specify the <code>MaxSpeakerLabels</code> field, you must set the
    ///                 <code>ShowSpeakerLabels</code> field to true.</p>
    public let maxSpeakerLabels: Int?
    /// <p>Determines whether the transcription contains alternative transcriptions. If you set
    ///             the <code>ShowAlternatives</code> field to true, you must also set the maximum number of
    ///             alternatives to return in the <code>MaxAlternatives</code> field.</p>
    public let showAlternatives: Bool?
    /// <p>Determines whether the transcription job uses speaker recognition to identify
    ///             different speakers in the input audio. Speaker recognition labels individual speakers in
    ///             the audio file. If you set the <code>ShowSpeakerLabels</code> field to true, you must
    ///             also set the maximum number of speaker labels <code>MaxSpeakerLabels</code>
    ///             field.</p>
    ///         <p>You can't set both <code>ShowSpeakerLabels</code> and
    ///                 <code>ChannelIdentification</code> in the same request. If you set both, your
    ///             request returns a <code>BadRequestException</code>.</p>
    public let showSpeakerLabels: Bool?
    /// <p>Set to <code>mask</code> to remove filtered text from the transcript and replace it
    ///             with three asterisks ("***") as placeholder text. Set to <code>remove</code> to remove
    ///             filtered text from the transcript without using placeholder text. Set to
    ///                 <code>tag</code> to mark the word in the transcription output that matches the
    ///             vocabulary filter. When you set the filter method to <code>tag</code>, the words
    ///             matching your vocabulary filter are not masked or removed.</p>
    public let vocabularyFilterMethod: VocabularyFilterMethod?
    /// <p>The name of the vocabulary filter to use when transcribing the audio. The filter that
    ///             you specify must have the same language code as the transcription job.</p>
    public let vocabularyFilterName: String?
    /// <p>The name of a vocabulary to use when processing the transcription job.</p>
    public let vocabularyName: String?

    public init (
        channelIdentification: Bool? = nil,
        maxAlternatives: Int? = nil,
        maxSpeakerLabels: Int? = nil,
        showAlternatives: Bool? = nil,
        showSpeakerLabels: Bool? = nil,
        vocabularyFilterMethod: VocabularyFilterMethod? = nil,
        vocabularyFilterName: String? = nil,
        vocabularyName: String? = nil
    )
    {
        self.channelIdentification = channelIdentification
        self.maxAlternatives = maxAlternatives
        self.maxSpeakerLabels = maxSpeakerLabels
        self.showAlternatives = showAlternatives
        self.showSpeakerLabels = showSpeakerLabels
        self.vocabularyFilterMethod = vocabularyFilterMethod
        self.vocabularyFilterName = vocabularyFilterName
        self.vocabularyName = vocabularyName
    }
}
