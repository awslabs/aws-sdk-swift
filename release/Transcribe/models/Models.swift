// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension BadRequestException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BadRequestException(message: \(String(describing: message)))"}
}

extension BadRequestException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BadRequestExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Your request didn't pass one or more validation tests. For example, if the entity that
///             you're trying to delete doesn't exist or if it is in a non-terminal state (for example,
///             it's "in progress"). See the exception <code>Message</code> field for more
///             information.</p>
public struct BadRequestException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct BadRequestExceptionBody: Equatable {
    public let message: String?
}

extension BadRequestExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum BaseModelName {
    case narrowBand
    case wideBand
    case sdkUnknown(String)
}

extension BaseModelName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BaseModelName] {
        return [
            .narrowBand,
            .wideBand,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .narrowBand: return "NarrowBand"
        case .wideBand: return "WideBand"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BaseModelName(rawValue: rawValue) ?? BaseModelName.sdkUnknown(rawValue)
    }
}

public enum CLMLanguageCode {
    case enAu
    case enGb
    case enUs
    case esUs
    case hiIn
    case sdkUnknown(String)
}

extension CLMLanguageCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CLMLanguageCode] {
        return [
            .enAu,
            .enGb,
            .enUs,
            .esUs,
            .hiIn,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .enAu: return "en-AU"
        case .enGb: return "en-GB"
        case .enUs: return "en-US"
        case .esUs: return "es-US"
        case .hiIn: return "hi-IN"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CLMLanguageCode(rawValue: rawValue) ?? CLMLanguageCode.sdkUnknown(rawValue)
    }
}

extension ConflictException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ConflictException(message: \(String(describing: message)))"}
}

extension ConflictException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>There is already a resource with that name.</p>
public struct ConflictException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Equatable {
    public let message: String?
}

extension ConflictExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ContentRedaction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case redactionOutput = "RedactionOutput"
        case redactionType = "RedactionType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let redactionOutput = redactionOutput {
            try encodeContainer.encode(redactionOutput.rawValue, forKey: .redactionOutput)
        }
        if let redactionType = redactionType {
            try encodeContainer.encode(redactionType.rawValue, forKey: .redactionType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let redactionTypeDecoded = try containerValues.decodeIfPresent(RedactionType.self, forKey: .redactionType)
        redactionType = redactionTypeDecoded
        let redactionOutputDecoded = try containerValues.decodeIfPresent(RedactionOutput.self, forKey: .redactionOutput)
        redactionOutput = redactionOutputDecoded
    }
}

extension ContentRedaction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ContentRedaction(redactionOutput: \(String(describing: redactionOutput)), redactionType: \(String(describing: redactionType)))"}
}

/// <p>Settings for content redaction within a transcription job.</p>
public struct ContentRedaction: Equatable {
    /// <p>The output transcript file stored in either the default S3 bucket or in a bucket you
    ///             specify.</p>
    ///         <p>When you choose <code>redacted</code> Amazon Transcribe outputs only the redacted
    ///             transcript.</p>
    ///         <p>When you choose <code>redacted_and_unredacted</code> Amazon Transcribe outputs both the redacted
    ///             and unredacted transcripts.</p>
    public let redactionOutput: RedactionOutput?
    /// <p>Request parameter that defines the entities to be redacted. The only accepted value is
    ///                 <code>PII</code>.</p>
    public let redactionType: RedactionType?

    public init (
        redactionOutput: RedactionOutput? = nil,
        redactionType: RedactionType? = nil
    )
    {
        self.redactionOutput = redactionOutput
        self.redactionType = redactionType
    }
}

public struct CreateLanguageModelInputBodyMiddleware: Middleware {
    public let id: String = "CreateLanguageModelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLanguageModelInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLanguageModelInput>
    public typealias MOutput = OperationOutput<CreateLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLanguageModelOutputError>
}

extension CreateLanguageModelInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateLanguageModelInput(baseModelName: \(String(describing: baseModelName)), inputDataConfig: \(String(describing: inputDataConfig)), languageCode: \(String(describing: languageCode)), modelName: \(String(describing: modelName)))"}
}

extension CreateLanguageModelInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case baseModelName = "BaseModelName"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseModelName = baseModelName {
            try encodeContainer.encode(baseModelName.rawValue, forKey: .baseModelName)
        }
        if let inputDataConfig = inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
    }
}

public struct CreateLanguageModelInputHeadersMiddleware: Middleware {
    public let id: String = "CreateLanguageModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLanguageModelInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLanguageModelInput>
    public typealias MOutput = OperationOutput<CreateLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLanguageModelOutputError>
}

public struct CreateLanguageModelInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateLanguageModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLanguageModelInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLanguageModelInput>
    public typealias MOutput = OperationOutput<CreateLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLanguageModelOutputError>
}

public struct CreateLanguageModelInput: Equatable {
    /// <p>The Amazon Transcribe standard language model, or base model used to create your custom language
    ///             model.</p>
    ///         <p>If you want to use your custom language model to transcribe audio with a sample rate
    ///             of 16 kHz or greater, choose <code>Wideband</code>.</p>
    ///         <p>If you want to use your custom language model to transcribe audio with a sample rate
    ///             that is less than 16 kHz, choose <code>Narrowband</code>.</p>
    public let baseModelName: BaseModelName?
    /// <p>Contains the data access role and the Amazon S3 prefixes to read the required input files
    ///             to create a custom language model.</p>
    public let inputDataConfig: InputDataConfig?
    /// <p>The language of the input text you're using to train your custom language
    ///             model.</p>
    public let languageCode: CLMLanguageCode?
    /// <p>The name you choose for your custom language model when you create it.</p>
    public let modelName: String?

    public init (
        baseModelName: BaseModelName? = nil,
        inputDataConfig: InputDataConfig? = nil,
        languageCode: CLMLanguageCode? = nil,
        modelName: String? = nil
    )
    {
        self.baseModelName = baseModelName
        self.inputDataConfig = inputDataConfig
        self.languageCode = languageCode
        self.modelName = modelName
    }
}

struct CreateLanguageModelInputBody: Equatable {
    public let languageCode: CLMLanguageCode?
    public let baseModelName: BaseModelName?
    public let inputDataConfig: InputDataConfig?
}

extension CreateLanguageModelInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case baseModelName = "BaseModelName"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(CLMLanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let baseModelNameDecoded = try containerValues.decodeIfPresent(BaseModelName.self, forKey: .baseModelName)
        baseModelName = baseModelNameDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
    }
}

extension CreateLanguageModelOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLanguageModelOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLanguageModelOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLanguageModelOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateLanguageModelOutputResponse(baseModelName: \(String(describing: baseModelName)), inputDataConfig: \(String(describing: inputDataConfig)), languageCode: \(String(describing: languageCode)), modelName: \(String(describing: modelName)), modelStatus: \(String(describing: modelStatus)))"}
}

extension CreateLanguageModelOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateLanguageModelOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.baseModelName = output.baseModelName
            self.inputDataConfig = output.inputDataConfig
            self.languageCode = output.languageCode
            self.modelName = output.modelName
            self.modelStatus = output.modelStatus
        } else {
            self.baseModelName = nil
            self.inputDataConfig = nil
            self.languageCode = nil
            self.modelName = nil
            self.modelStatus = nil
        }
    }
}

public struct CreateLanguageModelOutputResponse: Equatable {
    /// <p>The Amazon Transcribe standard language model, or base model you've used to create a custom
    ///             language model.</p>
    public let baseModelName: BaseModelName?
    /// <p>The data access role and Amazon S3 prefixes you've chosen to create your custom language
    ///             model.</p>
    public let inputDataConfig: InputDataConfig?
    /// <p>The language code of the text you've used to create a custom language model.</p>
    public let languageCode: CLMLanguageCode?
    /// <p>The name you've chosen for your custom language model.</p>
    public let modelName: String?
    /// <p>The status of the custom language model. When the status is <code>COMPLETED</code> the
    ///             model is ready to use.</p>
    public let modelStatus: ModelStatus?

    public init (
        baseModelName: BaseModelName? = nil,
        inputDataConfig: InputDataConfig? = nil,
        languageCode: CLMLanguageCode? = nil,
        modelName: String? = nil,
        modelStatus: ModelStatus? = nil
    )
    {
        self.baseModelName = baseModelName
        self.inputDataConfig = inputDataConfig
        self.languageCode = languageCode
        self.modelName = modelName
        self.modelStatus = modelStatus
    }
}

struct CreateLanguageModelOutputResponseBody: Equatable {
    public let languageCode: CLMLanguageCode?
    public let baseModelName: BaseModelName?
    public let modelName: String?
    public let inputDataConfig: InputDataConfig?
    public let modelStatus: ModelStatus?
}

extension CreateLanguageModelOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case baseModelName = "BaseModelName"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case modelName = "ModelName"
        case modelStatus = "ModelStatus"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(CLMLanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let baseModelNameDecoded = try containerValues.decodeIfPresent(BaseModelName.self, forKey: .baseModelName)
        baseModelName = baseModelNameDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let modelStatusDecoded = try containerValues.decodeIfPresent(ModelStatus.self, forKey: .modelStatus)
        modelStatus = modelStatusDecoded
    }
}

public struct CreateMedicalVocabularyInputBodyMiddleware: Middleware {
    public let id: String = "CreateMedicalVocabularyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMedicalVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMedicalVocabularyInput>
    public typealias MOutput = OperationOutput<CreateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMedicalVocabularyOutputError>
}

extension CreateMedicalVocabularyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateMedicalVocabularyInput(languageCode: \(String(describing: languageCode)), vocabularyFileUri: \(String(describing: vocabularyFileUri)), vocabularyName: \(String(describing: vocabularyName)))"}
}

extension CreateMedicalVocabularyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let vocabularyFileUri = vocabularyFileUri {
            try encodeContainer.encode(vocabularyFileUri, forKey: .vocabularyFileUri)
        }
    }
}

public struct CreateMedicalVocabularyInputHeadersMiddleware: Middleware {
    public let id: String = "CreateMedicalVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMedicalVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMedicalVocabularyInput>
    public typealias MOutput = OperationOutput<CreateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMedicalVocabularyOutputError>
}

public struct CreateMedicalVocabularyInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateMedicalVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMedicalVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMedicalVocabularyInput>
    public typealias MOutput = OperationOutput<CreateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMedicalVocabularyOutputError>
}

public struct CreateMedicalVocabularyInput: Equatable {
    /// <p>The language code for the language used for the entries in your custom vocabulary. The
    ///             language code of your custom vocabulary must match the language code of your
    ///             transcription job. US English (en-US) is the only language code available for
    ///             Amazon Transcribe Medical.</p>
    public let languageCode: LanguageCode?
    /// <p>The location in Amazon S3 of the text file you use to define your custom vocabulary. The
    ///             URI must be in the same AWS Region as the
    ///             resource
    ///             that you're calling. Enter information about your
    ///                 <code>VocabularyFileUri</code> in the following format:</p>
    ///         <p>
    ///             <code>
    ///                 https://s3.<aws-region>.amazonaws.com/<bucket-name>/<keyprefix>/<objectkey>
    ///             </code>
    ///         </p>
    ///         <p>The following is an example URI for a vocabulary file that is stored in Amazon S3:</p>
    ///         <p>
    ///             <code>https://s3.us-east-1.amazonaws.com/AWSDOC-EXAMPLE-BUCKET/vocab.txt</code>
    ///          </p>
    ///         <p>For more information about Amazon S3 object names, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys">Object Keys</a> in the <i>Amazon S3 Developer Guide</i>.</p>
    ///         <p>For more information about custom vocabularies, see <a href="http://docs.aws.amazon.com/transcribe/latest/dg/how-it-works.html#how-vocabulary-med">Medical Custom Vocabularies</a>.</p>
    public let vocabularyFileUri: String?
    /// <p>The name of the custom vocabulary. This case-sensitive name must be unique within an
    ///             AWS account. If you try to create a vocabulary with the same name as a previous
    ///             vocabulary, you get a <code>ConflictException</code> error.</p>
    public let vocabularyName: String?

    public init (
        languageCode: LanguageCode? = nil,
        vocabularyFileUri: String? = nil,
        vocabularyName: String? = nil
    )
    {
        self.languageCode = languageCode
        self.vocabularyFileUri = vocabularyFileUri
        self.vocabularyName = vocabularyName
    }
}

struct CreateMedicalVocabularyInputBody: Equatable {
    public let languageCode: LanguageCode?
    public let vocabularyFileUri: String?
}

extension CreateMedicalVocabularyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let vocabularyFileUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyFileUri)
        vocabularyFileUri = vocabularyFileUriDecoded
    }
}

extension CreateMedicalVocabularyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMedicalVocabularyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMedicalVocabularyOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMedicalVocabularyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateMedicalVocabularyOutputResponse(failureReason: \(String(describing: failureReason)), languageCode: \(String(describing: languageCode)), lastModifiedTime: \(String(describing: lastModifiedTime)), vocabularyName: \(String(describing: vocabularyName)), vocabularyState: \(String(describing: vocabularyState)))"}
}

extension CreateMedicalVocabularyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateMedicalVocabularyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.failureReason = output.failureReason
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyName = output.vocabularyName
            self.vocabularyState = output.vocabularyState
        } else {
            self.failureReason = nil
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyName = nil
            self.vocabularyState = nil
        }
    }
}

public struct CreateMedicalVocabularyOutputResponse: Equatable {
    /// <p>If the <code>VocabularyState</code> field is <code>FAILED</code>, this field contains
    ///             information about why the job failed.</p>
    public let failureReason: String?
    /// <p>The language code for the entries in your custom vocabulary. US English (en-US) is the
    ///             only valid language code for Amazon Transcribe Medical.</p>
    public let languageCode: LanguageCode?
    /// <p>The date and time that you created the vocabulary.</p>
    public let lastModifiedTime: Date?
    /// <p>The name of the vocabulary. The name must be unique within an AWS account and is case
    ///             sensitive.</p>
    public let vocabularyName: String?
    /// <p>The processing state of your custom vocabulary in Amazon Transcribe Medical. If the state is
    ///                 <code>READY</code>, you can use the vocabulary in a
    ///                 <code>StartMedicalTranscriptionJob</code> request.</p>
    public let vocabularyState: VocabularyState?

    public init (
        failureReason: String? = nil,
        languageCode: LanguageCode? = nil,
        lastModifiedTime: Date? = nil,
        vocabularyName: String? = nil,
        vocabularyState: VocabularyState? = nil
    )
    {
        self.failureReason = failureReason
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyName = vocabularyName
        self.vocabularyState = vocabularyState
    }
}

struct CreateMedicalVocabularyOutputResponseBody: Equatable {
    public let vocabularyName: String?
    public let languageCode: LanguageCode?
    public let vocabularyState: VocabularyState?
    public let lastModifiedTime: Date?
    public let failureReason: String?
}

extension CreateMedicalVocabularyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyName = "VocabularyName"
        case vocabularyState = "VocabularyState"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let vocabularyStateDecoded = try containerValues.decodeIfPresent(VocabularyState.self, forKey: .vocabularyState)
        vocabularyState = vocabularyStateDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

public struct CreateVocabularyFilterInputBodyMiddleware: Middleware {
    public let id: String = "CreateVocabularyFilterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVocabularyFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVocabularyFilterInput>
    public typealias MOutput = OperationOutput<CreateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVocabularyFilterOutputError>
}

extension CreateVocabularyFilterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateVocabularyFilterInput(languageCode: \(String(describing: languageCode)), vocabularyFilterFileUri: \(String(describing: vocabularyFilterFileUri)), vocabularyFilterName: \(String(describing: vocabularyFilterName)), words: \(String(describing: words)))"}
}

extension CreateVocabularyFilterInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case vocabularyFilterFileUri = "VocabularyFilterFileUri"
        case words = "Words"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let vocabularyFilterFileUri = vocabularyFilterFileUri {
            try encodeContainer.encode(vocabularyFilterFileUri, forKey: .vocabularyFilterFileUri)
        }
        if let words = words {
            var wordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .words)
            for words0 in words {
                try wordsContainer.encode(words0)
            }
        }
    }
}

public struct CreateVocabularyFilterInputHeadersMiddleware: Middleware {
    public let id: String = "CreateVocabularyFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVocabularyFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVocabularyFilterInput>
    public typealias MOutput = OperationOutput<CreateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVocabularyFilterOutputError>
}

public struct CreateVocabularyFilterInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateVocabularyFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVocabularyFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVocabularyFilterInput>
    public typealias MOutput = OperationOutput<CreateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVocabularyFilterOutputError>
}

public struct CreateVocabularyFilterInput: Equatable {
    /// <p>The language code of the words in the vocabulary filter. All words in the filter must
    ///             be in the same language. The vocabulary filter can only be used with transcription jobs
    ///             in the specified language.</p>
    public let languageCode: LanguageCode?
    /// <p>The Amazon S3 location of a text file used as input to create the vocabulary filter.
    ///             Only use characters from the character set defined for custom vocabularies. For a list
    ///             of character sets, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets">Character Sets for Custom
    ///                 Vocabularies</a>.</p>
    ///         <p>The specified file must be less than 50 KB of UTF-8 characters.</p>
    ///         <p>If you provide the location of a list of words in the
    ///                 <code>VocabularyFilterFileUri</code> parameter, you can't use the <code>Words</code>
    ///             parameter.</p>
    public let vocabularyFilterFileUri: String?
    /// <p>The vocabulary filter name. The name must be unique within the account that contains
    ///             it. If you try to create a vocabulary filter with the same name as another vocabulary
    ///             filter, you get a <code>ConflictException</code> error.</p>
    public let vocabularyFilterName: String?
    /// <p>The words to use in the vocabulary filter. Only use characters from the character set
    ///             defined for custom vocabularies. For a list of character sets, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets">Character Sets for Custom Vocabularies</a>.</p>
    ///         <p>If you provide a list of words in the <code>Words</code> parameter, you can't use the
    ///                 <code>VocabularyFilterFileUri</code> parameter.</p>
    public let words: [String]?

    public init (
        languageCode: LanguageCode? = nil,
        vocabularyFilterFileUri: String? = nil,
        vocabularyFilterName: String? = nil,
        words: [String]? = nil
    )
    {
        self.languageCode = languageCode
        self.vocabularyFilterFileUri = vocabularyFilterFileUri
        self.vocabularyFilterName = vocabularyFilterName
        self.words = words
    }
}

struct CreateVocabularyFilterInputBody: Equatable {
    public let languageCode: LanguageCode?
    public let words: [String]?
    public let vocabularyFilterFileUri: String?
}

extension CreateVocabularyFilterInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case vocabularyFilterFileUri = "VocabularyFilterFileUri"
        case words = "Words"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let wordsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .words)
        var wordsDecoded0:[String]? = nil
        if let wordsContainer = wordsContainer {
            wordsDecoded0 = [String]()
            for string0 in wordsContainer {
                if let string0 = string0 {
                    wordsDecoded0?.append(string0)
                }
            }
        }
        words = wordsDecoded0
        let vocabularyFilterFileUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyFilterFileUri)
        vocabularyFilterFileUri = vocabularyFilterFileUriDecoded
    }
}

extension CreateVocabularyFilterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVocabularyFilterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateVocabularyFilterOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVocabularyFilterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateVocabularyFilterOutputResponse(languageCode: \(String(describing: languageCode)), lastModifiedTime: \(String(describing: lastModifiedTime)), vocabularyFilterName: \(String(describing: vocabularyFilterName)))"}
}

extension CreateVocabularyFilterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateVocabularyFilterOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyFilterName = output.vocabularyFilterName
        } else {
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyFilterName = nil
        }
    }
}

public struct CreateVocabularyFilterOutputResponse: Equatable {
    /// <p>The language code of the words in the collection.</p>
    public let languageCode: LanguageCode?
    /// <p>The date and time that the vocabulary filter was modified.</p>
    public let lastModifiedTime: Date?
    /// <p>The name of the vocabulary filter.</p>
    public let vocabularyFilterName: String?

    public init (
        languageCode: LanguageCode? = nil,
        lastModifiedTime: Date? = nil,
        vocabularyFilterName: String? = nil
    )
    {
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyFilterName = vocabularyFilterName
    }
}

struct CreateVocabularyFilterOutputResponseBody: Equatable {
    public let vocabularyFilterName: String?
    public let languageCode: LanguageCode?
    public let lastModifiedTime: Date?
}

extension CreateVocabularyFilterOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyFilterName = "VocabularyFilterName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyFilterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyFilterName)
        vocabularyFilterName = vocabularyFilterNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

public struct CreateVocabularyInputBodyMiddleware: Middleware {
    public let id: String = "CreateVocabularyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVocabularyInput>
    public typealias MOutput = OperationOutput<CreateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVocabularyOutputError>
}

extension CreateVocabularyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateVocabularyInput(languageCode: \(String(describing: languageCode)), phrases: \(String(describing: phrases)), vocabularyFileUri: \(String(describing: vocabularyFileUri)), vocabularyName: \(String(describing: vocabularyName)))"}
}

extension CreateVocabularyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case phrases = "Phrases"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let phrases = phrases {
            var phrasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .phrases)
            for phrases0 in phrases {
                try phrasesContainer.encode(phrases0)
            }
        }
        if let vocabularyFileUri = vocabularyFileUri {
            try encodeContainer.encode(vocabularyFileUri, forKey: .vocabularyFileUri)
        }
    }
}

public struct CreateVocabularyInputHeadersMiddleware: Middleware {
    public let id: String = "CreateVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVocabularyInput>
    public typealias MOutput = OperationOutput<CreateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVocabularyOutputError>
}

public struct CreateVocabularyInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVocabularyInput>
    public typealias MOutput = OperationOutput<CreateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVocabularyOutputError>
}

public struct CreateVocabularyInput: Equatable {
    /// <p>The language code of the vocabulary entries. For a list of languages and their
    ///             corresponding language codes, see <a>what-is-transcribe</a>.</p>
    public let languageCode: LanguageCode?
    /// <p>An array of strings that contains the vocabulary entries. </p>
    public let phrases: [String]?
    /// <p>The S3 location of the text file that contains the definition of the custom
    ///             vocabulary. The URI must be in the same region as the API endpoint that you are calling.
    ///             The general form is </p>
    ///
    ///
    ///
    ///         <p>For more information about S3 object names, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys">Object Keys</a> in the <i>Amazon S3 Developer Guide</i>.</p>
    ///         <p>For more information about custom vocabularies, see <a href="http://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary">Custom
    ///                 Vocabularies</a>.</p>
    public let vocabularyFileUri: String?
    /// <p>The name of the vocabulary. The name must be unique within an AWS account. The name is
    ///             case sensitive. If you try to create a vocabulary with the same name as a previous
    ///             vocabulary you will receive a <code>ConflictException</code> error.</p>
    public let vocabularyName: String?

    public init (
        languageCode: LanguageCode? = nil,
        phrases: [String]? = nil,
        vocabularyFileUri: String? = nil,
        vocabularyName: String? = nil
    )
    {
        self.languageCode = languageCode
        self.phrases = phrases
        self.vocabularyFileUri = vocabularyFileUri
        self.vocabularyName = vocabularyName
    }
}

struct CreateVocabularyInputBody: Equatable {
    public let languageCode: LanguageCode?
    public let phrases: [String]?
    public let vocabularyFileUri: String?
}

extension CreateVocabularyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case phrases = "Phrases"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let phrasesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .phrases)
        var phrasesDecoded0:[String]? = nil
        if let phrasesContainer = phrasesContainer {
            phrasesDecoded0 = [String]()
            for string0 in phrasesContainer {
                if let string0 = string0 {
                    phrasesDecoded0?.append(string0)
                }
            }
        }
        phrases = phrasesDecoded0
        let vocabularyFileUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyFileUri)
        vocabularyFileUri = vocabularyFileUriDecoded
    }
}

extension CreateVocabularyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVocabularyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateVocabularyOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVocabularyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateVocabularyOutputResponse(failureReason: \(String(describing: failureReason)), languageCode: \(String(describing: languageCode)), lastModifiedTime: \(String(describing: lastModifiedTime)), vocabularyName: \(String(describing: vocabularyName)), vocabularyState: \(String(describing: vocabularyState)))"}
}

extension CreateVocabularyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateVocabularyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.failureReason = output.failureReason
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyName = output.vocabularyName
            self.vocabularyState = output.vocabularyState
        } else {
            self.failureReason = nil
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyName = nil
            self.vocabularyState = nil
        }
    }
}

public struct CreateVocabularyOutputResponse: Equatable {
    /// <p>If the <code>VocabularyState</code> field is <code>FAILED</code>, this field contains
    ///             information about why the job failed.</p>
    public let failureReason: String?
    /// <p>The language code of the vocabulary entries.</p>
    public let languageCode: LanguageCode?
    /// <p>The date and time that the vocabulary was created.</p>
    public let lastModifiedTime: Date?
    /// <p>The name of the vocabulary.</p>
    public let vocabularyName: String?
    /// <p>The processing state of the vocabulary. When the <code>VocabularyState</code> field
    ///             contains <code>READY</code> the vocabulary is ready to be used in a
    ///                 <code>StartTranscriptionJob</code> request.</p>
    public let vocabularyState: VocabularyState?

    public init (
        failureReason: String? = nil,
        languageCode: LanguageCode? = nil,
        lastModifiedTime: Date? = nil,
        vocabularyName: String? = nil,
        vocabularyState: VocabularyState? = nil
    )
    {
        self.failureReason = failureReason
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyName = vocabularyName
        self.vocabularyState = vocabularyState
    }
}

struct CreateVocabularyOutputResponseBody: Equatable {
    public let vocabularyName: String?
    public let languageCode: LanguageCode?
    public let vocabularyState: VocabularyState?
    public let lastModifiedTime: Date?
    public let failureReason: String?
}

extension CreateVocabularyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyName = "VocabularyName"
        case vocabularyState = "VocabularyState"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let vocabularyStateDecoded = try containerValues.decodeIfPresent(VocabularyState.self, forKey: .vocabularyState)
        vocabularyState = vocabularyStateDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension DeleteLanguageModelInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteLanguageModelInput(modelName: \(String(describing: modelName)))"}
}

extension DeleteLanguageModelInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteLanguageModelInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteLanguageModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteLanguageModelInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteLanguageModelInput>
    public typealias MOutput = OperationOutput<DeleteLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteLanguageModelOutputError>
}

public struct DeleteLanguageModelInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteLanguageModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteLanguageModelInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteLanguageModelInput>
    public typealias MOutput = OperationOutput<DeleteLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteLanguageModelOutputError>
}

public struct DeleteLanguageModelInput: Equatable {
    /// <p>The name of the model you're choosing to delete.</p>
    public let modelName: String?

    public init (
        modelName: String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct DeleteLanguageModelInputBody: Equatable {
}

extension DeleteLanguageModelInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteLanguageModelOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLanguageModelOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLanguageModelOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLanguageModelOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteLanguageModelOutputResponse()"}
}

extension DeleteLanguageModelOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLanguageModelOutputResponse: Equatable {

    public init() {}
}

struct DeleteLanguageModelOutputResponseBody: Equatable {
}

extension DeleteLanguageModelOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteMedicalTranscriptionJobInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMedicalTranscriptionJobInput(medicalTranscriptionJobName: \(String(describing: medicalTranscriptionJobName)))"}
}

extension DeleteMedicalTranscriptionJobInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteMedicalTranscriptionJobInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteMedicalTranscriptionJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMedicalTranscriptionJobInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMedicalTranscriptionJobInput>
    public typealias MOutput = OperationOutput<DeleteMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMedicalTranscriptionJobOutputError>
}

public struct DeleteMedicalTranscriptionJobInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteMedicalTranscriptionJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMedicalTranscriptionJobInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMedicalTranscriptionJobInput>
    public typealias MOutput = OperationOutput<DeleteMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMedicalTranscriptionJobOutputError>
}

public struct DeleteMedicalTranscriptionJobInput: Equatable {
    /// <p>The name you provide to the <code>DeleteMedicalTranscriptionJob</code> object to
    ///             delete a transcription job.</p>
    public let medicalTranscriptionJobName: String?

    public init (
        medicalTranscriptionJobName: String? = nil
    )
    {
        self.medicalTranscriptionJobName = medicalTranscriptionJobName
    }
}

struct DeleteMedicalTranscriptionJobInputBody: Equatable {
}

extension DeleteMedicalTranscriptionJobInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteMedicalTranscriptionJobOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMedicalTranscriptionJobOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMedicalTranscriptionJobOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMedicalTranscriptionJobOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMedicalTranscriptionJobOutputResponse()"}
}

extension DeleteMedicalTranscriptionJobOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMedicalTranscriptionJobOutputResponse: Equatable {

    public init() {}
}

struct DeleteMedicalTranscriptionJobOutputResponseBody: Equatable {
}

extension DeleteMedicalTranscriptionJobOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteMedicalVocabularyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMedicalVocabularyInput(vocabularyName: \(String(describing: vocabularyName)))"}
}

extension DeleteMedicalVocabularyInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteMedicalVocabularyInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteMedicalVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMedicalVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMedicalVocabularyInput>
    public typealias MOutput = OperationOutput<DeleteMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMedicalVocabularyOutputError>
}

public struct DeleteMedicalVocabularyInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteMedicalVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMedicalVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMedicalVocabularyInput>
    public typealias MOutput = OperationOutput<DeleteMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMedicalVocabularyOutputError>
}

public struct DeleteMedicalVocabularyInput: Equatable {
    /// <p>The name of the vocabulary that you want to delete.</p>
    public let vocabularyName: String?

    public init (
        vocabularyName: String? = nil
    )
    {
        self.vocabularyName = vocabularyName
    }
}

struct DeleteMedicalVocabularyInputBody: Equatable {
}

extension DeleteMedicalVocabularyInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteMedicalVocabularyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMedicalVocabularyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMedicalVocabularyOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMedicalVocabularyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMedicalVocabularyOutputResponse()"}
}

extension DeleteMedicalVocabularyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMedicalVocabularyOutputResponse: Equatable {

    public init() {}
}

struct DeleteMedicalVocabularyOutputResponseBody: Equatable {
}

extension DeleteMedicalVocabularyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteTranscriptionJobInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteTranscriptionJobInput(transcriptionJobName: \(String(describing: transcriptionJobName)))"}
}

extension DeleteTranscriptionJobInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteTranscriptionJobInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteTranscriptionJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteTranscriptionJobInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteTranscriptionJobInput>
    public typealias MOutput = OperationOutput<DeleteTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteTranscriptionJobOutputError>
}

public struct DeleteTranscriptionJobInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteTranscriptionJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteTranscriptionJobInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteTranscriptionJobInput>
    public typealias MOutput = OperationOutput<DeleteTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteTranscriptionJobOutputError>
}

public struct DeleteTranscriptionJobInput: Equatable {
    /// <p>The name of the transcription job to be deleted.</p>
    public let transcriptionJobName: String?

    public init (
        transcriptionJobName: String? = nil
    )
    {
        self.transcriptionJobName = transcriptionJobName
    }
}

struct DeleteTranscriptionJobInputBody: Equatable {
}

extension DeleteTranscriptionJobInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteTranscriptionJobOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTranscriptionJobOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTranscriptionJobOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTranscriptionJobOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteTranscriptionJobOutputResponse()"}
}

extension DeleteTranscriptionJobOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTranscriptionJobOutputResponse: Equatable {

    public init() {}
}

struct DeleteTranscriptionJobOutputResponseBody: Equatable {
}

extension DeleteTranscriptionJobOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteVocabularyFilterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteVocabularyFilterInput(vocabularyFilterName: \(String(describing: vocabularyFilterName)))"}
}

extension DeleteVocabularyFilterInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteVocabularyFilterInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteVocabularyFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteVocabularyFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteVocabularyFilterInput>
    public typealias MOutput = OperationOutput<DeleteVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteVocabularyFilterOutputError>
}

public struct DeleteVocabularyFilterInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteVocabularyFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteVocabularyFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteVocabularyFilterInput>
    public typealias MOutput = OperationOutput<DeleteVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteVocabularyFilterOutputError>
}

public struct DeleteVocabularyFilterInput: Equatable {
    /// <p>The name of the vocabulary filter to remove.</p>
    public let vocabularyFilterName: String?

    public init (
        vocabularyFilterName: String? = nil
    )
    {
        self.vocabularyFilterName = vocabularyFilterName
    }
}

struct DeleteVocabularyFilterInputBody: Equatable {
}

extension DeleteVocabularyFilterInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteVocabularyFilterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVocabularyFilterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteVocabularyFilterOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVocabularyFilterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteVocabularyFilterOutputResponse()"}
}

extension DeleteVocabularyFilterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteVocabularyFilterOutputResponse: Equatable {

    public init() {}
}

struct DeleteVocabularyFilterOutputResponseBody: Equatable {
}

extension DeleteVocabularyFilterOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteVocabularyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteVocabularyInput(vocabularyName: \(String(describing: vocabularyName)))"}
}

extension DeleteVocabularyInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteVocabularyInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteVocabularyInput>
    public typealias MOutput = OperationOutput<DeleteVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteVocabularyOutputError>
}

public struct DeleteVocabularyInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteVocabularyInput>
    public typealias MOutput = OperationOutput<DeleteVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteVocabularyOutputError>
}

public struct DeleteVocabularyInput: Equatable {
    /// <p>The name of the vocabulary to delete. </p>
    public let vocabularyName: String?

    public init (
        vocabularyName: String? = nil
    )
    {
        self.vocabularyName = vocabularyName
    }
}

struct DeleteVocabularyInputBody: Equatable {
}

extension DeleteVocabularyInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteVocabularyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVocabularyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteVocabularyOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVocabularyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteVocabularyOutputResponse()"}
}

extension DeleteVocabularyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteVocabularyOutputResponse: Equatable {

    public init() {}
}

struct DeleteVocabularyOutputResponseBody: Equatable {
}

extension DeleteVocabularyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeLanguageModelInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLanguageModelInput(modelName: \(String(describing: modelName)))"}
}

extension DescribeLanguageModelInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeLanguageModelInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeLanguageModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLanguageModelInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLanguageModelInput>
    public typealias MOutput = OperationOutput<DescribeLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLanguageModelOutputError>
}

public struct DescribeLanguageModelInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeLanguageModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLanguageModelInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLanguageModelInput>
    public typealias MOutput = OperationOutput<DescribeLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLanguageModelOutputError>
}

public struct DescribeLanguageModelInput: Equatable {
    /// <p>The name of the custom language model you submit to get more information.</p>
    public let modelName: String?

    public init (
        modelName: String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct DescribeLanguageModelInputBody: Equatable {
}

extension DescribeLanguageModelInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeLanguageModelOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLanguageModelOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLanguageModelOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLanguageModelOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLanguageModelOutputResponse(languageModel: \(String(describing: languageModel)))"}
}

extension DescribeLanguageModelOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeLanguageModelOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.languageModel = output.languageModel
        } else {
            self.languageModel = nil
        }
    }
}

public struct DescribeLanguageModelOutputResponse: Equatable {
    /// <p>The name of the custom language model you requested more information about.</p>
    public let languageModel: LanguageModel?

    public init (
        languageModel: LanguageModel? = nil
    )
    {
        self.languageModel = languageModel
    }
}

struct DescribeLanguageModelOutputResponseBody: Equatable {
    public let languageModel: LanguageModel?
}

extension DescribeLanguageModelOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case languageModel = "LanguageModel"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageModelDecoded = try containerValues.decodeIfPresent(LanguageModel.self, forKey: .languageModel)
        languageModel = languageModelDecoded
    }
}

extension GetMedicalTranscriptionJobInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetMedicalTranscriptionJobInput(medicalTranscriptionJobName: \(String(describing: medicalTranscriptionJobName)))"}
}

extension GetMedicalTranscriptionJobInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct GetMedicalTranscriptionJobInputHeadersMiddleware: Middleware {
    public let id: String = "GetMedicalTranscriptionJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetMedicalTranscriptionJobInput>,
                  next: H) -> Swift.Result<OperationOutput<GetMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetMedicalTranscriptionJobInput>
    public typealias MOutput = OperationOutput<GetMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetMedicalTranscriptionJobOutputError>
}

public struct GetMedicalTranscriptionJobInputQueryItemMiddleware: Middleware {
    public let id: String = "GetMedicalTranscriptionJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetMedicalTranscriptionJobInput>,
                  next: H) -> Swift.Result<OperationOutput<GetMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetMedicalTranscriptionJobInput>
    public typealias MOutput = OperationOutput<GetMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetMedicalTranscriptionJobOutputError>
}

public struct GetMedicalTranscriptionJobInput: Equatable {
    /// <p>The name of the medical transcription job.</p>
    public let medicalTranscriptionJobName: String?

    public init (
        medicalTranscriptionJobName: String? = nil
    )
    {
        self.medicalTranscriptionJobName = medicalTranscriptionJobName
    }
}

struct GetMedicalTranscriptionJobInputBody: Equatable {
}

extension GetMedicalTranscriptionJobInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension GetMedicalTranscriptionJobOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMedicalTranscriptionJobOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMedicalTranscriptionJobOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMedicalTranscriptionJobOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetMedicalTranscriptionJobOutputResponse(medicalTranscriptionJob: \(String(describing: medicalTranscriptionJob)))"}
}

extension GetMedicalTranscriptionJobOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetMedicalTranscriptionJobOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.medicalTranscriptionJob = output.medicalTranscriptionJob
        } else {
            self.medicalTranscriptionJob = nil
        }
    }
}

public struct GetMedicalTranscriptionJobOutputResponse: Equatable {
    /// <p>An object that contains the results of the medical transcription job.</p>
    public let medicalTranscriptionJob: MedicalTranscriptionJob?

    public init (
        medicalTranscriptionJob: MedicalTranscriptionJob? = nil
    )
    {
        self.medicalTranscriptionJob = medicalTranscriptionJob
    }
}

struct GetMedicalTranscriptionJobOutputResponseBody: Equatable {
    public let medicalTranscriptionJob: MedicalTranscriptionJob?
}

extension GetMedicalTranscriptionJobOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case medicalTranscriptionJob = "MedicalTranscriptionJob"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let medicalTranscriptionJobDecoded = try containerValues.decodeIfPresent(MedicalTranscriptionJob.self, forKey: .medicalTranscriptionJob)
        medicalTranscriptionJob = medicalTranscriptionJobDecoded
    }
}

extension GetMedicalVocabularyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetMedicalVocabularyInput(vocabularyName: \(String(describing: vocabularyName)))"}
}

extension GetMedicalVocabularyInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct GetMedicalVocabularyInputHeadersMiddleware: Middleware {
    public let id: String = "GetMedicalVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetMedicalVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<GetMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetMedicalVocabularyInput>
    public typealias MOutput = OperationOutput<GetMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetMedicalVocabularyOutputError>
}

public struct GetMedicalVocabularyInputQueryItemMiddleware: Middleware {
    public let id: String = "GetMedicalVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetMedicalVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<GetMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetMedicalVocabularyInput>
    public typealias MOutput = OperationOutput<GetMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetMedicalVocabularyOutputError>
}

public struct GetMedicalVocabularyInput: Equatable {
    /// <p>The name of the vocabulary that you want information about. The value is case
    ///             sensitive. </p>
    public let vocabularyName: String?

    public init (
        vocabularyName: String? = nil
    )
    {
        self.vocabularyName = vocabularyName
    }
}

struct GetMedicalVocabularyInputBody: Equatable {
}

extension GetMedicalVocabularyInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension GetMedicalVocabularyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMedicalVocabularyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMedicalVocabularyOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMedicalVocabularyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetMedicalVocabularyOutputResponse(downloadUri: \(String(describing: downloadUri)), failureReason: \(String(describing: failureReason)), languageCode: \(String(describing: languageCode)), lastModifiedTime: \(String(describing: lastModifiedTime)), vocabularyName: \(String(describing: vocabularyName)), vocabularyState: \(String(describing: vocabularyState)))"}
}

extension GetMedicalVocabularyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetMedicalVocabularyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.downloadUri = output.downloadUri
            self.failureReason = output.failureReason
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyName = output.vocabularyName
            self.vocabularyState = output.vocabularyState
        } else {
            self.downloadUri = nil
            self.failureReason = nil
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyName = nil
            self.vocabularyState = nil
        }
    }
}

public struct GetMedicalVocabularyOutputResponse: Equatable {
    /// <p>The location in Amazon S3 where the vocabulary is stored. Use this URI to get the contents
    ///             of the vocabulary. You can download your vocabulary from the
    ///             URI
    ///             for a limited time.</p>
    public let downloadUri: String?
    /// <p>If the <code>VocabularyState</code> is <code>FAILED</code>, this field contains
    ///             information about why the job failed.</p>
    public let failureReason: String?
    /// <p>The valid language code for your vocabulary entries.</p>
    public let languageCode: LanguageCode?
    /// <p>The date and time that the vocabulary was last modified with a text file different
    ///             from the one that was previously used.</p>
    public let lastModifiedTime: Date?
    /// <p>The name of the vocabulary returned by Amazon Transcribe Medical.</p>
    public let vocabularyName: String?
    /// <p>The
    ///             processing state of the vocabulary. If the <code>VocabularyState</code> is
    ///                 <code>READY</code> then you can use it in the
    ///                 <code>StartMedicalTranscriptionJob</code> operation. </p>
    public let vocabularyState: VocabularyState?

    public init (
        downloadUri: String? = nil,
        failureReason: String? = nil,
        languageCode: LanguageCode? = nil,
        lastModifiedTime: Date? = nil,
        vocabularyName: String? = nil,
        vocabularyState: VocabularyState? = nil
    )
    {
        self.downloadUri = downloadUri
        self.failureReason = failureReason
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyName = vocabularyName
        self.vocabularyState = vocabularyState
    }
}

struct GetMedicalVocabularyOutputResponseBody: Equatable {
    public let vocabularyName: String?
    public let languageCode: LanguageCode?
    public let vocabularyState: VocabularyState?
    public let lastModifiedTime: Date?
    public let failureReason: String?
    public let downloadUri: String?
}

extension GetMedicalVocabularyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case downloadUri = "DownloadUri"
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyName = "VocabularyName"
        case vocabularyState = "VocabularyState"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let vocabularyStateDecoded = try containerValues.decodeIfPresent(VocabularyState.self, forKey: .vocabularyState)
        vocabularyState = vocabularyStateDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let downloadUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .downloadUri)
        downloadUri = downloadUriDecoded
    }
}

extension GetTranscriptionJobInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetTranscriptionJobInput(transcriptionJobName: \(String(describing: transcriptionJobName)))"}
}

extension GetTranscriptionJobInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct GetTranscriptionJobInputHeadersMiddleware: Middleware {
    public let id: String = "GetTranscriptionJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetTranscriptionJobInput>,
                  next: H) -> Swift.Result<OperationOutput<GetTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetTranscriptionJobInput>
    public typealias MOutput = OperationOutput<GetTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetTranscriptionJobOutputError>
}

public struct GetTranscriptionJobInputQueryItemMiddleware: Middleware {
    public let id: String = "GetTranscriptionJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetTranscriptionJobInput>,
                  next: H) -> Swift.Result<OperationOutput<GetTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetTranscriptionJobInput>
    public typealias MOutput = OperationOutput<GetTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetTranscriptionJobOutputError>
}

public struct GetTranscriptionJobInput: Equatable {
    /// <p>The name of the job.</p>
    public let transcriptionJobName: String?

    public init (
        transcriptionJobName: String? = nil
    )
    {
        self.transcriptionJobName = transcriptionJobName
    }
}

struct GetTranscriptionJobInputBody: Equatable {
}

extension GetTranscriptionJobInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension GetTranscriptionJobOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTranscriptionJobOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTranscriptionJobOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTranscriptionJobOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetTranscriptionJobOutputResponse(transcriptionJob: \(String(describing: transcriptionJob)))"}
}

extension GetTranscriptionJobOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetTranscriptionJobOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.transcriptionJob = output.transcriptionJob
        } else {
            self.transcriptionJob = nil
        }
    }
}

public struct GetTranscriptionJobOutputResponse: Equatable {
    /// <p>An object that contains the results of the transcription job.</p>
    public let transcriptionJob: TranscriptionJob?

    public init (
        transcriptionJob: TranscriptionJob? = nil
    )
    {
        self.transcriptionJob = transcriptionJob
    }
}

struct GetTranscriptionJobOutputResponseBody: Equatable {
    public let transcriptionJob: TranscriptionJob?
}

extension GetTranscriptionJobOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case transcriptionJob = "TranscriptionJob"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptionJobDecoded = try containerValues.decodeIfPresent(TranscriptionJob.self, forKey: .transcriptionJob)
        transcriptionJob = transcriptionJobDecoded
    }
}

extension GetVocabularyFilterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetVocabularyFilterInput(vocabularyFilterName: \(String(describing: vocabularyFilterName)))"}
}

extension GetVocabularyFilterInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct GetVocabularyFilterInputHeadersMiddleware: Middleware {
    public let id: String = "GetVocabularyFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetVocabularyFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<GetVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetVocabularyFilterInput>
    public typealias MOutput = OperationOutput<GetVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetVocabularyFilterOutputError>
}

public struct GetVocabularyFilterInputQueryItemMiddleware: Middleware {
    public let id: String = "GetVocabularyFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetVocabularyFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<GetVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetVocabularyFilterInput>
    public typealias MOutput = OperationOutput<GetVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetVocabularyFilterOutputError>
}

public struct GetVocabularyFilterInput: Equatable {
    /// <p>The name of the vocabulary filter for which to return information.</p>
    public let vocabularyFilterName: String?

    public init (
        vocabularyFilterName: String? = nil
    )
    {
        self.vocabularyFilterName = vocabularyFilterName
    }
}

struct GetVocabularyFilterInputBody: Equatable {
}

extension GetVocabularyFilterInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension GetVocabularyFilterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetVocabularyFilterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetVocabularyFilterOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetVocabularyFilterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetVocabularyFilterOutputResponse(downloadUri: \(String(describing: downloadUri)), languageCode: \(String(describing: languageCode)), lastModifiedTime: \(String(describing: lastModifiedTime)), vocabularyFilterName: \(String(describing: vocabularyFilterName)))"}
}

extension GetVocabularyFilterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetVocabularyFilterOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.downloadUri = output.downloadUri
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyFilterName = output.vocabularyFilterName
        } else {
            self.downloadUri = nil
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyFilterName = nil
        }
    }
}

public struct GetVocabularyFilterOutputResponse: Equatable {
    /// <p>The URI of the list of words in the vocabulary filter. You can use this URI to get the
    ///             list of words.</p>
    public let downloadUri: String?
    /// <p>The language code of the words in the vocabulary filter.</p>
    public let languageCode: LanguageCode?
    /// <p>The date and time that the contents of the vocabulary filter were updated.</p>
    public let lastModifiedTime: Date?
    /// <p>The name of the vocabulary filter.</p>
    public let vocabularyFilterName: String?

    public init (
        downloadUri: String? = nil,
        languageCode: LanguageCode? = nil,
        lastModifiedTime: Date? = nil,
        vocabularyFilterName: String? = nil
    )
    {
        self.downloadUri = downloadUri
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyFilterName = vocabularyFilterName
    }
}

struct GetVocabularyFilterOutputResponseBody: Equatable {
    public let vocabularyFilterName: String?
    public let languageCode: LanguageCode?
    public let lastModifiedTime: Date?
    public let downloadUri: String?
}

extension GetVocabularyFilterOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case downloadUri = "DownloadUri"
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyFilterName = "VocabularyFilterName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyFilterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyFilterName)
        vocabularyFilterName = vocabularyFilterNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let downloadUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .downloadUri)
        downloadUri = downloadUriDecoded
    }
}

extension GetVocabularyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetVocabularyInput(vocabularyName: \(String(describing: vocabularyName)))"}
}

extension GetVocabularyInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct GetVocabularyInputHeadersMiddleware: Middleware {
    public let id: String = "GetVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<GetVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetVocabularyInput>
    public typealias MOutput = OperationOutput<GetVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetVocabularyOutputError>
}

public struct GetVocabularyInputQueryItemMiddleware: Middleware {
    public let id: String = "GetVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<GetVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetVocabularyInput>
    public typealias MOutput = OperationOutput<GetVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetVocabularyOutputError>
}

public struct GetVocabularyInput: Equatable {
    /// <p>The name of the vocabulary to return information about. The name is case
    ///             sensitive.</p>
    public let vocabularyName: String?

    public init (
        vocabularyName: String? = nil
    )
    {
        self.vocabularyName = vocabularyName
    }
}

struct GetVocabularyInputBody: Equatable {
}

extension GetVocabularyInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension GetVocabularyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetVocabularyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetVocabularyOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetVocabularyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetVocabularyOutputResponse(downloadUri: \(String(describing: downloadUri)), failureReason: \(String(describing: failureReason)), languageCode: \(String(describing: languageCode)), lastModifiedTime: \(String(describing: lastModifiedTime)), vocabularyName: \(String(describing: vocabularyName)), vocabularyState: \(String(describing: vocabularyState)))"}
}

extension GetVocabularyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetVocabularyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.downloadUri = output.downloadUri
            self.failureReason = output.failureReason
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyName = output.vocabularyName
            self.vocabularyState = output.vocabularyState
        } else {
            self.downloadUri = nil
            self.failureReason = nil
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyName = nil
            self.vocabularyState = nil
        }
    }
}

public struct GetVocabularyOutputResponse: Equatable {
    /// <p>The S3 location where the vocabulary is stored. Use this URI to get the contents of
    ///             the vocabulary. The URI is available for a limited time.</p>
    public let downloadUri: String?
    /// <p>If the <code>VocabularyState</code> field is <code>FAILED</code>, this field contains
    ///             information about why the job failed.</p>
    public let failureReason: String?
    /// <p>The language code of the vocabulary entries.</p>
    public let languageCode: LanguageCode?
    /// <p>The date and time that the vocabulary was last modified.</p>
    public let lastModifiedTime: Date?
    /// <p>The name of the vocabulary to return.</p>
    public let vocabularyName: String?
    /// <p>The processing state of the vocabulary.</p>
    public let vocabularyState: VocabularyState?

    public init (
        downloadUri: String? = nil,
        failureReason: String? = nil,
        languageCode: LanguageCode? = nil,
        lastModifiedTime: Date? = nil,
        vocabularyName: String? = nil,
        vocabularyState: VocabularyState? = nil
    )
    {
        self.downloadUri = downloadUri
        self.failureReason = failureReason
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyName = vocabularyName
        self.vocabularyState = vocabularyState
    }
}

struct GetVocabularyOutputResponseBody: Equatable {
    public let vocabularyName: String?
    public let languageCode: LanguageCode?
    public let vocabularyState: VocabularyState?
    public let lastModifiedTime: Date?
    public let failureReason: String?
    public let downloadUri: String?
}

extension GetVocabularyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case downloadUri = "DownloadUri"
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyName = "VocabularyName"
        case vocabularyState = "VocabularyState"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let vocabularyStateDecoded = try containerValues.decodeIfPresent(VocabularyState.self, forKey: .vocabularyState)
        vocabularyState = vocabularyStateDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let downloadUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .downloadUri)
        downloadUri = downloadUriDecoded
    }
}

extension InputDataConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case s3Uri = "S3Uri"
        case tuningDataS3Uri = "TuningDataS3Uri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAccessRoleArn = dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
        if let tuningDataS3Uri = tuningDataS3Uri {
            try encodeContainer.encode(tuningDataS3Uri, forKey: .tuningDataS3Uri)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let tuningDataS3UriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tuningDataS3Uri)
        tuningDataS3Uri = tuningDataS3UriDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
    }
}

extension InputDataConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputDataConfig(dataAccessRoleArn: \(String(describing: dataAccessRoleArn)), s3Uri: \(String(describing: s3Uri)), tuningDataS3Uri: \(String(describing: tuningDataS3Uri)))"}
}

/// <p>The object that contains the Amazon S3 object location and access role required to train
///             and tune your custom language model.</p>
public struct InputDataConfig: Equatable {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the permissions you've given
    ///             Amazon Transcribe to access your Amazon S3 buckets containing your media files or text data.</p>
    public let dataAccessRoleArn: String?
    /// <p>The Amazon S3 prefix you specify to access the plain text files that you use to train your
    ///             custom language model.</p>
    public let s3Uri: String?
    /// <p>The Amazon S3 prefix you specify to access the plain text files that you use to tune your
    ///             custom language model.</p>
    public let tuningDataS3Uri: String?

    public init (
        dataAccessRoleArn: String? = nil,
        s3Uri: String? = nil,
        tuningDataS3Uri: String? = nil
    )
    {
        self.dataAccessRoleArn = dataAccessRoleArn
        self.s3Uri = s3Uri
        self.tuningDataS3Uri = tuningDataS3Uri
    }
}

extension InternalFailureException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InternalFailureException(message: \(String(describing: message)))"}
}

extension InternalFailureException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InternalFailureExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>There was an internal error. Check the error message and try your request
///             again.</p>
public struct InternalFailureException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InternalFailureExceptionBody: Equatable {
    public let message: String?
}

extension InternalFailureExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension JobExecutionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowDeferredExecution = "AllowDeferredExecution"
        case dataAccessRoleArn = "DataAccessRoleArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowDeferredExecution = allowDeferredExecution {
            try encodeContainer.encode(allowDeferredExecution, forKey: .allowDeferredExecution)
        }
        if let dataAccessRoleArn = dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowDeferredExecutionDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .allowDeferredExecution)
        allowDeferredExecution = allowDeferredExecutionDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
    }
}

extension JobExecutionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "JobExecutionSettings(allowDeferredExecution: \(String(describing: allowDeferredExecution)), dataAccessRoleArn: \(String(describing: dataAccessRoleArn)))"}
}

/// <p>Provides information about when a transcription job should be executed.</p>
public struct JobExecutionSettings: Equatable {
    /// <p>Indicates whether a job should be queued by Amazon Transcribe when the concurrent execution limit
    ///             is exceeded. When the <code>AllowDeferredExecution</code> field is true, jobs are queued
    ///             and executed when the number of executing jobs falls below the concurrent execution
    ///             limit. If the field is false, Amazon Transcribe returns a <code>LimitExceededException</code>
    ///             exception.</p>
    ///         <p>If you specify the <code>AllowDeferredExecution</code> field, you must specify the
    ///                 <code>DataAccessRoleArn</code> field.</p>
    public let allowDeferredExecution: Bool?
    /// <p>The Amazon Resource Name (ARN) of a role that has access to the S3 bucket that
    ///             contains the input files. Amazon Transcribe assumes this role to read queued media files. If you
    ///             have specified an output S3 bucket for the transcription results, this role should have
    ///             access to the output bucket as well.</p>
    ///         <p>If you specify the <code>AllowDeferredExecution</code> field, you must specify the
    ///                 <code>DataAccessRoleArn</code> field.</p>
    public let dataAccessRoleArn: String?

    public init (
        allowDeferredExecution: Bool? = nil,
        dataAccessRoleArn: String? = nil
    )
    {
        self.allowDeferredExecution = allowDeferredExecution
        self.dataAccessRoleArn = dataAccessRoleArn
    }
}

public enum LanguageCode {
    case afZa
    case arAe
    case arSa
    case cyGb
    case daDk
    case deCh
    case deDe
    case enAb
    case enAu
    case enGb
    case enIe
    case enIn
    case enUs
    case enWl
    case esEs
    case esUs
    case faIr
    case frCa
    case frFr
    case gaIe
    case gdGb
    case heIl
    case hiIn
    case idId
    case itIt
    case jaJp
    case koKr
    case msMy
    case nlNl
    case ptBr
    case ptPt
    case ruRu
    case taIn
    case teIn
    case trTr
    case zhCn
    case sdkUnknown(String)
}

extension LanguageCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LanguageCode] {
        return [
            .afZa,
            .arAe,
            .arSa,
            .cyGb,
            .daDk,
            .deCh,
            .deDe,
            .enAb,
            .enAu,
            .enGb,
            .enIe,
            .enIn,
            .enUs,
            .enWl,
            .esEs,
            .esUs,
            .faIr,
            .frCa,
            .frFr,
            .gaIe,
            .gdGb,
            .heIl,
            .hiIn,
            .idId,
            .itIt,
            .jaJp,
            .koKr,
            .msMy,
            .nlNl,
            .ptBr,
            .ptPt,
            .ruRu,
            .taIn,
            .teIn,
            .trTr,
            .zhCn,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .afZa: return "af-ZA"
        case .arAe: return "ar-AE"
        case .arSa: return "ar-SA"
        case .cyGb: return "cy-GB"
        case .daDk: return "da-DK"
        case .deCh: return "de-CH"
        case .deDe: return "de-DE"
        case .enAb: return "en-AB"
        case .enAu: return "en-AU"
        case .enGb: return "en-GB"
        case .enIe: return "en-IE"
        case .enIn: return "en-IN"
        case .enUs: return "en-US"
        case .enWl: return "en-WL"
        case .esEs: return "es-ES"
        case .esUs: return "es-US"
        case .faIr: return "fa-IR"
        case .frCa: return "fr-CA"
        case .frFr: return "fr-FR"
        case .gaIe: return "ga-IE"
        case .gdGb: return "gd-GB"
        case .heIl: return "he-IL"
        case .hiIn: return "hi-IN"
        case .idId: return "id-ID"
        case .itIt: return "it-IT"
        case .jaJp: return "ja-JP"
        case .koKr: return "ko-KR"
        case .msMy: return "ms-MY"
        case .nlNl: return "nl-NL"
        case .ptBr: return "pt-BR"
        case .ptPt: return "pt-PT"
        case .ruRu: return "ru-RU"
        case .taIn: return "ta-IN"
        case .teIn: return "te-IN"
        case .trTr: return "tr-TR"
        case .zhCn: return "zh-CN"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LanguageCode(rawValue: rawValue) ?? LanguageCode.sdkUnknown(rawValue)
    }
}

extension LanguageModel: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case baseModelName = "BaseModelName"
        case createTime = "CreateTime"
        case failureReason = "FailureReason"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case modelName = "ModelName"
        case modelStatus = "ModelStatus"
        case upgradeAvailability = "UpgradeAvailability"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseModelName = baseModelName {
            try encodeContainer.encode(baseModelName.rawValue, forKey: .baseModelName)
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let inputDataConfig = inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let modelStatus = modelStatus {
            try encodeContainer.encode(modelStatus.rawValue, forKey: .modelStatus)
        }
        if let upgradeAvailability = upgradeAvailability {
            try encodeContainer.encode(upgradeAvailability, forKey: .upgradeAvailability)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(CLMLanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let baseModelNameDecoded = try containerValues.decodeIfPresent(BaseModelName.self, forKey: .baseModelName)
        baseModelName = baseModelNameDecoded
        let modelStatusDecoded = try containerValues.decodeIfPresent(ModelStatus.self, forKey: .modelStatus)
        modelStatus = modelStatusDecoded
        let upgradeAvailabilityDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .upgradeAvailability)
        upgradeAvailability = upgradeAvailabilityDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
    }
}

extension LanguageModel: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LanguageModel(baseModelName: \(String(describing: baseModelName)), createTime: \(String(describing: createTime)), failureReason: \(String(describing: failureReason)), inputDataConfig: \(String(describing: inputDataConfig)), languageCode: \(String(describing: languageCode)), lastModifiedTime: \(String(describing: lastModifiedTime)), modelName: \(String(describing: modelName)), modelStatus: \(String(describing: modelStatus)), upgradeAvailability: \(String(describing: upgradeAvailability)))"}
}

/// <p>The structure used to describe a custom language model.</p>
public struct LanguageModel: Equatable {
    /// <p>The Amazon Transcribe standard language model, or base model used to create the custom language
    ///             model.</p>
    public let baseModelName: BaseModelName?
    /// <p>The time the custom language model was created.</p>
    public let createTime: Date?
    /// <p>The reason why the custom language model couldn't be created.</p>
    public let failureReason: String?
    /// <p>The data access role and Amazon S3 prefixes for the input files used to train the custom
    ///             language model.</p>
    public let inputDataConfig: InputDataConfig?
    /// <p>The language code you used to create your custom language model.</p>
    public let languageCode: CLMLanguageCode?
    /// <p>The most recent time the custom language model was modified.</p>
    public let lastModifiedTime: Date?
    /// <p>The name of the custom language model.</p>
    public let modelName: String?
    /// <p>The creation status of a custom language model. When the status is
    ///                 <code>COMPLETED</code> the model is ready for use.</p>
    public let modelStatus: ModelStatus?
    /// <p>Whether the base model used for the custom language model is up to date. If this field
    ///             is <code>true</code> then you are running the most up-to-date version of the base model
    ///             in your custom language model.</p>
    public let upgradeAvailability: Bool?

    public init (
        baseModelName: BaseModelName? = nil,
        createTime: Date? = nil,
        failureReason: String? = nil,
        inputDataConfig: InputDataConfig? = nil,
        languageCode: CLMLanguageCode? = nil,
        lastModifiedTime: Date? = nil,
        modelName: String? = nil,
        modelStatus: ModelStatus? = nil,
        upgradeAvailability: Bool? = nil
    )
    {
        self.baseModelName = baseModelName
        self.createTime = createTime
        self.failureReason = failureReason
        self.inputDataConfig = inputDataConfig
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.modelName = modelName
        self.modelStatus = modelStatus
        self.upgradeAvailability = upgradeAvailability
    }
}

extension LimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LimitExceededException(message: \(String(describing: message)))"}
}

extension LimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Either you have sent too many requests or your input file is too long. Wait before you
///             resend your request, or use a smaller file and resend the request.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension LimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListLanguageModelsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListLanguageModelsInput(maxResults: \(String(describing: maxResults)), nameContains: \(String(describing: nameContains)), nextToken: \(String(describing: nextToken)), statusEquals: \(String(describing: statusEquals)))"}
}

extension ListLanguageModelsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListLanguageModelsInputHeadersMiddleware: Middleware {
    public let id: String = "ListLanguageModelsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListLanguageModelsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListLanguageModelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListLanguageModelsInput>
    public typealias MOutput = OperationOutput<ListLanguageModelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListLanguageModelsOutputError>
}

public struct ListLanguageModelsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListLanguageModelsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListLanguageModelsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListLanguageModelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListLanguageModelsInput>
    public typealias MOutput = OperationOutput<ListLanguageModelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListLanguageModelsOutputError>
}

public struct ListLanguageModelsInput: Equatable {
    /// <p>The maximum number of language models to return in the response. If there are fewer
    ///             results in the list, the response contains only the actual results.</p>
    public let maxResults: Int?
    /// <p>When specified, the custom language model names returned contain the substring you've
    ///             specified.</p>
    public let nameContains: String?
    /// <p>When included, fetches the next set of jobs if the result of the previous request was
    ///             truncated.</p>
    public let nextToken: String?
    /// <p>When specified, returns only custom language models with the specified status.
    ///             Language models are ordered by creation date, with the newest models first. If you don't
    ///             specify a status, Amazon Transcribe returns all custom language models ordered by date.</p>
    public let statusEquals: ModelStatus?

    public init (
        maxResults: Int? = nil,
        nameContains: String? = nil,
        nextToken: String? = nil,
        statusEquals: ModelStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.statusEquals = statusEquals
    }
}

struct ListLanguageModelsInputBody: Equatable {
}

extension ListLanguageModelsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListLanguageModelsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLanguageModelsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListLanguageModelsOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLanguageModelsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListLanguageModelsOutputResponse(models: \(String(describing: models)), nextToken: \(String(describing: nextToken)))"}
}

extension ListLanguageModelsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListLanguageModelsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.models = output.models
            self.nextToken = output.nextToken
        } else {
            self.models = nil
            self.nextToken = nil
        }
    }
}

public struct ListLanguageModelsOutputResponse: Equatable {
    /// <p>A list of objects containing information about custom language models.</p>
    public let models: [LanguageModel]?
    /// <p>The  operation returns a page of jobs at a
    ///             time. The maximum size of the list is set by the MaxResults parameter. If there are more
    ///             language models in the list than the page size, Amazon Transcribe returns the <code>NextPage</code>
    ///             token. Include the token in the next request to the  operation to return the next page of language
    ///             models.</p>
    public let nextToken: String?

    public init (
        models: [LanguageModel]? = nil,
        nextToken: String? = nil
    )
    {
        self.models = models
        self.nextToken = nextToken
    }
}

struct ListLanguageModelsOutputResponseBody: Equatable {
    public let nextToken: String?
    public let models: [LanguageModel]?
}

extension ListLanguageModelsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case models = "Models"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let modelsContainer = try containerValues.decodeIfPresent([LanguageModel?].self, forKey: .models)
        var modelsDecoded0:[LanguageModel]? = nil
        if let modelsContainer = modelsContainer {
            modelsDecoded0 = [LanguageModel]()
            for structure0 in modelsContainer {
                if let structure0 = structure0 {
                    modelsDecoded0?.append(structure0)
                }
            }
        }
        models = modelsDecoded0
    }
}

extension ListMedicalTranscriptionJobsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListMedicalTranscriptionJobsInput(jobNameContains: \(String(describing: jobNameContains)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), status: \(String(describing: status)))"}
}

extension ListMedicalTranscriptionJobsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListMedicalTranscriptionJobsInputHeadersMiddleware: Middleware {
    public let id: String = "ListMedicalTranscriptionJobsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListMedicalTranscriptionJobsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListMedicalTranscriptionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListMedicalTranscriptionJobsInput>
    public typealias MOutput = OperationOutput<ListMedicalTranscriptionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListMedicalTranscriptionJobsOutputError>
}

public struct ListMedicalTranscriptionJobsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListMedicalTranscriptionJobsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListMedicalTranscriptionJobsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListMedicalTranscriptionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListMedicalTranscriptionJobsInput>
    public typealias MOutput = OperationOutput<ListMedicalTranscriptionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListMedicalTranscriptionJobsOutputError>
}

public struct ListMedicalTranscriptionJobsInput: Equatable {
    /// <p>When specified, the jobs returned in the list are limited to jobs whose name contains
    ///             the specified string.</p>
    public let jobNameContains: String?
    /// <p>The maximum number of medical transcription jobs to return in the response. IF there
    ///             are fewer results in the list, this response contains only the actual results.</p>
    public let maxResults: Int?
    /// <p>If you a receive a truncated result in the previous request of
    ///                 <code>ListMedicalTranscriptionJobs</code>, include <code>NextToken</code> to fetch
    ///             the next set of jobs.</p>
    public let nextToken: String?
    /// <p>When specified, returns only medical transcription jobs with the specified status.
    ///             Jobs are ordered by creation date, with the newest jobs returned first. If you don't
    ///             specify a status, Amazon Transcribe Medical returns all transcription jobs ordered by creation date.</p>
    public let status: TranscriptionJobStatus?

    public init (
        jobNameContains: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        status: TranscriptionJobStatus? = nil
    )
    {
        self.jobNameContains = jobNameContains
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListMedicalTranscriptionJobsInputBody: Equatable {
}

extension ListMedicalTranscriptionJobsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListMedicalTranscriptionJobsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMedicalTranscriptionJobsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMedicalTranscriptionJobsOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMedicalTranscriptionJobsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListMedicalTranscriptionJobsOutputResponse(medicalTranscriptionJobSummaries: \(String(describing: medicalTranscriptionJobSummaries)), nextToken: \(String(describing: nextToken)), status: \(String(describing: status)))"}
}

extension ListMedicalTranscriptionJobsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListMedicalTranscriptionJobsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.medicalTranscriptionJobSummaries = output.medicalTranscriptionJobSummaries
            self.nextToken = output.nextToken
            self.status = output.status
        } else {
            self.medicalTranscriptionJobSummaries = nil
            self.nextToken = nil
            self.status = nil
        }
    }
}

public struct ListMedicalTranscriptionJobsOutputResponse: Equatable {
    /// <p>A list of objects containing summary information for a transcription job.</p>
    public let medicalTranscriptionJobSummaries: [MedicalTranscriptionJobSummary]?
    /// <p>The <code>ListMedicalTranscriptionJobs</code> operation returns a page of jobs at a
    ///             time. The maximum size of the page is set by the <code>MaxResults</code> parameter. If
    ///             the number of jobs exceeds what can fit on a page, Amazon Transcribe Medical returns the
    ///                 <code>NextPage</code> token. Include the token in the next request to the
    ///                 <code>ListMedicalTranscriptionJobs</code> operation to return in the next page of
    ///             jobs.</p>
    public let nextToken: String?
    /// <p>The requested status of the medical transcription jobs returned.</p>
    public let status: TranscriptionJobStatus?

    public init (
        medicalTranscriptionJobSummaries: [MedicalTranscriptionJobSummary]? = nil,
        nextToken: String? = nil,
        status: TranscriptionJobStatus? = nil
    )
    {
        self.medicalTranscriptionJobSummaries = medicalTranscriptionJobSummaries
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListMedicalTranscriptionJobsOutputResponseBody: Equatable {
    public let status: TranscriptionJobStatus?
    public let nextToken: String?
    public let medicalTranscriptionJobSummaries: [MedicalTranscriptionJobSummary]?
}

extension ListMedicalTranscriptionJobsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case medicalTranscriptionJobSummaries = "MedicalTranscriptionJobSummaries"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(TranscriptionJobStatus.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let medicalTranscriptionJobSummariesContainer = try containerValues.decodeIfPresent([MedicalTranscriptionJobSummary?].self, forKey: .medicalTranscriptionJobSummaries)
        var medicalTranscriptionJobSummariesDecoded0:[MedicalTranscriptionJobSummary]? = nil
        if let medicalTranscriptionJobSummariesContainer = medicalTranscriptionJobSummariesContainer {
            medicalTranscriptionJobSummariesDecoded0 = [MedicalTranscriptionJobSummary]()
            for structure0 in medicalTranscriptionJobSummariesContainer {
                if let structure0 = structure0 {
                    medicalTranscriptionJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        medicalTranscriptionJobSummaries = medicalTranscriptionJobSummariesDecoded0
    }
}

extension ListMedicalVocabulariesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListMedicalVocabulariesInput(maxResults: \(String(describing: maxResults)), nameContains: \(String(describing: nameContains)), nextToken: \(String(describing: nextToken)), stateEquals: \(String(describing: stateEquals)))"}
}

extension ListMedicalVocabulariesInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListMedicalVocabulariesInputHeadersMiddleware: Middleware {
    public let id: String = "ListMedicalVocabulariesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListMedicalVocabulariesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListMedicalVocabulariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListMedicalVocabulariesInput>
    public typealias MOutput = OperationOutput<ListMedicalVocabulariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListMedicalVocabulariesOutputError>
}

public struct ListMedicalVocabulariesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListMedicalVocabulariesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListMedicalVocabulariesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListMedicalVocabulariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListMedicalVocabulariesInput>
    public typealias MOutput = OperationOutput<ListMedicalVocabulariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListMedicalVocabulariesOutputError>
}

public struct ListMedicalVocabulariesInput: Equatable {
    /// <p>The
    ///             maximum number of vocabularies to return in the response.</p>
    public let maxResults: Int?
    /// <p>Returns vocabularies whose names contain the specified string. The search is not case
    ///             sensitive. <code>ListMedicalVocabularies</code> returns both
    ///                 "<code>vocabularyname</code>" and "<code>VocabularyName</code>".</p>
    public let nameContains: String?
    /// <p>If the result of your previous request to <code>ListMedicalVocabularies</code> was
    ///             truncated, include the <code>NextToken</code> to fetch the next set of
    ///             vocabularies.</p>
    public let nextToken: String?
    /// <p>When specified, returns only vocabularies
    ///             with
    ///             the <code>VocabularyState</code> equal to the specified vocabulary state. Use this field
    ///             to see which vocabularies are ready for your medical transcription
    ///             jobs.</p>
    public let stateEquals: VocabularyState?

    public init (
        maxResults: Int? = nil,
        nameContains: String? = nil,
        nextToken: String? = nil,
        stateEquals: VocabularyState? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.stateEquals = stateEquals
    }
}

struct ListMedicalVocabulariesInputBody: Equatable {
}

extension ListMedicalVocabulariesInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListMedicalVocabulariesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMedicalVocabulariesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMedicalVocabulariesOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMedicalVocabulariesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListMedicalVocabulariesOutputResponse(nextToken: \(String(describing: nextToken)), status: \(String(describing: status)), vocabularies: \(String(describing: vocabularies)))"}
}

extension ListMedicalVocabulariesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListMedicalVocabulariesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.status = output.status
            self.vocabularies = output.vocabularies
        } else {
            self.nextToken = nil
            self.status = nil
            self.vocabularies = nil
        }
    }
}

public struct ListMedicalVocabulariesOutputResponse: Equatable {
    /// <p>The <code>ListMedicalVocabularies</code> operation returns a page of vocabularies at a
    ///             time. You set the maximum number of vocabularies to return on a page with the
    ///                 <code>MaxResults</code> parameter. If there are more jobs in the list will fit on a
    ///             page, Amazon Transcribe Medical returns the <code>NextPage</code> token. To return the next page of
    ///             vocabularies, include the token in the next request to the
    ///                 <code>ListMedicalVocabularies</code> operation .</p>
    public let nextToken: String?
    /// <p>The requested vocabulary state.</p>
    public let status: VocabularyState?
    /// <p>A list of objects that describe the vocabularies that match your search
    ///             criteria.</p>
    public let vocabularies: [VocabularyInfo]?

    public init (
        nextToken: String? = nil,
        status: VocabularyState? = nil,
        vocabularies: [VocabularyInfo]? = nil
    )
    {
        self.nextToken = nextToken
        self.status = status
        self.vocabularies = vocabularies
    }
}

struct ListMedicalVocabulariesOutputResponseBody: Equatable {
    public let status: VocabularyState?
    public let nextToken: String?
    public let vocabularies: [VocabularyInfo]?
}

extension ListMedicalVocabulariesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case status = "Status"
        case vocabularies = "Vocabularies"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(VocabularyState.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let vocabulariesContainer = try containerValues.decodeIfPresent([VocabularyInfo?].self, forKey: .vocabularies)
        var vocabulariesDecoded0:[VocabularyInfo]? = nil
        if let vocabulariesContainer = vocabulariesContainer {
            vocabulariesDecoded0 = [VocabularyInfo]()
            for structure0 in vocabulariesContainer {
                if let structure0 = structure0 {
                    vocabulariesDecoded0?.append(structure0)
                }
            }
        }
        vocabularies = vocabulariesDecoded0
    }
}

extension ListTranscriptionJobsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTranscriptionJobsInput(jobNameContains: \(String(describing: jobNameContains)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), status: \(String(describing: status)))"}
}

extension ListTranscriptionJobsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListTranscriptionJobsInputHeadersMiddleware: Middleware {
    public let id: String = "ListTranscriptionJobsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTranscriptionJobsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTranscriptionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTranscriptionJobsInput>
    public typealias MOutput = OperationOutput<ListTranscriptionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTranscriptionJobsOutputError>
}

public struct ListTranscriptionJobsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTranscriptionJobsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTranscriptionJobsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTranscriptionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTranscriptionJobsInput>
    public typealias MOutput = OperationOutput<ListTranscriptionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTranscriptionJobsOutputError>
}

public struct ListTranscriptionJobsInput: Equatable {
    /// <p>When specified, the jobs returned in the list are limited to jobs whose name contains
    ///             the specified string.</p>
    public let jobNameContains: String?
    /// <p>The maximum number of jobs to return in the response. If there are fewer results in
    ///             the list, this response contains only the actual results.</p>
    public let maxResults: Int?
    /// <p>If the result of the previous request to <code>ListTranscriptionJobs</code> was
    ///             truncated, include the <code>NextToken</code> to fetch the next set of jobs.</p>
    public let nextToken: String?
    /// <p>When specified, returns only transcription jobs with the specified status. Jobs are
    ///             ordered by creation date, with the newest jobs returned first. If you don’t specify a
    ///             status, Amazon Transcribe returns all transcription jobs ordered by creation date. </p>
    public let status: TranscriptionJobStatus?

    public init (
        jobNameContains: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        status: TranscriptionJobStatus? = nil
    )
    {
        self.jobNameContains = jobNameContains
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListTranscriptionJobsInputBody: Equatable {
}

extension ListTranscriptionJobsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListTranscriptionJobsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTranscriptionJobsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTranscriptionJobsOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTranscriptionJobsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTranscriptionJobsOutputResponse(nextToken: \(String(describing: nextToken)), status: \(String(describing: status)), transcriptionJobSummaries: \(String(describing: transcriptionJobSummaries)))"}
}

extension ListTranscriptionJobsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListTranscriptionJobsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.status = output.status
            self.transcriptionJobSummaries = output.transcriptionJobSummaries
        } else {
            self.nextToken = nil
            self.status = nil
            self.transcriptionJobSummaries = nil
        }
    }
}

public struct ListTranscriptionJobsOutputResponse: Equatable {
    /// <p>The <code>ListTranscriptionJobs</code> operation returns a page of jobs at a time. The
    ///             maximum size of the page is set by the <code>MaxResults</code> parameter. If there are
    ///             more jobs in the list than the page size, Amazon Transcribe returns the <code>NextPage</code> token.
    ///             Include the token in the next request to the <code>ListTranscriptionJobs</code>
    ///             operation to return in the next page of jobs.</p>
    public let nextToken: String?
    /// <p>The requested status of the jobs returned.</p>
    public let status: TranscriptionJobStatus?
    /// <p>A list of objects containing summary information for a transcription job.</p>
    public let transcriptionJobSummaries: [TranscriptionJobSummary]?

    public init (
        nextToken: String? = nil,
        status: TranscriptionJobStatus? = nil,
        transcriptionJobSummaries: [TranscriptionJobSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.status = status
        self.transcriptionJobSummaries = transcriptionJobSummaries
    }
}

struct ListTranscriptionJobsOutputResponseBody: Equatable {
    public let status: TranscriptionJobStatus?
    public let nextToken: String?
    public let transcriptionJobSummaries: [TranscriptionJobSummary]?
}

extension ListTranscriptionJobsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case status = "Status"
        case transcriptionJobSummaries = "TranscriptionJobSummaries"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(TranscriptionJobStatus.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let transcriptionJobSummariesContainer = try containerValues.decodeIfPresent([TranscriptionJobSummary?].self, forKey: .transcriptionJobSummaries)
        var transcriptionJobSummariesDecoded0:[TranscriptionJobSummary]? = nil
        if let transcriptionJobSummariesContainer = transcriptionJobSummariesContainer {
            transcriptionJobSummariesDecoded0 = [TranscriptionJobSummary]()
            for structure0 in transcriptionJobSummariesContainer {
                if let structure0 = structure0 {
                    transcriptionJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        transcriptionJobSummaries = transcriptionJobSummariesDecoded0
    }
}

extension ListVocabulariesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListVocabulariesInput(maxResults: \(String(describing: maxResults)), nameContains: \(String(describing: nameContains)), nextToken: \(String(describing: nextToken)), stateEquals: \(String(describing: stateEquals)))"}
}

extension ListVocabulariesInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListVocabulariesInputHeadersMiddleware: Middleware {
    public let id: String = "ListVocabulariesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListVocabulariesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListVocabulariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListVocabulariesInput>
    public typealias MOutput = OperationOutput<ListVocabulariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListVocabulariesOutputError>
}

public struct ListVocabulariesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListVocabulariesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListVocabulariesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListVocabulariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListVocabulariesInput>
    public typealias MOutput = OperationOutput<ListVocabulariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListVocabulariesOutputError>
}

public struct ListVocabulariesInput: Equatable {
    /// <p>The maximum number of vocabularies to return in the response. If there are fewer
    ///             results in the list, this response contains only the actual results.</p>
    public let maxResults: Int?
    /// <p>When specified, the vocabularies returned in the list are limited to vocabularies
    ///             whose name contains the specified string. The search is not case sensitive,
    ///                 <code>ListVocabularies</code> returns both "vocabularyname" and "VocabularyName" in
    ///             the response list.</p>
    public let nameContains: String?
    /// <p>If the result of the previous request to <code>ListVocabularies</code> was truncated,
    ///             include the <code>NextToken</code> to fetch the next set of jobs.</p>
    public let nextToken: String?
    /// <p>When specified, only returns vocabularies with the <code>VocabularyState</code> field
    ///             equal to the specified state.</p>
    public let stateEquals: VocabularyState?

    public init (
        maxResults: Int? = nil,
        nameContains: String? = nil,
        nextToken: String? = nil,
        stateEquals: VocabularyState? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.stateEquals = stateEquals
    }
}

struct ListVocabulariesInputBody: Equatable {
}

extension ListVocabulariesInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListVocabulariesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVocabulariesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListVocabulariesOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVocabulariesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListVocabulariesOutputResponse(nextToken: \(String(describing: nextToken)), status: \(String(describing: status)), vocabularies: \(String(describing: vocabularies)))"}
}

extension ListVocabulariesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListVocabulariesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.status = output.status
            self.vocabularies = output.vocabularies
        } else {
            self.nextToken = nil
            self.status = nil
            self.vocabularies = nil
        }
    }
}

public struct ListVocabulariesOutputResponse: Equatable {
    /// <p>The <code>ListVocabularies</code> operation returns a page of vocabularies at a time.
    ///             The maximum size of the page is set in the <code>MaxResults</code> parameter. If there
    ///             are more jobs in the list than will fit on the page, Amazon Transcribe returns the
    ///                 <code>NextPage</code> token. To return in the next page of jobs, include the token
    ///             in the next request to the <code>ListVocabularies</code> operation.</p>
    public let nextToken: String?
    /// <p>The requested vocabulary state.</p>
    public let status: VocabularyState?
    /// <p>A list of objects that describe the vocabularies that match the search criteria in the
    ///             request.</p>
    public let vocabularies: [VocabularyInfo]?

    public init (
        nextToken: String? = nil,
        status: VocabularyState? = nil,
        vocabularies: [VocabularyInfo]? = nil
    )
    {
        self.nextToken = nextToken
        self.status = status
        self.vocabularies = vocabularies
    }
}

struct ListVocabulariesOutputResponseBody: Equatable {
    public let status: VocabularyState?
    public let nextToken: String?
    public let vocabularies: [VocabularyInfo]?
}

extension ListVocabulariesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case status = "Status"
        case vocabularies = "Vocabularies"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(VocabularyState.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let vocabulariesContainer = try containerValues.decodeIfPresent([VocabularyInfo?].self, forKey: .vocabularies)
        var vocabulariesDecoded0:[VocabularyInfo]? = nil
        if let vocabulariesContainer = vocabulariesContainer {
            vocabulariesDecoded0 = [VocabularyInfo]()
            for structure0 in vocabulariesContainer {
                if let structure0 = structure0 {
                    vocabulariesDecoded0?.append(structure0)
                }
            }
        }
        vocabularies = vocabulariesDecoded0
    }
}

extension ListVocabularyFiltersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListVocabularyFiltersInput(maxResults: \(String(describing: maxResults)), nameContains: \(String(describing: nameContains)), nextToken: \(String(describing: nextToken)))"}
}

extension ListVocabularyFiltersInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListVocabularyFiltersInputHeadersMiddleware: Middleware {
    public let id: String = "ListVocabularyFiltersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListVocabularyFiltersInput>,
                  next: H) -> Swift.Result<OperationOutput<ListVocabularyFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListVocabularyFiltersInput>
    public typealias MOutput = OperationOutput<ListVocabularyFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListVocabularyFiltersOutputError>
}

public struct ListVocabularyFiltersInputQueryItemMiddleware: Middleware {
    public let id: String = "ListVocabularyFiltersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListVocabularyFiltersInput>,
                  next: H) -> Swift.Result<OperationOutput<ListVocabularyFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListVocabularyFiltersInput>
    public typealias MOutput = OperationOutput<ListVocabularyFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListVocabularyFiltersOutputError>
}

public struct ListVocabularyFiltersInput: Equatable {
    /// <p>The maximum number of filters to return in the response. If there are fewer results in
    ///             the list, this response contains only the actual results.</p>
    public let maxResults: Int?
    /// <p>Filters the response so that it only contains vocabulary filters whose name contains
    ///             the specified string.</p>
    public let nameContains: String?
    /// <p>If the result of the previous request to <code>ListVocabularyFilters</code> was
    ///             truncated, include the <code>NextToken</code> to fetch the next set of
    ///             collections.</p>
    public let nextToken: String?

    public init (
        maxResults: Int? = nil,
        nameContains: String? = nil,
        nextToken: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}

struct ListVocabularyFiltersInputBody: Equatable {
}

extension ListVocabularyFiltersInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListVocabularyFiltersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVocabularyFiltersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListVocabularyFiltersOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVocabularyFiltersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListVocabularyFiltersOutputResponse(nextToken: \(String(describing: nextToken)), vocabularyFilters: \(String(describing: vocabularyFilters)))"}
}

extension ListVocabularyFiltersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListVocabularyFiltersOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.vocabularyFilters = output.vocabularyFilters
        } else {
            self.nextToken = nil
            self.vocabularyFilters = nil
        }
    }
}

public struct ListVocabularyFiltersOutputResponse: Equatable {
    /// <p>The <code>ListVocabularyFilters</code> operation returns a page of collections at a
    ///             time. The maximum size of the page is set by the <code>MaxResults</code> parameter. If
    ///             there are more jobs in the list than the page size, Amazon Transcribe returns the
    ///                 <code>NextPage</code> token. Include the token in the next request to the
    ///                 <code>ListVocabularyFilters</code> operation to return in the next page of
    ///             jobs.</p>
    public let nextToken: String?
    /// <p>The list of vocabulary filters. It contains at most <code>MaxResults</code> number of
    ///             filters. If there are more filters, call the <code>ListVocabularyFilters</code>
    ///             operation again with the <code>NextToken</code> parameter in the request set to the
    ///             value of the <code>NextToken</code> field in the response.</p>
    public let vocabularyFilters: [VocabularyFilterInfo]?

    public init (
        nextToken: String? = nil,
        vocabularyFilters: [VocabularyFilterInfo]? = nil
    )
    {
        self.nextToken = nextToken
        self.vocabularyFilters = vocabularyFilters
    }
}

struct ListVocabularyFiltersOutputResponseBody: Equatable {
    public let nextToken: String?
    public let vocabularyFilters: [VocabularyFilterInfo]?
}

extension ListVocabularyFiltersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case vocabularyFilters = "VocabularyFilters"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let vocabularyFiltersContainer = try containerValues.decodeIfPresent([VocabularyFilterInfo?].self, forKey: .vocabularyFilters)
        var vocabularyFiltersDecoded0:[VocabularyFilterInfo]? = nil
        if let vocabularyFiltersContainer = vocabularyFiltersContainer {
            vocabularyFiltersDecoded0 = [VocabularyFilterInfo]()
            for structure0 in vocabularyFiltersContainer {
                if let structure0 = structure0 {
                    vocabularyFiltersDecoded0?.append(structure0)
                }
            }
        }
        vocabularyFilters = vocabularyFiltersDecoded0
    }
}

extension Media: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case mediaFileUri = "MediaFileUri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mediaFileUri = mediaFileUri {
            try encodeContainer.encode(mediaFileUri, forKey: .mediaFileUri)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mediaFileUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mediaFileUri)
        mediaFileUri = mediaFileUriDecoded
    }
}

extension Media: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Media(mediaFileUri: \(String(describing: mediaFileUri)))"}
}

/// <p>Describes the input media file in a transcription request.</p>
public struct Media: Equatable {
    /// <p>The S3 object location of the input media file. The URI must be in the same region as
    ///             the API endpoint that you are calling. The general form is:</p>
    ///
    ///         <p>For example:</p>
    ///
    ///
    ///         <p>For more information about S3 object names, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys">Object Keys</a> in the <i>Amazon S3 Developer Guide</i>.</p>
    public let mediaFileUri: String?

    public init (
        mediaFileUri: String? = nil
    )
    {
        self.mediaFileUri = mediaFileUri
    }
}

public enum MediaFormat {
    case amr
    case flac
    case mp3
    case mp4
    case ogg
    case wav
    case webm
    case sdkUnknown(String)
}

extension MediaFormat : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MediaFormat] {
        return [
            .amr,
            .flac,
            .mp3,
            .mp4,
            .ogg,
            .wav,
            .webm,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .amr: return "amr"
        case .flac: return "flac"
        case .mp3: return "mp3"
        case .mp4: return "mp4"
        case .ogg: return "ogg"
        case .wav: return "wav"
        case .webm: return "webm"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MediaFormat(rawValue: rawValue) ?? MediaFormat.sdkUnknown(rawValue)
    }
}

public enum MedicalContentIdentificationType {
    case phi
    case sdkUnknown(String)
}

extension MedicalContentIdentificationType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MedicalContentIdentificationType] {
        return [
            .phi,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .phi: return "PHI"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MedicalContentIdentificationType(rawValue: rawValue) ?? MedicalContentIdentificationType.sdkUnknown(rawValue)
    }
}

extension MedicalTranscript: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case transcriptFileUri = "TranscriptFileUri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let transcriptFileUri = transcriptFileUri {
            try encodeContainer.encode(transcriptFileUri, forKey: .transcriptFileUri)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptFileUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transcriptFileUri)
        transcriptFileUri = transcriptFileUriDecoded
    }
}

extension MedicalTranscript: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MedicalTranscript(transcriptFileUri: \(String(describing: transcriptFileUri)))"}
}

/// <p>Identifies the location of a medical transcript.</p>
public struct MedicalTranscript: Equatable {
    /// <p>The S3 object location of the medical transcript.</p>
    ///         <p>Use this URI to access the medical transcript. This URI points to the S3 bucket you
    ///             created to store the medical transcript.</p>
    public let transcriptFileUri: String?

    public init (
        transcriptFileUri: String? = nil
    )
    {
        self.transcriptFileUri = transcriptFileUri
    }
}

extension MedicalTranscriptionJob: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case completionTime = "CompletionTime"
        case contentIdentificationType = "ContentIdentificationType"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case medicalTranscriptionJobName = "MedicalTranscriptionJobName"
        case settings = "Settings"
        case specialty = "Specialty"
        case startTime = "StartTime"
        case transcript = "Transcript"
        case transcriptionJobStatus = "TranscriptionJobStatus"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let contentIdentificationType = contentIdentificationType {
            try encodeContainer.encode(contentIdentificationType.rawValue, forKey: .contentIdentificationType)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let media = media {
            try encodeContainer.encode(media, forKey: .media)
        }
        if let mediaFormat = mediaFormat {
            try encodeContainer.encode(mediaFormat.rawValue, forKey: .mediaFormat)
        }
        if let mediaSampleRateHertz = mediaSampleRateHertz {
            try encodeContainer.encode(mediaSampleRateHertz, forKey: .mediaSampleRateHertz)
        }
        if let medicalTranscriptionJobName = medicalTranscriptionJobName {
            try encodeContainer.encode(medicalTranscriptionJobName, forKey: .medicalTranscriptionJobName)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let specialty = specialty {
            try encodeContainer.encode(specialty.rawValue, forKey: .specialty)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let transcript = transcript {
            try encodeContainer.encode(transcript, forKey: .transcript)
        }
        if let transcriptionJobStatus = transcriptionJobStatus {
            try encodeContainer.encode(transcriptionJobStatus.rawValue, forKey: .transcriptionJobStatus)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let medicalTranscriptionJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .medicalTranscriptionJobName)
        medicalTranscriptionJobName = medicalTranscriptionJobNameDecoded
        let transcriptionJobStatusDecoded = try containerValues.decodeIfPresent(TranscriptionJobStatus.self, forKey: .transcriptionJobStatus)
        transcriptionJobStatus = transcriptionJobStatusDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let mediaSampleRateHertzDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .mediaSampleRateHertz)
        mediaSampleRateHertz = mediaSampleRateHertzDecoded
        let mediaFormatDecoded = try containerValues.decodeIfPresent(MediaFormat.self, forKey: .mediaFormat)
        mediaFormat = mediaFormatDecoded
        let mediaDecoded = try containerValues.decodeIfPresent(Media.self, forKey: .media)
        media = mediaDecoded
        let transcriptDecoded = try containerValues.decodeIfPresent(MedicalTranscript.self, forKey: .transcript)
        transcript = transcriptDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(MedicalTranscriptionSetting.self, forKey: .settings)
        settings = settingsDecoded
        let contentIdentificationTypeDecoded = try containerValues.decodeIfPresent(MedicalContentIdentificationType.self, forKey: .contentIdentificationType)
        contentIdentificationType = contentIdentificationTypeDecoded
        let specialtyDecoded = try containerValues.decodeIfPresent(Specialty.self, forKey: .specialty)
        specialty = specialtyDecoded
        let typeDecoded = try containerValues.decodeIfPresent(`Type`.self, forKey: .type)
        type = typeDecoded
    }
}

extension MedicalTranscriptionJob: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MedicalTranscriptionJob(completionTime: \(String(describing: completionTime)), contentIdentificationType: \(String(describing: contentIdentificationType)), creationTime: \(String(describing: creationTime)), failureReason: \(String(describing: failureReason)), languageCode: \(String(describing: languageCode)), media: \(String(describing: media)), mediaFormat: \(String(describing: mediaFormat)), mediaSampleRateHertz: \(String(describing: mediaSampleRateHertz)), medicalTranscriptionJobName: \(String(describing: medicalTranscriptionJobName)), settings: \(String(describing: settings)), specialty: \(String(describing: specialty)), startTime: \(String(describing: startTime)), transcript: \(String(describing: transcript)), transcriptionJobStatus: \(String(describing: transcriptionJobStatus)), type: \(String(describing: type)))"}
}

/// <p>The data structure that contains the information for a medical transcription
///             job.</p>
public struct MedicalTranscriptionJob: Equatable {
    /// <p>A timestamp that shows when the job was completed.</p>
    public let completionTime: Date?
    /// <p>Shows the type of content that you've configured Amazon Transcribe Medical to identify in a transcription
    ///             job. If the value is <code>PHI</code>, you've configured the job to identify personal
    ///             health information (PHI) in the transcription output.</p>
    public let contentIdentificationType: MedicalContentIdentificationType?
    /// <p>A timestamp that shows when the job was created.</p>
    public let creationTime: Date?
    /// <p>If the <code>TranscriptionJobStatus</code> field is <code>FAILED</code>, this field
    ///             contains information about why the job failed.</p>
    ///         <p>The <code>FailureReason</code> field contains one of the following values:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>Unsupported media format</code>- The media format specified in the
    ///                         <code>MediaFormat</code> field of the request isn't valid. See the
    ///                     description of the <code>MediaFormat</code> field for a list of valid
    ///                     values.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>The media format provided does not match the detected media
    ///                         format</code>- The media format of the audio file doesn't match the format
    ///                     specified in the <code>MediaFormat</code> field in the request. Check the media
    ///                     format of your media file and make sure the two values match.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Invalid sample rate for audio file</code>- The sample rate specified in
    ///                     the <code>MediaSampleRateHertz</code> of the request isn't valid. The sample
    ///                     rate must be between 8000 and 48000 Hertz.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>The sample rate provided does not match the detected sample rate</code>-
    ///                     The sample rate in the audio file doesn't match the sample rate specified in the
    ///                         <code>MediaSampleRateHertz</code> field in the request. Check the sample
    ///                     rate of your media file and make sure that the two values match.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Invalid file size: file size too large</code>- The size of your audio
    ///                     file is larger than what Amazon Transcribe Medical can process. For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/limits-guidelines.html#limits">Guidelines and
    ///                         Quotas</a> in the <i>Amazon Transcribe Medical Guide</i>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Invalid number of channels: number of channels too large</code>- Your
    ///                     audio contains more channels than Amazon Transcribe Medical is configured to process. To request
    ///                     additional channels, see <a href="https://docs.aws.amazon.com/general/latest/gr/transcribe-medical.html">Amazon Transcribe Medical Endpoints and
    ///                         Quotas</a> in the <i>Amazon Web Services General
    ///                         Reference</i>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let failureReason: String?
    /// <p>The language code for the language spoken in the source audio file. US English (en-US)
    ///             is the only supported language for medical transcriptions. Any other value you enter for
    ///             language code results in a <code>BadRequestException</code> error.</p>
    public let languageCode: LanguageCode?
    /// <p>Describes the input media file in a transcription request.</p>
    public let media: Media?
    /// <p>The format of the input media file.</p>
    public let mediaFormat: MediaFormat?
    /// <p>The sample rate, in Hertz, of the source audio containing medical information.</p>
    ///         <p>If you don't specify the sample rate, Amazon Transcribe Medical determines it for you. If you choose to
    ///             specify the sample rate, it must match the rate detected by Amazon Transcribe Medical. In most cases, you
    ///             should leave the <code>MediaSampleHertz</code> blank and let Amazon Transcribe Medical determine the sample
    ///             rate.</p>
    public let mediaSampleRateHertz: Int?
    /// <p>The name for a given medical transcription job.</p>
    public let medicalTranscriptionJobName: String?
    /// <p>Object that contains  object.</p>
    public let settings: MedicalTranscriptionSetting?
    /// <p>The medical specialty of any clinicians providing a dictation or having a
    ///             conversation. <code>PRIMARYCARE</code> is the only available setting for this object.
    ///             This specialty enables you to generate transcriptions for the following medical
    ///             fields:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Family Medicine</p>
    ///             </li>
    ///          </ul>
    public let specialty: Specialty?
    /// <p>A timestamp that shows when the job started processing.</p>
    public let startTime: Date?
    /// <p>An object that contains the <code>MedicalTranscript</code>. The
    ///                 <code>MedicalTranscript</code> contains the <code>TranscriptFileUri</code>.</p>
    public let transcript: MedicalTranscript?
    /// <p>The completion status of a medical transcription job.</p>
    public let transcriptionJobStatus: TranscriptionJobStatus?
    /// <p>The type of speech in the transcription job. <code>CONVERSATION</code> is generally
    ///             used for patient-physician dialogues. <code>DICTATION</code> is the setting for
    ///             physicians speaking their notes after seeing a patient. For more information, see <a>how-it-works-med</a>
    ///          </p>
    public let type: `Type`?

    public init (
        completionTime: Date? = nil,
        contentIdentificationType: MedicalContentIdentificationType? = nil,
        creationTime: Date? = nil,
        failureReason: String? = nil,
        languageCode: LanguageCode? = nil,
        media: Media? = nil,
        mediaFormat: MediaFormat? = nil,
        mediaSampleRateHertz: Int? = nil,
        medicalTranscriptionJobName: String? = nil,
        settings: MedicalTranscriptionSetting? = nil,
        specialty: Specialty? = nil,
        startTime: Date? = nil,
        transcript: MedicalTranscript? = nil,
        transcriptionJobStatus: TranscriptionJobStatus? = nil,
        type: `Type`? = nil
    )
    {
        self.completionTime = completionTime
        self.contentIdentificationType = contentIdentificationType
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.languageCode = languageCode
        self.media = media
        self.mediaFormat = mediaFormat
        self.mediaSampleRateHertz = mediaSampleRateHertz
        self.medicalTranscriptionJobName = medicalTranscriptionJobName
        self.settings = settings
        self.specialty = specialty
        self.startTime = startTime
        self.transcript = transcript
        self.transcriptionJobStatus = transcriptionJobStatus
        self.type = type
    }
}

extension MedicalTranscriptionJobSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case completionTime = "CompletionTime"
        case contentIdentificationType = "ContentIdentificationType"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case medicalTranscriptionJobName = "MedicalTranscriptionJobName"
        case outputLocationType = "OutputLocationType"
        case specialty = "Specialty"
        case startTime = "StartTime"
        case transcriptionJobStatus = "TranscriptionJobStatus"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let contentIdentificationType = contentIdentificationType {
            try encodeContainer.encode(contentIdentificationType.rawValue, forKey: .contentIdentificationType)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let medicalTranscriptionJobName = medicalTranscriptionJobName {
            try encodeContainer.encode(medicalTranscriptionJobName, forKey: .medicalTranscriptionJobName)
        }
        if let outputLocationType = outputLocationType {
            try encodeContainer.encode(outputLocationType.rawValue, forKey: .outputLocationType)
        }
        if let specialty = specialty {
            try encodeContainer.encode(specialty.rawValue, forKey: .specialty)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let transcriptionJobStatus = transcriptionJobStatus {
            try encodeContainer.encode(transcriptionJobStatus.rawValue, forKey: .transcriptionJobStatus)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let medicalTranscriptionJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .medicalTranscriptionJobName)
        medicalTranscriptionJobName = medicalTranscriptionJobNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let transcriptionJobStatusDecoded = try containerValues.decodeIfPresent(TranscriptionJobStatus.self, forKey: .transcriptionJobStatus)
        transcriptionJobStatus = transcriptionJobStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let outputLocationTypeDecoded = try containerValues.decodeIfPresent(OutputLocationType.self, forKey: .outputLocationType)
        outputLocationType = outputLocationTypeDecoded
        let specialtyDecoded = try containerValues.decodeIfPresent(Specialty.self, forKey: .specialty)
        specialty = specialtyDecoded
        let contentIdentificationTypeDecoded = try containerValues.decodeIfPresent(MedicalContentIdentificationType.self, forKey: .contentIdentificationType)
        contentIdentificationType = contentIdentificationTypeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(`Type`.self, forKey: .type)
        type = typeDecoded
    }
}

extension MedicalTranscriptionJobSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MedicalTranscriptionJobSummary(completionTime: \(String(describing: completionTime)), contentIdentificationType: \(String(describing: contentIdentificationType)), creationTime: \(String(describing: creationTime)), failureReason: \(String(describing: failureReason)), languageCode: \(String(describing: languageCode)), medicalTranscriptionJobName: \(String(describing: medicalTranscriptionJobName)), outputLocationType: \(String(describing: outputLocationType)), specialty: \(String(describing: specialty)), startTime: \(String(describing: startTime)), transcriptionJobStatus: \(String(describing: transcriptionJobStatus)), type: \(String(describing: type)))"}
}

/// <p>Provides summary information about a transcription job.</p>
public struct MedicalTranscriptionJobSummary: Equatable {
    /// <p>A timestamp that shows when the job was completed.</p>
    public let completionTime: Date?
    /// <p>Shows the type of information you've configured Amazon Transcribe Medical to identify in a transcription
    ///             job. If the value is <code>PHI</code>, you've configured the transcription job to identify
    ///             personal health information (PHI).</p>
    public let contentIdentificationType: MedicalContentIdentificationType?
    /// <p>A timestamp that shows when the medical transcription job was created.</p>
    public let creationTime: Date?
    /// <p>If the <code>TranscriptionJobStatus</code> field is <code>FAILED</code>, a description
    ///             of the error.</p>
    public let failureReason: String?
    /// <p>The language of the transcript in the source audio file.</p>
    public let languageCode: LanguageCode?
    /// <p>The name of a medical transcription job.</p>
    public let medicalTranscriptionJobName: String?
    /// <p>Indicates the location of the transcription job's output.</p>
    ///         <p>The <code>CUSTOMER_BUCKET</code> is the S3 location provided in the
    ///                 <code>OutputBucketName</code> field when the </p>
    public let outputLocationType: OutputLocationType?
    /// <p>The medical specialty of the transcription job. <code>Primary care</code> is the only
    ///             valid value.</p>
    public let specialty: Specialty?
    /// <p>A timestamp that shows when the job began processing.</p>
    public let startTime: Date?
    /// <p>The status of the medical transcription job.</p>
    public let transcriptionJobStatus: TranscriptionJobStatus?
    /// <p>The speech of the clinician in the input audio.</p>
    public let type: `Type`?

    public init (
        completionTime: Date? = nil,
        contentIdentificationType: MedicalContentIdentificationType? = nil,
        creationTime: Date? = nil,
        failureReason: String? = nil,
        languageCode: LanguageCode? = nil,
        medicalTranscriptionJobName: String? = nil,
        outputLocationType: OutputLocationType? = nil,
        specialty: Specialty? = nil,
        startTime: Date? = nil,
        transcriptionJobStatus: TranscriptionJobStatus? = nil,
        type: `Type`? = nil
    )
    {
        self.completionTime = completionTime
        self.contentIdentificationType = contentIdentificationType
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.languageCode = languageCode
        self.medicalTranscriptionJobName = medicalTranscriptionJobName
        self.outputLocationType = outputLocationType
        self.specialty = specialty
        self.startTime = startTime
        self.transcriptionJobStatus = transcriptionJobStatus
        self.type = type
    }
}

extension MedicalTranscriptionSetting: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelIdentification = "ChannelIdentification"
        case maxAlternatives = "MaxAlternatives"
        case maxSpeakerLabels = "MaxSpeakerLabels"
        case showAlternatives = "ShowAlternatives"
        case showSpeakerLabels = "ShowSpeakerLabels"
        case vocabularyName = "VocabularyName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelIdentification = channelIdentification {
            try encodeContainer.encode(channelIdentification, forKey: .channelIdentification)
        }
        if let maxAlternatives = maxAlternatives {
            try encodeContainer.encode(maxAlternatives, forKey: .maxAlternatives)
        }
        if let maxSpeakerLabels = maxSpeakerLabels {
            try encodeContainer.encode(maxSpeakerLabels, forKey: .maxSpeakerLabels)
        }
        if let showAlternatives = showAlternatives {
            try encodeContainer.encode(showAlternatives, forKey: .showAlternatives)
        }
        if let showSpeakerLabels = showSpeakerLabels {
            try encodeContainer.encode(showSpeakerLabels, forKey: .showSpeakerLabels)
        }
        if let vocabularyName = vocabularyName {
            try encodeContainer.encode(vocabularyName, forKey: .vocabularyName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let showSpeakerLabelsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .showSpeakerLabels)
        showSpeakerLabels = showSpeakerLabelsDecoded
        let maxSpeakerLabelsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxSpeakerLabels)
        maxSpeakerLabels = maxSpeakerLabelsDecoded
        let channelIdentificationDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .channelIdentification)
        channelIdentification = channelIdentificationDecoded
        let showAlternativesDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .showAlternatives)
        showAlternatives = showAlternativesDecoded
        let maxAlternativesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxAlternatives)
        maxAlternatives = maxAlternativesDecoded
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
    }
}

extension MedicalTranscriptionSetting: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MedicalTranscriptionSetting(channelIdentification: \(String(describing: channelIdentification)), maxAlternatives: \(String(describing: maxAlternatives)), maxSpeakerLabels: \(String(describing: maxSpeakerLabels)), showAlternatives: \(String(describing: showAlternatives)), showSpeakerLabels: \(String(describing: showSpeakerLabels)), vocabularyName: \(String(describing: vocabularyName)))"}
}

/// <p>Optional settings for the <a>StartMedicalTranscriptionJob</a>
///             operation.</p>
public struct MedicalTranscriptionSetting: Equatable {
    /// <p>Instructs Amazon Transcribe Medical to process each audio channel separately and then merge the
    ///             transcription output of each channel into a single transcription.</p>
    ///         <p>Amazon Transcribe Medical also produces a transcription of each item detected on an audio channel,
    ///             including the start time and end time of the item and alternative transcriptions of
    ///             item. The alternative transcriptions also come with confidence scores provided by
    ///             Amazon Transcribe Medical.</p>
    ///         <p>You can't set both <code>ShowSpeakerLabels</code> and
    ///                 <code>ChannelIdentification</code> in the same request. If you set both, your
    ///             request returns a <code>BadRequestException</code>
    ///          </p>
    public let channelIdentification: Bool?
    /// <p>The maximum number of alternatives that you tell the service to return. If you specify
    ///             the <code>MaxAlternatives</code> field, you must set the <code>ShowAlternatives</code>
    ///             field to true.</p>
    public let maxAlternatives: Int?
    /// <p>The maximum number of speakers to identify in the input audio. If there are more
    ///             speakers in the audio than this number, multiple speakers are identified as a single
    ///             speaker. If you specify the <code>MaxSpeakerLabels</code> field, you must set the
    ///                 <code>ShowSpeakerLabels</code> field to true.</p>
    public let maxSpeakerLabels: Int?
    /// <p>Determines whether alternative transcripts are generated along with the transcript
    ///             that has the highest confidence. If you set <code>ShowAlternatives</code> field to true,
    ///             you must also set the maximum number of alternatives to return in the
    ///                 <code>MaxAlternatives</code> field.</p>
    public let showAlternatives: Bool?
    /// <p>Determines whether the transcription job uses speaker recognition to identify
    ///             different speakers in the input audio. Speaker recognition labels individual speakers in
    ///             the audio file. If you set the <code>ShowSpeakerLabels</code> field to true, you must
    ///             also set the maximum number of speaker labels in the <code>MaxSpeakerLabels</code>
    ///             field.</p>
    ///         <p>You can't set both <code>ShowSpeakerLabels</code> and
    ///                 <code>ChannelIdentification</code> in the same request. If you set both, your
    ///             request returns a <code>BadRequestException</code>.</p>
    public let showSpeakerLabels: Bool?
    /// <p>The name of the vocabulary to use when processing a medical transcription job.</p>
    public let vocabularyName: String?

    public init (
        channelIdentification: Bool? = nil,
        maxAlternatives: Int? = nil,
        maxSpeakerLabels: Int? = nil,
        showAlternatives: Bool? = nil,
        showSpeakerLabels: Bool? = nil,
        vocabularyName: String? = nil
    )
    {
        self.channelIdentification = channelIdentification
        self.maxAlternatives = maxAlternatives
        self.maxSpeakerLabels = maxSpeakerLabels
        self.showAlternatives = showAlternatives
        self.showSpeakerLabels = showSpeakerLabels
        self.vocabularyName = vocabularyName
    }
}

extension ModelSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case languageModelName = "LanguageModelName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageModelName = languageModelName {
            try encodeContainer.encode(languageModelName, forKey: .languageModelName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageModelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .languageModelName)
        languageModelName = languageModelNameDecoded
    }
}

extension ModelSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModelSettings(languageModelName: \(String(describing: languageModelName)))"}
}

/// <p>The object used to call your custom language model to your transcription job.</p>
public struct ModelSettings: Equatable {
    /// <p>The name of your custom language model.</p>
    public let languageModelName: String?

    public init (
        languageModelName: String? = nil
    )
    {
        self.languageModelName = languageModelName
    }
}

public enum ModelStatus {
    case completed
    case failed
    case inProgress
    case sdkUnknown(String)
}

extension ModelStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ModelStatus] {
        return [
            .completed,
            .failed,
            .inProgress,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .completed: return "COMPLETED"
        case .failed: return "FAILED"
        case .inProgress: return "IN_PROGRESS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ModelStatus(rawValue: rawValue) ?? ModelStatus.sdkUnknown(rawValue)
    }
}

extension NotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NotFoundException(message: \(String(describing: message)))"}
}

extension NotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>We can't find the requested resource. Check the name and try your request
///             again.</p>
public struct NotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Equatable {
    public let message: String?
}

extension NotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum OutputLocationType {
    case customerBucket
    case serviceBucket
    case sdkUnknown(String)
}

extension OutputLocationType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OutputLocationType] {
        return [
            .customerBucket,
            .serviceBucket,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .customerBucket: return "CUSTOMER_BUCKET"
        case .serviceBucket: return "SERVICE_BUCKET"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OutputLocationType(rawValue: rawValue) ?? OutputLocationType.sdkUnknown(rawValue)
    }
}

public enum RedactionOutput {
    case redacted
    case redactedAndUnredacted
    case sdkUnknown(String)
}

extension RedactionOutput : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RedactionOutput] {
        return [
            .redacted,
            .redactedAndUnredacted,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .redacted: return "redacted"
        case .redactedAndUnredacted: return "redacted_and_unredacted"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RedactionOutput(rawValue: rawValue) ?? RedactionOutput.sdkUnknown(rawValue)
    }
}

public enum RedactionType {
    case pii
    case sdkUnknown(String)
}

extension RedactionType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RedactionType] {
        return [
            .pii,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .pii: return "PII"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RedactionType(rawValue: rawValue) ?? RedactionType.sdkUnknown(rawValue)
    }
}

extension Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelIdentification = "ChannelIdentification"
        case maxAlternatives = "MaxAlternatives"
        case maxSpeakerLabels = "MaxSpeakerLabels"
        case showAlternatives = "ShowAlternatives"
        case showSpeakerLabels = "ShowSpeakerLabels"
        case vocabularyFilterMethod = "VocabularyFilterMethod"
        case vocabularyFilterName = "VocabularyFilterName"
        case vocabularyName = "VocabularyName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelIdentification = channelIdentification {
            try encodeContainer.encode(channelIdentification, forKey: .channelIdentification)
        }
        if let maxAlternatives = maxAlternatives {
            try encodeContainer.encode(maxAlternatives, forKey: .maxAlternatives)
        }
        if let maxSpeakerLabels = maxSpeakerLabels {
            try encodeContainer.encode(maxSpeakerLabels, forKey: .maxSpeakerLabels)
        }
        if let showAlternatives = showAlternatives {
            try encodeContainer.encode(showAlternatives, forKey: .showAlternatives)
        }
        if let showSpeakerLabels = showSpeakerLabels {
            try encodeContainer.encode(showSpeakerLabels, forKey: .showSpeakerLabels)
        }
        if let vocabularyFilterMethod = vocabularyFilterMethod {
            try encodeContainer.encode(vocabularyFilterMethod.rawValue, forKey: .vocabularyFilterMethod)
        }
        if let vocabularyFilterName = vocabularyFilterName {
            try encodeContainer.encode(vocabularyFilterName, forKey: .vocabularyFilterName)
        }
        if let vocabularyName = vocabularyName {
            try encodeContainer.encode(vocabularyName, forKey: .vocabularyName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let showSpeakerLabelsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .showSpeakerLabels)
        showSpeakerLabels = showSpeakerLabelsDecoded
        let maxSpeakerLabelsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxSpeakerLabels)
        maxSpeakerLabels = maxSpeakerLabelsDecoded
        let channelIdentificationDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .channelIdentification)
        channelIdentification = channelIdentificationDecoded
        let showAlternativesDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .showAlternatives)
        showAlternatives = showAlternativesDecoded
        let maxAlternativesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxAlternatives)
        maxAlternatives = maxAlternativesDecoded
        let vocabularyFilterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyFilterName)
        vocabularyFilterName = vocabularyFilterNameDecoded
        let vocabularyFilterMethodDecoded = try containerValues.decodeIfPresent(VocabularyFilterMethod.self, forKey: .vocabularyFilterMethod)
        vocabularyFilterMethod = vocabularyFilterMethodDecoded
    }
}

extension Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Settings(channelIdentification: \(String(describing: channelIdentification)), maxAlternatives: \(String(describing: maxAlternatives)), maxSpeakerLabels: \(String(describing: maxSpeakerLabels)), showAlternatives: \(String(describing: showAlternatives)), showSpeakerLabels: \(String(describing: showSpeakerLabels)), vocabularyFilterMethod: \(String(describing: vocabularyFilterMethod)), vocabularyFilterName: \(String(describing: vocabularyFilterName)), vocabularyName: \(String(describing: vocabularyName)))"}
}

/// <p>Provides optional settings for the <code>StartTranscriptionJob</code>
///             operation.</p>
public struct Settings: Equatable {
    /// <p>Instructs Amazon Transcribe to process each audio channel separately and then merge the
    ///             transcription output of each channel into a single transcription. </p>
    ///         <p>Amazon Transcribe also produces a transcription of each item detected on an audio channel,
    ///             including the start time and end time of the item and alternative transcriptions of the
    ///             item including the confidence that Amazon Transcribe has in the transcription.</p>
    ///         <p>You can't set both <code>ShowSpeakerLabels</code> and
    ///                 <code>ChannelIdentification</code> in the same request. If you set both, your
    ///             request returns a <code>BadRequestException</code>.</p>
    public let channelIdentification: Bool?
    /// <p>The number of alternative transcriptions that the service should return. If you
    ///             specify the <code>MaxAlternatives</code> field, you must set the
    ///                 <code>ShowAlternatives</code> field to true.</p>
    public let maxAlternatives: Int?
    /// <p>The maximum number of speakers to identify in the input audio. If there are more
    ///             speakers in the audio than this number, multiple speakers are identified as a single
    ///             speaker. If you specify the <code>MaxSpeakerLabels</code> field, you must set the
    ///                 <code>ShowSpeakerLabels</code> field to true.</p>
    public let maxSpeakerLabels: Int?
    /// <p>Determines whether the transcription contains alternative transcriptions. If you set
    ///             the <code>ShowAlternatives</code> field to true, you must also set the maximum number of
    ///             alternatives to return in the <code>MaxAlternatives</code> field.</p>
    public let showAlternatives: Bool?
    /// <p>Determines whether the transcription job uses speaker recognition to identify
    ///             different speakers in the input audio. Speaker recognition labels individual speakers in
    ///             the audio file. If you set the <code>ShowSpeakerLabels</code> field to true, you must
    ///             also set the maximum number of speaker labels <code>MaxSpeakerLabels</code>
    ///             field.</p>
    ///         <p>You can't set both <code>ShowSpeakerLabels</code> and
    ///                 <code>ChannelIdentification</code> in the same request. If you set both, your
    ///             request returns a <code>BadRequestException</code>.</p>
    public let showSpeakerLabels: Bool?
    /// <p>Set to <code>mask</code> to remove filtered text from the transcript and replace it
    ///             with three asterisks ("***") as placeholder text. Set to <code>remove</code> to remove
    ///             filtered text from the transcript without using placeholder text. Set to
    ///                 <code>tag</code> to mark the word in the transcription output that matches the
    ///             vocabulary filter. When you set the filter method to <code>tag</code>, the words
    ///             matching your vocabulary filter are not masked or removed.</p>
    public let vocabularyFilterMethod: VocabularyFilterMethod?
    /// <p>The name of the vocabulary filter to use when transcribing the audio. The filter that
    ///             you specify must have the same language code as the transcription job.</p>
    public let vocabularyFilterName: String?
    /// <p>The name of a vocabulary to use when processing the transcription job.</p>
    public let vocabularyName: String?

    public init (
        channelIdentification: Bool? = nil,
        maxAlternatives: Int? = nil,
        maxSpeakerLabels: Int? = nil,
        showAlternatives: Bool? = nil,
        showSpeakerLabels: Bool? = nil,
        vocabularyFilterMethod: VocabularyFilterMethod? = nil,
        vocabularyFilterName: String? = nil,
        vocabularyName: String? = nil
    )
    {
        self.channelIdentification = channelIdentification
        self.maxAlternatives = maxAlternatives
        self.maxSpeakerLabels = maxSpeakerLabels
        self.showAlternatives = showAlternatives
        self.showSpeakerLabels = showSpeakerLabels
        self.vocabularyFilterMethod = vocabularyFilterMethod
        self.vocabularyFilterName = vocabularyFilterName
        self.vocabularyName = vocabularyName
    }
}

public enum Specialty {
    case primarycare
    case sdkUnknown(String)
}

extension Specialty : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Specialty] {
        return [
            .primarycare,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .primarycare: return "PRIMARYCARE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Specialty(rawValue: rawValue) ?? Specialty.sdkUnknown(rawValue)
    }
}

public struct StartMedicalTranscriptionJobInputBodyMiddleware: Middleware {
    public let id: String = "StartMedicalTranscriptionJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMedicalTranscriptionJobInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMedicalTranscriptionJobInput>
    public typealias MOutput = OperationOutput<StartMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartMedicalTranscriptionJobOutputError>
}

extension StartMedicalTranscriptionJobInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartMedicalTranscriptionJobInput(contentIdentificationType: \(String(describing: contentIdentificationType)), languageCode: \(String(describing: languageCode)), media: \(String(describing: media)), mediaFormat: \(String(describing: mediaFormat)), mediaSampleRateHertz: \(String(describing: mediaSampleRateHertz)), medicalTranscriptionJobName: \(String(describing: medicalTranscriptionJobName)), outputBucketName: \(String(describing: outputBucketName)), outputEncryptionKMSKeyId: \(String(describing: outputEncryptionKMSKeyId)), outputKey: \(String(describing: outputKey)), settings: \(String(describing: settings)), specialty: \(String(describing: specialty)), type: \(String(describing: type)))"}
}

extension StartMedicalTranscriptionJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contentIdentificationType = "ContentIdentificationType"
        case languageCode = "LanguageCode"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case outputBucketName = "OutputBucketName"
        case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
        case outputKey = "OutputKey"
        case settings = "Settings"
        case specialty = "Specialty"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentIdentificationType = contentIdentificationType {
            try encodeContainer.encode(contentIdentificationType.rawValue, forKey: .contentIdentificationType)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let media = media {
            try encodeContainer.encode(media, forKey: .media)
        }
        if let mediaFormat = mediaFormat {
            try encodeContainer.encode(mediaFormat.rawValue, forKey: .mediaFormat)
        }
        if let mediaSampleRateHertz = mediaSampleRateHertz {
            try encodeContainer.encode(mediaSampleRateHertz, forKey: .mediaSampleRateHertz)
        }
        if let outputBucketName = outputBucketName {
            try encodeContainer.encode(outputBucketName, forKey: .outputBucketName)
        }
        if let outputEncryptionKMSKeyId = outputEncryptionKMSKeyId {
            try encodeContainer.encode(outputEncryptionKMSKeyId, forKey: .outputEncryptionKMSKeyId)
        }
        if let outputKey = outputKey {
            try encodeContainer.encode(outputKey, forKey: .outputKey)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let specialty = specialty {
            try encodeContainer.encode(specialty.rawValue, forKey: .specialty)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct StartMedicalTranscriptionJobInputHeadersMiddleware: Middleware {
    public let id: String = "StartMedicalTranscriptionJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMedicalTranscriptionJobInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMedicalTranscriptionJobInput>
    public typealias MOutput = OperationOutput<StartMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartMedicalTranscriptionJobOutputError>
}

public struct StartMedicalTranscriptionJobInputQueryItemMiddleware: Middleware {
    public let id: String = "StartMedicalTranscriptionJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMedicalTranscriptionJobInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMedicalTranscriptionJobInput>
    public typealias MOutput = OperationOutput<StartMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartMedicalTranscriptionJobOutputError>
}

public struct StartMedicalTranscriptionJobInput: Equatable {
    /// <p>You can configure Amazon Transcribe Medical to label content in the transcription output. If you specify
    ///                 <code>PHI</code>, Amazon Transcribe Medical labels the personal health information (PHI) that it identifies in the transcription
    ///             output.</p>
    public let contentIdentificationType: MedicalContentIdentificationType?
    /// <p>The language code for the language spoken in the input media file. US English (en-US)
    ///             is the valid value for medical transcription jobs. Any other value you enter for
    ///             language code results in a <code>BadRequestException</code> error.</p>
    public let languageCode: LanguageCode?
    /// <p>Describes the input media file in a transcription request.</p>
    public let media: Media?
    /// <p>The audio format of the input media file.</p>
    public let mediaFormat: MediaFormat?
    /// <p>The sample rate, in Hertz, of the audio track in the input media file.</p>
    ///         <p>If you do not specify the media sample rate, Amazon Transcribe Medical determines the sample rate. If you
    ///             specify the sample rate, it must match the rate detected by Amazon Transcribe Medical. In most cases, you
    ///             should leave the <code>MediaSampleRateHertz</code> field blank and let Amazon Transcribe Medical determine
    ///             the sample rate.</p>
    public let mediaSampleRateHertz: Int?
    /// <p>The name of the medical transcription job. You can't use the strings "<code>.</code>"
    ///             or "<code>..</code>" by themselves as the job name. The name must also be unique within
    ///             an AWS account. If you try to create a medical transcription job with the same name as a
    ///             previous medical transcription job, you get a <code>ConflictException</code>
    ///             error.</p>
    public let medicalTranscriptionJobName: String?
    /// <p>The Amazon S3 location where the transcription is stored.</p>
    ///         <p>You must set <code>OutputBucketName</code> for Amazon Transcribe Medical to store the transcription
    ///             results. Your transcript appears in the S3 location you specify. When you call the <a>GetMedicalTranscriptionJob</a>, the operation returns this location in the
    ///                 <code>TranscriptFileUri</code> field. The S3 bucket must have permissions that allow
    ///             Amazon Transcribe Medical to put files in the bucket. For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/security_iam_id-based-policy-examples.html#auth-role-iam-user">Permissions Required for IAM User Roles</a>.</p>
    ///         <p>You can specify an AWS Key Management Service (KMS) key to encrypt the output of your
    ///             transcription using the <code>OutputEncryptionKMSKeyId</code> parameter. If you don't
    ///             specify a KMS key, Amazon Transcribe Medical uses the default Amazon S3 key for server-side encryption of
    ///             transcripts that are placed in your S3 bucket.</p>
    public let outputBucketName: String?
    /// <p>The Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key used to
    ///             encrypt the output of the transcription job. The user calling the <a>StartMedicalTranscriptionJob</a> operation must have permission to use the
    ///             specified KMS key.</p>
    ///         <p>You use either of the following to identify a KMS key in the current account:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"</p>
    ///             </li>
    ///             <li>
    ///                 <p>KMS Key Alias: "alias/ExampleAlias"</p>
    ///             </li>
    ///          </ul>
    ///         <p>You can use either of the following to identify a KMS key in the current account or
    ///             another account:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Amazon Resource Name (ARN) of a KMS key in the current account or another
    ///                     account: "arn:aws:kms:region:account
    ///                     ID:key/1234abcd-12ab-34cd-56ef-1234567890ab"</p>
    ///             </li>
    ///             <li>
    ///                 <p>ARN of a KMS Key Alias: "arn:aws:kms:region:account
    ///                     ID:alias/ExampleAlias"</p>
    ///             </li>
    ///          </ul>
    ///         <p>If you don't specify an encryption key, the output of the medical transcription job is
    ///             encrypted with the default Amazon S3 key (SSE-S3).</p>
    ///         <p>If you specify a KMS key to encrypt your output, you must also specify an output
    ///             location in the <code>OutputBucketName</code> parameter.</p>
    public let outputEncryptionKMSKeyId: String?
    /// <p>You can specify a location in an Amazon S3 bucket to store the output of your medical
    ///             transcription job.</p>
    ///         <p>If you don't specify an output key, Amazon Transcribe Medical stores the output of your transcription job
    ///             in the Amazon S3 bucket you specified. By default, the object key is
    ///             "your-transcription-job-name.json".</p>
    ///         <p>You can use output keys to specify the Amazon S3 prefix and file name of the transcription
    ///             output. For example, specifying the Amazon S3 prefix, "folder1/folder2/", as an output key
    ///             would lead to the output being stored as
    ///             "folder1/folder2/your-transcription-job-name.json". If you specify
    ///             "my-other-job-name.json" as the output key, the object key is changed to
    ///             "my-other-job-name.json". You can use an output key to change both the prefix and the
    ///             file name, for example "folder/my-other-job-name.json".</p>
    ///         <p>If you specify an output key, you must also specify an S3 bucket in the
    ///                 <code>OutputBucketName</code> parameter.</p>
    public let outputKey: String?
    /// <p>Optional settings for the medical transcription job.</p>
    public let settings: MedicalTranscriptionSetting?
    /// <p>The medical specialty of any clinician speaking in the input media.</p>
    public let specialty: Specialty?
    /// <p>The type of speech in the input audio. <code>CONVERSATION</code> refers to
    ///             conversations between two or more speakers, e.g., a conversations between doctors and
    ///             patients. <code>DICTATION</code> refers to single-speaker dictated speech, e.g., for
    ///             clinical notes.</p>
    public let type: `Type`?

    public init (
        contentIdentificationType: MedicalContentIdentificationType? = nil,
        languageCode: LanguageCode? = nil,
        media: Media? = nil,
        mediaFormat: MediaFormat? = nil,
        mediaSampleRateHertz: Int? = nil,
        medicalTranscriptionJobName: String? = nil,
        outputBucketName: String? = nil,
        outputEncryptionKMSKeyId: String? = nil,
        outputKey: String? = nil,
        settings: MedicalTranscriptionSetting? = nil,
        specialty: Specialty? = nil,
        type: `Type`? = nil
    )
    {
        self.contentIdentificationType = contentIdentificationType
        self.languageCode = languageCode
        self.media = media
        self.mediaFormat = mediaFormat
        self.mediaSampleRateHertz = mediaSampleRateHertz
        self.medicalTranscriptionJobName = medicalTranscriptionJobName
        self.outputBucketName = outputBucketName
        self.outputEncryptionKMSKeyId = outputEncryptionKMSKeyId
        self.outputKey = outputKey
        self.settings = settings
        self.specialty = specialty
        self.type = type
    }
}

struct StartMedicalTranscriptionJobInputBody: Equatable {
    public let languageCode: LanguageCode?
    public let mediaSampleRateHertz: Int?
    public let mediaFormat: MediaFormat?
    public let media: Media?
    public let outputBucketName: String?
    public let outputKey: String?
    public let outputEncryptionKMSKeyId: String?
    public let settings: MedicalTranscriptionSetting?
    public let contentIdentificationType: MedicalContentIdentificationType?
    public let specialty: Specialty?
    public let type: `Type`?
}

extension StartMedicalTranscriptionJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case contentIdentificationType = "ContentIdentificationType"
        case languageCode = "LanguageCode"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case outputBucketName = "OutputBucketName"
        case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
        case outputKey = "OutputKey"
        case settings = "Settings"
        case specialty = "Specialty"
        case type = "Type"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let mediaSampleRateHertzDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .mediaSampleRateHertz)
        mediaSampleRateHertz = mediaSampleRateHertzDecoded
        let mediaFormatDecoded = try containerValues.decodeIfPresent(MediaFormat.self, forKey: .mediaFormat)
        mediaFormat = mediaFormatDecoded
        let mediaDecoded = try containerValues.decodeIfPresent(Media.self, forKey: .media)
        media = mediaDecoded
        let outputBucketNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputBucketName)
        outputBucketName = outputBucketNameDecoded
        let outputKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputKey)
        outputKey = outputKeyDecoded
        let outputEncryptionKMSKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputEncryptionKMSKeyId)
        outputEncryptionKMSKeyId = outputEncryptionKMSKeyIdDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(MedicalTranscriptionSetting.self, forKey: .settings)
        settings = settingsDecoded
        let contentIdentificationTypeDecoded = try containerValues.decodeIfPresent(MedicalContentIdentificationType.self, forKey: .contentIdentificationType)
        contentIdentificationType = contentIdentificationTypeDecoded
        let specialtyDecoded = try containerValues.decodeIfPresent(Specialty.self, forKey: .specialty)
        specialty = specialtyDecoded
        let typeDecoded = try containerValues.decodeIfPresent(`Type`.self, forKey: .type)
        type = typeDecoded
    }
}

extension StartMedicalTranscriptionJobOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartMedicalTranscriptionJobOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartMedicalTranscriptionJobOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMedicalTranscriptionJobOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartMedicalTranscriptionJobOutputResponse(medicalTranscriptionJob: \(String(describing: medicalTranscriptionJob)))"}
}

extension StartMedicalTranscriptionJobOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StartMedicalTranscriptionJobOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.medicalTranscriptionJob = output.medicalTranscriptionJob
        } else {
            self.medicalTranscriptionJob = nil
        }
    }
}

public struct StartMedicalTranscriptionJobOutputResponse: Equatable {
    /// <p>A batch job submitted to transcribe medical speech to text.</p>
    public let medicalTranscriptionJob: MedicalTranscriptionJob?

    public init (
        medicalTranscriptionJob: MedicalTranscriptionJob? = nil
    )
    {
        self.medicalTranscriptionJob = medicalTranscriptionJob
    }
}

struct StartMedicalTranscriptionJobOutputResponseBody: Equatable {
    public let medicalTranscriptionJob: MedicalTranscriptionJob?
}

extension StartMedicalTranscriptionJobOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case medicalTranscriptionJob = "MedicalTranscriptionJob"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let medicalTranscriptionJobDecoded = try containerValues.decodeIfPresent(MedicalTranscriptionJob.self, forKey: .medicalTranscriptionJob)
        medicalTranscriptionJob = medicalTranscriptionJobDecoded
    }
}

public struct StartTranscriptionJobInputBodyMiddleware: Middleware {
    public let id: String = "StartTranscriptionJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartTranscriptionJobInput>,
                  next: H) -> Swift.Result<OperationOutput<StartTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartTranscriptionJobInput>
    public typealias MOutput = OperationOutput<StartTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartTranscriptionJobOutputError>
}

extension StartTranscriptionJobInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartTranscriptionJobInput(contentRedaction: \(String(describing: contentRedaction)), identifyLanguage: \(String(describing: identifyLanguage)), jobExecutionSettings: \(String(describing: jobExecutionSettings)), languageCode: \(String(describing: languageCode)), languageOptions: \(String(describing: languageOptions)), media: \(String(describing: media)), mediaFormat: \(String(describing: mediaFormat)), mediaSampleRateHertz: \(String(describing: mediaSampleRateHertz)), modelSettings: \(String(describing: modelSettings)), outputBucketName: \(String(describing: outputBucketName)), outputEncryptionKMSKeyId: \(String(describing: outputEncryptionKMSKeyId)), outputKey: \(String(describing: outputKey)), settings: \(String(describing: settings)), transcriptionJobName: \(String(describing: transcriptionJobName)))"}
}

extension StartTranscriptionJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contentRedaction = "ContentRedaction"
        case identifyLanguage = "IdentifyLanguage"
        case jobExecutionSettings = "JobExecutionSettings"
        case languageCode = "LanguageCode"
        case languageOptions = "LanguageOptions"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case modelSettings = "ModelSettings"
        case outputBucketName = "OutputBucketName"
        case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
        case outputKey = "OutputKey"
        case settings = "Settings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentRedaction = contentRedaction {
            try encodeContainer.encode(contentRedaction, forKey: .contentRedaction)
        }
        if let identifyLanguage = identifyLanguage {
            try encodeContainer.encode(identifyLanguage, forKey: .identifyLanguage)
        }
        if let jobExecutionSettings = jobExecutionSettings {
            try encodeContainer.encode(jobExecutionSettings, forKey: .jobExecutionSettings)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let languageOptions = languageOptions {
            var languageOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .languageOptions)
            for languageoptions0 in languageOptions {
                try languageOptionsContainer.encode(languageoptions0.rawValue)
            }
        }
        if let media = media {
            try encodeContainer.encode(media, forKey: .media)
        }
        if let mediaFormat = mediaFormat {
            try encodeContainer.encode(mediaFormat.rawValue, forKey: .mediaFormat)
        }
        if let mediaSampleRateHertz = mediaSampleRateHertz {
            try encodeContainer.encode(mediaSampleRateHertz, forKey: .mediaSampleRateHertz)
        }
        if let modelSettings = modelSettings {
            try encodeContainer.encode(modelSettings, forKey: .modelSettings)
        }
        if let outputBucketName = outputBucketName {
            try encodeContainer.encode(outputBucketName, forKey: .outputBucketName)
        }
        if let outputEncryptionKMSKeyId = outputEncryptionKMSKeyId {
            try encodeContainer.encode(outputEncryptionKMSKeyId, forKey: .outputEncryptionKMSKeyId)
        }
        if let outputKey = outputKey {
            try encodeContainer.encode(outputKey, forKey: .outputKey)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
    }
}

public struct StartTranscriptionJobInputHeadersMiddleware: Middleware {
    public let id: String = "StartTranscriptionJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartTranscriptionJobInput>,
                  next: H) -> Swift.Result<OperationOutput<StartTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartTranscriptionJobInput>
    public typealias MOutput = OperationOutput<StartTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartTranscriptionJobOutputError>
}

public struct StartTranscriptionJobInputQueryItemMiddleware: Middleware {
    public let id: String = "StartTranscriptionJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartTranscriptionJobInput>,
                  next: H) -> Swift.Result<OperationOutput<StartTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartTranscriptionJobInput>
    public typealias MOutput = OperationOutput<StartTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartTranscriptionJobOutputError>
}

public struct StartTranscriptionJobInput: Equatable {
    /// <p>An object that contains the request parameters for content redaction.</p>
    public let contentRedaction: ContentRedaction?
    /// <p>Set this field to <code>true</code> to enable automatic language identification.
    ///             Automatic language identification is disabled by default. You receive a
    ///                 <code>BadRequestException</code> error if you enter a value for a
    ///                 <code>LanguageCode</code>.</p>
    public let identifyLanguage: Bool?
    /// <p>Provides information about how a transcription job is executed. Use this field to
    ///             indicate that the job can be queued for deferred execution if the concurrency limit is
    ///             reached and there are no slots available to immediately run the job.</p>
    public let jobExecutionSettings: JobExecutionSettings?
    /// <p>The language code for the language used in the input media file.</p>
    ///         <p>To transcribe speech in Modern Standard Arabic (ar-SA), your audio or video file must
    ///             be encoded at a sample rate of 16000 Hz or higher.</p>
    public let languageCode: LanguageCode?
    /// <p>An object containing a list of languages that might be present in your collection of
    ///             audio files. Automatic language identification chooses a language that best matches the
    ///             source audio from that list.</p>
    public let languageOptions: [LanguageCode]?
    /// <p>An object that describes the input media for a transcription job.</p>
    public let media: Media?
    /// <p>The format of the input media file.</p>
    public let mediaFormat: MediaFormat?
    /// <p>The sample rate, in Hertz, of the audio track in the input media file. </p>
    ///         <p>If you do not specify the media sample rate, Amazon Transcribe determines the sample rate. If you
    ///             specify the sample rate, it must match the sample rate detected by Amazon Transcribe. In most cases,
    ///             you should leave the <code>MediaSampleRateHertz</code> field blank and let Amazon Transcribe
    ///             determine the sample rate.</p>
    public let mediaSampleRateHertz: Int?
    /// <p>Choose the custom language model you use for your transcription job in this
    ///             parameter.</p>
    public let modelSettings: ModelSettings?
    /// <p>The location where the transcription is stored.</p>
    ///         <p>If you set the <code>OutputBucketName</code>, Amazon Transcribe puts the transcript in the
    ///             specified S3 bucket. When you call the <a>GetTranscriptionJob</a> operation,
    ///             the operation returns this location in the <code>TranscriptFileUri</code> field. If you
    ///             enable content redaction, the redacted transcript appears in
    ///                 <code>RedactedTranscriptFileUri</code>. If you enable content redaction and choose
    ///             to output an unredacted transcript, that transcript's location still appears in the
    ///                 <code>TranscriptFileUri</code>. The S3 bucket must have permissions that allow Amazon Transcribe
    ///             to put files in the bucket. For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/security_iam_id-based-policy-examples.html#auth-role-iam-user">Permissions Required for IAM User Roles</a>.</p>
    ///         <p>You can specify an AWS Key Management Service (KMS) key to encrypt the output of your
    ///             transcription using the <code>OutputEncryptionKMSKeyId</code> parameter. If you don't
    ///             specify a KMS key, Amazon Transcribe uses the default Amazon S3 key for server-side encryption of
    ///             transcripts that are placed in your S3 bucket.</p>
    ///         <p>If you don't set the <code>OutputBucketName</code>, Amazon Transcribe generates a pre-signed URL,
    ///             a shareable URL that provides secure access to your transcription, and returns it in the
    ///                 <code>TranscriptFileUri</code> field. Use this URL to download the
    ///             transcription.</p>
    public let outputBucketName: String?
    /// <p>The Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key used to
    ///             encrypt the output of the transcription job. The user calling the
    ///                 <code>StartTranscriptionJob</code> operation must have permission to use the
    ///             specified KMS key.</p>
    ///         <p>You can use either of the following to identify a KMS key in the current
    ///             account:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"</p>
    ///             </li>
    ///             <li>
    ///                 <p>KMS Key Alias: "alias/ExampleAlias"</p>
    ///             </li>
    ///          </ul>
    ///         <p>You can use either of the following to identify a KMS key in the current account or
    ///             another account:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:region:account
    ///                     ID:key/1234abcd-12ab-34cd-56ef-1234567890ab"</p>
    ///             </li>
    ///             <li>
    ///                 <p>ARN of a KMS Key Alias: "arn:aws:kms:region:account
    ///                     ID:alias/ExampleAlias"</p>
    ///             </li>
    ///          </ul>
    ///         <p>If you don't specify an encryption key, the output of the transcription job is
    ///             encrypted with the default Amazon S3 key (SSE-S3). </p>
    ///         <p>If you specify a KMS key to encrypt your output, you must also specify an output
    ///             location in the <code>OutputBucketName</code> parameter.</p>
    public let outputEncryptionKMSKeyId: String?
    /// <p>You can specify a location in an Amazon S3 bucket to store the output of your transcription
    ///             job.</p>
    ///         <p>If you don't specify an output key, Amazon Transcribe stores the output of your transcription job
    ///             in the Amazon S3 bucket you specified. By default, the object key is
    ///             "your-transcription-job-name.json".</p>
    ///         <p>You can use output keys to specify the Amazon S3 prefix and file name of the transcription
    ///             output. For example, specifying the Amazon S3 prefix, "folder1/folder2/", as an output key
    ///             would lead to the output being stored as
    ///             "folder1/folder2/your-transcription-job-name.json". If you specify
    ///             "my-other-job-name.json" as the output key, the object key is changed to
    ///             "my-other-job-name.json". You can use an output key to change both the prefix and the
    ///             file name, for example "folder/my-other-job-name.json".</p>
    ///         <p>If you specify an output key, you must also specify an S3 bucket in the
    ///                 <code>OutputBucketName</code> parameter.</p>
    public let outputKey: String?
    /// <p>A <code>Settings</code> object that provides optional settings for a transcription
    ///             job.</p>
    public let settings: Settings?
    /// <p>The name of the job. You can't use the strings "<code>.</code>" or "<code>..</code>"
    ///             by themselves as the job name. The name must also be unique within an AWS account. If
    ///             you try to create a transcription job with the same name as a previous transcription
    ///             job, you get a <code>ConflictException</code> error.</p>
    public let transcriptionJobName: String?

    public init (
        contentRedaction: ContentRedaction? = nil,
        identifyLanguage: Bool? = nil,
        jobExecutionSettings: JobExecutionSettings? = nil,
        languageCode: LanguageCode? = nil,
        languageOptions: [LanguageCode]? = nil,
        media: Media? = nil,
        mediaFormat: MediaFormat? = nil,
        mediaSampleRateHertz: Int? = nil,
        modelSettings: ModelSettings? = nil,
        outputBucketName: String? = nil,
        outputEncryptionKMSKeyId: String? = nil,
        outputKey: String? = nil,
        settings: Settings? = nil,
        transcriptionJobName: String? = nil
    )
    {
        self.contentRedaction = contentRedaction
        self.identifyLanguage = identifyLanguage
        self.jobExecutionSettings = jobExecutionSettings
        self.languageCode = languageCode
        self.languageOptions = languageOptions
        self.media = media
        self.mediaFormat = mediaFormat
        self.mediaSampleRateHertz = mediaSampleRateHertz
        self.modelSettings = modelSettings
        self.outputBucketName = outputBucketName
        self.outputEncryptionKMSKeyId = outputEncryptionKMSKeyId
        self.outputKey = outputKey
        self.settings = settings
        self.transcriptionJobName = transcriptionJobName
    }
}

struct StartTranscriptionJobInputBody: Equatable {
    public let languageCode: LanguageCode?
    public let mediaSampleRateHertz: Int?
    public let mediaFormat: MediaFormat?
    public let media: Media?
    public let outputBucketName: String?
    public let outputKey: String?
    public let outputEncryptionKMSKeyId: String?
    public let settings: Settings?
    public let modelSettings: ModelSettings?
    public let jobExecutionSettings: JobExecutionSettings?
    public let contentRedaction: ContentRedaction?
    public let identifyLanguage: Bool?
    public let languageOptions: [LanguageCode]?
}

extension StartTranscriptionJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case contentRedaction = "ContentRedaction"
        case identifyLanguage = "IdentifyLanguage"
        case jobExecutionSettings = "JobExecutionSettings"
        case languageCode = "LanguageCode"
        case languageOptions = "LanguageOptions"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case modelSettings = "ModelSettings"
        case outputBucketName = "OutputBucketName"
        case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
        case outputKey = "OutputKey"
        case settings = "Settings"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let mediaSampleRateHertzDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .mediaSampleRateHertz)
        mediaSampleRateHertz = mediaSampleRateHertzDecoded
        let mediaFormatDecoded = try containerValues.decodeIfPresent(MediaFormat.self, forKey: .mediaFormat)
        mediaFormat = mediaFormatDecoded
        let mediaDecoded = try containerValues.decodeIfPresent(Media.self, forKey: .media)
        media = mediaDecoded
        let outputBucketNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputBucketName)
        outputBucketName = outputBucketNameDecoded
        let outputKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputKey)
        outputKey = outputKeyDecoded
        let outputEncryptionKMSKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputEncryptionKMSKeyId)
        outputEncryptionKMSKeyId = outputEncryptionKMSKeyIdDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(Settings.self, forKey: .settings)
        settings = settingsDecoded
        let modelSettingsDecoded = try containerValues.decodeIfPresent(ModelSettings.self, forKey: .modelSettings)
        modelSettings = modelSettingsDecoded
        let jobExecutionSettingsDecoded = try containerValues.decodeIfPresent(JobExecutionSettings.self, forKey: .jobExecutionSettings)
        jobExecutionSettings = jobExecutionSettingsDecoded
        let contentRedactionDecoded = try containerValues.decodeIfPresent(ContentRedaction.self, forKey: .contentRedaction)
        contentRedaction = contentRedactionDecoded
        let identifyLanguageDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .identifyLanguage)
        identifyLanguage = identifyLanguageDecoded
        let languageOptionsContainer = try containerValues.decodeIfPresent([LanguageCode?].self, forKey: .languageOptions)
        var languageOptionsDecoded0:[LanguageCode]? = nil
        if let languageOptionsContainer = languageOptionsContainer {
            languageOptionsDecoded0 = [LanguageCode]()
            for string0 in languageOptionsContainer {
                if let string0 = string0 {
                    languageOptionsDecoded0?.append(string0)
                }
            }
        }
        languageOptions = languageOptionsDecoded0
    }
}

extension StartTranscriptionJobOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartTranscriptionJobOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartTranscriptionJobOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartTranscriptionJobOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartTranscriptionJobOutputResponse(transcriptionJob: \(String(describing: transcriptionJob)))"}
}

extension StartTranscriptionJobOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StartTranscriptionJobOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.transcriptionJob = output.transcriptionJob
        } else {
            self.transcriptionJob = nil
        }
    }
}

public struct StartTranscriptionJobOutputResponse: Equatable {
    /// <p>An object containing details of the asynchronous transcription job.</p>
    public let transcriptionJob: TranscriptionJob?

    public init (
        transcriptionJob: TranscriptionJob? = nil
    )
    {
        self.transcriptionJob = transcriptionJob
    }
}

struct StartTranscriptionJobOutputResponseBody: Equatable {
    public let transcriptionJob: TranscriptionJob?
}

extension StartTranscriptionJobOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case transcriptionJob = "TranscriptionJob"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptionJobDecoded = try containerValues.decodeIfPresent(TranscriptionJob.self, forKey: .transcriptionJob)
        transcriptionJob = transcriptionJobDecoded
    }
}

extension Transcript: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case redactedTranscriptFileUri = "RedactedTranscriptFileUri"
        case transcriptFileUri = "TranscriptFileUri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let redactedTranscriptFileUri = redactedTranscriptFileUri {
            try encodeContainer.encode(redactedTranscriptFileUri, forKey: .redactedTranscriptFileUri)
        }
        if let transcriptFileUri = transcriptFileUri {
            try encodeContainer.encode(transcriptFileUri, forKey: .transcriptFileUri)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptFileUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transcriptFileUri)
        transcriptFileUri = transcriptFileUriDecoded
        let redactedTranscriptFileUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .redactedTranscriptFileUri)
        redactedTranscriptFileUri = redactedTranscriptFileUriDecoded
    }
}

extension Transcript: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Transcript(redactedTranscriptFileUri: \(String(describing: redactedTranscriptFileUri)), transcriptFileUri: \(String(describing: transcriptFileUri)))"}
}

/// <p>Identifies the location of a transcription.</p>
public struct Transcript: Equatable {
    /// <p>The S3 object location of the redacted transcript.</p>
    ///         <p>Use this URI to access the redacted transcript. If you specified an S3 bucket in the
    ///                 <code>OutputBucketName</code> field when you created the job, this is the URI of
    ///             that bucket. If you chose to store the transcript in Amazon Transcribe, this is a shareable URL that
    ///             provides secure access to that location.</p>
    public let redactedTranscriptFileUri: String?
    /// <p>The S3 object location of the transcript.</p>
    ///         <p>Use this URI to access the transcript. If you specified an S3 bucket in the
    ///                 <code>OutputBucketName</code> field when you created the job, this is the URI of
    ///             that bucket. If you chose to store the transcript in Amazon Transcribe, this is a shareable URL that
    ///             provides secure access to that location.</p>
    public let transcriptFileUri: String?

    public init (
        redactedTranscriptFileUri: String? = nil,
        transcriptFileUri: String? = nil
    )
    {
        self.redactedTranscriptFileUri = redactedTranscriptFileUri
        self.transcriptFileUri = transcriptFileUri
    }
}

extension TranscriptionJob: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case completionTime = "CompletionTime"
        case contentRedaction = "ContentRedaction"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case identifiedLanguageScore = "IdentifiedLanguageScore"
        case identifyLanguage = "IdentifyLanguage"
        case jobExecutionSettings = "JobExecutionSettings"
        case languageCode = "LanguageCode"
        case languageOptions = "LanguageOptions"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case modelSettings = "ModelSettings"
        case settings = "Settings"
        case startTime = "StartTime"
        case transcript = "Transcript"
        case transcriptionJobName = "TranscriptionJobName"
        case transcriptionJobStatus = "TranscriptionJobStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let contentRedaction = contentRedaction {
            try encodeContainer.encode(contentRedaction, forKey: .contentRedaction)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let identifiedLanguageScore = identifiedLanguageScore {
            try encodeContainer.encode(identifiedLanguageScore, forKey: .identifiedLanguageScore)
        }
        if let identifyLanguage = identifyLanguage {
            try encodeContainer.encode(identifyLanguage, forKey: .identifyLanguage)
        }
        if let jobExecutionSettings = jobExecutionSettings {
            try encodeContainer.encode(jobExecutionSettings, forKey: .jobExecutionSettings)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let languageOptions = languageOptions {
            var languageOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .languageOptions)
            for languageoptions0 in languageOptions {
                try languageOptionsContainer.encode(languageoptions0.rawValue)
            }
        }
        if let media = media {
            try encodeContainer.encode(media, forKey: .media)
        }
        if let mediaFormat = mediaFormat {
            try encodeContainer.encode(mediaFormat.rawValue, forKey: .mediaFormat)
        }
        if let mediaSampleRateHertz = mediaSampleRateHertz {
            try encodeContainer.encode(mediaSampleRateHertz, forKey: .mediaSampleRateHertz)
        }
        if let modelSettings = modelSettings {
            try encodeContainer.encode(modelSettings, forKey: .modelSettings)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let transcript = transcript {
            try encodeContainer.encode(transcript, forKey: .transcript)
        }
        if let transcriptionJobName = transcriptionJobName {
            try encodeContainer.encode(transcriptionJobName, forKey: .transcriptionJobName)
        }
        if let transcriptionJobStatus = transcriptionJobStatus {
            try encodeContainer.encode(transcriptionJobStatus.rawValue, forKey: .transcriptionJobStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptionJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transcriptionJobName)
        transcriptionJobName = transcriptionJobNameDecoded
        let transcriptionJobStatusDecoded = try containerValues.decodeIfPresent(TranscriptionJobStatus.self, forKey: .transcriptionJobStatus)
        transcriptionJobStatus = transcriptionJobStatusDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let mediaSampleRateHertzDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .mediaSampleRateHertz)
        mediaSampleRateHertz = mediaSampleRateHertzDecoded
        let mediaFormatDecoded = try containerValues.decodeIfPresent(MediaFormat.self, forKey: .mediaFormat)
        mediaFormat = mediaFormatDecoded
        let mediaDecoded = try containerValues.decodeIfPresent(Media.self, forKey: .media)
        media = mediaDecoded
        let transcriptDecoded = try containerValues.decodeIfPresent(Transcript.self, forKey: .transcript)
        transcript = transcriptDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(Settings.self, forKey: .settings)
        settings = settingsDecoded
        let modelSettingsDecoded = try containerValues.decodeIfPresent(ModelSettings.self, forKey: .modelSettings)
        modelSettings = modelSettingsDecoded
        let jobExecutionSettingsDecoded = try containerValues.decodeIfPresent(JobExecutionSettings.self, forKey: .jobExecutionSettings)
        jobExecutionSettings = jobExecutionSettingsDecoded
        let contentRedactionDecoded = try containerValues.decodeIfPresent(ContentRedaction.self, forKey: .contentRedaction)
        contentRedaction = contentRedactionDecoded
        let identifyLanguageDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .identifyLanguage)
        identifyLanguage = identifyLanguageDecoded
        let languageOptionsContainer = try containerValues.decodeIfPresent([LanguageCode?].self, forKey: .languageOptions)
        var languageOptionsDecoded0:[LanguageCode]? = nil
        if let languageOptionsContainer = languageOptionsContainer {
            languageOptionsDecoded0 = [LanguageCode]()
            for string0 in languageOptionsContainer {
                if let string0 = string0 {
                    languageOptionsDecoded0?.append(string0)
                }
            }
        }
        languageOptions = languageOptionsDecoded0
        let identifiedLanguageScoreDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .identifiedLanguageScore)
        identifiedLanguageScore = identifiedLanguageScoreDecoded
    }
}

extension TranscriptionJob: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TranscriptionJob(completionTime: \(String(describing: completionTime)), contentRedaction: \(String(describing: contentRedaction)), creationTime: \(String(describing: creationTime)), failureReason: \(String(describing: failureReason)), identifiedLanguageScore: \(String(describing: identifiedLanguageScore)), identifyLanguage: \(String(describing: identifyLanguage)), jobExecutionSettings: \(String(describing: jobExecutionSettings)), languageCode: \(String(describing: languageCode)), languageOptions: \(String(describing: languageOptions)), media: \(String(describing: media)), mediaFormat: \(String(describing: mediaFormat)), mediaSampleRateHertz: \(String(describing: mediaSampleRateHertz)), modelSettings: \(String(describing: modelSettings)), settings: \(String(describing: settings)), startTime: \(String(describing: startTime)), transcript: \(String(describing: transcript)), transcriptionJobName: \(String(describing: transcriptionJobName)), transcriptionJobStatus: \(String(describing: transcriptionJobStatus)))"}
}

/// <p>Describes an asynchronous transcription job that was created with the
///                 <code>StartTranscriptionJob</code> operation. </p>
public struct TranscriptionJob: Equatable {
    /// <p>A timestamp that shows when the job was completed.</p>
    public let completionTime: Date?
    /// <p>An object that describes content redaction settings for the transcription job.</p>
    public let contentRedaction: ContentRedaction?
    /// <p>A timestamp that shows when the job was created.</p>
    public let creationTime: Date?
    /// <p>If the <code>TranscriptionJobStatus</code> field is <code>FAILED</code>, this field
    ///             contains information about why the job failed.</p>
    ///         <p>The <code>FailureReason</code> field can contain one of the following values:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>Unsupported media format</code> - The media format specified in the
    ///                         <code>MediaFormat</code> field of the request isn't valid. See the
    ///                     description of the <code>MediaFormat</code> field for a list of valid
    ///                     values.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>The media format provided does not match the detected media
    ///                         format</code> - The media format of the audio file doesn't match the format
    ///                     specified in the <code>MediaFormat</code> field in the request. Check the media
    ///                     format of your media file and make sure that the two values match.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Invalid sample rate for audio file</code> - The sample rate specified in
    ///                     the <code>MediaSampleRateHertz</code> of the request isn't valid. The sample
    ///                     rate must be between 8000 and 48000 Hertz.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>The sample rate provided does not match the detected sample rate</code>
    ///                     - The sample rate in the audio file doesn't match the sample rate specified in
    ///                     the <code>MediaSampleRateHertz</code> field in the request. Check the sample
    ///                     rate of your media file and make sure that the two values match.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Invalid file size: file size too large</code> - The size of your audio
    ///                     file is larger than Amazon Transcribe can process. For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/limits-guidelines.html#limits">Limits</a> in the <i>Amazon Transcribe Developer Guide</i>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Invalid number of channels: number of channels too large</code> - Your
    ///                     audio contains more channels than Amazon Transcribe is configured to process. To request
    ///                     additional channels, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits-amazon-transcribe">Amazon Transcribe Limits</a> in the <i>Amazon Web Services
    ///                         General Reference</i>.</p>
    ///             </li>
    ///          </ul>
    public let failureReason: String?
    /// <p>A value between zero and one that Amazon Transcribe assigned to the language that it identified in
    ///             the source audio. Larger values indicate that Amazon Transcribe has higher confidence in the
    ///             language it identified.</p>
    public let identifiedLanguageScore: Float?
    /// <p>A value that shows if automatic language identification was enabled for a
    ///             transcription job.</p>
    public let identifyLanguage: Bool?
    /// <p>Provides information about how a transcription job is executed.</p>
    public let jobExecutionSettings: JobExecutionSettings?
    /// <p>The language code for the input speech.</p>
    public let languageCode: LanguageCode?
    /// <p>An object that shows the optional array of languages inputted for transcription jobs
    ///             with automatic language identification enabled.</p>
    public let languageOptions: [LanguageCode]?
    /// <p>An object that describes the input media for the transcription job.</p>
    public let media: Media?
    /// <p>The format of the input media file.</p>
    public let mediaFormat: MediaFormat?
    /// <p>The sample rate, in Hertz, of the audio track in the input media file. </p>
    public let mediaSampleRateHertz: Int?
    /// <p>An object containing the details of your custom language model.</p>
    public let modelSettings: ModelSettings?
    /// <p>Optional settings for the transcription job. Use these settings to turn on speaker
    ///             recognition, to set the maximum number of speakers that should be identified and to
    ///             specify a custom vocabulary to use when processing the transcription job.</p>
    public let settings: Settings?
    /// <p>A timestamp that shows with the job was started processing.</p>
    public let startTime: Date?
    /// <p>An object that describes the output of the transcription job.</p>
    public let transcript: Transcript?
    /// <p>The name of the transcription job.</p>
    public let transcriptionJobName: String?
    /// <p>The status of the transcription job.</p>
    public let transcriptionJobStatus: TranscriptionJobStatus?

    public init (
        completionTime: Date? = nil,
        contentRedaction: ContentRedaction? = nil,
        creationTime: Date? = nil,
        failureReason: String? = nil,
        identifiedLanguageScore: Float? = nil,
        identifyLanguage: Bool? = nil,
        jobExecutionSettings: JobExecutionSettings? = nil,
        languageCode: LanguageCode? = nil,
        languageOptions: [LanguageCode]? = nil,
        media: Media? = nil,
        mediaFormat: MediaFormat? = nil,
        mediaSampleRateHertz: Int? = nil,
        modelSettings: ModelSettings? = nil,
        settings: Settings? = nil,
        startTime: Date? = nil,
        transcript: Transcript? = nil,
        transcriptionJobName: String? = nil,
        transcriptionJobStatus: TranscriptionJobStatus? = nil
    )
    {
        self.completionTime = completionTime
        self.contentRedaction = contentRedaction
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.identifiedLanguageScore = identifiedLanguageScore
        self.identifyLanguage = identifyLanguage
        self.jobExecutionSettings = jobExecutionSettings
        self.languageCode = languageCode
        self.languageOptions = languageOptions
        self.media = media
        self.mediaFormat = mediaFormat
        self.mediaSampleRateHertz = mediaSampleRateHertz
        self.modelSettings = modelSettings
        self.settings = settings
        self.startTime = startTime
        self.transcript = transcript
        self.transcriptionJobName = transcriptionJobName
        self.transcriptionJobStatus = transcriptionJobStatus
    }
}

public enum TranscriptionJobStatus {
    case completed
    case failed
    case inProgress
    case queued
    case sdkUnknown(String)
}

extension TranscriptionJobStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TranscriptionJobStatus] {
        return [
            .completed,
            .failed,
            .inProgress,
            .queued,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .completed: return "COMPLETED"
        case .failed: return "FAILED"
        case .inProgress: return "IN_PROGRESS"
        case .queued: return "QUEUED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TranscriptionJobStatus(rawValue: rawValue) ?? TranscriptionJobStatus.sdkUnknown(rawValue)
    }
}

extension TranscriptionJobSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case completionTime = "CompletionTime"
        case contentRedaction = "ContentRedaction"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case identifiedLanguageScore = "IdentifiedLanguageScore"
        case identifyLanguage = "IdentifyLanguage"
        case languageCode = "LanguageCode"
        case modelSettings = "ModelSettings"
        case outputLocationType = "OutputLocationType"
        case startTime = "StartTime"
        case transcriptionJobName = "TranscriptionJobName"
        case transcriptionJobStatus = "TranscriptionJobStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let contentRedaction = contentRedaction {
            try encodeContainer.encode(contentRedaction, forKey: .contentRedaction)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let identifiedLanguageScore = identifiedLanguageScore {
            try encodeContainer.encode(identifiedLanguageScore, forKey: .identifiedLanguageScore)
        }
        if let identifyLanguage = identifyLanguage {
            try encodeContainer.encode(identifyLanguage, forKey: .identifyLanguage)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let modelSettings = modelSettings {
            try encodeContainer.encode(modelSettings, forKey: .modelSettings)
        }
        if let outputLocationType = outputLocationType {
            try encodeContainer.encode(outputLocationType.rawValue, forKey: .outputLocationType)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let transcriptionJobName = transcriptionJobName {
            try encodeContainer.encode(transcriptionJobName, forKey: .transcriptionJobName)
        }
        if let transcriptionJobStatus = transcriptionJobStatus {
            try encodeContainer.encode(transcriptionJobStatus.rawValue, forKey: .transcriptionJobStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptionJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transcriptionJobName)
        transcriptionJobName = transcriptionJobNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let transcriptionJobStatusDecoded = try containerValues.decodeIfPresent(TranscriptionJobStatus.self, forKey: .transcriptionJobStatus)
        transcriptionJobStatus = transcriptionJobStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let outputLocationTypeDecoded = try containerValues.decodeIfPresent(OutputLocationType.self, forKey: .outputLocationType)
        outputLocationType = outputLocationTypeDecoded
        let contentRedactionDecoded = try containerValues.decodeIfPresent(ContentRedaction.self, forKey: .contentRedaction)
        contentRedaction = contentRedactionDecoded
        let modelSettingsDecoded = try containerValues.decodeIfPresent(ModelSettings.self, forKey: .modelSettings)
        modelSettings = modelSettingsDecoded
        let identifyLanguageDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .identifyLanguage)
        identifyLanguage = identifyLanguageDecoded
        let identifiedLanguageScoreDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .identifiedLanguageScore)
        identifiedLanguageScore = identifiedLanguageScoreDecoded
    }
}

extension TranscriptionJobSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TranscriptionJobSummary(completionTime: \(String(describing: completionTime)), contentRedaction: \(String(describing: contentRedaction)), creationTime: \(String(describing: creationTime)), failureReason: \(String(describing: failureReason)), identifiedLanguageScore: \(String(describing: identifiedLanguageScore)), identifyLanguage: \(String(describing: identifyLanguage)), languageCode: \(String(describing: languageCode)), modelSettings: \(String(describing: modelSettings)), outputLocationType: \(String(describing: outputLocationType)), startTime: \(String(describing: startTime)), transcriptionJobName: \(String(describing: transcriptionJobName)), transcriptionJobStatus: \(String(describing: transcriptionJobStatus)))"}
}

/// <p>Provides a summary of information about a transcription job.</p>
public struct TranscriptionJobSummary: Equatable {
    /// <p>A timestamp that shows when the job was completed.</p>
    public let completionTime: Date?
    /// <p>The content redaction settings of the transcription job.</p>
    public let contentRedaction: ContentRedaction?
    /// <p>A timestamp that shows when the job was created.</p>
    public let creationTime: Date?
    /// <p>If the <code>TranscriptionJobStatus</code> field is <code>FAILED</code>, a description
    ///             of the error.</p>
    public let failureReason: String?
    /// <p>A value between zero and one that Amazon Transcribe assigned to the language it identified in the
    ///             source audio. A higher score indicates that Amazon Transcribe is more confident in the language it
    ///             identified.</p>
    public let identifiedLanguageScore: Float?
    /// <p>Whether automatic language identification was enabled for a transcription job.</p>
    public let identifyLanguage: Bool?
    /// <p>The language code for the input speech.</p>
    public let languageCode: LanguageCode?
    /// <p>The object used to call your custom language model to your transcription job.</p>
    public let modelSettings: ModelSettings?
    /// <p>Indicates the location of the output of the transcription job.</p>
    ///         <p>If the value is <code>CUSTOMER_BUCKET</code> then the location is the S3 bucket
    ///             specified in the <code>outputBucketName</code> field when the transcription job was
    ///             started with the <code>StartTranscriptionJob</code> operation.</p>
    ///         <p>If the value is <code>SERVICE_BUCKET</code> then the output is stored by Amazon Transcribe and can
    ///             be retrieved using the URI in the <code>GetTranscriptionJob</code> response's
    ///                 <code>TranscriptFileUri</code> field.</p>
    public let outputLocationType: OutputLocationType?
    /// <p>A timestamp that shows when the job started processing.</p>
    public let startTime: Date?
    /// <p>The name of the transcription job.</p>
    public let transcriptionJobName: String?
    /// <p>The status of the transcription job. When the status is <code>COMPLETED</code>, use
    ///             the <code>GetTranscriptionJob</code> operation to get the results of the
    ///             transcription.</p>
    public let transcriptionJobStatus: TranscriptionJobStatus?

    public init (
        completionTime: Date? = nil,
        contentRedaction: ContentRedaction? = nil,
        creationTime: Date? = nil,
        failureReason: String? = nil,
        identifiedLanguageScore: Float? = nil,
        identifyLanguage: Bool? = nil,
        languageCode: LanguageCode? = nil,
        modelSettings: ModelSettings? = nil,
        outputLocationType: OutputLocationType? = nil,
        startTime: Date? = nil,
        transcriptionJobName: String? = nil,
        transcriptionJobStatus: TranscriptionJobStatus? = nil
    )
    {
        self.completionTime = completionTime
        self.contentRedaction = contentRedaction
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.identifiedLanguageScore = identifiedLanguageScore
        self.identifyLanguage = identifyLanguage
        self.languageCode = languageCode
        self.modelSettings = modelSettings
        self.outputLocationType = outputLocationType
        self.startTime = startTime
        self.transcriptionJobName = transcriptionJobName
        self.transcriptionJobStatus = transcriptionJobStatus
    }
}

public enum `Type` {
    case conversation
    case dictation
    case sdkUnknown(String)
}

extension `Type` : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [`Type`] {
        return [
            .conversation,
            .dictation,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .conversation: return "CONVERSATION"
        case .dictation: return "DICTATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = `Type`(rawValue: rawValue) ?? `Type`.sdkUnknown(rawValue)
    }
}

public struct UpdateMedicalVocabularyInputBodyMiddleware: Middleware {
    public let id: String = "UpdateMedicalVocabularyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMedicalVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMedicalVocabularyInput>
    public typealias MOutput = OperationOutput<UpdateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMedicalVocabularyOutputError>
}

extension UpdateMedicalVocabularyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateMedicalVocabularyInput(languageCode: \(String(describing: languageCode)), vocabularyFileUri: \(String(describing: vocabularyFileUri)), vocabularyName: \(String(describing: vocabularyName)))"}
}

extension UpdateMedicalVocabularyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let vocabularyFileUri = vocabularyFileUri {
            try encodeContainer.encode(vocabularyFileUri, forKey: .vocabularyFileUri)
        }
    }
}

public struct UpdateMedicalVocabularyInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateMedicalVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMedicalVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMedicalVocabularyInput>
    public typealias MOutput = OperationOutput<UpdateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMedicalVocabularyOutputError>
}

public struct UpdateMedicalVocabularyInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateMedicalVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMedicalVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMedicalVocabularyInput>
    public typealias MOutput = OperationOutput<UpdateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMedicalVocabularyOutputError>
}

public struct UpdateMedicalVocabularyInput: Equatable {
    /// <p>The language code of the language used for the entries in the updated vocabulary. US
    ///             English (en-US) is the only valid language code in Amazon Transcribe Medical.</p>
    public let languageCode: LanguageCode?
    /// <p>The location in Amazon S3 of the text file that contains
    ///             the
    ///             you use for your custom vocabulary. The URI must be in the same AWS
    ///             Region as the resource that you are calling. The following is the format for a
    ///             URI:</p>
    ///         <p>
    ///             <code>
    ///                 https://s3.<aws-region>.amazonaws.com/<bucket-name>/<keyprefix>/<objectkey>
    ///             </code>
    ///         </p>
    ///         <p>For example:</p>
    ///         <p>
    ///             <code>https://s3.us-east-1.amazonaws.com/AWSDOC-EXAMPLE-BUCKET/vocab.txt</code>
    ///          </p>
    ///         <p>For more information about Amazon S3 object names, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys">Object Keys</a> in the <i>Amazon S3 Developer Guide</i>.</p>
    ///         <p>For more information about custom vocabularies in Amazon Transcribe Medical, see <a href="http://docs.aws.amazon.com/transcribe/latest/dg/how-it-works.html#how-vocabulary">Medical Custom Vocabularies</a>.</p>
    public let vocabularyFileUri: String?
    /// <p>The name of the vocabulary to update. The name is case sensitive. If you try to update
    ///             a vocabulary with the same name
    ///             as
    ///             a vocabulary you've already made, you get a
    ///                 <code>ConflictException</code> error.</p>
    public let vocabularyName: String?

    public init (
        languageCode: LanguageCode? = nil,
        vocabularyFileUri: String? = nil,
        vocabularyName: String? = nil
    )
    {
        self.languageCode = languageCode
        self.vocabularyFileUri = vocabularyFileUri
        self.vocabularyName = vocabularyName
    }
}

struct UpdateMedicalVocabularyInputBody: Equatable {
    public let languageCode: LanguageCode?
    public let vocabularyFileUri: String?
}

extension UpdateMedicalVocabularyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let vocabularyFileUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyFileUri)
        vocabularyFileUri = vocabularyFileUriDecoded
    }
}

extension UpdateMedicalVocabularyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMedicalVocabularyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateMedicalVocabularyOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMedicalVocabularyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateMedicalVocabularyOutputResponse(languageCode: \(String(describing: languageCode)), lastModifiedTime: \(String(describing: lastModifiedTime)), vocabularyName: \(String(describing: vocabularyName)), vocabularyState: \(String(describing: vocabularyState)))"}
}

extension UpdateMedicalVocabularyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateMedicalVocabularyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyName = output.vocabularyName
            self.vocabularyState = output.vocabularyState
        } else {
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyName = nil
            self.vocabularyState = nil
        }
    }
}

public struct UpdateMedicalVocabularyOutputResponse: Equatable {
    /// <p>The language code for the language of the text file used to update the custom
    ///             vocabulary. US English (en-US) is the only language supported in Amazon Transcribe Medical.</p>
    public let languageCode: LanguageCode?
    /// <p>The date and time that the vocabulary was updated.</p>
    public let lastModifiedTime: Date?
    /// <p>The name of the updated vocabulary.</p>
    public let vocabularyName: String?
    /// <p>The processing state of the update to the vocabulary. When the
    ///                 <code>VocabularyState</code> field is <code>READY</code>, the vocabulary is ready to
    ///             be used in a <code>StartMedicalTranscriptionJob</code> request.</p>
    public let vocabularyState: VocabularyState?

    public init (
        languageCode: LanguageCode? = nil,
        lastModifiedTime: Date? = nil,
        vocabularyName: String? = nil,
        vocabularyState: VocabularyState? = nil
    )
    {
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyName = vocabularyName
        self.vocabularyState = vocabularyState
    }
}

struct UpdateMedicalVocabularyOutputResponseBody: Equatable {
    public let vocabularyName: String?
    public let languageCode: LanguageCode?
    public let lastModifiedTime: Date?
    public let vocabularyState: VocabularyState?
}

extension UpdateMedicalVocabularyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyName = "VocabularyName"
        case vocabularyState = "VocabularyState"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let vocabularyStateDecoded = try containerValues.decodeIfPresent(VocabularyState.self, forKey: .vocabularyState)
        vocabularyState = vocabularyStateDecoded
    }
}

public struct UpdateVocabularyFilterInputBodyMiddleware: Middleware {
    public let id: String = "UpdateVocabularyFilterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateVocabularyFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateVocabularyFilterInput>
    public typealias MOutput = OperationOutput<UpdateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateVocabularyFilterOutputError>
}

extension UpdateVocabularyFilterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateVocabularyFilterInput(vocabularyFilterFileUri: \(String(describing: vocabularyFilterFileUri)), vocabularyFilterName: \(String(describing: vocabularyFilterName)), words: \(String(describing: words)))"}
}

extension UpdateVocabularyFilterInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case vocabularyFilterFileUri = "VocabularyFilterFileUri"
        case words = "Words"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let vocabularyFilterFileUri = vocabularyFilterFileUri {
            try encodeContainer.encode(vocabularyFilterFileUri, forKey: .vocabularyFilterFileUri)
        }
        if let words = words {
            var wordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .words)
            for words0 in words {
                try wordsContainer.encode(words0)
            }
        }
    }
}

public struct UpdateVocabularyFilterInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateVocabularyFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateVocabularyFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateVocabularyFilterInput>
    public typealias MOutput = OperationOutput<UpdateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateVocabularyFilterOutputError>
}

public struct UpdateVocabularyFilterInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateVocabularyFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateVocabularyFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateVocabularyFilterInput>
    public typealias MOutput = OperationOutput<UpdateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateVocabularyFilterOutputError>
}

public struct UpdateVocabularyFilterInput: Equatable {
    /// <p>The Amazon S3 location of a text file used as input to create the vocabulary filter.
    ///             Only use characters from the character set defined for custom vocabularies. For a list
    ///             of character sets, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets">Character Sets for Custom
    ///                 Vocabularies</a>.</p>
    ///         <p>The specified file must be less than 50 KB of UTF-8 characters.</p>
    ///         <p>If you provide the location of a list of words in the
    ///                 <code>VocabularyFilterFileUri</code> parameter, you can't use the <code>Words</code>
    ///             parameter.</p>
    public let vocabularyFilterFileUri: String?
    /// <p>The name of the vocabulary filter to update. If you try to update a vocabulary filter
    ///             with the same name as another vocabulary filter, you get a
    ///                 <code>ConflictException</code> error.</p>
    public let vocabularyFilterName: String?
    /// <p>The words to use in the vocabulary filter. Only use characters from the character set
    ///             defined for custom vocabularies. For a list of character sets, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets">Character Sets for Custom Vocabularies</a>.</p>
    ///         <p>If you provide a list of words in the <code>Words</code> parameter, you can't use the
    ///                 <code>VocabularyFilterFileUri</code> parameter.</p>
    public let words: [String]?

    public init (
        vocabularyFilterFileUri: String? = nil,
        vocabularyFilterName: String? = nil,
        words: [String]? = nil
    )
    {
        self.vocabularyFilterFileUri = vocabularyFilterFileUri
        self.vocabularyFilterName = vocabularyFilterName
        self.words = words
    }
}

struct UpdateVocabularyFilterInputBody: Equatable {
    public let words: [String]?
    public let vocabularyFilterFileUri: String?
}

extension UpdateVocabularyFilterInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case vocabularyFilterFileUri = "VocabularyFilterFileUri"
        case words = "Words"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wordsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .words)
        var wordsDecoded0:[String]? = nil
        if let wordsContainer = wordsContainer {
            wordsDecoded0 = [String]()
            for string0 in wordsContainer {
                if let string0 = string0 {
                    wordsDecoded0?.append(string0)
                }
            }
        }
        words = wordsDecoded0
        let vocabularyFilterFileUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyFilterFileUri)
        vocabularyFilterFileUri = vocabularyFilterFileUriDecoded
    }
}

extension UpdateVocabularyFilterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateVocabularyFilterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateVocabularyFilterOutputError: Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateVocabularyFilterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateVocabularyFilterOutputResponse(languageCode: \(String(describing: languageCode)), lastModifiedTime: \(String(describing: lastModifiedTime)), vocabularyFilterName: \(String(describing: vocabularyFilterName)))"}
}

extension UpdateVocabularyFilterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateVocabularyFilterOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyFilterName = output.vocabularyFilterName
        } else {
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyFilterName = nil
        }
    }
}

public struct UpdateVocabularyFilterOutputResponse: Equatable {
    /// <p>The language code of the words in the vocabulary filter.</p>
    public let languageCode: LanguageCode?
    /// <p>The date and time that the vocabulary filter was updated.</p>
    public let lastModifiedTime: Date?
    /// <p>The name of the updated vocabulary filter.</p>
    public let vocabularyFilterName: String?

    public init (
        languageCode: LanguageCode? = nil,
        lastModifiedTime: Date? = nil,
        vocabularyFilterName: String? = nil
    )
    {
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyFilterName = vocabularyFilterName
    }
}

struct UpdateVocabularyFilterOutputResponseBody: Equatable {
    public let vocabularyFilterName: String?
    public let languageCode: LanguageCode?
    public let lastModifiedTime: Date?
}

extension UpdateVocabularyFilterOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyFilterName = "VocabularyFilterName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyFilterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyFilterName)
        vocabularyFilterName = vocabularyFilterNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

public struct UpdateVocabularyInputBodyMiddleware: Middleware {
    public let id: String = "UpdateVocabularyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateVocabularyInput>
    public typealias MOutput = OperationOutput<UpdateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateVocabularyOutputError>
}

extension UpdateVocabularyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateVocabularyInput(languageCode: \(String(describing: languageCode)), phrases: \(String(describing: phrases)), vocabularyFileUri: \(String(describing: vocabularyFileUri)), vocabularyName: \(String(describing: vocabularyName)))"}
}

extension UpdateVocabularyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case phrases = "Phrases"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let phrases = phrases {
            var phrasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .phrases)
            for phrases0 in phrases {
                try phrasesContainer.encode(phrases0)
            }
        }
        if let vocabularyFileUri = vocabularyFileUri {
            try encodeContainer.encode(vocabularyFileUri, forKey: .vocabularyFileUri)
        }
    }
}

public struct UpdateVocabularyInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateVocabularyInput>
    public typealias MOutput = OperationOutput<UpdateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateVocabularyOutputError>
}

public struct UpdateVocabularyInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateVocabularyInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateVocabularyInput>
    public typealias MOutput = OperationOutput<UpdateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateVocabularyOutputError>
}

public struct UpdateVocabularyInput: Equatable {
    /// <p>The language code of the vocabulary entries. For a list of languages and their
    ///             corresponding language codes, see <a>what-is-transcribe</a>.</p>
    public let languageCode: LanguageCode?
    /// <p>An array of strings containing the vocabulary entries.</p>
    public let phrases: [String]?
    /// <p>The S3 location of the text file that contains the definition of the custom
    ///             vocabulary. The URI must be in the same region as the API endpoint that you are calling.
    ///             The general form is </p>
    ///
    ///         <p>For example:</p>
    ///
    ///         <p>For more information about S3 object names, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys">Object Keys</a> in the <i>Amazon S3 Developer Guide</i>.</p>
    ///         <p>For more information about custom vocabularies, see <a href="http://docs.aws.amazon.com/transcribe/latest/dg/how-it-works.html#how-vocabulary">Custom Vocabularies</a>.</p>
    public let vocabularyFileUri: String?
    /// <p>The name of the vocabulary to update. The name is case sensitive. If you try to update
    ///             a vocabulary with the same name as a previous vocabulary you will receive a
    ///                 <code>ConflictException</code> error.</p>
    public let vocabularyName: String?

    public init (
        languageCode: LanguageCode? = nil,
        phrases: [String]? = nil,
        vocabularyFileUri: String? = nil,
        vocabularyName: String? = nil
    )
    {
        self.languageCode = languageCode
        self.phrases = phrases
        self.vocabularyFileUri = vocabularyFileUri
        self.vocabularyName = vocabularyName
    }
}

struct UpdateVocabularyInputBody: Equatable {
    public let languageCode: LanguageCode?
    public let phrases: [String]?
    public let vocabularyFileUri: String?
}

extension UpdateVocabularyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case phrases = "Phrases"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let phrasesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .phrases)
        var phrasesDecoded0:[String]? = nil
        if let phrasesContainer = phrasesContainer {
            phrasesDecoded0 = [String]()
            for string0 in phrasesContainer {
                if let string0 = string0 {
                    phrasesDecoded0?.append(string0)
                }
            }
        }
        phrases = phrasesDecoded0
        let vocabularyFileUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyFileUri)
        vocabularyFileUri = vocabularyFileUriDecoded
    }
}

extension UpdateVocabularyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateVocabularyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateVocabularyOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateVocabularyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateVocabularyOutputResponse(languageCode: \(String(describing: languageCode)), lastModifiedTime: \(String(describing: lastModifiedTime)), vocabularyName: \(String(describing: vocabularyName)), vocabularyState: \(String(describing: vocabularyState)))"}
}

extension UpdateVocabularyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateVocabularyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyName = output.vocabularyName
            self.vocabularyState = output.vocabularyState
        } else {
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyName = nil
            self.vocabularyState = nil
        }
    }
}

public struct UpdateVocabularyOutputResponse: Equatable {
    /// <p>The language code of the vocabulary entries.</p>
    public let languageCode: LanguageCode?
    /// <p>The date and time that the vocabulary was updated.</p>
    public let lastModifiedTime: Date?
    /// <p>The name of the vocabulary that was updated.</p>
    public let vocabularyName: String?
    /// <p>The processing state of the vocabulary. When the <code>VocabularyState</code> field
    ///             contains <code>READY</code> the vocabulary is ready to be used in a
    ///                 <code>StartTranscriptionJob</code> request.</p>
    public let vocabularyState: VocabularyState?

    public init (
        languageCode: LanguageCode? = nil,
        lastModifiedTime: Date? = nil,
        vocabularyName: String? = nil,
        vocabularyState: VocabularyState? = nil
    )
    {
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyName = vocabularyName
        self.vocabularyState = vocabularyState
    }
}

struct UpdateVocabularyOutputResponseBody: Equatable {
    public let vocabularyName: String?
    public let languageCode: LanguageCode?
    public let lastModifiedTime: Date?
    public let vocabularyState: VocabularyState?
}

extension UpdateVocabularyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyName = "VocabularyName"
        case vocabularyState = "VocabularyState"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let vocabularyStateDecoded = try containerValues.decodeIfPresent(VocabularyState.self, forKey: .vocabularyState)
        vocabularyState = vocabularyStateDecoded
    }
}

extension VocabularyFilterInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyFilterName = "VocabularyFilterName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let vocabularyFilterName = vocabularyFilterName {
            try encodeContainer.encode(vocabularyFilterName, forKey: .vocabularyFilterName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyFilterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyFilterName)
        vocabularyFilterName = vocabularyFilterNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension VocabularyFilterInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VocabularyFilterInfo(languageCode: \(String(describing: languageCode)), lastModifiedTime: \(String(describing: lastModifiedTime)), vocabularyFilterName: \(String(describing: vocabularyFilterName)))"}
}

/// <p>Provides information about a vocabulary filter.</p>
public struct VocabularyFilterInfo: Equatable {
    /// <p>The language code of the words in the vocabulary filter.</p>
    public let languageCode: LanguageCode?
    /// <p>The date and time that the vocabulary was last updated.</p>
    public let lastModifiedTime: Date?
    /// <p>The name of the vocabulary filter. The name must be unique in the account that holds
    ///             the filter.</p>
    public let vocabularyFilterName: String?

    public init (
        languageCode: LanguageCode? = nil,
        lastModifiedTime: Date? = nil,
        vocabularyFilterName: String? = nil
    )
    {
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyFilterName = vocabularyFilterName
    }
}

public enum VocabularyFilterMethod {
    case mask
    case remove
    case tag
    case sdkUnknown(String)
}

extension VocabularyFilterMethod : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [VocabularyFilterMethod] {
        return [
            .mask,
            .remove,
            .tag,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .mask: return "mask"
        case .remove: return "remove"
        case .tag: return "tag"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = VocabularyFilterMethod(rawValue: rawValue) ?? VocabularyFilterMethod.sdkUnknown(rawValue)
    }
}

extension VocabularyInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyName = "VocabularyName"
        case vocabularyState = "VocabularyState"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let vocabularyName = vocabularyName {
            try encodeContainer.encode(vocabularyName, forKey: .vocabularyName)
        }
        if let vocabularyState = vocabularyState {
            try encodeContainer.encode(vocabularyState.rawValue, forKey: .vocabularyState)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let vocabularyStateDecoded = try containerValues.decodeIfPresent(VocabularyState.self, forKey: .vocabularyState)
        vocabularyState = vocabularyStateDecoded
    }
}

extension VocabularyInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VocabularyInfo(languageCode: \(String(describing: languageCode)), lastModifiedTime: \(String(describing: lastModifiedTime)), vocabularyName: \(String(describing: vocabularyName)), vocabularyState: \(String(describing: vocabularyState)))"}
}

/// <p>Provides information about a custom vocabulary. </p>
public struct VocabularyInfo: Equatable {
    /// <p>The language code of the vocabulary entries.</p>
    public let languageCode: LanguageCode?
    /// <p>The date and time that the vocabulary was last modified.</p>
    public let lastModifiedTime: Date?
    /// <p>The name of the vocabulary.</p>
    public let vocabularyName: String?
    /// <p>The processing state of the vocabulary. If the state is <code>READY</code> you can use
    ///             the vocabulary in a <code>StartTranscriptionJob</code> request.</p>
    public let vocabularyState: VocabularyState?

    public init (
        languageCode: LanguageCode? = nil,
        lastModifiedTime: Date? = nil,
        vocabularyName: String? = nil,
        vocabularyState: VocabularyState? = nil
    )
    {
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyName = vocabularyName
        self.vocabularyState = vocabularyState
    }
}

public enum VocabularyState {
    case failed
    case pending
    case ready
    case sdkUnknown(String)
}

extension VocabularyState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [VocabularyState] {
        return [
            .failed,
            .pending,
            .ready,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .failed: return "FAILED"
        case .pending: return "PENDING"
        case .ready: return "READY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = VocabularyState(rawValue: rawValue) ?? VocabularyState.sdkUnknown(rawValue)
    }
}
