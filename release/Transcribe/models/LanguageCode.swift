// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum LanguageCode {
    case afZa
    case arAe
    case arSa
    case cyGb
    case daDk
    case deCh
    case deDe
    case enAb
    case enAu
    case enGb
    case enIe
    case enIn
    case enUs
    case enWl
    case esEs
    case esUs
    case faIr
    case frCa
    case frFr
    case gaIe
    case gdGb
    case heIl
    case hiIn
    case idId
    case itIt
    case jaJp
    case koKr
    case msMy
    case nlNl
    case ptBr
    case ptPt
    case ruRu
    case taIn
    case teIn
    case trTr
    case zhCn
    case sdkUnknown(String)
}

extension LanguageCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LanguageCode] {
        return [
            .afZa,
            .arAe,
            .arSa,
            .cyGb,
            .daDk,
            .deCh,
            .deDe,
            .enAb,
            .enAu,
            .enGb,
            .enIe,
            .enIn,
            .enUs,
            .enWl,
            .esEs,
            .esUs,
            .faIr,
            .frCa,
            .frFr,
            .gaIe,
            .gdGb,
            .heIl,
            .hiIn,
            .idId,
            .itIt,
            .jaJp,
            .koKr,
            .msMy,
            .nlNl,
            .ptBr,
            .ptPt,
            .ruRu,
            .taIn,
            .teIn,
            .trTr,
            .zhCn,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .afZa: return "af-ZA"
        case .arAe: return "ar-AE"
        case .arSa: return "ar-SA"
        case .cyGb: return "cy-GB"
        case .daDk: return "da-DK"
        case .deCh: return "de-CH"
        case .deDe: return "de-DE"
        case .enAb: return "en-AB"
        case .enAu: return "en-AU"
        case .enGb: return "en-GB"
        case .enIe: return "en-IE"
        case .enIn: return "en-IN"
        case .enUs: return "en-US"
        case .enWl: return "en-WL"
        case .esEs: return "es-ES"
        case .esUs: return "es-US"
        case .faIr: return "fa-IR"
        case .frCa: return "fr-CA"
        case .frFr: return "fr-FR"
        case .gaIe: return "ga-IE"
        case .gdGb: return "gd-GB"
        case .heIl: return "he-IL"
        case .hiIn: return "hi-IN"
        case .idId: return "id-ID"
        case .itIt: return "it-IT"
        case .jaJp: return "ja-JP"
        case .koKr: return "ko-KR"
        case .msMy: return "ms-MY"
        case .nlNl: return "nl-NL"
        case .ptBr: return "pt-BR"
        case .ptPt: return "pt-PT"
        case .ruRu: return "ru-RU"
        case .taIn: return "ta-IN"
        case .teIn: return "te-IN"
        case .trTr: return "tr-TR"
        case .zhCn: return "zh-CN"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LanguageCode(rawValue: rawValue) ?? LanguageCode.sdkUnknown(rawValue)
    }
}
