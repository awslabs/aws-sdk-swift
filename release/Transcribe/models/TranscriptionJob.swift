// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes an asynchronous transcription job that was created with the
///                 <code>StartTranscriptionJob</code> operation. </p>
public struct TranscriptionJob: Equatable {
    /// <p>A timestamp that shows when the job was completed.</p>
    public let completionTime: Date?
    /// <p>An object that describes content redaction settings for the transcription job.</p>
    public let contentRedaction: ContentRedaction?
    /// <p>A timestamp that shows when the job was created.</p>
    public let creationTime: Date?
    /// <p>If the <code>TranscriptionJobStatus</code> field is <code>FAILED</code>, this field
    ///             contains information about why the job failed.</p>
    ///         <p>The <code>FailureReason</code> field can contain one of the following values:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>Unsupported media format</code> - The media format specified in the
    ///                         <code>MediaFormat</code> field of the request isn't valid. See the
    ///                     description of the <code>MediaFormat</code> field for a list of valid
    ///                     values.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>The media format provided does not match the detected media
    ///                         format</code> - The media format of the audio file doesn't match the format
    ///                     specified in the <code>MediaFormat</code> field in the request. Check the media
    ///                     format of your media file and make sure that the two values match.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Invalid sample rate for audio file</code> - The sample rate specified in
    ///                     the <code>MediaSampleRateHertz</code> of the request isn't valid. The sample
    ///                     rate must be between 8000 and 48000 Hertz.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>The sample rate provided does not match the detected sample rate</code>
    ///                     - The sample rate in the audio file doesn't match the sample rate specified in
    ///                     the <code>MediaSampleRateHertz</code> field in the request. Check the sample
    ///                     rate of your media file and make sure that the two values match.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Invalid file size: file size too large</code> - The size of your audio
    ///                     file is larger than Amazon Transcribe can process. For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/limits-guidelines.html#limits">Limits</a> in the <i>Amazon Transcribe Developer Guide</i>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Invalid number of channels: number of channels too large</code> - Your
    ///                     audio contains more channels than Amazon Transcribe is configured to process. To request
    ///                     additional channels, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits-amazon-transcribe">Amazon Transcribe Limits</a> in the <i>Amazon Web Services
    ///                         General Reference</i>.</p>
    ///             </li>
    ///          </ul>
    public let failureReason: String?
    /// <p>A value between zero and one that Amazon Transcribe assigned to the language that it identified in
    ///             the source audio. Larger values indicate that Amazon Transcribe has higher confidence in the
    ///             language it identified.</p>
    public let identifiedLanguageScore: Float?
    /// <p>A value that shows if automatic language identification was enabled for a
    ///             transcription job.</p>
    public let identifyLanguage: Bool?
    /// <p>Provides information about how a transcription job is executed.</p>
    public let jobExecutionSettings: JobExecutionSettings?
    /// <p>The language code for the input speech.</p>
    public let languageCode: LanguageCode?
    /// <p>An object that shows the optional array of languages inputted for transcription jobs
    ///             with automatic language identification enabled.</p>
    public let languageOptions: [LanguageCode]?
    /// <p>An object that describes the input media for the transcription job.</p>
    public let media: Media?
    /// <p>The format of the input media file.</p>
    public let mediaFormat: MediaFormat?
    /// <p>The sample rate, in Hertz, of the audio track in the input media file. </p>
    public let mediaSampleRateHertz: Int?
    /// <p>An object containing the details of your custom language model.</p>
    public let modelSettings: ModelSettings?
    /// <p>Optional settings for the transcription job. Use these settings to turn on speaker
    ///             recognition, to set the maximum number of speakers that should be identified and to
    ///             specify a custom vocabulary to use when processing the transcription job.</p>
    public let settings: Settings?
    /// <p>A timestamp that shows with the job was started processing.</p>
    public let startTime: Date?
    /// <p>An object that describes the output of the transcription job.</p>
    public let transcript: Transcript?
    /// <p>The name of the transcription job.</p>
    public let transcriptionJobName: String?
    /// <p>The status of the transcription job.</p>
    public let transcriptionJobStatus: TranscriptionJobStatus?

    public init (
        completionTime: Date? = nil,
        contentRedaction: ContentRedaction? = nil,
        creationTime: Date? = nil,
        failureReason: String? = nil,
        identifiedLanguageScore: Float? = nil,
        identifyLanguage: Bool? = nil,
        jobExecutionSettings: JobExecutionSettings? = nil,
        languageCode: LanguageCode? = nil,
        languageOptions: [LanguageCode]? = nil,
        media: Media? = nil,
        mediaFormat: MediaFormat? = nil,
        mediaSampleRateHertz: Int? = nil,
        modelSettings: ModelSettings? = nil,
        settings: Settings? = nil,
        startTime: Date? = nil,
        transcript: Transcript? = nil,
        transcriptionJobName: String? = nil,
        transcriptionJobStatus: TranscriptionJobStatus? = nil
    )
    {
        self.completionTime = completionTime
        self.contentRedaction = contentRedaction
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.identifiedLanguageScore = identifiedLanguageScore
        self.identifyLanguage = identifyLanguage
        self.jobExecutionSettings = jobExecutionSettings
        self.languageCode = languageCode
        self.languageOptions = languageOptions
        self.media = media
        self.mediaFormat = mediaFormat
        self.mediaSampleRateHertz = mediaSampleRateHertz
        self.modelSettings = modelSettings
        self.settings = settings
        self.startTime = startTime
        self.transcript = transcript
        self.transcriptionJobName = transcriptionJobName
        self.transcriptionJobStatus = transcriptionJobStatus
    }
}
