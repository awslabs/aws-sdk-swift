// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LanguageModel: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case baseModelName = "BaseModelName"
        case createTime = "CreateTime"
        case failureReason = "FailureReason"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case modelName = "ModelName"
        case modelStatus = "ModelStatus"
        case upgradeAvailability = "UpgradeAvailability"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseModelName = baseModelName {
            try encodeContainer.encode(baseModelName.rawValue, forKey: .baseModelName)
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let inputDataConfig = inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let modelStatus = modelStatus {
            try encodeContainer.encode(modelStatus.rawValue, forKey: .modelStatus)
        }
        if let upgradeAvailability = upgradeAvailability {
            try encodeContainer.encode(upgradeAvailability, forKey: .upgradeAvailability)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(CLMLanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let baseModelNameDecoded = try containerValues.decodeIfPresent(BaseModelName.self, forKey: .baseModelName)
        baseModelName = baseModelNameDecoded
        let modelStatusDecoded = try containerValues.decodeIfPresent(ModelStatus.self, forKey: .modelStatus)
        modelStatus = modelStatusDecoded
        let upgradeAvailabilityDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .upgradeAvailability)
        upgradeAvailability = upgradeAvailabilityDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
    }
}
