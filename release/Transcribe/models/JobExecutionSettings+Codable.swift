// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JobExecutionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowDeferredExecution = "AllowDeferredExecution"
        case dataAccessRoleArn = "DataAccessRoleArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowDeferredExecution = allowDeferredExecution {
            try encodeContainer.encode(allowDeferredExecution, forKey: .allowDeferredExecution)
        }
        if let dataAccessRoleArn = dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowDeferredExecutionDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .allowDeferredExecution)
        allowDeferredExecution = allowDeferredExecutionDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
    }
}
