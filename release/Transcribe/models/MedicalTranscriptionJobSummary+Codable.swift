// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MedicalTranscriptionJobSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case completionTime = "CompletionTime"
        case contentIdentificationType = "ContentIdentificationType"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case medicalTranscriptionJobName = "MedicalTranscriptionJobName"
        case outputLocationType = "OutputLocationType"
        case specialty = "Specialty"
        case startTime = "StartTime"
        case transcriptionJobStatus = "TranscriptionJobStatus"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let contentIdentificationType = contentIdentificationType {
            try encodeContainer.encode(contentIdentificationType.rawValue, forKey: .contentIdentificationType)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let medicalTranscriptionJobName = medicalTranscriptionJobName {
            try encodeContainer.encode(medicalTranscriptionJobName, forKey: .medicalTranscriptionJobName)
        }
        if let outputLocationType = outputLocationType {
            try encodeContainer.encode(outputLocationType.rawValue, forKey: .outputLocationType)
        }
        if let specialty = specialty {
            try encodeContainer.encode(specialty.rawValue, forKey: .specialty)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let transcriptionJobStatus = transcriptionJobStatus {
            try encodeContainer.encode(transcriptionJobStatus.rawValue, forKey: .transcriptionJobStatus)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let medicalTranscriptionJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .medicalTranscriptionJobName)
        medicalTranscriptionJobName = medicalTranscriptionJobNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let transcriptionJobStatusDecoded = try containerValues.decodeIfPresent(TranscriptionJobStatus.self, forKey: .transcriptionJobStatus)
        transcriptionJobStatus = transcriptionJobStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let outputLocationTypeDecoded = try containerValues.decodeIfPresent(OutputLocationType.self, forKey: .outputLocationType)
        outputLocationType = outputLocationTypeDecoded
        let specialtyDecoded = try containerValues.decodeIfPresent(Specialty.self, forKey: .specialty)
        specialty = specialtyDecoded
        let contentIdentificationTypeDecoded = try containerValues.decodeIfPresent(MedicalContentIdentificationType.self, forKey: .contentIdentificationType)
        contentIdentificationType = contentIdentificationTypeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(`Type`.self, forKey: .type)
        type = typeDecoded
    }
}
