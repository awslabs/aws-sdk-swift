// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranscriptionJob: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case completionTime = "CompletionTime"
        case contentRedaction = "ContentRedaction"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case identifiedLanguageScore = "IdentifiedLanguageScore"
        case identifyLanguage = "IdentifyLanguage"
        case jobExecutionSettings = "JobExecutionSettings"
        case languageCode = "LanguageCode"
        case languageOptions = "LanguageOptions"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case modelSettings = "ModelSettings"
        case settings = "Settings"
        case startTime = "StartTime"
        case transcript = "Transcript"
        case transcriptionJobName = "TranscriptionJobName"
        case transcriptionJobStatus = "TranscriptionJobStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let contentRedaction = contentRedaction {
            try encodeContainer.encode(contentRedaction, forKey: .contentRedaction)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let identifiedLanguageScore = identifiedLanguageScore {
            try encodeContainer.encode(identifiedLanguageScore, forKey: .identifiedLanguageScore)
        }
        if let identifyLanguage = identifyLanguage {
            try encodeContainer.encode(identifyLanguage, forKey: .identifyLanguage)
        }
        if let jobExecutionSettings = jobExecutionSettings {
            try encodeContainer.encode(jobExecutionSettings, forKey: .jobExecutionSettings)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let languageOptions = languageOptions {
            var languageOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .languageOptions)
            for languageoptions0 in languageOptions {
                try languageOptionsContainer.encode(languageoptions0.rawValue)
            }
        }
        if let media = media {
            try encodeContainer.encode(media, forKey: .media)
        }
        if let mediaFormat = mediaFormat {
            try encodeContainer.encode(mediaFormat.rawValue, forKey: .mediaFormat)
        }
        if let mediaSampleRateHertz = mediaSampleRateHertz {
            try encodeContainer.encode(mediaSampleRateHertz, forKey: .mediaSampleRateHertz)
        }
        if let modelSettings = modelSettings {
            try encodeContainer.encode(modelSettings, forKey: .modelSettings)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let transcript = transcript {
            try encodeContainer.encode(transcript, forKey: .transcript)
        }
        if let transcriptionJobName = transcriptionJobName {
            try encodeContainer.encode(transcriptionJobName, forKey: .transcriptionJobName)
        }
        if let transcriptionJobStatus = transcriptionJobStatus {
            try encodeContainer.encode(transcriptionJobStatus.rawValue, forKey: .transcriptionJobStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptionJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transcriptionJobName)
        transcriptionJobName = transcriptionJobNameDecoded
        let transcriptionJobStatusDecoded = try containerValues.decodeIfPresent(TranscriptionJobStatus.self, forKey: .transcriptionJobStatus)
        transcriptionJobStatus = transcriptionJobStatusDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let mediaSampleRateHertzDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .mediaSampleRateHertz)
        mediaSampleRateHertz = mediaSampleRateHertzDecoded
        let mediaFormatDecoded = try containerValues.decodeIfPresent(MediaFormat.self, forKey: .mediaFormat)
        mediaFormat = mediaFormatDecoded
        let mediaDecoded = try containerValues.decodeIfPresent(Media.self, forKey: .media)
        media = mediaDecoded
        let transcriptDecoded = try containerValues.decodeIfPresent(Transcript.self, forKey: .transcript)
        transcript = transcriptDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(Settings.self, forKey: .settings)
        settings = settingsDecoded
        let modelSettingsDecoded = try containerValues.decodeIfPresent(ModelSettings.self, forKey: .modelSettings)
        modelSettings = modelSettingsDecoded
        let jobExecutionSettingsDecoded = try containerValues.decodeIfPresent(JobExecutionSettings.self, forKey: .jobExecutionSettings)
        jobExecutionSettings = jobExecutionSettingsDecoded
        let contentRedactionDecoded = try containerValues.decodeIfPresent(ContentRedaction.self, forKey: .contentRedaction)
        contentRedaction = contentRedactionDecoded
        let identifyLanguageDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .identifyLanguage)
        identifyLanguage = identifyLanguageDecoded
        let languageOptionsContainer = try containerValues.decodeIfPresent([LanguageCode].self, forKey: .languageOptions)
        var languageOptionsDecoded0:[LanguageCode]? = nil
        if let languageOptionsContainer = languageOptionsContainer {
            languageOptionsDecoded0 = [LanguageCode]()
            for string0 in languageOptionsContainer {
                languageOptionsDecoded0?.append(string0)
            }
        }
        languageOptions = languageOptionsDecoded0
        let identifiedLanguageScoreDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .identifiedLanguageScore)
        identifiedLanguageScore = identifiedLanguageScoreDecoded
    }
}
