// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartTranscriptionJobInputBody: Equatable {
    public let languageCode: LanguageCode?
    public let mediaSampleRateHertz: Int?
    public let mediaFormat: MediaFormat?
    public let media: Media?
    public let outputBucketName: String?
    public let outputKey: String?
    public let outputEncryptionKMSKeyId: String?
    public let settings: Settings?
    public let modelSettings: ModelSettings?
    public let jobExecutionSettings: JobExecutionSettings?
    public let contentRedaction: ContentRedaction?
    public let identifyLanguage: Bool?
    public let languageOptions: [LanguageCode]?
}

extension StartTranscriptionJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case contentRedaction = "ContentRedaction"
        case identifyLanguage = "IdentifyLanguage"
        case jobExecutionSettings = "JobExecutionSettings"
        case languageCode = "LanguageCode"
        case languageOptions = "LanguageOptions"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case modelSettings = "ModelSettings"
        case outputBucketName = "OutputBucketName"
        case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
        case outputKey = "OutputKey"
        case settings = "Settings"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let mediaSampleRateHertzDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .mediaSampleRateHertz)
        mediaSampleRateHertz = mediaSampleRateHertzDecoded
        let mediaFormatDecoded = try containerValues.decodeIfPresent(MediaFormat.self, forKey: .mediaFormat)
        mediaFormat = mediaFormatDecoded
        let mediaDecoded = try containerValues.decodeIfPresent(Media.self, forKey: .media)
        media = mediaDecoded
        let outputBucketNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputBucketName)
        outputBucketName = outputBucketNameDecoded
        let outputKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputKey)
        outputKey = outputKeyDecoded
        let outputEncryptionKMSKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputEncryptionKMSKeyId)
        outputEncryptionKMSKeyId = outputEncryptionKMSKeyIdDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(Settings.self, forKey: .settings)
        settings = settingsDecoded
        let modelSettingsDecoded = try containerValues.decodeIfPresent(ModelSettings.self, forKey: .modelSettings)
        modelSettings = modelSettingsDecoded
        let jobExecutionSettingsDecoded = try containerValues.decodeIfPresent(JobExecutionSettings.self, forKey: .jobExecutionSettings)
        jobExecutionSettings = jobExecutionSettingsDecoded
        let contentRedactionDecoded = try containerValues.decodeIfPresent(ContentRedaction.self, forKey: .contentRedaction)
        contentRedaction = contentRedactionDecoded
        let identifyLanguageDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .identifyLanguage)
        identifyLanguage = identifyLanguageDecoded
        let languageOptionsContainer = try containerValues.decodeIfPresent([LanguageCode].self, forKey: .languageOptions)
        var languageOptionsDecoded0:[LanguageCode]? = nil
        if let languageOptionsContainer = languageOptionsContainer {
            languageOptionsDecoded0 = [LanguageCode]()
            for string0 in languageOptionsContainer {
                languageOptionsDecoded0?.append(string0)
            }
        }
        languageOptions = languageOptionsDecoded0
    }
}
