// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteMultiplexProgramOutputBody: Equatable {
    public let channelId: String?
    public let multiplexProgramSettings: MultiplexProgramSettings?
    public let packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap?
    public let pipelineDetails: [MultiplexProgramPipelineDetail]?
    public let programName: String?
}

extension DeleteMultiplexProgramOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channelId = "channelId"
        case multiplexProgramSettings = "multiplexProgramSettings"
        case packetIdentifiersMap = "packetIdentifiersMap"
        case pipelineDetails = "pipelineDetails"
        case programName = "programName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .channelId)
        channelId = channelIdDecoded
        let multiplexProgramSettingsDecoded = try containerValues.decodeIfPresent(MultiplexProgramSettings.self, forKey: .multiplexProgramSettings)
        multiplexProgramSettings = multiplexProgramSettingsDecoded
        let packetIdentifiersMapDecoded = try containerValues.decodeIfPresent(MultiplexProgramPacketIdentifiersMap.self, forKey: .packetIdentifiersMap)
        packetIdentifiersMap = packetIdentifiersMapDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([MultiplexProgramPipelineDetail].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[MultiplexProgramPipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [MultiplexProgramPipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                pipelineDetailsDecoded0?.append(structure0)
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let programNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .programName)
        programName = programNameDecoded
    }
}
