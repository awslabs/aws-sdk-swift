// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AudioTrackSelection: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tracks = "tracks"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tracks = tracks {
            var tracksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tracks)
            for __listofaudiotrack0 in tracks {
                try tracksContainer.encode(__listofaudiotrack0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tracksContainer = try containerValues.decodeIfPresent([AudioTrack].self, forKey: .tracks)
        var tracksDecoded0:[AudioTrack]? = nil
        if let tracksContainer = tracksContainer {
            tracksDecoded0 = [AudioTrack]()
            for structure0 in tracksContainer {
                tracksDecoded0?.append(structure0)
            }
        }
        tracks = tracksDecoded0
    }
}
