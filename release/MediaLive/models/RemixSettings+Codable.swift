// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RemixSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelMappings = "channelMappings"
        case channelsIn = "channelsIn"
        case channelsOut = "channelsOut"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelMappings = channelMappings {
            var channelMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .channelMappings)
            for __listofaudiochannelmapping0 in channelMappings {
                try channelMappingsContainer.encode(__listofaudiochannelmapping0)
            }
        }
        if channelsIn != 0 {
            try encodeContainer.encode(channelsIn, forKey: .channelsIn)
        }
        if channelsOut != 0 {
            try encodeContainer.encode(channelsOut, forKey: .channelsOut)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelMappingsContainer = try containerValues.decodeIfPresent([AudioChannelMapping].self, forKey: .channelMappings)
        var channelMappingsDecoded0:[AudioChannelMapping]? = nil
        if let channelMappingsContainer = channelMappingsContainer {
            channelMappingsDecoded0 = [AudioChannelMapping]()
            for structure0 in channelMappingsContainer {
                channelMappingsDecoded0?.append(structure0)
            }
        }
        channelMappings = channelMappingsDecoded0
        let channelsInDecoded = try containerValues.decode(Int.self, forKey: .channelsIn)
        channelsIn = channelsInDecoded
        let channelsOutDecoded = try containerValues.decode(Int.self, forKey: .channelsOut)
        channelsOut = channelsOutDecoded
    }
}
