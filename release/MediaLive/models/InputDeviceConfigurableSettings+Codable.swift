// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InputDeviceConfigurableSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configuredInput = "configuredInput"
        case maxBitrate = "maxBitrate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuredInput = configuredInput {
            try encodeContainer.encode(configuredInput.rawValue, forKey: .configuredInput)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configuredInputDecoded = try containerValues.decodeIfPresent(InputDeviceConfiguredInput.self, forKey: .configuredInput)
        configuredInput = configuredInputDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
    }
}
