// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EncoderSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioDescriptions = "audioDescriptions"
        case availBlanking = "availBlanking"
        case availConfiguration = "availConfiguration"
        case blackoutSlate = "blackoutSlate"
        case captionDescriptions = "captionDescriptions"
        case featureActivations = "featureActivations"
        case globalConfiguration = "globalConfiguration"
        case motionGraphicsConfiguration = "motionGraphicsConfiguration"
        case nielsenConfiguration = "nielsenConfiguration"
        case outputGroups = "outputGroups"
        case timecodeConfig = "timecodeConfig"
        case videoDescriptions = "videoDescriptions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDescriptions = audioDescriptions {
            var audioDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioDescriptions)
            for __listofaudiodescription0 in audioDescriptions {
                try audioDescriptionsContainer.encode(__listofaudiodescription0)
            }
        }
        if let availBlanking = availBlanking {
            try encodeContainer.encode(availBlanking, forKey: .availBlanking)
        }
        if let availConfiguration = availConfiguration {
            try encodeContainer.encode(availConfiguration, forKey: .availConfiguration)
        }
        if let blackoutSlate = blackoutSlate {
            try encodeContainer.encode(blackoutSlate, forKey: .blackoutSlate)
        }
        if let captionDescriptions = captionDescriptions {
            var captionDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionDescriptions)
            for __listofcaptiondescription0 in captionDescriptions {
                try captionDescriptionsContainer.encode(__listofcaptiondescription0)
            }
        }
        if let featureActivations = featureActivations {
            try encodeContainer.encode(featureActivations, forKey: .featureActivations)
        }
        if let globalConfiguration = globalConfiguration {
            try encodeContainer.encode(globalConfiguration, forKey: .globalConfiguration)
        }
        if let motionGraphicsConfiguration = motionGraphicsConfiguration {
            try encodeContainer.encode(motionGraphicsConfiguration, forKey: .motionGraphicsConfiguration)
        }
        if let nielsenConfiguration = nielsenConfiguration {
            try encodeContainer.encode(nielsenConfiguration, forKey: .nielsenConfiguration)
        }
        if let outputGroups = outputGroups {
            var outputGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputGroups)
            for __listofoutputgroup0 in outputGroups {
                try outputGroupsContainer.encode(__listofoutputgroup0)
            }
        }
        if let timecodeConfig = timecodeConfig {
            try encodeContainer.encode(timecodeConfig, forKey: .timecodeConfig)
        }
        if let videoDescriptions = videoDescriptions {
            var videoDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .videoDescriptions)
            for __listofvideodescription0 in videoDescriptions {
                try videoDescriptionsContainer.encode(__listofvideodescription0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDescriptionsContainer = try containerValues.decodeIfPresent([AudioDescription].self, forKey: .audioDescriptions)
        var audioDescriptionsDecoded0:[AudioDescription]? = nil
        if let audioDescriptionsContainer = audioDescriptionsContainer {
            audioDescriptionsDecoded0 = [AudioDescription]()
            for structure0 in audioDescriptionsContainer {
                audioDescriptionsDecoded0?.append(structure0)
            }
        }
        audioDescriptions = audioDescriptionsDecoded0
        let availBlankingDecoded = try containerValues.decodeIfPresent(AvailBlanking.self, forKey: .availBlanking)
        availBlanking = availBlankingDecoded
        let availConfigurationDecoded = try containerValues.decodeIfPresent(AvailConfiguration.self, forKey: .availConfiguration)
        availConfiguration = availConfigurationDecoded
        let blackoutSlateDecoded = try containerValues.decodeIfPresent(BlackoutSlate.self, forKey: .blackoutSlate)
        blackoutSlate = blackoutSlateDecoded
        let captionDescriptionsContainer = try containerValues.decodeIfPresent([CaptionDescription].self, forKey: .captionDescriptions)
        var captionDescriptionsDecoded0:[CaptionDescription]? = nil
        if let captionDescriptionsContainer = captionDescriptionsContainer {
            captionDescriptionsDecoded0 = [CaptionDescription]()
            for structure0 in captionDescriptionsContainer {
                captionDescriptionsDecoded0?.append(structure0)
            }
        }
        captionDescriptions = captionDescriptionsDecoded0
        let featureActivationsDecoded = try containerValues.decodeIfPresent(FeatureActivations.self, forKey: .featureActivations)
        featureActivations = featureActivationsDecoded
        let globalConfigurationDecoded = try containerValues.decodeIfPresent(GlobalConfiguration.self, forKey: .globalConfiguration)
        globalConfiguration = globalConfigurationDecoded
        let motionGraphicsConfigurationDecoded = try containerValues.decodeIfPresent(MotionGraphicsConfiguration.self, forKey: .motionGraphicsConfiguration)
        motionGraphicsConfiguration = motionGraphicsConfigurationDecoded
        let nielsenConfigurationDecoded = try containerValues.decodeIfPresent(NielsenConfiguration.self, forKey: .nielsenConfiguration)
        nielsenConfiguration = nielsenConfigurationDecoded
        let outputGroupsContainer = try containerValues.decodeIfPresent([OutputGroup].self, forKey: .outputGroups)
        var outputGroupsDecoded0:[OutputGroup]? = nil
        if let outputGroupsContainer = outputGroupsContainer {
            outputGroupsDecoded0 = [OutputGroup]()
            for structure0 in outputGroupsContainer {
                outputGroupsDecoded0?.append(structure0)
            }
        }
        outputGroups = outputGroupsDecoded0
        let timecodeConfigDecoded = try containerValues.decodeIfPresent(TimecodeConfig.self, forKey: .timecodeConfig)
        timecodeConfig = timecodeConfigDecoded
        let videoDescriptionsContainer = try containerValues.decodeIfPresent([VideoDescription].self, forKey: .videoDescriptions)
        var videoDescriptionsDecoded0:[VideoDescription]? = nil
        if let videoDescriptionsContainer = videoDescriptionsContainer {
            videoDescriptionsDecoded0 = [VideoDescription]()
            for structure0 in videoDescriptionsContainer {
                videoDescriptionsDecoded0?.append(structure0)
            }
        }
        videoDescriptions = videoDescriptionsDecoded0
    }
}
