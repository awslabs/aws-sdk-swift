// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PurchaseOfferingInputBody: Equatable {
    public let count: Int
    public let name: String?
    public let requestId: String?
    public let start: String?
    public let tags: [String:String]?
}

extension PurchaseOfferingInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case count = "count"
        case name = "name"
        case requestId = "requestId"
        case start = "start"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let startDecoded = try containerValues.decodeIfPresent(String.self, forKey: .start)
        start = startDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
    }
}
