// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Eac3 Settings
public struct Eac3Settings: Equatable {
    /// When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
    public let attenuationControl: Eac3AttenuationControl?
    /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
    public let bitrate: Double
    /// Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
    public let bitstreamMode: Eac3BitstreamMode?
    /// Dolby Digital Plus coding mode. Determines number of channels.
    public let codingMode: Eac3CodingMode?
    /// When set to enabled, activates a DC highpass filter for all input channels.
    public let dcFilter: Eac3DcFilter?
    /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
    public let dialnorm: Int
    /// Sets the Dolby dynamic range compression profile.
    public let drcLine: Eac3DrcLine?
    /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
    public let drcRf: Eac3DrcRf?
    /// When encoding 3/2 audio, setting to lfe enables the LFE channel
    public let lfeControl: Eac3LfeControl?
    /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
    public let lfeFilter: Eac3LfeFilter?
    /// Left only/Right only center mix level. Only used for 3/2 coding mode.
    public let loRoCenterMixLevel: Double
    /// Left only/Right only surround mix level. Only used for 3/2 coding mode.
    public let loRoSurroundMixLevel: Double
    /// Left total/Right total center mix level. Only used for 3/2 coding mode.
    public let ltRtCenterMixLevel: Double
    /// Left total/Right total surround mix level. Only used for 3/2 coding mode.
    public let ltRtSurroundMixLevel: Double
    /// When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
    public let metadataControl: Eac3MetadataControl?
    /// When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
    public let passthroughControl: Eac3PassthroughControl?
    /// When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
    public let phaseControl: Eac3PhaseControl?
    /// Stereo downmix preference. Only used for 3/2 coding mode.
    public let stereoDownmix: Eac3StereoDownmix?
    /// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
    public let surroundExMode: Eac3SurroundExMode?
    /// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
    public let surroundMode: Eac3SurroundMode?

    public init (
        attenuationControl: Eac3AttenuationControl? = nil,
        bitrate: Double = 0.0,
        bitstreamMode: Eac3BitstreamMode? = nil,
        codingMode: Eac3CodingMode? = nil,
        dcFilter: Eac3DcFilter? = nil,
        dialnorm: Int = 0,
        drcLine: Eac3DrcLine? = nil,
        drcRf: Eac3DrcRf? = nil,
        lfeControl: Eac3LfeControl? = nil,
        lfeFilter: Eac3LfeFilter? = nil,
        loRoCenterMixLevel: Double = 0.0,
        loRoSurroundMixLevel: Double = 0.0,
        ltRtCenterMixLevel: Double = 0.0,
        ltRtSurroundMixLevel: Double = 0.0,
        metadataControl: Eac3MetadataControl? = nil,
        passthroughControl: Eac3PassthroughControl? = nil,
        phaseControl: Eac3PhaseControl? = nil,
        stereoDownmix: Eac3StereoDownmix? = nil,
        surroundExMode: Eac3SurroundExMode? = nil,
        surroundMode: Eac3SurroundMode? = nil
    )
    {
        self.attenuationControl = attenuationControl
        self.bitrate = bitrate
        self.bitstreamMode = bitstreamMode
        self.codingMode = codingMode
        self.dcFilter = dcFilter
        self.dialnorm = dialnorm
        self.drcLine = drcLine
        self.drcRf = drcRf
        self.lfeControl = lfeControl
        self.lfeFilter = lfeFilter
        self.loRoCenterMixLevel = loRoCenterMixLevel
        self.loRoSurroundMixLevel = loRoSurroundMixLevel
        self.ltRtCenterMixLevel = ltRtCenterMixLevel
        self.ltRtSurroundMixLevel = ltRtSurroundMixLevel
        self.metadataControl = metadataControl
        self.passthroughControl = passthroughControl
        self.phaseControl = phaseControl
        self.stereoDownmix = stereoDownmix
        self.surroundExMode = surroundExMode
        self.surroundMode = surroundMode
    }
}
