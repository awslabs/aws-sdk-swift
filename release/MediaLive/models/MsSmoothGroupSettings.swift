// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Ms Smooth Group Settings
public struct MsSmoothGroupSettings: Equatable {
    /// The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
    public let acquisitionPointId: String?
    /// If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
    public let audioOnlyTimecodeControl: SmoothGroupAudioOnlyTimecodeControl?
    /// If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA).  This will cause https outputs to self-signed certificates to fail.
    public let certificateMode: SmoothGroupCertificateMode?
    /// Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
    public let connectionRetryInterval: Int
    /// Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
    public let destination: OutputLocationRef?
    /// MS Smooth event ID to be sent to the IIS server.
    ///
    /// Should only be specified if eventIdMode is set to useConfigured.
    public let eventId: String?
    /// Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run.
    ///
    /// Options:
    /// - "useConfigured" - use the value provided in eventId
    /// - "useTimestamp" - generate and send an event ID based on the current timestamp
    /// - "noEventId" - do not send an event ID to the IIS server.
    public let eventIdMode: SmoothGroupEventIdMode?
    /// When set to sendEos, send EOS signal to IIS server when stopping the event
    public let eventStopBehavior: SmoothGroupEventStopBehavior?
    /// Size in seconds of file cache for streaming outputs.
    public let filecacheDuration: Int
    /// Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
    public let fragmentLength: Int
    /// Parameter that control output group behavior on input loss.
    public let inputLossAction: InputLossActionForMsSmoothOut?
    /// Number of retry attempts.
    public let numRetries: Int
    /// Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
    public let restartDelay: Int
    /// useInputSegmentation has been deprecated. The configured segment size is always used.
    public let segmentationMode: SmoothGroupSegmentationMode?
    /// Number of milliseconds to delay the output from the second pipeline.
    public let sendDelayMs: Int
    /// Identifies the type of data to place in the sparse track:
    /// - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment.
    /// - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment.
    /// - NONE: Don't generate a sparse track for any outputs in this output group.
    public let sparseTrackType: SmoothGroupSparseTrackType?
    /// When set to send, send stream manifest so publishing point doesn't start until all streams start.
    public let streamManifestBehavior: SmoothGroupStreamManifestBehavior?
    /// Timestamp offset for the event.  Only used if timestampOffsetMode is set to useConfiguredOffset.
    public let timestampOffset: String?
    /// Type of timestamp date offset to use.
    /// - useEventStartDate: Use the date the event was started as the offset
    /// - useConfiguredOffset: Use an explicitly configured date as the offset
    public let timestampOffsetMode: SmoothGroupTimestampOffsetMode?

    public init (
        acquisitionPointId: String? = nil,
        audioOnlyTimecodeControl: SmoothGroupAudioOnlyTimecodeControl? = nil,
        certificateMode: SmoothGroupCertificateMode? = nil,
        connectionRetryInterval: Int = 0,
        destination: OutputLocationRef? = nil,
        eventId: String? = nil,
        eventIdMode: SmoothGroupEventIdMode? = nil,
        eventStopBehavior: SmoothGroupEventStopBehavior? = nil,
        filecacheDuration: Int = 0,
        fragmentLength: Int = 0,
        inputLossAction: InputLossActionForMsSmoothOut? = nil,
        numRetries: Int = 0,
        restartDelay: Int = 0,
        segmentationMode: SmoothGroupSegmentationMode? = nil,
        sendDelayMs: Int = 0,
        sparseTrackType: SmoothGroupSparseTrackType? = nil,
        streamManifestBehavior: SmoothGroupStreamManifestBehavior? = nil,
        timestampOffset: String? = nil,
        timestampOffsetMode: SmoothGroupTimestampOffsetMode? = nil
    )
    {
        self.acquisitionPointId = acquisitionPointId
        self.audioOnlyTimecodeControl = audioOnlyTimecodeControl
        self.certificateMode = certificateMode
        self.connectionRetryInterval = connectionRetryInterval
        self.destination = destination
        self.eventId = eventId
        self.eventIdMode = eventIdMode
        self.eventStopBehavior = eventStopBehavior
        self.filecacheDuration = filecacheDuration
        self.fragmentLength = fragmentLength
        self.inputLossAction = inputLossAction
        self.numRetries = numRetries
        self.restartDelay = restartDelay
        self.segmentationMode = segmentationMode
        self.sendDelayMs = sendDelayMs
        self.sparseTrackType = sparseTrackType
        self.streamManifestBehavior = streamManifestBehavior
        self.timestampOffset = timestampOffset
        self.timestampOffsetMode = timestampOffsetMode
    }
}
