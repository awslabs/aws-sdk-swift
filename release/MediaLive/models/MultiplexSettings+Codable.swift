// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MultiplexSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maximumVideoBufferDelayMilliseconds = "maximumVideoBufferDelayMilliseconds"
        case transportStreamBitrate = "transportStreamBitrate"
        case transportStreamId = "transportStreamId"
        case transportStreamReservedBitrate = "transportStreamReservedBitrate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumVideoBufferDelayMilliseconds != 0 {
            try encodeContainer.encode(maximumVideoBufferDelayMilliseconds, forKey: .maximumVideoBufferDelayMilliseconds)
        }
        if transportStreamBitrate != 0 {
            try encodeContainer.encode(transportStreamBitrate, forKey: .transportStreamBitrate)
        }
        if transportStreamId != 0 {
            try encodeContainer.encode(transportStreamId, forKey: .transportStreamId)
        }
        if transportStreamReservedBitrate != 0 {
            try encodeContainer.encode(transportStreamReservedBitrate, forKey: .transportStreamReservedBitrate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumVideoBufferDelayMillisecondsDecoded = try containerValues.decode(Int.self, forKey: .maximumVideoBufferDelayMilliseconds)
        maximumVideoBufferDelayMilliseconds = maximumVideoBufferDelayMillisecondsDecoded
        let transportStreamBitrateDecoded = try containerValues.decode(Int.self, forKey: .transportStreamBitrate)
        transportStreamBitrate = transportStreamBitrateDecoded
        let transportStreamIdDecoded = try containerValues.decode(Int.self, forKey: .transportStreamId)
        transportStreamId = transportStreamIdDecoded
        let transportStreamReservedBitrateDecoded = try containerValues.decode(Int.self, forKey: .transportStreamReservedBitrate)
        transportStreamReservedBitrate = transportStreamReservedBitrateDecoded
    }
}
