// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InputPrepareScheduleActionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inputAttachmentNameReference = "inputAttachmentNameReference"
        case inputClippingSettings = "inputClippingSettings"
        case urlPath = "urlPath"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputAttachmentNameReference = inputAttachmentNameReference {
            try encodeContainer.encode(inputAttachmentNameReference, forKey: .inputAttachmentNameReference)
        }
        if let inputClippingSettings = inputClippingSettings {
            try encodeContainer.encode(inputClippingSettings, forKey: .inputClippingSettings)
        }
        if let urlPath = urlPath {
            var urlPathContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urlPath)
            for __listof__string0 in urlPath {
                try urlPathContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputAttachmentNameReferenceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputAttachmentNameReference)
        inputAttachmentNameReference = inputAttachmentNameReferenceDecoded
        let inputClippingSettingsDecoded = try containerValues.decodeIfPresent(InputClippingSettings.self, forKey: .inputClippingSettings)
        inputClippingSettings = inputClippingSettingsDecoded
        let urlPathContainer = try containerValues.decodeIfPresent([String].self, forKey: .urlPath)
        var urlPathDecoded0:[String]? = nil
        if let urlPathContainer = urlPathContainer {
            urlPathDecoded0 = [String]()
            for string0 in urlPathContainer {
                urlPathDecoded0?.append(string0)
            }
        }
        urlPath = urlPathDecoded0
    }
}
