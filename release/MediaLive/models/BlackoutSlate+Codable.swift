// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BlackoutSlate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blackoutSlateImage = "blackoutSlateImage"
        case networkEndBlackout = "networkEndBlackout"
        case networkEndBlackoutImage = "networkEndBlackoutImage"
        case networkId = "networkId"
        case state = "state"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blackoutSlateImage = blackoutSlateImage {
            try encodeContainer.encode(blackoutSlateImage, forKey: .blackoutSlateImage)
        }
        if let networkEndBlackout = networkEndBlackout {
            try encodeContainer.encode(networkEndBlackout.rawValue, forKey: .networkEndBlackout)
        }
        if let networkEndBlackoutImage = networkEndBlackoutImage {
            try encodeContainer.encode(networkEndBlackoutImage, forKey: .networkEndBlackoutImage)
        }
        if let networkId = networkId {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blackoutSlateImageDecoded = try containerValues.decodeIfPresent(InputLocation.self, forKey: .blackoutSlateImage)
        blackoutSlateImage = blackoutSlateImageDecoded
        let networkEndBlackoutDecoded = try containerValues.decodeIfPresent(BlackoutSlateNetworkEndBlackout.self, forKey: .networkEndBlackout)
        networkEndBlackout = networkEndBlackoutDecoded
        let networkEndBlackoutImageDecoded = try containerValues.decodeIfPresent(InputLocation.self, forKey: .networkEndBlackoutImage)
        networkEndBlackoutImage = networkEndBlackoutImageDecoded
        let networkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkId)
        networkId = networkIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BlackoutSlateState.self, forKey: .state)
        state = stateDecoded
    }
}
