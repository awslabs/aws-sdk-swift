// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AvailBlanking: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availBlankingImage = "availBlankingImage"
        case state = "state"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availBlankingImage = availBlankingImage {
            try encodeContainer.encode(availBlankingImage, forKey: .availBlankingImage)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availBlankingImageDecoded = try containerValues.decodeIfPresent(InputLocation.self, forKey: .availBlankingImage)
        availBlankingImage = availBlankingImageDecoded
        let stateDecoded = try containerValues.decodeIfPresent(AvailBlankingState.self, forKey: .state)
        state = stateDecoded
    }
}
