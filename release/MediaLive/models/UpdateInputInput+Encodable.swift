// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateInputInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinations = "destinations"
        case inputDevices = "inputDevices"
        case inputSecurityGroups = "inputSecurityGroups"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case roleArn = "roleArn"
        case sources = "sources"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for __listofinputdestinationrequest0 in destinations {
                try destinationsContainer.encode(__listofinputdestinationrequest0)
            }
        }
        if let inputDevices = inputDevices {
            var inputDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDevices)
            for __listofinputdevicerequest0 in inputDevices {
                try inputDevicesContainer.encode(__listofinputdevicerequest0)
            }
        }
        if let inputSecurityGroups = inputSecurityGroups {
            var inputSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputSecurityGroups)
            for __listof__string0 in inputSecurityGroups {
                try inputSecurityGroupsContainer.encode(__listof__string0)
            }
        }
        if let mediaConnectFlows = mediaConnectFlows {
            var mediaConnectFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaConnectFlows)
            for __listofmediaconnectflowrequest0 in mediaConnectFlows {
                try mediaConnectFlowsContainer.encode(__listofmediaconnectflowrequest0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let sources = sources {
            var sourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sources)
            for __listofinputsourcerequest0 in sources {
                try sourcesContainer.encode(__listofinputsourcerequest0)
            }
        }
    }
}
