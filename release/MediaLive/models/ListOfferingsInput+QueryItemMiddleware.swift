// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListOfferingsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListOfferingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOfferingsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOfferingsOutput>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let channelClass = input.operationInput.channelClass {
            let channelClassQueryItem = URLQueryItem(name: "channelClass".urlPercentEncoding(), value: String(channelClass).urlPercentEncoding())
            input.builder.withQueryItem(channelClassQueryItem)
        }
        if let codec = input.operationInput.codec {
            let codecQueryItem = URLQueryItem(name: "codec".urlPercentEncoding(), value: String(codec).urlPercentEncoding())
            input.builder.withQueryItem(codecQueryItem)
        }
        if let videoQuality = input.operationInput.videoQuality {
            let videoQualityQueryItem = URLQueryItem(name: "videoQuality".urlPercentEncoding(), value: String(videoQuality).urlPercentEncoding())
            input.builder.withQueryItem(videoQualityQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        if let maximumBitrate = input.operationInput.maximumBitrate {
            let maximumBitrateQueryItem = URLQueryItem(name: "maximumBitrate".urlPercentEncoding(), value: String(maximumBitrate).urlPercentEncoding())
            input.builder.withQueryItem(maximumBitrateQueryItem)
        }
        if let specialFeature = input.operationInput.specialFeature {
            let specialFeatureQueryItem = URLQueryItem(name: "specialFeature".urlPercentEncoding(), value: String(specialFeature).urlPercentEncoding())
            input.builder.withQueryItem(specialFeatureQueryItem)
        }
        if let duration = input.operationInput.duration {
            let durationQueryItem = URLQueryItem(name: "duration".urlPercentEncoding(), value: String(duration).urlPercentEncoding())
            input.builder.withQueryItem(durationQueryItem)
        }
        if let resourceType = input.operationInput.resourceType {
            let resourceTypeQueryItem = URLQueryItem(name: "resourceType".urlPercentEncoding(), value: String(resourceType).urlPercentEncoding())
            input.builder.withQueryItem(resourceTypeQueryItem)
        }
        if let channelConfiguration = input.operationInput.channelConfiguration {
            let channelConfigurationQueryItem = URLQueryItem(name: "channelConfiguration".urlPercentEncoding(), value: String(channelConfiguration).urlPercentEncoding())
            input.builder.withQueryItem(channelConfigurationQueryItem)
        }
        if let maximumFramerate = input.operationInput.maximumFramerate {
            let maximumFramerateQueryItem = URLQueryItem(name: "maximumFramerate".urlPercentEncoding(), value: String(maximumFramerate).urlPercentEncoding())
            input.builder.withQueryItem(maximumFramerateQueryItem)
        }
        if let resolution = input.operationInput.resolution {
            let resolutionQueryItem = URLQueryItem(name: "resolution".urlPercentEncoding(), value: String(resolution).urlPercentEncoding())
            input.builder.withQueryItem(resolutionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOfferingsInput>
    public typealias MOutput = OperationOutput<ListOfferingsOutput>
    public typealias Context = HttpContext
    public typealias MError = SdkError<ListOfferingsOutputError>
}
