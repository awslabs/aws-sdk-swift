// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AacSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitrate = "bitrate"
        case codingMode = "codingMode"
        case inputType = "inputType"
        case profile = "profile"
        case rateControlMode = "rateControlMode"
        case rawFormat = "rawFormat"
        case sampleRate = "sampleRate"
        case spec = "spec"
        case vbrQuality = "vbrQuality"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitrate != 0.0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let codingMode = codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let inputType = inputType {
            try encodeContainer.encode(inputType.rawValue, forKey: .inputType)
        }
        if let profile = profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let rawFormat = rawFormat {
            try encodeContainer.encode(rawFormat.rawValue, forKey: .rawFormat)
        }
        if sampleRate != 0.0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if let spec = spec {
            try encodeContainer.encode(spec.rawValue, forKey: .spec)
        }
        if let vbrQuality = vbrQuality {
            try encodeContainer.encode(vbrQuality.rawValue, forKey: .vbrQuality)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decode(Double.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(AacCodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let inputTypeDecoded = try containerValues.decodeIfPresent(AacInputType.self, forKey: .inputType)
        inputType = inputTypeDecoded
        let profileDecoded = try containerValues.decodeIfPresent(AacProfile.self, forKey: .profile)
        profile = profileDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(AacRateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let rawFormatDecoded = try containerValues.decodeIfPresent(AacRawFormat.self, forKey: .rawFormat)
        rawFormat = rawFormatDecoded
        let sampleRateDecoded = try containerValues.decode(Double.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let specDecoded = try containerValues.decodeIfPresent(AacSpec.self, forKey: .spec)
        spec = specDecoded
        let vbrQualityDecoded = try containerValues.decodeIfPresent(AacVbrQuality.self, forKey: .vbrQuality)
        vbrQuality = vbrQualityDecoded
    }
}
