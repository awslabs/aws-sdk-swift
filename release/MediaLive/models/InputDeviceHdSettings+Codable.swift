// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InputDeviceHdSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activeInput = "activeInput"
        case configuredInput = "configuredInput"
        case deviceState = "deviceState"
        case framerate = "framerate"
        case height = "height"
        case maxBitrate = "maxBitrate"
        case scanType = "scanType"
        case width = "width"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeInput = activeInput {
            try encodeContainer.encode(activeInput.rawValue, forKey: .activeInput)
        }
        if let configuredInput = configuredInput {
            try encodeContainer.encode(configuredInput.rawValue, forKey: .configuredInput)
        }
        if let deviceState = deviceState {
            try encodeContainer.encode(deviceState.rawValue, forKey: .deviceState)
        }
        if framerate != 0.0 {
            try encodeContainer.encode(framerate, forKey: .framerate)
        }
        if height != 0 {
            try encodeContainer.encode(height, forKey: .height)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let scanType = scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if width != 0 {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeInputDecoded = try containerValues.decodeIfPresent(InputDeviceActiveInput.self, forKey: .activeInput)
        activeInput = activeInputDecoded
        let configuredInputDecoded = try containerValues.decodeIfPresent(InputDeviceConfiguredInput.self, forKey: .configuredInput)
        configuredInput = configuredInputDecoded
        let deviceStateDecoded = try containerValues.decodeIfPresent(InputDeviceState.self, forKey: .deviceState)
        deviceState = deviceStateDecoded
        let framerateDecoded = try containerValues.decode(Double.self, forKey: .framerate)
        framerate = framerateDecoded
        let heightDecoded = try containerValues.decode(Int.self, forKey: .height)
        height = heightDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(InputDeviceScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let widthDecoded = try containerValues.decode(Int.self, forKey: .width)
        width = widthDecoded
    }
}
