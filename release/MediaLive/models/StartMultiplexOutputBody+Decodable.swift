// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartMultiplexOutputBody: Equatable {
    public let arn: String?
    public let availabilityZones: [String]?
    public let destinations: [MultiplexOutputDestination]?
    public let id: String?
    public let multiplexSettings: MultiplexSettings?
    public let name: String?
    public let pipelinesRunningCount: Int
    public let programCount: Int
    public let state: MultiplexState?
    public let tags: [String:String]?
}

extension StartMultiplexOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case destinations = "destinations"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([String].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [String]()
            for string0 in availabilityZonesContainer {
                availabilityZonesDecoded0?.append(string0)
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MultiplexOutputDestination].self, forKey: .destinations)
        var destinationsDecoded0:[MultiplexOutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MultiplexOutputDestination]()
            for structure0 in destinationsContainer {
                destinationsDecoded0?.append(structure0)
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decode(Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decode(Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
    }
}
