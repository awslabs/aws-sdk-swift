// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AudioSilenceFailoverSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioSelectorName = "audioSelectorName"
        case audioSilenceThresholdMsec = "audioSilenceThresholdMsec"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioSelectorName = audioSelectorName {
            try encodeContainer.encode(audioSelectorName, forKey: .audioSelectorName)
        }
        if audioSilenceThresholdMsec != 0 {
            try encodeContainer.encode(audioSilenceThresholdMsec, forKey: .audioSilenceThresholdMsec)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioSelectorNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioSelectorName)
        audioSelectorName = audioSelectorNameDecoded
        let audioSilenceThresholdMsecDecoded = try containerValues.decode(Int.self, forKey: .audioSilenceThresholdMsec)
        audioSilenceThresholdMsec = audioSilenceThresholdMsecDecoded
    }
}
