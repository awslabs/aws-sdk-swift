// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlobalConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case initialAudioGain = "initialAudioGain"
        case inputEndAction = "inputEndAction"
        case inputLossBehavior = "inputLossBehavior"
        case outputLockingMode = "outputLockingMode"
        case outputTimingSource = "outputTimingSource"
        case supportLowFramerateInputs = "supportLowFramerateInputs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if initialAudioGain != 0 {
            try encodeContainer.encode(initialAudioGain, forKey: .initialAudioGain)
        }
        if let inputEndAction = inputEndAction {
            try encodeContainer.encode(inputEndAction.rawValue, forKey: .inputEndAction)
        }
        if let inputLossBehavior = inputLossBehavior {
            try encodeContainer.encode(inputLossBehavior, forKey: .inputLossBehavior)
        }
        if let outputLockingMode = outputLockingMode {
            try encodeContainer.encode(outputLockingMode.rawValue, forKey: .outputLockingMode)
        }
        if let outputTimingSource = outputTimingSource {
            try encodeContainer.encode(outputTimingSource.rawValue, forKey: .outputTimingSource)
        }
        if let supportLowFramerateInputs = supportLowFramerateInputs {
            try encodeContainer.encode(supportLowFramerateInputs.rawValue, forKey: .supportLowFramerateInputs)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let initialAudioGainDecoded = try containerValues.decode(Int.self, forKey: .initialAudioGain)
        initialAudioGain = initialAudioGainDecoded
        let inputEndActionDecoded = try containerValues.decodeIfPresent(GlobalConfigurationInputEndAction.self, forKey: .inputEndAction)
        inputEndAction = inputEndActionDecoded
        let inputLossBehaviorDecoded = try containerValues.decodeIfPresent(InputLossBehavior.self, forKey: .inputLossBehavior)
        inputLossBehavior = inputLossBehaviorDecoded
        let outputLockingModeDecoded = try containerValues.decodeIfPresent(GlobalConfigurationOutputLockingMode.self, forKey: .outputLockingMode)
        outputLockingMode = outputLockingModeDecoded
        let outputTimingSourceDecoded = try containerValues.decodeIfPresent(GlobalConfigurationOutputTimingSource.self, forKey: .outputTimingSource)
        outputTimingSource = outputTimingSourceDecoded
        let supportLowFramerateInputsDecoded = try containerValues.decodeIfPresent(GlobalConfigurationLowFramerateInputs.self, forKey: .supportLowFramerateInputs)
        supportLowFramerateInputs = supportLowFramerateInputsDecoded
    }
}
