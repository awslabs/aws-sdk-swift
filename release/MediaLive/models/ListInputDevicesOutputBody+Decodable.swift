// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInputDevicesOutputBody: Equatable {
    public let inputDevices: [InputDeviceSummary]?
    public let nextToken: String?
}

extension ListInputDevicesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case inputDevices = "inputDevices"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDevicesContainer = try containerValues.decodeIfPresent([InputDeviceSummary].self, forKey: .inputDevices)
        var inputDevicesDecoded0:[InputDeviceSummary]? = nil
        if let inputDevicesContainer = inputDevicesContainer {
            inputDevicesDecoded0 = [InputDeviceSummary]()
            for structure0 in inputDevicesContainer {
                inputDevicesDecoded0?.append(structure0)
            }
        }
        inputDevices = inputDevicesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
