// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Rtmp Group Settings
public struct RtmpGroupSettings: Equatable {
    /// Choose the ad marker type for this output group. MediaLive will create a message based on the content of each SCTE-35 message, format it for that marker type, and insert it in the datastream.
    public let adMarkers: [RtmpAdMarkers]?
    /// Authentication scheme to use when connecting with CDN
    public let authenticationScheme: AuthenticationScheme?
    /// Controls behavior when content cache fills up. If remote origin server stalls the RTMP connection and does not accept content fast enough the 'Media Cache' will fill up. When the cache reaches the duration specified by cacheLength the cache will stop accepting new content. If set to disconnectImmediately, the RTMP output will force a disconnect. Clear the media cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes to allow the origin server to begin accepting data again.
    public let cacheFullBehavior: RtmpCacheFullBehavior?
    /// Cache length, in seconds, is used to calculate buffer size.
    public let cacheLength: Int
    /// Controls the types of data that passes to onCaptionInfo outputs.  If set to 'all' then 608 and 708 carried DTVCC data will be passed.  If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields will be passed. If set to 'field1608' then only the data carried in 608 from field 1 video will be passed.
    public let captionData: RtmpCaptionData?
    /// Controls the behavior of this RTMP group if input becomes unavailable.
    ///
    /// - emitOutput: Emit a slate until input returns.
    /// - pauseOutput: Stop transmitting data until input returns. This does not close the underlying RTMP connection.
    public let inputLossAction: InputLossActionForRtmpOut?
    /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
    public let restartDelay: Int

    public init (
        adMarkers: [RtmpAdMarkers]? = nil,
        authenticationScheme: AuthenticationScheme? = nil,
        cacheFullBehavior: RtmpCacheFullBehavior? = nil,
        cacheLength: Int = 0,
        captionData: RtmpCaptionData? = nil,
        inputLossAction: InputLossActionForRtmpOut? = nil,
        restartDelay: Int = 0
    )
    {
        self.adMarkers = adMarkers
        self.authenticationScheme = authenticationScheme
        self.cacheFullBehavior = cacheFullBehavior
        self.cacheLength = cacheLength
        self.captionData = captionData
        self.inputLossAction = inputLossAction
        self.restartDelay = restartDelay
    }
}
