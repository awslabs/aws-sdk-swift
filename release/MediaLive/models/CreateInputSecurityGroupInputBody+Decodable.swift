// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateInputSecurityGroupInputBody: Equatable {
    public let tags: [String:String]?
    public let whitelistRules: [InputWhitelistRuleCidr]?
}

extension CreateInputSecurityGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
        let whitelistRulesContainer = try containerValues.decodeIfPresent([InputWhitelistRuleCidr].self, forKey: .whitelistRules)
        var whitelistRulesDecoded0:[InputWhitelistRuleCidr]? = nil
        if let whitelistRulesContainer = whitelistRulesContainer {
            whitelistRulesDecoded0 = [InputWhitelistRuleCidr]()
            for structure0 in whitelistRulesContainer {
                whitelistRulesDecoded0?.append(structure0)
            }
        }
        whitelistRules = whitelistRulesDecoded0
    }
}
