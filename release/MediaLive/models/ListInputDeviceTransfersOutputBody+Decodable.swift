// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInputDeviceTransfersOutputBody: Equatable {
    public let inputDeviceTransfers: [TransferringInputDeviceSummary]?
    public let nextToken: String?
}

extension ListInputDeviceTransfersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case inputDeviceTransfers = "inputDeviceTransfers"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDeviceTransfersContainer = try containerValues.decodeIfPresent([TransferringInputDeviceSummary].self, forKey: .inputDeviceTransfers)
        var inputDeviceTransfersDecoded0:[TransferringInputDeviceSummary]? = nil
        if let inputDeviceTransfersContainer = inputDeviceTransfersContainer {
            inputDeviceTransfersDecoded0 = [TransferringInputDeviceSummary]()
            for structure0 in inputDeviceTransfersContainer {
                inputDeviceTransfersDecoded0?.append(structure0)
            }
        }
        inputDeviceTransfers = inputDeviceTransfersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
