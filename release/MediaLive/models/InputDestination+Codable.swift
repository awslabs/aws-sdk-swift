// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InputDestination: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ip = "ip"
        case port = "port"
        case url = "url"
        case vpc = "vpc"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ip = ip {
            try encodeContainer.encode(ip, forKey: .ip)
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let vpc = vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ip)
        ip = ipDecoded
        let portDecoded = try containerValues.decodeIfPresent(String.self, forKey: .port)
        port = portDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
        let vpcDecoded = try containerValues.decodeIfPresent(InputDestinationVpc.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}
