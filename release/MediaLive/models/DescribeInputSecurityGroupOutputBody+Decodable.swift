// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInputSecurityGroupOutputBody: Equatable {
    public let arn: String?
    public let id: String?
    public let inputs: [String]?
    public let state: InputSecurityGroupState?
    public let tags: [String:String]?
    public let whitelistRules: [InputWhitelistRule]?
}

extension DescribeInputSecurityGroupOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case id = "id"
        case inputs = "inputs"
        case state = "state"
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let inputsContainer = try containerValues.decodeIfPresent([String].self, forKey: .inputs)
        var inputsDecoded0:[String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [String]()
            for string0 in inputsContainer {
                inputsDecoded0?.append(string0)
            }
        }
        inputs = inputsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(InputSecurityGroupState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
        let whitelistRulesContainer = try containerValues.decodeIfPresent([InputWhitelistRule].self, forKey: .whitelistRules)
        var whitelistRulesDecoded0:[InputWhitelistRule]? = nil
        if let whitelistRulesContainer = whitelistRulesContainer {
            whitelistRulesDecoded0 = [InputWhitelistRule]()
            for structure0 in whitelistRulesContainer {
                whitelistRulesDecoded0?.append(structure0)
            }
        }
        whitelistRules = whitelistRulesDecoded0
    }
}
