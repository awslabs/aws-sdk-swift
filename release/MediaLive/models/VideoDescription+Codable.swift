// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VideoDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case codecSettings = "codecSettings"
        case height = "height"
        case name = "name"
        case respondToAfd = "respondToAfd"
        case scalingBehavior = "scalingBehavior"
        case sharpness = "sharpness"
        case width = "width"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codecSettings = codecSettings {
            try encodeContainer.encode(codecSettings, forKey: .codecSettings)
        }
        if height != 0 {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let respondToAfd = respondToAfd {
            try encodeContainer.encode(respondToAfd.rawValue, forKey: .respondToAfd)
        }
        if let scalingBehavior = scalingBehavior {
            try encodeContainer.encode(scalingBehavior.rawValue, forKey: .scalingBehavior)
        }
        if sharpness != 0 {
            try encodeContainer.encode(sharpness, forKey: .sharpness)
        }
        if width != 0 {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codecSettingsDecoded = try containerValues.decodeIfPresent(VideoCodecSettings.self, forKey: .codecSettings)
        codecSettings = codecSettingsDecoded
        let heightDecoded = try containerValues.decode(Int.self, forKey: .height)
        height = heightDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let respondToAfdDecoded = try containerValues.decodeIfPresent(VideoDescriptionRespondToAfd.self, forKey: .respondToAfd)
        respondToAfd = respondToAfdDecoded
        let scalingBehaviorDecoded = try containerValues.decodeIfPresent(VideoDescriptionScalingBehavior.self, forKey: .scalingBehavior)
        scalingBehavior = scalingBehaviorDecoded
        let sharpnessDecoded = try containerValues.decode(Int.self, forKey: .sharpness)
        sharpness = sharpnessDecoded
        let widthDecoded = try containerValues.decode(Int.self, forKey: .width)
        width = widthDecoded
    }
}
