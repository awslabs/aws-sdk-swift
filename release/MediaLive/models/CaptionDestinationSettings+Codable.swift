// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CaptionDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aribDestinationSettings = "aribDestinationSettings"
        case burnInDestinationSettings = "burnInDestinationSettings"
        case dvbSubDestinationSettings = "dvbSubDestinationSettings"
        case ebuTtDDestinationSettings = "ebuTtDDestinationSettings"
        case embeddedDestinationSettings = "embeddedDestinationSettings"
        case embeddedPlusScte20DestinationSettings = "embeddedPlusScte20DestinationSettings"
        case rtmpCaptionInfoDestinationSettings = "rtmpCaptionInfoDestinationSettings"
        case scte20PlusEmbeddedDestinationSettings = "scte20PlusEmbeddedDestinationSettings"
        case scte27DestinationSettings = "scte27DestinationSettings"
        case smpteTtDestinationSettings = "smpteTtDestinationSettings"
        case teletextDestinationSettings = "teletextDestinationSettings"
        case ttmlDestinationSettings = "ttmlDestinationSettings"
        case webvttDestinationSettings = "webvttDestinationSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aribDestinationSettings = aribDestinationSettings {
            try encodeContainer.encode(aribDestinationSettings, forKey: .aribDestinationSettings)
        }
        if let burnInDestinationSettings = burnInDestinationSettings {
            try encodeContainer.encode(burnInDestinationSettings, forKey: .burnInDestinationSettings)
        }
        if let dvbSubDestinationSettings = dvbSubDestinationSettings {
            try encodeContainer.encode(dvbSubDestinationSettings, forKey: .dvbSubDestinationSettings)
        }
        if let ebuTtDDestinationSettings = ebuTtDDestinationSettings {
            try encodeContainer.encode(ebuTtDDestinationSettings, forKey: .ebuTtDDestinationSettings)
        }
        if let embeddedDestinationSettings = embeddedDestinationSettings {
            try encodeContainer.encode(embeddedDestinationSettings, forKey: .embeddedDestinationSettings)
        }
        if let embeddedPlusScte20DestinationSettings = embeddedPlusScte20DestinationSettings {
            try encodeContainer.encode(embeddedPlusScte20DestinationSettings, forKey: .embeddedPlusScte20DestinationSettings)
        }
        if let rtmpCaptionInfoDestinationSettings = rtmpCaptionInfoDestinationSettings {
            try encodeContainer.encode(rtmpCaptionInfoDestinationSettings, forKey: .rtmpCaptionInfoDestinationSettings)
        }
        if let scte20PlusEmbeddedDestinationSettings = scte20PlusEmbeddedDestinationSettings {
            try encodeContainer.encode(scte20PlusEmbeddedDestinationSettings, forKey: .scte20PlusEmbeddedDestinationSettings)
        }
        if let scte27DestinationSettings = scte27DestinationSettings {
            try encodeContainer.encode(scte27DestinationSettings, forKey: .scte27DestinationSettings)
        }
        if let smpteTtDestinationSettings = smpteTtDestinationSettings {
            try encodeContainer.encode(smpteTtDestinationSettings, forKey: .smpteTtDestinationSettings)
        }
        if let teletextDestinationSettings = teletextDestinationSettings {
            try encodeContainer.encode(teletextDestinationSettings, forKey: .teletextDestinationSettings)
        }
        if let ttmlDestinationSettings = ttmlDestinationSettings {
            try encodeContainer.encode(ttmlDestinationSettings, forKey: .ttmlDestinationSettings)
        }
        if let webvttDestinationSettings = webvttDestinationSettings {
            try encodeContainer.encode(webvttDestinationSettings, forKey: .webvttDestinationSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aribDestinationSettingsDecoded = try containerValues.decodeIfPresent(AribDestinationSettings.self, forKey: .aribDestinationSettings)
        aribDestinationSettings = aribDestinationSettingsDecoded
        let burnInDestinationSettingsDecoded = try containerValues.decodeIfPresent(BurnInDestinationSettings.self, forKey: .burnInDestinationSettings)
        burnInDestinationSettings = burnInDestinationSettingsDecoded
        let dvbSubDestinationSettingsDecoded = try containerValues.decodeIfPresent(DvbSubDestinationSettings.self, forKey: .dvbSubDestinationSettings)
        dvbSubDestinationSettings = dvbSubDestinationSettingsDecoded
        let ebuTtDDestinationSettingsDecoded = try containerValues.decodeIfPresent(EbuTtDDestinationSettings.self, forKey: .ebuTtDDestinationSettings)
        ebuTtDDestinationSettings = ebuTtDDestinationSettingsDecoded
        let embeddedDestinationSettingsDecoded = try containerValues.decodeIfPresent(EmbeddedDestinationSettings.self, forKey: .embeddedDestinationSettings)
        embeddedDestinationSettings = embeddedDestinationSettingsDecoded
        let embeddedPlusScte20DestinationSettingsDecoded = try containerValues.decodeIfPresent(EmbeddedPlusScte20DestinationSettings.self, forKey: .embeddedPlusScte20DestinationSettings)
        embeddedPlusScte20DestinationSettings = embeddedPlusScte20DestinationSettingsDecoded
        let rtmpCaptionInfoDestinationSettingsDecoded = try containerValues.decodeIfPresent(RtmpCaptionInfoDestinationSettings.self, forKey: .rtmpCaptionInfoDestinationSettings)
        rtmpCaptionInfoDestinationSettings = rtmpCaptionInfoDestinationSettingsDecoded
        let scte20PlusEmbeddedDestinationSettingsDecoded = try containerValues.decodeIfPresent(Scte20PlusEmbeddedDestinationSettings.self, forKey: .scte20PlusEmbeddedDestinationSettings)
        scte20PlusEmbeddedDestinationSettings = scte20PlusEmbeddedDestinationSettingsDecoded
        let scte27DestinationSettingsDecoded = try containerValues.decodeIfPresent(Scte27DestinationSettings.self, forKey: .scte27DestinationSettings)
        scte27DestinationSettings = scte27DestinationSettingsDecoded
        let smpteTtDestinationSettingsDecoded = try containerValues.decodeIfPresent(SmpteTtDestinationSettings.self, forKey: .smpteTtDestinationSettings)
        smpteTtDestinationSettings = smpteTtDestinationSettingsDecoded
        let teletextDestinationSettingsDecoded = try containerValues.decodeIfPresent(TeletextDestinationSettings.self, forKey: .teletextDestinationSettings)
        teletextDestinationSettings = teletextDestinationSettingsDecoded
        let ttmlDestinationSettingsDecoded = try containerValues.decodeIfPresent(TtmlDestinationSettings.self, forKey: .ttmlDestinationSettings)
        ttmlDestinationSettings = ttmlDestinationSettingsDecoded
        let webvttDestinationSettingsDecoded = try containerValues.decodeIfPresent(WebvttDestinationSettings.self, forKey: .webvttDestinationSettings)
        webvttDestinationSettings = webvttDestinationSettingsDecoded
    }
}
