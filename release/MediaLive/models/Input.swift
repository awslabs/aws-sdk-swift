// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Placeholder documentation for Input
public struct Input: Equatable {
    /// The Unique ARN of the input (generated, immutable).
    public let arn: String?
    /// A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
    public let attachedChannels: [String]?
    /// A list of the destinations of the input (PUSH-type).
    public let destinations: [InputDestination]?
    /// The generated ID of the input (unique for user account, immutable).
    public let id: String?
    /// STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails.
    /// SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also  SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input.
    public let inputClass: InputClass?
    /// Settings for the input devices.
    public let inputDevices: [InputDeviceSettings]?
    /// A list of IDs for all Inputs which are partners of this one.
    public let inputPartnerIds: [String]?
    /// Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes
    /// during input switch actions. Presently, this functionality only works with MP4_FILE inputs.
    public let inputSourceType: InputSourceType?
    /// A list of MediaConnect Flows for this input.
    public let mediaConnectFlows: [MediaConnectFlow]?
    /// The user-assigned name (This is a mutable value).
    public let name: String?
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    public let roleArn: String?
    /// A list of IDs for all the Input Security Groups attached to the input.
    public let securityGroups: [String]?
    /// A list of the sources of the input (PULL-type).
    public let sources: [InputSource]?
    /// Placeholder documentation for InputState
    public let state: InputState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// Placeholder documentation for InputType
    public let type: InputType?

    public init (
        arn: String? = nil,
        attachedChannels: [String]? = nil,
        destinations: [InputDestination]? = nil,
        id: String? = nil,
        inputClass: InputClass? = nil,
        inputDevices: [InputDeviceSettings]? = nil,
        inputPartnerIds: [String]? = nil,
        inputSourceType: InputSourceType? = nil,
        mediaConnectFlows: [MediaConnectFlow]? = nil,
        name: String? = nil,
        roleArn: String? = nil,
        securityGroups: [String]? = nil,
        sources: [InputSource]? = nil,
        state: InputState? = nil,
        tags: [String:String]? = nil,
        type: InputType? = nil
    )
    {
        self.arn = arn
        self.attachedChannels = attachedChannels
        self.destinations = destinations
        self.id = id
        self.inputClass = inputClass
        self.inputDevices = inputDevices
        self.inputPartnerIds = inputPartnerIds
        self.inputSourceType = inputSourceType
        self.mediaConnectFlows = mediaConnectFlows
        self.name = name
        self.roleArn = roleArn
        self.securityGroups = securityGroups
        self.sources = sources
        self.state = state
        self.tags = tags
        self.type = type
    }
}
