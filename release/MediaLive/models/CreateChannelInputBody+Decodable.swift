// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateChannelInputBody: Equatable {
    public let cdiInputSpecification: CdiInputSpecification?
    public let channelClass: ChannelClass?
    public let destinations: [OutputDestination]?
    public let encoderSettings: EncoderSettings?
    public let inputAttachments: [InputAttachment]?
    public let inputSpecification: InputSpecification?
    public let logLevel: LogLevel?
    public let name: String?
    public let requestId: String?
    public let reserved: String?
    public let roleArn: String?
    public let tags: [String:String]?
    public let vpc: VpcOutputSettings?
}

extension CreateChannelInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case encoderSettings = "encoderSettings"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case name = "name"
        case requestId = "requestId"
        case reserved = "reserved"
        case roleArn = "roleArn"
        case tags = "tags"
        case vpc = "vpc"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([OutputDestination].self, forKey: .destinations)
        var destinationsDecoded0:[OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [OutputDestination]()
            for structure0 in destinationsContainer {
                destinationsDecoded0?.append(structure0)
            }
        }
        destinations = destinationsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([InputAttachment].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                inputAttachmentsDecoded0?.append(structure0)
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let reservedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reserved)
        reserved = reservedDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(VpcOutputSettings.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}
