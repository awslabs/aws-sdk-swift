// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MultiplexProgramSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case preferredChannelPipeline = "preferredChannelPipeline"
        case programNumber = "programNumber"
        case serviceDescriptor = "serviceDescriptor"
        case videoSettings = "videoSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let preferredChannelPipeline = preferredChannelPipeline {
            try encodeContainer.encode(preferredChannelPipeline.rawValue, forKey: .preferredChannelPipeline)
        }
        if programNumber != 0 {
            try encodeContainer.encode(programNumber, forKey: .programNumber)
        }
        if let serviceDescriptor = serviceDescriptor {
            try encodeContainer.encode(serviceDescriptor, forKey: .serviceDescriptor)
        }
        if let videoSettings = videoSettings {
            try encodeContainer.encode(videoSettings, forKey: .videoSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let preferredChannelPipelineDecoded = try containerValues.decodeIfPresent(PreferredChannelPipeline.self, forKey: .preferredChannelPipeline)
        preferredChannelPipeline = preferredChannelPipelineDecoded
        let programNumberDecoded = try containerValues.decode(Int.self, forKey: .programNumber)
        programNumber = programNumberDecoded
        let serviceDescriptorDecoded = try containerValues.decodeIfPresent(MultiplexProgramServiceDescriptor.self, forKey: .serviceDescriptor)
        serviceDescriptor = serviceDescriptorDecoded
        let videoSettingsDecoded = try containerValues.decodeIfPresent(MultiplexVideoSettings.self, forKey: .videoSettings)
        videoSettings = videoSettingsDecoded
    }
}
