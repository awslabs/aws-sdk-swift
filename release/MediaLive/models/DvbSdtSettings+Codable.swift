// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DvbSdtSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case outputSdt = "outputSdt"
        case repInterval = "repInterval"
        case serviceName = "serviceName"
        case serviceProviderName = "serviceProviderName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputSdt = outputSdt {
            try encodeContainer.encode(outputSdt.rawValue, forKey: .outputSdt)
        }
        if repInterval != 0 {
            try encodeContainer.encode(repInterval, forKey: .repInterval)
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
        if let serviceProviderName = serviceProviderName {
            try encodeContainer.encode(serviceProviderName, forKey: .serviceProviderName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputSdtDecoded = try containerValues.decodeIfPresent(DvbSdtOutputSdt.self, forKey: .outputSdt)
        outputSdt = outputSdtDecoded
        let repIntervalDecoded = try containerValues.decode(Int.self, forKey: .repInterval)
        repInterval = repIntervalDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let serviceProviderNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceProviderName)
        serviceProviderName = serviceProviderNameDecoded
    }
}
