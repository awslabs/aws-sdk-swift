// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Scte35DeliveryRestrictions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case archiveAllowedFlag = "archiveAllowedFlag"
        case deviceRestrictions = "deviceRestrictions"
        case noRegionalBlackoutFlag = "noRegionalBlackoutFlag"
        case webDeliveryAllowedFlag = "webDeliveryAllowedFlag"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archiveAllowedFlag = archiveAllowedFlag {
            try encodeContainer.encode(archiveAllowedFlag.rawValue, forKey: .archiveAllowedFlag)
        }
        if let deviceRestrictions = deviceRestrictions {
            try encodeContainer.encode(deviceRestrictions.rawValue, forKey: .deviceRestrictions)
        }
        if let noRegionalBlackoutFlag = noRegionalBlackoutFlag {
            try encodeContainer.encode(noRegionalBlackoutFlag.rawValue, forKey: .noRegionalBlackoutFlag)
        }
        if let webDeliveryAllowedFlag = webDeliveryAllowedFlag {
            try encodeContainer.encode(webDeliveryAllowedFlag.rawValue, forKey: .webDeliveryAllowedFlag)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archiveAllowedFlagDecoded = try containerValues.decodeIfPresent(Scte35ArchiveAllowedFlag.self, forKey: .archiveAllowedFlag)
        archiveAllowedFlag = archiveAllowedFlagDecoded
        let deviceRestrictionsDecoded = try containerValues.decodeIfPresent(Scte35DeviceRestrictions.self, forKey: .deviceRestrictions)
        deviceRestrictions = deviceRestrictionsDecoded
        let noRegionalBlackoutFlagDecoded = try containerValues.decodeIfPresent(Scte35NoRegionalBlackoutFlag.self, forKey: .noRegionalBlackoutFlag)
        noRegionalBlackoutFlag = noRegionalBlackoutFlagDecoded
        let webDeliveryAllowedFlagDecoded = try containerValues.decodeIfPresent(Scte35WebDeliveryAllowedFlag.self, forKey: .webDeliveryAllowedFlag)
        webDeliveryAllowedFlag = webDeliveryAllowedFlagDecoded
    }
}
