// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInputsOutputBody: Equatable {
    public let inputs: [Input]?
    public let nextToken: String?
}

extension ListInputsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case inputs = "inputs"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputsContainer = try containerValues.decodeIfPresent([Input].self, forKey: .inputs)
        var inputsDecoded0:[Input]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Input]()
            for structure0 in inputsContainer {
                inputsDecoded0?.append(structure0)
            }
        }
        inputs = inputsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
