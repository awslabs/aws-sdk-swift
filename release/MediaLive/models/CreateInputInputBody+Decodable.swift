// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateInputInputBody: Equatable {
    public let destinations: [InputDestinationRequest]?
    public let inputDevices: [InputDeviceSettings]?
    public let inputSecurityGroups: [String]?
    public let mediaConnectFlows: [MediaConnectFlowRequest]?
    public let name: String?
    public let requestId: String?
    public let roleArn: String?
    public let sources: [InputSourceRequest]?
    public let tags: [String:String]?
    public let type: InputType?
    public let vpc: InputVpcRequest?
}

extension CreateInputInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destinations = "destinations"
        case inputDevices = "inputDevices"
        case inputSecurityGroups = "inputSecurityGroups"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case requestId = "requestId"
        case roleArn = "roleArn"
        case sources = "sources"
        case tags = "tags"
        case type = "type"
        case vpc = "vpc"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationsContainer = try containerValues.decodeIfPresent([InputDestinationRequest].self, forKey: .destinations)
        var destinationsDecoded0:[InputDestinationRequest]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [InputDestinationRequest]()
            for structure0 in destinationsContainer {
                destinationsDecoded0?.append(structure0)
            }
        }
        destinations = destinationsDecoded0
        let inputDevicesContainer = try containerValues.decodeIfPresent([InputDeviceSettings].self, forKey: .inputDevices)
        var inputDevicesDecoded0:[InputDeviceSettings]? = nil
        if let inputDevicesContainer = inputDevicesContainer {
            inputDevicesDecoded0 = [InputDeviceSettings]()
            for structure0 in inputDevicesContainer {
                inputDevicesDecoded0?.append(structure0)
            }
        }
        inputDevices = inputDevicesDecoded0
        let inputSecurityGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .inputSecurityGroups)
        var inputSecurityGroupsDecoded0:[String]? = nil
        if let inputSecurityGroupsContainer = inputSecurityGroupsContainer {
            inputSecurityGroupsDecoded0 = [String]()
            for string0 in inputSecurityGroupsContainer {
                inputSecurityGroupsDecoded0?.append(string0)
            }
        }
        inputSecurityGroups = inputSecurityGroupsDecoded0
        let mediaConnectFlowsContainer = try containerValues.decodeIfPresent([MediaConnectFlowRequest].self, forKey: .mediaConnectFlows)
        var mediaConnectFlowsDecoded0:[MediaConnectFlowRequest]? = nil
        if let mediaConnectFlowsContainer = mediaConnectFlowsContainer {
            mediaConnectFlowsDecoded0 = [MediaConnectFlowRequest]()
            for structure0 in mediaConnectFlowsContainer {
                mediaConnectFlowsDecoded0?.append(structure0)
            }
        }
        mediaConnectFlows = mediaConnectFlowsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let sourcesContainer = try containerValues.decodeIfPresent([InputSourceRequest].self, forKey: .sources)
        var sourcesDecoded0:[InputSourceRequest]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [InputSourceRequest]()
            for structure0 in sourcesContainer {
                sourcesDecoded0?.append(structure0)
            }
        }
        sources = sourcesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(InputType.self, forKey: .type)
        type = typeDecoded
        let vpcDecoded = try containerValues.decodeIfPresent(InputVpcRequest.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}
