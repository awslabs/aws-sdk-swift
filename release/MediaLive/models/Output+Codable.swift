// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Output: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioDescriptionNames = "audioDescriptionNames"
        case captionDescriptionNames = "captionDescriptionNames"
        case outputName = "outputName"
        case outputSettings = "outputSettings"
        case videoDescriptionName = "videoDescriptionName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDescriptionNames = audioDescriptionNames {
            var audioDescriptionNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioDescriptionNames)
            for __listof__string0 in audioDescriptionNames {
                try audioDescriptionNamesContainer.encode(__listof__string0)
            }
        }
        if let captionDescriptionNames = captionDescriptionNames {
            var captionDescriptionNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionDescriptionNames)
            for __listof__string0 in captionDescriptionNames {
                try captionDescriptionNamesContainer.encode(__listof__string0)
            }
        }
        if let outputName = outputName {
            try encodeContainer.encode(outputName, forKey: .outputName)
        }
        if let outputSettings = outputSettings {
            try encodeContainer.encode(outputSettings, forKey: .outputSettings)
        }
        if let videoDescriptionName = videoDescriptionName {
            try encodeContainer.encode(videoDescriptionName, forKey: .videoDescriptionName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDescriptionNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .audioDescriptionNames)
        var audioDescriptionNamesDecoded0:[String]? = nil
        if let audioDescriptionNamesContainer = audioDescriptionNamesContainer {
            audioDescriptionNamesDecoded0 = [String]()
            for string0 in audioDescriptionNamesContainer {
                audioDescriptionNamesDecoded0?.append(string0)
            }
        }
        audioDescriptionNames = audioDescriptionNamesDecoded0
        let captionDescriptionNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .captionDescriptionNames)
        var captionDescriptionNamesDecoded0:[String]? = nil
        if let captionDescriptionNamesContainer = captionDescriptionNamesContainer {
            captionDescriptionNamesDecoded0 = [String]()
            for string0 in captionDescriptionNamesContainer {
                captionDescriptionNamesDecoded0?.append(string0)
            }
        }
        captionDescriptionNames = captionDescriptionNamesDecoded0
        let outputNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputName)
        outputName = outputNameDecoded
        let outputSettingsDecoded = try containerValues.decodeIfPresent(OutputSettings.self, forKey: .outputSettings)
        outputSettings = outputSettingsDecoded
        let videoDescriptionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .videoDescriptionName)
        videoDescriptionName = videoDescriptionNameDecoded
    }
}
