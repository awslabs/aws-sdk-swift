// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

/// Aac Coding Mode
public enum AacCodingMode {
    case adReceiverMix
    case codingMode10
    case codingMode11
    case codingMode20
    case codingMode51
    case sdkUnknown(String)
}

extension AacCodingMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AacCodingMode] {
        return [
            .adReceiverMix,
            .codingMode10,
            .codingMode11,
            .codingMode20,
            .codingMode51,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .adReceiverMix: return "AD_RECEIVER_MIX"
        case .codingMode10: return "CODING_MODE_1_0"
        case .codingMode11: return "CODING_MODE_1_1"
        case .codingMode20: return "CODING_MODE_2_0"
        case .codingMode51: return "CODING_MODE_5_1"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AacCodingMode(rawValue: rawValue) ?? AacCodingMode.sdkUnknown(rawValue)
    }
}

/// Aac Input Type
public enum AacInputType {
    case broadcasterMixedAd
    case normal
    case sdkUnknown(String)
}

extension AacInputType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AacInputType] {
        return [
            .broadcasterMixedAd,
            .normal,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .broadcasterMixedAd: return "BROADCASTER_MIXED_AD"
        case .normal: return "NORMAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AacInputType(rawValue: rawValue) ?? AacInputType.sdkUnknown(rawValue)
    }
}

/// Aac Profile
public enum AacProfile {
    case hev1
    case hev2
    case lc
    case sdkUnknown(String)
}

extension AacProfile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AacProfile] {
        return [
            .hev1,
            .hev2,
            .lc,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hev1: return "HEV1"
        case .hev2: return "HEV2"
        case .lc: return "LC"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AacProfile(rawValue: rawValue) ?? AacProfile.sdkUnknown(rawValue)
    }
}

/// Aac Rate Control Mode
public enum AacRateControlMode {
    case cbr
    case vbr
    case sdkUnknown(String)
}

extension AacRateControlMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AacRateControlMode] {
        return [
            .cbr,
            .vbr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cbr: return "CBR"
        case .vbr: return "VBR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AacRateControlMode(rawValue: rawValue) ?? AacRateControlMode.sdkUnknown(rawValue)
    }
}

/// Aac Raw Format
public enum AacRawFormat {
    case latmLoas
    case `none`
    case sdkUnknown(String)
}

extension AacRawFormat : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AacRawFormat] {
        return [
            .latmLoas,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .latmLoas: return "LATM_LOAS"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AacRawFormat(rawValue: rawValue) ?? AacRawFormat.sdkUnknown(rawValue)
    }
}

extension AacSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitrate = "bitrate"
        case codingMode = "codingMode"
        case inputType = "inputType"
        case profile = "profile"
        case rateControlMode = "rateControlMode"
        case rawFormat = "rawFormat"
        case sampleRate = "sampleRate"
        case spec = "spec"
        case vbrQuality = "vbrQuality"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitrate != 0.0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let codingMode = codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let inputType = inputType {
            try encodeContainer.encode(inputType.rawValue, forKey: .inputType)
        }
        if let profile = profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let rawFormat = rawFormat {
            try encodeContainer.encode(rawFormat.rawValue, forKey: .rawFormat)
        }
        if sampleRate != 0.0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if let spec = spec {
            try encodeContainer.encode(spec.rawValue, forKey: .spec)
        }
        if let vbrQuality = vbrQuality {
            try encodeContainer.encode(vbrQuality.rawValue, forKey: .vbrQuality)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decode(Double.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(AacCodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let inputTypeDecoded = try containerValues.decodeIfPresent(AacInputType.self, forKey: .inputType)
        inputType = inputTypeDecoded
        let profileDecoded = try containerValues.decodeIfPresent(AacProfile.self, forKey: .profile)
        profile = profileDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(AacRateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let rawFormatDecoded = try containerValues.decodeIfPresent(AacRawFormat.self, forKey: .rawFormat)
        rawFormat = rawFormatDecoded
        let sampleRateDecoded = try containerValues.decode(Double.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let specDecoded = try containerValues.decodeIfPresent(AacSpec.self, forKey: .spec)
        spec = specDecoded
        let vbrQualityDecoded = try containerValues.decodeIfPresent(AacVbrQuality.self, forKey: .vbrQuality)
        vbrQuality = vbrQualityDecoded
    }
}

extension AacSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AacSettings(bitrate: \(String(describing: bitrate)), codingMode: \(String(describing: codingMode)), inputType: \(String(describing: inputType)), profile: \(String(describing: profile)), rateControlMode: \(String(describing: rateControlMode)), rawFormat: \(String(describing: rawFormat)), sampleRate: \(String(describing: sampleRate)), spec: \(String(describing: spec)), vbrQuality: \(String(describing: vbrQuality)))"}
}

/// Aac Settings
public struct AacSettings: Equatable {
    /// Average bitrate in bits/second. Valid values depend on rate control mode and profile.
    public let bitrate: Double
    /// Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
    public let codingMode: AacCodingMode?
    /// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.  The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd.
    ///
    /// Leave set to "normal" when input does not contain pre-mixed audio + AD.
    public let inputType: AacInputType?
    /// AAC Profile.
    public let profile: AacProfile?
    /// Rate Control Mode.
    public let rateControlMode: AacRateControlMode?
    /// Sets LATM / LOAS AAC output for raw containers.
    public let rawFormat: AacRawFormat?
    /// Sample rate in Hz. Valid values depend on rate control mode and profile.
    public let sampleRate: Double
    /// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
    public let spec: AacSpec?
    /// VBR Quality Level - Only used if rateControlMode is VBR.
    public let vbrQuality: AacVbrQuality?

    public init (
        bitrate: Double = 0.0,
        codingMode: AacCodingMode? = nil,
        inputType: AacInputType? = nil,
        profile: AacProfile? = nil,
        rateControlMode: AacRateControlMode? = nil,
        rawFormat: AacRawFormat? = nil,
        sampleRate: Double = 0.0,
        spec: AacSpec? = nil,
        vbrQuality: AacVbrQuality? = nil
    )
    {
        self.bitrate = bitrate
        self.codingMode = codingMode
        self.inputType = inputType
        self.profile = profile
        self.rateControlMode = rateControlMode
        self.rawFormat = rawFormat
        self.sampleRate = sampleRate
        self.spec = spec
        self.vbrQuality = vbrQuality
    }
}

/// Aac Spec
public enum AacSpec {
    case mpeg2
    case mpeg4
    case sdkUnknown(String)
}

extension AacSpec : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AacSpec] {
        return [
            .mpeg2,
            .mpeg4,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .mpeg2: return "MPEG2"
        case .mpeg4: return "MPEG4"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AacSpec(rawValue: rawValue) ?? AacSpec.sdkUnknown(rawValue)
    }
}

/// Aac Vbr Quality
public enum AacVbrQuality {
    case high
    case low
    case mediumHigh
    case mediumLow
    case sdkUnknown(String)
}

extension AacVbrQuality : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AacVbrQuality] {
        return [
            .high,
            .low,
            .mediumHigh,
            .mediumLow,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .high: return "HIGH"
        case .low: return "LOW"
        case .mediumHigh: return "MEDIUM_HIGH"
        case .mediumLow: return "MEDIUM_LOW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AacVbrQuality(rawValue: rawValue) ?? AacVbrQuality.sdkUnknown(rawValue)
    }
}

/// Ac3 Bitstream Mode
public enum Ac3BitstreamMode {
    case commentary
    case completeMain
    case dialogue
    case emergency
    case hearingImpaired
    case musicAndEffects
    case visuallyImpaired
    case voiceOver
    case sdkUnknown(String)
}

extension Ac3BitstreamMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Ac3BitstreamMode] {
        return [
            .commentary,
            .completeMain,
            .dialogue,
            .emergency,
            .hearingImpaired,
            .musicAndEffects,
            .visuallyImpaired,
            .voiceOver,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .commentary: return "COMMENTARY"
        case .completeMain: return "COMPLETE_MAIN"
        case .dialogue: return "DIALOGUE"
        case .emergency: return "EMERGENCY"
        case .hearingImpaired: return "HEARING_IMPAIRED"
        case .musicAndEffects: return "MUSIC_AND_EFFECTS"
        case .visuallyImpaired: return "VISUALLY_IMPAIRED"
        case .voiceOver: return "VOICE_OVER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Ac3BitstreamMode(rawValue: rawValue) ?? Ac3BitstreamMode.sdkUnknown(rawValue)
    }
}

/// Ac3 Coding Mode
public enum Ac3CodingMode {
    case codingMode10
    case codingMode11
    case codingMode20
    case codingMode32Lfe
    case sdkUnknown(String)
}

extension Ac3CodingMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Ac3CodingMode] {
        return [
            .codingMode10,
            .codingMode11,
            .codingMode20,
            .codingMode32Lfe,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .codingMode10: return "CODING_MODE_1_0"
        case .codingMode11: return "CODING_MODE_1_1"
        case .codingMode20: return "CODING_MODE_2_0"
        case .codingMode32Lfe: return "CODING_MODE_3_2_LFE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Ac3CodingMode(rawValue: rawValue) ?? Ac3CodingMode.sdkUnknown(rawValue)
    }
}

/// Ac3 Drc Profile
public enum Ac3DrcProfile {
    case filmStandard
    case `none`
    case sdkUnknown(String)
}

extension Ac3DrcProfile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Ac3DrcProfile] {
        return [
            .filmStandard,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .filmStandard: return "FILM_STANDARD"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Ac3DrcProfile(rawValue: rawValue) ?? Ac3DrcProfile.sdkUnknown(rawValue)
    }
}

/// Ac3 Lfe Filter
public enum Ac3LfeFilter {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension Ac3LfeFilter : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Ac3LfeFilter] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Ac3LfeFilter(rawValue: rawValue) ?? Ac3LfeFilter.sdkUnknown(rawValue)
    }
}

/// Ac3 Metadata Control
public enum Ac3MetadataControl {
    case followInput
    case useConfigured
    case sdkUnknown(String)
}

extension Ac3MetadataControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Ac3MetadataControl] {
        return [
            .followInput,
            .useConfigured,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .followInput: return "FOLLOW_INPUT"
        case .useConfigured: return "USE_CONFIGURED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Ac3MetadataControl(rawValue: rawValue) ?? Ac3MetadataControl.sdkUnknown(rawValue)
    }
}

extension Ac3Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitrate = "bitrate"
        case bitstreamMode = "bitstreamMode"
        case codingMode = "codingMode"
        case dialnorm = "dialnorm"
        case drcProfile = "drcProfile"
        case lfeFilter = "lfeFilter"
        case metadataControl = "metadataControl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitrate != 0.0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bitstreamMode = bitstreamMode {
            try encodeContainer.encode(bitstreamMode.rawValue, forKey: .bitstreamMode)
        }
        if let codingMode = codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if dialnorm != 0 {
            try encodeContainer.encode(dialnorm, forKey: .dialnorm)
        }
        if let drcProfile = drcProfile {
            try encodeContainer.encode(drcProfile.rawValue, forKey: .drcProfile)
        }
        if let lfeFilter = lfeFilter {
            try encodeContainer.encode(lfeFilter.rawValue, forKey: .lfeFilter)
        }
        if let metadataControl = metadataControl {
            try encodeContainer.encode(metadataControl.rawValue, forKey: .metadataControl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decode(Double.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bitstreamModeDecoded = try containerValues.decodeIfPresent(Ac3BitstreamMode.self, forKey: .bitstreamMode)
        bitstreamMode = bitstreamModeDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(Ac3CodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let dialnormDecoded = try containerValues.decode(Int.self, forKey: .dialnorm)
        dialnorm = dialnormDecoded
        let drcProfileDecoded = try containerValues.decodeIfPresent(Ac3DrcProfile.self, forKey: .drcProfile)
        drcProfile = drcProfileDecoded
        let lfeFilterDecoded = try containerValues.decodeIfPresent(Ac3LfeFilter.self, forKey: .lfeFilter)
        lfeFilter = lfeFilterDecoded
        let metadataControlDecoded = try containerValues.decodeIfPresent(Ac3MetadataControl.self, forKey: .metadataControl)
        metadataControl = metadataControlDecoded
    }
}

extension Ac3Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Ac3Settings(bitrate: \(String(describing: bitrate)), bitstreamMode: \(String(describing: bitstreamMode)), codingMode: \(String(describing: codingMode)), dialnorm: \(String(describing: dialnorm)), drcProfile: \(String(describing: drcProfile)), lfeFilter: \(String(describing: lfeFilter)), metadataControl: \(String(describing: metadataControl)))"}
}

/// Ac3 Settings
public struct Ac3Settings: Equatable {
    /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
    public let bitrate: Double
    /// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream. See ATSC A/52-2012 for background on these values.
    public let bitstreamMode: Ac3BitstreamMode?
    /// Dolby Digital coding mode. Determines number of channels.
    public let codingMode: Ac3CodingMode?
    /// Sets the dialnorm for the output. If excluded and input audio is Dolby Digital, dialnorm will be passed through.
    public let dialnorm: Int
    /// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
    public let drcProfile: Ac3DrcProfile?
    /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.
    public let lfeFilter: Ac3LfeFilter?
    /// When set to "followInput", encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
    public let metadataControl: Ac3MetadataControl?

    public init (
        bitrate: Double = 0.0,
        bitstreamMode: Ac3BitstreamMode? = nil,
        codingMode: Ac3CodingMode? = nil,
        dialnorm: Int = 0,
        drcProfile: Ac3DrcProfile? = nil,
        lfeFilter: Ac3LfeFilter? = nil,
        metadataControl: Ac3MetadataControl? = nil
    )
    {
        self.bitrate = bitrate
        self.bitstreamMode = bitstreamMode
        self.codingMode = codingMode
        self.dialnorm = dialnorm
        self.drcProfile = drcProfile
        self.lfeFilter = lfeFilter
        self.metadataControl = metadataControl
    }
}

/// The HTTP Accept header. Indicates the requested type fothe thumbnail.
public enum AcceptHeader {
    case imageJpeg
    case sdkUnknown(String)
}

extension AcceptHeader : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AcceptHeader] {
        return [
            .imageJpeg,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .imageJpeg: return "image/jpeg"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AcceptHeader(rawValue: rawValue) ?? AcceptHeader.sdkUnknown(rawValue)
    }
}

extension AcceptInputDeviceTransferInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AcceptInputDeviceTransferInput(inputDeviceId: \(String(describing: inputDeviceId)))"}
}

extension AcceptInputDeviceTransferInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct AcceptInputDeviceTransferInputHeadersMiddleware: Middleware {
    public let id: String = "AcceptInputDeviceTransferInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AcceptInputDeviceTransferInput>,
                  next: H) -> Swift.Result<OperationOutput<AcceptInputDeviceTransferOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AcceptInputDeviceTransferInput>
    public typealias MOutput = OperationOutput<AcceptInputDeviceTransferOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AcceptInputDeviceTransferOutputError>
}

public struct AcceptInputDeviceTransferInputQueryItemMiddleware: Middleware {
    public let id: String = "AcceptInputDeviceTransferInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AcceptInputDeviceTransferInput>,
                  next: H) -> Swift.Result<OperationOutput<AcceptInputDeviceTransferOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AcceptInputDeviceTransferInput>
    public typealias MOutput = OperationOutput<AcceptInputDeviceTransferOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AcceptInputDeviceTransferOutputError>
}

/// Placeholder documentation for AcceptInputDeviceTransferRequest
public struct AcceptInputDeviceTransferInput: Equatable {
    /// The unique ID of the input device to accept. For example, hd-123456789abcdef.
    public let inputDeviceId: String?

    public init (
        inputDeviceId: String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

struct AcceptInputDeviceTransferInputBody: Equatable {
}

extension AcceptInputDeviceTransferInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension AcceptInputDeviceTransferOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptInputDeviceTransferOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AcceptInputDeviceTransferOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptInputDeviceTransferOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AcceptInputDeviceTransferOutputResponse()"}
}

extension AcceptInputDeviceTransferOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for AcceptInputDeviceTransferResponse
public struct AcceptInputDeviceTransferOutputResponse: Equatable {

    public init() {}
}

struct AcceptInputDeviceTransferOutputResponseBody: Equatable {
}

extension AcceptInputDeviceTransferOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

/// Afd Signaling
public enum AfdSignaling {
    case auto
    case fixed
    case `none`
    case sdkUnknown(String)
}

extension AfdSignaling : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AfdSignaling] {
        return [
            .auto,
            .fixed,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .fixed: return "FIXED"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AfdSignaling(rawValue: rawValue) ?? AfdSignaling.sdkUnknown(rawValue)
    }
}

extension AncillarySourceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case sourceAncillaryChannelNumber = "sourceAncillaryChannelNumber"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if sourceAncillaryChannelNumber != 0 {
            try encodeContainer.encode(sourceAncillaryChannelNumber, forKey: .sourceAncillaryChannelNumber)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceAncillaryChannelNumberDecoded = try containerValues.decode(Int.self, forKey: .sourceAncillaryChannelNumber)
        sourceAncillaryChannelNumber = sourceAncillaryChannelNumberDecoded
    }
}

extension AncillarySourceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AncillarySourceSettings(sourceAncillaryChannelNumber: \(String(describing: sourceAncillaryChannelNumber)))"}
}

/// Ancillary Source Settings
public struct AncillarySourceSettings: Equatable {
    /// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
    public let sourceAncillaryChannelNumber: Int

    public init (
        sourceAncillaryChannelNumber: Int = 0
    )
    {
        self.sourceAncillaryChannelNumber = sourceAncillaryChannelNumber
    }
}

extension ArchiveCdnSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case archiveS3Settings = "archiveS3Settings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archiveS3Settings = archiveS3Settings {
            try encodeContainer.encode(archiveS3Settings, forKey: .archiveS3Settings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archiveS3SettingsDecoded = try containerValues.decodeIfPresent(ArchiveS3Settings.self, forKey: .archiveS3Settings)
        archiveS3Settings = archiveS3SettingsDecoded
    }
}

extension ArchiveCdnSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ArchiveCdnSettings(archiveS3Settings: \(String(describing: archiveS3Settings)))"}
}

/// Archive Cdn Settings
public struct ArchiveCdnSettings: Equatable {
    /// Archive S3 Settings
    public let archiveS3Settings: ArchiveS3Settings?

    public init (
        archiveS3Settings: ArchiveS3Settings? = nil
    )
    {
        self.archiveS3Settings = archiveS3Settings
    }
}

extension ArchiveContainerSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case m2tsSettings = "m2tsSettings"
        case rawSettings = "rawSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let m2tsSettings = m2tsSettings {
            try encodeContainer.encode(m2tsSettings, forKey: .m2tsSettings)
        }
        if let rawSettings = rawSettings {
            try encodeContainer.encode(rawSettings, forKey: .rawSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let m2tsSettingsDecoded = try containerValues.decodeIfPresent(M2tsSettings.self, forKey: .m2tsSettings)
        m2tsSettings = m2tsSettingsDecoded
        let rawSettingsDecoded = try containerValues.decodeIfPresent(RawSettings.self, forKey: .rawSettings)
        rawSettings = rawSettingsDecoded
    }
}

extension ArchiveContainerSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ArchiveContainerSettings(m2tsSettings: \(String(describing: m2tsSettings)), rawSettings: \(String(describing: rawSettings)))"}
}

/// Archive Container Settings
public struct ArchiveContainerSettings: Equatable {
    /// M2ts Settings
    public let m2tsSettings: M2tsSettings?
    /// Raw Settings
    public let rawSettings: RawSettings?

    public init (
        m2tsSettings: M2tsSettings? = nil,
        rawSettings: RawSettings? = nil
    )
    {
        self.m2tsSettings = m2tsSettings
        self.rawSettings = rawSettings
    }
}

extension ArchiveGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case archiveCdnSettings = "archiveCdnSettings"
        case destination = "destination"
        case rolloverInterval = "rolloverInterval"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archiveCdnSettings = archiveCdnSettings {
            try encodeContainer.encode(archiveCdnSettings, forKey: .archiveCdnSettings)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if rolloverInterval != 0 {
            try encodeContainer.encode(rolloverInterval, forKey: .rolloverInterval)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archiveCdnSettingsDecoded = try containerValues.decodeIfPresent(ArchiveCdnSettings.self, forKey: .archiveCdnSettings)
        archiveCdnSettings = archiveCdnSettingsDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
        let rolloverIntervalDecoded = try containerValues.decode(Int.self, forKey: .rolloverInterval)
        rolloverInterval = rolloverIntervalDecoded
    }
}

extension ArchiveGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ArchiveGroupSettings(archiveCdnSettings: \(String(describing: archiveCdnSettings)), destination: \(String(describing: destination)), rolloverInterval: \(String(describing: rolloverInterval)))"}
}

/// Archive Group Settings
public struct ArchiveGroupSettings: Equatable {
    /// Parameters that control interactions with the CDN.
    public let archiveCdnSettings: ArchiveCdnSettings?
    /// A directory and base filename where archive files should be written.
    public let destination: OutputLocationRef?
    /// Number of seconds to write to archive file before closing and starting a new one.
    public let rolloverInterval: Int

    public init (
        archiveCdnSettings: ArchiveCdnSettings? = nil,
        destination: OutputLocationRef? = nil,
        rolloverInterval: Int = 0
    )
    {
        self.archiveCdnSettings = archiveCdnSettings
        self.destination = destination
        self.rolloverInterval = rolloverInterval
    }
}

extension ArchiveOutputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containerSettings = "containerSettings"
        case `extension` = "extension"
        case nameModifier = "nameModifier"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerSettings = containerSettings {
            try encodeContainer.encode(containerSettings, forKey: .containerSettings)
        }
        if let `extension` = `extension` {
            try encodeContainer.encode(`extension`, forKey: .`extension`)
        }
        if let nameModifier = nameModifier {
            try encodeContainer.encode(nameModifier, forKey: .nameModifier)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerSettingsDecoded = try containerValues.decodeIfPresent(ArchiveContainerSettings.self, forKey: .containerSettings)
        containerSettings = containerSettingsDecoded
        let extensionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .extension)
        `extension` = extensionDecoded
        let nameModifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nameModifier)
        nameModifier = nameModifierDecoded
    }
}

extension ArchiveOutputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ArchiveOutputSettings(containerSettings: \(String(describing: containerSettings)), extension: \(String(describing: `extension`)), nameModifier: \(String(describing: nameModifier)))"}
}

/// Archive Output Settings
public struct ArchiveOutputSettings: Equatable {
    /// Output file extension. If excluded, this will be auto-selected from the container type.
    public let `extension`: String?
    /// Settings specific to the container type of the file.
    public let containerSettings: ArchiveContainerSettings?
    /// String concatenated to the end of the destination filename.  Required for multiple outputs of the same type.
    public let nameModifier: String?

    public init (
        `extension`: String? = nil,
        containerSettings: ArchiveContainerSettings? = nil,
        nameModifier: String? = nil
    )
    {
        self.`extension` = `extension`
        self.containerSettings = containerSettings
        self.nameModifier = nameModifier
    }
}

extension ArchiveS3Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cannedAcl = "cannedAcl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cannedAcl = cannedAcl {
            try encodeContainer.encode(cannedAcl.rawValue, forKey: .cannedAcl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cannedAclDecoded = try containerValues.decodeIfPresent(S3CannedAcl.self, forKey: .cannedAcl)
        cannedAcl = cannedAclDecoded
    }
}

extension ArchiveS3Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ArchiveS3Settings(cannedAcl: \(String(describing: cannedAcl)))"}
}

/// Archive S3 Settings
public struct ArchiveS3Settings: Equatable {
    /// Specify the canned ACL to apply to each S3 request. Defaults to none.
    public let cannedAcl: S3CannedAcl?

    public init (
        cannedAcl: S3CannedAcl? = nil
    )
    {
        self.cannedAcl = cannedAcl
    }
}

extension AribDestinationSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension AribDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AribDestinationSettings()"}
}

/// Arib Destination Settings
public struct AribDestinationSettings: Equatable {

    public init() {}
}

extension AribSourceSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension AribSourceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AribSourceSettings()"}
}

/// Arib Source Settings
public struct AribSourceSettings: Equatable {

    public init() {}
}

extension AudioChannelMapping: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inputChannelLevels = "inputChannelLevels"
        case outputChannel = "outputChannel"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputChannelLevels = inputChannelLevels {
            var inputChannelLevelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputChannelLevels)
            for __listofinputchannellevel0 in inputChannelLevels {
                try inputChannelLevelsContainer.encode(__listofinputchannellevel0)
            }
        }
        if outputChannel != 0 {
            try encodeContainer.encode(outputChannel, forKey: .outputChannel)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputChannelLevelsContainer = try containerValues.decodeIfPresent([InputChannelLevel?].self, forKey: .inputChannelLevels)
        var inputChannelLevelsDecoded0:[InputChannelLevel]? = nil
        if let inputChannelLevelsContainer = inputChannelLevelsContainer {
            inputChannelLevelsDecoded0 = [InputChannelLevel]()
            for structure0 in inputChannelLevelsContainer {
                if let structure0 = structure0 {
                    inputChannelLevelsDecoded0?.append(structure0)
                }
            }
        }
        inputChannelLevels = inputChannelLevelsDecoded0
        let outputChannelDecoded = try containerValues.decode(Int.self, forKey: .outputChannel)
        outputChannel = outputChannelDecoded
    }
}

extension AudioChannelMapping: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioChannelMapping(inputChannelLevels: \(String(describing: inputChannelLevels)), outputChannel: \(String(describing: outputChannel)))"}
}

/// Audio Channel Mapping
public struct AudioChannelMapping: Equatable {
    /// Indices and gain values for each input channel that should be remixed into this output channel.
    public let inputChannelLevels: [InputChannelLevel]?
    /// The index of the output channel being produced.
    public let outputChannel: Int

    public init (
        inputChannelLevels: [InputChannelLevel]? = nil,
        outputChannel: Int = 0
    )
    {
        self.inputChannelLevels = inputChannelLevels
        self.outputChannel = outputChannel
    }
}

extension AudioCodecSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aacSettings = "aacSettings"
        case ac3Settings = "ac3Settings"
        case eac3Settings = "eac3Settings"
        case mp2Settings = "mp2Settings"
        case passThroughSettings = "passThroughSettings"
        case wavSettings = "wavSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aacSettings = aacSettings {
            try encodeContainer.encode(aacSettings, forKey: .aacSettings)
        }
        if let ac3Settings = ac3Settings {
            try encodeContainer.encode(ac3Settings, forKey: .ac3Settings)
        }
        if let eac3Settings = eac3Settings {
            try encodeContainer.encode(eac3Settings, forKey: .eac3Settings)
        }
        if let mp2Settings = mp2Settings {
            try encodeContainer.encode(mp2Settings, forKey: .mp2Settings)
        }
        if let passThroughSettings = passThroughSettings {
            try encodeContainer.encode(passThroughSettings, forKey: .passThroughSettings)
        }
        if let wavSettings = wavSettings {
            try encodeContainer.encode(wavSettings, forKey: .wavSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aacSettingsDecoded = try containerValues.decodeIfPresent(AacSettings.self, forKey: .aacSettings)
        aacSettings = aacSettingsDecoded
        let ac3SettingsDecoded = try containerValues.decodeIfPresent(Ac3Settings.self, forKey: .ac3Settings)
        ac3Settings = ac3SettingsDecoded
        let eac3SettingsDecoded = try containerValues.decodeIfPresent(Eac3Settings.self, forKey: .eac3Settings)
        eac3Settings = eac3SettingsDecoded
        let mp2SettingsDecoded = try containerValues.decodeIfPresent(Mp2Settings.self, forKey: .mp2Settings)
        mp2Settings = mp2SettingsDecoded
        let passThroughSettingsDecoded = try containerValues.decodeIfPresent(PassThroughSettings.self, forKey: .passThroughSettings)
        passThroughSettings = passThroughSettingsDecoded
        let wavSettingsDecoded = try containerValues.decodeIfPresent(WavSettings.self, forKey: .wavSettings)
        wavSettings = wavSettingsDecoded
    }
}

extension AudioCodecSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioCodecSettings(aacSettings: \(String(describing: aacSettings)), ac3Settings: \(String(describing: ac3Settings)), eac3Settings: \(String(describing: eac3Settings)), mp2Settings: \(String(describing: mp2Settings)), passThroughSettings: \(String(describing: passThroughSettings)), wavSettings: \(String(describing: wavSettings)))"}
}

/// Audio Codec Settings
public struct AudioCodecSettings: Equatable {
    /// Aac Settings
    public let aacSettings: AacSettings?
    /// Ac3 Settings
    public let ac3Settings: Ac3Settings?
    /// Eac3 Settings
    public let eac3Settings: Eac3Settings?
    /// Mp2 Settings
    public let mp2Settings: Mp2Settings?
    /// Pass Through Settings
    public let passThroughSettings: PassThroughSettings?
    /// Wav Settings
    public let wavSettings: WavSettings?

    public init (
        aacSettings: AacSettings? = nil,
        ac3Settings: Ac3Settings? = nil,
        eac3Settings: Eac3Settings? = nil,
        mp2Settings: Mp2Settings? = nil,
        passThroughSettings: PassThroughSettings? = nil,
        wavSettings: WavSettings? = nil
    )
    {
        self.aacSettings = aacSettings
        self.ac3Settings = ac3Settings
        self.eac3Settings = eac3Settings
        self.mp2Settings = mp2Settings
        self.passThroughSettings = passThroughSettings
        self.wavSettings = wavSettings
    }
}

extension AudioDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioNormalizationSettings = "audioNormalizationSettings"
        case audioSelectorName = "audioSelectorName"
        case audioType = "audioType"
        case audioTypeControl = "audioTypeControl"
        case codecSettings = "codecSettings"
        case languageCode = "languageCode"
        case languageCodeControl = "languageCodeControl"
        case name = "name"
        case remixSettings = "remixSettings"
        case streamName = "streamName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioNormalizationSettings = audioNormalizationSettings {
            try encodeContainer.encode(audioNormalizationSettings, forKey: .audioNormalizationSettings)
        }
        if let audioSelectorName = audioSelectorName {
            try encodeContainer.encode(audioSelectorName, forKey: .audioSelectorName)
        }
        if let audioType = audioType {
            try encodeContainer.encode(audioType.rawValue, forKey: .audioType)
        }
        if let audioTypeControl = audioTypeControl {
            try encodeContainer.encode(audioTypeControl.rawValue, forKey: .audioTypeControl)
        }
        if let codecSettings = codecSettings {
            try encodeContainer.encode(codecSettings, forKey: .codecSettings)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let languageCodeControl = languageCodeControl {
            try encodeContainer.encode(languageCodeControl.rawValue, forKey: .languageCodeControl)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let remixSettings = remixSettings {
            try encodeContainer.encode(remixSettings, forKey: .remixSettings)
        }
        if let streamName = streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioNormalizationSettingsDecoded = try containerValues.decodeIfPresent(AudioNormalizationSettings.self, forKey: .audioNormalizationSettings)
        audioNormalizationSettings = audioNormalizationSettingsDecoded
        let audioSelectorNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioSelectorName)
        audioSelectorName = audioSelectorNameDecoded
        let audioTypeDecoded = try containerValues.decodeIfPresent(AudioType.self, forKey: .audioType)
        audioType = audioTypeDecoded
        let audioTypeControlDecoded = try containerValues.decodeIfPresent(AudioDescriptionAudioTypeControl.self, forKey: .audioTypeControl)
        audioTypeControl = audioTypeControlDecoded
        let codecSettingsDecoded = try containerValues.decodeIfPresent(AudioCodecSettings.self, forKey: .codecSettings)
        codecSettings = codecSettingsDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageCodeControlDecoded = try containerValues.decodeIfPresent(AudioDescriptionLanguageCodeControl.self, forKey: .languageCodeControl)
        languageCodeControl = languageCodeControlDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let remixSettingsDecoded = try containerValues.decodeIfPresent(RemixSettings.self, forKey: .remixSettings)
        remixSettings = remixSettingsDecoded
        let streamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamName)
        streamName = streamNameDecoded
    }
}

extension AudioDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioDescription(audioNormalizationSettings: \(String(describing: audioNormalizationSettings)), audioSelectorName: \(String(describing: audioSelectorName)), audioType: \(String(describing: audioType)), audioTypeControl: \(String(describing: audioTypeControl)), codecSettings: \(String(describing: codecSettings)), languageCode: \(String(describing: languageCode)), languageCodeControl: \(String(describing: languageCodeControl)), name: \(String(describing: name)), remixSettings: \(String(describing: remixSettings)), streamName: \(String(describing: streamName)))"}
}

/// Audio Description
public struct AudioDescription: Equatable {
    /// Advanced audio normalization settings.
    public let audioNormalizationSettings: AudioNormalizationSettings?
    /// The name of the AudioSelector used as the source for this AudioDescription.
    public let audioSelectorName: String?
    /// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
    public let audioType: AudioType?
    /// Determines how audio type is determined.
    ///   followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output.
    ///   useConfigured: The value in Audio Type is included in the output.
    /// Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
    public let audioTypeControl: AudioDescriptionAudioTypeControl?
    /// Audio codec settings.
    public let codecSettings: AudioCodecSettings?
    /// RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
    public let languageCode: String?
    /// Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
    public let languageCodeControl: AudioDescriptionLanguageCodeControl?
    /// The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription.  Description names should be unique within this Live Event.
    public let name: String?
    /// Settings that control how input audio channels are remixed into the output audio channels.
    public let remixSettings: RemixSettings?
    /// Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
    public let streamName: String?

    public init (
        audioNormalizationSettings: AudioNormalizationSettings? = nil,
        audioSelectorName: String? = nil,
        audioType: AudioType? = nil,
        audioTypeControl: AudioDescriptionAudioTypeControl? = nil,
        codecSettings: AudioCodecSettings? = nil,
        languageCode: String? = nil,
        languageCodeControl: AudioDescriptionLanguageCodeControl? = nil,
        name: String? = nil,
        remixSettings: RemixSettings? = nil,
        streamName: String? = nil
    )
    {
        self.audioNormalizationSettings = audioNormalizationSettings
        self.audioSelectorName = audioSelectorName
        self.audioType = audioType
        self.audioTypeControl = audioTypeControl
        self.codecSettings = codecSettings
        self.languageCode = languageCode
        self.languageCodeControl = languageCodeControl
        self.name = name
        self.remixSettings = remixSettings
        self.streamName = streamName
    }
}

/// Audio Description Audio Type Control
public enum AudioDescriptionAudioTypeControl {
    case followInput
    case useConfigured
    case sdkUnknown(String)
}

extension AudioDescriptionAudioTypeControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioDescriptionAudioTypeControl] {
        return [
            .followInput,
            .useConfigured,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .followInput: return "FOLLOW_INPUT"
        case .useConfigured: return "USE_CONFIGURED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioDescriptionAudioTypeControl(rawValue: rawValue) ?? AudioDescriptionAudioTypeControl.sdkUnknown(rawValue)
    }
}

/// Audio Description Language Code Control
public enum AudioDescriptionLanguageCodeControl {
    case followInput
    case useConfigured
    case sdkUnknown(String)
}

extension AudioDescriptionLanguageCodeControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioDescriptionLanguageCodeControl] {
        return [
            .followInput,
            .useConfigured,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .followInput: return "FOLLOW_INPUT"
        case .useConfigured: return "USE_CONFIGURED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioDescriptionLanguageCodeControl(rawValue: rawValue) ?? AudioDescriptionLanguageCodeControl.sdkUnknown(rawValue)
    }
}

extension AudioLanguageSelection: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case languageCode = "languageCode"
        case languageSelectionPolicy = "languageSelectionPolicy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let languageSelectionPolicy = languageSelectionPolicy {
            try encodeContainer.encode(languageSelectionPolicy.rawValue, forKey: .languageSelectionPolicy)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageSelectionPolicyDecoded = try containerValues.decodeIfPresent(AudioLanguageSelectionPolicy.self, forKey: .languageSelectionPolicy)
        languageSelectionPolicy = languageSelectionPolicyDecoded
    }
}

extension AudioLanguageSelection: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioLanguageSelection(languageCode: \(String(describing: languageCode)), languageSelectionPolicy: \(String(describing: languageSelectionPolicy)))"}
}

/// Audio Language Selection
public struct AudioLanguageSelection: Equatable {
    /// Selects a specific three-letter language code from within an audio source.
    public let languageCode: String?
    /// When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.
    public let languageSelectionPolicy: AudioLanguageSelectionPolicy?

    public init (
        languageCode: String? = nil,
        languageSelectionPolicy: AudioLanguageSelectionPolicy? = nil
    )
    {
        self.languageCode = languageCode
        self.languageSelectionPolicy = languageSelectionPolicy
    }
}

/// Audio Language Selection Policy
public enum AudioLanguageSelectionPolicy {
    case loose
    case strict
    case sdkUnknown(String)
}

extension AudioLanguageSelectionPolicy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioLanguageSelectionPolicy] {
        return [
            .loose,
            .strict,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .loose: return "LOOSE"
        case .strict: return "STRICT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioLanguageSelectionPolicy(rawValue: rawValue) ?? AudioLanguageSelectionPolicy.sdkUnknown(rawValue)
    }
}

/// Audio Normalization Algorithm
public enum AudioNormalizationAlgorithm {
    case itu17701
    case itu17702
    case sdkUnknown(String)
}

extension AudioNormalizationAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioNormalizationAlgorithm] {
        return [
            .itu17701,
            .itu17702,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .itu17701: return "ITU_1770_1"
        case .itu17702: return "ITU_1770_2"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioNormalizationAlgorithm(rawValue: rawValue) ?? AudioNormalizationAlgorithm.sdkUnknown(rawValue)
    }
}

/// Audio Normalization Algorithm Control
public enum AudioNormalizationAlgorithmControl {
    case correctAudio
    case sdkUnknown(String)
}

extension AudioNormalizationAlgorithmControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioNormalizationAlgorithmControl] {
        return [
            .correctAudio,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .correctAudio: return "CORRECT_AUDIO"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioNormalizationAlgorithmControl(rawValue: rawValue) ?? AudioNormalizationAlgorithmControl.sdkUnknown(rawValue)
    }
}

extension AudioNormalizationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithm = "algorithm"
        case algorithmControl = "algorithmControl"
        case targetLkfs = "targetLkfs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithm = algorithm {
            try encodeContainer.encode(algorithm.rawValue, forKey: .algorithm)
        }
        if let algorithmControl = algorithmControl {
            try encodeContainer.encode(algorithmControl.rawValue, forKey: .algorithmControl)
        }
        if targetLkfs != 0.0 {
            try encodeContainer.encode(targetLkfs, forKey: .targetLkfs)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmDecoded = try containerValues.decodeIfPresent(AudioNormalizationAlgorithm.self, forKey: .algorithm)
        algorithm = algorithmDecoded
        let algorithmControlDecoded = try containerValues.decodeIfPresent(AudioNormalizationAlgorithmControl.self, forKey: .algorithmControl)
        algorithmControl = algorithmControlDecoded
        let targetLkfsDecoded = try containerValues.decode(Double.self, forKey: .targetLkfs)
        targetLkfs = targetLkfsDecoded
    }
}

extension AudioNormalizationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioNormalizationSettings(algorithm: \(String(describing: algorithm)), algorithmControl: \(String(describing: algorithmControl)), targetLkfs: \(String(describing: targetLkfs)))"}
}

/// Audio Normalization Settings
public struct AudioNormalizationSettings: Equatable {
    /// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.
    public let algorithm: AudioNormalizationAlgorithm?
    /// When set to correctAudio the output audio is corrected using the chosen algorithm. If set to measureOnly, the audio will be measured but not adjusted.
    public let algorithmControl: AudioNormalizationAlgorithmControl?
    /// Target LKFS(loudness) to adjust volume to. If no value is entered, a default value will be used according to the chosen algorithm.  The CALM Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a target of -23 LKFS.
    public let targetLkfs: Double

    public init (
        algorithm: AudioNormalizationAlgorithm? = nil,
        algorithmControl: AudioNormalizationAlgorithmControl? = nil,
        targetLkfs: Double = 0.0
    )
    {
        self.algorithm = algorithm
        self.algorithmControl = algorithmControl
        self.targetLkfs = targetLkfs
    }
}

/// Audio Only Hls Segment Type
public enum AudioOnlyHlsSegmentType {
    case aac
    case fmp4
    case sdkUnknown(String)
}

extension AudioOnlyHlsSegmentType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioOnlyHlsSegmentType] {
        return [
            .aac,
            .fmp4,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aac: return "AAC"
        case .fmp4: return "FMP4"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioOnlyHlsSegmentType(rawValue: rawValue) ?? AudioOnlyHlsSegmentType.sdkUnknown(rawValue)
    }
}

extension AudioOnlyHlsSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioGroupId = "audioGroupId"
        case audioOnlyImage = "audioOnlyImage"
        case audioTrackType = "audioTrackType"
        case segmentType = "segmentType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioGroupId = audioGroupId {
            try encodeContainer.encode(audioGroupId, forKey: .audioGroupId)
        }
        if let audioOnlyImage = audioOnlyImage {
            try encodeContainer.encode(audioOnlyImage, forKey: .audioOnlyImage)
        }
        if let audioTrackType = audioTrackType {
            try encodeContainer.encode(audioTrackType.rawValue, forKey: .audioTrackType)
        }
        if let segmentType = segmentType {
            try encodeContainer.encode(segmentType.rawValue, forKey: .segmentType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioGroupId)
        audioGroupId = audioGroupIdDecoded
        let audioOnlyImageDecoded = try containerValues.decodeIfPresent(InputLocation.self, forKey: .audioOnlyImage)
        audioOnlyImage = audioOnlyImageDecoded
        let audioTrackTypeDecoded = try containerValues.decodeIfPresent(AudioOnlyHlsTrackType.self, forKey: .audioTrackType)
        audioTrackType = audioTrackTypeDecoded
        let segmentTypeDecoded = try containerValues.decodeIfPresent(AudioOnlyHlsSegmentType.self, forKey: .segmentType)
        segmentType = segmentTypeDecoded
    }
}

extension AudioOnlyHlsSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioOnlyHlsSettings(audioGroupId: \(String(describing: audioGroupId)), audioOnlyImage: \(String(describing: audioOnlyImage)), audioTrackType: \(String(describing: audioTrackType)), segmentType: \(String(describing: segmentType)))"}
}

/// Audio Only Hls Settings
public struct AudioOnlyHlsSettings: Equatable {
    /// Specifies the group to which the audio Rendition belongs.
    public let audioGroupId: String?
    /// Optional. Specifies the .jpg or .png image to use as the cover art for an audio-only output. We recommend a low bit-size file because the image increases the output audio bandwidth.
    ///
    /// The image is attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.
    public let audioOnlyImage: InputLocation?
    /// Four types of audio-only tracks are supported:
    ///
    /// Audio-Only Variant Stream
    /// The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest.
    ///
    /// Alternate Audio, Auto Select, Default
    /// Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES
    ///
    /// Alternate Audio, Auto Select, Not Default
    /// Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES
    ///
    /// Alternate Audio, not Auto Select
    /// Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
    public let audioTrackType: AudioOnlyHlsTrackType?
    /// Specifies the segment type.
    public let segmentType: AudioOnlyHlsSegmentType?

    public init (
        audioGroupId: String? = nil,
        audioOnlyImage: InputLocation? = nil,
        audioTrackType: AudioOnlyHlsTrackType? = nil,
        segmentType: AudioOnlyHlsSegmentType? = nil
    )
    {
        self.audioGroupId = audioGroupId
        self.audioOnlyImage = audioOnlyImage
        self.audioTrackType = audioTrackType
        self.segmentType = segmentType
    }
}

/// Audio Only Hls Track Type
public enum AudioOnlyHlsTrackType {
    case alternateAudioAutoSelect
    case alternateAudioAutoSelectDefault
    case alternateAudioNotAutoSelect
    case audioOnlyVariantStream
    case sdkUnknown(String)
}

extension AudioOnlyHlsTrackType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioOnlyHlsTrackType] {
        return [
            .alternateAudioAutoSelect,
            .alternateAudioAutoSelectDefault,
            .alternateAudioNotAutoSelect,
            .audioOnlyVariantStream,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .alternateAudioAutoSelect: return "ALTERNATE_AUDIO_AUTO_SELECT"
        case .alternateAudioAutoSelectDefault: return "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"
        case .alternateAudioNotAutoSelect: return "ALTERNATE_AUDIO_NOT_AUTO_SELECT"
        case .audioOnlyVariantStream: return "AUDIO_ONLY_VARIANT_STREAM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioOnlyHlsTrackType(rawValue: rawValue) ?? AudioOnlyHlsTrackType.sdkUnknown(rawValue)
    }
}

extension AudioPidSelection: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pid = "pid"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if pid != 0 {
            try encodeContainer.encode(pid, forKey: .pid)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pidDecoded = try containerValues.decode(Int.self, forKey: .pid)
        pid = pidDecoded
    }
}

extension AudioPidSelection: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioPidSelection(pid: \(String(describing: pid)))"}
}

/// Audio Pid Selection
public struct AudioPidSelection: Equatable {
    /// Selects a specific PID from within a source.
    public let pid: Int

    public init (
        pid: Int = 0
    )
    {
        self.pid = pid
    }
}

extension AudioSelector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "name"
        case selectorSettings = "selectorSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let selectorSettings = selectorSettings {
            try encodeContainer.encode(selectorSettings, forKey: .selectorSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let selectorSettingsDecoded = try containerValues.decodeIfPresent(AudioSelectorSettings.self, forKey: .selectorSettings)
        selectorSettings = selectorSettingsDecoded
    }
}

extension AudioSelector: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioSelector(name: \(String(describing: name)), selectorSettings: \(String(describing: selectorSettings)))"}
}

/// Audio Selector
public struct AudioSelector: Equatable {
    /// The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector.  Selector names should be unique per input.
    public let name: String?
    /// The audio selector settings.
    public let selectorSettings: AudioSelectorSettings?

    public init (
        name: String? = nil,
        selectorSettings: AudioSelectorSettings? = nil
    )
    {
        self.name = name
        self.selectorSettings = selectorSettings
    }
}

extension AudioSelectorSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioLanguageSelection = "audioLanguageSelection"
        case audioPidSelection = "audioPidSelection"
        case audioTrackSelection = "audioTrackSelection"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioLanguageSelection = audioLanguageSelection {
            try encodeContainer.encode(audioLanguageSelection, forKey: .audioLanguageSelection)
        }
        if let audioPidSelection = audioPidSelection {
            try encodeContainer.encode(audioPidSelection, forKey: .audioPidSelection)
        }
        if let audioTrackSelection = audioTrackSelection {
            try encodeContainer.encode(audioTrackSelection, forKey: .audioTrackSelection)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioLanguageSelectionDecoded = try containerValues.decodeIfPresent(AudioLanguageSelection.self, forKey: .audioLanguageSelection)
        audioLanguageSelection = audioLanguageSelectionDecoded
        let audioPidSelectionDecoded = try containerValues.decodeIfPresent(AudioPidSelection.self, forKey: .audioPidSelection)
        audioPidSelection = audioPidSelectionDecoded
        let audioTrackSelectionDecoded = try containerValues.decodeIfPresent(AudioTrackSelection.self, forKey: .audioTrackSelection)
        audioTrackSelection = audioTrackSelectionDecoded
    }
}

extension AudioSelectorSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioSelectorSettings(audioLanguageSelection: \(String(describing: audioLanguageSelection)), audioPidSelection: \(String(describing: audioPidSelection)), audioTrackSelection: \(String(describing: audioTrackSelection)))"}
}

/// Audio Selector Settings
public struct AudioSelectorSettings: Equatable {
    /// Audio Language Selection
    public let audioLanguageSelection: AudioLanguageSelection?
    /// Audio Pid Selection
    public let audioPidSelection: AudioPidSelection?
    /// Audio Track Selection
    public let audioTrackSelection: AudioTrackSelection?

    public init (
        audioLanguageSelection: AudioLanguageSelection? = nil,
        audioPidSelection: AudioPidSelection? = nil,
        audioTrackSelection: AudioTrackSelection? = nil
    )
    {
        self.audioLanguageSelection = audioLanguageSelection
        self.audioPidSelection = audioPidSelection
        self.audioTrackSelection = audioTrackSelection
    }
}

extension AudioSilenceFailoverSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioSelectorName = "audioSelectorName"
        case audioSilenceThresholdMsec = "audioSilenceThresholdMsec"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioSelectorName = audioSelectorName {
            try encodeContainer.encode(audioSelectorName, forKey: .audioSelectorName)
        }
        if audioSilenceThresholdMsec != 0 {
            try encodeContainer.encode(audioSilenceThresholdMsec, forKey: .audioSilenceThresholdMsec)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioSelectorNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioSelectorName)
        audioSelectorName = audioSelectorNameDecoded
        let audioSilenceThresholdMsecDecoded = try containerValues.decode(Int.self, forKey: .audioSilenceThresholdMsec)
        audioSilenceThresholdMsec = audioSilenceThresholdMsecDecoded
    }
}

extension AudioSilenceFailoverSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioSilenceFailoverSettings(audioSelectorName: \(String(describing: audioSelectorName)), audioSilenceThresholdMsec: \(String(describing: audioSilenceThresholdMsec)))"}
}

/// Placeholder documentation for AudioSilenceFailoverSettings
public struct AudioSilenceFailoverSettings: Equatable {
    /// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
    public let audioSelectorName: String?
    /// The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
    public let audioSilenceThresholdMsec: Int

    public init (
        audioSelectorName: String? = nil,
        audioSilenceThresholdMsec: Int = 0
    )
    {
        self.audioSelectorName = audioSelectorName
        self.audioSilenceThresholdMsec = audioSilenceThresholdMsec
    }
}

extension AudioTrack: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case track = "track"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if track != 0 {
            try encodeContainer.encode(track, forKey: .track)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trackDecoded = try containerValues.decode(Int.self, forKey: .track)
        track = trackDecoded
    }
}

extension AudioTrack: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioTrack(track: \(String(describing: track)))"}
}

/// Audio Track
public struct AudioTrack: Equatable {
    /// 1-based integer value that maps to a specific audio track
    public let track: Int

    public init (
        track: Int = 0
    )
    {
        self.track = track
    }
}

extension AudioTrackSelection: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tracks = "tracks"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tracks = tracks {
            var tracksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tracks)
            for __listofaudiotrack0 in tracks {
                try tracksContainer.encode(__listofaudiotrack0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tracksContainer = try containerValues.decodeIfPresent([AudioTrack?].self, forKey: .tracks)
        var tracksDecoded0:[AudioTrack]? = nil
        if let tracksContainer = tracksContainer {
            tracksDecoded0 = [AudioTrack]()
            for structure0 in tracksContainer {
                if let structure0 = structure0 {
                    tracksDecoded0?.append(structure0)
                }
            }
        }
        tracks = tracksDecoded0
    }
}

extension AudioTrackSelection: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioTrackSelection(tracks: \(String(describing: tracks)))"}
}

/// Audio Track Selection
public struct AudioTrackSelection: Equatable {
    /// Selects one or more unique audio tracks from within a source.
    public let tracks: [AudioTrack]?

    public init (
        tracks: [AudioTrack]? = nil
    )
    {
        self.tracks = tracks
    }
}

/// Audio Type
public enum AudioType {
    case cleanEffects
    case hearingImpaired
    case undefined
    case visualImpairedCommentary
    case sdkUnknown(String)
}

extension AudioType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioType] {
        return [
            .cleanEffects,
            .hearingImpaired,
            .undefined,
            .visualImpairedCommentary,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cleanEffects: return "CLEAN_EFFECTS"
        case .hearingImpaired: return "HEARING_IMPAIRED"
        case .undefined: return "UNDEFINED"
        case .visualImpairedCommentary: return "VISUAL_IMPAIRED_COMMENTARY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioType(rawValue: rawValue) ?? AudioType.sdkUnknown(rawValue)
    }
}

/// Authentication Scheme
public enum AuthenticationScheme {
    case akamai
    case common
    case sdkUnknown(String)
}

extension AuthenticationScheme : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AuthenticationScheme] {
        return [
            .akamai,
            .common,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .akamai: return "AKAMAI"
        case .common: return "COMMON"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AuthenticationScheme(rawValue: rawValue) ?? AuthenticationScheme.sdkUnknown(rawValue)
    }
}

extension AutomaticInputFailoverSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case errorClearTimeMsec = "errorClearTimeMsec"
        case failoverConditions = "failoverConditions"
        case inputPreference = "inputPreference"
        case secondaryInputId = "secondaryInputId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if errorClearTimeMsec != 0 {
            try encodeContainer.encode(errorClearTimeMsec, forKey: .errorClearTimeMsec)
        }
        if let failoverConditions = failoverConditions {
            var failoverConditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .failoverConditions)
            for __listoffailovercondition0 in failoverConditions {
                try failoverConditionsContainer.encode(__listoffailovercondition0)
            }
        }
        if let inputPreference = inputPreference {
            try encodeContainer.encode(inputPreference.rawValue, forKey: .inputPreference)
        }
        if let secondaryInputId = secondaryInputId {
            try encodeContainer.encode(secondaryInputId, forKey: .secondaryInputId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorClearTimeMsecDecoded = try containerValues.decode(Int.self, forKey: .errorClearTimeMsec)
        errorClearTimeMsec = errorClearTimeMsecDecoded
        let failoverConditionsContainer = try containerValues.decodeIfPresent([FailoverCondition?].self, forKey: .failoverConditions)
        var failoverConditionsDecoded0:[FailoverCondition]? = nil
        if let failoverConditionsContainer = failoverConditionsContainer {
            failoverConditionsDecoded0 = [FailoverCondition]()
            for structure0 in failoverConditionsContainer {
                if let structure0 = structure0 {
                    failoverConditionsDecoded0?.append(structure0)
                }
            }
        }
        failoverConditions = failoverConditionsDecoded0
        let inputPreferenceDecoded = try containerValues.decodeIfPresent(InputPreference.self, forKey: .inputPreference)
        inputPreference = inputPreferenceDecoded
        let secondaryInputIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secondaryInputId)
        secondaryInputId = secondaryInputIdDecoded
    }
}

extension AutomaticInputFailoverSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutomaticInputFailoverSettings(errorClearTimeMsec: \(String(describing: errorClearTimeMsec)), failoverConditions: \(String(describing: failoverConditions)), inputPreference: \(String(describing: inputPreference)), secondaryInputId: \(String(describing: secondaryInputId)))"}
}

/// The settings for Automatic Input Failover.
public struct AutomaticInputFailoverSettings: Equatable {
    /// This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
    public let errorClearTimeMsec: Int
    /// A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input.
    public let failoverConditions: [FailoverCondition]?
    /// Input preference when deciding which input to make active when a previously failed input has recovered.
    public let inputPreference: InputPreference?
    /// The input ID of the secondary input in the automatic input failover pair.
    public let secondaryInputId: String?

    public init (
        errorClearTimeMsec: Int = 0,
        failoverConditions: [FailoverCondition]? = nil,
        inputPreference: InputPreference? = nil,
        secondaryInputId: String? = nil
    )
    {
        self.errorClearTimeMsec = errorClearTimeMsec
        self.failoverConditions = failoverConditions
        self.inputPreference = inputPreference
        self.secondaryInputId = secondaryInputId
    }
}

extension AvailBlanking: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availBlankingImage = "availBlankingImage"
        case state = "state"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availBlankingImage = availBlankingImage {
            try encodeContainer.encode(availBlankingImage, forKey: .availBlankingImage)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availBlankingImageDecoded = try containerValues.decodeIfPresent(InputLocation.self, forKey: .availBlankingImage)
        availBlankingImage = availBlankingImageDecoded
        let stateDecoded = try containerValues.decodeIfPresent(AvailBlankingState.self, forKey: .state)
        state = stateDecoded
    }
}

extension AvailBlanking: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AvailBlanking(availBlankingImage: \(String(describing: availBlankingImage)), state: \(String(describing: state)))"}
}

/// Avail Blanking
public struct AvailBlanking: Equatable {
    /// Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.
    public let availBlankingImage: InputLocation?
    /// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
    public let state: AvailBlankingState?

    public init (
        availBlankingImage: InputLocation? = nil,
        state: AvailBlankingState? = nil
    )
    {
        self.availBlankingImage = availBlankingImage
        self.state = state
    }
}

/// Avail Blanking State
public enum AvailBlankingState {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension AvailBlankingState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AvailBlankingState] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AvailBlankingState(rawValue: rawValue) ?? AvailBlankingState.sdkUnknown(rawValue)
    }
}

extension AvailConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availSettings = "availSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availSettings = availSettings {
            try encodeContainer.encode(availSettings, forKey: .availSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availSettingsDecoded = try containerValues.decodeIfPresent(AvailSettings.self, forKey: .availSettings)
        availSettings = availSettingsDecoded
    }
}

extension AvailConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AvailConfiguration(availSettings: \(String(describing: availSettings)))"}
}

/// Avail Configuration
public struct AvailConfiguration: Equatable {
    /// Ad avail settings.
    public let availSettings: AvailSettings?

    public init (
        availSettings: AvailSettings? = nil
    )
    {
        self.availSettings = availSettings
    }
}

extension AvailSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case scte35SpliceInsert = "scte35SpliceInsert"
        case scte35TimeSignalApos = "scte35TimeSignalApos"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scte35SpliceInsert = scte35SpliceInsert {
            try encodeContainer.encode(scte35SpliceInsert, forKey: .scte35SpliceInsert)
        }
        if let scte35TimeSignalApos = scte35TimeSignalApos {
            try encodeContainer.encode(scte35TimeSignalApos, forKey: .scte35TimeSignalApos)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scte35SpliceInsertDecoded = try containerValues.decodeIfPresent(Scte35SpliceInsert.self, forKey: .scte35SpliceInsert)
        scte35SpliceInsert = scte35SpliceInsertDecoded
        let scte35TimeSignalAposDecoded = try containerValues.decodeIfPresent(Scte35TimeSignalApos.self, forKey: .scte35TimeSignalApos)
        scte35TimeSignalApos = scte35TimeSignalAposDecoded
    }
}

extension AvailSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AvailSettings(scte35SpliceInsert: \(String(describing: scte35SpliceInsert)), scte35TimeSignalApos: \(String(describing: scte35TimeSignalApos)))"}
}

/// Avail Settings
public struct AvailSettings: Equatable {
    /// Scte35 Splice Insert
    public let scte35SpliceInsert: Scte35SpliceInsert?
    /// Scte35 Time Signal Apos
    public let scte35TimeSignalApos: Scte35TimeSignalApos?

    public init (
        scte35SpliceInsert: Scte35SpliceInsert? = nil,
        scte35TimeSignalApos: Scte35TimeSignalApos? = nil
    )
    {
        self.scte35SpliceInsert = scte35SpliceInsert
        self.scte35TimeSignalApos = scte35TimeSignalApos
    }
}

extension BadGatewayException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BadGatewayException(message: \(String(describing: message)))"}
}

extension BadGatewayException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BadGatewayExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for BadGatewayException
public struct BadGatewayException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server
    /// Placeholder documentation for __string
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct BadGatewayExceptionBody: Equatable {
    public let message: String?
}

extension BadGatewayExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BadRequestException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BadRequestException(message: \(String(describing: message)))"}
}

extension BadRequestException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BadRequestExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for BadRequestException
public struct BadRequestException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// Placeholder documentation for __string
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct BadRequestExceptionBody: Equatable {
    public let message: String?
}

extension BadRequestExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct BatchDeleteInputBodyMiddleware: Middleware {
    public let id: String = "BatchDeleteInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchDeleteInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchDeleteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchDeleteInput>
    public typealias MOutput = OperationOutput<BatchDeleteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchDeleteOutputError>
}

extension BatchDeleteInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchDeleteInput(channelIds: \(String(describing: channelIds)), inputIds: \(String(describing: inputIds)), inputSecurityGroupIds: \(String(describing: inputSecurityGroupIds)), multiplexIds: \(String(describing: multiplexIds)))"}
}

extension BatchDeleteInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelIds = "channelIds"
        case inputIds = "inputIds"
        case inputSecurityGroupIds = "inputSecurityGroupIds"
        case multiplexIds = "multiplexIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelIds = channelIds {
            var channelIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .channelIds)
            for __listof__string0 in channelIds {
                try channelIdsContainer.encode(__listof__string0)
            }
        }
        if let inputIds = inputIds {
            var inputIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputIds)
            for __listof__string0 in inputIds {
                try inputIdsContainer.encode(__listof__string0)
            }
        }
        if let inputSecurityGroupIds = inputSecurityGroupIds {
            var inputSecurityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputSecurityGroupIds)
            for __listof__string0 in inputSecurityGroupIds {
                try inputSecurityGroupIdsContainer.encode(__listof__string0)
            }
        }
        if let multiplexIds = multiplexIds {
            var multiplexIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .multiplexIds)
            for __listof__string0 in multiplexIds {
                try multiplexIdsContainer.encode(__listof__string0)
            }
        }
    }
}

public struct BatchDeleteInputHeadersMiddleware: Middleware {
    public let id: String = "BatchDeleteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchDeleteInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchDeleteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchDeleteInput>
    public typealias MOutput = OperationOutput<BatchDeleteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchDeleteOutputError>
}

public struct BatchDeleteInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchDeleteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchDeleteInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchDeleteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchDeleteInput>
    public typealias MOutput = OperationOutput<BatchDeleteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchDeleteOutputError>
}

/// A request to delete resources
public struct BatchDeleteInput: Equatable {
    /// List of channel IDs
    public let channelIds: [String]?
    /// List of input IDs
    public let inputIds: [String]?
    /// List of input security group IDs
    public let inputSecurityGroupIds: [String]?
    /// List of multiplex IDs
    public let multiplexIds: [String]?

    public init (
        channelIds: [String]? = nil,
        inputIds: [String]? = nil,
        inputSecurityGroupIds: [String]? = nil,
        multiplexIds: [String]? = nil
    )
    {
        self.channelIds = channelIds
        self.inputIds = inputIds
        self.inputSecurityGroupIds = inputSecurityGroupIds
        self.multiplexIds = multiplexIds
    }
}

struct BatchDeleteInputBody: Equatable {
    public let channelIds: [String]?
    public let inputIds: [String]?
    public let inputSecurityGroupIds: [String]?
    public let multiplexIds: [String]?
}

extension BatchDeleteInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channelIds = "channelIds"
        case inputIds = "inputIds"
        case inputSecurityGroupIds = "inputSecurityGroupIds"
        case multiplexIds = "multiplexIds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .channelIds)
        var channelIdsDecoded0:[String]? = nil
        if let channelIdsContainer = channelIdsContainer {
            channelIdsDecoded0 = [String]()
            for string0 in channelIdsContainer {
                if let string0 = string0 {
                    channelIdsDecoded0?.append(string0)
                }
            }
        }
        channelIds = channelIdsDecoded0
        let inputIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .inputIds)
        var inputIdsDecoded0:[String]? = nil
        if let inputIdsContainer = inputIdsContainer {
            inputIdsDecoded0 = [String]()
            for string0 in inputIdsContainer {
                if let string0 = string0 {
                    inputIdsDecoded0?.append(string0)
                }
            }
        }
        inputIds = inputIdsDecoded0
        let inputSecurityGroupIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .inputSecurityGroupIds)
        var inputSecurityGroupIdsDecoded0:[String]? = nil
        if let inputSecurityGroupIdsContainer = inputSecurityGroupIdsContainer {
            inputSecurityGroupIdsDecoded0 = [String]()
            for string0 in inputSecurityGroupIdsContainer {
                if let string0 = string0 {
                    inputSecurityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        inputSecurityGroupIds = inputSecurityGroupIdsDecoded0
        let multiplexIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .multiplexIds)
        var multiplexIdsDecoded0:[String]? = nil
        if let multiplexIdsContainer = multiplexIdsContainer {
            multiplexIdsDecoded0 = [String]()
            for string0 in multiplexIdsContainer {
                if let string0 = string0 {
                    multiplexIdsDecoded0?.append(string0)
                }
            }
        }
        multiplexIds = multiplexIdsDecoded0
    }
}

extension BatchDeleteOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDeleteOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchDeleteOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDeleteOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchDeleteOutputResponse(failed: \(String(describing: failed)), successful: \(String(describing: successful)))"}
}

extension BatchDeleteOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchDeleteOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.failed = output.failed
            self.successful = output.successful
        } else {
            self.failed = nil
            self.successful = nil
        }
    }
}

/// Placeholder documentation for BatchDeleteResponse
public struct BatchDeleteOutputResponse: Equatable {
    /// List of failed operations
    public let failed: [BatchFailedResultModel]?
    /// List of successful operations
    public let successful: [BatchSuccessfulResultModel]?

    public init (
        failed: [BatchFailedResultModel]? = nil,
        successful: [BatchSuccessfulResultModel]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

struct BatchDeleteOutputResponseBody: Equatable {
    public let failed: [BatchFailedResultModel]?
    public let successful: [BatchSuccessfulResultModel]?
}

extension BatchDeleteOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case failed = "failed"
        case successful = "successful"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedContainer = try containerValues.decodeIfPresent([BatchFailedResultModel?].self, forKey: .failed)
        var failedDecoded0:[BatchFailedResultModel]? = nil
        if let failedContainer = failedContainer {
            failedDecoded0 = [BatchFailedResultModel]()
            for structure0 in failedContainer {
                if let structure0 = structure0 {
                    failedDecoded0?.append(structure0)
                }
            }
        }
        failed = failedDecoded0
        let successfulContainer = try containerValues.decodeIfPresent([BatchSuccessfulResultModel?].self, forKey: .successful)
        var successfulDecoded0:[BatchSuccessfulResultModel]? = nil
        if let successfulContainer = successfulContainer {
            successfulDecoded0 = [BatchSuccessfulResultModel]()
            for structure0 in successfulContainer {
                if let structure0 = structure0 {
                    successfulDecoded0?.append(structure0)
                }
            }
        }
        successful = successfulDecoded0
    }
}

extension BatchFailedResultModel: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case code = "code"
        case id = "id"
        case message = "message"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let code = code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let codeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .code)
        code = codeDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BatchFailedResultModel: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchFailedResultModel(arn: \(String(describing: arn)), code: \(String(describing: code)), id: \(String(describing: id)), message: \(String(describing: message)))"}
}

/// Details from a failed operation
public struct BatchFailedResultModel: Equatable {
    /// ARN of the resource
    public let arn: String?
    /// Error code for the failed operation
    public let code: String?
    /// ID of the resource
    public let id: String?
    /// Error message for the failed operation
    public let message: String?

    public init (
        arn: String? = nil,
        code: String? = nil,
        id: String? = nil,
        message: String? = nil
    )
    {
        self.arn = arn
        self.code = code
        self.id = id
        self.message = message
    }
}

extension BatchScheduleActionCreateRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case scheduleActions = "scheduleActions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scheduleActions = scheduleActions {
            var scheduleActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scheduleActions)
            for __listofscheduleaction0 in scheduleActions {
                try scheduleActionsContainer.encode(__listofscheduleaction0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleActionsContainer = try containerValues.decodeIfPresent([ScheduleAction?].self, forKey: .scheduleActions)
        var scheduleActionsDecoded0:[ScheduleAction]? = nil
        if let scheduleActionsContainer = scheduleActionsContainer {
            scheduleActionsDecoded0 = [ScheduleAction]()
            for structure0 in scheduleActionsContainer {
                if let structure0 = structure0 {
                    scheduleActionsDecoded0?.append(structure0)
                }
            }
        }
        scheduleActions = scheduleActionsDecoded0
    }
}

extension BatchScheduleActionCreateRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchScheduleActionCreateRequest(scheduleActions: \(String(describing: scheduleActions)))"}
}

/// A list of schedule actions to create (in a request) or that have been created (in a response).
public struct BatchScheduleActionCreateRequest: Equatable {
    /// A list of schedule actions to create.
    public let scheduleActions: [ScheduleAction]?

    public init (
        scheduleActions: [ScheduleAction]? = nil
    )
    {
        self.scheduleActions = scheduleActions
    }
}

extension BatchScheduleActionCreateResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case scheduleActions = "scheduleActions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scheduleActions = scheduleActions {
            var scheduleActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scheduleActions)
            for __listofscheduleaction0 in scheduleActions {
                try scheduleActionsContainer.encode(__listofscheduleaction0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleActionsContainer = try containerValues.decodeIfPresent([ScheduleAction?].self, forKey: .scheduleActions)
        var scheduleActionsDecoded0:[ScheduleAction]? = nil
        if let scheduleActionsContainer = scheduleActionsContainer {
            scheduleActionsDecoded0 = [ScheduleAction]()
            for structure0 in scheduleActionsContainer {
                if let structure0 = structure0 {
                    scheduleActionsDecoded0?.append(structure0)
                }
            }
        }
        scheduleActions = scheduleActionsDecoded0
    }
}

extension BatchScheduleActionCreateResult: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchScheduleActionCreateResult(scheduleActions: \(String(describing: scheduleActions)))"}
}

/// List of actions that have been created in the schedule.
public struct BatchScheduleActionCreateResult: Equatable {
    /// List of actions that have been created in the schedule.
    public let scheduleActions: [ScheduleAction]?

    public init (
        scheduleActions: [ScheduleAction]? = nil
    )
    {
        self.scheduleActions = scheduleActions
    }
}

extension BatchScheduleActionDeleteRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionNames = "actionNames"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionNames = actionNames {
            var actionNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actionNames)
            for __listof__string0 in actionNames {
                try actionNamesContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .actionNames)
        var actionNamesDecoded0:[String]? = nil
        if let actionNamesContainer = actionNamesContainer {
            actionNamesDecoded0 = [String]()
            for string0 in actionNamesContainer {
                if let string0 = string0 {
                    actionNamesDecoded0?.append(string0)
                }
            }
        }
        actionNames = actionNamesDecoded0
    }
}

extension BatchScheduleActionDeleteRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchScheduleActionDeleteRequest(actionNames: \(String(describing: actionNames)))"}
}

/// A list of schedule actions to delete.
public struct BatchScheduleActionDeleteRequest: Equatable {
    /// A list of schedule actions to delete.
    public let actionNames: [String]?

    public init (
        actionNames: [String]? = nil
    )
    {
        self.actionNames = actionNames
    }
}

extension BatchScheduleActionDeleteResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case scheduleActions = "scheduleActions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scheduleActions = scheduleActions {
            var scheduleActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scheduleActions)
            for __listofscheduleaction0 in scheduleActions {
                try scheduleActionsContainer.encode(__listofscheduleaction0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleActionsContainer = try containerValues.decodeIfPresent([ScheduleAction?].self, forKey: .scheduleActions)
        var scheduleActionsDecoded0:[ScheduleAction]? = nil
        if let scheduleActionsContainer = scheduleActionsContainer {
            scheduleActionsDecoded0 = [ScheduleAction]()
            for structure0 in scheduleActionsContainer {
                if let structure0 = structure0 {
                    scheduleActionsDecoded0?.append(structure0)
                }
            }
        }
        scheduleActions = scheduleActionsDecoded0
    }
}

extension BatchScheduleActionDeleteResult: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchScheduleActionDeleteResult(scheduleActions: \(String(describing: scheduleActions)))"}
}

/// List of actions that have been deleted from the schedule.
public struct BatchScheduleActionDeleteResult: Equatable {
    /// List of actions that have been deleted from the schedule.
    public let scheduleActions: [ScheduleAction]?

    public init (
        scheduleActions: [ScheduleAction]? = nil
    )
    {
        self.scheduleActions = scheduleActions
    }
}

public struct BatchStartInputBodyMiddleware: Middleware {
    public let id: String = "BatchStartInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchStartInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchStartOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchStartInput>
    public typealias MOutput = OperationOutput<BatchStartOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchStartOutputError>
}

extension BatchStartInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchStartInput(channelIds: \(String(describing: channelIds)), multiplexIds: \(String(describing: multiplexIds)))"}
}

extension BatchStartInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelIds = "channelIds"
        case multiplexIds = "multiplexIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelIds = channelIds {
            var channelIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .channelIds)
            for __listof__string0 in channelIds {
                try channelIdsContainer.encode(__listof__string0)
            }
        }
        if let multiplexIds = multiplexIds {
            var multiplexIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .multiplexIds)
            for __listof__string0 in multiplexIds {
                try multiplexIdsContainer.encode(__listof__string0)
            }
        }
    }
}

public struct BatchStartInputHeadersMiddleware: Middleware {
    public let id: String = "BatchStartInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchStartInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchStartOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchStartInput>
    public typealias MOutput = OperationOutput<BatchStartOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchStartOutputError>
}

public struct BatchStartInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchStartInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchStartInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchStartOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchStartInput>
    public typealias MOutput = OperationOutput<BatchStartOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchStartOutputError>
}

/// A request to start resources
public struct BatchStartInput: Equatable {
    /// List of channel IDs
    public let channelIds: [String]?
    /// List of multiplex IDs
    public let multiplexIds: [String]?

    public init (
        channelIds: [String]? = nil,
        multiplexIds: [String]? = nil
    )
    {
        self.channelIds = channelIds
        self.multiplexIds = multiplexIds
    }
}

struct BatchStartInputBody: Equatable {
    public let channelIds: [String]?
    public let multiplexIds: [String]?
}

extension BatchStartInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channelIds = "channelIds"
        case multiplexIds = "multiplexIds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .channelIds)
        var channelIdsDecoded0:[String]? = nil
        if let channelIdsContainer = channelIdsContainer {
            channelIdsDecoded0 = [String]()
            for string0 in channelIdsContainer {
                if let string0 = string0 {
                    channelIdsDecoded0?.append(string0)
                }
            }
        }
        channelIds = channelIdsDecoded0
        let multiplexIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .multiplexIds)
        var multiplexIdsDecoded0:[String]? = nil
        if let multiplexIdsContainer = multiplexIdsContainer {
            multiplexIdsDecoded0 = [String]()
            for string0 in multiplexIdsContainer {
                if let string0 = string0 {
                    multiplexIdsDecoded0?.append(string0)
                }
            }
        }
        multiplexIds = multiplexIdsDecoded0
    }
}

extension BatchStartOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchStartOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchStartOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchStartOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchStartOutputResponse(failed: \(String(describing: failed)), successful: \(String(describing: successful)))"}
}

extension BatchStartOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchStartOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.failed = output.failed
            self.successful = output.successful
        } else {
            self.failed = nil
            self.successful = nil
        }
    }
}

/// Placeholder documentation for BatchStartResponse
public struct BatchStartOutputResponse: Equatable {
    /// List of failed operations
    public let failed: [BatchFailedResultModel]?
    /// List of successful operations
    public let successful: [BatchSuccessfulResultModel]?

    public init (
        failed: [BatchFailedResultModel]? = nil,
        successful: [BatchSuccessfulResultModel]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

struct BatchStartOutputResponseBody: Equatable {
    public let failed: [BatchFailedResultModel]?
    public let successful: [BatchSuccessfulResultModel]?
}

extension BatchStartOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case failed = "failed"
        case successful = "successful"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedContainer = try containerValues.decodeIfPresent([BatchFailedResultModel?].self, forKey: .failed)
        var failedDecoded0:[BatchFailedResultModel]? = nil
        if let failedContainer = failedContainer {
            failedDecoded0 = [BatchFailedResultModel]()
            for structure0 in failedContainer {
                if let structure0 = structure0 {
                    failedDecoded0?.append(structure0)
                }
            }
        }
        failed = failedDecoded0
        let successfulContainer = try containerValues.decodeIfPresent([BatchSuccessfulResultModel?].self, forKey: .successful)
        var successfulDecoded0:[BatchSuccessfulResultModel]? = nil
        if let successfulContainer = successfulContainer {
            successfulDecoded0 = [BatchSuccessfulResultModel]()
            for structure0 in successfulContainer {
                if let structure0 = structure0 {
                    successfulDecoded0?.append(structure0)
                }
            }
        }
        successful = successfulDecoded0
    }
}

public struct BatchStopInputBodyMiddleware: Middleware {
    public let id: String = "BatchStopInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchStopInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchStopOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchStopInput>
    public typealias MOutput = OperationOutput<BatchStopOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchStopOutputError>
}

extension BatchStopInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchStopInput(channelIds: \(String(describing: channelIds)), multiplexIds: \(String(describing: multiplexIds)))"}
}

extension BatchStopInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelIds = "channelIds"
        case multiplexIds = "multiplexIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelIds = channelIds {
            var channelIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .channelIds)
            for __listof__string0 in channelIds {
                try channelIdsContainer.encode(__listof__string0)
            }
        }
        if let multiplexIds = multiplexIds {
            var multiplexIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .multiplexIds)
            for __listof__string0 in multiplexIds {
                try multiplexIdsContainer.encode(__listof__string0)
            }
        }
    }
}

public struct BatchStopInputHeadersMiddleware: Middleware {
    public let id: String = "BatchStopInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchStopInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchStopOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchStopInput>
    public typealias MOutput = OperationOutput<BatchStopOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchStopOutputError>
}

public struct BatchStopInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchStopInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchStopInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchStopOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchStopInput>
    public typealias MOutput = OperationOutput<BatchStopOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchStopOutputError>
}

/// A request to stop resources
public struct BatchStopInput: Equatable {
    /// List of channel IDs
    public let channelIds: [String]?
    /// List of multiplex IDs
    public let multiplexIds: [String]?

    public init (
        channelIds: [String]? = nil,
        multiplexIds: [String]? = nil
    )
    {
        self.channelIds = channelIds
        self.multiplexIds = multiplexIds
    }
}

struct BatchStopInputBody: Equatable {
    public let channelIds: [String]?
    public let multiplexIds: [String]?
}

extension BatchStopInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channelIds = "channelIds"
        case multiplexIds = "multiplexIds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .channelIds)
        var channelIdsDecoded0:[String]? = nil
        if let channelIdsContainer = channelIdsContainer {
            channelIdsDecoded0 = [String]()
            for string0 in channelIdsContainer {
                if let string0 = string0 {
                    channelIdsDecoded0?.append(string0)
                }
            }
        }
        channelIds = channelIdsDecoded0
        let multiplexIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .multiplexIds)
        var multiplexIdsDecoded0:[String]? = nil
        if let multiplexIdsContainer = multiplexIdsContainer {
            multiplexIdsDecoded0 = [String]()
            for string0 in multiplexIdsContainer {
                if let string0 = string0 {
                    multiplexIdsDecoded0?.append(string0)
                }
            }
        }
        multiplexIds = multiplexIdsDecoded0
    }
}

extension BatchStopOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchStopOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchStopOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchStopOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchStopOutputResponse(failed: \(String(describing: failed)), successful: \(String(describing: successful)))"}
}

extension BatchStopOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchStopOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.failed = output.failed
            self.successful = output.successful
        } else {
            self.failed = nil
            self.successful = nil
        }
    }
}

/// Placeholder documentation for BatchStopResponse
public struct BatchStopOutputResponse: Equatable {
    /// List of failed operations
    public let failed: [BatchFailedResultModel]?
    /// List of successful operations
    public let successful: [BatchSuccessfulResultModel]?

    public init (
        failed: [BatchFailedResultModel]? = nil,
        successful: [BatchSuccessfulResultModel]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

struct BatchStopOutputResponseBody: Equatable {
    public let failed: [BatchFailedResultModel]?
    public let successful: [BatchSuccessfulResultModel]?
}

extension BatchStopOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case failed = "failed"
        case successful = "successful"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedContainer = try containerValues.decodeIfPresent([BatchFailedResultModel?].self, forKey: .failed)
        var failedDecoded0:[BatchFailedResultModel]? = nil
        if let failedContainer = failedContainer {
            failedDecoded0 = [BatchFailedResultModel]()
            for structure0 in failedContainer {
                if let structure0 = structure0 {
                    failedDecoded0?.append(structure0)
                }
            }
        }
        failed = failedDecoded0
        let successfulContainer = try containerValues.decodeIfPresent([BatchSuccessfulResultModel?].self, forKey: .successful)
        var successfulDecoded0:[BatchSuccessfulResultModel]? = nil
        if let successfulContainer = successfulContainer {
            successfulDecoded0 = [BatchSuccessfulResultModel]()
            for structure0 in successfulContainer {
                if let structure0 = structure0 {
                    successfulDecoded0?.append(structure0)
                }
            }
        }
        successful = successfulDecoded0
    }
}

extension BatchSuccessfulResultModel: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case id = "id"
        case state = "state"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let stateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .state)
        state = stateDecoded
    }
}

extension BatchSuccessfulResultModel: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchSuccessfulResultModel(arn: \(String(describing: arn)), id: \(String(describing: id)), state: \(String(describing: state)))"}
}

/// Details from a successful operation
public struct BatchSuccessfulResultModel: Equatable {
    /// ARN of the resource
    public let arn: String?
    /// ID of the resource
    public let id: String?
    /// Current state of the resource
    public let state: String?

    public init (
        arn: String? = nil,
        id: String? = nil,
        state: String? = nil
    )
    {
        self.arn = arn
        self.id = id
        self.state = state
    }
}

public struct BatchUpdateScheduleInputBodyMiddleware: Middleware {
    public let id: String = "BatchUpdateScheduleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchUpdateScheduleInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchUpdateScheduleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchUpdateScheduleInput>
    public typealias MOutput = OperationOutput<BatchUpdateScheduleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchUpdateScheduleOutputError>
}

extension BatchUpdateScheduleInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchUpdateScheduleInput(channelId: \(String(describing: channelId)), creates: \(String(describing: creates)), deletes: \(String(describing: deletes)))"}
}

extension BatchUpdateScheduleInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creates = "creates"
        case deletes = "deletes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creates = creates {
            try encodeContainer.encode(creates, forKey: .creates)
        }
        if let deletes = deletes {
            try encodeContainer.encode(deletes, forKey: .deletes)
        }
    }
}

public struct BatchUpdateScheduleInputHeadersMiddleware: Middleware {
    public let id: String = "BatchUpdateScheduleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchUpdateScheduleInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchUpdateScheduleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchUpdateScheduleInput>
    public typealias MOutput = OperationOutput<BatchUpdateScheduleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchUpdateScheduleOutputError>
}

public struct BatchUpdateScheduleInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchUpdateScheduleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchUpdateScheduleInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchUpdateScheduleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchUpdateScheduleInput>
    public typealias MOutput = OperationOutput<BatchUpdateScheduleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchUpdateScheduleOutputError>
}

/// List of actions to create and list of actions to delete.
public struct BatchUpdateScheduleInput: Equatable {
    /// Id of the channel whose schedule is being updated.
    public let channelId: String?
    /// Schedule actions to create in the schedule.
    public let creates: BatchScheduleActionCreateRequest?
    /// Schedule actions to delete from the schedule.
    public let deletes: BatchScheduleActionDeleteRequest?

    public init (
        channelId: String? = nil,
        creates: BatchScheduleActionCreateRequest? = nil,
        deletes: BatchScheduleActionDeleteRequest? = nil
    )
    {
        self.channelId = channelId
        self.creates = creates
        self.deletes = deletes
    }
}

struct BatchUpdateScheduleInputBody: Equatable {
    public let creates: BatchScheduleActionCreateRequest?
    public let deletes: BatchScheduleActionDeleteRequest?
}

extension BatchUpdateScheduleInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case creates = "creates"
        case deletes = "deletes"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createsDecoded = try containerValues.decodeIfPresent(BatchScheduleActionCreateRequest.self, forKey: .creates)
        creates = createsDecoded
        let deletesDecoded = try containerValues.decodeIfPresent(BatchScheduleActionDeleteRequest.self, forKey: .deletes)
        deletes = deletesDecoded
    }
}

extension BatchUpdateScheduleOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchUpdateScheduleOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchUpdateScheduleOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchUpdateScheduleOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchUpdateScheduleOutputResponse(creates: \(String(describing: creates)), deletes: \(String(describing: deletes)))"}
}

extension BatchUpdateScheduleOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchUpdateScheduleOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.creates = output.creates
            self.deletes = output.deletes
        } else {
            self.creates = nil
            self.deletes = nil
        }
    }
}

/// Placeholder documentation for BatchUpdateScheduleResponse
public struct BatchUpdateScheduleOutputResponse: Equatable {
    /// Schedule actions created in the schedule.
    public let creates: BatchScheduleActionCreateResult?
    /// Schedule actions deleted from the schedule.
    public let deletes: BatchScheduleActionDeleteResult?

    public init (
        creates: BatchScheduleActionCreateResult? = nil,
        deletes: BatchScheduleActionDeleteResult? = nil
    )
    {
        self.creates = creates
        self.deletes = deletes
    }
}

struct BatchUpdateScheduleOutputResponseBody: Equatable {
    public let creates: BatchScheduleActionCreateResult?
    public let deletes: BatchScheduleActionDeleteResult?
}

extension BatchUpdateScheduleOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case creates = "creates"
        case deletes = "deletes"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createsDecoded = try containerValues.decodeIfPresent(BatchScheduleActionCreateResult.self, forKey: .creates)
        creates = createsDecoded
        let deletesDecoded = try containerValues.decodeIfPresent(BatchScheduleActionDeleteResult.self, forKey: .deletes)
        deletes = deletesDecoded
    }
}

extension BlackoutSlate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blackoutSlateImage = "blackoutSlateImage"
        case networkEndBlackout = "networkEndBlackout"
        case networkEndBlackoutImage = "networkEndBlackoutImage"
        case networkId = "networkId"
        case state = "state"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blackoutSlateImage = blackoutSlateImage {
            try encodeContainer.encode(blackoutSlateImage, forKey: .blackoutSlateImage)
        }
        if let networkEndBlackout = networkEndBlackout {
            try encodeContainer.encode(networkEndBlackout.rawValue, forKey: .networkEndBlackout)
        }
        if let networkEndBlackoutImage = networkEndBlackoutImage {
            try encodeContainer.encode(networkEndBlackoutImage, forKey: .networkEndBlackoutImage)
        }
        if let networkId = networkId {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blackoutSlateImageDecoded = try containerValues.decodeIfPresent(InputLocation.self, forKey: .blackoutSlateImage)
        blackoutSlateImage = blackoutSlateImageDecoded
        let networkEndBlackoutDecoded = try containerValues.decodeIfPresent(BlackoutSlateNetworkEndBlackout.self, forKey: .networkEndBlackout)
        networkEndBlackout = networkEndBlackoutDecoded
        let networkEndBlackoutImageDecoded = try containerValues.decodeIfPresent(InputLocation.self, forKey: .networkEndBlackoutImage)
        networkEndBlackoutImage = networkEndBlackoutImageDecoded
        let networkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkId)
        networkId = networkIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BlackoutSlateState.self, forKey: .state)
        state = stateDecoded
    }
}

extension BlackoutSlate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BlackoutSlate(blackoutSlateImage: \(String(describing: blackoutSlateImage)), networkEndBlackout: \(String(describing: networkEndBlackout)), networkEndBlackoutImage: \(String(describing: networkEndBlackoutImage)), networkId: \(String(describing: networkId)), state: \(String(describing: state)))"}
}

/// Blackout Slate
public struct BlackoutSlate: Equatable {
    /// Blackout slate image to be used. Leave empty for solid black. Only bmp and png images are supported.
    public let blackoutSlateImage: InputLocation?
    /// Setting to enabled causes the encoder to blackout the video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted when the Network Start Segmentation Descriptor is encountered. The Network End and Network Start descriptors must contain a network ID that matches the value entered in "Network ID".
    public let networkEndBlackout: BlackoutSlateNetworkEndBlackout?
    /// Path to local file to use as Network End Blackout image. Image will be scaled to fill the entire output raster.
    public let networkEndBlackoutImage: InputLocation?
    /// Provides Network ID that matches EIDR ID format (e.g., "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").
    public let networkId: String?
    /// When set to enabled, causes video, audio and captions to be blanked when indicated by program metadata.
    public let state: BlackoutSlateState?

    public init (
        blackoutSlateImage: InputLocation? = nil,
        networkEndBlackout: BlackoutSlateNetworkEndBlackout? = nil,
        networkEndBlackoutImage: InputLocation? = nil,
        networkId: String? = nil,
        state: BlackoutSlateState? = nil
    )
    {
        self.blackoutSlateImage = blackoutSlateImage
        self.networkEndBlackout = networkEndBlackout
        self.networkEndBlackoutImage = networkEndBlackoutImage
        self.networkId = networkId
        self.state = state
    }
}

/// Blackout Slate Network End Blackout
public enum BlackoutSlateNetworkEndBlackout {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension BlackoutSlateNetworkEndBlackout : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BlackoutSlateNetworkEndBlackout] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BlackoutSlateNetworkEndBlackout(rawValue: rawValue) ?? BlackoutSlateNetworkEndBlackout.sdkUnknown(rawValue)
    }
}

/// Blackout Slate State
public enum BlackoutSlateState {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension BlackoutSlateState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BlackoutSlateState] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BlackoutSlateState(rawValue: rawValue) ?? BlackoutSlateState.sdkUnknown(rawValue)
    }
}

/// Burn In Alignment
public enum BurnInAlignment {
    case centered
    case `left`
    case smart
    case sdkUnknown(String)
}

extension BurnInAlignment : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BurnInAlignment] {
        return [
            .centered,
            .left,
            .smart,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .centered: return "CENTERED"
        case .left: return "LEFT"
        case .smart: return "SMART"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BurnInAlignment(rawValue: rawValue) ?? BurnInAlignment.sdkUnknown(rawValue)
    }
}

/// Burn In Background Color
public enum BurnInBackgroundColor {
    case black
    case `none`
    case white
    case sdkUnknown(String)
}

extension BurnInBackgroundColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BurnInBackgroundColor] {
        return [
            .black,
            .none,
            .white,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .none: return "NONE"
        case .white: return "WHITE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BurnInBackgroundColor(rawValue: rawValue) ?? BurnInBackgroundColor.sdkUnknown(rawValue)
    }
}

extension BurnInDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alignment = "alignment"
        case backgroundColor = "backgroundColor"
        case backgroundOpacity = "backgroundOpacity"
        case font = "font"
        case fontColor = "fontColor"
        case fontOpacity = "fontOpacity"
        case fontResolution = "fontResolution"
        case fontSize = "fontSize"
        case outlineColor = "outlineColor"
        case outlineSize = "outlineSize"
        case shadowColor = "shadowColor"
        case shadowOpacity = "shadowOpacity"
        case shadowXOffset = "shadowXOffset"
        case shadowYOffset = "shadowYOffset"
        case teletextGridControl = "teletextGridControl"
        case xPosition = "xPosition"
        case yPosition = "yPosition"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alignment = alignment {
            try encodeContainer.encode(alignment.rawValue, forKey: .alignment)
        }
        if let backgroundColor = backgroundColor {
            try encodeContainer.encode(backgroundColor.rawValue, forKey: .backgroundColor)
        }
        if backgroundOpacity != 0 {
            try encodeContainer.encode(backgroundOpacity, forKey: .backgroundOpacity)
        }
        if let font = font {
            try encodeContainer.encode(font, forKey: .font)
        }
        if let fontColor = fontColor {
            try encodeContainer.encode(fontColor.rawValue, forKey: .fontColor)
        }
        if fontOpacity != 0 {
            try encodeContainer.encode(fontOpacity, forKey: .fontOpacity)
        }
        if fontResolution != 0 {
            try encodeContainer.encode(fontResolution, forKey: .fontResolution)
        }
        if let fontSize = fontSize {
            try encodeContainer.encode(fontSize, forKey: .fontSize)
        }
        if let outlineColor = outlineColor {
            try encodeContainer.encode(outlineColor.rawValue, forKey: .outlineColor)
        }
        if outlineSize != 0 {
            try encodeContainer.encode(outlineSize, forKey: .outlineSize)
        }
        if let shadowColor = shadowColor {
            try encodeContainer.encode(shadowColor.rawValue, forKey: .shadowColor)
        }
        if shadowOpacity != 0 {
            try encodeContainer.encode(shadowOpacity, forKey: .shadowOpacity)
        }
        if shadowXOffset != 0 {
            try encodeContainer.encode(shadowXOffset, forKey: .shadowXOffset)
        }
        if shadowYOffset != 0 {
            try encodeContainer.encode(shadowYOffset, forKey: .shadowYOffset)
        }
        if let teletextGridControl = teletextGridControl {
            try encodeContainer.encode(teletextGridControl.rawValue, forKey: .teletextGridControl)
        }
        if xPosition != 0 {
            try encodeContainer.encode(xPosition, forKey: .xPosition)
        }
        if yPosition != 0 {
            try encodeContainer.encode(yPosition, forKey: .yPosition)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alignmentDecoded = try containerValues.decodeIfPresent(BurnInAlignment.self, forKey: .alignment)
        alignment = alignmentDecoded
        let backgroundColorDecoded = try containerValues.decodeIfPresent(BurnInBackgroundColor.self, forKey: .backgroundColor)
        backgroundColor = backgroundColorDecoded
        let backgroundOpacityDecoded = try containerValues.decode(Int.self, forKey: .backgroundOpacity)
        backgroundOpacity = backgroundOpacityDecoded
        let fontDecoded = try containerValues.decodeIfPresent(InputLocation.self, forKey: .font)
        font = fontDecoded
        let fontColorDecoded = try containerValues.decodeIfPresent(BurnInFontColor.self, forKey: .fontColor)
        fontColor = fontColorDecoded
        let fontOpacityDecoded = try containerValues.decode(Int.self, forKey: .fontOpacity)
        fontOpacity = fontOpacityDecoded
        let fontResolutionDecoded = try containerValues.decode(Int.self, forKey: .fontResolution)
        fontResolution = fontResolutionDecoded
        let fontSizeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fontSize)
        fontSize = fontSizeDecoded
        let outlineColorDecoded = try containerValues.decodeIfPresent(BurnInOutlineColor.self, forKey: .outlineColor)
        outlineColor = outlineColorDecoded
        let outlineSizeDecoded = try containerValues.decode(Int.self, forKey: .outlineSize)
        outlineSize = outlineSizeDecoded
        let shadowColorDecoded = try containerValues.decodeIfPresent(BurnInShadowColor.self, forKey: .shadowColor)
        shadowColor = shadowColorDecoded
        let shadowOpacityDecoded = try containerValues.decode(Int.self, forKey: .shadowOpacity)
        shadowOpacity = shadowOpacityDecoded
        let shadowXOffsetDecoded = try containerValues.decode(Int.self, forKey: .shadowXOffset)
        shadowXOffset = shadowXOffsetDecoded
        let shadowYOffsetDecoded = try containerValues.decode(Int.self, forKey: .shadowYOffset)
        shadowYOffset = shadowYOffsetDecoded
        let teletextGridControlDecoded = try containerValues.decodeIfPresent(BurnInTeletextGridControl.self, forKey: .teletextGridControl)
        teletextGridControl = teletextGridControlDecoded
        let xPositionDecoded = try containerValues.decode(Int.self, forKey: .xPosition)
        xPosition = xPositionDecoded
        let yPositionDecoded = try containerValues.decode(Int.self, forKey: .yPosition)
        yPosition = yPositionDecoded
    }
}

extension BurnInDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BurnInDestinationSettings(alignment: \(String(describing: alignment)), backgroundColor: \(String(describing: backgroundColor)), backgroundOpacity: \(String(describing: backgroundOpacity)), font: \(String(describing: font)), fontColor: \(String(describing: fontColor)), fontOpacity: \(String(describing: fontOpacity)), fontResolution: \(String(describing: fontResolution)), fontSize: \(String(describing: fontSize)), outlineColor: \(String(describing: outlineColor)), outlineSize: \(String(describing: outlineSize)), shadowColor: \(String(describing: shadowColor)), shadowOpacity: \(String(describing: shadowOpacity)), shadowXOffset: \(String(describing: shadowXOffset)), shadowYOffset: \(String(describing: shadowYOffset)), teletextGridControl: \(String(describing: teletextGridControl)), xPosition: \(String(describing: xPosition)), yPosition: \(String(describing: yPosition)))"}
}

/// Burn In Destination Settings
public struct BurnInDestinationSettings: Equatable {
    /// If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles.  All burn-in and DVB-Sub font settings must match.
    public let alignment: BurnInAlignment?
    /// Specifies the color of the rectangle behind the captions.  All burn-in and DVB-Sub font settings must match.
    public let backgroundColor: BurnInBackgroundColor?
    /// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent).  All burn-in and DVB-Sub font settings must match.
    public let backgroundOpacity: Int
    /// External font file used for caption burn-in. File extension must be 'ttf' or 'tte'.  Although the user can select output fonts for many different types of input captions,  embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts.  All burn-in and DVB-Sub font settings must match.
    public let font: InputLocation?
    /// Specifies the color of the burned-in captions.  This option is not valid for source captions that are STL, 608/embedded or teletext.  These source settings are already pre-defined by the caption stream.  All burn-in and DVB-Sub font settings must match.
    public let fontColor: BurnInFontColor?
    /// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent.  All burn-in and DVB-Sub font settings must match.
    public let fontOpacity: Int
    /// Font resolution in DPI (dots per inch); default is 96 dpi.  All burn-in and DVB-Sub font settings must match.
    public let fontResolution: Int
    /// When set to 'auto' fontSize will scale depending on the size of the output.  Giving a positive integer will specify the exact font size in points.  All burn-in and DVB-Sub font settings must match.
    public let fontSize: String?
    /// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let outlineColor: BurnInOutlineColor?
    /// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let outlineSize: Int
    /// Specifies the color of the shadow cast by the captions.  All burn-in and DVB-Sub font settings must match.
    public let shadowColor: BurnInShadowColor?
    /// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent).  All burn-in and DVB-Sub font settings must match.
    public let shadowOpacity: Int
    /// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left.  All burn-in and DVB-Sub font settings must match.
    public let shadowXOffset: Int
    /// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text.  All burn-in and DVB-Sub font settings must match.
    public let shadowYOffset: Int
    /// Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
    public let teletextGridControl: BurnInTeletextGridControl?
    /// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter.  All burn-in and DVB-Sub font settings must match.
    public let xPosition: Int
    /// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output.  All burn-in and DVB-Sub font settings must match.
    public let yPosition: Int

    public init (
        alignment: BurnInAlignment? = nil,
        backgroundColor: BurnInBackgroundColor? = nil,
        backgroundOpacity: Int = 0,
        font: InputLocation? = nil,
        fontColor: BurnInFontColor? = nil,
        fontOpacity: Int = 0,
        fontResolution: Int = 0,
        fontSize: String? = nil,
        outlineColor: BurnInOutlineColor? = nil,
        outlineSize: Int = 0,
        shadowColor: BurnInShadowColor? = nil,
        shadowOpacity: Int = 0,
        shadowXOffset: Int = 0,
        shadowYOffset: Int = 0,
        teletextGridControl: BurnInTeletextGridControl? = nil,
        xPosition: Int = 0,
        yPosition: Int = 0
    )
    {
        self.alignment = alignment
        self.backgroundColor = backgroundColor
        self.backgroundOpacity = backgroundOpacity
        self.font = font
        self.fontColor = fontColor
        self.fontOpacity = fontOpacity
        self.fontResolution = fontResolution
        self.fontSize = fontSize
        self.outlineColor = outlineColor
        self.outlineSize = outlineSize
        self.shadowColor = shadowColor
        self.shadowOpacity = shadowOpacity
        self.shadowXOffset = shadowXOffset
        self.shadowYOffset = shadowYOffset
        self.teletextGridControl = teletextGridControl
        self.xPosition = xPosition
        self.yPosition = yPosition
    }
}

/// Burn In Font Color
public enum BurnInFontColor {
    case black
    case blue
    case green
    case red
    case white
    case yellow
    case sdkUnknown(String)
}

extension BurnInFontColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BurnInFontColor] {
        return [
            .black,
            .blue,
            .green,
            .red,
            .white,
            .yellow,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .blue: return "BLUE"
        case .green: return "GREEN"
        case .red: return "RED"
        case .white: return "WHITE"
        case .yellow: return "YELLOW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BurnInFontColor(rawValue: rawValue) ?? BurnInFontColor.sdkUnknown(rawValue)
    }
}

/// Burn In Outline Color
public enum BurnInOutlineColor {
    case black
    case blue
    case green
    case red
    case white
    case yellow
    case sdkUnknown(String)
}

extension BurnInOutlineColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BurnInOutlineColor] {
        return [
            .black,
            .blue,
            .green,
            .red,
            .white,
            .yellow,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .blue: return "BLUE"
        case .green: return "GREEN"
        case .red: return "RED"
        case .white: return "WHITE"
        case .yellow: return "YELLOW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BurnInOutlineColor(rawValue: rawValue) ?? BurnInOutlineColor.sdkUnknown(rawValue)
    }
}

/// Burn In Shadow Color
public enum BurnInShadowColor {
    case black
    case `none`
    case white
    case sdkUnknown(String)
}

extension BurnInShadowColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BurnInShadowColor] {
        return [
            .black,
            .none,
            .white,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .none: return "NONE"
        case .white: return "WHITE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BurnInShadowColor(rawValue: rawValue) ?? BurnInShadowColor.sdkUnknown(rawValue)
    }
}

/// Burn In Teletext Grid Control
public enum BurnInTeletextGridControl {
    case fixed
    case scaled
    case sdkUnknown(String)
}

extension BurnInTeletextGridControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BurnInTeletextGridControl] {
        return [
            .fixed,
            .scaled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .fixed: return "FIXED"
        case .scaled: return "SCALED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BurnInTeletextGridControl(rawValue: rawValue) ?? BurnInTeletextGridControl.sdkUnknown(rawValue)
    }
}

extension CancelInputDeviceTransferInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelInputDeviceTransferInput(inputDeviceId: \(String(describing: inputDeviceId)))"}
}

extension CancelInputDeviceTransferInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct CancelInputDeviceTransferInputHeadersMiddleware: Middleware {
    public let id: String = "CancelInputDeviceTransferInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelInputDeviceTransferInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelInputDeviceTransferOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelInputDeviceTransferInput>
    public typealias MOutput = OperationOutput<CancelInputDeviceTransferOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelInputDeviceTransferOutputError>
}

public struct CancelInputDeviceTransferInputQueryItemMiddleware: Middleware {
    public let id: String = "CancelInputDeviceTransferInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelInputDeviceTransferInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelInputDeviceTransferOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelInputDeviceTransferInput>
    public typealias MOutput = OperationOutput<CancelInputDeviceTransferOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelInputDeviceTransferOutputError>
}

/// Placeholder documentation for CancelInputDeviceTransferRequest
public struct CancelInputDeviceTransferInput: Equatable {
    /// The unique ID of the input device to cancel. For example, hd-123456789abcdef.
    public let inputDeviceId: String?

    public init (
        inputDeviceId: String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

struct CancelInputDeviceTransferInputBody: Equatable {
}

extension CancelInputDeviceTransferInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension CancelInputDeviceTransferOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelInputDeviceTransferOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelInputDeviceTransferOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelInputDeviceTransferOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelInputDeviceTransferOutputResponse()"}
}

extension CancelInputDeviceTransferOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for CancelInputDeviceTransferResponse
public struct CancelInputDeviceTransferOutputResponse: Equatable {

    public init() {}
}

struct CancelInputDeviceTransferOutputResponseBody: Equatable {
}

extension CancelInputDeviceTransferOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension CaptionDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case captionSelectorName = "captionSelectorName"
        case destinationSettings = "destinationSettings"
        case languageCode = "languageCode"
        case languageDescription = "languageDescription"
        case name = "name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let captionSelectorName = captionSelectorName {
            try encodeContainer.encode(captionSelectorName, forKey: .captionSelectorName)
        }
        if let destinationSettings = destinationSettings {
            try encodeContainer.encode(destinationSettings, forKey: .destinationSettings)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let languageDescription = languageDescription {
            try encodeContainer.encode(languageDescription, forKey: .languageDescription)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let captionSelectorNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .captionSelectorName)
        captionSelectorName = captionSelectorNameDecoded
        let destinationSettingsDecoded = try containerValues.decodeIfPresent(CaptionDestinationSettings.self, forKey: .destinationSettings)
        destinationSettings = destinationSettingsDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .languageDescription)
        languageDescription = languageDescriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension CaptionDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CaptionDescription(captionSelectorName: \(String(describing: captionSelectorName)), destinationSettings: \(String(describing: destinationSettings)), languageCode: \(String(describing: languageCode)), languageDescription: \(String(describing: languageDescription)), name: \(String(describing: name)))"}
}

/// Caption Description
public struct CaptionDescription: Equatable {
    /// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
    public let captionSelectorName: String?
    /// Additional settings for captions destination that depend on the destination type.
    public let destinationSettings: CaptionDestinationSettings?
    /// ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
    public let languageCode: String?
    /// Human readable information to indicate captions available for players (eg. English, or Spanish).
    public let languageDescription: String?
    /// Name of the caption description.  Used to associate a caption description with an output.  Names must be unique within an event.
    public let name: String?

    public init (
        captionSelectorName: String? = nil,
        destinationSettings: CaptionDestinationSettings? = nil,
        languageCode: String? = nil,
        languageDescription: String? = nil,
        name: String? = nil
    )
    {
        self.captionSelectorName = captionSelectorName
        self.destinationSettings = destinationSettings
        self.languageCode = languageCode
        self.languageDescription = languageDescription
        self.name = name
    }
}

extension CaptionDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aribDestinationSettings = "aribDestinationSettings"
        case burnInDestinationSettings = "burnInDestinationSettings"
        case dvbSubDestinationSettings = "dvbSubDestinationSettings"
        case ebuTtDDestinationSettings = "ebuTtDDestinationSettings"
        case embeddedDestinationSettings = "embeddedDestinationSettings"
        case embeddedPlusScte20DestinationSettings = "embeddedPlusScte20DestinationSettings"
        case rtmpCaptionInfoDestinationSettings = "rtmpCaptionInfoDestinationSettings"
        case scte20PlusEmbeddedDestinationSettings = "scte20PlusEmbeddedDestinationSettings"
        case scte27DestinationSettings = "scte27DestinationSettings"
        case smpteTtDestinationSettings = "smpteTtDestinationSettings"
        case teletextDestinationSettings = "teletextDestinationSettings"
        case ttmlDestinationSettings = "ttmlDestinationSettings"
        case webvttDestinationSettings = "webvttDestinationSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aribDestinationSettings = aribDestinationSettings {
            try encodeContainer.encode(aribDestinationSettings, forKey: .aribDestinationSettings)
        }
        if let burnInDestinationSettings = burnInDestinationSettings {
            try encodeContainer.encode(burnInDestinationSettings, forKey: .burnInDestinationSettings)
        }
        if let dvbSubDestinationSettings = dvbSubDestinationSettings {
            try encodeContainer.encode(dvbSubDestinationSettings, forKey: .dvbSubDestinationSettings)
        }
        if let ebuTtDDestinationSettings = ebuTtDDestinationSettings {
            try encodeContainer.encode(ebuTtDDestinationSettings, forKey: .ebuTtDDestinationSettings)
        }
        if let embeddedDestinationSettings = embeddedDestinationSettings {
            try encodeContainer.encode(embeddedDestinationSettings, forKey: .embeddedDestinationSettings)
        }
        if let embeddedPlusScte20DestinationSettings = embeddedPlusScte20DestinationSettings {
            try encodeContainer.encode(embeddedPlusScte20DestinationSettings, forKey: .embeddedPlusScte20DestinationSettings)
        }
        if let rtmpCaptionInfoDestinationSettings = rtmpCaptionInfoDestinationSettings {
            try encodeContainer.encode(rtmpCaptionInfoDestinationSettings, forKey: .rtmpCaptionInfoDestinationSettings)
        }
        if let scte20PlusEmbeddedDestinationSettings = scte20PlusEmbeddedDestinationSettings {
            try encodeContainer.encode(scte20PlusEmbeddedDestinationSettings, forKey: .scte20PlusEmbeddedDestinationSettings)
        }
        if let scte27DestinationSettings = scte27DestinationSettings {
            try encodeContainer.encode(scte27DestinationSettings, forKey: .scte27DestinationSettings)
        }
        if let smpteTtDestinationSettings = smpteTtDestinationSettings {
            try encodeContainer.encode(smpteTtDestinationSettings, forKey: .smpteTtDestinationSettings)
        }
        if let teletextDestinationSettings = teletextDestinationSettings {
            try encodeContainer.encode(teletextDestinationSettings, forKey: .teletextDestinationSettings)
        }
        if let ttmlDestinationSettings = ttmlDestinationSettings {
            try encodeContainer.encode(ttmlDestinationSettings, forKey: .ttmlDestinationSettings)
        }
        if let webvttDestinationSettings = webvttDestinationSettings {
            try encodeContainer.encode(webvttDestinationSettings, forKey: .webvttDestinationSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aribDestinationSettingsDecoded = try containerValues.decodeIfPresent(AribDestinationSettings.self, forKey: .aribDestinationSettings)
        aribDestinationSettings = aribDestinationSettingsDecoded
        let burnInDestinationSettingsDecoded = try containerValues.decodeIfPresent(BurnInDestinationSettings.self, forKey: .burnInDestinationSettings)
        burnInDestinationSettings = burnInDestinationSettingsDecoded
        let dvbSubDestinationSettingsDecoded = try containerValues.decodeIfPresent(DvbSubDestinationSettings.self, forKey: .dvbSubDestinationSettings)
        dvbSubDestinationSettings = dvbSubDestinationSettingsDecoded
        let ebuTtDDestinationSettingsDecoded = try containerValues.decodeIfPresent(EbuTtDDestinationSettings.self, forKey: .ebuTtDDestinationSettings)
        ebuTtDDestinationSettings = ebuTtDDestinationSettingsDecoded
        let embeddedDestinationSettingsDecoded = try containerValues.decodeIfPresent(EmbeddedDestinationSettings.self, forKey: .embeddedDestinationSettings)
        embeddedDestinationSettings = embeddedDestinationSettingsDecoded
        let embeddedPlusScte20DestinationSettingsDecoded = try containerValues.decodeIfPresent(EmbeddedPlusScte20DestinationSettings.self, forKey: .embeddedPlusScte20DestinationSettings)
        embeddedPlusScte20DestinationSettings = embeddedPlusScte20DestinationSettingsDecoded
        let rtmpCaptionInfoDestinationSettingsDecoded = try containerValues.decodeIfPresent(RtmpCaptionInfoDestinationSettings.self, forKey: .rtmpCaptionInfoDestinationSettings)
        rtmpCaptionInfoDestinationSettings = rtmpCaptionInfoDestinationSettingsDecoded
        let scte20PlusEmbeddedDestinationSettingsDecoded = try containerValues.decodeIfPresent(Scte20PlusEmbeddedDestinationSettings.self, forKey: .scte20PlusEmbeddedDestinationSettings)
        scte20PlusEmbeddedDestinationSettings = scte20PlusEmbeddedDestinationSettingsDecoded
        let scte27DestinationSettingsDecoded = try containerValues.decodeIfPresent(Scte27DestinationSettings.self, forKey: .scte27DestinationSettings)
        scte27DestinationSettings = scte27DestinationSettingsDecoded
        let smpteTtDestinationSettingsDecoded = try containerValues.decodeIfPresent(SmpteTtDestinationSettings.self, forKey: .smpteTtDestinationSettings)
        smpteTtDestinationSettings = smpteTtDestinationSettingsDecoded
        let teletextDestinationSettingsDecoded = try containerValues.decodeIfPresent(TeletextDestinationSettings.self, forKey: .teletextDestinationSettings)
        teletextDestinationSettings = teletextDestinationSettingsDecoded
        let ttmlDestinationSettingsDecoded = try containerValues.decodeIfPresent(TtmlDestinationSettings.self, forKey: .ttmlDestinationSettings)
        ttmlDestinationSettings = ttmlDestinationSettingsDecoded
        let webvttDestinationSettingsDecoded = try containerValues.decodeIfPresent(WebvttDestinationSettings.self, forKey: .webvttDestinationSettings)
        webvttDestinationSettings = webvttDestinationSettingsDecoded
    }
}

extension CaptionDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CaptionDestinationSettings(aribDestinationSettings: \(String(describing: aribDestinationSettings)), burnInDestinationSettings: \(String(describing: burnInDestinationSettings)), dvbSubDestinationSettings: \(String(describing: dvbSubDestinationSettings)), ebuTtDDestinationSettings: \(String(describing: ebuTtDDestinationSettings)), embeddedDestinationSettings: \(String(describing: embeddedDestinationSettings)), embeddedPlusScte20DestinationSettings: \(String(describing: embeddedPlusScte20DestinationSettings)), rtmpCaptionInfoDestinationSettings: \(String(describing: rtmpCaptionInfoDestinationSettings)), scte20PlusEmbeddedDestinationSettings: \(String(describing: scte20PlusEmbeddedDestinationSettings)), scte27DestinationSettings: \(String(describing: scte27DestinationSettings)), smpteTtDestinationSettings: \(String(describing: smpteTtDestinationSettings)), teletextDestinationSettings: \(String(describing: teletextDestinationSettings)), ttmlDestinationSettings: \(String(describing: ttmlDestinationSettings)), webvttDestinationSettings: \(String(describing: webvttDestinationSettings)))"}
}

/// Caption Destination Settings
public struct CaptionDestinationSettings: Equatable {
    /// Arib Destination Settings
    public let aribDestinationSettings: AribDestinationSettings?
    /// Burn In Destination Settings
    public let burnInDestinationSettings: BurnInDestinationSettings?
    /// Dvb Sub Destination Settings
    public let dvbSubDestinationSettings: DvbSubDestinationSettings?
    /// Ebu Tt DDestination Settings
    public let ebuTtDDestinationSettings: EbuTtDDestinationSettings?
    /// Embedded Destination Settings
    public let embeddedDestinationSettings: EmbeddedDestinationSettings?
    /// Embedded Plus Scte20 Destination Settings
    public let embeddedPlusScte20DestinationSettings: EmbeddedPlusScte20DestinationSettings?
    /// Rtmp Caption Info Destination Settings
    public let rtmpCaptionInfoDestinationSettings: RtmpCaptionInfoDestinationSettings?
    /// Scte20 Plus Embedded Destination Settings
    public let scte20PlusEmbeddedDestinationSettings: Scte20PlusEmbeddedDestinationSettings?
    /// Scte27 Destination Settings
    public let scte27DestinationSettings: Scte27DestinationSettings?
    /// Smpte Tt Destination Settings
    public let smpteTtDestinationSettings: SmpteTtDestinationSettings?
    /// Teletext Destination Settings
    public let teletextDestinationSettings: TeletextDestinationSettings?
    /// Ttml Destination Settings
    public let ttmlDestinationSettings: TtmlDestinationSettings?
    /// Webvtt Destination Settings
    public let webvttDestinationSettings: WebvttDestinationSettings?

    public init (
        aribDestinationSettings: AribDestinationSettings? = nil,
        burnInDestinationSettings: BurnInDestinationSettings? = nil,
        dvbSubDestinationSettings: DvbSubDestinationSettings? = nil,
        ebuTtDDestinationSettings: EbuTtDDestinationSettings? = nil,
        embeddedDestinationSettings: EmbeddedDestinationSettings? = nil,
        embeddedPlusScte20DestinationSettings: EmbeddedPlusScte20DestinationSettings? = nil,
        rtmpCaptionInfoDestinationSettings: RtmpCaptionInfoDestinationSettings? = nil,
        scte20PlusEmbeddedDestinationSettings: Scte20PlusEmbeddedDestinationSettings? = nil,
        scte27DestinationSettings: Scte27DestinationSettings? = nil,
        smpteTtDestinationSettings: SmpteTtDestinationSettings? = nil,
        teletextDestinationSettings: TeletextDestinationSettings? = nil,
        ttmlDestinationSettings: TtmlDestinationSettings? = nil,
        webvttDestinationSettings: WebvttDestinationSettings? = nil
    )
    {
        self.aribDestinationSettings = aribDestinationSettings
        self.burnInDestinationSettings = burnInDestinationSettings
        self.dvbSubDestinationSettings = dvbSubDestinationSettings
        self.ebuTtDDestinationSettings = ebuTtDDestinationSettings
        self.embeddedDestinationSettings = embeddedDestinationSettings
        self.embeddedPlusScte20DestinationSettings = embeddedPlusScte20DestinationSettings
        self.rtmpCaptionInfoDestinationSettings = rtmpCaptionInfoDestinationSettings
        self.scte20PlusEmbeddedDestinationSettings = scte20PlusEmbeddedDestinationSettings
        self.scte27DestinationSettings = scte27DestinationSettings
        self.smpteTtDestinationSettings = smpteTtDestinationSettings
        self.teletextDestinationSettings = teletextDestinationSettings
        self.ttmlDestinationSettings = ttmlDestinationSettings
        self.webvttDestinationSettings = webvttDestinationSettings
    }
}

extension CaptionLanguageMapping: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case captionChannel = "captionChannel"
        case languageCode = "languageCode"
        case languageDescription = "languageDescription"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if captionChannel != 0 {
            try encodeContainer.encode(captionChannel, forKey: .captionChannel)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let languageDescription = languageDescription {
            try encodeContainer.encode(languageDescription, forKey: .languageDescription)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let captionChannelDecoded = try containerValues.decode(Int.self, forKey: .captionChannel)
        captionChannel = captionChannelDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .languageDescription)
        languageDescription = languageDescriptionDecoded
    }
}

extension CaptionLanguageMapping: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CaptionLanguageMapping(captionChannel: \(String(describing: captionChannel)), languageCode: \(String(describing: languageCode)), languageDescription: \(String(describing: languageDescription)))"}
}

/// Maps a caption channel to an ISO 693-2 language code (http://www.loc.gov/standards/iso639-2), with an optional description.
public struct CaptionLanguageMapping: Equatable {
    /// The closed caption channel being described by this CaptionLanguageMapping.  Each channel mapping must have a unique channel number (maximum of 4)
    public let captionChannel: Int
    /// Three character ISO 639-2 language code (see http://www.loc.gov/standards/iso639-2)
    public let languageCode: String?
    /// Textual description of language
    public let languageDescription: String?

    public init (
        captionChannel: Int = 0,
        languageCode: String? = nil,
        languageDescription: String? = nil
    )
    {
        self.captionChannel = captionChannel
        self.languageCode = languageCode
        self.languageDescription = languageDescription
    }
}

extension CaptionRectangle: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case height = "height"
        case leftOffset = "leftOffset"
        case topOffset = "topOffset"
        case width = "width"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if height != 0.0 {
            try encodeContainer.encode(height, forKey: .height)
        }
        if leftOffset != 0.0 {
            try encodeContainer.encode(leftOffset, forKey: .leftOffset)
        }
        if topOffset != 0.0 {
            try encodeContainer.encode(topOffset, forKey: .topOffset)
        }
        if width != 0.0 {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let heightDecoded = try containerValues.decode(Double.self, forKey: .height)
        height = heightDecoded
        let leftOffsetDecoded = try containerValues.decode(Double.self, forKey: .leftOffset)
        leftOffset = leftOffsetDecoded
        let topOffsetDecoded = try containerValues.decode(Double.self, forKey: .topOffset)
        topOffset = topOffsetDecoded
        let widthDecoded = try containerValues.decode(Double.self, forKey: .width)
        width = widthDecoded
    }
}

extension CaptionRectangle: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CaptionRectangle(height: \(String(describing: height)), leftOffset: \(String(describing: leftOffset)), topOffset: \(String(describing: topOffset)), width: \(String(describing: width)))"}
}

/// Caption Rectangle
public struct CaptionRectangle: Equatable {
    /// See the description in leftOffset.
    /// For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, \"80\" means the rectangle height is 80% of the underlying frame height. The topOffset and rectangleHeight must add up to 100% or less.
    /// This field corresponds to tts:extent - Y in the TTML standard.
    public let height: Double
    /// Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don't have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages.
    /// If you specify a value for one of these fields, you must specify a value for all of them.
    /// For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame.
    /// This field corresponds to tts:origin - X in the TTML standard.
    public let leftOffset: Double
    /// See the description in leftOffset.
    /// For topOffset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame.
    /// This field corresponds to tts:origin - Y in the TTML standard.
    public let topOffset: Double
    /// See the description in leftOffset.
    /// For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, \"80\" means the rectangle width is 80% of the underlying frame width. The leftOffset and rectangleWidth must add up to 100% or less.
    /// This field corresponds to tts:extent - X in the TTML standard.
    public let width: Double

    public init (
        height: Double = 0.0,
        leftOffset: Double = 0.0,
        topOffset: Double = 0.0,
        width: Double = 0.0
    )
    {
        self.height = height
        self.leftOffset = leftOffset
        self.topOffset = topOffset
        self.width = width
    }
}

extension CaptionSelector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case languageCode = "languageCode"
        case name = "name"
        case selectorSettings = "selectorSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let selectorSettings = selectorSettings {
            try encodeContainer.encode(selectorSettings, forKey: .selectorSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let selectorSettingsDecoded = try containerValues.decodeIfPresent(CaptionSelectorSettings.self, forKey: .selectorSettings)
        selectorSettings = selectorSettingsDecoded
    }
}

extension CaptionSelector: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CaptionSelector(languageCode: \(String(describing: languageCode)), name: \(String(describing: name)), selectorSettings: \(String(describing: selectorSettings)))"}
}

/// Output groups for this Live Event. Output groups contain information about where streams should be distributed.
public struct CaptionSelector: Equatable {
    /// When specified this field indicates the three letter language code of the caption track to extract from the source.
    public let languageCode: String?
    /// Name identifier for a caption selector.  This name is used to associate this caption selector with one or more caption descriptions.  Names must be unique within an event.
    public let name: String?
    /// Caption selector settings.
    public let selectorSettings: CaptionSelectorSettings?

    public init (
        languageCode: String? = nil,
        name: String? = nil,
        selectorSettings: CaptionSelectorSettings? = nil
    )
    {
        self.languageCode = languageCode
        self.name = name
        self.selectorSettings = selectorSettings
    }
}

extension CaptionSelectorSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ancillarySourceSettings = "ancillarySourceSettings"
        case aribSourceSettings = "aribSourceSettings"
        case dvbSubSourceSettings = "dvbSubSourceSettings"
        case embeddedSourceSettings = "embeddedSourceSettings"
        case scte20SourceSettings = "scte20SourceSettings"
        case scte27SourceSettings = "scte27SourceSettings"
        case teletextSourceSettings = "teletextSourceSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ancillarySourceSettings = ancillarySourceSettings {
            try encodeContainer.encode(ancillarySourceSettings, forKey: .ancillarySourceSettings)
        }
        if let aribSourceSettings = aribSourceSettings {
            try encodeContainer.encode(aribSourceSettings, forKey: .aribSourceSettings)
        }
        if let dvbSubSourceSettings = dvbSubSourceSettings {
            try encodeContainer.encode(dvbSubSourceSettings, forKey: .dvbSubSourceSettings)
        }
        if let embeddedSourceSettings = embeddedSourceSettings {
            try encodeContainer.encode(embeddedSourceSettings, forKey: .embeddedSourceSettings)
        }
        if let scte20SourceSettings = scte20SourceSettings {
            try encodeContainer.encode(scte20SourceSettings, forKey: .scte20SourceSettings)
        }
        if let scte27SourceSettings = scte27SourceSettings {
            try encodeContainer.encode(scte27SourceSettings, forKey: .scte27SourceSettings)
        }
        if let teletextSourceSettings = teletextSourceSettings {
            try encodeContainer.encode(teletextSourceSettings, forKey: .teletextSourceSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ancillarySourceSettingsDecoded = try containerValues.decodeIfPresent(AncillarySourceSettings.self, forKey: .ancillarySourceSettings)
        ancillarySourceSettings = ancillarySourceSettingsDecoded
        let aribSourceSettingsDecoded = try containerValues.decodeIfPresent(AribSourceSettings.self, forKey: .aribSourceSettings)
        aribSourceSettings = aribSourceSettingsDecoded
        let dvbSubSourceSettingsDecoded = try containerValues.decodeIfPresent(DvbSubSourceSettings.self, forKey: .dvbSubSourceSettings)
        dvbSubSourceSettings = dvbSubSourceSettingsDecoded
        let embeddedSourceSettingsDecoded = try containerValues.decodeIfPresent(EmbeddedSourceSettings.self, forKey: .embeddedSourceSettings)
        embeddedSourceSettings = embeddedSourceSettingsDecoded
        let scte20SourceSettingsDecoded = try containerValues.decodeIfPresent(Scte20SourceSettings.self, forKey: .scte20SourceSettings)
        scte20SourceSettings = scte20SourceSettingsDecoded
        let scte27SourceSettingsDecoded = try containerValues.decodeIfPresent(Scte27SourceSettings.self, forKey: .scte27SourceSettings)
        scte27SourceSettings = scte27SourceSettingsDecoded
        let teletextSourceSettingsDecoded = try containerValues.decodeIfPresent(TeletextSourceSettings.self, forKey: .teletextSourceSettings)
        teletextSourceSettings = teletextSourceSettingsDecoded
    }
}

extension CaptionSelectorSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CaptionSelectorSettings(ancillarySourceSettings: \(String(describing: ancillarySourceSettings)), aribSourceSettings: \(String(describing: aribSourceSettings)), dvbSubSourceSettings: \(String(describing: dvbSubSourceSettings)), embeddedSourceSettings: \(String(describing: embeddedSourceSettings)), scte20SourceSettings: \(String(describing: scte20SourceSettings)), scte27SourceSettings: \(String(describing: scte27SourceSettings)), teletextSourceSettings: \(String(describing: teletextSourceSettings)))"}
}

/// Caption Selector Settings
public struct CaptionSelectorSettings: Equatable {
    /// Ancillary Source Settings
    public let ancillarySourceSettings: AncillarySourceSettings?
    /// Arib Source Settings
    public let aribSourceSettings: AribSourceSettings?
    /// Dvb Sub Source Settings
    public let dvbSubSourceSettings: DvbSubSourceSettings?
    /// Embedded Source Settings
    public let embeddedSourceSettings: EmbeddedSourceSettings?
    /// Scte20 Source Settings
    public let scte20SourceSettings: Scte20SourceSettings?
    /// Scte27 Source Settings
    public let scte27SourceSettings: Scte27SourceSettings?
    /// Teletext Source Settings
    public let teletextSourceSettings: TeletextSourceSettings?

    public init (
        ancillarySourceSettings: AncillarySourceSettings? = nil,
        aribSourceSettings: AribSourceSettings? = nil,
        dvbSubSourceSettings: DvbSubSourceSettings? = nil,
        embeddedSourceSettings: EmbeddedSourceSettings? = nil,
        scte20SourceSettings: Scte20SourceSettings? = nil,
        scte27SourceSettings: Scte27SourceSettings? = nil,
        teletextSourceSettings: TeletextSourceSettings? = nil
    )
    {
        self.ancillarySourceSettings = ancillarySourceSettings
        self.aribSourceSettings = aribSourceSettings
        self.dvbSubSourceSettings = dvbSubSourceSettings
        self.embeddedSourceSettings = embeddedSourceSettings
        self.scte20SourceSettings = scte20SourceSettings
        self.scte27SourceSettings = scte27SourceSettings
        self.teletextSourceSettings = teletextSourceSettings
    }
}

/// Maximum CDI input resolution; SD is 480i and 576i up to 30 frames-per-second (fps), HD is 720p up to 60 fps / 1080i up to 30 fps, FHD is 1080p up to 60 fps, UHD is 2160p up to 60 fps
public enum CdiInputResolution {
    case fhd
    case hd
    case sd
    case uhd
    case sdkUnknown(String)
}

extension CdiInputResolution : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CdiInputResolution] {
        return [
            .fhd,
            .hd,
            .sd,
            .uhd,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .fhd: return "FHD"
        case .hd: return "HD"
        case .sd: return "SD"
        case .uhd: return "UHD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CdiInputResolution(rawValue: rawValue) ?? CdiInputResolution.sdkUnknown(rawValue)
    }
}

extension CdiInputSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resolution = "resolution"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resolution = resolution {
            try encodeContainer.encode(resolution.rawValue, forKey: .resolution)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resolutionDecoded = try containerValues.decodeIfPresent(CdiInputResolution.self, forKey: .resolution)
        resolution = resolutionDecoded
    }
}

extension CdiInputSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CdiInputSpecification(resolution: \(String(describing: resolution)))"}
}

/// Placeholder documentation for CdiInputSpecification
public struct CdiInputSpecification: Equatable {
    /// Maximum CDI input resolution
    public let resolution: CdiInputResolution?

    public init (
        resolution: CdiInputResolution? = nil
    )
    {
        self.resolution = resolution
    }
}

extension Channel: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case egressEndpoints = "egressEndpoints"
        case encoderSettings = "encoderSettings"
        case id = "id"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case name = "name"
        case pipelineDetails = "pipelineDetails"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case roleArn = "roleArn"
        case state = "state"
        case tags = "tags"
        case vpc = "vpc"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let cdiInputSpecification = cdiInputSpecification {
            try encodeContainer.encode(cdiInputSpecification, forKey: .cdiInputSpecification)
        }
        if let channelClass = channelClass {
            try encodeContainer.encode(channelClass.rawValue, forKey: .channelClass)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for __listofoutputdestination0 in destinations {
                try destinationsContainer.encode(__listofoutputdestination0)
            }
        }
        if let egressEndpoints = egressEndpoints {
            var egressEndpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .egressEndpoints)
            for __listofchannelegressendpoint0 in egressEndpoints {
                try egressEndpointsContainer.encode(__listofchannelegressendpoint0)
            }
        }
        if let encoderSettings = encoderSettings {
            try encodeContainer.encode(encoderSettings, forKey: .encoderSettings)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inputAttachments = inputAttachments {
            var inputAttachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputAttachments)
            for __listofinputattachment0 in inputAttachments {
                try inputAttachmentsContainer.encode(__listofinputattachment0)
            }
        }
        if let inputSpecification = inputSpecification {
            try encodeContainer.encode(inputSpecification, forKey: .inputSpecification)
        }
        if let logLevel = logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pipelineDetails = pipelineDetails {
            var pipelineDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineDetails)
            for __listofpipelinedetail0 in pipelineDetails {
                try pipelineDetailsContainer.encode(__listofpipelinedetail0)
            }
        }
        if pipelinesRunningCount != 0 {
            try encodeContainer.encode(pipelinesRunningCount, forKey: .pipelinesRunningCount)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let vpc = vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let egressEndpointsContainer = try containerValues.decodeIfPresent([ChannelEgressEndpoint?].self, forKey: .egressEndpoints)
        var egressEndpointsDecoded0:[ChannelEgressEndpoint]? = nil
        if let egressEndpointsContainer = egressEndpointsContainer {
            egressEndpointsDecoded0 = [ChannelEgressEndpoint]()
            for structure0 in egressEndpointsContainer {
                if let structure0 = structure0 {
                    egressEndpointsDecoded0?.append(structure0)
                }
            }
        }
        egressEndpoints = egressEndpointsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([PipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[PipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [PipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let pipelinesRunningCountDecoded = try containerValues.decode(Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ChannelState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(VpcOutputSettingsDescription.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension Channel: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Channel(arn: \(String(describing: arn)), cdiInputSpecification: \(String(describing: cdiInputSpecification)), channelClass: \(String(describing: channelClass)), destinations: \(String(describing: destinations)), egressEndpoints: \(String(describing: egressEndpoints)), encoderSettings: \(String(describing: encoderSettings)), id: \(String(describing: id)), inputAttachments: \(String(describing: inputAttachments)), inputSpecification: \(String(describing: inputSpecification)), logLevel: \(String(describing: logLevel)), name: \(String(describing: name)), pipelineDetails: \(String(describing: pipelineDetails)), pipelinesRunningCount: \(String(describing: pipelinesRunningCount)), roleArn: \(String(describing: roleArn)), state: \(String(describing: state)), tags: \(String(describing: tags)), vpc: \(String(describing: vpc)))"}
}

/// Placeholder documentation for Channel
public struct Channel: Equatable {
    /// The unique arn of the channel.
    public let arn: String?
    /// Specification of CDI inputs for this channel
    public let cdiInputSpecification: CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public let channelClass: ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one
    /// destination per output. For other types (HLS, for example), there is
    /// one destination per packager.
    public let destinations: [OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public let egressEndpoints: [ChannelEgressEndpoint]?
    /// Encoder Settings
    public let encoderSettings: EncoderSettings?
    /// The unique id of the channel.
    public let id: String?
    /// List of input attachments for channel.
    public let inputAttachments: [InputAttachment]?
    /// Specification of network and file inputs for this channel
    public let inputSpecification: InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public let logLevel: LogLevel?
    /// The name of the channel. (user-mutable)
    public let name: String?
    /// Runtime details for the pipelines of a running channel.
    public let pipelineDetails: [PipelineDetail]?
    /// The number of currently healthy pipelines.
    public let pipelinesRunningCount: Int
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public let roleArn: String?
    /// Placeholder documentation for ChannelState
    public let state: ChannelState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// Settings for VPC output
    public let vpc: VpcOutputSettingsDescription?

    public init (
        arn: String? = nil,
        cdiInputSpecification: CdiInputSpecification? = nil,
        channelClass: ChannelClass? = nil,
        destinations: [OutputDestination]? = nil,
        egressEndpoints: [ChannelEgressEndpoint]? = nil,
        encoderSettings: EncoderSettings? = nil,
        id: String? = nil,
        inputAttachments: [InputAttachment]? = nil,
        inputSpecification: InputSpecification? = nil,
        logLevel: LogLevel? = nil,
        name: String? = nil,
        pipelineDetails: [PipelineDetail]? = nil,
        pipelinesRunningCount: Int = 0,
        roleArn: String? = nil,
        state: ChannelState? = nil,
        tags: [String:String]? = nil,
        vpc: VpcOutputSettingsDescription? = nil
    )
    {
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.encoderSettings = encoderSettings
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.name = name
        self.pipelineDetails = pipelineDetails
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
public enum ChannelClass {
    case singlePipeline
    case standard
    case sdkUnknown(String)
}

extension ChannelClass : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ChannelClass] {
        return [
            .singlePipeline,
            .standard,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .singlePipeline: return "SINGLE_PIPELINE"
        case .standard: return "STANDARD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ChannelClass(rawValue: rawValue) ?? ChannelClass.sdkUnknown(rawValue)
    }
}

extension ChannelEgressEndpoint: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case sourceIp = "sourceIp"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceIp = sourceIp {
            try encodeContainer.encode(sourceIp, forKey: .sourceIp)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceIpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceIp)
        sourceIp = sourceIpDecoded
    }
}

extension ChannelEgressEndpoint: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChannelEgressEndpoint(sourceIp: \(String(describing: sourceIp)))"}
}

/// Placeholder documentation for ChannelEgressEndpoint
public struct ChannelEgressEndpoint: Equatable {
    /// Public IP of where a channel's output comes from
    public let sourceIp: String?

    public init (
        sourceIp: String? = nil
    )
    {
        self.sourceIp = sourceIp
    }
}

/// Placeholder documentation for ChannelState
public enum ChannelState {
    case createFailed
    case creating
    case deleted
    case deleting
    case idle
    case recovering
    case running
    case starting
    case stopping
    case updateFailed
    case updating
    case sdkUnknown(String)
}

extension ChannelState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ChannelState] {
        return [
            .createFailed,
            .creating,
            .deleted,
            .deleting,
            .idle,
            .recovering,
            .running,
            .starting,
            .stopping,
            .updateFailed,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .createFailed: return "CREATE_FAILED"
        case .creating: return "CREATING"
        case .deleted: return "DELETED"
        case .deleting: return "DELETING"
        case .idle: return "IDLE"
        case .recovering: return "RECOVERING"
        case .running: return "RUNNING"
        case .starting: return "STARTING"
        case .stopping: return "STOPPING"
        case .updateFailed: return "UPDATE_FAILED"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ChannelState(rawValue: rawValue) ?? ChannelState.sdkUnknown(rawValue)
    }
}

extension ChannelSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case egressEndpoints = "egressEndpoints"
        case id = "id"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case roleArn = "roleArn"
        case state = "state"
        case tags = "tags"
        case vpc = "vpc"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let cdiInputSpecification = cdiInputSpecification {
            try encodeContainer.encode(cdiInputSpecification, forKey: .cdiInputSpecification)
        }
        if let channelClass = channelClass {
            try encodeContainer.encode(channelClass.rawValue, forKey: .channelClass)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for __listofoutputdestination0 in destinations {
                try destinationsContainer.encode(__listofoutputdestination0)
            }
        }
        if let egressEndpoints = egressEndpoints {
            var egressEndpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .egressEndpoints)
            for __listofchannelegressendpoint0 in egressEndpoints {
                try egressEndpointsContainer.encode(__listofchannelegressendpoint0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inputAttachments = inputAttachments {
            var inputAttachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputAttachments)
            for __listofinputattachment0 in inputAttachments {
                try inputAttachmentsContainer.encode(__listofinputattachment0)
            }
        }
        if let inputSpecification = inputSpecification {
            try encodeContainer.encode(inputSpecification, forKey: .inputSpecification)
        }
        if let logLevel = logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if pipelinesRunningCount != 0 {
            try encodeContainer.encode(pipelinesRunningCount, forKey: .pipelinesRunningCount)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let vpc = vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let egressEndpointsContainer = try containerValues.decodeIfPresent([ChannelEgressEndpoint?].self, forKey: .egressEndpoints)
        var egressEndpointsDecoded0:[ChannelEgressEndpoint]? = nil
        if let egressEndpointsContainer = egressEndpointsContainer {
            egressEndpointsDecoded0 = [ChannelEgressEndpoint]()
            for structure0 in egressEndpointsContainer {
                if let structure0 = structure0 {
                    egressEndpointsDecoded0?.append(structure0)
                }
            }
        }
        egressEndpoints = egressEndpointsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decode(Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ChannelState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(VpcOutputSettingsDescription.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension ChannelSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChannelSummary(arn: \(String(describing: arn)), cdiInputSpecification: \(String(describing: cdiInputSpecification)), channelClass: \(String(describing: channelClass)), destinations: \(String(describing: destinations)), egressEndpoints: \(String(describing: egressEndpoints)), id: \(String(describing: id)), inputAttachments: \(String(describing: inputAttachments)), inputSpecification: \(String(describing: inputSpecification)), logLevel: \(String(describing: logLevel)), name: \(String(describing: name)), pipelinesRunningCount: \(String(describing: pipelinesRunningCount)), roleArn: \(String(describing: roleArn)), state: \(String(describing: state)), tags: \(String(describing: tags)), vpc: \(String(describing: vpc)))"}
}

/// Placeholder documentation for ChannelSummary
public struct ChannelSummary: Equatable {
    /// The unique arn of the channel.
    public let arn: String?
    /// Specification of CDI inputs for this channel
    public let cdiInputSpecification: CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public let channelClass: ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one
    /// destination per output. For other types (HLS, for example), there is
    /// one destination per packager.
    public let destinations: [OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public let egressEndpoints: [ChannelEgressEndpoint]?
    /// The unique id of the channel.
    public let id: String?
    /// List of input attachments for channel.
    public let inputAttachments: [InputAttachment]?
    /// Specification of network and file inputs for this channel
    public let inputSpecification: InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public let logLevel: LogLevel?
    /// The name of the channel. (user-mutable)
    public let name: String?
    /// The number of currently healthy pipelines.
    public let pipelinesRunningCount: Int
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public let roleArn: String?
    /// Placeholder documentation for ChannelState
    public let state: ChannelState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// Settings for VPC output
    public let vpc: VpcOutputSettingsDescription?

    public init (
        arn: String? = nil,
        cdiInputSpecification: CdiInputSpecification? = nil,
        channelClass: ChannelClass? = nil,
        destinations: [OutputDestination]? = nil,
        egressEndpoints: [ChannelEgressEndpoint]? = nil,
        id: String? = nil,
        inputAttachments: [InputAttachment]? = nil,
        inputSpecification: InputSpecification? = nil,
        logLevel: LogLevel? = nil,
        name: String? = nil,
        pipelinesRunningCount: Int = 0,
        roleArn: String? = nil,
        state: ChannelState? = nil,
        tags: [String:String]? = nil,
        vpc: VpcOutputSettingsDescription? = nil
    )
    {
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

extension ColorSpacePassthroughSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension ColorSpacePassthroughSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ColorSpacePassthroughSettings()"}
}

/// Passthrough applies no color space conversion to the output
public struct ColorSpacePassthroughSettings: Equatable {

    public init() {}
}

extension ConflictException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ConflictException(message: \(String(describing: message)))"}
}

extension ConflictException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for ConflictException
public struct ConflictException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// Placeholder documentation for __string
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Equatable {
    public let message: String?
}

extension ConflictExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

/// Specifies the media type of the thumbnail.
public enum ContentType {
    case imageJpeg
    case sdkUnknown(String)
}

extension ContentType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ContentType] {
        return [
            .imageJpeg,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .imageJpeg: return "image/jpeg"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ContentType(rawValue: rawValue) ?? ContentType.sdkUnknown(rawValue)
    }
}

public struct CreateChannelInputBodyMiddleware: Middleware {
    public let id: String = "CreateChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateChannelInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateChannelInput>
    public typealias MOutput = OperationOutput<CreateChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateChannelOutputError>
}

extension CreateChannelInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateChannelInput(cdiInputSpecification: \(String(describing: cdiInputSpecification)), channelClass: \(String(describing: channelClass)), destinations: \(String(describing: destinations)), encoderSettings: \(String(describing: encoderSettings)), inputAttachments: \(String(describing: inputAttachments)), inputSpecification: \(String(describing: inputSpecification)), logLevel: \(String(describing: logLevel)), name: \(String(describing: name)), requestId: \(String(describing: requestId)), reserved: \(String(describing: reserved)), roleArn: \(String(describing: roleArn)), tags: \(String(describing: tags)), vpc: \(String(describing: vpc)))"}
}

extension CreateChannelInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case encoderSettings = "encoderSettings"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case name = "name"
        case requestId = "requestId"
        case reserved = "reserved"
        case roleArn = "roleArn"
        case tags = "tags"
        case vpc = "vpc"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cdiInputSpecification = cdiInputSpecification {
            try encodeContainer.encode(cdiInputSpecification, forKey: .cdiInputSpecification)
        }
        if let channelClass = channelClass {
            try encodeContainer.encode(channelClass.rawValue, forKey: .channelClass)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for __listofoutputdestination0 in destinations {
                try destinationsContainer.encode(__listofoutputdestination0)
            }
        }
        if let encoderSettings = encoderSettings {
            try encodeContainer.encode(encoderSettings, forKey: .encoderSettings)
        }
        if let inputAttachments = inputAttachments {
            var inputAttachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputAttachments)
            for __listofinputattachment0 in inputAttachments {
                try inputAttachmentsContainer.encode(__listofinputattachment0)
            }
        }
        if let inputSpecification = inputSpecification {
            try encodeContainer.encode(inputSpecification, forKey: .inputSpecification)
        }
        if let logLevel = logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let requestId = requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let reserved = reserved {
            try encodeContainer.encode(reserved, forKey: .reserved)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let vpc = vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }
}

public struct CreateChannelInputHeadersMiddleware: Middleware {
    public let id: String = "CreateChannelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateChannelInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateChannelInput>
    public typealias MOutput = OperationOutput<CreateChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateChannelOutputError>
}

public struct CreateChannelInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateChannelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateChannelInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateChannelInput>
    public typealias MOutput = OperationOutput<CreateChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateChannelOutputError>
}

/// A request to create a channel
public struct CreateChannelInput: Equatable {
    /// Specification of CDI inputs for this channel
    public let cdiInputSpecification: CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public let channelClass: ChannelClass?
    /// Placeholder documentation for __listOfOutputDestination
    public let destinations: [OutputDestination]?
    /// Encoder Settings
    public let encoderSettings: EncoderSettings?
    /// List of input attachments for channel.
    public let inputAttachments: [InputAttachment]?
    /// Specification of network and file inputs for this channel
    public let inputSpecification: InputSpecification?
    /// The log level to write to CloudWatch Logs.
    public let logLevel: LogLevel?
    /// Name of channel.
    public let name: String?
    /// Unique request ID to be specified. This is needed to prevent retries from
    /// creating multiple resources.
    public var requestId: String?
    /// Deprecated field that's only usable by whitelisted customers.
    @available(*, deprecated)
    public let reserved: String?
    /// An optional Amazon Resource Name (ARN) of the role to assume when running the Channel.
    public let roleArn: String?
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// Settings for VPC output
    public let vpc: VpcOutputSettings?

    public init (
        cdiInputSpecification: CdiInputSpecification? = nil,
        channelClass: ChannelClass? = nil,
        destinations: [OutputDestination]? = nil,
        encoderSettings: EncoderSettings? = nil,
        inputAttachments: [InputAttachment]? = nil,
        inputSpecification: InputSpecification? = nil,
        logLevel: LogLevel? = nil,
        name: String? = nil,
        requestId: String? = nil,
        reserved: String? = nil,
        roleArn: String? = nil,
        tags: [String:String]? = nil,
        vpc: VpcOutputSettings? = nil
    )
    {
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.encoderSettings = encoderSettings
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.name = name
        self.requestId = requestId
        self.reserved = reserved
        self.roleArn = roleArn
        self.tags = tags
        self.vpc = vpc
    }
}

struct CreateChannelInputBody: Equatable {
    public let cdiInputSpecification: CdiInputSpecification?
    public let channelClass: ChannelClass?
    public let destinations: [OutputDestination]?
    public let encoderSettings: EncoderSettings?
    public let inputAttachments: [InputAttachment]?
    public let inputSpecification: InputSpecification?
    public let logLevel: LogLevel?
    public let name: String?
    public let requestId: String?
    public let reserved: String?
    public let roleArn: String?
    public let tags: [String:String]?
    public let vpc: VpcOutputSettings?
}

extension CreateChannelInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case encoderSettings = "encoderSettings"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case name = "name"
        case requestId = "requestId"
        case reserved = "reserved"
        case roleArn = "roleArn"
        case tags = "tags"
        case vpc = "vpc"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let reservedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reserved)
        reserved = reservedDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(VpcOutputSettings.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension CreateChannelOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateChannelOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateChannelOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateChannelOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateChannelOutputResponse(channel: \(String(describing: channel)))"}
}

extension CreateChannelOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateChannelOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.channel = output.channel
        } else {
            self.channel = nil
        }
    }
}

/// Placeholder documentation for CreateChannelResponse
public struct CreateChannelOutputResponse: Equatable {
    /// Placeholder documentation for Channel
    public let channel: Channel?

    public init (
        channel: Channel? = nil
    )
    {
        self.channel = channel
    }
}

struct CreateChannelOutputResponseBody: Equatable {
    public let channel: Channel?
}

extension CreateChannelOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channel = "channel"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelDecoded = try containerValues.decodeIfPresent(Channel.self, forKey: .channel)
        channel = channelDecoded
    }
}

public struct CreateInputInputBodyMiddleware: Middleware {
    public let id: String = "CreateInputInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInputInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInputInput>
    public typealias MOutput = OperationOutput<CreateInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInputOutputError>
}

extension CreateInputInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateInputInput(destinations: \(String(describing: destinations)), inputDevices: \(String(describing: inputDevices)), inputSecurityGroups: \(String(describing: inputSecurityGroups)), mediaConnectFlows: \(String(describing: mediaConnectFlows)), name: \(String(describing: name)), requestId: \(String(describing: requestId)), roleArn: \(String(describing: roleArn)), sources: \(String(describing: sources)), tags: \(String(describing: tags)), type: \(String(describing: type)), vpc: \(String(describing: vpc)))"}
}

extension CreateInputInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinations = "destinations"
        case inputDevices = "inputDevices"
        case inputSecurityGroups = "inputSecurityGroups"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case requestId = "requestId"
        case roleArn = "roleArn"
        case sources = "sources"
        case tags = "tags"
        case type = "type"
        case vpc = "vpc"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for __listofinputdestinationrequest0 in destinations {
                try destinationsContainer.encode(__listofinputdestinationrequest0)
            }
        }
        if let inputDevices = inputDevices {
            var inputDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDevices)
            for __listofinputdevicesettings0 in inputDevices {
                try inputDevicesContainer.encode(__listofinputdevicesettings0)
            }
        }
        if let inputSecurityGroups = inputSecurityGroups {
            var inputSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputSecurityGroups)
            for __listof__string0 in inputSecurityGroups {
                try inputSecurityGroupsContainer.encode(__listof__string0)
            }
        }
        if let mediaConnectFlows = mediaConnectFlows {
            var mediaConnectFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaConnectFlows)
            for __listofmediaconnectflowrequest0 in mediaConnectFlows {
                try mediaConnectFlowsContainer.encode(__listofmediaconnectflowrequest0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let requestId = requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let sources = sources {
            var sourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sources)
            for __listofinputsourcerequest0 in sources {
                try sourcesContainer.encode(__listofinputsourcerequest0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let vpc = vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }
}

public struct CreateInputInputHeadersMiddleware: Middleware {
    public let id: String = "CreateInputInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInputInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInputInput>
    public typealias MOutput = OperationOutput<CreateInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInputOutputError>
}

public struct CreateInputInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateInputInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInputInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInputInput>
    public typealias MOutput = OperationOutput<CreateInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInputOutputError>
}

/// The name of the input
public struct CreateInputInput: Equatable {
    /// Destination settings for PUSH type inputs.
    public let destinations: [InputDestinationRequest]?
    /// Settings for the devices.
    public let inputDevices: [InputDeviceSettings]?
    /// A list of security groups referenced by IDs to attach to the input.
    public let inputSecurityGroups: [String]?
    /// A list of the MediaConnect Flows that you want to use in this input. You can specify as few as one
    /// Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a
    /// separate Availability Zone as this ensures your EML input is redundant to AZ issues.
    public let mediaConnectFlows: [MediaConnectFlowRequest]?
    /// Name of the input.
    public let name: String?
    /// Unique identifier of the request to ensure the request is handled
    /// exactly once in case of retries.
    public var requestId: String?
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    public let roleArn: String?
    /// The source URLs for a PULL-type input. Every PULL type input needs
    /// exactly two source URLs for redundancy.
    /// Only specify sources for PULL type Inputs. Leave Destinations empty.
    public let sources: [InputSourceRequest]?
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// Placeholder documentation for InputType
    public let type: InputType?
    /// Settings for a private VPC Input.
    /// When this property is specified, the input destination addresses will be created in a VPC rather than with public Internet addresses.
    /// This property requires setting the roleArn property on Input creation.
    /// Not compatible with the inputSecurityGroups property.
    public let vpc: InputVpcRequest?

    public init (
        destinations: [InputDestinationRequest]? = nil,
        inputDevices: [InputDeviceSettings]? = nil,
        inputSecurityGroups: [String]? = nil,
        mediaConnectFlows: [MediaConnectFlowRequest]? = nil,
        name: String? = nil,
        requestId: String? = nil,
        roleArn: String? = nil,
        sources: [InputSourceRequest]? = nil,
        tags: [String:String]? = nil,
        type: InputType? = nil,
        vpc: InputVpcRequest? = nil
    )
    {
        self.destinations = destinations
        self.inputDevices = inputDevices
        self.inputSecurityGroups = inputSecurityGroups
        self.mediaConnectFlows = mediaConnectFlows
        self.name = name
        self.requestId = requestId
        self.roleArn = roleArn
        self.sources = sources
        self.tags = tags
        self.type = type
        self.vpc = vpc
    }
}

struct CreateInputInputBody: Equatable {
    public let destinations: [InputDestinationRequest]?
    public let inputDevices: [InputDeviceSettings]?
    public let inputSecurityGroups: [String]?
    public let mediaConnectFlows: [MediaConnectFlowRequest]?
    public let name: String?
    public let requestId: String?
    public let roleArn: String?
    public let sources: [InputSourceRequest]?
    public let tags: [String:String]?
    public let type: InputType?
    public let vpc: InputVpcRequest?
}

extension CreateInputInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destinations = "destinations"
        case inputDevices = "inputDevices"
        case inputSecurityGroups = "inputSecurityGroups"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case requestId = "requestId"
        case roleArn = "roleArn"
        case sources = "sources"
        case tags = "tags"
        case type = "type"
        case vpc = "vpc"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationsContainer = try containerValues.decodeIfPresent([InputDestinationRequest?].self, forKey: .destinations)
        var destinationsDecoded0:[InputDestinationRequest]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [InputDestinationRequest]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let inputDevicesContainer = try containerValues.decodeIfPresent([InputDeviceSettings?].self, forKey: .inputDevices)
        var inputDevicesDecoded0:[InputDeviceSettings]? = nil
        if let inputDevicesContainer = inputDevicesContainer {
            inputDevicesDecoded0 = [InputDeviceSettings]()
            for structure0 in inputDevicesContainer {
                if let structure0 = structure0 {
                    inputDevicesDecoded0?.append(structure0)
                }
            }
        }
        inputDevices = inputDevicesDecoded0
        let inputSecurityGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .inputSecurityGroups)
        var inputSecurityGroupsDecoded0:[String]? = nil
        if let inputSecurityGroupsContainer = inputSecurityGroupsContainer {
            inputSecurityGroupsDecoded0 = [String]()
            for string0 in inputSecurityGroupsContainer {
                if let string0 = string0 {
                    inputSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        inputSecurityGroups = inputSecurityGroupsDecoded0
        let mediaConnectFlowsContainer = try containerValues.decodeIfPresent([MediaConnectFlowRequest?].self, forKey: .mediaConnectFlows)
        var mediaConnectFlowsDecoded0:[MediaConnectFlowRequest]? = nil
        if let mediaConnectFlowsContainer = mediaConnectFlowsContainer {
            mediaConnectFlowsDecoded0 = [MediaConnectFlowRequest]()
            for structure0 in mediaConnectFlowsContainer {
                if let structure0 = structure0 {
                    mediaConnectFlowsDecoded0?.append(structure0)
                }
            }
        }
        mediaConnectFlows = mediaConnectFlowsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let sourcesContainer = try containerValues.decodeIfPresent([InputSourceRequest?].self, forKey: .sources)
        var sourcesDecoded0:[InputSourceRequest]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [InputSourceRequest]()
            for structure0 in sourcesContainer {
                if let structure0 = structure0 {
                    sourcesDecoded0?.append(structure0)
                }
            }
        }
        sources = sourcesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(InputType.self, forKey: .type)
        type = typeDecoded
        let vpcDecoded = try containerValues.decodeIfPresent(InputVpcRequest.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension CreateInputOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInputOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateInputOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInputOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateInputOutputResponse(input: \(String(describing: input)))"}
}

extension CreateInputOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateInputOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.input = output.input
        } else {
            self.input = nil
        }
    }
}

/// Placeholder documentation for CreateInputResponse
public struct CreateInputOutputResponse: Equatable {
    /// Placeholder documentation for Input
    public let input: Input?

    public init (
        input: Input? = nil
    )
    {
        self.input = input
    }
}

struct CreateInputOutputResponseBody: Equatable {
    public let input: Input?
}

extension CreateInputOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case input = "input"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(Input.self, forKey: .input)
        input = inputDecoded
    }
}

public struct CreateInputSecurityGroupInputBodyMiddleware: Middleware {
    public let id: String = "CreateInputSecurityGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInputSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInputSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInputSecurityGroupInput>
    public typealias MOutput = OperationOutput<CreateInputSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInputSecurityGroupOutputError>
}

extension CreateInputSecurityGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateInputSecurityGroupInput(tags: \(String(describing: tags)), whitelistRules: \(String(describing: whitelistRules)))"}
}

extension CreateInputSecurityGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let whitelistRules = whitelistRules {
            var whitelistRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .whitelistRules)
            for __listofinputwhitelistrulecidr0 in whitelistRules {
                try whitelistRulesContainer.encode(__listofinputwhitelistrulecidr0)
            }
        }
    }
}

public struct CreateInputSecurityGroupInputHeadersMiddleware: Middleware {
    public let id: String = "CreateInputSecurityGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInputSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInputSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInputSecurityGroupInput>
    public typealias MOutput = OperationOutput<CreateInputSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInputSecurityGroupOutputError>
}

public struct CreateInputSecurityGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateInputSecurityGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInputSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInputSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInputSecurityGroupInput>
    public typealias MOutput = OperationOutput<CreateInputSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInputSecurityGroupOutputError>
}

/// The IPv4 CIDRs to whitelist for this Input Security Group
public struct CreateInputSecurityGroupInput: Equatable {
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// List of IPv4 CIDR addresses to whitelist
    public let whitelistRules: [InputWhitelistRuleCidr]?

    public init (
        tags: [String:String]? = nil,
        whitelistRules: [InputWhitelistRuleCidr]? = nil
    )
    {
        self.tags = tags
        self.whitelistRules = whitelistRules
    }
}

struct CreateInputSecurityGroupInputBody: Equatable {
    public let tags: [String:String]?
    public let whitelistRules: [InputWhitelistRuleCidr]?
}

extension CreateInputSecurityGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let whitelistRulesContainer = try containerValues.decodeIfPresent([InputWhitelistRuleCidr?].self, forKey: .whitelistRules)
        var whitelistRulesDecoded0:[InputWhitelistRuleCidr]? = nil
        if let whitelistRulesContainer = whitelistRulesContainer {
            whitelistRulesDecoded0 = [InputWhitelistRuleCidr]()
            for structure0 in whitelistRulesContainer {
                if let structure0 = structure0 {
                    whitelistRulesDecoded0?.append(structure0)
                }
            }
        }
        whitelistRules = whitelistRulesDecoded0
    }
}

extension CreateInputSecurityGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInputSecurityGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateInputSecurityGroupOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInputSecurityGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateInputSecurityGroupOutputResponse(securityGroup: \(String(describing: securityGroup)))"}
}

extension CreateInputSecurityGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateInputSecurityGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.securityGroup = output.securityGroup
        } else {
            self.securityGroup = nil
        }
    }
}

/// Placeholder documentation for CreateInputSecurityGroupResponse
public struct CreateInputSecurityGroupOutputResponse: Equatable {
    /// An Input Security Group
    public let securityGroup: InputSecurityGroup?

    public init (
        securityGroup: InputSecurityGroup? = nil
    )
    {
        self.securityGroup = securityGroup
    }
}

struct CreateInputSecurityGroupOutputResponseBody: Equatable {
    public let securityGroup: InputSecurityGroup?
}

extension CreateInputSecurityGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case securityGroup = "securityGroup"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupDecoded = try containerValues.decodeIfPresent(InputSecurityGroup.self, forKey: .securityGroup)
        securityGroup = securityGroupDecoded
    }
}

public struct CreateMultiplexInputBodyMiddleware: Middleware {
    public let id: String = "CreateMultiplexInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMultiplexInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMultiplexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMultiplexInput>
    public typealias MOutput = OperationOutput<CreateMultiplexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMultiplexOutputError>
}

extension CreateMultiplexInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateMultiplexInput(availabilityZones: \(String(describing: availabilityZones)), multiplexSettings: \(String(describing: multiplexSettings)), name: \(String(describing: name)), requestId: \(String(describing: requestId)), tags: \(String(describing: tags)))"}
}

extension CreateMultiplexInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZones = "availabilityZones"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case requestId = "requestId"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for __listof__string0 in availabilityZones {
                try availabilityZonesContainer.encode(__listof__string0)
            }
        }
        if let multiplexSettings = multiplexSettings {
            try encodeContainer.encode(multiplexSettings, forKey: .multiplexSettings)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let requestId = requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateMultiplexInputHeadersMiddleware: Middleware {
    public let id: String = "CreateMultiplexInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMultiplexInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMultiplexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMultiplexInput>
    public typealias MOutput = OperationOutput<CreateMultiplexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMultiplexOutputError>
}

public struct CreateMultiplexInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateMultiplexInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMultiplexInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMultiplexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMultiplexInput>
    public typealias MOutput = OperationOutput<CreateMultiplexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMultiplexOutputError>
}

/// A request to create a multiplex.
public struct CreateMultiplexInput: Equatable {
    /// A list of availability zones for the multiplex. You must specify exactly two.
    public let availabilityZones: [String]?
    /// Configuration for a multiplex event.
    public let multiplexSettings: MultiplexSettings?
    /// Name of multiplex.
    public let name: String?
    /// Unique request ID. This prevents retries from creating multiple
    /// resources.
    public var requestId: String?
    /// A collection of key-value pairs.
    public let tags: [String:String]?

    public init (
        availabilityZones: [String]? = nil,
        multiplexSettings: MultiplexSettings? = nil,
        name: String? = nil,
        requestId: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.requestId = requestId
        self.tags = tags
    }
}

struct CreateMultiplexInputBody: Equatable {
    public let availabilityZones: [String]?
    public let multiplexSettings: MultiplexSettings?
    public let name: String?
    public let requestId: String?
    public let tags: [String:String]?
}

extension CreateMultiplexInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case availabilityZones = "availabilityZones"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case requestId = "requestId"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZonesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateMultiplexOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMultiplexOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMultiplexOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMultiplexOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateMultiplexOutputResponse(multiplex: \(String(describing: multiplex)))"}
}

extension CreateMultiplexOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateMultiplexOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.multiplex = output.multiplex
        } else {
            self.multiplex = nil
        }
    }
}

/// Placeholder documentation for CreateMultiplexResponse
public struct CreateMultiplexOutputResponse: Equatable {
    /// The newly created multiplex.
    public let multiplex: Multiplex?

    public init (
        multiplex: Multiplex? = nil
    )
    {
        self.multiplex = multiplex
    }
}

struct CreateMultiplexOutputResponseBody: Equatable {
    public let multiplex: Multiplex?
}

extension CreateMultiplexOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case multiplex = "multiplex"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexDecoded = try containerValues.decodeIfPresent(Multiplex.self, forKey: .multiplex)
        multiplex = multiplexDecoded
    }
}

public struct CreateMultiplexProgramInputBodyMiddleware: Middleware {
    public let id: String = "CreateMultiplexProgramInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMultiplexProgramInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMultiplexProgramOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMultiplexProgramInput>
    public typealias MOutput = OperationOutput<CreateMultiplexProgramOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMultiplexProgramOutputError>
}

extension CreateMultiplexProgramInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateMultiplexProgramInput(multiplexId: \(String(describing: multiplexId)), multiplexProgramSettings: \(String(describing: multiplexProgramSettings)), programName: \(String(describing: programName)), requestId: \(String(describing: requestId)))"}
}

extension CreateMultiplexProgramInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case multiplexProgramSettings = "multiplexProgramSettings"
        case programName = "programName"
        case requestId = "requestId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let multiplexProgramSettings = multiplexProgramSettings {
            try encodeContainer.encode(multiplexProgramSettings, forKey: .multiplexProgramSettings)
        }
        if let programName = programName {
            try encodeContainer.encode(programName, forKey: .programName)
        }
        if let requestId = requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
    }
}

public struct CreateMultiplexProgramInputHeadersMiddleware: Middleware {
    public let id: String = "CreateMultiplexProgramInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMultiplexProgramInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMultiplexProgramOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMultiplexProgramInput>
    public typealias MOutput = OperationOutput<CreateMultiplexProgramOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMultiplexProgramOutputError>
}

public struct CreateMultiplexProgramInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateMultiplexProgramInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMultiplexProgramInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMultiplexProgramOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMultiplexProgramInput>
    public typealias MOutput = OperationOutput<CreateMultiplexProgramOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMultiplexProgramOutputError>
}

/// A request to create a program in a multiplex.
public struct CreateMultiplexProgramInput: Equatable {
    /// ID of the multiplex where the program is to be created.
    public let multiplexId: String?
    /// The settings for this multiplex program.
    public let multiplexProgramSettings: MultiplexProgramSettings?
    /// Name of multiplex program.
    public let programName: String?
    /// Unique request ID. This prevents retries from creating multiple
    /// resources.
    public var requestId: String?

    public init (
        multiplexId: String? = nil,
        multiplexProgramSettings: MultiplexProgramSettings? = nil,
        programName: String? = nil,
        requestId: String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.multiplexProgramSettings = multiplexProgramSettings
        self.programName = programName
        self.requestId = requestId
    }
}

struct CreateMultiplexProgramInputBody: Equatable {
    public let multiplexProgramSettings: MultiplexProgramSettings?
    public let programName: String?
    public let requestId: String?
}

extension CreateMultiplexProgramInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case multiplexProgramSettings = "multiplexProgramSettings"
        case programName = "programName"
        case requestId = "requestId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexProgramSettingsDecoded = try containerValues.decodeIfPresent(MultiplexProgramSettings.self, forKey: .multiplexProgramSettings)
        multiplexProgramSettings = multiplexProgramSettingsDecoded
        let programNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .programName)
        programName = programNameDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension CreateMultiplexProgramOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMultiplexProgramOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMultiplexProgramOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMultiplexProgramOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateMultiplexProgramOutputResponse(multiplexProgram: \(String(describing: multiplexProgram)))"}
}

extension CreateMultiplexProgramOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateMultiplexProgramOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.multiplexProgram = output.multiplexProgram
        } else {
            self.multiplexProgram = nil
        }
    }
}

/// Placeholder documentation for CreateMultiplexProgramResponse
public struct CreateMultiplexProgramOutputResponse: Equatable {
    /// The newly created multiplex program.
    public let multiplexProgram: MultiplexProgram?

    public init (
        multiplexProgram: MultiplexProgram? = nil
    )
    {
        self.multiplexProgram = multiplexProgram
    }
}

struct CreateMultiplexProgramOutputResponseBody: Equatable {
    public let multiplexProgram: MultiplexProgram?
}

extension CreateMultiplexProgramOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case multiplexProgram = "multiplexProgram"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexProgramDecoded = try containerValues.decodeIfPresent(MultiplexProgram.self, forKey: .multiplexProgram)
        multiplexProgram = multiplexProgramDecoded
    }
}

public struct CreatePartnerInputInputBodyMiddleware: Middleware {
    public let id: String = "CreatePartnerInputInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePartnerInputInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePartnerInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePartnerInputInput>
    public typealias MOutput = OperationOutput<CreatePartnerInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePartnerInputOutputError>
}

extension CreatePartnerInputInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreatePartnerInputInput(inputId: \(String(describing: inputId)), requestId: \(String(describing: requestId)), tags: \(String(describing: tags)))"}
}

extension CreatePartnerInputInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case requestId = "requestId"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let requestId = requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreatePartnerInputInputHeadersMiddleware: Middleware {
    public let id: String = "CreatePartnerInputInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePartnerInputInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePartnerInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePartnerInputInput>
    public typealias MOutput = OperationOutput<CreatePartnerInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePartnerInputOutputError>
}

public struct CreatePartnerInputInputQueryItemMiddleware: Middleware {
    public let id: String = "CreatePartnerInputInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePartnerInputInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePartnerInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePartnerInputInput>
    public typealias MOutput = OperationOutput<CreatePartnerInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePartnerInputOutputError>
}

/// A request to create a partner input
public struct CreatePartnerInputInput: Equatable {
    /// Unique ID of the input.
    public let inputId: String?
    /// Unique identifier of the request to ensure the request is handled
    /// exactly once in case of retries.
    public var requestId: String?
    /// A collection of key-value pairs.
    public let tags: [String:String]?

    public init (
        inputId: String? = nil,
        requestId: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.inputId = inputId
        self.requestId = requestId
        self.tags = tags
    }
}

struct CreatePartnerInputInputBody: Equatable {
    public let requestId: String?
    public let tags: [String:String]?
}

extension CreatePartnerInputInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case requestId = "requestId"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreatePartnerInputOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePartnerInputOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePartnerInputOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePartnerInputOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreatePartnerInputOutputResponse(input: \(String(describing: input)))"}
}

extension CreatePartnerInputOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreatePartnerInputOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.input = output.input
        } else {
            self.input = nil
        }
    }
}

/// Placeholder documentation for CreatePartnerInputResponse
public struct CreatePartnerInputOutputResponse: Equatable {
    /// Placeholder documentation for Input
    public let input: Input?

    public init (
        input: Input? = nil
    )
    {
        self.input = input
    }
}

struct CreatePartnerInputOutputResponseBody: Equatable {
    public let input: Input?
}

extension CreatePartnerInputOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case input = "input"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(Input.self, forKey: .input)
        input = inputDecoded
    }
}

public struct CreateTagsInputBodyMiddleware: Middleware {
    public let id: String = "CreateTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTagsInput>
    public typealias MOutput = OperationOutput<CreateTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTagsOutputError>
}

extension CreateTagsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateTagsInput(resourceArn: \(String(describing: resourceArn)), tags: \(String(describing: tags)))"}
}

extension CreateTagsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateTagsInputHeadersMiddleware: Middleware {
    public let id: String = "CreateTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTagsInput>
    public typealias MOutput = OperationOutput<CreateTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTagsOutputError>
}

public struct CreateTagsInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTagsInput>
    public typealias MOutput = OperationOutput<CreateTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTagsOutputError>
}

/// Placeholder documentation for CreateTagsRequest
public struct CreateTagsInput: Equatable {
    /// Placeholder documentation for __string
    public let resourceArn: String?
    /// Placeholder documentation for Tags
    public let tags: [String:String]?

    public init (
        resourceArn: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct CreateTagsInputBody: Equatable {
    public let tags: [String:String]?
}

extension CreateTagsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateTagsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTagsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTagsOutputError: Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTagsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateTagsOutputResponse()"}
}

extension CreateTagsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct CreateTagsOutputResponse: Equatable {

    public init() {}
}

struct CreateTagsOutputResponseBody: Equatable {
}

extension CreateTagsOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteChannelInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteChannelInput(channelId: \(String(describing: channelId)))"}
}

extension DeleteChannelInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteChannelInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteChannelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteChannelInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteChannelInput>
    public typealias MOutput = OperationOutput<DeleteChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteChannelOutputError>
}

public struct DeleteChannelInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteChannelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteChannelInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteChannelInput>
    public typealias MOutput = OperationOutput<DeleteChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteChannelOutputError>
}

/// Placeholder documentation for DeleteChannelRequest
public struct DeleteChannelInput: Equatable {
    /// Unique ID of the channel.
    public let channelId: String?

    public init (
        channelId: String? = nil
    )
    {
        self.channelId = channelId
    }
}

struct DeleteChannelInputBody: Equatable {
}

extension DeleteChannelInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteChannelOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteChannelOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteChannelOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteChannelOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteChannelOutputResponse(arn: \(String(describing: arn)), cdiInputSpecification: \(String(describing: cdiInputSpecification)), channelClass: \(String(describing: channelClass)), destinations: \(String(describing: destinations)), egressEndpoints: \(String(describing: egressEndpoints)), encoderSettings: \(String(describing: encoderSettings)), id: \(String(describing: id)), inputAttachments: \(String(describing: inputAttachments)), inputSpecification: \(String(describing: inputSpecification)), logLevel: \(String(describing: logLevel)), name: \(String(describing: name)), pipelineDetails: \(String(describing: pipelineDetails)), pipelinesRunningCount: \(String(describing: pipelinesRunningCount)), roleArn: \(String(describing: roleArn)), state: \(String(describing: state)), tags: \(String(describing: tags)), vpc: \(String(describing: vpc)))"}
}

extension DeleteChannelOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteChannelOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.cdiInputSpecification = output.cdiInputSpecification
            self.channelClass = output.channelClass
            self.destinations = output.destinations
            self.egressEndpoints = output.egressEndpoints
            self.encoderSettings = output.encoderSettings
            self.id = output.id
            self.inputAttachments = output.inputAttachments
            self.inputSpecification = output.inputSpecification
            self.logLevel = output.logLevel
            self.name = output.name
            self.pipelineDetails = output.pipelineDetails
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.roleArn = output.roleArn
            self.state = output.state
            self.tags = output.tags
            self.vpc = output.vpc
        } else {
            self.arn = nil
            self.cdiInputSpecification = nil
            self.channelClass = nil
            self.destinations = nil
            self.egressEndpoints = nil
            self.encoderSettings = nil
            self.id = nil
            self.inputAttachments = nil
            self.inputSpecification = nil
            self.logLevel = nil
            self.name = nil
            self.pipelineDetails = nil
            self.pipelinesRunningCount = 0
            self.roleArn = nil
            self.state = nil
            self.tags = nil
            self.vpc = nil
        }
    }
}

/// Placeholder documentation for DeleteChannelResponse
public struct DeleteChannelOutputResponse: Equatable {
    /// The unique arn of the channel.
    public let arn: String?
    /// Specification of CDI inputs for this channel
    public let cdiInputSpecification: CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public let channelClass: ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one
    /// destination per output. For other types (HLS, for example), there is
    /// one destination per packager.
    public let destinations: [OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public let egressEndpoints: [ChannelEgressEndpoint]?
    /// Encoder Settings
    public let encoderSettings: EncoderSettings?
    /// The unique id of the channel.
    public let id: String?
    /// List of input attachments for channel.
    public let inputAttachments: [InputAttachment]?
    /// Specification of network and file inputs for this channel
    public let inputSpecification: InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public let logLevel: LogLevel?
    /// The name of the channel. (user-mutable)
    public let name: String?
    /// Runtime details for the pipelines of a running channel.
    public let pipelineDetails: [PipelineDetail]?
    /// The number of currently healthy pipelines.
    public let pipelinesRunningCount: Int
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public let roleArn: String?
    /// Placeholder documentation for ChannelState
    public let state: ChannelState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// Settings for VPC output
    public let vpc: VpcOutputSettingsDescription?

    public init (
        arn: String? = nil,
        cdiInputSpecification: CdiInputSpecification? = nil,
        channelClass: ChannelClass? = nil,
        destinations: [OutputDestination]? = nil,
        egressEndpoints: [ChannelEgressEndpoint]? = nil,
        encoderSettings: EncoderSettings? = nil,
        id: String? = nil,
        inputAttachments: [InputAttachment]? = nil,
        inputSpecification: InputSpecification? = nil,
        logLevel: LogLevel? = nil,
        name: String? = nil,
        pipelineDetails: [PipelineDetail]? = nil,
        pipelinesRunningCount: Int = 0,
        roleArn: String? = nil,
        state: ChannelState? = nil,
        tags: [String:String]? = nil,
        vpc: VpcOutputSettingsDescription? = nil
    )
    {
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.encoderSettings = encoderSettings
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.name = name
        self.pipelineDetails = pipelineDetails
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

struct DeleteChannelOutputResponseBody: Equatable {
    public let arn: String?
    public let cdiInputSpecification: CdiInputSpecification?
    public let channelClass: ChannelClass?
    public let destinations: [OutputDestination]?
    public let egressEndpoints: [ChannelEgressEndpoint]?
    public let encoderSettings: EncoderSettings?
    public let id: String?
    public let inputAttachments: [InputAttachment]?
    public let inputSpecification: InputSpecification?
    public let logLevel: LogLevel?
    public let name: String?
    public let pipelineDetails: [PipelineDetail]?
    public let pipelinesRunningCount: Int
    public let roleArn: String?
    public let state: ChannelState?
    public let tags: [String:String]?
    public let vpc: VpcOutputSettingsDescription?
}

extension DeleteChannelOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case egressEndpoints = "egressEndpoints"
        case encoderSettings = "encoderSettings"
        case id = "id"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case name = "name"
        case pipelineDetails = "pipelineDetails"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case roleArn = "roleArn"
        case state = "state"
        case tags = "tags"
        case vpc = "vpc"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let egressEndpointsContainer = try containerValues.decodeIfPresent([ChannelEgressEndpoint?].self, forKey: .egressEndpoints)
        var egressEndpointsDecoded0:[ChannelEgressEndpoint]? = nil
        if let egressEndpointsContainer = egressEndpointsContainer {
            egressEndpointsDecoded0 = [ChannelEgressEndpoint]()
            for structure0 in egressEndpointsContainer {
                if let structure0 = structure0 {
                    egressEndpointsDecoded0?.append(structure0)
                }
            }
        }
        egressEndpoints = egressEndpointsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([PipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[PipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [PipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let pipelinesRunningCountDecoded = try containerValues.decode(Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ChannelState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(VpcOutputSettingsDescription.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension DeleteInputInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteInputInput(inputId: \(String(describing: inputId)))"}
}

extension DeleteInputInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteInputInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteInputInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteInputInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteInputInput>
    public typealias MOutput = OperationOutput<DeleteInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteInputOutputError>
}

public struct DeleteInputInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteInputInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteInputInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteInputInput>
    public typealias MOutput = OperationOutput<DeleteInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteInputOutputError>
}

/// Placeholder documentation for DeleteInputRequest
public struct DeleteInputInput: Equatable {
    /// Unique ID of the input
    public let inputId: String?

    public init (
        inputId: String? = nil
    )
    {
        self.inputId = inputId
    }
}

struct DeleteInputInputBody: Equatable {
}

extension DeleteInputInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteInputOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInputOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteInputOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInputOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteInputOutputResponse()"}
}

extension DeleteInputOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for DeleteInputResponse
public struct DeleteInputOutputResponse: Equatable {

    public init() {}
}

struct DeleteInputOutputResponseBody: Equatable {
}

extension DeleteInputOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteInputSecurityGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteInputSecurityGroupInput(inputSecurityGroupId: \(String(describing: inputSecurityGroupId)))"}
}

extension DeleteInputSecurityGroupInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteInputSecurityGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteInputSecurityGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteInputSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteInputSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteInputSecurityGroupInput>
    public typealias MOutput = OperationOutput<DeleteInputSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteInputSecurityGroupOutputError>
}

public struct DeleteInputSecurityGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteInputSecurityGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteInputSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteInputSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteInputSecurityGroupInput>
    public typealias MOutput = OperationOutput<DeleteInputSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteInputSecurityGroupOutputError>
}

/// Placeholder documentation for DeleteInputSecurityGroupRequest
public struct DeleteInputSecurityGroupInput: Equatable {
    /// The Input Security Group to delete
    public let inputSecurityGroupId: String?

    public init (
        inputSecurityGroupId: String? = nil
    )
    {
        self.inputSecurityGroupId = inputSecurityGroupId
    }
}

struct DeleteInputSecurityGroupInputBody: Equatable {
}

extension DeleteInputSecurityGroupInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteInputSecurityGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInputSecurityGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteInputSecurityGroupOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInputSecurityGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteInputSecurityGroupOutputResponse()"}
}

extension DeleteInputSecurityGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for DeleteInputSecurityGroupResponse
public struct DeleteInputSecurityGroupOutputResponse: Equatable {

    public init() {}
}

struct DeleteInputSecurityGroupOutputResponseBody: Equatable {
}

extension DeleteInputSecurityGroupOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteMultiplexInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMultiplexInput(multiplexId: \(String(describing: multiplexId)))"}
}

extension DeleteMultiplexInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteMultiplexInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteMultiplexInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMultiplexInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMultiplexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMultiplexInput>
    public typealias MOutput = OperationOutput<DeleteMultiplexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMultiplexOutputError>
}

public struct DeleteMultiplexInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteMultiplexInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMultiplexInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMultiplexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMultiplexInput>
    public typealias MOutput = OperationOutput<DeleteMultiplexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMultiplexOutputError>
}

/// Placeholder documentation for DeleteMultiplexRequest
public struct DeleteMultiplexInput: Equatable {
    /// The ID of the multiplex.
    public let multiplexId: String?

    public init (
        multiplexId: String? = nil
    )
    {
        self.multiplexId = multiplexId
    }
}

struct DeleteMultiplexInputBody: Equatable {
}

extension DeleteMultiplexInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteMultiplexOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMultiplexOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMultiplexOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMultiplexOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMultiplexOutputResponse(arn: \(String(describing: arn)), availabilityZones: \(String(describing: availabilityZones)), destinations: \(String(describing: destinations)), id: \(String(describing: id)), multiplexSettings: \(String(describing: multiplexSettings)), name: \(String(describing: name)), pipelinesRunningCount: \(String(describing: pipelinesRunningCount)), programCount: \(String(describing: programCount)), state: \(String(describing: state)), tags: \(String(describing: tags)))"}
}

extension DeleteMultiplexOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteMultiplexOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.availabilityZones = output.availabilityZones
            self.destinations = output.destinations
            self.id = output.id
            self.multiplexSettings = output.multiplexSettings
            self.name = output.name
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.programCount = output.programCount
            self.state = output.state
            self.tags = output.tags
        } else {
            self.arn = nil
            self.availabilityZones = nil
            self.destinations = nil
            self.id = nil
            self.multiplexSettings = nil
            self.name = nil
            self.pipelinesRunningCount = 0
            self.programCount = 0
            self.state = nil
            self.tags = nil
        }
    }
}

/// Placeholder documentation for DeleteMultiplexResponse
public struct DeleteMultiplexOutputResponse: Equatable {
    /// The unique arn of the multiplex.
    public let arn: String?
    /// A list of availability zones for the multiplex.
    public let availabilityZones: [String]?
    /// A list of the multiplex output destinations.
    public let destinations: [MultiplexOutputDestination]?
    /// The unique id of the multiplex.
    public let id: String?
    /// Configuration for a multiplex event.
    public let multiplexSettings: MultiplexSettings?
    /// The name of the multiplex.
    public let name: String?
    /// The number of currently healthy pipelines.
    public let pipelinesRunningCount: Int
    /// The number of programs in the multiplex.
    public let programCount: Int
    /// The current state of the multiplex.
    public let state: MultiplexState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?

    public init (
        arn: String? = nil,
        availabilityZones: [String]? = nil,
        destinations: [MultiplexOutputDestination]? = nil,
        id: String? = nil,
        multiplexSettings: MultiplexSettings? = nil,
        name: String? = nil,
        pipelinesRunningCount: Int = 0,
        programCount: Int = 0,
        state: MultiplexState? = nil,
        tags: [String:String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZones = availabilityZones
        self.destinations = destinations
        self.id = id
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.programCount = programCount
        self.state = state
        self.tags = tags
    }
}

struct DeleteMultiplexOutputResponseBody: Equatable {
    public let arn: String?
    public let availabilityZones: [String]?
    public let destinations: [MultiplexOutputDestination]?
    public let id: String?
    public let multiplexSettings: MultiplexSettings?
    public let name: String?
    public let pipelinesRunningCount: Int
    public let programCount: Int
    public let state: MultiplexState?
    public let tags: [String:String]?
}

extension DeleteMultiplexOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case destinations = "destinations"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MultiplexOutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MultiplexOutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MultiplexOutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decode(Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decode(Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DeleteMultiplexProgramInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMultiplexProgramInput(multiplexId: \(String(describing: multiplexId)), programName: \(String(describing: programName)))"}
}

extension DeleteMultiplexProgramInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteMultiplexProgramInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteMultiplexProgramInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMultiplexProgramInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMultiplexProgramOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMultiplexProgramInput>
    public typealias MOutput = OperationOutput<DeleteMultiplexProgramOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMultiplexProgramOutputError>
}

public struct DeleteMultiplexProgramInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteMultiplexProgramInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMultiplexProgramInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMultiplexProgramOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMultiplexProgramInput>
    public typealias MOutput = OperationOutput<DeleteMultiplexProgramOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMultiplexProgramOutputError>
}

/// Placeholder documentation for DeleteMultiplexProgramRequest
public struct DeleteMultiplexProgramInput: Equatable {
    /// The ID of the multiplex that the program belongs to.
    public let multiplexId: String?
    /// The multiplex program name.
    public let programName: String?

    public init (
        multiplexId: String? = nil,
        programName: String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.programName = programName
    }
}

struct DeleteMultiplexProgramInputBody: Equatable {
}

extension DeleteMultiplexProgramInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteMultiplexProgramOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMultiplexProgramOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMultiplexProgramOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMultiplexProgramOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMultiplexProgramOutputResponse(channelId: \(String(describing: channelId)), multiplexProgramSettings: \(String(describing: multiplexProgramSettings)), packetIdentifiersMap: \(String(describing: packetIdentifiersMap)), pipelineDetails: \(String(describing: pipelineDetails)), programName: \(String(describing: programName)))"}
}

extension DeleteMultiplexProgramOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteMultiplexProgramOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.channelId = output.channelId
            self.multiplexProgramSettings = output.multiplexProgramSettings
            self.packetIdentifiersMap = output.packetIdentifiersMap
            self.pipelineDetails = output.pipelineDetails
            self.programName = output.programName
        } else {
            self.channelId = nil
            self.multiplexProgramSettings = nil
            self.packetIdentifiersMap = nil
            self.pipelineDetails = nil
            self.programName = nil
        }
    }
}

/// Placeholder documentation for DeleteMultiplexProgramResponse
public struct DeleteMultiplexProgramOutputResponse: Equatable {
    /// The MediaLive channel associated with the program.
    public let channelId: String?
    /// The settings for this multiplex program.
    public let multiplexProgramSettings: MultiplexProgramSettings?
    /// The packet identifier map for this multiplex program.
    public let packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap?
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    public let pipelineDetails: [MultiplexProgramPipelineDetail]?
    /// The name of the multiplex program.
    public let programName: String?

    public init (
        channelId: String? = nil,
        multiplexProgramSettings: MultiplexProgramSettings? = nil,
        packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap? = nil,
        pipelineDetails: [MultiplexProgramPipelineDetail]? = nil,
        programName: String? = nil
    )
    {
        self.channelId = channelId
        self.multiplexProgramSettings = multiplexProgramSettings
        self.packetIdentifiersMap = packetIdentifiersMap
        self.pipelineDetails = pipelineDetails
        self.programName = programName
    }
}

struct DeleteMultiplexProgramOutputResponseBody: Equatable {
    public let channelId: String?
    public let multiplexProgramSettings: MultiplexProgramSettings?
    public let packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap?
    public let pipelineDetails: [MultiplexProgramPipelineDetail]?
    public let programName: String?
}

extension DeleteMultiplexProgramOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channelId = "channelId"
        case multiplexProgramSettings = "multiplexProgramSettings"
        case packetIdentifiersMap = "packetIdentifiersMap"
        case pipelineDetails = "pipelineDetails"
        case programName = "programName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .channelId)
        channelId = channelIdDecoded
        let multiplexProgramSettingsDecoded = try containerValues.decodeIfPresent(MultiplexProgramSettings.self, forKey: .multiplexProgramSettings)
        multiplexProgramSettings = multiplexProgramSettingsDecoded
        let packetIdentifiersMapDecoded = try containerValues.decodeIfPresent(MultiplexProgramPacketIdentifiersMap.self, forKey: .packetIdentifiersMap)
        packetIdentifiersMap = packetIdentifiersMapDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([MultiplexProgramPipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[MultiplexProgramPipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [MultiplexProgramPipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let programNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .programName)
        programName = programNameDecoded
    }
}

extension DeleteReservationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteReservationInput(reservationId: \(String(describing: reservationId)))"}
}

extension DeleteReservationInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteReservationInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteReservationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteReservationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteReservationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteReservationInput>
    public typealias MOutput = OperationOutput<DeleteReservationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteReservationOutputError>
}

public struct DeleteReservationInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteReservationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteReservationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteReservationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteReservationInput>
    public typealias MOutput = OperationOutput<DeleteReservationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteReservationOutputError>
}

/// Placeholder documentation for DeleteReservationRequest
public struct DeleteReservationInput: Equatable {
    /// Unique reservation ID, e.g. '1234567'
    public let reservationId: String?

    public init (
        reservationId: String? = nil
    )
    {
        self.reservationId = reservationId
    }
}

struct DeleteReservationInputBody: Equatable {
}

extension DeleteReservationInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteReservationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteReservationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteReservationOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteReservationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteReservationOutputResponse(arn: \(String(describing: arn)), count: \(String(describing: count)), currencyCode: \(String(describing: currencyCode)), duration: \(String(describing: duration)), durationUnits: \(String(describing: durationUnits)), end: \(String(describing: end)), fixedPrice: \(String(describing: fixedPrice)), name: \(String(describing: name)), offeringDescription: \(String(describing: offeringDescription)), offeringId: \(String(describing: offeringId)), offeringType: \(String(describing: offeringType)), region: \(String(describing: region)), reservationId: \(String(describing: reservationId)), resourceSpecification: \(String(describing: resourceSpecification)), start: \(String(describing: start)), state: \(String(describing: state)), tags: \(String(describing: tags)), usagePrice: \(String(describing: usagePrice)))"}
}

extension DeleteReservationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteReservationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.count = output.count
            self.currencyCode = output.currencyCode
            self.duration = output.duration
            self.durationUnits = output.durationUnits
            self.end = output.end
            self.fixedPrice = output.fixedPrice
            self.name = output.name
            self.offeringDescription = output.offeringDescription
            self.offeringId = output.offeringId
            self.offeringType = output.offeringType
            self.region = output.region
            self.reservationId = output.reservationId
            self.resourceSpecification = output.resourceSpecification
            self.start = output.start
            self.state = output.state
            self.tags = output.tags
            self.usagePrice = output.usagePrice
        } else {
            self.arn = nil
            self.count = 0
            self.currencyCode = nil
            self.duration = 0
            self.durationUnits = nil
            self.end = nil
            self.fixedPrice = 0.0
            self.name = nil
            self.offeringDescription = nil
            self.offeringId = nil
            self.offeringType = nil
            self.region = nil
            self.reservationId = nil
            self.resourceSpecification = nil
            self.start = nil
            self.state = nil
            self.tags = nil
            self.usagePrice = 0.0
        }
    }
}

/// Placeholder documentation for DeleteReservationResponse
public struct DeleteReservationOutputResponse: Equatable {
    /// Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
    public let arn: String?
    /// Number of reserved resources
    public let count: Int
    /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
    public let currencyCode: String?
    /// Lease duration, e.g. '12'
    public let duration: Int
    /// Units for duration, e.g. 'MONTHS'
    public let durationUnits: OfferingDurationUnits?
    /// Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
    public let end: String?
    /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
    public let fixedPrice: Double
    /// User specified reservation name
    public let name: String?
    /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
    public let offeringDescription: String?
    /// Unique offering ID, e.g. '87654321'
    public let offeringId: String?
    /// Offering type, e.g. 'NO_UPFRONT'
    public let offeringType: OfferingType?
    /// AWS region, e.g. 'us-west-2'
    public let region: String?
    /// Unique reservation ID, e.g. '1234567'
    public let reservationId: String?
    /// Resource configuration details
    public let resourceSpecification: ReservationResourceSpecification?
    /// Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
    public let start: String?
    /// Current state of reservation, e.g. 'ACTIVE'
    public let state: ReservationState?
    /// A collection of key-value pairs
    public let tags: [String:String]?
    /// Recurring usage charge for each reserved resource, e.g. '157.0'
    public let usagePrice: Double

    public init (
        arn: String? = nil,
        count: Int = 0,
        currencyCode: String? = nil,
        duration: Int = 0,
        durationUnits: OfferingDurationUnits? = nil,
        end: String? = nil,
        fixedPrice: Double = 0.0,
        name: String? = nil,
        offeringDescription: String? = nil,
        offeringId: String? = nil,
        offeringType: OfferingType? = nil,
        region: String? = nil,
        reservationId: String? = nil,
        resourceSpecification: ReservationResourceSpecification? = nil,
        start: String? = nil,
        state: ReservationState? = nil,
        tags: [String:String]? = nil,
        usagePrice: Double = 0.0
    )
    {
        self.arn = arn
        self.count = count
        self.currencyCode = currencyCode
        self.duration = duration
        self.durationUnits = durationUnits
        self.end = end
        self.fixedPrice = fixedPrice
        self.name = name
        self.offeringDescription = offeringDescription
        self.offeringId = offeringId
        self.offeringType = offeringType
        self.region = region
        self.reservationId = reservationId
        self.resourceSpecification = resourceSpecification
        self.start = start
        self.state = state
        self.tags = tags
        self.usagePrice = usagePrice
    }
}

struct DeleteReservationOutputResponseBody: Equatable {
    public let arn: String?
    public let count: Int
    public let currencyCode: String?
    public let duration: Int
    public let durationUnits: OfferingDurationUnits?
    public let end: String?
    public let fixedPrice: Double
    public let name: String?
    public let offeringDescription: String?
    public let offeringId: String?
    public let offeringType: OfferingType?
    public let region: String?
    public let reservationId: String?
    public let resourceSpecification: ReservationResourceSpecification?
    public let start: String?
    public let state: ReservationState?
    public let tags: [String:String]?
    public let usagePrice: Double
}

extension DeleteReservationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case count = "count"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case durationUnits = "durationUnits"
        case end = "end"
        case fixedPrice = "fixedPrice"
        case name = "name"
        case offeringDescription = "offeringDescription"
        case offeringId = "offeringId"
        case offeringType = "offeringType"
        case region = "region"
        case reservationId = "reservationId"
        case resourceSpecification = "resourceSpecification"
        case start = "start"
        case state = "state"
        case tags = "tags"
        case usagePrice = "usagePrice"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let durationUnitsDecoded = try containerValues.decodeIfPresent(OfferingDurationUnits.self, forKey: .durationUnits)
        durationUnits = durationUnitsDecoded
        let endDecoded = try containerValues.decodeIfPresent(String.self, forKey: .end)
        end = endDecoded
        let fixedPriceDecoded = try containerValues.decode(Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let offeringDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringDescription)
        offeringDescription = offeringDescriptionDecoded
        let offeringIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(OfferingType.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let reservationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reservationId)
        reservationId = reservationIdDecoded
        let resourceSpecificationDecoded = try containerValues.decodeIfPresent(ReservationResourceSpecification.self, forKey: .resourceSpecification)
        resourceSpecification = resourceSpecificationDecoded
        let startDecoded = try containerValues.decodeIfPresent(String.self, forKey: .start)
        start = startDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ReservationState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let usagePriceDecoded = try containerValues.decode(Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
    }
}

extension DeleteScheduleInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteScheduleInput(channelId: \(String(describing: channelId)))"}
}

extension DeleteScheduleInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteScheduleInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteScheduleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteScheduleInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteScheduleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteScheduleInput>
    public typealias MOutput = OperationOutput<DeleteScheduleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteScheduleOutputError>
}

public struct DeleteScheduleInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteScheduleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteScheduleInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteScheduleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteScheduleInput>
    public typealias MOutput = OperationOutput<DeleteScheduleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteScheduleOutputError>
}

/// Placeholder documentation for DeleteScheduleRequest
public struct DeleteScheduleInput: Equatable {
    /// Id of the channel whose schedule is being deleted.
    public let channelId: String?

    public init (
        channelId: String? = nil
    )
    {
        self.channelId = channelId
    }
}

struct DeleteScheduleInputBody: Equatable {
}

extension DeleteScheduleInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteScheduleOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteScheduleOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteScheduleOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteScheduleOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteScheduleOutputResponse()"}
}

extension DeleteScheduleOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for DeleteScheduleResponse
public struct DeleteScheduleOutputResponse: Equatable {

    public init() {}
}

struct DeleteScheduleOutputResponseBody: Equatable {
}

extension DeleteScheduleOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteTagsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteTagsInput(resourceArn: \(String(describing: resourceArn)), tagKeys: \(String(describing: tagKeys)))"}
}

extension DeleteTagsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteTagsInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteTagsInput>
    public typealias MOutput = OperationOutput<DeleteTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteTagsOutputError>
}

public struct DeleteTagsInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let tagKeys = input.operationInput.tagKeys {
            tagKeys.forEach { queryItemValue in
                let queryItem = URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: String(queryItemValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteTagsInput>
    public typealias MOutput = OperationOutput<DeleteTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteTagsOutputError>
}

/// Placeholder documentation for DeleteTagsRequest
public struct DeleteTagsInput: Equatable {
    /// Placeholder documentation for __string
    public let resourceArn: String?
    /// An array of tag keys to delete
    public let tagKeys: [String]?

    public init (
        resourceArn: String? = nil,
        tagKeys: [String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct DeleteTagsInputBody: Equatable {
}

extension DeleteTagsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteTagsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTagsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTagsOutputError: Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTagsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteTagsOutputResponse()"}
}

extension DeleteTagsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTagsOutputResponse: Equatable {

    public init() {}
}

struct DeleteTagsOutputResponseBody: Equatable {
}

extension DeleteTagsOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeChannelInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeChannelInput(channelId: \(String(describing: channelId)))"}
}

extension DescribeChannelInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeChannelInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeChannelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeChannelInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeChannelInput>
    public typealias MOutput = OperationOutput<DescribeChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeChannelOutputError>
}

public struct DescribeChannelInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeChannelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeChannelInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeChannelInput>
    public typealias MOutput = OperationOutput<DescribeChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeChannelOutputError>
}

/// Placeholder documentation for DescribeChannelRequest
public struct DescribeChannelInput: Equatable {
    /// channel ID
    public let channelId: String?

    public init (
        channelId: String? = nil
    )
    {
        self.channelId = channelId
    }
}

struct DescribeChannelInputBody: Equatable {
}

extension DescribeChannelInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeChannelOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeChannelOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeChannelOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeChannelOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeChannelOutputResponse(arn: \(String(describing: arn)), cdiInputSpecification: \(String(describing: cdiInputSpecification)), channelClass: \(String(describing: channelClass)), destinations: \(String(describing: destinations)), egressEndpoints: \(String(describing: egressEndpoints)), encoderSettings: \(String(describing: encoderSettings)), id: \(String(describing: id)), inputAttachments: \(String(describing: inputAttachments)), inputSpecification: \(String(describing: inputSpecification)), logLevel: \(String(describing: logLevel)), name: \(String(describing: name)), pipelineDetails: \(String(describing: pipelineDetails)), pipelinesRunningCount: \(String(describing: pipelinesRunningCount)), roleArn: \(String(describing: roleArn)), state: \(String(describing: state)), tags: \(String(describing: tags)), vpc: \(String(describing: vpc)))"}
}

extension DescribeChannelOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeChannelOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.cdiInputSpecification = output.cdiInputSpecification
            self.channelClass = output.channelClass
            self.destinations = output.destinations
            self.egressEndpoints = output.egressEndpoints
            self.encoderSettings = output.encoderSettings
            self.id = output.id
            self.inputAttachments = output.inputAttachments
            self.inputSpecification = output.inputSpecification
            self.logLevel = output.logLevel
            self.name = output.name
            self.pipelineDetails = output.pipelineDetails
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.roleArn = output.roleArn
            self.state = output.state
            self.tags = output.tags
            self.vpc = output.vpc
        } else {
            self.arn = nil
            self.cdiInputSpecification = nil
            self.channelClass = nil
            self.destinations = nil
            self.egressEndpoints = nil
            self.encoderSettings = nil
            self.id = nil
            self.inputAttachments = nil
            self.inputSpecification = nil
            self.logLevel = nil
            self.name = nil
            self.pipelineDetails = nil
            self.pipelinesRunningCount = 0
            self.roleArn = nil
            self.state = nil
            self.tags = nil
            self.vpc = nil
        }
    }
}

/// Placeholder documentation for DescribeChannelResponse
public struct DescribeChannelOutputResponse: Equatable {
    /// The unique arn of the channel.
    public let arn: String?
    /// Specification of CDI inputs for this channel
    public let cdiInputSpecification: CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public let channelClass: ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one
    /// destination per output. For other types (HLS, for example), there is
    /// one destination per packager.
    public let destinations: [OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public let egressEndpoints: [ChannelEgressEndpoint]?
    /// Encoder Settings
    public let encoderSettings: EncoderSettings?
    /// The unique id of the channel.
    public let id: String?
    /// List of input attachments for channel.
    public let inputAttachments: [InputAttachment]?
    /// Specification of network and file inputs for this channel
    public let inputSpecification: InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public let logLevel: LogLevel?
    /// The name of the channel. (user-mutable)
    public let name: String?
    /// Runtime details for the pipelines of a running channel.
    public let pipelineDetails: [PipelineDetail]?
    /// The number of currently healthy pipelines.
    public let pipelinesRunningCount: Int
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public let roleArn: String?
    /// Placeholder documentation for ChannelState
    public let state: ChannelState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// Settings for VPC output
    public let vpc: VpcOutputSettingsDescription?

    public init (
        arn: String? = nil,
        cdiInputSpecification: CdiInputSpecification? = nil,
        channelClass: ChannelClass? = nil,
        destinations: [OutputDestination]? = nil,
        egressEndpoints: [ChannelEgressEndpoint]? = nil,
        encoderSettings: EncoderSettings? = nil,
        id: String? = nil,
        inputAttachments: [InputAttachment]? = nil,
        inputSpecification: InputSpecification? = nil,
        logLevel: LogLevel? = nil,
        name: String? = nil,
        pipelineDetails: [PipelineDetail]? = nil,
        pipelinesRunningCount: Int = 0,
        roleArn: String? = nil,
        state: ChannelState? = nil,
        tags: [String:String]? = nil,
        vpc: VpcOutputSettingsDescription? = nil
    )
    {
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.encoderSettings = encoderSettings
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.name = name
        self.pipelineDetails = pipelineDetails
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

struct DescribeChannelOutputResponseBody: Equatable {
    public let arn: String?
    public let cdiInputSpecification: CdiInputSpecification?
    public let channelClass: ChannelClass?
    public let destinations: [OutputDestination]?
    public let egressEndpoints: [ChannelEgressEndpoint]?
    public let encoderSettings: EncoderSettings?
    public let id: String?
    public let inputAttachments: [InputAttachment]?
    public let inputSpecification: InputSpecification?
    public let logLevel: LogLevel?
    public let name: String?
    public let pipelineDetails: [PipelineDetail]?
    public let pipelinesRunningCount: Int
    public let roleArn: String?
    public let state: ChannelState?
    public let tags: [String:String]?
    public let vpc: VpcOutputSettingsDescription?
}

extension DescribeChannelOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case egressEndpoints = "egressEndpoints"
        case encoderSettings = "encoderSettings"
        case id = "id"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case name = "name"
        case pipelineDetails = "pipelineDetails"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case roleArn = "roleArn"
        case state = "state"
        case tags = "tags"
        case vpc = "vpc"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let egressEndpointsContainer = try containerValues.decodeIfPresent([ChannelEgressEndpoint?].self, forKey: .egressEndpoints)
        var egressEndpointsDecoded0:[ChannelEgressEndpoint]? = nil
        if let egressEndpointsContainer = egressEndpointsContainer {
            egressEndpointsDecoded0 = [ChannelEgressEndpoint]()
            for structure0 in egressEndpointsContainer {
                if let structure0 = structure0 {
                    egressEndpointsDecoded0?.append(structure0)
                }
            }
        }
        egressEndpoints = egressEndpointsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([PipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[PipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [PipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let pipelinesRunningCountDecoded = try containerValues.decode(Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ChannelState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(VpcOutputSettingsDescription.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension DescribeInputDeviceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeInputDeviceInput(inputDeviceId: \(String(describing: inputDeviceId)))"}
}

extension DescribeInputDeviceInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeInputDeviceInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeInputDeviceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeInputDeviceInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeInputDeviceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeInputDeviceInput>
    public typealias MOutput = OperationOutput<DescribeInputDeviceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeInputDeviceOutputError>
}

public struct DescribeInputDeviceInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeInputDeviceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeInputDeviceInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeInputDeviceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeInputDeviceInput>
    public typealias MOutput = OperationOutput<DescribeInputDeviceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeInputDeviceOutputError>
}

/// Placeholder documentation for DescribeInputDeviceRequest
public struct DescribeInputDeviceInput: Equatable {
    /// The unique ID of this input device. For example, hd-123456789abcdef.
    public let inputDeviceId: String?

    public init (
        inputDeviceId: String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

struct DescribeInputDeviceInputBody: Equatable {
}

extension DescribeInputDeviceInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeInputDeviceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInputDeviceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInputDeviceOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInputDeviceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeInputDeviceOutputResponse(arn: \(String(describing: arn)), connectionState: \(String(describing: connectionState)), deviceSettingsSyncState: \(String(describing: deviceSettingsSyncState)), deviceUpdateStatus: \(String(describing: deviceUpdateStatus)), hdDeviceSettings: \(String(describing: hdDeviceSettings)), id: \(String(describing: id)), macAddress: \(String(describing: macAddress)), name: \(String(describing: name)), networkSettings: \(String(describing: networkSettings)), serialNumber: \(String(describing: serialNumber)), type: \(String(describing: type)), uhdDeviceSettings: \(String(describing: uhdDeviceSettings)))"}
}

extension DescribeInputDeviceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeInputDeviceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.connectionState = output.connectionState
            self.deviceSettingsSyncState = output.deviceSettingsSyncState
            self.deviceUpdateStatus = output.deviceUpdateStatus
            self.hdDeviceSettings = output.hdDeviceSettings
            self.id = output.id
            self.macAddress = output.macAddress
            self.name = output.name
            self.networkSettings = output.networkSettings
            self.serialNumber = output.serialNumber
            self.type = output.type
            self.uhdDeviceSettings = output.uhdDeviceSettings
        } else {
            self.arn = nil
            self.connectionState = nil
            self.deviceSettingsSyncState = nil
            self.deviceUpdateStatus = nil
            self.hdDeviceSettings = nil
            self.id = nil
            self.macAddress = nil
            self.name = nil
            self.networkSettings = nil
            self.serialNumber = nil
            self.type = nil
            self.uhdDeviceSettings = nil
        }
    }
}

/// Placeholder documentation for DescribeInputDeviceResponse
public struct DescribeInputDeviceOutputResponse: Equatable {
    /// The unique ARN of the input device.
    public let arn: String?
    /// The state of the connection between the input device and AWS.
    public let connectionState: InputDeviceConnectionState?
    /// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
    public let deviceSettingsSyncState: DeviceSettingsSyncState?
    /// The status of software on the input device.
    public let deviceUpdateStatus: DeviceUpdateStatus?
    /// Settings that describe an input device that is type HD.
    public let hdDeviceSettings: InputDeviceHdSettings?
    /// The unique ID of the input device.
    public let id: String?
    /// The network MAC address of the input device.
    public let macAddress: String?
    /// A name that you specify for the input device.
    public let name: String?
    /// The network settings for the input device.
    public let networkSettings: InputDeviceNetworkSettings?
    /// The unique serial number of the input device.
    public let serialNumber: String?
    /// The type of the input device.
    public let type: InputDeviceType?
    /// Settings that describe an input device that is type UHD.
    public let uhdDeviceSettings: InputDeviceUhdSettings?

    public init (
        arn: String? = nil,
        connectionState: InputDeviceConnectionState? = nil,
        deviceSettingsSyncState: DeviceSettingsSyncState? = nil,
        deviceUpdateStatus: DeviceUpdateStatus? = nil,
        hdDeviceSettings: InputDeviceHdSettings? = nil,
        id: String? = nil,
        macAddress: String? = nil,
        name: String? = nil,
        networkSettings: InputDeviceNetworkSettings? = nil,
        serialNumber: String? = nil,
        type: InputDeviceType? = nil,
        uhdDeviceSettings: InputDeviceUhdSettings? = nil
    )
    {
        self.arn = arn
        self.connectionState = connectionState
        self.deviceSettingsSyncState = deviceSettingsSyncState
        self.deviceUpdateStatus = deviceUpdateStatus
        self.hdDeviceSettings = hdDeviceSettings
        self.id = id
        self.macAddress = macAddress
        self.name = name
        self.networkSettings = networkSettings
        self.serialNumber = serialNumber
        self.type = type
        self.uhdDeviceSettings = uhdDeviceSettings
    }
}

struct DescribeInputDeviceOutputResponseBody: Equatable {
    public let arn: String?
    public let connectionState: InputDeviceConnectionState?
    public let deviceSettingsSyncState: DeviceSettingsSyncState?
    public let deviceUpdateStatus: DeviceUpdateStatus?
    public let hdDeviceSettings: InputDeviceHdSettings?
    public let id: String?
    public let macAddress: String?
    public let name: String?
    public let networkSettings: InputDeviceNetworkSettings?
    public let serialNumber: String?
    public let type: InputDeviceType?
    public let uhdDeviceSettings: InputDeviceUhdSettings?
}

extension DescribeInputDeviceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case connectionState = "connectionState"
        case deviceSettingsSyncState = "deviceSettingsSyncState"
        case deviceUpdateStatus = "deviceUpdateStatus"
        case hdDeviceSettings = "hdDeviceSettings"
        case id = "id"
        case macAddress = "macAddress"
        case name = "name"
        case networkSettings = "networkSettings"
        case serialNumber = "serialNumber"
        case type = "type"
        case uhdDeviceSettings = "uhdDeviceSettings"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(InputDeviceConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let deviceSettingsSyncStateDecoded = try containerValues.decodeIfPresent(DeviceSettingsSyncState.self, forKey: .deviceSettingsSyncState)
        deviceSettingsSyncState = deviceSettingsSyncStateDecoded
        let deviceUpdateStatusDecoded = try containerValues.decodeIfPresent(DeviceUpdateStatus.self, forKey: .deviceUpdateStatus)
        deviceUpdateStatus = deviceUpdateStatusDecoded
        let hdDeviceSettingsDecoded = try containerValues.decodeIfPresent(InputDeviceHdSettings.self, forKey: .hdDeviceSettings)
        hdDeviceSettings = hdDeviceSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let macAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .macAddress)
        macAddress = macAddressDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let networkSettingsDecoded = try containerValues.decodeIfPresent(InputDeviceNetworkSettings.self, forKey: .networkSettings)
        networkSettings = networkSettingsDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let typeDecoded = try containerValues.decodeIfPresent(InputDeviceType.self, forKey: .type)
        type = typeDecoded
        let uhdDeviceSettingsDecoded = try containerValues.decodeIfPresent(InputDeviceUhdSettings.self, forKey: .uhdDeviceSettings)
        uhdDeviceSettings = uhdDeviceSettingsDecoded
    }
}

extension DescribeInputDeviceThumbnailInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeInputDeviceThumbnailInput(accept: \(String(describing: accept)), inputDeviceId: \(String(describing: inputDeviceId)))"}
}

extension DescribeInputDeviceThumbnailInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeInputDeviceThumbnailInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeInputDeviceThumbnailInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeInputDeviceThumbnailInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeInputDeviceThumbnailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let accept = input.operationInput.accept {
            input.builder.withHeader(name: "accept", value: String(accept.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeInputDeviceThumbnailInput>
    public typealias MOutput = OperationOutput<DescribeInputDeviceThumbnailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeInputDeviceThumbnailOutputError>
}

public struct DescribeInputDeviceThumbnailInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeInputDeviceThumbnailInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeInputDeviceThumbnailInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeInputDeviceThumbnailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeInputDeviceThumbnailInput>
    public typealias MOutput = OperationOutput<DescribeInputDeviceThumbnailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeInputDeviceThumbnailOutputError>
}

/// Placeholder documentation for DescribeInputDeviceThumbnailRequest
public struct DescribeInputDeviceThumbnailInput: Equatable {
    /// The HTTP Accept header. Indicates the requested type for the thumbnail.
    public let accept: AcceptHeader?
    /// The unique ID of this input device. For example, hd-123456789abcdef.
    public let inputDeviceId: String?

    public init (
        accept: AcceptHeader? = nil,
        inputDeviceId: String? = nil
    )
    {
        self.accept = accept
        self.inputDeviceId = inputDeviceId
    }
}

struct DescribeInputDeviceThumbnailInputBody: Equatable {
}

extension DescribeInputDeviceThumbnailInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeInputDeviceThumbnailOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInputDeviceThumbnailOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInputDeviceThumbnailOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInputDeviceThumbnailOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeInputDeviceThumbnailOutputResponse(body: \(String(describing: body)), contentLength: \(String(describing: contentLength)), contentType: \(String(describing: contentType)), eTag: \(String(describing: eTag)), lastModified: \(String(describing: lastModified)))"}
}

extension DescribeInputDeviceThumbnailOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if let contentLengthHeaderValue = httpResponse.headers.value(for: "Content-Length") {
            self.contentLength = Int(contentLengthHeaderValue) ?? 0
        } else {
            self.contentLength = 0
        }
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            self.contentType = ContentType(rawValue: contentTypeHeaderValue)
        } else {
            self.contentType = nil
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            self.eTag = eTagHeaderValue
        } else {
            self.eTag = nil
        }
        if let lastModifiedHeaderValue = httpResponse.headers.value(for: "Last-Modified") {
            self.lastModified = DateFormatter.rfc5322DateFormatter.date(from: lastModifiedHeaderValue)
        } else {
            self.lastModified = nil
        }
        if case .data(let data) = httpResponse.body,
           let unwrappedData = data {
            self.body = unwrappedData
        } else {
            self.body = nil
        }
    }
}

/// Placeholder documentation for DescribeInputDeviceThumbnailResponse
public struct DescribeInputDeviceThumbnailOutputResponse: Equatable {
    /// The binary data for the thumbnail that the Link device has most recently sent to MediaLive.
    public let body: Data?
    /// The length of the content.
    public let contentLength: Int
    /// Specifies the media type of the thumbnail.
    public let contentType: ContentType?
    /// The unique, cacheable version of this thumbnail.
    public let eTag: String?
    /// The date and time the thumbnail was last updated at the device.
    public let lastModified: Date?

    public init (
        body: Data? = nil,
        contentLength: Int = 0,
        contentType: ContentType? = nil,
        eTag: String? = nil,
        lastModified: Date? = nil
    )
    {
        self.body = body
        self.contentLength = contentLength
        self.contentType = contentType
        self.eTag = eTag
        self.lastModified = lastModified
    }
}

struct DescribeInputDeviceThumbnailOutputResponseBody: Equatable {
    public let body: Data?
}

extension DescribeInputDeviceThumbnailOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case body = "body"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .body)
        body = bodyDecoded
    }
}

extension DescribeInputInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeInputInput(inputId: \(String(describing: inputId)))"}
}

extension DescribeInputInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeInputInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeInputInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeInputInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeInputInput>
    public typealias MOutput = OperationOutput<DescribeInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeInputOutputError>
}

public struct DescribeInputInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeInputInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeInputInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeInputInput>
    public typealias MOutput = OperationOutput<DescribeInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeInputOutputError>
}

/// Placeholder documentation for DescribeInputRequest
public struct DescribeInputInput: Equatable {
    /// Unique ID of the input
    public let inputId: String?

    public init (
        inputId: String? = nil
    )
    {
        self.inputId = inputId
    }
}

struct DescribeInputInputBody: Equatable {
}

extension DescribeInputInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeInputOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInputOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInputOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInputOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeInputOutputResponse(arn: \(String(describing: arn)), attachedChannels: \(String(describing: attachedChannels)), destinations: \(String(describing: destinations)), id: \(String(describing: id)), inputClass: \(String(describing: inputClass)), inputDevices: \(String(describing: inputDevices)), inputPartnerIds: \(String(describing: inputPartnerIds)), inputSourceType: \(String(describing: inputSourceType)), mediaConnectFlows: \(String(describing: mediaConnectFlows)), name: \(String(describing: name)), roleArn: \(String(describing: roleArn)), securityGroups: \(String(describing: securityGroups)), sources: \(String(describing: sources)), state: \(String(describing: state)), tags: \(String(describing: tags)), type: \(String(describing: type)))"}
}

extension DescribeInputOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeInputOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.attachedChannels = output.attachedChannels
            self.destinations = output.destinations
            self.id = output.id
            self.inputClass = output.inputClass
            self.inputDevices = output.inputDevices
            self.inputPartnerIds = output.inputPartnerIds
            self.inputSourceType = output.inputSourceType
            self.mediaConnectFlows = output.mediaConnectFlows
            self.name = output.name
            self.roleArn = output.roleArn
            self.securityGroups = output.securityGroups
            self.sources = output.sources
            self.state = output.state
            self.tags = output.tags
            self.type = output.type
        } else {
            self.arn = nil
            self.attachedChannels = nil
            self.destinations = nil
            self.id = nil
            self.inputClass = nil
            self.inputDevices = nil
            self.inputPartnerIds = nil
            self.inputSourceType = nil
            self.mediaConnectFlows = nil
            self.name = nil
            self.roleArn = nil
            self.securityGroups = nil
            self.sources = nil
            self.state = nil
            self.tags = nil
            self.type = nil
        }
    }
}

/// Placeholder documentation for DescribeInputResponse
public struct DescribeInputOutputResponse: Equatable {
    /// The Unique ARN of the input (generated, immutable).
    public let arn: String?
    /// A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
    public let attachedChannels: [String]?
    /// A list of the destinations of the input (PUSH-type).
    public let destinations: [InputDestination]?
    /// The generated ID of the input (unique for user account, immutable).
    public let id: String?
    /// STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails.
    /// SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also  SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input.
    public let inputClass: InputClass?
    /// Settings for the input devices.
    public let inputDevices: [InputDeviceSettings]?
    /// A list of IDs for all Inputs which are partners of this one.
    public let inputPartnerIds: [String]?
    /// Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes
    /// during input switch actions. Presently, this functionality only works with MP4_FILE inputs.
    public let inputSourceType: InputSourceType?
    /// A list of MediaConnect Flows for this input.
    public let mediaConnectFlows: [MediaConnectFlow]?
    /// The user-assigned name (This is a mutable value).
    public let name: String?
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    public let roleArn: String?
    /// A list of IDs for all the Input Security Groups attached to the input.
    public let securityGroups: [String]?
    /// A list of the sources of the input (PULL-type).
    public let sources: [InputSource]?
    /// Placeholder documentation for InputState
    public let state: InputState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// Placeholder documentation for InputType
    public let type: InputType?

    public init (
        arn: String? = nil,
        attachedChannels: [String]? = nil,
        destinations: [InputDestination]? = nil,
        id: String? = nil,
        inputClass: InputClass? = nil,
        inputDevices: [InputDeviceSettings]? = nil,
        inputPartnerIds: [String]? = nil,
        inputSourceType: InputSourceType? = nil,
        mediaConnectFlows: [MediaConnectFlow]? = nil,
        name: String? = nil,
        roleArn: String? = nil,
        securityGroups: [String]? = nil,
        sources: [InputSource]? = nil,
        state: InputState? = nil,
        tags: [String:String]? = nil,
        type: InputType? = nil
    )
    {
        self.arn = arn
        self.attachedChannels = attachedChannels
        self.destinations = destinations
        self.id = id
        self.inputClass = inputClass
        self.inputDevices = inputDevices
        self.inputPartnerIds = inputPartnerIds
        self.inputSourceType = inputSourceType
        self.mediaConnectFlows = mediaConnectFlows
        self.name = name
        self.roleArn = roleArn
        self.securityGroups = securityGroups
        self.sources = sources
        self.state = state
        self.tags = tags
        self.type = type
    }
}

struct DescribeInputOutputResponseBody: Equatable {
    public let arn: String?
    public let attachedChannels: [String]?
    public let destinations: [InputDestination]?
    public let id: String?
    public let inputClass: InputClass?
    public let inputDevices: [InputDeviceSettings]?
    public let inputPartnerIds: [String]?
    public let inputSourceType: InputSourceType?
    public let mediaConnectFlows: [MediaConnectFlow]?
    public let name: String?
    public let roleArn: String?
    public let securityGroups: [String]?
    public let sources: [InputSource]?
    public let state: InputState?
    public let tags: [String:String]?
    public let type: InputType?
}

extension DescribeInputOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case attachedChannels = "attachedChannels"
        case destinations = "destinations"
        case id = "id"
        case inputClass = "inputClass"
        case inputDevices = "inputDevices"
        case inputPartnerIds = "inputPartnerIds"
        case inputSourceType = "inputSourceType"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case roleArn = "roleArn"
        case securityGroups = "securityGroups"
        case sources = "sources"
        case state = "state"
        case tags = "tags"
        case type = "type"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let attachedChannelsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .attachedChannels)
        var attachedChannelsDecoded0:[String]? = nil
        if let attachedChannelsContainer = attachedChannelsContainer {
            attachedChannelsDecoded0 = [String]()
            for string0 in attachedChannelsContainer {
                if let string0 = string0 {
                    attachedChannelsDecoded0?.append(string0)
                }
            }
        }
        attachedChannels = attachedChannelsDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([InputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[InputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [InputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let inputClassDecoded = try containerValues.decodeIfPresent(InputClass.self, forKey: .inputClass)
        inputClass = inputClassDecoded
        let inputDevicesContainer = try containerValues.decodeIfPresent([InputDeviceSettings?].self, forKey: .inputDevices)
        var inputDevicesDecoded0:[InputDeviceSettings]? = nil
        if let inputDevicesContainer = inputDevicesContainer {
            inputDevicesDecoded0 = [InputDeviceSettings]()
            for structure0 in inputDevicesContainer {
                if let structure0 = structure0 {
                    inputDevicesDecoded0?.append(structure0)
                }
            }
        }
        inputDevices = inputDevicesDecoded0
        let inputPartnerIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .inputPartnerIds)
        var inputPartnerIdsDecoded0:[String]? = nil
        if let inputPartnerIdsContainer = inputPartnerIdsContainer {
            inputPartnerIdsDecoded0 = [String]()
            for string0 in inputPartnerIdsContainer {
                if let string0 = string0 {
                    inputPartnerIdsDecoded0?.append(string0)
                }
            }
        }
        inputPartnerIds = inputPartnerIdsDecoded0
        let inputSourceTypeDecoded = try containerValues.decodeIfPresent(InputSourceType.self, forKey: .inputSourceType)
        inputSourceType = inputSourceTypeDecoded
        let mediaConnectFlowsContainer = try containerValues.decodeIfPresent([MediaConnectFlow?].self, forKey: .mediaConnectFlows)
        var mediaConnectFlowsDecoded0:[MediaConnectFlow]? = nil
        if let mediaConnectFlowsContainer = mediaConnectFlowsContainer {
            mediaConnectFlowsDecoded0 = [MediaConnectFlow]()
            for structure0 in mediaConnectFlowsContainer {
                if let structure0 = structure0 {
                    mediaConnectFlowsDecoded0?.append(structure0)
                }
            }
        }
        mediaConnectFlows = mediaConnectFlowsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let sourcesContainer = try containerValues.decodeIfPresent([InputSource?].self, forKey: .sources)
        var sourcesDecoded0:[InputSource]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [InputSource]()
            for structure0 in sourcesContainer {
                if let structure0 = structure0 {
                    sourcesDecoded0?.append(structure0)
                }
            }
        }
        sources = sourcesDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(InputState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(InputType.self, forKey: .type)
        type = typeDecoded
    }
}

extension DescribeInputSecurityGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeInputSecurityGroupInput(inputSecurityGroupId: \(String(describing: inputSecurityGroupId)))"}
}

extension DescribeInputSecurityGroupInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeInputSecurityGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeInputSecurityGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeInputSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeInputSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeInputSecurityGroupInput>
    public typealias MOutput = OperationOutput<DescribeInputSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeInputSecurityGroupOutputError>
}

public struct DescribeInputSecurityGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeInputSecurityGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeInputSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeInputSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeInputSecurityGroupInput>
    public typealias MOutput = OperationOutput<DescribeInputSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeInputSecurityGroupOutputError>
}

/// Placeholder documentation for DescribeInputSecurityGroupRequest
public struct DescribeInputSecurityGroupInput: Equatable {
    /// The id of the Input Security Group to describe
    public let inputSecurityGroupId: String?

    public init (
        inputSecurityGroupId: String? = nil
    )
    {
        self.inputSecurityGroupId = inputSecurityGroupId
    }
}

struct DescribeInputSecurityGroupInputBody: Equatable {
}

extension DescribeInputSecurityGroupInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeInputSecurityGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInputSecurityGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInputSecurityGroupOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInputSecurityGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeInputSecurityGroupOutputResponse(arn: \(String(describing: arn)), id: \(String(describing: id)), inputs: \(String(describing: inputs)), state: \(String(describing: state)), tags: \(String(describing: tags)), whitelistRules: \(String(describing: whitelistRules)))"}
}

extension DescribeInputSecurityGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeInputSecurityGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.id = output.id
            self.inputs = output.inputs
            self.state = output.state
            self.tags = output.tags
            self.whitelistRules = output.whitelistRules
        } else {
            self.arn = nil
            self.id = nil
            self.inputs = nil
            self.state = nil
            self.tags = nil
            self.whitelistRules = nil
        }
    }
}

/// Placeholder documentation for DescribeInputSecurityGroupResponse
public struct DescribeInputSecurityGroupOutputResponse: Equatable {
    /// Unique ARN of Input Security Group
    public let arn: String?
    /// The Id of the Input Security Group
    public let id: String?
    /// The list of inputs currently using this Input Security Group.
    public let inputs: [String]?
    /// The current state of the Input Security Group.
    public let state: InputSecurityGroupState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// Whitelist rules and their sync status
    public let whitelistRules: [InputWhitelistRule]?

    public init (
        arn: String? = nil,
        id: String? = nil,
        inputs: [String]? = nil,
        state: InputSecurityGroupState? = nil,
        tags: [String:String]? = nil,
        whitelistRules: [InputWhitelistRule]? = nil
    )
    {
        self.arn = arn
        self.id = id
        self.inputs = inputs
        self.state = state
        self.tags = tags
        self.whitelistRules = whitelistRules
    }
}

struct DescribeInputSecurityGroupOutputResponseBody: Equatable {
    public let arn: String?
    public let id: String?
    public let inputs: [String]?
    public let state: InputSecurityGroupState?
    public let tags: [String:String]?
    public let whitelistRules: [InputWhitelistRule]?
}

extension DescribeInputSecurityGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case id = "id"
        case inputs = "inputs"
        case state = "state"
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let inputsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .inputs)
        var inputsDecoded0:[String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [String]()
            for string0 in inputsContainer {
                if let string0 = string0 {
                    inputsDecoded0?.append(string0)
                }
            }
        }
        inputs = inputsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(InputSecurityGroupState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let whitelistRulesContainer = try containerValues.decodeIfPresent([InputWhitelistRule?].self, forKey: .whitelistRules)
        var whitelistRulesDecoded0:[InputWhitelistRule]? = nil
        if let whitelistRulesContainer = whitelistRulesContainer {
            whitelistRulesDecoded0 = [InputWhitelistRule]()
            for structure0 in whitelistRulesContainer {
                if let structure0 = structure0 {
                    whitelistRulesDecoded0?.append(structure0)
                }
            }
        }
        whitelistRules = whitelistRulesDecoded0
    }
}

extension DescribeMultiplexInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeMultiplexInput(multiplexId: \(String(describing: multiplexId)))"}
}

extension DescribeMultiplexInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeMultiplexInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeMultiplexInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMultiplexInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMultiplexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMultiplexInput>
    public typealias MOutput = OperationOutput<DescribeMultiplexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMultiplexOutputError>
}

public struct DescribeMultiplexInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeMultiplexInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMultiplexInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMultiplexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMultiplexInput>
    public typealias MOutput = OperationOutput<DescribeMultiplexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMultiplexOutputError>
}

/// Placeholder documentation for DescribeMultiplexRequest
public struct DescribeMultiplexInput: Equatable {
    /// The ID of the multiplex.
    public let multiplexId: String?

    public init (
        multiplexId: String? = nil
    )
    {
        self.multiplexId = multiplexId
    }
}

struct DescribeMultiplexInputBody: Equatable {
}

extension DescribeMultiplexInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeMultiplexOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMultiplexOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeMultiplexOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMultiplexOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeMultiplexOutputResponse(arn: \(String(describing: arn)), availabilityZones: \(String(describing: availabilityZones)), destinations: \(String(describing: destinations)), id: \(String(describing: id)), multiplexSettings: \(String(describing: multiplexSettings)), name: \(String(describing: name)), pipelinesRunningCount: \(String(describing: pipelinesRunningCount)), programCount: \(String(describing: programCount)), state: \(String(describing: state)), tags: \(String(describing: tags)))"}
}

extension DescribeMultiplexOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeMultiplexOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.availabilityZones = output.availabilityZones
            self.destinations = output.destinations
            self.id = output.id
            self.multiplexSettings = output.multiplexSettings
            self.name = output.name
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.programCount = output.programCount
            self.state = output.state
            self.tags = output.tags
        } else {
            self.arn = nil
            self.availabilityZones = nil
            self.destinations = nil
            self.id = nil
            self.multiplexSettings = nil
            self.name = nil
            self.pipelinesRunningCount = 0
            self.programCount = 0
            self.state = nil
            self.tags = nil
        }
    }
}

/// Placeholder documentation for DescribeMultiplexResponse
public struct DescribeMultiplexOutputResponse: Equatable {
    /// The unique arn of the multiplex.
    public let arn: String?
    /// A list of availability zones for the multiplex.
    public let availabilityZones: [String]?
    /// A list of the multiplex output destinations.
    public let destinations: [MultiplexOutputDestination]?
    /// The unique id of the multiplex.
    public let id: String?
    /// Configuration for a multiplex event.
    public let multiplexSettings: MultiplexSettings?
    /// The name of the multiplex.
    public let name: String?
    /// The number of currently healthy pipelines.
    public let pipelinesRunningCount: Int
    /// The number of programs in the multiplex.
    public let programCount: Int
    /// The current state of the multiplex.
    public let state: MultiplexState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?

    public init (
        arn: String? = nil,
        availabilityZones: [String]? = nil,
        destinations: [MultiplexOutputDestination]? = nil,
        id: String? = nil,
        multiplexSettings: MultiplexSettings? = nil,
        name: String? = nil,
        pipelinesRunningCount: Int = 0,
        programCount: Int = 0,
        state: MultiplexState? = nil,
        tags: [String:String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZones = availabilityZones
        self.destinations = destinations
        self.id = id
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.programCount = programCount
        self.state = state
        self.tags = tags
    }
}

struct DescribeMultiplexOutputResponseBody: Equatable {
    public let arn: String?
    public let availabilityZones: [String]?
    public let destinations: [MultiplexOutputDestination]?
    public let id: String?
    public let multiplexSettings: MultiplexSettings?
    public let name: String?
    public let pipelinesRunningCount: Int
    public let programCount: Int
    public let state: MultiplexState?
    public let tags: [String:String]?
}

extension DescribeMultiplexOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case destinations = "destinations"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MultiplexOutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MultiplexOutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MultiplexOutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decode(Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decode(Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DescribeMultiplexProgramInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeMultiplexProgramInput(multiplexId: \(String(describing: multiplexId)), programName: \(String(describing: programName)))"}
}

extension DescribeMultiplexProgramInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeMultiplexProgramInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeMultiplexProgramInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMultiplexProgramInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMultiplexProgramOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMultiplexProgramInput>
    public typealias MOutput = OperationOutput<DescribeMultiplexProgramOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMultiplexProgramOutputError>
}

public struct DescribeMultiplexProgramInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeMultiplexProgramInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMultiplexProgramInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMultiplexProgramOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMultiplexProgramInput>
    public typealias MOutput = OperationOutput<DescribeMultiplexProgramOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMultiplexProgramOutputError>
}

/// Placeholder documentation for DescribeMultiplexProgramRequest
public struct DescribeMultiplexProgramInput: Equatable {
    /// The ID of the multiplex that the program belongs to.
    public let multiplexId: String?
    /// The name of the program.
    public let programName: String?

    public init (
        multiplexId: String? = nil,
        programName: String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.programName = programName
    }
}

struct DescribeMultiplexProgramInputBody: Equatable {
}

extension DescribeMultiplexProgramInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeMultiplexProgramOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMultiplexProgramOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeMultiplexProgramOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMultiplexProgramOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeMultiplexProgramOutputResponse(channelId: \(String(describing: channelId)), multiplexProgramSettings: \(String(describing: multiplexProgramSettings)), packetIdentifiersMap: \(String(describing: packetIdentifiersMap)), pipelineDetails: \(String(describing: pipelineDetails)), programName: \(String(describing: programName)))"}
}

extension DescribeMultiplexProgramOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeMultiplexProgramOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.channelId = output.channelId
            self.multiplexProgramSettings = output.multiplexProgramSettings
            self.packetIdentifiersMap = output.packetIdentifiersMap
            self.pipelineDetails = output.pipelineDetails
            self.programName = output.programName
        } else {
            self.channelId = nil
            self.multiplexProgramSettings = nil
            self.packetIdentifiersMap = nil
            self.pipelineDetails = nil
            self.programName = nil
        }
    }
}

/// Placeholder documentation for DescribeMultiplexProgramResponse
public struct DescribeMultiplexProgramOutputResponse: Equatable {
    /// The MediaLive channel associated with the program.
    public let channelId: String?
    /// The settings for this multiplex program.
    public let multiplexProgramSettings: MultiplexProgramSettings?
    /// The packet identifier map for this multiplex program.
    public let packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap?
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    public let pipelineDetails: [MultiplexProgramPipelineDetail]?
    /// The name of the multiplex program.
    public let programName: String?

    public init (
        channelId: String? = nil,
        multiplexProgramSettings: MultiplexProgramSettings? = nil,
        packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap? = nil,
        pipelineDetails: [MultiplexProgramPipelineDetail]? = nil,
        programName: String? = nil
    )
    {
        self.channelId = channelId
        self.multiplexProgramSettings = multiplexProgramSettings
        self.packetIdentifiersMap = packetIdentifiersMap
        self.pipelineDetails = pipelineDetails
        self.programName = programName
    }
}

struct DescribeMultiplexProgramOutputResponseBody: Equatable {
    public let channelId: String?
    public let multiplexProgramSettings: MultiplexProgramSettings?
    public let packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap?
    public let pipelineDetails: [MultiplexProgramPipelineDetail]?
    public let programName: String?
}

extension DescribeMultiplexProgramOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channelId = "channelId"
        case multiplexProgramSettings = "multiplexProgramSettings"
        case packetIdentifiersMap = "packetIdentifiersMap"
        case pipelineDetails = "pipelineDetails"
        case programName = "programName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .channelId)
        channelId = channelIdDecoded
        let multiplexProgramSettingsDecoded = try containerValues.decodeIfPresent(MultiplexProgramSettings.self, forKey: .multiplexProgramSettings)
        multiplexProgramSettings = multiplexProgramSettingsDecoded
        let packetIdentifiersMapDecoded = try containerValues.decodeIfPresent(MultiplexProgramPacketIdentifiersMap.self, forKey: .packetIdentifiersMap)
        packetIdentifiersMap = packetIdentifiersMapDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([MultiplexProgramPipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[MultiplexProgramPipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [MultiplexProgramPipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let programNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .programName)
        programName = programNameDecoded
    }
}

extension DescribeOfferingInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeOfferingInput(offeringId: \(String(describing: offeringId)))"}
}

extension DescribeOfferingInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeOfferingInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeOfferingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeOfferingInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeOfferingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeOfferingInput>
    public typealias MOutput = OperationOutput<DescribeOfferingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeOfferingOutputError>
}

public struct DescribeOfferingInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeOfferingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeOfferingInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeOfferingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeOfferingInput>
    public typealias MOutput = OperationOutput<DescribeOfferingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeOfferingOutputError>
}

/// Placeholder documentation for DescribeOfferingRequest
public struct DescribeOfferingInput: Equatable {
    /// Unique offering ID, e.g. '87654321'
    public let offeringId: String?

    public init (
        offeringId: String? = nil
    )
    {
        self.offeringId = offeringId
    }
}

struct DescribeOfferingInputBody: Equatable {
}

extension DescribeOfferingInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeOfferingOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeOfferingOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeOfferingOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeOfferingOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeOfferingOutputResponse(arn: \(String(describing: arn)), currencyCode: \(String(describing: currencyCode)), duration: \(String(describing: duration)), durationUnits: \(String(describing: durationUnits)), fixedPrice: \(String(describing: fixedPrice)), offeringDescription: \(String(describing: offeringDescription)), offeringId: \(String(describing: offeringId)), offeringType: \(String(describing: offeringType)), region: \(String(describing: region)), resourceSpecification: \(String(describing: resourceSpecification)), usagePrice: \(String(describing: usagePrice)))"}
}

extension DescribeOfferingOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeOfferingOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.currencyCode = output.currencyCode
            self.duration = output.duration
            self.durationUnits = output.durationUnits
            self.fixedPrice = output.fixedPrice
            self.offeringDescription = output.offeringDescription
            self.offeringId = output.offeringId
            self.offeringType = output.offeringType
            self.region = output.region
            self.resourceSpecification = output.resourceSpecification
            self.usagePrice = output.usagePrice
        } else {
            self.arn = nil
            self.currencyCode = nil
            self.duration = 0
            self.durationUnits = nil
            self.fixedPrice = 0.0
            self.offeringDescription = nil
            self.offeringId = nil
            self.offeringType = nil
            self.region = nil
            self.resourceSpecification = nil
            self.usagePrice = 0.0
        }
    }
}

/// Placeholder documentation for DescribeOfferingResponse
public struct DescribeOfferingOutputResponse: Equatable {
    /// Unique offering ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:offering:87654321'
    public let arn: String?
    /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
    public let currencyCode: String?
    /// Lease duration, e.g. '12'
    public let duration: Int
    /// Units for duration, e.g. 'MONTHS'
    public let durationUnits: OfferingDurationUnits?
    /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
    public let fixedPrice: Double
    /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
    public let offeringDescription: String?
    /// Unique offering ID, e.g. '87654321'
    public let offeringId: String?
    /// Offering type, e.g. 'NO_UPFRONT'
    public let offeringType: OfferingType?
    /// AWS region, e.g. 'us-west-2'
    public let region: String?
    /// Resource configuration details
    public let resourceSpecification: ReservationResourceSpecification?
    /// Recurring usage charge for each reserved resource, e.g. '157.0'
    public let usagePrice: Double

    public init (
        arn: String? = nil,
        currencyCode: String? = nil,
        duration: Int = 0,
        durationUnits: OfferingDurationUnits? = nil,
        fixedPrice: Double = 0.0,
        offeringDescription: String? = nil,
        offeringId: String? = nil,
        offeringType: OfferingType? = nil,
        region: String? = nil,
        resourceSpecification: ReservationResourceSpecification? = nil,
        usagePrice: Double = 0.0
    )
    {
        self.arn = arn
        self.currencyCode = currencyCode
        self.duration = duration
        self.durationUnits = durationUnits
        self.fixedPrice = fixedPrice
        self.offeringDescription = offeringDescription
        self.offeringId = offeringId
        self.offeringType = offeringType
        self.region = region
        self.resourceSpecification = resourceSpecification
        self.usagePrice = usagePrice
    }
}

struct DescribeOfferingOutputResponseBody: Equatable {
    public let arn: String?
    public let currencyCode: String?
    public let duration: Int
    public let durationUnits: OfferingDurationUnits?
    public let fixedPrice: Double
    public let offeringDescription: String?
    public let offeringId: String?
    public let offeringType: OfferingType?
    public let region: String?
    public let resourceSpecification: ReservationResourceSpecification?
    public let usagePrice: Double
}

extension DescribeOfferingOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case durationUnits = "durationUnits"
        case fixedPrice = "fixedPrice"
        case offeringDescription = "offeringDescription"
        case offeringId = "offeringId"
        case offeringType = "offeringType"
        case region = "region"
        case resourceSpecification = "resourceSpecification"
        case usagePrice = "usagePrice"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let durationUnitsDecoded = try containerValues.decodeIfPresent(OfferingDurationUnits.self, forKey: .durationUnits)
        durationUnits = durationUnitsDecoded
        let fixedPriceDecoded = try containerValues.decode(Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let offeringDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringDescription)
        offeringDescription = offeringDescriptionDecoded
        let offeringIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(OfferingType.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let resourceSpecificationDecoded = try containerValues.decodeIfPresent(ReservationResourceSpecification.self, forKey: .resourceSpecification)
        resourceSpecification = resourceSpecificationDecoded
        let usagePriceDecoded = try containerValues.decode(Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
    }
}

extension DescribeReservationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeReservationInput(reservationId: \(String(describing: reservationId)))"}
}

extension DescribeReservationInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeReservationInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeReservationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeReservationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeReservationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeReservationInput>
    public typealias MOutput = OperationOutput<DescribeReservationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeReservationOutputError>
}

public struct DescribeReservationInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeReservationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeReservationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeReservationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeReservationInput>
    public typealias MOutput = OperationOutput<DescribeReservationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeReservationOutputError>
}

/// Placeholder documentation for DescribeReservationRequest
public struct DescribeReservationInput: Equatable {
    /// Unique reservation ID, e.g. '1234567'
    public let reservationId: String?

    public init (
        reservationId: String? = nil
    )
    {
        self.reservationId = reservationId
    }
}

struct DescribeReservationInputBody: Equatable {
}

extension DescribeReservationInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeReservationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeReservationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeReservationOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReservationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeReservationOutputResponse(arn: \(String(describing: arn)), count: \(String(describing: count)), currencyCode: \(String(describing: currencyCode)), duration: \(String(describing: duration)), durationUnits: \(String(describing: durationUnits)), end: \(String(describing: end)), fixedPrice: \(String(describing: fixedPrice)), name: \(String(describing: name)), offeringDescription: \(String(describing: offeringDescription)), offeringId: \(String(describing: offeringId)), offeringType: \(String(describing: offeringType)), region: \(String(describing: region)), reservationId: \(String(describing: reservationId)), resourceSpecification: \(String(describing: resourceSpecification)), start: \(String(describing: start)), state: \(String(describing: state)), tags: \(String(describing: tags)), usagePrice: \(String(describing: usagePrice)))"}
}

extension DescribeReservationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeReservationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.count = output.count
            self.currencyCode = output.currencyCode
            self.duration = output.duration
            self.durationUnits = output.durationUnits
            self.end = output.end
            self.fixedPrice = output.fixedPrice
            self.name = output.name
            self.offeringDescription = output.offeringDescription
            self.offeringId = output.offeringId
            self.offeringType = output.offeringType
            self.region = output.region
            self.reservationId = output.reservationId
            self.resourceSpecification = output.resourceSpecification
            self.start = output.start
            self.state = output.state
            self.tags = output.tags
            self.usagePrice = output.usagePrice
        } else {
            self.arn = nil
            self.count = 0
            self.currencyCode = nil
            self.duration = 0
            self.durationUnits = nil
            self.end = nil
            self.fixedPrice = 0.0
            self.name = nil
            self.offeringDescription = nil
            self.offeringId = nil
            self.offeringType = nil
            self.region = nil
            self.reservationId = nil
            self.resourceSpecification = nil
            self.start = nil
            self.state = nil
            self.tags = nil
            self.usagePrice = 0.0
        }
    }
}

/// Placeholder documentation for DescribeReservationResponse
public struct DescribeReservationOutputResponse: Equatable {
    /// Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
    public let arn: String?
    /// Number of reserved resources
    public let count: Int
    /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
    public let currencyCode: String?
    /// Lease duration, e.g. '12'
    public let duration: Int
    /// Units for duration, e.g. 'MONTHS'
    public let durationUnits: OfferingDurationUnits?
    /// Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
    public let end: String?
    /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
    public let fixedPrice: Double
    /// User specified reservation name
    public let name: String?
    /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
    public let offeringDescription: String?
    /// Unique offering ID, e.g. '87654321'
    public let offeringId: String?
    /// Offering type, e.g. 'NO_UPFRONT'
    public let offeringType: OfferingType?
    /// AWS region, e.g. 'us-west-2'
    public let region: String?
    /// Unique reservation ID, e.g. '1234567'
    public let reservationId: String?
    /// Resource configuration details
    public let resourceSpecification: ReservationResourceSpecification?
    /// Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
    public let start: String?
    /// Current state of reservation, e.g. 'ACTIVE'
    public let state: ReservationState?
    /// A collection of key-value pairs
    public let tags: [String:String]?
    /// Recurring usage charge for each reserved resource, e.g. '157.0'
    public let usagePrice: Double

    public init (
        arn: String? = nil,
        count: Int = 0,
        currencyCode: String? = nil,
        duration: Int = 0,
        durationUnits: OfferingDurationUnits? = nil,
        end: String? = nil,
        fixedPrice: Double = 0.0,
        name: String? = nil,
        offeringDescription: String? = nil,
        offeringId: String? = nil,
        offeringType: OfferingType? = nil,
        region: String? = nil,
        reservationId: String? = nil,
        resourceSpecification: ReservationResourceSpecification? = nil,
        start: String? = nil,
        state: ReservationState? = nil,
        tags: [String:String]? = nil,
        usagePrice: Double = 0.0
    )
    {
        self.arn = arn
        self.count = count
        self.currencyCode = currencyCode
        self.duration = duration
        self.durationUnits = durationUnits
        self.end = end
        self.fixedPrice = fixedPrice
        self.name = name
        self.offeringDescription = offeringDescription
        self.offeringId = offeringId
        self.offeringType = offeringType
        self.region = region
        self.reservationId = reservationId
        self.resourceSpecification = resourceSpecification
        self.start = start
        self.state = state
        self.tags = tags
        self.usagePrice = usagePrice
    }
}

struct DescribeReservationOutputResponseBody: Equatable {
    public let arn: String?
    public let count: Int
    public let currencyCode: String?
    public let duration: Int
    public let durationUnits: OfferingDurationUnits?
    public let end: String?
    public let fixedPrice: Double
    public let name: String?
    public let offeringDescription: String?
    public let offeringId: String?
    public let offeringType: OfferingType?
    public let region: String?
    public let reservationId: String?
    public let resourceSpecification: ReservationResourceSpecification?
    public let start: String?
    public let state: ReservationState?
    public let tags: [String:String]?
    public let usagePrice: Double
}

extension DescribeReservationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case count = "count"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case durationUnits = "durationUnits"
        case end = "end"
        case fixedPrice = "fixedPrice"
        case name = "name"
        case offeringDescription = "offeringDescription"
        case offeringId = "offeringId"
        case offeringType = "offeringType"
        case region = "region"
        case reservationId = "reservationId"
        case resourceSpecification = "resourceSpecification"
        case start = "start"
        case state = "state"
        case tags = "tags"
        case usagePrice = "usagePrice"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let durationUnitsDecoded = try containerValues.decodeIfPresent(OfferingDurationUnits.self, forKey: .durationUnits)
        durationUnits = durationUnitsDecoded
        let endDecoded = try containerValues.decodeIfPresent(String.self, forKey: .end)
        end = endDecoded
        let fixedPriceDecoded = try containerValues.decode(Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let offeringDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringDescription)
        offeringDescription = offeringDescriptionDecoded
        let offeringIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(OfferingType.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let reservationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reservationId)
        reservationId = reservationIdDecoded
        let resourceSpecificationDecoded = try containerValues.decodeIfPresent(ReservationResourceSpecification.self, forKey: .resourceSpecification)
        resourceSpecification = resourceSpecificationDecoded
        let startDecoded = try containerValues.decodeIfPresent(String.self, forKey: .start)
        start = startDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ReservationState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let usagePriceDecoded = try containerValues.decode(Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
    }
}

extension DescribeScheduleInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeScheduleInput(channelId: \(String(describing: channelId)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeScheduleInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeScheduleInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeScheduleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScheduleInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScheduleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScheduleInput>
    public typealias MOutput = OperationOutput<DescribeScheduleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScheduleOutputError>
}

public struct DescribeScheduleInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeScheduleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeScheduleInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeScheduleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeScheduleInput>
    public typealias MOutput = OperationOutput<DescribeScheduleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeScheduleOutputError>
}

/// Placeholder documentation for DescribeScheduleRequest
public struct DescribeScheduleInput: Equatable {
    /// Id of the channel whose schedule is being updated.
    public let channelId: String?
    /// Placeholder documentation for MaxResults
    public let maxResults: Int
    /// Placeholder documentation for __string
    public let nextToken: String?

    public init (
        channelId: String? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil
    )
    {
        self.channelId = channelId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeScheduleInputBody: Equatable {
}

extension DescribeScheduleInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeScheduleOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeScheduleOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScheduleOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScheduleOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeScheduleOutputResponse(nextToken: \(String(describing: nextToken)), scheduleActions: \(String(describing: scheduleActions)))"}
}

extension DescribeScheduleOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeScheduleOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.scheduleActions = output.scheduleActions
        } else {
            self.nextToken = nil
            self.scheduleActions = nil
        }
    }
}

/// Placeholder documentation for DescribeScheduleResponse
public struct DescribeScheduleOutputResponse: Equatable {
    /// The next token; for use in pagination.
    public let nextToken: String?
    /// The list of actions in the schedule.
    public let scheduleActions: [ScheduleAction]?

    public init (
        nextToken: String? = nil,
        scheduleActions: [ScheduleAction]? = nil
    )
    {
        self.nextToken = nextToken
        self.scheduleActions = scheduleActions
    }
}

struct DescribeScheduleOutputResponseBody: Equatable {
    public let nextToken: String?
    public let scheduleActions: [ScheduleAction]?
}

extension DescribeScheduleOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case scheduleActions = "scheduleActions"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let scheduleActionsContainer = try containerValues.decodeIfPresent([ScheduleAction?].self, forKey: .scheduleActions)
        var scheduleActionsDecoded0:[ScheduleAction]? = nil
        if let scheduleActionsContainer = scheduleActionsContainer {
            scheduleActionsDecoded0 = [ScheduleAction]()
            for structure0 in scheduleActionsContainer {
                if let structure0 = structure0 {
                    scheduleActionsDecoded0?.append(structure0)
                }
            }
        }
        scheduleActions = scheduleActionsDecoded0
    }
}

/// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
public enum DeviceSettingsSyncState {
    case synced
    case syncing
    case sdkUnknown(String)
}

extension DeviceSettingsSyncState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DeviceSettingsSyncState] {
        return [
            .synced,
            .syncing,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .synced: return "SYNCED"
        case .syncing: return "SYNCING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DeviceSettingsSyncState(rawValue: rawValue) ?? DeviceSettingsSyncState.sdkUnknown(rawValue)
    }
}

/// The status of software on the input device.
public enum DeviceUpdateStatus {
    case notUpToDate
    case upToDate
    case sdkUnknown(String)
}

extension DeviceUpdateStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DeviceUpdateStatus] {
        return [
            .notUpToDate,
            .upToDate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .notUpToDate: return "NOT_UP_TO_DATE"
        case .upToDate: return "UP_TO_DATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DeviceUpdateStatus(rawValue: rawValue) ?? DeviceUpdateStatus.sdkUnknown(rawValue)
    }
}

extension DvbNitSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case networkId = "networkId"
        case networkName = "networkName"
        case repInterval = "repInterval"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if networkId != 0 {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let networkName = networkName {
            try encodeContainer.encode(networkName, forKey: .networkName)
        }
        if repInterval != 0 {
            try encodeContainer.encode(repInterval, forKey: .repInterval)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkIdDecoded = try containerValues.decode(Int.self, forKey: .networkId)
        networkId = networkIdDecoded
        let networkNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkName)
        networkName = networkNameDecoded
        let repIntervalDecoded = try containerValues.decode(Int.self, forKey: .repInterval)
        repInterval = repIntervalDecoded
    }
}

extension DvbNitSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DvbNitSettings(networkId: \(String(describing: networkId)), networkName: \(String(describing: networkName)), repInterval: \(String(describing: repInterval)))"}
}

/// DVB Network Information Table (NIT)
public struct DvbNitSettings: Equatable {
    /// The numeric value placed in the Network Information Table (NIT).
    public let networkId: Int
    /// The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
    public let networkName: String?
    /// The number of milliseconds between instances of this table in the output transport stream.
    public let repInterval: Int

    public init (
        networkId: Int = 0,
        networkName: String? = nil,
        repInterval: Int = 0
    )
    {
        self.networkId = networkId
        self.networkName = networkName
        self.repInterval = repInterval
    }
}

/// Dvb Sdt Output Sdt
public enum DvbSdtOutputSdt {
    case sdtFollow
    case sdtFollowIfPresent
    case sdtManual
    case sdtNone
    case sdkUnknown(String)
}

extension DvbSdtOutputSdt : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbSdtOutputSdt] {
        return [
            .sdtFollow,
            .sdtFollowIfPresent,
            .sdtManual,
            .sdtNone,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .sdtFollow: return "SDT_FOLLOW"
        case .sdtFollowIfPresent: return "SDT_FOLLOW_IF_PRESENT"
        case .sdtManual: return "SDT_MANUAL"
        case .sdtNone: return "SDT_NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbSdtOutputSdt(rawValue: rawValue) ?? DvbSdtOutputSdt.sdkUnknown(rawValue)
    }
}

extension DvbSdtSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case outputSdt = "outputSdt"
        case repInterval = "repInterval"
        case serviceName = "serviceName"
        case serviceProviderName = "serviceProviderName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputSdt = outputSdt {
            try encodeContainer.encode(outputSdt.rawValue, forKey: .outputSdt)
        }
        if repInterval != 0 {
            try encodeContainer.encode(repInterval, forKey: .repInterval)
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
        if let serviceProviderName = serviceProviderName {
            try encodeContainer.encode(serviceProviderName, forKey: .serviceProviderName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputSdtDecoded = try containerValues.decodeIfPresent(DvbSdtOutputSdt.self, forKey: .outputSdt)
        outputSdt = outputSdtDecoded
        let repIntervalDecoded = try containerValues.decode(Int.self, forKey: .repInterval)
        repInterval = repIntervalDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let serviceProviderNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceProviderName)
        serviceProviderName = serviceProviderNameDecoded
    }
}

extension DvbSdtSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DvbSdtSettings(outputSdt: \(String(describing: outputSdt)), repInterval: \(String(describing: repInterval)), serviceName: \(String(describing: serviceName)), serviceProviderName: \(String(describing: serviceProviderName)))"}
}

/// DVB Service Description Table (SDT)
public struct DvbSdtSettings: Equatable {
    /// Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
    public let outputSdt: DvbSdtOutputSdt?
    /// The number of milliseconds between instances of this table in the output transport stream.
    public let repInterval: Int
    /// The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
    public let serviceName: String?
    /// The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
    public let serviceProviderName: String?

    public init (
        outputSdt: DvbSdtOutputSdt? = nil,
        repInterval: Int = 0,
        serviceName: String? = nil,
        serviceProviderName: String? = nil
    )
    {
        self.outputSdt = outputSdt
        self.repInterval = repInterval
        self.serviceName = serviceName
        self.serviceProviderName = serviceProviderName
    }
}

/// Dvb Sub Destination Alignment
public enum DvbSubDestinationAlignment {
    case centered
    case `left`
    case smart
    case sdkUnknown(String)
}

extension DvbSubDestinationAlignment : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbSubDestinationAlignment] {
        return [
            .centered,
            .left,
            .smart,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .centered: return "CENTERED"
        case .left: return "LEFT"
        case .smart: return "SMART"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbSubDestinationAlignment(rawValue: rawValue) ?? DvbSubDestinationAlignment.sdkUnknown(rawValue)
    }
}

/// Dvb Sub Destination Background Color
public enum DvbSubDestinationBackgroundColor {
    case black
    case `none`
    case white
    case sdkUnknown(String)
}

extension DvbSubDestinationBackgroundColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbSubDestinationBackgroundColor] {
        return [
            .black,
            .none,
            .white,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .none: return "NONE"
        case .white: return "WHITE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbSubDestinationBackgroundColor(rawValue: rawValue) ?? DvbSubDestinationBackgroundColor.sdkUnknown(rawValue)
    }
}

/// Dvb Sub Destination Font Color
public enum DvbSubDestinationFontColor {
    case black
    case blue
    case green
    case red
    case white
    case yellow
    case sdkUnknown(String)
}

extension DvbSubDestinationFontColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbSubDestinationFontColor] {
        return [
            .black,
            .blue,
            .green,
            .red,
            .white,
            .yellow,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .blue: return "BLUE"
        case .green: return "GREEN"
        case .red: return "RED"
        case .white: return "WHITE"
        case .yellow: return "YELLOW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbSubDestinationFontColor(rawValue: rawValue) ?? DvbSubDestinationFontColor.sdkUnknown(rawValue)
    }
}

/// Dvb Sub Destination Outline Color
public enum DvbSubDestinationOutlineColor {
    case black
    case blue
    case green
    case red
    case white
    case yellow
    case sdkUnknown(String)
}

extension DvbSubDestinationOutlineColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbSubDestinationOutlineColor] {
        return [
            .black,
            .blue,
            .green,
            .red,
            .white,
            .yellow,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .blue: return "BLUE"
        case .green: return "GREEN"
        case .red: return "RED"
        case .white: return "WHITE"
        case .yellow: return "YELLOW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbSubDestinationOutlineColor(rawValue: rawValue) ?? DvbSubDestinationOutlineColor.sdkUnknown(rawValue)
    }
}

extension DvbSubDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alignment = "alignment"
        case backgroundColor = "backgroundColor"
        case backgroundOpacity = "backgroundOpacity"
        case font = "font"
        case fontColor = "fontColor"
        case fontOpacity = "fontOpacity"
        case fontResolution = "fontResolution"
        case fontSize = "fontSize"
        case outlineColor = "outlineColor"
        case outlineSize = "outlineSize"
        case shadowColor = "shadowColor"
        case shadowOpacity = "shadowOpacity"
        case shadowXOffset = "shadowXOffset"
        case shadowYOffset = "shadowYOffset"
        case teletextGridControl = "teletextGridControl"
        case xPosition = "xPosition"
        case yPosition = "yPosition"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alignment = alignment {
            try encodeContainer.encode(alignment.rawValue, forKey: .alignment)
        }
        if let backgroundColor = backgroundColor {
            try encodeContainer.encode(backgroundColor.rawValue, forKey: .backgroundColor)
        }
        if backgroundOpacity != 0 {
            try encodeContainer.encode(backgroundOpacity, forKey: .backgroundOpacity)
        }
        if let font = font {
            try encodeContainer.encode(font, forKey: .font)
        }
        if let fontColor = fontColor {
            try encodeContainer.encode(fontColor.rawValue, forKey: .fontColor)
        }
        if fontOpacity != 0 {
            try encodeContainer.encode(fontOpacity, forKey: .fontOpacity)
        }
        if fontResolution != 0 {
            try encodeContainer.encode(fontResolution, forKey: .fontResolution)
        }
        if let fontSize = fontSize {
            try encodeContainer.encode(fontSize, forKey: .fontSize)
        }
        if let outlineColor = outlineColor {
            try encodeContainer.encode(outlineColor.rawValue, forKey: .outlineColor)
        }
        if outlineSize != 0 {
            try encodeContainer.encode(outlineSize, forKey: .outlineSize)
        }
        if let shadowColor = shadowColor {
            try encodeContainer.encode(shadowColor.rawValue, forKey: .shadowColor)
        }
        if shadowOpacity != 0 {
            try encodeContainer.encode(shadowOpacity, forKey: .shadowOpacity)
        }
        if shadowXOffset != 0 {
            try encodeContainer.encode(shadowXOffset, forKey: .shadowXOffset)
        }
        if shadowYOffset != 0 {
            try encodeContainer.encode(shadowYOffset, forKey: .shadowYOffset)
        }
        if let teletextGridControl = teletextGridControl {
            try encodeContainer.encode(teletextGridControl.rawValue, forKey: .teletextGridControl)
        }
        if xPosition != 0 {
            try encodeContainer.encode(xPosition, forKey: .xPosition)
        }
        if yPosition != 0 {
            try encodeContainer.encode(yPosition, forKey: .yPosition)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alignmentDecoded = try containerValues.decodeIfPresent(DvbSubDestinationAlignment.self, forKey: .alignment)
        alignment = alignmentDecoded
        let backgroundColorDecoded = try containerValues.decodeIfPresent(DvbSubDestinationBackgroundColor.self, forKey: .backgroundColor)
        backgroundColor = backgroundColorDecoded
        let backgroundOpacityDecoded = try containerValues.decode(Int.self, forKey: .backgroundOpacity)
        backgroundOpacity = backgroundOpacityDecoded
        let fontDecoded = try containerValues.decodeIfPresent(InputLocation.self, forKey: .font)
        font = fontDecoded
        let fontColorDecoded = try containerValues.decodeIfPresent(DvbSubDestinationFontColor.self, forKey: .fontColor)
        fontColor = fontColorDecoded
        let fontOpacityDecoded = try containerValues.decode(Int.self, forKey: .fontOpacity)
        fontOpacity = fontOpacityDecoded
        let fontResolutionDecoded = try containerValues.decode(Int.self, forKey: .fontResolution)
        fontResolution = fontResolutionDecoded
        let fontSizeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fontSize)
        fontSize = fontSizeDecoded
        let outlineColorDecoded = try containerValues.decodeIfPresent(DvbSubDestinationOutlineColor.self, forKey: .outlineColor)
        outlineColor = outlineColorDecoded
        let outlineSizeDecoded = try containerValues.decode(Int.self, forKey: .outlineSize)
        outlineSize = outlineSizeDecoded
        let shadowColorDecoded = try containerValues.decodeIfPresent(DvbSubDestinationShadowColor.self, forKey: .shadowColor)
        shadowColor = shadowColorDecoded
        let shadowOpacityDecoded = try containerValues.decode(Int.self, forKey: .shadowOpacity)
        shadowOpacity = shadowOpacityDecoded
        let shadowXOffsetDecoded = try containerValues.decode(Int.self, forKey: .shadowXOffset)
        shadowXOffset = shadowXOffsetDecoded
        let shadowYOffsetDecoded = try containerValues.decode(Int.self, forKey: .shadowYOffset)
        shadowYOffset = shadowYOffsetDecoded
        let teletextGridControlDecoded = try containerValues.decodeIfPresent(DvbSubDestinationTeletextGridControl.self, forKey: .teletextGridControl)
        teletextGridControl = teletextGridControlDecoded
        let xPositionDecoded = try containerValues.decode(Int.self, forKey: .xPosition)
        xPosition = xPositionDecoded
        let yPositionDecoded = try containerValues.decode(Int.self, forKey: .yPosition)
        yPosition = yPositionDecoded
    }
}

extension DvbSubDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DvbSubDestinationSettings(alignment: \(String(describing: alignment)), backgroundColor: \(String(describing: backgroundColor)), backgroundOpacity: \(String(describing: backgroundOpacity)), font: \(String(describing: font)), fontColor: \(String(describing: fontColor)), fontOpacity: \(String(describing: fontOpacity)), fontResolution: \(String(describing: fontResolution)), fontSize: \(String(describing: fontSize)), outlineColor: \(String(describing: outlineColor)), outlineSize: \(String(describing: outlineSize)), shadowColor: \(String(describing: shadowColor)), shadowOpacity: \(String(describing: shadowOpacity)), shadowXOffset: \(String(describing: shadowXOffset)), shadowYOffset: \(String(describing: shadowYOffset)), teletextGridControl: \(String(describing: teletextGridControl)), xPosition: \(String(describing: xPosition)), yPosition: \(String(describing: yPosition)))"}
}

/// Dvb Sub Destination Settings
public struct DvbSubDestinationSettings: Equatable {
    /// If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles.  This option is not valid for source captions that are STL or 608/embedded.  These source settings are already pre-defined by the caption stream.  All burn-in and DVB-Sub font settings must match.
    public let alignment: DvbSubDestinationAlignment?
    /// Specifies the color of the rectangle behind the captions.  All burn-in and DVB-Sub font settings must match.
    public let backgroundColor: DvbSubDestinationBackgroundColor?
    /// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent).  All burn-in and DVB-Sub font settings must match.
    public let backgroundOpacity: Int
    /// External font file used for caption burn-in. File extension must be 'ttf' or 'tte'.  Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts.  All burn-in and DVB-Sub font settings must match.
    public let font: InputLocation?
    /// Specifies the color of the burned-in captions.  This option is not valid for source captions that are STL, 608/embedded or teletext.  These source settings are already pre-defined by the caption stream.  All burn-in and DVB-Sub font settings must match.
    public let fontColor: DvbSubDestinationFontColor?
    /// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent.  All burn-in and DVB-Sub font settings must match.
    public let fontOpacity: Int
    /// Font resolution in DPI (dots per inch); default is 96 dpi.  All burn-in and DVB-Sub font settings must match.
    public let fontResolution: Int
    /// When set to auto fontSize will scale depending on the size of the output.  Giving a positive integer will specify the exact font size in points.  All burn-in and DVB-Sub font settings must match.
    public let fontSize: String?
    /// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let outlineColor: DvbSubDestinationOutlineColor?
    /// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let outlineSize: Int
    /// Specifies the color of the shadow cast by the captions.  All burn-in and DVB-Sub font settings must match.
    public let shadowColor: DvbSubDestinationShadowColor?
    /// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent).  All burn-in and DVB-Sub font settings must match.
    public let shadowOpacity: Int
    /// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left.  All burn-in and DVB-Sub font settings must match.
    public let shadowXOffset: Int
    /// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text.  All burn-in and DVB-Sub font settings must match.
    public let shadowYOffset: Int
    /// Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
    public let teletextGridControl: DvbSubDestinationTeletextGridControl?
    /// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter.  This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream.  All burn-in and DVB-Sub font settings must match.
    public let xPosition: Int
    /// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output.  This option is not valid for source captions that are STL, 608/embedded or teletext.  These source settings are already pre-defined by the caption stream.  All burn-in and DVB-Sub font settings must match.
    public let yPosition: Int

    public init (
        alignment: DvbSubDestinationAlignment? = nil,
        backgroundColor: DvbSubDestinationBackgroundColor? = nil,
        backgroundOpacity: Int = 0,
        font: InputLocation? = nil,
        fontColor: DvbSubDestinationFontColor? = nil,
        fontOpacity: Int = 0,
        fontResolution: Int = 0,
        fontSize: String? = nil,
        outlineColor: DvbSubDestinationOutlineColor? = nil,
        outlineSize: Int = 0,
        shadowColor: DvbSubDestinationShadowColor? = nil,
        shadowOpacity: Int = 0,
        shadowXOffset: Int = 0,
        shadowYOffset: Int = 0,
        teletextGridControl: DvbSubDestinationTeletextGridControl? = nil,
        xPosition: Int = 0,
        yPosition: Int = 0
    )
    {
        self.alignment = alignment
        self.backgroundColor = backgroundColor
        self.backgroundOpacity = backgroundOpacity
        self.font = font
        self.fontColor = fontColor
        self.fontOpacity = fontOpacity
        self.fontResolution = fontResolution
        self.fontSize = fontSize
        self.outlineColor = outlineColor
        self.outlineSize = outlineSize
        self.shadowColor = shadowColor
        self.shadowOpacity = shadowOpacity
        self.shadowXOffset = shadowXOffset
        self.shadowYOffset = shadowYOffset
        self.teletextGridControl = teletextGridControl
        self.xPosition = xPosition
        self.yPosition = yPosition
    }
}

/// Dvb Sub Destination Shadow Color
public enum DvbSubDestinationShadowColor {
    case black
    case `none`
    case white
    case sdkUnknown(String)
}

extension DvbSubDestinationShadowColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbSubDestinationShadowColor] {
        return [
            .black,
            .none,
            .white,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .none: return "NONE"
        case .white: return "WHITE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbSubDestinationShadowColor(rawValue: rawValue) ?? DvbSubDestinationShadowColor.sdkUnknown(rawValue)
    }
}

/// Dvb Sub Destination Teletext Grid Control
public enum DvbSubDestinationTeletextGridControl {
    case fixed
    case scaled
    case sdkUnknown(String)
}

extension DvbSubDestinationTeletextGridControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbSubDestinationTeletextGridControl] {
        return [
            .fixed,
            .scaled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .fixed: return "FIXED"
        case .scaled: return "SCALED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbSubDestinationTeletextGridControl(rawValue: rawValue) ?? DvbSubDestinationTeletextGridControl.sdkUnknown(rawValue)
    }
}

extension DvbSubSourceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pid = "pid"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if pid != 0 {
            try encodeContainer.encode(pid, forKey: .pid)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pidDecoded = try containerValues.decode(Int.self, forKey: .pid)
        pid = pidDecoded
    }
}

extension DvbSubSourceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DvbSubSourceSettings(pid: \(String(describing: pid)))"}
}

/// Dvb Sub Source Settings
public struct DvbSubSourceSettings: Equatable {
    /// When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
    public let pid: Int

    public init (
        pid: Int = 0
    )
    {
        self.pid = pid
    }
}

extension DvbTdtSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case repInterval = "repInterval"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if repInterval != 0 {
            try encodeContainer.encode(repInterval, forKey: .repInterval)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repIntervalDecoded = try containerValues.decode(Int.self, forKey: .repInterval)
        repInterval = repIntervalDecoded
    }
}

extension DvbTdtSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DvbTdtSettings(repInterval: \(String(describing: repInterval)))"}
}

/// DVB Time and Date Table (SDT)
public struct DvbTdtSettings: Equatable {
    /// The number of milliseconds between instances of this table in the output transport stream.
    public let repInterval: Int

    public init (
        repInterval: Int = 0
    )
    {
        self.repInterval = repInterval
    }
}

/// Eac3 Attenuation Control
public enum Eac3AttenuationControl {
    case attenuate3Db
    case `none`
    case sdkUnknown(String)
}

extension Eac3AttenuationControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3AttenuationControl] {
        return [
            .attenuate3Db,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .attenuate3Db: return "ATTENUATE_3_DB"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3AttenuationControl(rawValue: rawValue) ?? Eac3AttenuationControl.sdkUnknown(rawValue)
    }
}

/// Eac3 Bitstream Mode
public enum Eac3BitstreamMode {
    case commentary
    case completeMain
    case emergency
    case hearingImpaired
    case visuallyImpaired
    case sdkUnknown(String)
}

extension Eac3BitstreamMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3BitstreamMode] {
        return [
            .commentary,
            .completeMain,
            .emergency,
            .hearingImpaired,
            .visuallyImpaired,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .commentary: return "COMMENTARY"
        case .completeMain: return "COMPLETE_MAIN"
        case .emergency: return "EMERGENCY"
        case .hearingImpaired: return "HEARING_IMPAIRED"
        case .visuallyImpaired: return "VISUALLY_IMPAIRED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3BitstreamMode(rawValue: rawValue) ?? Eac3BitstreamMode.sdkUnknown(rawValue)
    }
}

/// Eac3 Coding Mode
public enum Eac3CodingMode {
    case codingMode10
    case codingMode20
    case codingMode32
    case sdkUnknown(String)
}

extension Eac3CodingMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3CodingMode] {
        return [
            .codingMode10,
            .codingMode20,
            .codingMode32,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .codingMode10: return "CODING_MODE_1_0"
        case .codingMode20: return "CODING_MODE_2_0"
        case .codingMode32: return "CODING_MODE_3_2"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3CodingMode(rawValue: rawValue) ?? Eac3CodingMode.sdkUnknown(rawValue)
    }
}

/// Eac3 Dc Filter
public enum Eac3DcFilter {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension Eac3DcFilter : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3DcFilter] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3DcFilter(rawValue: rawValue) ?? Eac3DcFilter.sdkUnknown(rawValue)
    }
}

/// Eac3 Drc Line
public enum Eac3DrcLine {
    case filmLight
    case filmStandard
    case musicLight
    case musicStandard
    case `none`
    case speech
    case sdkUnknown(String)
}

extension Eac3DrcLine : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3DrcLine] {
        return [
            .filmLight,
            .filmStandard,
            .musicLight,
            .musicStandard,
            .none,
            .speech,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .filmLight: return "FILM_LIGHT"
        case .filmStandard: return "FILM_STANDARD"
        case .musicLight: return "MUSIC_LIGHT"
        case .musicStandard: return "MUSIC_STANDARD"
        case .none: return "NONE"
        case .speech: return "SPEECH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3DrcLine(rawValue: rawValue) ?? Eac3DrcLine.sdkUnknown(rawValue)
    }
}

/// Eac3 Drc Rf
public enum Eac3DrcRf {
    case filmLight
    case filmStandard
    case musicLight
    case musicStandard
    case `none`
    case speech
    case sdkUnknown(String)
}

extension Eac3DrcRf : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3DrcRf] {
        return [
            .filmLight,
            .filmStandard,
            .musicLight,
            .musicStandard,
            .none,
            .speech,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .filmLight: return "FILM_LIGHT"
        case .filmStandard: return "FILM_STANDARD"
        case .musicLight: return "MUSIC_LIGHT"
        case .musicStandard: return "MUSIC_STANDARD"
        case .none: return "NONE"
        case .speech: return "SPEECH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3DrcRf(rawValue: rawValue) ?? Eac3DrcRf.sdkUnknown(rawValue)
    }
}

/// Eac3 Lfe Control
public enum Eac3LfeControl {
    case lfe
    case noLfe
    case sdkUnknown(String)
}

extension Eac3LfeControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3LfeControl] {
        return [
            .lfe,
            .noLfe,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .lfe: return "LFE"
        case .noLfe: return "NO_LFE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3LfeControl(rawValue: rawValue) ?? Eac3LfeControl.sdkUnknown(rawValue)
    }
}

/// Eac3 Lfe Filter
public enum Eac3LfeFilter {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension Eac3LfeFilter : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3LfeFilter] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3LfeFilter(rawValue: rawValue) ?? Eac3LfeFilter.sdkUnknown(rawValue)
    }
}

/// Eac3 Metadata Control
public enum Eac3MetadataControl {
    case followInput
    case useConfigured
    case sdkUnknown(String)
}

extension Eac3MetadataControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3MetadataControl] {
        return [
            .followInput,
            .useConfigured,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .followInput: return "FOLLOW_INPUT"
        case .useConfigured: return "USE_CONFIGURED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3MetadataControl(rawValue: rawValue) ?? Eac3MetadataControl.sdkUnknown(rawValue)
    }
}

/// Eac3 Passthrough Control
public enum Eac3PassthroughControl {
    case noPassthrough
    case whenPossible
    case sdkUnknown(String)
}

extension Eac3PassthroughControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3PassthroughControl] {
        return [
            .noPassthrough,
            .whenPossible,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noPassthrough: return "NO_PASSTHROUGH"
        case .whenPossible: return "WHEN_POSSIBLE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3PassthroughControl(rawValue: rawValue) ?? Eac3PassthroughControl.sdkUnknown(rawValue)
    }
}

/// Eac3 Phase Control
public enum Eac3PhaseControl {
    case noShift
    case shift90Degrees
    case sdkUnknown(String)
}

extension Eac3PhaseControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3PhaseControl] {
        return [
            .noShift,
            .shift90Degrees,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noShift: return "NO_SHIFT"
        case .shift90Degrees: return "SHIFT_90_DEGREES"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3PhaseControl(rawValue: rawValue) ?? Eac3PhaseControl.sdkUnknown(rawValue)
    }
}

extension Eac3Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attenuationControl = "attenuationControl"
        case bitrate = "bitrate"
        case bitstreamMode = "bitstreamMode"
        case codingMode = "codingMode"
        case dcFilter = "dcFilter"
        case dialnorm = "dialnorm"
        case drcLine = "drcLine"
        case drcRf = "drcRf"
        case lfeControl = "lfeControl"
        case lfeFilter = "lfeFilter"
        case loRoCenterMixLevel = "loRoCenterMixLevel"
        case loRoSurroundMixLevel = "loRoSurroundMixLevel"
        case ltRtCenterMixLevel = "ltRtCenterMixLevel"
        case ltRtSurroundMixLevel = "ltRtSurroundMixLevel"
        case metadataControl = "metadataControl"
        case passthroughControl = "passthroughControl"
        case phaseControl = "phaseControl"
        case stereoDownmix = "stereoDownmix"
        case surroundExMode = "surroundExMode"
        case surroundMode = "surroundMode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attenuationControl = attenuationControl {
            try encodeContainer.encode(attenuationControl.rawValue, forKey: .attenuationControl)
        }
        if bitrate != 0.0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bitstreamMode = bitstreamMode {
            try encodeContainer.encode(bitstreamMode.rawValue, forKey: .bitstreamMode)
        }
        if let codingMode = codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let dcFilter = dcFilter {
            try encodeContainer.encode(dcFilter.rawValue, forKey: .dcFilter)
        }
        if dialnorm != 0 {
            try encodeContainer.encode(dialnorm, forKey: .dialnorm)
        }
        if let drcLine = drcLine {
            try encodeContainer.encode(drcLine.rawValue, forKey: .drcLine)
        }
        if let drcRf = drcRf {
            try encodeContainer.encode(drcRf.rawValue, forKey: .drcRf)
        }
        if let lfeControl = lfeControl {
            try encodeContainer.encode(lfeControl.rawValue, forKey: .lfeControl)
        }
        if let lfeFilter = lfeFilter {
            try encodeContainer.encode(lfeFilter.rawValue, forKey: .lfeFilter)
        }
        if loRoCenterMixLevel != 0.0 {
            try encodeContainer.encode(loRoCenterMixLevel, forKey: .loRoCenterMixLevel)
        }
        if loRoSurroundMixLevel != 0.0 {
            try encodeContainer.encode(loRoSurroundMixLevel, forKey: .loRoSurroundMixLevel)
        }
        if ltRtCenterMixLevel != 0.0 {
            try encodeContainer.encode(ltRtCenterMixLevel, forKey: .ltRtCenterMixLevel)
        }
        if ltRtSurroundMixLevel != 0.0 {
            try encodeContainer.encode(ltRtSurroundMixLevel, forKey: .ltRtSurroundMixLevel)
        }
        if let metadataControl = metadataControl {
            try encodeContainer.encode(metadataControl.rawValue, forKey: .metadataControl)
        }
        if let passthroughControl = passthroughControl {
            try encodeContainer.encode(passthroughControl.rawValue, forKey: .passthroughControl)
        }
        if let phaseControl = phaseControl {
            try encodeContainer.encode(phaseControl.rawValue, forKey: .phaseControl)
        }
        if let stereoDownmix = stereoDownmix {
            try encodeContainer.encode(stereoDownmix.rawValue, forKey: .stereoDownmix)
        }
        if let surroundExMode = surroundExMode {
            try encodeContainer.encode(surroundExMode.rawValue, forKey: .surroundExMode)
        }
        if let surroundMode = surroundMode {
            try encodeContainer.encode(surroundMode.rawValue, forKey: .surroundMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attenuationControlDecoded = try containerValues.decodeIfPresent(Eac3AttenuationControl.self, forKey: .attenuationControl)
        attenuationControl = attenuationControlDecoded
        let bitrateDecoded = try containerValues.decode(Double.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bitstreamModeDecoded = try containerValues.decodeIfPresent(Eac3BitstreamMode.self, forKey: .bitstreamMode)
        bitstreamMode = bitstreamModeDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(Eac3CodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let dcFilterDecoded = try containerValues.decodeIfPresent(Eac3DcFilter.self, forKey: .dcFilter)
        dcFilter = dcFilterDecoded
        let dialnormDecoded = try containerValues.decode(Int.self, forKey: .dialnorm)
        dialnorm = dialnormDecoded
        let drcLineDecoded = try containerValues.decodeIfPresent(Eac3DrcLine.self, forKey: .drcLine)
        drcLine = drcLineDecoded
        let drcRfDecoded = try containerValues.decodeIfPresent(Eac3DrcRf.self, forKey: .drcRf)
        drcRf = drcRfDecoded
        let lfeControlDecoded = try containerValues.decodeIfPresent(Eac3LfeControl.self, forKey: .lfeControl)
        lfeControl = lfeControlDecoded
        let lfeFilterDecoded = try containerValues.decodeIfPresent(Eac3LfeFilter.self, forKey: .lfeFilter)
        lfeFilter = lfeFilterDecoded
        let loRoCenterMixLevelDecoded = try containerValues.decode(Double.self, forKey: .loRoCenterMixLevel)
        loRoCenterMixLevel = loRoCenterMixLevelDecoded
        let loRoSurroundMixLevelDecoded = try containerValues.decode(Double.self, forKey: .loRoSurroundMixLevel)
        loRoSurroundMixLevel = loRoSurroundMixLevelDecoded
        let ltRtCenterMixLevelDecoded = try containerValues.decode(Double.self, forKey: .ltRtCenterMixLevel)
        ltRtCenterMixLevel = ltRtCenterMixLevelDecoded
        let ltRtSurroundMixLevelDecoded = try containerValues.decode(Double.self, forKey: .ltRtSurroundMixLevel)
        ltRtSurroundMixLevel = ltRtSurroundMixLevelDecoded
        let metadataControlDecoded = try containerValues.decodeIfPresent(Eac3MetadataControl.self, forKey: .metadataControl)
        metadataControl = metadataControlDecoded
        let passthroughControlDecoded = try containerValues.decodeIfPresent(Eac3PassthroughControl.self, forKey: .passthroughControl)
        passthroughControl = passthroughControlDecoded
        let phaseControlDecoded = try containerValues.decodeIfPresent(Eac3PhaseControl.self, forKey: .phaseControl)
        phaseControl = phaseControlDecoded
        let stereoDownmixDecoded = try containerValues.decodeIfPresent(Eac3StereoDownmix.self, forKey: .stereoDownmix)
        stereoDownmix = stereoDownmixDecoded
        let surroundExModeDecoded = try containerValues.decodeIfPresent(Eac3SurroundExMode.self, forKey: .surroundExMode)
        surroundExMode = surroundExModeDecoded
        let surroundModeDecoded = try containerValues.decodeIfPresent(Eac3SurroundMode.self, forKey: .surroundMode)
        surroundMode = surroundModeDecoded
    }
}

extension Eac3Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Eac3Settings(attenuationControl: \(String(describing: attenuationControl)), bitrate: \(String(describing: bitrate)), bitstreamMode: \(String(describing: bitstreamMode)), codingMode: \(String(describing: codingMode)), dcFilter: \(String(describing: dcFilter)), dialnorm: \(String(describing: dialnorm)), drcLine: \(String(describing: drcLine)), drcRf: \(String(describing: drcRf)), lfeControl: \(String(describing: lfeControl)), lfeFilter: \(String(describing: lfeFilter)), loRoCenterMixLevel: \(String(describing: loRoCenterMixLevel)), loRoSurroundMixLevel: \(String(describing: loRoSurroundMixLevel)), ltRtCenterMixLevel: \(String(describing: ltRtCenterMixLevel)), ltRtSurroundMixLevel: \(String(describing: ltRtSurroundMixLevel)), metadataControl: \(String(describing: metadataControl)), passthroughControl: \(String(describing: passthroughControl)), phaseControl: \(String(describing: phaseControl)), stereoDownmix: \(String(describing: stereoDownmix)), surroundExMode: \(String(describing: surroundExMode)), surroundMode: \(String(describing: surroundMode)))"}
}

/// Eac3 Settings
public struct Eac3Settings: Equatable {
    /// When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
    public let attenuationControl: Eac3AttenuationControl?
    /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
    public let bitrate: Double
    /// Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
    public let bitstreamMode: Eac3BitstreamMode?
    /// Dolby Digital Plus coding mode. Determines number of channels.
    public let codingMode: Eac3CodingMode?
    /// When set to enabled, activates a DC highpass filter for all input channels.
    public let dcFilter: Eac3DcFilter?
    /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
    public let dialnorm: Int
    /// Sets the Dolby dynamic range compression profile.
    public let drcLine: Eac3DrcLine?
    /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
    public let drcRf: Eac3DrcRf?
    /// When encoding 3/2 audio, setting to lfe enables the LFE channel
    public let lfeControl: Eac3LfeControl?
    /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
    public let lfeFilter: Eac3LfeFilter?
    /// Left only/Right only center mix level. Only used for 3/2 coding mode.
    public let loRoCenterMixLevel: Double
    /// Left only/Right only surround mix level. Only used for 3/2 coding mode.
    public let loRoSurroundMixLevel: Double
    /// Left total/Right total center mix level. Only used for 3/2 coding mode.
    public let ltRtCenterMixLevel: Double
    /// Left total/Right total surround mix level. Only used for 3/2 coding mode.
    public let ltRtSurroundMixLevel: Double
    /// When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
    public let metadataControl: Eac3MetadataControl?
    /// When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
    public let passthroughControl: Eac3PassthroughControl?
    /// When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
    public let phaseControl: Eac3PhaseControl?
    /// Stereo downmix preference. Only used for 3/2 coding mode.
    public let stereoDownmix: Eac3StereoDownmix?
    /// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
    public let surroundExMode: Eac3SurroundExMode?
    /// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
    public let surroundMode: Eac3SurroundMode?

    public init (
        attenuationControl: Eac3AttenuationControl? = nil,
        bitrate: Double = 0.0,
        bitstreamMode: Eac3BitstreamMode? = nil,
        codingMode: Eac3CodingMode? = nil,
        dcFilter: Eac3DcFilter? = nil,
        dialnorm: Int = 0,
        drcLine: Eac3DrcLine? = nil,
        drcRf: Eac3DrcRf? = nil,
        lfeControl: Eac3LfeControl? = nil,
        lfeFilter: Eac3LfeFilter? = nil,
        loRoCenterMixLevel: Double = 0.0,
        loRoSurroundMixLevel: Double = 0.0,
        ltRtCenterMixLevel: Double = 0.0,
        ltRtSurroundMixLevel: Double = 0.0,
        metadataControl: Eac3MetadataControl? = nil,
        passthroughControl: Eac3PassthroughControl? = nil,
        phaseControl: Eac3PhaseControl? = nil,
        stereoDownmix: Eac3StereoDownmix? = nil,
        surroundExMode: Eac3SurroundExMode? = nil,
        surroundMode: Eac3SurroundMode? = nil
    )
    {
        self.attenuationControl = attenuationControl
        self.bitrate = bitrate
        self.bitstreamMode = bitstreamMode
        self.codingMode = codingMode
        self.dcFilter = dcFilter
        self.dialnorm = dialnorm
        self.drcLine = drcLine
        self.drcRf = drcRf
        self.lfeControl = lfeControl
        self.lfeFilter = lfeFilter
        self.loRoCenterMixLevel = loRoCenterMixLevel
        self.loRoSurroundMixLevel = loRoSurroundMixLevel
        self.ltRtCenterMixLevel = ltRtCenterMixLevel
        self.ltRtSurroundMixLevel = ltRtSurroundMixLevel
        self.metadataControl = metadataControl
        self.passthroughControl = passthroughControl
        self.phaseControl = phaseControl
        self.stereoDownmix = stereoDownmix
        self.surroundExMode = surroundExMode
        self.surroundMode = surroundMode
    }
}

/// Eac3 Stereo Downmix
public enum Eac3StereoDownmix {
    case dpl2
    case loRo
    case ltRt
    case notIndicated
    case sdkUnknown(String)
}

extension Eac3StereoDownmix : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3StereoDownmix] {
        return [
            .dpl2,
            .loRo,
            .ltRt,
            .notIndicated,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dpl2: return "DPL2"
        case .loRo: return "LO_RO"
        case .ltRt: return "LT_RT"
        case .notIndicated: return "NOT_INDICATED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3StereoDownmix(rawValue: rawValue) ?? Eac3StereoDownmix.sdkUnknown(rawValue)
    }
}

/// Eac3 Surround Ex Mode
public enum Eac3SurroundExMode {
    case disabled
    case enabled
    case notIndicated
    case sdkUnknown(String)
}

extension Eac3SurroundExMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3SurroundExMode] {
        return [
            .disabled,
            .enabled,
            .notIndicated,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case .notIndicated: return "NOT_INDICATED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3SurroundExMode(rawValue: rawValue) ?? Eac3SurroundExMode.sdkUnknown(rawValue)
    }
}

/// Eac3 Surround Mode
public enum Eac3SurroundMode {
    case disabled
    case enabled
    case notIndicated
    case sdkUnknown(String)
}

extension Eac3SurroundMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3SurroundMode] {
        return [
            .disabled,
            .enabled,
            .notIndicated,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case .notIndicated: return "NOT_INDICATED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3SurroundMode(rawValue: rawValue) ?? Eac3SurroundMode.sdkUnknown(rawValue)
    }
}

extension EbuTtDDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case copyrightHolder = "copyrightHolder"
        case fillLineGap = "fillLineGap"
        case fontFamily = "fontFamily"
        case styleControl = "styleControl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let copyrightHolder = copyrightHolder {
            try encodeContainer.encode(copyrightHolder, forKey: .copyrightHolder)
        }
        if let fillLineGap = fillLineGap {
            try encodeContainer.encode(fillLineGap.rawValue, forKey: .fillLineGap)
        }
        if let fontFamily = fontFamily {
            try encodeContainer.encode(fontFamily, forKey: .fontFamily)
        }
        if let styleControl = styleControl {
            try encodeContainer.encode(styleControl.rawValue, forKey: .styleControl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let copyrightHolderDecoded = try containerValues.decodeIfPresent(String.self, forKey: .copyrightHolder)
        copyrightHolder = copyrightHolderDecoded
        let fillLineGapDecoded = try containerValues.decodeIfPresent(EbuTtDFillLineGapControl.self, forKey: .fillLineGap)
        fillLineGap = fillLineGapDecoded
        let fontFamilyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fontFamily)
        fontFamily = fontFamilyDecoded
        let styleControlDecoded = try containerValues.decodeIfPresent(EbuTtDDestinationStyleControl.self, forKey: .styleControl)
        styleControl = styleControlDecoded
    }
}

extension EbuTtDDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EbuTtDDestinationSettings(copyrightHolder: \(String(describing: copyrightHolder)), fillLineGap: \(String(describing: fillLineGap)), fontFamily: \(String(describing: fontFamily)), styleControl: \(String(describing: styleControl)))"}
}

/// Ebu Tt DDestination Settings
public struct EbuTtDDestinationSettings: Equatable {
    /// Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. Complete this field if you want to include the name of the copyright holder in the copyright metadata tag in the TTML
    public let copyrightHolder: String?
    /// Specifies how to handle the gap between the lines (in multi-line captions).
    ///
    /// - enabled: Fill with the captions background color (as specified in the input captions).
    /// - disabled: Leave the gap unfilled.
    public let fillLineGap: EbuTtDFillLineGapControl?
    /// Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to "monospaced". (If styleControl is set to exclude, the font family is always set to "monospaced".)
    ///
    /// You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size.
    ///
    /// - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font).
    /// - Leave blank to set the family to “monospace”.
    public let fontFamily: String?
    /// Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions.
    ///
    /// - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext.
    /// - exclude: In the font data attached to the EBU-TT captions, set the font family to "monospaced". Do not include any other style information.
    public let styleControl: EbuTtDDestinationStyleControl?

    public init (
        copyrightHolder: String? = nil,
        fillLineGap: EbuTtDFillLineGapControl? = nil,
        fontFamily: String? = nil,
        styleControl: EbuTtDDestinationStyleControl? = nil
    )
    {
        self.copyrightHolder = copyrightHolder
        self.fillLineGap = fillLineGap
        self.fontFamily = fontFamily
        self.styleControl = styleControl
    }
}

/// Ebu Tt DDestination Style Control
public enum EbuTtDDestinationStyleControl {
    case exclude
    case include
    case sdkUnknown(String)
}

extension EbuTtDDestinationStyleControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EbuTtDDestinationStyleControl] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EbuTtDDestinationStyleControl(rawValue: rawValue) ?? EbuTtDDestinationStyleControl.sdkUnknown(rawValue)
    }
}

/// Ebu Tt DFill Line Gap Control
public enum EbuTtDFillLineGapControl {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension EbuTtDFillLineGapControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EbuTtDFillLineGapControl] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EbuTtDFillLineGapControl(rawValue: rawValue) ?? EbuTtDFillLineGapControl.sdkUnknown(rawValue)
    }
}

/// Embedded Convert608 To708
public enum EmbeddedConvert608To708 {
    case disabled
    case upconvert
    case sdkUnknown(String)
}

extension EmbeddedConvert608To708 : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EmbeddedConvert608To708] {
        return [
            .disabled,
            .upconvert,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .upconvert: return "UPCONVERT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EmbeddedConvert608To708(rawValue: rawValue) ?? EmbeddedConvert608To708.sdkUnknown(rawValue)
    }
}

extension EmbeddedDestinationSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension EmbeddedDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EmbeddedDestinationSettings()"}
}

/// Embedded Destination Settings
public struct EmbeddedDestinationSettings: Equatable {

    public init() {}
}

extension EmbeddedPlusScte20DestinationSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension EmbeddedPlusScte20DestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EmbeddedPlusScte20DestinationSettings()"}
}

/// Embedded Plus Scte20 Destination Settings
public struct EmbeddedPlusScte20DestinationSettings: Equatable {

    public init() {}
}

/// Embedded Scte20 Detection
public enum EmbeddedScte20Detection {
    case auto
    case off
    case sdkUnknown(String)
}

extension EmbeddedScte20Detection : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EmbeddedScte20Detection] {
        return [
            .auto,
            .off,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .off: return "OFF"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EmbeddedScte20Detection(rawValue: rawValue) ?? EmbeddedScte20Detection.sdkUnknown(rawValue)
    }
}

extension EmbeddedSourceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case convert608To708 = "convert608To708"
        case scte20Detection = "scte20Detection"
        case source608ChannelNumber = "source608ChannelNumber"
        case source608TrackNumber = "source608TrackNumber"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let convert608To708 = convert608To708 {
            try encodeContainer.encode(convert608To708.rawValue, forKey: .convert608To708)
        }
        if let scte20Detection = scte20Detection {
            try encodeContainer.encode(scte20Detection.rawValue, forKey: .scte20Detection)
        }
        if source608ChannelNumber != 0 {
            try encodeContainer.encode(source608ChannelNumber, forKey: .source608ChannelNumber)
        }
        if source608TrackNumber != 0 {
            try encodeContainer.encode(source608TrackNumber, forKey: .source608TrackNumber)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let convert608To708Decoded = try containerValues.decodeIfPresent(EmbeddedConvert608To708.self, forKey: .convert608To708)
        convert608To708 = convert608To708Decoded
        let scte20DetectionDecoded = try containerValues.decodeIfPresent(EmbeddedScte20Detection.self, forKey: .scte20Detection)
        scte20Detection = scte20DetectionDecoded
        let source608ChannelNumberDecoded = try containerValues.decode(Int.self, forKey: .source608ChannelNumber)
        source608ChannelNumber = source608ChannelNumberDecoded
        let source608TrackNumberDecoded = try containerValues.decode(Int.self, forKey: .source608TrackNumber)
        source608TrackNumber = source608TrackNumberDecoded
    }
}

extension EmbeddedSourceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EmbeddedSourceSettings(convert608To708: \(String(describing: convert608To708)), scte20Detection: \(String(describing: scte20Detection)), source608ChannelNumber: \(String(describing: source608ChannelNumber)), source608TrackNumber: \(String(describing: source608TrackNumber)))"}
}

/// Embedded Source Settings
public struct EmbeddedSourceSettings: Equatable {
    /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    public let convert608To708: EmbeddedConvert608To708?
    /// Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
    public let scte20Detection: EmbeddedScte20Detection?
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    public let source608ChannelNumber: Int
    /// This field is unused and deprecated.
    public let source608TrackNumber: Int

    public init (
        convert608To708: EmbeddedConvert608To708? = nil,
        scte20Detection: EmbeddedScte20Detection? = nil,
        source608ChannelNumber: Int = 0,
        source608TrackNumber: Int = 0
    )
    {
        self.convert608To708 = convert608To708
        self.scte20Detection = scte20Detection
        self.source608ChannelNumber = source608ChannelNumber
        self.source608TrackNumber = source608TrackNumber
    }
}

extension EncoderSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioDescriptions = "audioDescriptions"
        case availBlanking = "availBlanking"
        case availConfiguration = "availConfiguration"
        case blackoutSlate = "blackoutSlate"
        case captionDescriptions = "captionDescriptions"
        case featureActivations = "featureActivations"
        case globalConfiguration = "globalConfiguration"
        case motionGraphicsConfiguration = "motionGraphicsConfiguration"
        case nielsenConfiguration = "nielsenConfiguration"
        case outputGroups = "outputGroups"
        case timecodeConfig = "timecodeConfig"
        case videoDescriptions = "videoDescriptions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDescriptions = audioDescriptions {
            var audioDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioDescriptions)
            for __listofaudiodescription0 in audioDescriptions {
                try audioDescriptionsContainer.encode(__listofaudiodescription0)
            }
        }
        if let availBlanking = availBlanking {
            try encodeContainer.encode(availBlanking, forKey: .availBlanking)
        }
        if let availConfiguration = availConfiguration {
            try encodeContainer.encode(availConfiguration, forKey: .availConfiguration)
        }
        if let blackoutSlate = blackoutSlate {
            try encodeContainer.encode(blackoutSlate, forKey: .blackoutSlate)
        }
        if let captionDescriptions = captionDescriptions {
            var captionDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionDescriptions)
            for __listofcaptiondescription0 in captionDescriptions {
                try captionDescriptionsContainer.encode(__listofcaptiondescription0)
            }
        }
        if let featureActivations = featureActivations {
            try encodeContainer.encode(featureActivations, forKey: .featureActivations)
        }
        if let globalConfiguration = globalConfiguration {
            try encodeContainer.encode(globalConfiguration, forKey: .globalConfiguration)
        }
        if let motionGraphicsConfiguration = motionGraphicsConfiguration {
            try encodeContainer.encode(motionGraphicsConfiguration, forKey: .motionGraphicsConfiguration)
        }
        if let nielsenConfiguration = nielsenConfiguration {
            try encodeContainer.encode(nielsenConfiguration, forKey: .nielsenConfiguration)
        }
        if let outputGroups = outputGroups {
            var outputGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputGroups)
            for __listofoutputgroup0 in outputGroups {
                try outputGroupsContainer.encode(__listofoutputgroup0)
            }
        }
        if let timecodeConfig = timecodeConfig {
            try encodeContainer.encode(timecodeConfig, forKey: .timecodeConfig)
        }
        if let videoDescriptions = videoDescriptions {
            var videoDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .videoDescriptions)
            for __listofvideodescription0 in videoDescriptions {
                try videoDescriptionsContainer.encode(__listofvideodescription0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDescriptionsContainer = try containerValues.decodeIfPresent([AudioDescription?].self, forKey: .audioDescriptions)
        var audioDescriptionsDecoded0:[AudioDescription]? = nil
        if let audioDescriptionsContainer = audioDescriptionsContainer {
            audioDescriptionsDecoded0 = [AudioDescription]()
            for structure0 in audioDescriptionsContainer {
                if let structure0 = structure0 {
                    audioDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        audioDescriptions = audioDescriptionsDecoded0
        let availBlankingDecoded = try containerValues.decodeIfPresent(AvailBlanking.self, forKey: .availBlanking)
        availBlanking = availBlankingDecoded
        let availConfigurationDecoded = try containerValues.decodeIfPresent(AvailConfiguration.self, forKey: .availConfiguration)
        availConfiguration = availConfigurationDecoded
        let blackoutSlateDecoded = try containerValues.decodeIfPresent(BlackoutSlate.self, forKey: .blackoutSlate)
        blackoutSlate = blackoutSlateDecoded
        let captionDescriptionsContainer = try containerValues.decodeIfPresent([CaptionDescription?].self, forKey: .captionDescriptions)
        var captionDescriptionsDecoded0:[CaptionDescription]? = nil
        if let captionDescriptionsContainer = captionDescriptionsContainer {
            captionDescriptionsDecoded0 = [CaptionDescription]()
            for structure0 in captionDescriptionsContainer {
                if let structure0 = structure0 {
                    captionDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        captionDescriptions = captionDescriptionsDecoded0
        let featureActivationsDecoded = try containerValues.decodeIfPresent(FeatureActivations.self, forKey: .featureActivations)
        featureActivations = featureActivationsDecoded
        let globalConfigurationDecoded = try containerValues.decodeIfPresent(GlobalConfiguration.self, forKey: .globalConfiguration)
        globalConfiguration = globalConfigurationDecoded
        let motionGraphicsConfigurationDecoded = try containerValues.decodeIfPresent(MotionGraphicsConfiguration.self, forKey: .motionGraphicsConfiguration)
        motionGraphicsConfiguration = motionGraphicsConfigurationDecoded
        let nielsenConfigurationDecoded = try containerValues.decodeIfPresent(NielsenConfiguration.self, forKey: .nielsenConfiguration)
        nielsenConfiguration = nielsenConfigurationDecoded
        let outputGroupsContainer = try containerValues.decodeIfPresent([OutputGroup?].self, forKey: .outputGroups)
        var outputGroupsDecoded0:[OutputGroup]? = nil
        if let outputGroupsContainer = outputGroupsContainer {
            outputGroupsDecoded0 = [OutputGroup]()
            for structure0 in outputGroupsContainer {
                if let structure0 = structure0 {
                    outputGroupsDecoded0?.append(structure0)
                }
            }
        }
        outputGroups = outputGroupsDecoded0
        let timecodeConfigDecoded = try containerValues.decodeIfPresent(TimecodeConfig.self, forKey: .timecodeConfig)
        timecodeConfig = timecodeConfigDecoded
        let videoDescriptionsContainer = try containerValues.decodeIfPresent([VideoDescription?].self, forKey: .videoDescriptions)
        var videoDescriptionsDecoded0:[VideoDescription]? = nil
        if let videoDescriptionsContainer = videoDescriptionsContainer {
            videoDescriptionsDecoded0 = [VideoDescription]()
            for structure0 in videoDescriptionsContainer {
                if let structure0 = structure0 {
                    videoDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        videoDescriptions = videoDescriptionsDecoded0
    }
}

extension EncoderSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EncoderSettings(audioDescriptions: \(String(describing: audioDescriptions)), availBlanking: \(String(describing: availBlanking)), availConfiguration: \(String(describing: availConfiguration)), blackoutSlate: \(String(describing: blackoutSlate)), captionDescriptions: \(String(describing: captionDescriptions)), featureActivations: \(String(describing: featureActivations)), globalConfiguration: \(String(describing: globalConfiguration)), motionGraphicsConfiguration: \(String(describing: motionGraphicsConfiguration)), nielsenConfiguration: \(String(describing: nielsenConfiguration)), outputGroups: \(String(describing: outputGroups)), timecodeConfig: \(String(describing: timecodeConfig)), videoDescriptions: \(String(describing: videoDescriptions)))"}
}

/// Encoder Settings
public struct EncoderSettings: Equatable {
    /// Placeholder documentation for __listOfAudioDescription
    public let audioDescriptions: [AudioDescription]?
    /// Settings for ad avail blanking.
    public let availBlanking: AvailBlanking?
    /// Event-wide configuration settings for ad avail insertion.
    public let availConfiguration: AvailConfiguration?
    /// Settings for blackout slate.
    public let blackoutSlate: BlackoutSlate?
    /// Settings for caption decriptions
    public let captionDescriptions: [CaptionDescription]?
    /// Feature Activations
    public let featureActivations: FeatureActivations?
    /// Configuration settings that apply to the event as a whole.
    public let globalConfiguration: GlobalConfiguration?
    /// Settings for motion graphics.
    public let motionGraphicsConfiguration: MotionGraphicsConfiguration?
    /// Nielsen configuration settings.
    public let nielsenConfiguration: NielsenConfiguration?
    /// Placeholder documentation for __listOfOutputGroup
    public let outputGroups: [OutputGroup]?
    /// Contains settings used to acquire and adjust timecode information from inputs.
    public let timecodeConfig: TimecodeConfig?
    /// Placeholder documentation for __listOfVideoDescription
    public let videoDescriptions: [VideoDescription]?

    public init (
        audioDescriptions: [AudioDescription]? = nil,
        availBlanking: AvailBlanking? = nil,
        availConfiguration: AvailConfiguration? = nil,
        blackoutSlate: BlackoutSlate? = nil,
        captionDescriptions: [CaptionDescription]? = nil,
        featureActivations: FeatureActivations? = nil,
        globalConfiguration: GlobalConfiguration? = nil,
        motionGraphicsConfiguration: MotionGraphicsConfiguration? = nil,
        nielsenConfiguration: NielsenConfiguration? = nil,
        outputGroups: [OutputGroup]? = nil,
        timecodeConfig: TimecodeConfig? = nil,
        videoDescriptions: [VideoDescription]? = nil
    )
    {
        self.audioDescriptions = audioDescriptions
        self.availBlanking = availBlanking
        self.availConfiguration = availConfiguration
        self.blackoutSlate = blackoutSlate
        self.captionDescriptions = captionDescriptions
        self.featureActivations = featureActivations
        self.globalConfiguration = globalConfiguration
        self.motionGraphicsConfiguration = motionGraphicsConfiguration
        self.nielsenConfiguration = nielsenConfiguration
        self.outputGroups = outputGroups
        self.timecodeConfig = timecodeConfig
        self.videoDescriptions = videoDescriptions
    }
}

extension FailoverCondition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case failoverConditionSettings = "failoverConditionSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failoverConditionSettings = failoverConditionSettings {
            try encodeContainer.encode(failoverConditionSettings, forKey: .failoverConditionSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failoverConditionSettingsDecoded = try containerValues.decodeIfPresent(FailoverConditionSettings.self, forKey: .failoverConditionSettings)
        failoverConditionSettings = failoverConditionSettingsDecoded
    }
}

extension FailoverCondition: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FailoverCondition(failoverConditionSettings: \(String(describing: failoverConditionSettings)))"}
}

/// Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.
public struct FailoverCondition: Equatable {
    /// Failover condition type-specific settings.
    public let failoverConditionSettings: FailoverConditionSettings?

    public init (
        failoverConditionSettings: FailoverConditionSettings? = nil
    )
    {
        self.failoverConditionSettings = failoverConditionSettings
    }
}

extension FailoverConditionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioSilenceSettings = "audioSilenceSettings"
        case inputLossSettings = "inputLossSettings"
        case videoBlackSettings = "videoBlackSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioSilenceSettings = audioSilenceSettings {
            try encodeContainer.encode(audioSilenceSettings, forKey: .audioSilenceSettings)
        }
        if let inputLossSettings = inputLossSettings {
            try encodeContainer.encode(inputLossSettings, forKey: .inputLossSettings)
        }
        if let videoBlackSettings = videoBlackSettings {
            try encodeContainer.encode(videoBlackSettings, forKey: .videoBlackSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioSilenceSettingsDecoded = try containerValues.decodeIfPresent(AudioSilenceFailoverSettings.self, forKey: .audioSilenceSettings)
        audioSilenceSettings = audioSilenceSettingsDecoded
        let inputLossSettingsDecoded = try containerValues.decodeIfPresent(InputLossFailoverSettings.self, forKey: .inputLossSettings)
        inputLossSettings = inputLossSettingsDecoded
        let videoBlackSettingsDecoded = try containerValues.decodeIfPresent(VideoBlackFailoverSettings.self, forKey: .videoBlackSettings)
        videoBlackSettings = videoBlackSettingsDecoded
    }
}

extension FailoverConditionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FailoverConditionSettings(audioSilenceSettings: \(String(describing: audioSilenceSettings)), inputLossSettings: \(String(describing: inputLossSettings)), videoBlackSettings: \(String(describing: videoBlackSettings)))"}
}

/// Settings for one failover condition.
public struct FailoverConditionSettings: Equatable {
    /// MediaLive will perform a failover if the specified audio selector is silent for the specified period.
    public let audioSilenceSettings: AudioSilenceFailoverSettings?
    /// MediaLive will perform a failover if content is not detected in this input for the specified period.
    public let inputLossSettings: InputLossFailoverSettings?
    /// MediaLive will perform a failover if content is considered black for the specified period.
    public let videoBlackSettings: VideoBlackFailoverSettings?

    public init (
        audioSilenceSettings: AudioSilenceFailoverSettings? = nil,
        inputLossSettings: InputLossFailoverSettings? = nil,
        videoBlackSettings: VideoBlackFailoverSettings? = nil
    )
    {
        self.audioSilenceSettings = audioSilenceSettings
        self.inputLossSettings = inputLossSettings
        self.videoBlackSettings = videoBlackSettings
    }
}

extension FeatureActivations: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inputPrepareScheduleActions = "inputPrepareScheduleActions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputPrepareScheduleActions = inputPrepareScheduleActions {
            try encodeContainer.encode(inputPrepareScheduleActions.rawValue, forKey: .inputPrepareScheduleActions)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputPrepareScheduleActionsDecoded = try containerValues.decodeIfPresent(FeatureActivationsInputPrepareScheduleActions.self, forKey: .inputPrepareScheduleActions)
        inputPrepareScheduleActions = inputPrepareScheduleActionsDecoded
    }
}

extension FeatureActivations: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FeatureActivations(inputPrepareScheduleActions: \(String(describing: inputPrepareScheduleActions)))"}
}

/// Feature Activations
public struct FeatureActivations: Equatable {
    /// Enables the Input Prepare feature. You can create Input Prepare actions in the schedule only if this feature is enabled.
    /// If you disable the feature on an existing schedule, make sure that you first delete all input prepare actions from the schedule.
    public let inputPrepareScheduleActions: FeatureActivationsInputPrepareScheduleActions?

    public init (
        inputPrepareScheduleActions: FeatureActivationsInputPrepareScheduleActions? = nil
    )
    {
        self.inputPrepareScheduleActions = inputPrepareScheduleActions
    }
}

/// Feature Activations Input Prepare Schedule Actions
public enum FeatureActivationsInputPrepareScheduleActions {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension FeatureActivationsInputPrepareScheduleActions : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FeatureActivationsInputPrepareScheduleActions] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FeatureActivationsInputPrepareScheduleActions(rawValue: rawValue) ?? FeatureActivationsInputPrepareScheduleActions.sdkUnknown(rawValue)
    }
}

/// Fec Output Include Fec
public enum FecOutputIncludeFec {
    case column
    case columnAndRow
    case sdkUnknown(String)
}

extension FecOutputIncludeFec : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FecOutputIncludeFec] {
        return [
            .column,
            .columnAndRow,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .column: return "COLUMN"
        case .columnAndRow: return "COLUMN_AND_ROW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FecOutputIncludeFec(rawValue: rawValue) ?? FecOutputIncludeFec.sdkUnknown(rawValue)
    }
}

extension FecOutputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case columnDepth = "columnDepth"
        case includeFec = "includeFec"
        case rowLength = "rowLength"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if columnDepth != 0 {
            try encodeContainer.encode(columnDepth, forKey: .columnDepth)
        }
        if let includeFec = includeFec {
            try encodeContainer.encode(includeFec.rawValue, forKey: .includeFec)
        }
        if rowLength != 0 {
            try encodeContainer.encode(rowLength, forKey: .rowLength)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnDepthDecoded = try containerValues.decode(Int.self, forKey: .columnDepth)
        columnDepth = columnDepthDecoded
        let includeFecDecoded = try containerValues.decodeIfPresent(FecOutputIncludeFec.self, forKey: .includeFec)
        includeFec = includeFecDecoded
        let rowLengthDecoded = try containerValues.decode(Int.self, forKey: .rowLength)
        rowLength = rowLengthDecoded
    }
}

extension FecOutputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FecOutputSettings(columnDepth: \(String(describing: columnDepth)), includeFec: \(String(describing: includeFec)), rowLength: \(String(describing: rowLength)))"}
}

/// Fec Output Settings
public struct FecOutputSettings: Equatable {
    /// Parameter D from SMPTE 2022-1. The height of the FEC protection matrix.  The number of transport stream packets per column error correction packet. Must be between 4 and 20, inclusive.
    public let columnDepth: Int
    /// Enables column only or column and row based FEC
    public let includeFec: FecOutputIncludeFec?
    /// Parameter L from SMPTE 2022-1. The width of the FEC protection matrix.  Must be between 1 and 20, inclusive. If only Column FEC is used, then larger values increase robustness.  If Row FEC is used, then this is the number of transport stream packets per row error correction packet, and the value must be between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is column, this value must be 1 to 20, inclusive.
    public let rowLength: Int

    public init (
        columnDepth: Int = 0,
        includeFec: FecOutputIncludeFec? = nil,
        rowLength: Int = 0
    )
    {
        self.columnDepth = columnDepth
        self.includeFec = includeFec
        self.rowLength = rowLength
    }
}

/// Fixed Afd
public enum FixedAfd {
    case afd0000
    case afd0010
    case afd0011
    case afd0100
    case afd1000
    case afd1001
    case afd1010
    case afd1011
    case afd1101
    case afd1110
    case afd1111
    case sdkUnknown(String)
}

extension FixedAfd : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FixedAfd] {
        return [
            .afd0000,
            .afd0010,
            .afd0011,
            .afd0100,
            .afd1000,
            .afd1001,
            .afd1010,
            .afd1011,
            .afd1101,
            .afd1110,
            .afd1111,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .afd0000: return "AFD_0000"
        case .afd0010: return "AFD_0010"
        case .afd0011: return "AFD_0011"
        case .afd0100: return "AFD_0100"
        case .afd1000: return "AFD_1000"
        case .afd1001: return "AFD_1001"
        case .afd1010: return "AFD_1010"
        case .afd1011: return "AFD_1011"
        case .afd1101: return "AFD_1101"
        case .afd1110: return "AFD_1110"
        case .afd1111: return "AFD_1111"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FixedAfd(rawValue: rawValue) ?? FixedAfd.sdkUnknown(rawValue)
    }
}

extension FixedModeScheduleActionStartSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case time = "time"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let time = time {
            try encodeContainer.encode(time, forKey: .time)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .time)
        time = timeDecoded
    }
}

extension FixedModeScheduleActionStartSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FixedModeScheduleActionStartSettings(time: \(String(describing: time)))"}
}

/// Start time for the action.
public struct FixedModeScheduleActionStartSettings: Equatable {
    /// Start time for the action to start in the channel. (Not the time for the action to be added to the schedule: actions are always added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits (for example, mm might be 01) except for the two constants "T" for time and "Z" for "UTC format".
    public let time: String?

    public init (
        time: String? = nil
    )
    {
        self.time = time
    }
}

extension Fmp4HlsSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioRenditionSets = "audioRenditionSets"
        case nielsenId3Behavior = "nielsenId3Behavior"
        case timedMetadataBehavior = "timedMetadataBehavior"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioRenditionSets = audioRenditionSets {
            try encodeContainer.encode(audioRenditionSets, forKey: .audioRenditionSets)
        }
        if let nielsenId3Behavior = nielsenId3Behavior {
            try encodeContainer.encode(nielsenId3Behavior.rawValue, forKey: .nielsenId3Behavior)
        }
        if let timedMetadataBehavior = timedMetadataBehavior {
            try encodeContainer.encode(timedMetadataBehavior.rawValue, forKey: .timedMetadataBehavior)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioRenditionSetsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioRenditionSets)
        audioRenditionSets = audioRenditionSetsDecoded
        let nielsenId3BehaviorDecoded = try containerValues.decodeIfPresent(Fmp4NielsenId3Behavior.self, forKey: .nielsenId3Behavior)
        nielsenId3Behavior = nielsenId3BehaviorDecoded
        let timedMetadataBehaviorDecoded = try containerValues.decodeIfPresent(Fmp4TimedMetadataBehavior.self, forKey: .timedMetadataBehavior)
        timedMetadataBehavior = timedMetadataBehaviorDecoded
    }
}

extension Fmp4HlsSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Fmp4HlsSettings(audioRenditionSets: \(String(describing: audioRenditionSets)), nielsenId3Behavior: \(String(describing: nielsenId3Behavior)), timedMetadataBehavior: \(String(describing: timedMetadataBehavior)))"}
}

/// Fmp4 Hls Settings
public struct Fmp4HlsSettings: Equatable {
    /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
    public let audioRenditionSets: String?
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    public let nielsenId3Behavior: Fmp4NielsenId3Behavior?
    /// When set to passthrough, timed metadata is passed through from input to output.
    public let timedMetadataBehavior: Fmp4TimedMetadataBehavior?

    public init (
        audioRenditionSets: String? = nil,
        nielsenId3Behavior: Fmp4NielsenId3Behavior? = nil,
        timedMetadataBehavior: Fmp4TimedMetadataBehavior? = nil
    )
    {
        self.audioRenditionSets = audioRenditionSets
        self.nielsenId3Behavior = nielsenId3Behavior
        self.timedMetadataBehavior = timedMetadataBehavior
    }
}

/// Fmp4 Nielsen Id3 Behavior
public enum Fmp4NielsenId3Behavior {
    case noPassthrough
    case passthrough
    case sdkUnknown(String)
}

extension Fmp4NielsenId3Behavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Fmp4NielsenId3Behavior] {
        return [
            .noPassthrough,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noPassthrough: return "NO_PASSTHROUGH"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Fmp4NielsenId3Behavior(rawValue: rawValue) ?? Fmp4NielsenId3Behavior.sdkUnknown(rawValue)
    }
}

/// Fmp4 Timed Metadata Behavior
public enum Fmp4TimedMetadataBehavior {
    case noPassthrough
    case passthrough
    case sdkUnknown(String)
}

extension Fmp4TimedMetadataBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Fmp4TimedMetadataBehavior] {
        return [
            .noPassthrough,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noPassthrough: return "NO_PASSTHROUGH"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Fmp4TimedMetadataBehavior(rawValue: rawValue) ?? Fmp4TimedMetadataBehavior.sdkUnknown(rawValue)
    }
}

extension FollowModeScheduleActionStartSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case followPoint = "followPoint"
        case referenceActionName = "referenceActionName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let followPoint = followPoint {
            try encodeContainer.encode(followPoint.rawValue, forKey: .followPoint)
        }
        if let referenceActionName = referenceActionName {
            try encodeContainer.encode(referenceActionName, forKey: .referenceActionName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let followPointDecoded = try containerValues.decodeIfPresent(FollowPoint.self, forKey: .followPoint)
        followPoint = followPointDecoded
        let referenceActionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .referenceActionName)
        referenceActionName = referenceActionNameDecoded
    }
}

extension FollowModeScheduleActionStartSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FollowModeScheduleActionStartSettings(followPoint: \(String(describing: followPoint)), referenceActionName: \(String(describing: referenceActionName)))"}
}

/// Settings to specify if an action follows another.
public struct FollowModeScheduleActionStartSettings: Equatable {
    /// Identifies whether this action starts relative to the start or relative to the end of the reference action.
    public let followPoint: FollowPoint?
    /// The action name of another action that this one refers to.
    public let referenceActionName: String?

    public init (
        followPoint: FollowPoint? = nil,
        referenceActionName: String? = nil
    )
    {
        self.followPoint = followPoint
        self.referenceActionName = referenceActionName
    }
}

/// Follow reference point.
public enum FollowPoint {
    case end
    case start
    case sdkUnknown(String)
}

extension FollowPoint : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FollowPoint] {
        return [
            .end,
            .start,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .end: return "END"
        case .start: return "START"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FollowPoint(rawValue: rawValue) ?? FollowPoint.sdkUnknown(rawValue)
    }
}

extension ForbiddenException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ForbiddenException(message: \(String(describing: message)))"}
}

extension ForbiddenException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ForbiddenExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for ForbiddenException
public struct ForbiddenException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// Placeholder documentation for __string
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ForbiddenExceptionBody: Equatable {
    public let message: String?
}

extension ForbiddenExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FrameCaptureCdnSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case frameCaptureS3Settings = "frameCaptureS3Settings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let frameCaptureS3Settings = frameCaptureS3Settings {
            try encodeContainer.encode(frameCaptureS3Settings, forKey: .frameCaptureS3Settings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let frameCaptureS3SettingsDecoded = try containerValues.decodeIfPresent(FrameCaptureS3Settings.self, forKey: .frameCaptureS3Settings)
        frameCaptureS3Settings = frameCaptureS3SettingsDecoded
    }
}

extension FrameCaptureCdnSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FrameCaptureCdnSettings(frameCaptureS3Settings: \(String(describing: frameCaptureS3Settings)))"}
}

/// Frame Capture Cdn Settings
public struct FrameCaptureCdnSettings: Equatable {
    /// Frame Capture S3 Settings
    public let frameCaptureS3Settings: FrameCaptureS3Settings?

    public init (
        frameCaptureS3Settings: FrameCaptureS3Settings? = nil
    )
    {
        self.frameCaptureS3Settings = frameCaptureS3Settings
    }
}

extension FrameCaptureGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destination = "destination"
        case frameCaptureCdnSettings = "frameCaptureCdnSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let frameCaptureCdnSettings = frameCaptureCdnSettings {
            try encodeContainer.encode(frameCaptureCdnSettings, forKey: .frameCaptureCdnSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
        let frameCaptureCdnSettingsDecoded = try containerValues.decodeIfPresent(FrameCaptureCdnSettings.self, forKey: .frameCaptureCdnSettings)
        frameCaptureCdnSettings = frameCaptureCdnSettingsDecoded
    }
}

extension FrameCaptureGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FrameCaptureGroupSettings(destination: \(String(describing: destination)), frameCaptureCdnSettings: \(String(describing: frameCaptureCdnSettings)))"}
}

/// Frame Capture Group Settings
public struct FrameCaptureGroupSettings: Equatable {
    /// The destination for the frame capture files. Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example, s3ssl://sportsDelivery/highlights/20180820/curling-) or the URI for a MediaStore container, plus a file name prefix (for example, mediastoressl://sportsDelivery/20180820/curling-). The final file names consist of the prefix from the destination field (for example, "curling-") + name modifier + the counter (5 digits, starting from 00001) + extension (which is always .jpg).  For example, curling-low.00001.jpg
    public let destination: OutputLocationRef?
    /// Parameters that control interactions with the CDN.
    public let frameCaptureCdnSettings: FrameCaptureCdnSettings?

    public init (
        destination: OutputLocationRef? = nil,
        frameCaptureCdnSettings: FrameCaptureCdnSettings? = nil
    )
    {
        self.destination = destination
        self.frameCaptureCdnSettings = frameCaptureCdnSettings
    }
}

extension FrameCaptureHlsSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension FrameCaptureHlsSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FrameCaptureHlsSettings()"}
}

/// Frame Capture Hls Settings
public struct FrameCaptureHlsSettings: Equatable {

    public init() {}
}

/// Frame Capture Interval Unit
public enum FrameCaptureIntervalUnit {
    case milliseconds
    case seconds
    case sdkUnknown(String)
}

extension FrameCaptureIntervalUnit : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FrameCaptureIntervalUnit] {
        return [
            .milliseconds,
            .seconds,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .milliseconds: return "MILLISECONDS"
        case .seconds: return "SECONDS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FrameCaptureIntervalUnit(rawValue: rawValue) ?? FrameCaptureIntervalUnit.sdkUnknown(rawValue)
    }
}

extension FrameCaptureOutputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nameModifier = "nameModifier"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nameModifier = nameModifier {
            try encodeContainer.encode(nameModifier, forKey: .nameModifier)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameModifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nameModifier)
        nameModifier = nameModifierDecoded
    }
}

extension FrameCaptureOutputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FrameCaptureOutputSettings(nameModifier: \(String(describing: nameModifier)))"}
}

/// Frame Capture Output Settings
public struct FrameCaptureOutputSettings: Equatable {
    /// Required if the output group contains more than one output. This modifier forms part of the output file name.
    public let nameModifier: String?

    public init (
        nameModifier: String? = nil
    )
    {
        self.nameModifier = nameModifier
    }
}

extension FrameCaptureS3Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cannedAcl = "cannedAcl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cannedAcl = cannedAcl {
            try encodeContainer.encode(cannedAcl.rawValue, forKey: .cannedAcl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cannedAclDecoded = try containerValues.decodeIfPresent(S3CannedAcl.self, forKey: .cannedAcl)
        cannedAcl = cannedAclDecoded
    }
}

extension FrameCaptureS3Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FrameCaptureS3Settings(cannedAcl: \(String(describing: cannedAcl)))"}
}

/// Frame Capture S3 Settings
public struct FrameCaptureS3Settings: Equatable {
    /// Specify the canned ACL to apply to each S3 request. Defaults to none.
    public let cannedAcl: S3CannedAcl?

    public init (
        cannedAcl: S3CannedAcl? = nil
    )
    {
        self.cannedAcl = cannedAcl
    }
}

extension FrameCaptureSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case captureInterval = "captureInterval"
        case captureIntervalUnits = "captureIntervalUnits"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if captureInterval != 0 {
            try encodeContainer.encode(captureInterval, forKey: .captureInterval)
        }
        if let captureIntervalUnits = captureIntervalUnits {
            try encodeContainer.encode(captureIntervalUnits.rawValue, forKey: .captureIntervalUnits)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let captureIntervalDecoded = try containerValues.decode(Int.self, forKey: .captureInterval)
        captureInterval = captureIntervalDecoded
        let captureIntervalUnitsDecoded = try containerValues.decodeIfPresent(FrameCaptureIntervalUnit.self, forKey: .captureIntervalUnits)
        captureIntervalUnits = captureIntervalUnitsDecoded
    }
}

extension FrameCaptureSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FrameCaptureSettings(captureInterval: \(String(describing: captureInterval)), captureIntervalUnits: \(String(describing: captureIntervalUnits)))"}
}

/// Frame Capture Settings
public struct FrameCaptureSettings: Equatable {
    /// The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
    public let captureInterval: Int
    /// Unit for the frame capture interval.
    public let captureIntervalUnits: FrameCaptureIntervalUnit?

    public init (
        captureInterval: Int = 0,
        captureIntervalUnits: FrameCaptureIntervalUnit? = nil
    )
    {
        self.captureInterval = captureInterval
        self.captureIntervalUnits = captureIntervalUnits
    }
}

extension GatewayTimeoutException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GatewayTimeoutException(message: \(String(describing: message)))"}
}

extension GatewayTimeoutException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GatewayTimeoutExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for GatewayTimeoutException
public struct GatewayTimeoutException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server
    /// Placeholder documentation for __string
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct GatewayTimeoutExceptionBody: Equatable {
    public let message: String?
}

extension GatewayTimeoutExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlobalConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case initialAudioGain = "initialAudioGain"
        case inputEndAction = "inputEndAction"
        case inputLossBehavior = "inputLossBehavior"
        case outputLockingMode = "outputLockingMode"
        case outputTimingSource = "outputTimingSource"
        case supportLowFramerateInputs = "supportLowFramerateInputs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if initialAudioGain != 0 {
            try encodeContainer.encode(initialAudioGain, forKey: .initialAudioGain)
        }
        if let inputEndAction = inputEndAction {
            try encodeContainer.encode(inputEndAction.rawValue, forKey: .inputEndAction)
        }
        if let inputLossBehavior = inputLossBehavior {
            try encodeContainer.encode(inputLossBehavior, forKey: .inputLossBehavior)
        }
        if let outputLockingMode = outputLockingMode {
            try encodeContainer.encode(outputLockingMode.rawValue, forKey: .outputLockingMode)
        }
        if let outputTimingSource = outputTimingSource {
            try encodeContainer.encode(outputTimingSource.rawValue, forKey: .outputTimingSource)
        }
        if let supportLowFramerateInputs = supportLowFramerateInputs {
            try encodeContainer.encode(supportLowFramerateInputs.rawValue, forKey: .supportLowFramerateInputs)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let initialAudioGainDecoded = try containerValues.decode(Int.self, forKey: .initialAudioGain)
        initialAudioGain = initialAudioGainDecoded
        let inputEndActionDecoded = try containerValues.decodeIfPresent(GlobalConfigurationInputEndAction.self, forKey: .inputEndAction)
        inputEndAction = inputEndActionDecoded
        let inputLossBehaviorDecoded = try containerValues.decodeIfPresent(InputLossBehavior.self, forKey: .inputLossBehavior)
        inputLossBehavior = inputLossBehaviorDecoded
        let outputLockingModeDecoded = try containerValues.decodeIfPresent(GlobalConfigurationOutputLockingMode.self, forKey: .outputLockingMode)
        outputLockingMode = outputLockingModeDecoded
        let outputTimingSourceDecoded = try containerValues.decodeIfPresent(GlobalConfigurationOutputTimingSource.self, forKey: .outputTimingSource)
        outputTimingSource = outputTimingSourceDecoded
        let supportLowFramerateInputsDecoded = try containerValues.decodeIfPresent(GlobalConfigurationLowFramerateInputs.self, forKey: .supportLowFramerateInputs)
        supportLowFramerateInputs = supportLowFramerateInputsDecoded
    }
}

extension GlobalConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalConfiguration(initialAudioGain: \(String(describing: initialAudioGain)), inputEndAction: \(String(describing: inputEndAction)), inputLossBehavior: \(String(describing: inputLossBehavior)), outputLockingMode: \(String(describing: outputLockingMode)), outputTimingSource: \(String(describing: outputTimingSource)), supportLowFramerateInputs: \(String(describing: supportLowFramerateInputs)))"}
}

/// Global Configuration
public struct GlobalConfiguration: Equatable {
    /// Value to set the initial audio gain for the Live Event.
    public let initialAudioGain: Int
    /// Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input.  When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
    public let inputEndAction: GlobalConfigurationInputEndAction?
    /// Settings for system actions when input is lost.
    public let inputLossBehavior: InputLossBehavior?
    /// Indicates how MediaLive pipelines are synchronized.
    ///
    /// PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other.
    /// EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
    public let outputLockingMode: GlobalConfigurationOutputLockingMode?
    /// Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
    public let outputTimingSource: GlobalConfigurationOutputTimingSource?
    /// Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
    public let supportLowFramerateInputs: GlobalConfigurationLowFramerateInputs?

    public init (
        initialAudioGain: Int = 0,
        inputEndAction: GlobalConfigurationInputEndAction? = nil,
        inputLossBehavior: InputLossBehavior? = nil,
        outputLockingMode: GlobalConfigurationOutputLockingMode? = nil,
        outputTimingSource: GlobalConfigurationOutputTimingSource? = nil,
        supportLowFramerateInputs: GlobalConfigurationLowFramerateInputs? = nil
    )
    {
        self.initialAudioGain = initialAudioGain
        self.inputEndAction = inputEndAction
        self.inputLossBehavior = inputLossBehavior
        self.outputLockingMode = outputLockingMode
        self.outputTimingSource = outputTimingSource
        self.supportLowFramerateInputs = supportLowFramerateInputs
    }
}

/// Global Configuration Input End Action
public enum GlobalConfigurationInputEndAction {
    case `none`
    case switchAndLoopInputs
    case sdkUnknown(String)
}

extension GlobalConfigurationInputEndAction : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GlobalConfigurationInputEndAction] {
        return [
            .none,
            .switchAndLoopInputs,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .switchAndLoopInputs: return "SWITCH_AND_LOOP_INPUTS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GlobalConfigurationInputEndAction(rawValue: rawValue) ?? GlobalConfigurationInputEndAction.sdkUnknown(rawValue)
    }
}

/// Global Configuration Low Framerate Inputs
public enum GlobalConfigurationLowFramerateInputs {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension GlobalConfigurationLowFramerateInputs : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GlobalConfigurationLowFramerateInputs] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GlobalConfigurationLowFramerateInputs(rawValue: rawValue) ?? GlobalConfigurationLowFramerateInputs.sdkUnknown(rawValue)
    }
}

/// Global Configuration Output Locking Mode
public enum GlobalConfigurationOutputLockingMode {
    case epochLocking
    case pipelineLocking
    case sdkUnknown(String)
}

extension GlobalConfigurationOutputLockingMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GlobalConfigurationOutputLockingMode] {
        return [
            .epochLocking,
            .pipelineLocking,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .epochLocking: return "EPOCH_LOCKING"
        case .pipelineLocking: return "PIPELINE_LOCKING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GlobalConfigurationOutputLockingMode(rawValue: rawValue) ?? GlobalConfigurationOutputLockingMode.sdkUnknown(rawValue)
    }
}

/// Global Configuration Output Timing Source
public enum GlobalConfigurationOutputTimingSource {
    case inputClock
    case systemClock
    case sdkUnknown(String)
}

extension GlobalConfigurationOutputTimingSource : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GlobalConfigurationOutputTimingSource] {
        return [
            .inputClock,
            .systemClock,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .inputClock: return "INPUT_CLOCK"
        case .systemClock: return "SYSTEM_CLOCK"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GlobalConfigurationOutputTimingSource(rawValue: rawValue) ?? GlobalConfigurationOutputTimingSource.sdkUnknown(rawValue)
    }
}

/// H264 Adaptive Quantization
public enum H264AdaptiveQuantization {
    case auto
    case high
    case higher
    case low
    case max
    case medium
    case off
    case sdkUnknown(String)
}

extension H264AdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264AdaptiveQuantization] {
        return [
            .auto,
            .high,
            .higher,
            .low,
            .max,
            .medium,
            .off,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .high: return "HIGH"
        case .higher: return "HIGHER"
        case .low: return "LOW"
        case .max: return "MAX"
        case .medium: return "MEDIUM"
        case .off: return "OFF"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264AdaptiveQuantization(rawValue: rawValue) ?? H264AdaptiveQuantization.sdkUnknown(rawValue)
    }
}

/// H264 Color Metadata
public enum H264ColorMetadata {
    case ignore
    case insert
    case sdkUnknown(String)
}

extension H264ColorMetadata : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264ColorMetadata] {
        return [
            .ignore,
            .insert,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ignore: return "IGNORE"
        case .insert: return "INSERT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264ColorMetadata(rawValue: rawValue) ?? H264ColorMetadata.sdkUnknown(rawValue)
    }
}

extension H264ColorSpaceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case colorSpacePassthroughSettings = "colorSpacePassthroughSettings"
        case rec601Settings = "rec601Settings"
        case rec709Settings = "rec709Settings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let colorSpacePassthroughSettings = colorSpacePassthroughSettings {
            try encodeContainer.encode(colorSpacePassthroughSettings, forKey: .colorSpacePassthroughSettings)
        }
        if let rec601Settings = rec601Settings {
            try encodeContainer.encode(rec601Settings, forKey: .rec601Settings)
        }
        if let rec709Settings = rec709Settings {
            try encodeContainer.encode(rec709Settings, forKey: .rec709Settings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let colorSpacePassthroughSettingsDecoded = try containerValues.decodeIfPresent(ColorSpacePassthroughSettings.self, forKey: .colorSpacePassthroughSettings)
        colorSpacePassthroughSettings = colorSpacePassthroughSettingsDecoded
        let rec601SettingsDecoded = try containerValues.decodeIfPresent(Rec601Settings.self, forKey: .rec601Settings)
        rec601Settings = rec601SettingsDecoded
        let rec709SettingsDecoded = try containerValues.decodeIfPresent(Rec709Settings.self, forKey: .rec709Settings)
        rec709Settings = rec709SettingsDecoded
    }
}

extension H264ColorSpaceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "H264ColorSpaceSettings(colorSpacePassthroughSettings: \(String(describing: colorSpacePassthroughSettings)), rec601Settings: \(String(describing: rec601Settings)), rec709Settings: \(String(describing: rec709Settings)))"}
}

/// H264 Color Space Settings
public struct H264ColorSpaceSettings: Equatable {
    /// Passthrough applies no color space conversion to the output
    public let colorSpacePassthroughSettings: ColorSpacePassthroughSettings?
    /// Rec601 Settings
    public let rec601Settings: Rec601Settings?
    /// Rec709 Settings
    public let rec709Settings: Rec709Settings?

    public init (
        colorSpacePassthroughSettings: ColorSpacePassthroughSettings? = nil,
        rec601Settings: Rec601Settings? = nil,
        rec709Settings: Rec709Settings? = nil
    )
    {
        self.colorSpacePassthroughSettings = colorSpacePassthroughSettings
        self.rec601Settings = rec601Settings
        self.rec709Settings = rec709Settings
    }
}

/// H264 Entropy Encoding
public enum H264EntropyEncoding {
    case cabac
    case cavlc
    case sdkUnknown(String)
}

extension H264EntropyEncoding : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264EntropyEncoding] {
        return [
            .cabac,
            .cavlc,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cabac: return "CABAC"
        case .cavlc: return "CAVLC"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264EntropyEncoding(rawValue: rawValue) ?? H264EntropyEncoding.sdkUnknown(rawValue)
    }
}

extension H264FilterSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case temporalFilterSettings = "temporalFilterSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let temporalFilterSettings = temporalFilterSettings {
            try encodeContainer.encode(temporalFilterSettings, forKey: .temporalFilterSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let temporalFilterSettingsDecoded = try containerValues.decodeIfPresent(TemporalFilterSettings.self, forKey: .temporalFilterSettings)
        temporalFilterSettings = temporalFilterSettingsDecoded
    }
}

extension H264FilterSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "H264FilterSettings(temporalFilterSettings: \(String(describing: temporalFilterSettings)))"}
}

/// H264 Filter Settings
public struct H264FilterSettings: Equatable {
    /// Temporal Filter Settings
    public let temporalFilterSettings: TemporalFilterSettings?

    public init (
        temporalFilterSettings: TemporalFilterSettings? = nil
    )
    {
        self.temporalFilterSettings = temporalFilterSettings
    }
}

/// H264 Flicker Aq
public enum H264FlickerAq {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H264FlickerAq : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264FlickerAq] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264FlickerAq(rawValue: rawValue) ?? H264FlickerAq.sdkUnknown(rawValue)
    }
}

/// H264 Force Field Pictures
public enum H264ForceFieldPictures {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H264ForceFieldPictures : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264ForceFieldPictures] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264ForceFieldPictures(rawValue: rawValue) ?? H264ForceFieldPictures.sdkUnknown(rawValue)
    }
}

/// H264 Framerate Control
public enum H264FramerateControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension H264FramerateControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264FramerateControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264FramerateControl(rawValue: rawValue) ?? H264FramerateControl.sdkUnknown(rawValue)
    }
}

/// H264 Gop BReference
public enum H264GopBReference {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H264GopBReference : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264GopBReference] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264GopBReference(rawValue: rawValue) ?? H264GopBReference.sdkUnknown(rawValue)
    }
}

/// H264 Gop Size Units
public enum H264GopSizeUnits {
    case frames
    case seconds
    case sdkUnknown(String)
}

extension H264GopSizeUnits : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264GopSizeUnits] {
        return [
            .frames,
            .seconds,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .frames: return "FRAMES"
        case .seconds: return "SECONDS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264GopSizeUnits(rawValue: rawValue) ?? H264GopSizeUnits.sdkUnknown(rawValue)
    }
}

/// H264 Level
public enum H264Level {
    case h264Level1
    case h264Level11
    case h264Level12
    case h264Level13
    case h264Level2
    case h264Level21
    case h264Level22
    case h264Level3
    case h264Level31
    case h264Level32
    case h264Level4
    case h264Level41
    case h264Level42
    case h264Level5
    case h264Level51
    case h264Level52
    case h264LevelAuto
    case sdkUnknown(String)
}

extension H264Level : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264Level] {
        return [
            .h264Level1,
            .h264Level11,
            .h264Level12,
            .h264Level13,
            .h264Level2,
            .h264Level21,
            .h264Level22,
            .h264Level3,
            .h264Level31,
            .h264Level32,
            .h264Level4,
            .h264Level41,
            .h264Level42,
            .h264Level5,
            .h264Level51,
            .h264Level52,
            .h264LevelAuto,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .h264Level1: return "H264_LEVEL_1"
        case .h264Level11: return "H264_LEVEL_1_1"
        case .h264Level12: return "H264_LEVEL_1_2"
        case .h264Level13: return "H264_LEVEL_1_3"
        case .h264Level2: return "H264_LEVEL_2"
        case .h264Level21: return "H264_LEVEL_2_1"
        case .h264Level22: return "H264_LEVEL_2_2"
        case .h264Level3: return "H264_LEVEL_3"
        case .h264Level31: return "H264_LEVEL_3_1"
        case .h264Level32: return "H264_LEVEL_3_2"
        case .h264Level4: return "H264_LEVEL_4"
        case .h264Level41: return "H264_LEVEL_4_1"
        case .h264Level42: return "H264_LEVEL_4_2"
        case .h264Level5: return "H264_LEVEL_5"
        case .h264Level51: return "H264_LEVEL_5_1"
        case .h264Level52: return "H264_LEVEL_5_2"
        case .h264LevelAuto: return "H264_LEVEL_AUTO"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264Level(rawValue: rawValue) ?? H264Level.sdkUnknown(rawValue)
    }
}

/// H264 Look Ahead Rate Control
public enum H264LookAheadRateControl {
    case high
    case low
    case medium
    case sdkUnknown(String)
}

extension H264LookAheadRateControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264LookAheadRateControl] {
        return [
            .high,
            .low,
            .medium,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .high: return "HIGH"
        case .low: return "LOW"
        case .medium: return "MEDIUM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264LookAheadRateControl(rawValue: rawValue) ?? H264LookAheadRateControl.sdkUnknown(rawValue)
    }
}

/// H264 Par Control
public enum H264ParControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension H264ParControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264ParControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264ParControl(rawValue: rawValue) ?? H264ParControl.sdkUnknown(rawValue)
    }
}

/// H264 Profile
public enum H264Profile {
    case baseline
    case high
    case high10bit
    case high422
    case high42210bit
    case main
    case sdkUnknown(String)
}

extension H264Profile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264Profile] {
        return [
            .baseline,
            .high,
            .high10bit,
            .high422,
            .high42210bit,
            .main,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .baseline: return "BASELINE"
        case .high: return "HIGH"
        case .high10bit: return "HIGH_10BIT"
        case .high422: return "HIGH_422"
        case .high42210bit: return "HIGH_422_10BIT"
        case .main: return "MAIN"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264Profile(rawValue: rawValue) ?? H264Profile.sdkUnknown(rawValue)
    }
}

/// H264 Quality Level
public enum H264QualityLevel {
    case enhancedQuality
    case standardQuality
    case sdkUnknown(String)
}

extension H264QualityLevel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264QualityLevel] {
        return [
            .enhancedQuality,
            .standardQuality,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .enhancedQuality: return "ENHANCED_QUALITY"
        case .standardQuality: return "STANDARD_QUALITY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264QualityLevel(rawValue: rawValue) ?? H264QualityLevel.sdkUnknown(rawValue)
    }
}

/// H264 Rate Control Mode
public enum H264RateControlMode {
    case cbr
    case multiplex
    case qvbr
    case vbr
    case sdkUnknown(String)
}

extension H264RateControlMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264RateControlMode] {
        return [
            .cbr,
            .multiplex,
            .qvbr,
            .vbr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cbr: return "CBR"
        case .multiplex: return "MULTIPLEX"
        case .qvbr: return "QVBR"
        case .vbr: return "VBR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264RateControlMode(rawValue: rawValue) ?? H264RateControlMode.sdkUnknown(rawValue)
    }
}

/// H264 Scan Type
public enum H264ScanType {
    case interlaced
    case progressive
    case sdkUnknown(String)
}

extension H264ScanType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264ScanType] {
        return [
            .interlaced,
            .progressive,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .interlaced: return "INTERLACED"
        case .progressive: return "PROGRESSIVE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264ScanType(rawValue: rawValue) ?? H264ScanType.sdkUnknown(rawValue)
    }
}

/// H264 Scene Change Detect
public enum H264SceneChangeDetect {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H264SceneChangeDetect : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264SceneChangeDetect] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264SceneChangeDetect(rawValue: rawValue) ?? H264SceneChangeDetect.sdkUnknown(rawValue)
    }
}

extension H264Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case afdSignaling = "afdSignaling"
        case bitrate = "bitrate"
        case bufFillPct = "bufFillPct"
        case bufSize = "bufSize"
        case colorMetadata = "colorMetadata"
        case colorSpaceSettings = "colorSpaceSettings"
        case entropyEncoding = "entropyEncoding"
        case filterSettings = "filterSettings"
        case fixedAfd = "fixedAfd"
        case flickerAq = "flickerAq"
        case forceFieldPictures = "forceFieldPictures"
        case framerateControl = "framerateControl"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopBReference = "gopBReference"
        case gopClosedCadence = "gopClosedCadence"
        case gopNumBFrames = "gopNumBFrames"
        case gopSize = "gopSize"
        case gopSizeUnits = "gopSizeUnits"
        case level = "level"
        case lookAheadRateControl = "lookAheadRateControl"
        case maxBitrate = "maxBitrate"
        case minIInterval = "minIInterval"
        case numRefFrames = "numRefFrames"
        case parControl = "parControl"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case profile = "profile"
        case qualityLevel = "qualityLevel"
        case qvbrQualityLevel = "qvbrQualityLevel"
        case rateControlMode = "rateControlMode"
        case scanType = "scanType"
        case sceneChangeDetect = "sceneChangeDetect"
        case slices = "slices"
        case softness = "softness"
        case spatialAq = "spatialAq"
        case subgopLength = "subgopLength"
        case syntax = "syntax"
        case temporalAq = "temporalAq"
        case timecodeInsertion = "timecodeInsertion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if let afdSignaling = afdSignaling {
            try encodeContainer.encode(afdSignaling.rawValue, forKey: .afdSignaling)
        }
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if bufFillPct != 0 {
            try encodeContainer.encode(bufFillPct, forKey: .bufFillPct)
        }
        if bufSize != 0 {
            try encodeContainer.encode(bufSize, forKey: .bufSize)
        }
        if let colorMetadata = colorMetadata {
            try encodeContainer.encode(colorMetadata.rawValue, forKey: .colorMetadata)
        }
        if let colorSpaceSettings = colorSpaceSettings {
            try encodeContainer.encode(colorSpaceSettings, forKey: .colorSpaceSettings)
        }
        if let entropyEncoding = entropyEncoding {
            try encodeContainer.encode(entropyEncoding.rawValue, forKey: .entropyEncoding)
        }
        if let filterSettings = filterSettings {
            try encodeContainer.encode(filterSettings, forKey: .filterSettings)
        }
        if let fixedAfd = fixedAfd {
            try encodeContainer.encode(fixedAfd.rawValue, forKey: .fixedAfd)
        }
        if let flickerAq = flickerAq {
            try encodeContainer.encode(flickerAq.rawValue, forKey: .flickerAq)
        }
        if let forceFieldPictures = forceFieldPictures {
            try encodeContainer.encode(forceFieldPictures.rawValue, forKey: .forceFieldPictures)
        }
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let gopBReference = gopBReference {
            try encodeContainer.encode(gopBReference.rawValue, forKey: .gopBReference)
        }
        if gopClosedCadence != 0 {
            try encodeContainer.encode(gopClosedCadence, forKey: .gopClosedCadence)
        }
        if gopNumBFrames != 0 {
            try encodeContainer.encode(gopNumBFrames, forKey: .gopNumBFrames)
        }
        if gopSize != 0.0 {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if let gopSizeUnits = gopSizeUnits {
            try encodeContainer.encode(gopSizeUnits.rawValue, forKey: .gopSizeUnits)
        }
        if let level = level {
            try encodeContainer.encode(level.rawValue, forKey: .level)
        }
        if let lookAheadRateControl = lookAheadRateControl {
            try encodeContainer.encode(lookAheadRateControl.rawValue, forKey: .lookAheadRateControl)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if minIInterval != 0 {
            try encodeContainer.encode(minIInterval, forKey: .minIInterval)
        }
        if numRefFrames != 0 {
            try encodeContainer.encode(numRefFrames, forKey: .numRefFrames)
        }
        if let parControl = parControl {
            try encodeContainer.encode(parControl.rawValue, forKey: .parControl)
        }
        if parDenominator != 0 {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if parNumerator != 0 {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let profile = profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
        if let qualityLevel = qualityLevel {
            try encodeContainer.encode(qualityLevel.rawValue, forKey: .qualityLevel)
        }
        if qvbrQualityLevel != 0 {
            try encodeContainer.encode(qvbrQualityLevel, forKey: .qvbrQualityLevel)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let scanType = scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if let sceneChangeDetect = sceneChangeDetect {
            try encodeContainer.encode(sceneChangeDetect.rawValue, forKey: .sceneChangeDetect)
        }
        if slices != 0 {
            try encodeContainer.encode(slices, forKey: .slices)
        }
        if softness != 0 {
            try encodeContainer.encode(softness, forKey: .softness)
        }
        if let spatialAq = spatialAq {
            try encodeContainer.encode(spatialAq.rawValue, forKey: .spatialAq)
        }
        if let subgopLength = subgopLength {
            try encodeContainer.encode(subgopLength.rawValue, forKey: .subgopLength)
        }
        if let syntax = syntax {
            try encodeContainer.encode(syntax.rawValue, forKey: .syntax)
        }
        if let temporalAq = temporalAq {
            try encodeContainer.encode(temporalAq.rawValue, forKey: .temporalAq)
        }
        if let timecodeInsertion = timecodeInsertion {
            try encodeContainer.encode(timecodeInsertion.rawValue, forKey: .timecodeInsertion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(H264AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let afdSignalingDecoded = try containerValues.decodeIfPresent(AfdSignaling.self, forKey: .afdSignaling)
        afdSignaling = afdSignalingDecoded
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bufFillPctDecoded = try containerValues.decode(Int.self, forKey: .bufFillPct)
        bufFillPct = bufFillPctDecoded
        let bufSizeDecoded = try containerValues.decode(Int.self, forKey: .bufSize)
        bufSize = bufSizeDecoded
        let colorMetadataDecoded = try containerValues.decodeIfPresent(H264ColorMetadata.self, forKey: .colorMetadata)
        colorMetadata = colorMetadataDecoded
        let colorSpaceSettingsDecoded = try containerValues.decodeIfPresent(H264ColorSpaceSettings.self, forKey: .colorSpaceSettings)
        colorSpaceSettings = colorSpaceSettingsDecoded
        let entropyEncodingDecoded = try containerValues.decodeIfPresent(H264EntropyEncoding.self, forKey: .entropyEncoding)
        entropyEncoding = entropyEncodingDecoded
        let filterSettingsDecoded = try containerValues.decodeIfPresent(H264FilterSettings.self, forKey: .filterSettings)
        filterSettings = filterSettingsDecoded
        let fixedAfdDecoded = try containerValues.decodeIfPresent(FixedAfd.self, forKey: .fixedAfd)
        fixedAfd = fixedAfdDecoded
        let flickerAqDecoded = try containerValues.decodeIfPresent(H264FlickerAq.self, forKey: .flickerAq)
        flickerAq = flickerAqDecoded
        let forceFieldPicturesDecoded = try containerValues.decodeIfPresent(H264ForceFieldPictures.self, forKey: .forceFieldPictures)
        forceFieldPictures = forceFieldPicturesDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(H264FramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopBReferenceDecoded = try containerValues.decodeIfPresent(H264GopBReference.self, forKey: .gopBReference)
        gopBReference = gopBReferenceDecoded
        let gopClosedCadenceDecoded = try containerValues.decode(Int.self, forKey: .gopClosedCadence)
        gopClosedCadence = gopClosedCadenceDecoded
        let gopNumBFramesDecoded = try containerValues.decode(Int.self, forKey: .gopNumBFrames)
        gopNumBFrames = gopNumBFramesDecoded
        let gopSizeDecoded = try containerValues.decode(Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let gopSizeUnitsDecoded = try containerValues.decodeIfPresent(H264GopSizeUnits.self, forKey: .gopSizeUnits)
        gopSizeUnits = gopSizeUnitsDecoded
        let levelDecoded = try containerValues.decodeIfPresent(H264Level.self, forKey: .level)
        level = levelDecoded
        let lookAheadRateControlDecoded = try containerValues.decodeIfPresent(H264LookAheadRateControl.self, forKey: .lookAheadRateControl)
        lookAheadRateControl = lookAheadRateControlDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let minIIntervalDecoded = try containerValues.decode(Int.self, forKey: .minIInterval)
        minIInterval = minIIntervalDecoded
        let numRefFramesDecoded = try containerValues.decode(Int.self, forKey: .numRefFrames)
        numRefFrames = numRefFramesDecoded
        let parControlDecoded = try containerValues.decodeIfPresent(H264ParControl.self, forKey: .parControl)
        parControl = parControlDecoded
        let parDenominatorDecoded = try containerValues.decode(Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decode(Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let profileDecoded = try containerValues.decodeIfPresent(H264Profile.self, forKey: .profile)
        profile = profileDecoded
        let qualityLevelDecoded = try containerValues.decodeIfPresent(H264QualityLevel.self, forKey: .qualityLevel)
        qualityLevel = qualityLevelDecoded
        let qvbrQualityLevelDecoded = try containerValues.decode(Int.self, forKey: .qvbrQualityLevel)
        qvbrQualityLevel = qvbrQualityLevelDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(H264RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(H264ScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let sceneChangeDetectDecoded = try containerValues.decodeIfPresent(H264SceneChangeDetect.self, forKey: .sceneChangeDetect)
        sceneChangeDetect = sceneChangeDetectDecoded
        let slicesDecoded = try containerValues.decode(Int.self, forKey: .slices)
        slices = slicesDecoded
        let softnessDecoded = try containerValues.decode(Int.self, forKey: .softness)
        softness = softnessDecoded
        let spatialAqDecoded = try containerValues.decodeIfPresent(H264SpatialAq.self, forKey: .spatialAq)
        spatialAq = spatialAqDecoded
        let subgopLengthDecoded = try containerValues.decodeIfPresent(H264SubGopLength.self, forKey: .subgopLength)
        subgopLength = subgopLengthDecoded
        let syntaxDecoded = try containerValues.decodeIfPresent(H264Syntax.self, forKey: .syntax)
        syntax = syntaxDecoded
        let temporalAqDecoded = try containerValues.decodeIfPresent(H264TemporalAq.self, forKey: .temporalAq)
        temporalAq = temporalAqDecoded
        let timecodeInsertionDecoded = try containerValues.decodeIfPresent(H264TimecodeInsertionBehavior.self, forKey: .timecodeInsertion)
        timecodeInsertion = timecodeInsertionDecoded
    }
}

extension H264Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "H264Settings(adaptiveQuantization: \(String(describing: adaptiveQuantization)), afdSignaling: \(String(describing: afdSignaling)), bitrate: \(String(describing: bitrate)), bufFillPct: \(String(describing: bufFillPct)), bufSize: \(String(describing: bufSize)), colorMetadata: \(String(describing: colorMetadata)), colorSpaceSettings: \(String(describing: colorSpaceSettings)), entropyEncoding: \(String(describing: entropyEncoding)), filterSettings: \(String(describing: filterSettings)), fixedAfd: \(String(describing: fixedAfd)), flickerAq: \(String(describing: flickerAq)), forceFieldPictures: \(String(describing: forceFieldPictures)), framerateControl: \(String(describing: framerateControl)), framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)), gopBReference: \(String(describing: gopBReference)), gopClosedCadence: \(String(describing: gopClosedCadence)), gopNumBFrames: \(String(describing: gopNumBFrames)), gopSize: \(String(describing: gopSize)), gopSizeUnits: \(String(describing: gopSizeUnits)), level: \(String(describing: level)), lookAheadRateControl: \(String(describing: lookAheadRateControl)), maxBitrate: \(String(describing: maxBitrate)), minIInterval: \(String(describing: minIInterval)), numRefFrames: \(String(describing: numRefFrames)), parControl: \(String(describing: parControl)), parDenominator: \(String(describing: parDenominator)), parNumerator: \(String(describing: parNumerator)), profile: \(String(describing: profile)), qualityLevel: \(String(describing: qualityLevel)), qvbrQualityLevel: \(String(describing: qvbrQualityLevel)), rateControlMode: \(String(describing: rateControlMode)), scanType: \(String(describing: scanType)), sceneChangeDetect: \(String(describing: sceneChangeDetect)), slices: \(String(describing: slices)), softness: \(String(describing: softness)), spatialAq: \(String(describing: spatialAq)), subgopLength: \(String(describing: subgopLength)), syntax: \(String(describing: syntax)), temporalAq: \(String(describing: temporalAq)), timecodeInsertion: \(String(describing: timecodeInsertion)))"}
}

/// H264 Settings
public struct H264Settings: Equatable {
    /// Enables or disables adaptive quantization, which is a technique MediaLive can apply to video on a frame-by-frame basis to produce more compression without losing quality. There are three types of adaptive quantization: flicker, spatial, and temporal. Set the field in one of these ways: Set to Auto. Recommended. For each type of AQ, MediaLive will determine if AQ is needed, and if so, the appropriate strength. Set a strength (a value other than Auto or Disable). This strength will apply to any of the AQ fields that you choose to enable. Set to Disabled to disable all types of adaptive quantization.
    public let adaptiveQuantization: H264AdaptiveQuantization?
    /// Indicates that AFD values will be written into the output stream.  If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
    public let afdSignaling: AfdSignaling?
    /// Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
    public let bitrate: Int
    /// Percentage of the buffer that should initially be filled (HRD buffer model).
    public let bufFillPct: Int
    /// Size of buffer (HRD buffer model) in bits.
    public let bufSize: Int
    /// Includes colorspace metadata in the output.
    public let colorMetadata: H264ColorMetadata?
    /// Color Space settings
    public let colorSpaceSettings: H264ColorSpaceSettings?
    /// Entropy encoding mode.  Use cabac (must be in Main or High profile) or cavlc.
    public let entropyEncoding: H264EntropyEncoding?
    /// Optional filters that you can apply to an encode.
    public let filterSettings: H264FilterSettings?
    /// Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
    public let fixedAfd: FixedAfd?
    /// Flicker AQ makes adjustments within each frame to reduce flicker or 'pop' on I-frames. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if flicker AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply flicker AQ using the specified strength. Disabled: MediaLive won't apply flicker AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply flicker AQ.
    public let flickerAq: H264FlickerAq?
    /// This setting applies only when scan type is "interlaced." It controls whether coding is performed on a field basis or on a frame basis. (When the video is progressive, the coding is always performed on a frame basis.)
    /// enabled: Force MediaLive to code on a field basis, so that odd and even sets of fields are coded separately.
    /// disabled: Code the two sets of fields separately (on a field basis) or together (on a frame basis using PAFF), depending on what is most appropriate for the content.
    public let forceFieldPictures: H264ForceFieldPictures?
    /// This field indicates how the output video frame rate is specified.  If "specified" is selected then the output video frame rate is determined by framerateNumerator and framerateDenominator, else if "initializeFromSource" is selected then the output video frame rate will be set equal to the input video frame rate of the first input.
    public let framerateControl: H264FramerateControl?
    /// Framerate denominator.
    public let framerateDenominator: Int
    /// Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
    public let framerateNumerator: Int
    /// Documentation update needed
    public let gopBReference: H264GopBReference?
    /// Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
    public let gopClosedCadence: Int
    /// Number of B-frames between reference frames.
    public let gopNumBFrames: Int
    /// GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits.
    /// If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1.
    /// If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
    public let gopSize: Double
    /// Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
    public let gopSizeUnits: H264GopSizeUnits?
    /// H.264 Level.
    public let level: H264Level?
    /// Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
    public let lookAheadRateControl: H264LookAheadRateControl?
    /// For QVBR: See the tooltip for Quality level
    ///
    /// For VBR: Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
    public let maxBitrate: Int
    /// Only meaningful if sceneChangeDetect is set to enabled.  Defaults to 5 if multiplex rate control is used.  Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
    public let minIInterval: Int
    /// Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
    public let numRefFrames: Int
    /// This field indicates how the output pixel aspect ratio is specified.  If "specified" is selected then the output video pixel aspect ratio is determined by parNumerator and parDenominator, else if "initializeFromSource" is selected then the output pixsel aspect ratio will be set equal to the input video pixel aspect ratio of the first input.
    public let parControl: H264ParControl?
    /// Pixel Aspect Ratio denominator.
    public let parDenominator: Int
    /// Pixel Aspect Ratio numerator.
    public let parNumerator: Int
    /// H.264 Profile.
    public let profile: H264Profile?
    /// Leave as STANDARD_QUALITY or choose a different value (which might result in additional costs to run the channel).
    /// - ENHANCED_QUALITY: Produces a slightly better video quality without an increase in the bitrate. Has an effect only when the Rate control mode is QVBR or CBR. If this channel is in a MediaLive multiplex, the value must be ENHANCED_QUALITY.
    /// - STANDARD_QUALITY: Valid for any Rate control mode.
    public let qualityLevel: H264QualityLevel?
    /// Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. You can set a target quality or you can let MediaLive determine the best quality. To set a target quality, enter values in the QVBR quality level field and the Max bitrate field. Enter values that suit your most important viewing devices. Recommended values are:
    /// - Primary screen: Quality level: 8 to 10. Max bitrate: 4M
    /// - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M
    /// - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M
    /// To let MediaLive decide, leave the QVBR quality level field empty, and in Max bitrate enter the maximum rate you want in the video. For more information, see the section called "Video - rate control mode" in the MediaLive user guide
    public let qvbrQualityLevel: Int
    /// Rate control mode.
    ///
    /// QVBR: Quality will match the specified quality level except when it is constrained by the
    /// maximum bitrate.  Recommended if you or your viewers pay for bandwidth.
    ///
    /// VBR: Quality and bitrate vary, depending on the video complexity. Recommended instead of QVBR
    /// if you want to maintain a specific average bitrate over the duration of the channel.
    ///
    /// CBR: Quality varies, depending on the video complexity. Recommended only if you distribute
    /// your assets to devices that cannot handle variable bitrates.
    ///
    /// Multiplex: This rate control mode is only supported (and is required) when the video is being
    /// delivered to a MediaLive Multiplex in which case the rate control configuration is controlled
    /// by the properties within the Multiplex Program.
    public let rateControlMode: H264RateControlMode?
    /// Sets the scan type of the output to progressive or top-field-first interlaced.
    public let scanType: H264ScanType?
    /// Scene change detection.
    ///
    /// - On: inserts I-frames when scene change is detected.
    /// - Off: does not force an I-frame when scene change is detected.
    public let sceneChangeDetect: H264SceneChangeDetect?
    /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures.
    /// This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
    public let slices: Int
    /// Softness. Selects quantizer matrix, larger values reduce high-frequency content in the encoded image.  If not set to zero, must be greater than 15.
    public let softness: Int
    /// Spatial AQ makes adjustments within each frame based on spatial variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if spatial AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply spatial AQ using the specified strength. Disabled: MediaLive won't apply spatial AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply spatial AQ.
    public let spatialAq: H264SpatialAq?
    /// If set to fixed, use gopNumBFrames B-frames per sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve visual quality.
    public let subgopLength: H264SubGopLength?
    /// Produces a bitstream compliant with SMPTE RP-2027.
    public let syntax: H264Syntax?
    /// Temporal makes adjustments within each frame based on temporal variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if temporal AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply temporal AQ using the specified strength. Disabled: MediaLive won't apply temporal AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply temporal AQ.
    public let temporalAq: H264TemporalAq?
    /// Determines how timecodes should be inserted into the video elementary stream.
    /// - 'disabled': Do not include timecodes
    /// - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
    public let timecodeInsertion: H264TimecodeInsertionBehavior?

    public init (
        adaptiveQuantization: H264AdaptiveQuantization? = nil,
        afdSignaling: AfdSignaling? = nil,
        bitrate: Int = 0,
        bufFillPct: Int = 0,
        bufSize: Int = 0,
        colorMetadata: H264ColorMetadata? = nil,
        colorSpaceSettings: H264ColorSpaceSettings? = nil,
        entropyEncoding: H264EntropyEncoding? = nil,
        filterSettings: H264FilterSettings? = nil,
        fixedAfd: FixedAfd? = nil,
        flickerAq: H264FlickerAq? = nil,
        forceFieldPictures: H264ForceFieldPictures? = nil,
        framerateControl: H264FramerateControl? = nil,
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        gopBReference: H264GopBReference? = nil,
        gopClosedCadence: Int = 0,
        gopNumBFrames: Int = 0,
        gopSize: Double = 0.0,
        gopSizeUnits: H264GopSizeUnits? = nil,
        level: H264Level? = nil,
        lookAheadRateControl: H264LookAheadRateControl? = nil,
        maxBitrate: Int = 0,
        minIInterval: Int = 0,
        numRefFrames: Int = 0,
        parControl: H264ParControl? = nil,
        parDenominator: Int = 0,
        parNumerator: Int = 0,
        profile: H264Profile? = nil,
        qualityLevel: H264QualityLevel? = nil,
        qvbrQualityLevel: Int = 0,
        rateControlMode: H264RateControlMode? = nil,
        scanType: H264ScanType? = nil,
        sceneChangeDetect: H264SceneChangeDetect? = nil,
        slices: Int = 0,
        softness: Int = 0,
        spatialAq: H264SpatialAq? = nil,
        subgopLength: H264SubGopLength? = nil,
        syntax: H264Syntax? = nil,
        temporalAq: H264TemporalAq? = nil,
        timecodeInsertion: H264TimecodeInsertionBehavior? = nil
    )
    {
        self.adaptiveQuantization = adaptiveQuantization
        self.afdSignaling = afdSignaling
        self.bitrate = bitrate
        self.bufFillPct = bufFillPct
        self.bufSize = bufSize
        self.colorMetadata = colorMetadata
        self.colorSpaceSettings = colorSpaceSettings
        self.entropyEncoding = entropyEncoding
        self.filterSettings = filterSettings
        self.fixedAfd = fixedAfd
        self.flickerAq = flickerAq
        self.forceFieldPictures = forceFieldPictures
        self.framerateControl = framerateControl
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.gopBReference = gopBReference
        self.gopClosedCadence = gopClosedCadence
        self.gopNumBFrames = gopNumBFrames
        self.gopSize = gopSize
        self.gopSizeUnits = gopSizeUnits
        self.level = level
        self.lookAheadRateControl = lookAheadRateControl
        self.maxBitrate = maxBitrate
        self.minIInterval = minIInterval
        self.numRefFrames = numRefFrames
        self.parControl = parControl
        self.parDenominator = parDenominator
        self.parNumerator = parNumerator
        self.profile = profile
        self.qualityLevel = qualityLevel
        self.qvbrQualityLevel = qvbrQualityLevel
        self.rateControlMode = rateControlMode
        self.scanType = scanType
        self.sceneChangeDetect = sceneChangeDetect
        self.slices = slices
        self.softness = softness
        self.spatialAq = spatialAq
        self.subgopLength = subgopLength
        self.syntax = syntax
        self.temporalAq = temporalAq
        self.timecodeInsertion = timecodeInsertion
    }
}

/// H264 Spatial Aq
public enum H264SpatialAq {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H264SpatialAq : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264SpatialAq] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264SpatialAq(rawValue: rawValue) ?? H264SpatialAq.sdkUnknown(rawValue)
    }
}

/// H264 Sub Gop Length
public enum H264SubGopLength {
    case `dynamic`
    case fixed
    case sdkUnknown(String)
}

extension H264SubGopLength : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264SubGopLength] {
        return [
            .dynamic,
            .fixed,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dynamic: return "DYNAMIC"
        case .fixed: return "FIXED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264SubGopLength(rawValue: rawValue) ?? H264SubGopLength.sdkUnknown(rawValue)
    }
}

/// H264 Syntax
public enum H264Syntax {
    case `default`
    case rp2027
    case sdkUnknown(String)
}

extension H264Syntax : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264Syntax] {
        return [
            .default,
            .rp2027,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .default: return "DEFAULT"
        case .rp2027: return "RP2027"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264Syntax(rawValue: rawValue) ?? H264Syntax.sdkUnknown(rawValue)
    }
}

/// H264 Temporal Aq
public enum H264TemporalAq {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H264TemporalAq : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264TemporalAq] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264TemporalAq(rawValue: rawValue) ?? H264TemporalAq.sdkUnknown(rawValue)
    }
}

/// H264 Timecode Insertion Behavior
public enum H264TimecodeInsertionBehavior {
    case disabled
    case picTimingSei
    case sdkUnknown(String)
}

extension H264TimecodeInsertionBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264TimecodeInsertionBehavior] {
        return [
            .disabled,
            .picTimingSei,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .picTimingSei: return "PIC_TIMING_SEI"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264TimecodeInsertionBehavior(rawValue: rawValue) ?? H264TimecodeInsertionBehavior.sdkUnknown(rawValue)
    }
}

/// H265 Adaptive Quantization
public enum H265AdaptiveQuantization {
    case auto
    case high
    case higher
    case low
    case max
    case medium
    case off
    case sdkUnknown(String)
}

extension H265AdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265AdaptiveQuantization] {
        return [
            .auto,
            .high,
            .higher,
            .low,
            .max,
            .medium,
            .off,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .high: return "HIGH"
        case .higher: return "HIGHER"
        case .low: return "LOW"
        case .max: return "MAX"
        case .medium: return "MEDIUM"
        case .off: return "OFF"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265AdaptiveQuantization(rawValue: rawValue) ?? H265AdaptiveQuantization.sdkUnknown(rawValue)
    }
}

/// H265 Alternative Transfer Function
public enum H265AlternativeTransferFunction {
    case insert
    case omit
    case sdkUnknown(String)
}

extension H265AlternativeTransferFunction : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265AlternativeTransferFunction] {
        return [
            .insert,
            .omit,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .insert: return "INSERT"
        case .omit: return "OMIT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265AlternativeTransferFunction(rawValue: rawValue) ?? H265AlternativeTransferFunction.sdkUnknown(rawValue)
    }
}

/// H265 Color Metadata
public enum H265ColorMetadata {
    case ignore
    case insert
    case sdkUnknown(String)
}

extension H265ColorMetadata : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265ColorMetadata] {
        return [
            .ignore,
            .insert,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ignore: return "IGNORE"
        case .insert: return "INSERT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265ColorMetadata(rawValue: rawValue) ?? H265ColorMetadata.sdkUnknown(rawValue)
    }
}

extension H265ColorSpaceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case colorSpacePassthroughSettings = "colorSpacePassthroughSettings"
        case hdr10Settings = "hdr10Settings"
        case rec601Settings = "rec601Settings"
        case rec709Settings = "rec709Settings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let colorSpacePassthroughSettings = colorSpacePassthroughSettings {
            try encodeContainer.encode(colorSpacePassthroughSettings, forKey: .colorSpacePassthroughSettings)
        }
        if let hdr10Settings = hdr10Settings {
            try encodeContainer.encode(hdr10Settings, forKey: .hdr10Settings)
        }
        if let rec601Settings = rec601Settings {
            try encodeContainer.encode(rec601Settings, forKey: .rec601Settings)
        }
        if let rec709Settings = rec709Settings {
            try encodeContainer.encode(rec709Settings, forKey: .rec709Settings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let colorSpacePassthroughSettingsDecoded = try containerValues.decodeIfPresent(ColorSpacePassthroughSettings.self, forKey: .colorSpacePassthroughSettings)
        colorSpacePassthroughSettings = colorSpacePassthroughSettingsDecoded
        let hdr10SettingsDecoded = try containerValues.decodeIfPresent(Hdr10Settings.self, forKey: .hdr10Settings)
        hdr10Settings = hdr10SettingsDecoded
        let rec601SettingsDecoded = try containerValues.decodeIfPresent(Rec601Settings.self, forKey: .rec601Settings)
        rec601Settings = rec601SettingsDecoded
        let rec709SettingsDecoded = try containerValues.decodeIfPresent(Rec709Settings.self, forKey: .rec709Settings)
        rec709Settings = rec709SettingsDecoded
    }
}

extension H265ColorSpaceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "H265ColorSpaceSettings(colorSpacePassthroughSettings: \(String(describing: colorSpacePassthroughSettings)), hdr10Settings: \(String(describing: hdr10Settings)), rec601Settings: \(String(describing: rec601Settings)), rec709Settings: \(String(describing: rec709Settings)))"}
}

/// H265 Color Space Settings
public struct H265ColorSpaceSettings: Equatable {
    /// Passthrough applies no color space conversion to the output
    public let colorSpacePassthroughSettings: ColorSpacePassthroughSettings?
    /// Hdr10 Settings
    public let hdr10Settings: Hdr10Settings?
    /// Rec601 Settings
    public let rec601Settings: Rec601Settings?
    /// Rec709 Settings
    public let rec709Settings: Rec709Settings?

    public init (
        colorSpacePassthroughSettings: ColorSpacePassthroughSettings? = nil,
        hdr10Settings: Hdr10Settings? = nil,
        rec601Settings: Rec601Settings? = nil,
        rec709Settings: Rec709Settings? = nil
    )
    {
        self.colorSpacePassthroughSettings = colorSpacePassthroughSettings
        self.hdr10Settings = hdr10Settings
        self.rec601Settings = rec601Settings
        self.rec709Settings = rec709Settings
    }
}

extension H265FilterSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case temporalFilterSettings = "temporalFilterSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let temporalFilterSettings = temporalFilterSettings {
            try encodeContainer.encode(temporalFilterSettings, forKey: .temporalFilterSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let temporalFilterSettingsDecoded = try containerValues.decodeIfPresent(TemporalFilterSettings.self, forKey: .temporalFilterSettings)
        temporalFilterSettings = temporalFilterSettingsDecoded
    }
}

extension H265FilterSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "H265FilterSettings(temporalFilterSettings: \(String(describing: temporalFilterSettings)))"}
}

/// H265 Filter Settings
public struct H265FilterSettings: Equatable {
    /// Temporal Filter Settings
    public let temporalFilterSettings: TemporalFilterSettings?

    public init (
        temporalFilterSettings: TemporalFilterSettings? = nil
    )
    {
        self.temporalFilterSettings = temporalFilterSettings
    }
}

/// H265 Flicker Aq
public enum H265FlickerAq {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H265FlickerAq : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265FlickerAq] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265FlickerAq(rawValue: rawValue) ?? H265FlickerAq.sdkUnknown(rawValue)
    }
}

/// H265 Gop Size Units
public enum H265GopSizeUnits {
    case frames
    case seconds
    case sdkUnknown(String)
}

extension H265GopSizeUnits : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265GopSizeUnits] {
        return [
            .frames,
            .seconds,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .frames: return "FRAMES"
        case .seconds: return "SECONDS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265GopSizeUnits(rawValue: rawValue) ?? H265GopSizeUnits.sdkUnknown(rawValue)
    }
}

/// H265 Level
public enum H265Level {
    case h265Level1
    case h265Level2
    case h265Level21
    case h265Level3
    case h265Level31
    case h265Level4
    case h265Level41
    case h265Level5
    case h265Level51
    case h265Level52
    case h265Level6
    case h265Level61
    case h265Level62
    case h265LevelAuto
    case sdkUnknown(String)
}

extension H265Level : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265Level] {
        return [
            .h265Level1,
            .h265Level2,
            .h265Level21,
            .h265Level3,
            .h265Level31,
            .h265Level4,
            .h265Level41,
            .h265Level5,
            .h265Level51,
            .h265Level52,
            .h265Level6,
            .h265Level61,
            .h265Level62,
            .h265LevelAuto,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .h265Level1: return "H265_LEVEL_1"
        case .h265Level2: return "H265_LEVEL_2"
        case .h265Level21: return "H265_LEVEL_2_1"
        case .h265Level3: return "H265_LEVEL_3"
        case .h265Level31: return "H265_LEVEL_3_1"
        case .h265Level4: return "H265_LEVEL_4"
        case .h265Level41: return "H265_LEVEL_4_1"
        case .h265Level5: return "H265_LEVEL_5"
        case .h265Level51: return "H265_LEVEL_5_1"
        case .h265Level52: return "H265_LEVEL_5_2"
        case .h265Level6: return "H265_LEVEL_6"
        case .h265Level61: return "H265_LEVEL_6_1"
        case .h265Level62: return "H265_LEVEL_6_2"
        case .h265LevelAuto: return "H265_LEVEL_AUTO"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265Level(rawValue: rawValue) ?? H265Level.sdkUnknown(rawValue)
    }
}

/// H265 Look Ahead Rate Control
public enum H265LookAheadRateControl {
    case high
    case low
    case medium
    case sdkUnknown(String)
}

extension H265LookAheadRateControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265LookAheadRateControl] {
        return [
            .high,
            .low,
            .medium,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .high: return "HIGH"
        case .low: return "LOW"
        case .medium: return "MEDIUM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265LookAheadRateControl(rawValue: rawValue) ?? H265LookAheadRateControl.sdkUnknown(rawValue)
    }
}

/// H265 Profile
public enum H265Profile {
    case main
    case main10bit
    case sdkUnknown(String)
}

extension H265Profile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265Profile] {
        return [
            .main,
            .main10bit,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .main: return "MAIN"
        case .main10bit: return "MAIN_10BIT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265Profile(rawValue: rawValue) ?? H265Profile.sdkUnknown(rawValue)
    }
}

/// H265 Rate Control Mode
public enum H265RateControlMode {
    case cbr
    case multiplex
    case qvbr
    case sdkUnknown(String)
}

extension H265RateControlMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265RateControlMode] {
        return [
            .cbr,
            .multiplex,
            .qvbr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cbr: return "CBR"
        case .multiplex: return "MULTIPLEX"
        case .qvbr: return "QVBR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265RateControlMode(rawValue: rawValue) ?? H265RateControlMode.sdkUnknown(rawValue)
    }
}

/// H265 Scan Type
public enum H265ScanType {
    case interlaced
    case progressive
    case sdkUnknown(String)
}

extension H265ScanType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265ScanType] {
        return [
            .interlaced,
            .progressive,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .interlaced: return "INTERLACED"
        case .progressive: return "PROGRESSIVE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265ScanType(rawValue: rawValue) ?? H265ScanType.sdkUnknown(rawValue)
    }
}

/// H265 Scene Change Detect
public enum H265SceneChangeDetect {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H265SceneChangeDetect : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265SceneChangeDetect] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265SceneChangeDetect(rawValue: rawValue) ?? H265SceneChangeDetect.sdkUnknown(rawValue)
    }
}

extension H265Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case afdSignaling = "afdSignaling"
        case alternativeTransferFunction = "alternativeTransferFunction"
        case bitrate = "bitrate"
        case bufSize = "bufSize"
        case colorMetadata = "colorMetadata"
        case colorSpaceSettings = "colorSpaceSettings"
        case filterSettings = "filterSettings"
        case fixedAfd = "fixedAfd"
        case flickerAq = "flickerAq"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopClosedCadence = "gopClosedCadence"
        case gopSize = "gopSize"
        case gopSizeUnits = "gopSizeUnits"
        case level = "level"
        case lookAheadRateControl = "lookAheadRateControl"
        case maxBitrate = "maxBitrate"
        case minIInterval = "minIInterval"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case profile = "profile"
        case qvbrQualityLevel = "qvbrQualityLevel"
        case rateControlMode = "rateControlMode"
        case scanType = "scanType"
        case sceneChangeDetect = "sceneChangeDetect"
        case slices = "slices"
        case tier = "tier"
        case timecodeInsertion = "timecodeInsertion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if let afdSignaling = afdSignaling {
            try encodeContainer.encode(afdSignaling.rawValue, forKey: .afdSignaling)
        }
        if let alternativeTransferFunction = alternativeTransferFunction {
            try encodeContainer.encode(alternativeTransferFunction.rawValue, forKey: .alternativeTransferFunction)
        }
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if bufSize != 0 {
            try encodeContainer.encode(bufSize, forKey: .bufSize)
        }
        if let colorMetadata = colorMetadata {
            try encodeContainer.encode(colorMetadata.rawValue, forKey: .colorMetadata)
        }
        if let colorSpaceSettings = colorSpaceSettings {
            try encodeContainer.encode(colorSpaceSettings, forKey: .colorSpaceSettings)
        }
        if let filterSettings = filterSettings {
            try encodeContainer.encode(filterSettings, forKey: .filterSettings)
        }
        if let fixedAfd = fixedAfd {
            try encodeContainer.encode(fixedAfd.rawValue, forKey: .fixedAfd)
        }
        if let flickerAq = flickerAq {
            try encodeContainer.encode(flickerAq.rawValue, forKey: .flickerAq)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if gopClosedCadence != 0 {
            try encodeContainer.encode(gopClosedCadence, forKey: .gopClosedCadence)
        }
        if gopSize != 0.0 {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if let gopSizeUnits = gopSizeUnits {
            try encodeContainer.encode(gopSizeUnits.rawValue, forKey: .gopSizeUnits)
        }
        if let level = level {
            try encodeContainer.encode(level.rawValue, forKey: .level)
        }
        if let lookAheadRateControl = lookAheadRateControl {
            try encodeContainer.encode(lookAheadRateControl.rawValue, forKey: .lookAheadRateControl)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if minIInterval != 0 {
            try encodeContainer.encode(minIInterval, forKey: .minIInterval)
        }
        if parDenominator != 0 {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if parNumerator != 0 {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let profile = profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
        if qvbrQualityLevel != 0 {
            try encodeContainer.encode(qvbrQualityLevel, forKey: .qvbrQualityLevel)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let scanType = scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if let sceneChangeDetect = sceneChangeDetect {
            try encodeContainer.encode(sceneChangeDetect.rawValue, forKey: .sceneChangeDetect)
        }
        if slices != 0 {
            try encodeContainer.encode(slices, forKey: .slices)
        }
        if let tier = tier {
            try encodeContainer.encode(tier.rawValue, forKey: .tier)
        }
        if let timecodeInsertion = timecodeInsertion {
            try encodeContainer.encode(timecodeInsertion.rawValue, forKey: .timecodeInsertion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(H265AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let afdSignalingDecoded = try containerValues.decodeIfPresent(AfdSignaling.self, forKey: .afdSignaling)
        afdSignaling = afdSignalingDecoded
        let alternativeTransferFunctionDecoded = try containerValues.decodeIfPresent(H265AlternativeTransferFunction.self, forKey: .alternativeTransferFunction)
        alternativeTransferFunction = alternativeTransferFunctionDecoded
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bufSizeDecoded = try containerValues.decode(Int.self, forKey: .bufSize)
        bufSize = bufSizeDecoded
        let colorMetadataDecoded = try containerValues.decodeIfPresent(H265ColorMetadata.self, forKey: .colorMetadata)
        colorMetadata = colorMetadataDecoded
        let colorSpaceSettingsDecoded = try containerValues.decodeIfPresent(H265ColorSpaceSettings.self, forKey: .colorSpaceSettings)
        colorSpaceSettings = colorSpaceSettingsDecoded
        let filterSettingsDecoded = try containerValues.decodeIfPresent(H265FilterSettings.self, forKey: .filterSettings)
        filterSettings = filterSettingsDecoded
        let fixedAfdDecoded = try containerValues.decodeIfPresent(FixedAfd.self, forKey: .fixedAfd)
        fixedAfd = fixedAfdDecoded
        let flickerAqDecoded = try containerValues.decodeIfPresent(H265FlickerAq.self, forKey: .flickerAq)
        flickerAq = flickerAqDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopClosedCadenceDecoded = try containerValues.decode(Int.self, forKey: .gopClosedCadence)
        gopClosedCadence = gopClosedCadenceDecoded
        let gopSizeDecoded = try containerValues.decode(Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let gopSizeUnitsDecoded = try containerValues.decodeIfPresent(H265GopSizeUnits.self, forKey: .gopSizeUnits)
        gopSizeUnits = gopSizeUnitsDecoded
        let levelDecoded = try containerValues.decodeIfPresent(H265Level.self, forKey: .level)
        level = levelDecoded
        let lookAheadRateControlDecoded = try containerValues.decodeIfPresent(H265LookAheadRateControl.self, forKey: .lookAheadRateControl)
        lookAheadRateControl = lookAheadRateControlDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let minIIntervalDecoded = try containerValues.decode(Int.self, forKey: .minIInterval)
        minIInterval = minIIntervalDecoded
        let parDenominatorDecoded = try containerValues.decode(Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decode(Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let profileDecoded = try containerValues.decodeIfPresent(H265Profile.self, forKey: .profile)
        profile = profileDecoded
        let qvbrQualityLevelDecoded = try containerValues.decode(Int.self, forKey: .qvbrQualityLevel)
        qvbrQualityLevel = qvbrQualityLevelDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(H265RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(H265ScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let sceneChangeDetectDecoded = try containerValues.decodeIfPresent(H265SceneChangeDetect.self, forKey: .sceneChangeDetect)
        sceneChangeDetect = sceneChangeDetectDecoded
        let slicesDecoded = try containerValues.decode(Int.self, forKey: .slices)
        slices = slicesDecoded
        let tierDecoded = try containerValues.decodeIfPresent(H265Tier.self, forKey: .tier)
        tier = tierDecoded
        let timecodeInsertionDecoded = try containerValues.decodeIfPresent(H265TimecodeInsertionBehavior.self, forKey: .timecodeInsertion)
        timecodeInsertion = timecodeInsertionDecoded
    }
}

extension H265Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "H265Settings(adaptiveQuantization: \(String(describing: adaptiveQuantization)), afdSignaling: \(String(describing: afdSignaling)), alternativeTransferFunction: \(String(describing: alternativeTransferFunction)), bitrate: \(String(describing: bitrate)), bufSize: \(String(describing: bufSize)), colorMetadata: \(String(describing: colorMetadata)), colorSpaceSettings: \(String(describing: colorSpaceSettings)), filterSettings: \(String(describing: filterSettings)), fixedAfd: \(String(describing: fixedAfd)), flickerAq: \(String(describing: flickerAq)), framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)), gopClosedCadence: \(String(describing: gopClosedCadence)), gopSize: \(String(describing: gopSize)), gopSizeUnits: \(String(describing: gopSizeUnits)), level: \(String(describing: level)), lookAheadRateControl: \(String(describing: lookAheadRateControl)), maxBitrate: \(String(describing: maxBitrate)), minIInterval: \(String(describing: minIInterval)), parDenominator: \(String(describing: parDenominator)), parNumerator: \(String(describing: parNumerator)), profile: \(String(describing: profile)), qvbrQualityLevel: \(String(describing: qvbrQualityLevel)), rateControlMode: \(String(describing: rateControlMode)), scanType: \(String(describing: scanType)), sceneChangeDetect: \(String(describing: sceneChangeDetect)), slices: \(String(describing: slices)), tier: \(String(describing: tier)), timecodeInsertion: \(String(describing: timecodeInsertion)))"}
}

/// H265 Settings
public struct H265Settings: Equatable {
    /// Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
    public let adaptiveQuantization: H265AdaptiveQuantization?
    /// Indicates that AFD values will be written into the output stream.  If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
    public let afdSignaling: AfdSignaling?
    /// Whether or not EML should insert an Alternative Transfer Function SEI message to support backwards compatibility with non-HDR decoders and displays.
    public let alternativeTransferFunction: H265AlternativeTransferFunction?
    /// Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
    public let bitrate: Int
    /// Size of buffer (HRD buffer model) in bits.
    public let bufSize: Int
    /// Includes colorspace metadata in the output.
    public let colorMetadata: H265ColorMetadata?
    /// Color Space settings
    public let colorSpaceSettings: H265ColorSpaceSettings?
    /// Optional filters that you can apply to an encode.
    public let filterSettings: H265FilterSettings?
    /// Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
    public let fixedAfd: FixedAfd?
    /// If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
    public let flickerAq: H265FlickerAq?
    /// Framerate denominator.
    public let framerateDenominator: Int
    /// Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
    public let framerateNumerator: Int
    /// Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
    public let gopClosedCadence: Int
    /// GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits.
    /// If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1.
    /// If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
    public let gopSize: Double
    /// Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
    public let gopSizeUnits: H265GopSizeUnits?
    /// H.265 Level.
    public let level: H265Level?
    /// Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
    public let lookAheadRateControl: H265LookAheadRateControl?
    /// For QVBR: See the tooltip for Quality level
    public let maxBitrate: Int
    /// Only meaningful if sceneChangeDetect is set to enabled.  Defaults to 5 if multiplex rate control is used.  Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
    public let minIInterval: Int
    /// Pixel Aspect Ratio denominator.
    public let parDenominator: Int
    /// Pixel Aspect Ratio numerator.
    public let parNumerator: Int
    /// H.265 Profile.
    public let profile: H265Profile?
    /// Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are:
    /// - Primary screen: Quality level: 8 to 10. Max bitrate: 4M
    /// - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M
    /// - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M
    public let qvbrQualityLevel: Int
    /// Rate control mode.
    ///
    /// QVBR: Quality will match the specified quality level except when it is constrained by the
    /// maximum bitrate.  Recommended if you or your viewers pay for bandwidth.
    ///
    /// CBR: Quality varies, depending on the video complexity. Recommended only if you distribute
    /// your assets to devices that cannot handle variable bitrates.
    ///
    /// Multiplex: This rate control mode is only supported (and is required) when the video is being
    /// delivered to a MediaLive Multiplex in which case the rate control configuration is controlled
    /// by the properties within the Multiplex Program.
    public let rateControlMode: H265RateControlMode?
    /// Sets the scan type of the output to progressive or top-field-first interlaced.
    public let scanType: H265ScanType?
    /// Scene change detection.
    public let sceneChangeDetect: H265SceneChangeDetect?
    /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures.
    /// This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
    public let slices: Int
    /// H.265 Tier.
    public let tier: H265Tier?
    /// Determines how timecodes should be inserted into the video elementary stream.
    /// - 'disabled': Do not include timecodes
    /// - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
    public let timecodeInsertion: H265TimecodeInsertionBehavior?

    public init (
        adaptiveQuantization: H265AdaptiveQuantization? = nil,
        afdSignaling: AfdSignaling? = nil,
        alternativeTransferFunction: H265AlternativeTransferFunction? = nil,
        bitrate: Int = 0,
        bufSize: Int = 0,
        colorMetadata: H265ColorMetadata? = nil,
        colorSpaceSettings: H265ColorSpaceSettings? = nil,
        filterSettings: H265FilterSettings? = nil,
        fixedAfd: FixedAfd? = nil,
        flickerAq: H265FlickerAq? = nil,
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        gopClosedCadence: Int = 0,
        gopSize: Double = 0.0,
        gopSizeUnits: H265GopSizeUnits? = nil,
        level: H265Level? = nil,
        lookAheadRateControl: H265LookAheadRateControl? = nil,
        maxBitrate: Int = 0,
        minIInterval: Int = 0,
        parDenominator: Int = 0,
        parNumerator: Int = 0,
        profile: H265Profile? = nil,
        qvbrQualityLevel: Int = 0,
        rateControlMode: H265RateControlMode? = nil,
        scanType: H265ScanType? = nil,
        sceneChangeDetect: H265SceneChangeDetect? = nil,
        slices: Int = 0,
        tier: H265Tier? = nil,
        timecodeInsertion: H265TimecodeInsertionBehavior? = nil
    )
    {
        self.adaptiveQuantization = adaptiveQuantization
        self.afdSignaling = afdSignaling
        self.alternativeTransferFunction = alternativeTransferFunction
        self.bitrate = bitrate
        self.bufSize = bufSize
        self.colorMetadata = colorMetadata
        self.colorSpaceSettings = colorSpaceSettings
        self.filterSettings = filterSettings
        self.fixedAfd = fixedAfd
        self.flickerAq = flickerAq
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.gopClosedCadence = gopClosedCadence
        self.gopSize = gopSize
        self.gopSizeUnits = gopSizeUnits
        self.level = level
        self.lookAheadRateControl = lookAheadRateControl
        self.maxBitrate = maxBitrate
        self.minIInterval = minIInterval
        self.parDenominator = parDenominator
        self.parNumerator = parNumerator
        self.profile = profile
        self.qvbrQualityLevel = qvbrQualityLevel
        self.rateControlMode = rateControlMode
        self.scanType = scanType
        self.sceneChangeDetect = sceneChangeDetect
        self.slices = slices
        self.tier = tier
        self.timecodeInsertion = timecodeInsertion
    }
}

/// H265 Tier
public enum H265Tier {
    case high
    case main
    case sdkUnknown(String)
}

extension H265Tier : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265Tier] {
        return [
            .high,
            .main,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .high: return "HIGH"
        case .main: return "MAIN"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265Tier(rawValue: rawValue) ?? H265Tier.sdkUnknown(rawValue)
    }
}

/// H265 Timecode Insertion Behavior
public enum H265TimecodeInsertionBehavior {
    case disabled
    case picTimingSei
    case sdkUnknown(String)
}

extension H265TimecodeInsertionBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265TimecodeInsertionBehavior] {
        return [
            .disabled,
            .picTimingSei,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .picTimingSei: return "PIC_TIMING_SEI"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265TimecodeInsertionBehavior(rawValue: rawValue) ?? H265TimecodeInsertionBehavior.sdkUnknown(rawValue)
    }
}

extension Hdr10Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxCll = "maxCll"
        case maxFall = "maxFall"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxCll != 0 {
            try encodeContainer.encode(maxCll, forKey: .maxCll)
        }
        if maxFall != 0 {
            try encodeContainer.encode(maxFall, forKey: .maxFall)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxCllDecoded = try containerValues.decode(Int.self, forKey: .maxCll)
        maxCll = maxCllDecoded
        let maxFallDecoded = try containerValues.decode(Int.self, forKey: .maxFall)
        maxFall = maxFallDecoded
    }
}

extension Hdr10Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Hdr10Settings(maxCll: \(String(describing: maxCll)), maxFall: \(String(describing: maxFall)))"}
}

/// Hdr10 Settings
public struct Hdr10Settings: Equatable {
    /// Maximum Content Light Level
    /// An integer metadata value defining the maximum light level, in nits,
    /// of any single pixel within an encoded HDR video stream or file.
    public let maxCll: Int
    /// Maximum Frame Average Light Level
    /// An integer metadata value defining the maximum average light level, in nits,
    /// for any single frame within an encoded HDR video stream or file.
    public let maxFall: Int

    public init (
        maxCll: Int = 0,
        maxFall: Int = 0
    )
    {
        self.maxCll = maxCll
        self.maxFall = maxFall
    }
}

/// Hls Ad Markers
public enum HlsAdMarkers {
    case adobe
    case elemental
    case elementalScte35
    case sdkUnknown(String)
}

extension HlsAdMarkers : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsAdMarkers] {
        return [
            .adobe,
            .elemental,
            .elementalScte35,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .adobe: return "ADOBE"
        case .elemental: return "ELEMENTAL"
        case .elementalScte35: return "ELEMENTAL_SCTE35"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsAdMarkers(rawValue: rawValue) ?? HlsAdMarkers.sdkUnknown(rawValue)
    }
}

/// Hls Akamai Http Transfer Mode
public enum HlsAkamaiHttpTransferMode {
    case chunked
    case nonChunked
    case sdkUnknown(String)
}

extension HlsAkamaiHttpTransferMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsAkamaiHttpTransferMode] {
        return [
            .chunked,
            .nonChunked,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .chunked: return "CHUNKED"
        case .nonChunked: return "NON_CHUNKED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsAkamaiHttpTransferMode(rawValue: rawValue) ?? HlsAkamaiHttpTransferMode.sdkUnknown(rawValue)
    }
}

extension HlsAkamaiSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectionRetryInterval = "connectionRetryInterval"
        case filecacheDuration = "filecacheDuration"
        case httpTransferMode = "httpTransferMode"
        case numRetries = "numRetries"
        case restartDelay = "restartDelay"
        case salt = "salt"
        case token = "token"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if connectionRetryInterval != 0 {
            try encodeContainer.encode(connectionRetryInterval, forKey: .connectionRetryInterval)
        }
        if filecacheDuration != 0 {
            try encodeContainer.encode(filecacheDuration, forKey: .filecacheDuration)
        }
        if let httpTransferMode = httpTransferMode {
            try encodeContainer.encode(httpTransferMode.rawValue, forKey: .httpTransferMode)
        }
        if numRetries != 0 {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
        if restartDelay != 0 {
            try encodeContainer.encode(restartDelay, forKey: .restartDelay)
        }
        if let salt = salt {
            try encodeContainer.encode(salt, forKey: .salt)
        }
        if let token = token {
            try encodeContainer.encode(token, forKey: .token)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionRetryIntervalDecoded = try containerValues.decode(Int.self, forKey: .connectionRetryInterval)
        connectionRetryInterval = connectionRetryIntervalDecoded
        let filecacheDurationDecoded = try containerValues.decode(Int.self, forKey: .filecacheDuration)
        filecacheDuration = filecacheDurationDecoded
        let httpTransferModeDecoded = try containerValues.decodeIfPresent(HlsAkamaiHttpTransferMode.self, forKey: .httpTransferMode)
        httpTransferMode = httpTransferModeDecoded
        let numRetriesDecoded = try containerValues.decode(Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
        let restartDelayDecoded = try containerValues.decode(Int.self, forKey: .restartDelay)
        restartDelay = restartDelayDecoded
        let saltDecoded = try containerValues.decodeIfPresent(String.self, forKey: .salt)
        salt = saltDecoded
        let tokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .token)
        token = tokenDecoded
    }
}

extension HlsAkamaiSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsAkamaiSettings(connectionRetryInterval: \(String(describing: connectionRetryInterval)), filecacheDuration: \(String(describing: filecacheDuration)), httpTransferMode: \(String(describing: httpTransferMode)), numRetries: \(String(describing: numRetries)), restartDelay: \(String(describing: restartDelay)), salt: \(String(describing: salt)), token: \(String(describing: token)))"}
}

/// Hls Akamai Settings
public struct HlsAkamaiSettings: Equatable {
    /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
    public let connectionRetryInterval: Int
    /// Size in seconds of file cache for streaming outputs.
    public let filecacheDuration: Int
    /// Specify whether or not to use chunked transfer encoding to Akamai. User should contact Akamai to enable this feature.
    public let httpTransferMode: HlsAkamaiHttpTransferMode?
    /// Number of retry attempts that will be made before the Live Event is put into an error state.
    public let numRetries: Int
    /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
    public let restartDelay: Int
    /// Salt for authenticated Akamai.
    public let salt: String?
    /// Token parameter for authenticated akamai. If not specified, _gda_ is used.
    public let token: String?

    public init (
        connectionRetryInterval: Int = 0,
        filecacheDuration: Int = 0,
        httpTransferMode: HlsAkamaiHttpTransferMode? = nil,
        numRetries: Int = 0,
        restartDelay: Int = 0,
        salt: String? = nil,
        token: String? = nil
    )
    {
        self.connectionRetryInterval = connectionRetryInterval
        self.filecacheDuration = filecacheDuration
        self.httpTransferMode = httpTransferMode
        self.numRetries = numRetries
        self.restartDelay = restartDelay
        self.salt = salt
        self.token = token
    }
}

extension HlsBasicPutSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectionRetryInterval = "connectionRetryInterval"
        case filecacheDuration = "filecacheDuration"
        case numRetries = "numRetries"
        case restartDelay = "restartDelay"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if connectionRetryInterval != 0 {
            try encodeContainer.encode(connectionRetryInterval, forKey: .connectionRetryInterval)
        }
        if filecacheDuration != 0 {
            try encodeContainer.encode(filecacheDuration, forKey: .filecacheDuration)
        }
        if numRetries != 0 {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
        if restartDelay != 0 {
            try encodeContainer.encode(restartDelay, forKey: .restartDelay)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionRetryIntervalDecoded = try containerValues.decode(Int.self, forKey: .connectionRetryInterval)
        connectionRetryInterval = connectionRetryIntervalDecoded
        let filecacheDurationDecoded = try containerValues.decode(Int.self, forKey: .filecacheDuration)
        filecacheDuration = filecacheDurationDecoded
        let numRetriesDecoded = try containerValues.decode(Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
        let restartDelayDecoded = try containerValues.decode(Int.self, forKey: .restartDelay)
        restartDelay = restartDelayDecoded
    }
}

extension HlsBasicPutSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsBasicPutSettings(connectionRetryInterval: \(String(describing: connectionRetryInterval)), filecacheDuration: \(String(describing: filecacheDuration)), numRetries: \(String(describing: numRetries)), restartDelay: \(String(describing: restartDelay)))"}
}

/// Hls Basic Put Settings
public struct HlsBasicPutSettings: Equatable {
    /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
    public let connectionRetryInterval: Int
    /// Size in seconds of file cache for streaming outputs.
    public let filecacheDuration: Int
    /// Number of retry attempts that will be made before the Live Event is put into an error state.
    public let numRetries: Int
    /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
    public let restartDelay: Int

    public init (
        connectionRetryInterval: Int = 0,
        filecacheDuration: Int = 0,
        numRetries: Int = 0,
        restartDelay: Int = 0
    )
    {
        self.connectionRetryInterval = connectionRetryInterval
        self.filecacheDuration = filecacheDuration
        self.numRetries = numRetries
        self.restartDelay = restartDelay
    }
}

/// Hls Caption Language Setting
public enum HlsCaptionLanguageSetting {
    case insert
    case `none`
    case omit
    case sdkUnknown(String)
}

extension HlsCaptionLanguageSetting : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsCaptionLanguageSetting] {
        return [
            .insert,
            .none,
            .omit,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .insert: return "INSERT"
        case .none: return "NONE"
        case .omit: return "OMIT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsCaptionLanguageSetting(rawValue: rawValue) ?? HlsCaptionLanguageSetting.sdkUnknown(rawValue)
    }
}

extension HlsCdnSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case hlsAkamaiSettings = "hlsAkamaiSettings"
        case hlsBasicPutSettings = "hlsBasicPutSettings"
        case hlsMediaStoreSettings = "hlsMediaStoreSettings"
        case hlsS3Settings = "hlsS3Settings"
        case hlsWebdavSettings = "hlsWebdavSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hlsAkamaiSettings = hlsAkamaiSettings {
            try encodeContainer.encode(hlsAkamaiSettings, forKey: .hlsAkamaiSettings)
        }
        if let hlsBasicPutSettings = hlsBasicPutSettings {
            try encodeContainer.encode(hlsBasicPutSettings, forKey: .hlsBasicPutSettings)
        }
        if let hlsMediaStoreSettings = hlsMediaStoreSettings {
            try encodeContainer.encode(hlsMediaStoreSettings, forKey: .hlsMediaStoreSettings)
        }
        if let hlsS3Settings = hlsS3Settings {
            try encodeContainer.encode(hlsS3Settings, forKey: .hlsS3Settings)
        }
        if let hlsWebdavSettings = hlsWebdavSettings {
            try encodeContainer.encode(hlsWebdavSettings, forKey: .hlsWebdavSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hlsAkamaiSettingsDecoded = try containerValues.decodeIfPresent(HlsAkamaiSettings.self, forKey: .hlsAkamaiSettings)
        hlsAkamaiSettings = hlsAkamaiSettingsDecoded
        let hlsBasicPutSettingsDecoded = try containerValues.decodeIfPresent(HlsBasicPutSettings.self, forKey: .hlsBasicPutSettings)
        hlsBasicPutSettings = hlsBasicPutSettingsDecoded
        let hlsMediaStoreSettingsDecoded = try containerValues.decodeIfPresent(HlsMediaStoreSettings.self, forKey: .hlsMediaStoreSettings)
        hlsMediaStoreSettings = hlsMediaStoreSettingsDecoded
        let hlsS3SettingsDecoded = try containerValues.decodeIfPresent(HlsS3Settings.self, forKey: .hlsS3Settings)
        hlsS3Settings = hlsS3SettingsDecoded
        let hlsWebdavSettingsDecoded = try containerValues.decodeIfPresent(HlsWebdavSettings.self, forKey: .hlsWebdavSettings)
        hlsWebdavSettings = hlsWebdavSettingsDecoded
    }
}

extension HlsCdnSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsCdnSettings(hlsAkamaiSettings: \(String(describing: hlsAkamaiSettings)), hlsBasicPutSettings: \(String(describing: hlsBasicPutSettings)), hlsMediaStoreSettings: \(String(describing: hlsMediaStoreSettings)), hlsS3Settings: \(String(describing: hlsS3Settings)), hlsWebdavSettings: \(String(describing: hlsWebdavSettings)))"}
}

/// Hls Cdn Settings
public struct HlsCdnSettings: Equatable {
    /// Hls Akamai Settings
    public let hlsAkamaiSettings: HlsAkamaiSettings?
    /// Hls Basic Put Settings
    public let hlsBasicPutSettings: HlsBasicPutSettings?
    /// Hls Media Store Settings
    public let hlsMediaStoreSettings: HlsMediaStoreSettings?
    /// Hls S3 Settings
    public let hlsS3Settings: HlsS3Settings?
    /// Hls Webdav Settings
    public let hlsWebdavSettings: HlsWebdavSettings?

    public init (
        hlsAkamaiSettings: HlsAkamaiSettings? = nil,
        hlsBasicPutSettings: HlsBasicPutSettings? = nil,
        hlsMediaStoreSettings: HlsMediaStoreSettings? = nil,
        hlsS3Settings: HlsS3Settings? = nil,
        hlsWebdavSettings: HlsWebdavSettings? = nil
    )
    {
        self.hlsAkamaiSettings = hlsAkamaiSettings
        self.hlsBasicPutSettings = hlsBasicPutSettings
        self.hlsMediaStoreSettings = hlsMediaStoreSettings
        self.hlsS3Settings = hlsS3Settings
        self.hlsWebdavSettings = hlsWebdavSettings
    }
}

/// Hls Client Cache
public enum HlsClientCache {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension HlsClientCache : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsClientCache] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsClientCache(rawValue: rawValue) ?? HlsClientCache.sdkUnknown(rawValue)
    }
}

/// Hls Codec Specification
public enum HlsCodecSpecification {
    case rfc4281
    case rfc6381
    case sdkUnknown(String)
}

extension HlsCodecSpecification : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsCodecSpecification] {
        return [
            .rfc4281,
            .rfc6381,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .rfc4281: return "RFC_4281"
        case .rfc6381: return "RFC_6381"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsCodecSpecification(rawValue: rawValue) ?? HlsCodecSpecification.sdkUnknown(rawValue)
    }
}

/// Hls Directory Structure
public enum HlsDirectoryStructure {
    case singleDirectory
    case subdirectoryPerStream
    case sdkUnknown(String)
}

extension HlsDirectoryStructure : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsDirectoryStructure] {
        return [
            .singleDirectory,
            .subdirectoryPerStream,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .singleDirectory: return "SINGLE_DIRECTORY"
        case .subdirectoryPerStream: return "SUBDIRECTORY_PER_STREAM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsDirectoryStructure(rawValue: rawValue) ?? HlsDirectoryStructure.sdkUnknown(rawValue)
    }
}

/// Hls Discontinuity Tags
public enum HlsDiscontinuityTags {
    case insert
    case neverInsert
    case sdkUnknown(String)
}

extension HlsDiscontinuityTags : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsDiscontinuityTags] {
        return [
            .insert,
            .neverInsert,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .insert: return "INSERT"
        case .neverInsert: return "NEVER_INSERT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsDiscontinuityTags(rawValue: rawValue) ?? HlsDiscontinuityTags.sdkUnknown(rawValue)
    }
}

/// Hls Encryption Type
public enum HlsEncryptionType {
    case aes128
    case sampleAes
    case sdkUnknown(String)
}

extension HlsEncryptionType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsEncryptionType] {
        return [
            .aes128,
            .sampleAes,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aes128: return "AES128"
        case .sampleAes: return "SAMPLE_AES"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsEncryptionType(rawValue: rawValue) ?? HlsEncryptionType.sdkUnknown(rawValue)
    }
}

extension HlsGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adMarkers = "adMarkers"
        case baseUrlContent = "baseUrlContent"
        case baseUrlContent1 = "baseUrlContent1"
        case baseUrlManifest = "baseUrlManifest"
        case baseUrlManifest1 = "baseUrlManifest1"
        case captionLanguageMappings = "captionLanguageMappings"
        case captionLanguageSetting = "captionLanguageSetting"
        case clientCache = "clientCache"
        case codecSpecification = "codecSpecification"
        case constantIv = "constantIv"
        case destination = "destination"
        case directoryStructure = "directoryStructure"
        case discontinuityTags = "discontinuityTags"
        case encryptionType = "encryptionType"
        case hlsCdnSettings = "hlsCdnSettings"
        case hlsId3SegmentTagging = "hlsId3SegmentTagging"
        case iFrameOnlyPlaylists = "iFrameOnlyPlaylists"
        case incompleteSegmentBehavior = "incompleteSegmentBehavior"
        case indexNSegments = "indexNSegments"
        case inputLossAction = "inputLossAction"
        case ivInManifest = "ivInManifest"
        case ivSource = "ivSource"
        case keepSegments = "keepSegments"
        case keyFormat = "keyFormat"
        case keyFormatVersions = "keyFormatVersions"
        case keyProviderSettings = "keyProviderSettings"
        case manifestCompression = "manifestCompression"
        case manifestDurationFormat = "manifestDurationFormat"
        case minSegmentLength = "minSegmentLength"
        case mode = "mode"
        case outputSelection = "outputSelection"
        case programDateTime = "programDateTime"
        case programDateTimePeriod = "programDateTimePeriod"
        case redundantManifest = "redundantManifest"
        case segmentLength = "segmentLength"
        case segmentationMode = "segmentationMode"
        case segmentsPerSubdirectory = "segmentsPerSubdirectory"
        case streamInfResolution = "streamInfResolution"
        case timedMetadataId3Frame = "timedMetadataId3Frame"
        case timedMetadataId3Period = "timedMetadataId3Period"
        case timestampDeltaMilliseconds = "timestampDeltaMilliseconds"
        case tsFileMode = "tsFileMode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adMarkers = adMarkers {
            var adMarkersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .adMarkers)
            for __listofhlsadmarkers0 in adMarkers {
                try adMarkersContainer.encode(__listofhlsadmarkers0.rawValue)
            }
        }
        if let baseUrlContent = baseUrlContent {
            try encodeContainer.encode(baseUrlContent, forKey: .baseUrlContent)
        }
        if let baseUrlContent1 = baseUrlContent1 {
            try encodeContainer.encode(baseUrlContent1, forKey: .baseUrlContent1)
        }
        if let baseUrlManifest = baseUrlManifest {
            try encodeContainer.encode(baseUrlManifest, forKey: .baseUrlManifest)
        }
        if let baseUrlManifest1 = baseUrlManifest1 {
            try encodeContainer.encode(baseUrlManifest1, forKey: .baseUrlManifest1)
        }
        if let captionLanguageMappings = captionLanguageMappings {
            var captionLanguageMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionLanguageMappings)
            for __listofcaptionlanguagemapping0 in captionLanguageMappings {
                try captionLanguageMappingsContainer.encode(__listofcaptionlanguagemapping0)
            }
        }
        if let captionLanguageSetting = captionLanguageSetting {
            try encodeContainer.encode(captionLanguageSetting.rawValue, forKey: .captionLanguageSetting)
        }
        if let clientCache = clientCache {
            try encodeContainer.encode(clientCache.rawValue, forKey: .clientCache)
        }
        if let codecSpecification = codecSpecification {
            try encodeContainer.encode(codecSpecification.rawValue, forKey: .codecSpecification)
        }
        if let constantIv = constantIv {
            try encodeContainer.encode(constantIv, forKey: .constantIv)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let directoryStructure = directoryStructure {
            try encodeContainer.encode(directoryStructure.rawValue, forKey: .directoryStructure)
        }
        if let discontinuityTags = discontinuityTags {
            try encodeContainer.encode(discontinuityTags.rawValue, forKey: .discontinuityTags)
        }
        if let encryptionType = encryptionType {
            try encodeContainer.encode(encryptionType.rawValue, forKey: .encryptionType)
        }
        if let hlsCdnSettings = hlsCdnSettings {
            try encodeContainer.encode(hlsCdnSettings, forKey: .hlsCdnSettings)
        }
        if let hlsId3SegmentTagging = hlsId3SegmentTagging {
            try encodeContainer.encode(hlsId3SegmentTagging.rawValue, forKey: .hlsId3SegmentTagging)
        }
        if let iFrameOnlyPlaylists = iFrameOnlyPlaylists {
            try encodeContainer.encode(iFrameOnlyPlaylists.rawValue, forKey: .iFrameOnlyPlaylists)
        }
        if let incompleteSegmentBehavior = incompleteSegmentBehavior {
            try encodeContainer.encode(incompleteSegmentBehavior.rawValue, forKey: .incompleteSegmentBehavior)
        }
        if indexNSegments != 0 {
            try encodeContainer.encode(indexNSegments, forKey: .indexNSegments)
        }
        if let inputLossAction = inputLossAction {
            try encodeContainer.encode(inputLossAction.rawValue, forKey: .inputLossAction)
        }
        if let ivInManifest = ivInManifest {
            try encodeContainer.encode(ivInManifest.rawValue, forKey: .ivInManifest)
        }
        if let ivSource = ivSource {
            try encodeContainer.encode(ivSource.rawValue, forKey: .ivSource)
        }
        if keepSegments != 0 {
            try encodeContainer.encode(keepSegments, forKey: .keepSegments)
        }
        if let keyFormat = keyFormat {
            try encodeContainer.encode(keyFormat, forKey: .keyFormat)
        }
        if let keyFormatVersions = keyFormatVersions {
            try encodeContainer.encode(keyFormatVersions, forKey: .keyFormatVersions)
        }
        if let keyProviderSettings = keyProviderSettings {
            try encodeContainer.encode(keyProviderSettings, forKey: .keyProviderSettings)
        }
        if let manifestCompression = manifestCompression {
            try encodeContainer.encode(manifestCompression.rawValue, forKey: .manifestCompression)
        }
        if let manifestDurationFormat = manifestDurationFormat {
            try encodeContainer.encode(manifestDurationFormat.rawValue, forKey: .manifestDurationFormat)
        }
        if minSegmentLength != 0 {
            try encodeContainer.encode(minSegmentLength, forKey: .minSegmentLength)
        }
        if let mode = mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let outputSelection = outputSelection {
            try encodeContainer.encode(outputSelection.rawValue, forKey: .outputSelection)
        }
        if let programDateTime = programDateTime {
            try encodeContainer.encode(programDateTime.rawValue, forKey: .programDateTime)
        }
        if programDateTimePeriod != 0 {
            try encodeContainer.encode(programDateTimePeriod, forKey: .programDateTimePeriod)
        }
        if let redundantManifest = redundantManifest {
            try encodeContainer.encode(redundantManifest.rawValue, forKey: .redundantManifest)
        }
        if segmentLength != 0 {
            try encodeContainer.encode(segmentLength, forKey: .segmentLength)
        }
        if let segmentationMode = segmentationMode {
            try encodeContainer.encode(segmentationMode.rawValue, forKey: .segmentationMode)
        }
        if segmentsPerSubdirectory != 0 {
            try encodeContainer.encode(segmentsPerSubdirectory, forKey: .segmentsPerSubdirectory)
        }
        if let streamInfResolution = streamInfResolution {
            try encodeContainer.encode(streamInfResolution.rawValue, forKey: .streamInfResolution)
        }
        if let timedMetadataId3Frame = timedMetadataId3Frame {
            try encodeContainer.encode(timedMetadataId3Frame.rawValue, forKey: .timedMetadataId3Frame)
        }
        if timedMetadataId3Period != 0 {
            try encodeContainer.encode(timedMetadataId3Period, forKey: .timedMetadataId3Period)
        }
        if timestampDeltaMilliseconds != 0 {
            try encodeContainer.encode(timestampDeltaMilliseconds, forKey: .timestampDeltaMilliseconds)
        }
        if let tsFileMode = tsFileMode {
            try encodeContainer.encode(tsFileMode.rawValue, forKey: .tsFileMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adMarkersContainer = try containerValues.decodeIfPresent([HlsAdMarkers?].self, forKey: .adMarkers)
        var adMarkersDecoded0:[HlsAdMarkers]? = nil
        if let adMarkersContainer = adMarkersContainer {
            adMarkersDecoded0 = [HlsAdMarkers]()
            for string0 in adMarkersContainer {
                if let string0 = string0 {
                    adMarkersDecoded0?.append(string0)
                }
            }
        }
        adMarkers = adMarkersDecoded0
        let baseUrlContentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .baseUrlContent)
        baseUrlContent = baseUrlContentDecoded
        let baseUrlContent1Decoded = try containerValues.decodeIfPresent(String.self, forKey: .baseUrlContent1)
        baseUrlContent1 = baseUrlContent1Decoded
        let baseUrlManifestDecoded = try containerValues.decodeIfPresent(String.self, forKey: .baseUrlManifest)
        baseUrlManifest = baseUrlManifestDecoded
        let baseUrlManifest1Decoded = try containerValues.decodeIfPresent(String.self, forKey: .baseUrlManifest1)
        baseUrlManifest1 = baseUrlManifest1Decoded
        let captionLanguageMappingsContainer = try containerValues.decodeIfPresent([CaptionLanguageMapping?].self, forKey: .captionLanguageMappings)
        var captionLanguageMappingsDecoded0:[CaptionLanguageMapping]? = nil
        if let captionLanguageMappingsContainer = captionLanguageMappingsContainer {
            captionLanguageMappingsDecoded0 = [CaptionLanguageMapping]()
            for structure0 in captionLanguageMappingsContainer {
                if let structure0 = structure0 {
                    captionLanguageMappingsDecoded0?.append(structure0)
                }
            }
        }
        captionLanguageMappings = captionLanguageMappingsDecoded0
        let captionLanguageSettingDecoded = try containerValues.decodeIfPresent(HlsCaptionLanguageSetting.self, forKey: .captionLanguageSetting)
        captionLanguageSetting = captionLanguageSettingDecoded
        let clientCacheDecoded = try containerValues.decodeIfPresent(HlsClientCache.self, forKey: .clientCache)
        clientCache = clientCacheDecoded
        let codecSpecificationDecoded = try containerValues.decodeIfPresent(HlsCodecSpecification.self, forKey: .codecSpecification)
        codecSpecification = codecSpecificationDecoded
        let constantIvDecoded = try containerValues.decodeIfPresent(String.self, forKey: .constantIv)
        constantIv = constantIvDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
        let directoryStructureDecoded = try containerValues.decodeIfPresent(HlsDirectoryStructure.self, forKey: .directoryStructure)
        directoryStructure = directoryStructureDecoded
        let discontinuityTagsDecoded = try containerValues.decodeIfPresent(HlsDiscontinuityTags.self, forKey: .discontinuityTags)
        discontinuityTags = discontinuityTagsDecoded
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(HlsEncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
        let hlsCdnSettingsDecoded = try containerValues.decodeIfPresent(HlsCdnSettings.self, forKey: .hlsCdnSettings)
        hlsCdnSettings = hlsCdnSettingsDecoded
        let hlsId3SegmentTaggingDecoded = try containerValues.decodeIfPresent(HlsId3SegmentTaggingState.self, forKey: .hlsId3SegmentTagging)
        hlsId3SegmentTagging = hlsId3SegmentTaggingDecoded
        let iFrameOnlyPlaylistsDecoded = try containerValues.decodeIfPresent(IFrameOnlyPlaylistType.self, forKey: .iFrameOnlyPlaylists)
        iFrameOnlyPlaylists = iFrameOnlyPlaylistsDecoded
        let incompleteSegmentBehaviorDecoded = try containerValues.decodeIfPresent(HlsIncompleteSegmentBehavior.self, forKey: .incompleteSegmentBehavior)
        incompleteSegmentBehavior = incompleteSegmentBehaviorDecoded
        let indexNSegmentsDecoded = try containerValues.decode(Int.self, forKey: .indexNSegments)
        indexNSegments = indexNSegmentsDecoded
        let inputLossActionDecoded = try containerValues.decodeIfPresent(InputLossActionForHlsOut.self, forKey: .inputLossAction)
        inputLossAction = inputLossActionDecoded
        let ivInManifestDecoded = try containerValues.decodeIfPresent(HlsIvInManifest.self, forKey: .ivInManifest)
        ivInManifest = ivInManifestDecoded
        let ivSourceDecoded = try containerValues.decodeIfPresent(HlsIvSource.self, forKey: .ivSource)
        ivSource = ivSourceDecoded
        let keepSegmentsDecoded = try containerValues.decode(Int.self, forKey: .keepSegments)
        keepSegments = keepSegmentsDecoded
        let keyFormatDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyFormat)
        keyFormat = keyFormatDecoded
        let keyFormatVersionsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyFormatVersions)
        keyFormatVersions = keyFormatVersionsDecoded
        let keyProviderSettingsDecoded = try containerValues.decodeIfPresent(KeyProviderSettings.self, forKey: .keyProviderSettings)
        keyProviderSettings = keyProviderSettingsDecoded
        let manifestCompressionDecoded = try containerValues.decodeIfPresent(HlsManifestCompression.self, forKey: .manifestCompression)
        manifestCompression = manifestCompressionDecoded
        let manifestDurationFormatDecoded = try containerValues.decodeIfPresent(HlsManifestDurationFormat.self, forKey: .manifestDurationFormat)
        manifestDurationFormat = manifestDurationFormatDecoded
        let minSegmentLengthDecoded = try containerValues.decode(Int.self, forKey: .minSegmentLength)
        minSegmentLength = minSegmentLengthDecoded
        let modeDecoded = try containerValues.decodeIfPresent(HlsMode.self, forKey: .mode)
        mode = modeDecoded
        let outputSelectionDecoded = try containerValues.decodeIfPresent(HlsOutputSelection.self, forKey: .outputSelection)
        outputSelection = outputSelectionDecoded
        let programDateTimeDecoded = try containerValues.decodeIfPresent(HlsProgramDateTime.self, forKey: .programDateTime)
        programDateTime = programDateTimeDecoded
        let programDateTimePeriodDecoded = try containerValues.decode(Int.self, forKey: .programDateTimePeriod)
        programDateTimePeriod = programDateTimePeriodDecoded
        let redundantManifestDecoded = try containerValues.decodeIfPresent(HlsRedundantManifest.self, forKey: .redundantManifest)
        redundantManifest = redundantManifestDecoded
        let segmentLengthDecoded = try containerValues.decode(Int.self, forKey: .segmentLength)
        segmentLength = segmentLengthDecoded
        let segmentationModeDecoded = try containerValues.decodeIfPresent(HlsSegmentationMode.self, forKey: .segmentationMode)
        segmentationMode = segmentationModeDecoded
        let segmentsPerSubdirectoryDecoded = try containerValues.decode(Int.self, forKey: .segmentsPerSubdirectory)
        segmentsPerSubdirectory = segmentsPerSubdirectoryDecoded
        let streamInfResolutionDecoded = try containerValues.decodeIfPresent(HlsStreamInfResolution.self, forKey: .streamInfResolution)
        streamInfResolution = streamInfResolutionDecoded
        let timedMetadataId3FrameDecoded = try containerValues.decodeIfPresent(HlsTimedMetadataId3Frame.self, forKey: .timedMetadataId3Frame)
        timedMetadataId3Frame = timedMetadataId3FrameDecoded
        let timedMetadataId3PeriodDecoded = try containerValues.decode(Int.self, forKey: .timedMetadataId3Period)
        timedMetadataId3Period = timedMetadataId3PeriodDecoded
        let timestampDeltaMillisecondsDecoded = try containerValues.decode(Int.self, forKey: .timestampDeltaMilliseconds)
        timestampDeltaMilliseconds = timestampDeltaMillisecondsDecoded
        let tsFileModeDecoded = try containerValues.decodeIfPresent(HlsTsFileMode.self, forKey: .tsFileMode)
        tsFileMode = tsFileModeDecoded
    }
}

extension HlsGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsGroupSettings(adMarkers: \(String(describing: adMarkers)), baseUrlContent: \(String(describing: baseUrlContent)), baseUrlContent1: \(String(describing: baseUrlContent1)), baseUrlManifest: \(String(describing: baseUrlManifest)), baseUrlManifest1: \(String(describing: baseUrlManifest1)), captionLanguageMappings: \(String(describing: captionLanguageMappings)), captionLanguageSetting: \(String(describing: captionLanguageSetting)), clientCache: \(String(describing: clientCache)), codecSpecification: \(String(describing: codecSpecification)), constantIv: \(String(describing: constantIv)), destination: \(String(describing: destination)), directoryStructure: \(String(describing: directoryStructure)), discontinuityTags: \(String(describing: discontinuityTags)), encryptionType: \(String(describing: encryptionType)), hlsCdnSettings: \(String(describing: hlsCdnSettings)), hlsId3SegmentTagging: \(String(describing: hlsId3SegmentTagging)), iFrameOnlyPlaylists: \(String(describing: iFrameOnlyPlaylists)), incompleteSegmentBehavior: \(String(describing: incompleteSegmentBehavior)), indexNSegments: \(String(describing: indexNSegments)), inputLossAction: \(String(describing: inputLossAction)), ivInManifest: \(String(describing: ivInManifest)), ivSource: \(String(describing: ivSource)), keepSegments: \(String(describing: keepSegments)), keyFormat: \(String(describing: keyFormat)), keyFormatVersions: \(String(describing: keyFormatVersions)), keyProviderSettings: \(String(describing: keyProviderSettings)), manifestCompression: \(String(describing: manifestCompression)), manifestDurationFormat: \(String(describing: manifestDurationFormat)), minSegmentLength: \(String(describing: minSegmentLength)), mode: \(String(describing: mode)), outputSelection: \(String(describing: outputSelection)), programDateTime: \(String(describing: programDateTime)), programDateTimePeriod: \(String(describing: programDateTimePeriod)), redundantManifest: \(String(describing: redundantManifest)), segmentLength: \(String(describing: segmentLength)), segmentationMode: \(String(describing: segmentationMode)), segmentsPerSubdirectory: \(String(describing: segmentsPerSubdirectory)), streamInfResolution: \(String(describing: streamInfResolution)), timedMetadataId3Frame: \(String(describing: timedMetadataId3Frame)), timedMetadataId3Period: \(String(describing: timedMetadataId3Period)), timestampDeltaMilliseconds: \(String(describing: timestampDeltaMilliseconds)), tsFileMode: \(String(describing: tsFileMode)))"}
}

/// Hls Group Settings
public struct HlsGroupSettings: Equatable {
    /// Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
    public let adMarkers: [HlsAdMarkers]?
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    public let baseUrlContent: String?
    /// Optional. One value per output group.
    ///
    /// This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
    public let baseUrlContent1: String?
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    public let baseUrlManifest: String?
    /// Optional. One value per output group.
    ///
    /// Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
    public let baseUrlManifest1: String?
    /// Mapping of up to 4 caption channels to caption languages.  Is only meaningful if captionLanguageSetting is set to "insert".
    public let captionLanguageMappings: [CaptionLanguageMapping]?
    /// Applies only to 608 Embedded output captions.
    /// insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions.
    /// none: Include CLOSED-CAPTIONS=NONE line in the manifest.
    /// omit: Omit any CLOSED-CAPTIONS line from the manifest.
    public let captionLanguageSetting: HlsCaptionLanguageSetting?
    /// When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
    public let clientCache: HlsClientCache?
    /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
    public let codecSpecification: HlsCodecSpecification?
    /// For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
    public let constantIv: String?
    /// A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
    public let destination: OutputLocationRef?
    /// Place segments in subdirectories.
    public let directoryStructure: HlsDirectoryStructure?
    /// Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group.
    /// Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose.
    /// Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
    public let discontinuityTags: HlsDiscontinuityTags?
    /// Encrypts the segments with the given encryption scheme.  Exclude this parameter if no encryption is desired.
    public let encryptionType: HlsEncryptionType?
    /// Parameters that control interactions with the CDN.
    public let hlsCdnSettings: HlsCdnSettings?
    /// State of HLS ID3 Segment Tagging
    public let hlsId3SegmentTagging: HlsId3SegmentTaggingState?
    /// DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field).
    ///
    /// STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
    public let iFrameOnlyPlaylists: IFrameOnlyPlaylistType?
    /// Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline.
    /// Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups.
    /// Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
    public let incompleteSegmentBehavior: HlsIncompleteSegmentBehavior?
    /// Applies only if Mode field is LIVE.
    ///
    /// Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
    public let indexNSegments: Int
    /// Parameter that control output group behavior on input loss.
    public let inputLossAction: InputLossActionForHlsOut?
    /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
    public let ivInManifest: HlsIvInManifest?
    /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
    public let ivSource: HlsIvSource?
    /// Applies only if Mode field is LIVE.
    ///
    /// Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1).
    ///
    /// If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
    public let keepSegments: Int
    /// The value specifies how the key is represented in the resource identified by the URI.  If parameter is absent, an implicit value of "identity" is used.  A reverse DNS string can also be given.
    public let keyFormat: String?
    /// Either a single positive integer version value or a slash delimited list of version values (1/2/3).
    public let keyFormatVersions: String?
    /// The key provider settings.
    public let keyProviderSettings: KeyProviderSettings?
    /// When set to gzip, compresses HLS playlist.
    public let manifestCompression: HlsManifestCompression?
    /// Indicates whether the output manifest should use floating point or integer values for segment duration.
    public let manifestDurationFormat: HlsManifestDurationFormat?
    /// When set, minimumSegmentLength is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
    public let minSegmentLength: Int
    /// If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event.
    ///
    /// VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
    public let mode: HlsMode?
    /// MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group.
    ///
    /// VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest.
    ///
    /// SEGMENTS_ONLY: Does not generate any manifests for this output group.
    public let outputSelection: HlsOutputSelection?
    /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestampOffset.
    public let programDateTime: HlsProgramDateTime?
    /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
    public let programDateTimePeriod: Int
    /// ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines.
    ///
    /// DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only.
    ///
    /// For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
    public let redundantManifest: HlsRedundantManifest?
    /// Length of MPEG-2 Transport Stream segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer.
    public let segmentLength: Int
    /// useInputSegmentation has been deprecated. The configured segment size is always used.
    public let segmentationMode: HlsSegmentationMode?
    /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
    public let segmentsPerSubdirectory: Int
    /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
    public let streamInfResolution: HlsStreamInfResolution?
    /// Indicates ID3 frame that has the timecode.
    public let timedMetadataId3Frame: HlsTimedMetadataId3Frame?
    /// Timed Metadata interval in seconds.
    public let timedMetadataId3Period: Int
    /// Provides an extra millisecond delta offset to fine tune the timestamps.
    public let timestampDeltaMilliseconds: Int
    /// SEGMENTED_FILES: Emit the program as segments - multiple .ts media files.
    ///
    /// SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
    public let tsFileMode: HlsTsFileMode?

    public init (
        adMarkers: [HlsAdMarkers]? = nil,
        baseUrlContent: String? = nil,
        baseUrlContent1: String? = nil,
        baseUrlManifest: String? = nil,
        baseUrlManifest1: String? = nil,
        captionLanguageMappings: [CaptionLanguageMapping]? = nil,
        captionLanguageSetting: HlsCaptionLanguageSetting? = nil,
        clientCache: HlsClientCache? = nil,
        codecSpecification: HlsCodecSpecification? = nil,
        constantIv: String? = nil,
        destination: OutputLocationRef? = nil,
        directoryStructure: HlsDirectoryStructure? = nil,
        discontinuityTags: HlsDiscontinuityTags? = nil,
        encryptionType: HlsEncryptionType? = nil,
        hlsCdnSettings: HlsCdnSettings? = nil,
        hlsId3SegmentTagging: HlsId3SegmentTaggingState? = nil,
        iFrameOnlyPlaylists: IFrameOnlyPlaylistType? = nil,
        incompleteSegmentBehavior: HlsIncompleteSegmentBehavior? = nil,
        indexNSegments: Int = 0,
        inputLossAction: InputLossActionForHlsOut? = nil,
        ivInManifest: HlsIvInManifest? = nil,
        ivSource: HlsIvSource? = nil,
        keepSegments: Int = 0,
        keyFormat: String? = nil,
        keyFormatVersions: String? = nil,
        keyProviderSettings: KeyProviderSettings? = nil,
        manifestCompression: HlsManifestCompression? = nil,
        manifestDurationFormat: HlsManifestDurationFormat? = nil,
        minSegmentLength: Int = 0,
        mode: HlsMode? = nil,
        outputSelection: HlsOutputSelection? = nil,
        programDateTime: HlsProgramDateTime? = nil,
        programDateTimePeriod: Int = 0,
        redundantManifest: HlsRedundantManifest? = nil,
        segmentLength: Int = 0,
        segmentationMode: HlsSegmentationMode? = nil,
        segmentsPerSubdirectory: Int = 0,
        streamInfResolution: HlsStreamInfResolution? = nil,
        timedMetadataId3Frame: HlsTimedMetadataId3Frame? = nil,
        timedMetadataId3Period: Int = 0,
        timestampDeltaMilliseconds: Int = 0,
        tsFileMode: HlsTsFileMode? = nil
    )
    {
        self.adMarkers = adMarkers
        self.baseUrlContent = baseUrlContent
        self.baseUrlContent1 = baseUrlContent1
        self.baseUrlManifest = baseUrlManifest
        self.baseUrlManifest1 = baseUrlManifest1
        self.captionLanguageMappings = captionLanguageMappings
        self.captionLanguageSetting = captionLanguageSetting
        self.clientCache = clientCache
        self.codecSpecification = codecSpecification
        self.constantIv = constantIv
        self.destination = destination
        self.directoryStructure = directoryStructure
        self.discontinuityTags = discontinuityTags
        self.encryptionType = encryptionType
        self.hlsCdnSettings = hlsCdnSettings
        self.hlsId3SegmentTagging = hlsId3SegmentTagging
        self.iFrameOnlyPlaylists = iFrameOnlyPlaylists
        self.incompleteSegmentBehavior = incompleteSegmentBehavior
        self.indexNSegments = indexNSegments
        self.inputLossAction = inputLossAction
        self.ivInManifest = ivInManifest
        self.ivSource = ivSource
        self.keepSegments = keepSegments
        self.keyFormat = keyFormat
        self.keyFormatVersions = keyFormatVersions
        self.keyProviderSettings = keyProviderSettings
        self.manifestCompression = manifestCompression
        self.manifestDurationFormat = manifestDurationFormat
        self.minSegmentLength = minSegmentLength
        self.mode = mode
        self.outputSelection = outputSelection
        self.programDateTime = programDateTime
        self.programDateTimePeriod = programDateTimePeriod
        self.redundantManifest = redundantManifest
        self.segmentLength = segmentLength
        self.segmentationMode = segmentationMode
        self.segmentsPerSubdirectory = segmentsPerSubdirectory
        self.streamInfResolution = streamInfResolution
        self.timedMetadataId3Frame = timedMetadataId3Frame
        self.timedMetadataId3Period = timedMetadataId3Period
        self.timestampDeltaMilliseconds = timestampDeltaMilliseconds
        self.tsFileMode = tsFileMode
    }
}

/// Hls H265 Packaging Type
public enum HlsH265PackagingType {
    case hev1
    case hvc1
    case sdkUnknown(String)
}

extension HlsH265PackagingType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsH265PackagingType] {
        return [
            .hev1,
            .hvc1,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hev1: return "HEV1"
        case .hvc1: return "HVC1"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsH265PackagingType(rawValue: rawValue) ?? HlsH265PackagingType.sdkUnknown(rawValue)
    }
}

extension HlsId3SegmentTaggingScheduleActionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tag = "tag"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tag = tag {
            try encodeContainer.encode(tag, forKey: .tag)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tag)
        tag = tagDecoded
    }
}

extension HlsId3SegmentTaggingScheduleActionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsId3SegmentTaggingScheduleActionSettings(tag: \(String(describing: tag)))"}
}

/// Settings for the action to insert a user-defined ID3 tag in each HLS segment
public struct HlsId3SegmentTaggingScheduleActionSettings: Equatable {
    /// ID3 tag to insert into each segment. Supports special keyword identifiers to substitute in segment-related values.\nSupported keyword identifiers: https://docs.aws.amazon.com/medialive/latest/ug/variable-data-identifiers.html
    public let tag: String?

    public init (
        tag: String? = nil
    )
    {
        self.tag = tag
    }
}

/// State of HLS ID3 Segment Tagging
public enum HlsId3SegmentTaggingState {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension HlsId3SegmentTaggingState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsId3SegmentTaggingState] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsId3SegmentTaggingState(rawValue: rawValue) ?? HlsId3SegmentTaggingState.sdkUnknown(rawValue)
    }
}

/// Hls Incomplete Segment Behavior
public enum HlsIncompleteSegmentBehavior {
    case auto
    case suppress
    case sdkUnknown(String)
}

extension HlsIncompleteSegmentBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsIncompleteSegmentBehavior] {
        return [
            .auto,
            .suppress,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .suppress: return "SUPPRESS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsIncompleteSegmentBehavior(rawValue: rawValue) ?? HlsIncompleteSegmentBehavior.sdkUnknown(rawValue)
    }
}

extension HlsInputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bandwidth = "bandwidth"
        case bufferSegments = "bufferSegments"
        case retries = "retries"
        case retryInterval = "retryInterval"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bandwidth != 0 {
            try encodeContainer.encode(bandwidth, forKey: .bandwidth)
        }
        if bufferSegments != 0 {
            try encodeContainer.encode(bufferSegments, forKey: .bufferSegments)
        }
        if retries != 0 {
            try encodeContainer.encode(retries, forKey: .retries)
        }
        if retryInterval != 0 {
            try encodeContainer.encode(retryInterval, forKey: .retryInterval)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bandwidthDecoded = try containerValues.decode(Int.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let bufferSegmentsDecoded = try containerValues.decode(Int.self, forKey: .bufferSegments)
        bufferSegments = bufferSegmentsDecoded
        let retriesDecoded = try containerValues.decode(Int.self, forKey: .retries)
        retries = retriesDecoded
        let retryIntervalDecoded = try containerValues.decode(Int.self, forKey: .retryInterval)
        retryInterval = retryIntervalDecoded
    }
}

extension HlsInputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsInputSettings(bandwidth: \(String(describing: bandwidth)), bufferSegments: \(String(describing: bufferSegments)), retries: \(String(describing: retries)), retryInterval: \(String(describing: retryInterval)))"}
}

/// Hls Input Settings
public struct HlsInputSettings: Equatable {
    /// When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen.  The bitrate is specified in bits per second, as in an HLS manifest.
    public let bandwidth: Int
    /// When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment).  When not specified, the HLS input will begin with the first segment specified in the m3u8.
    public let bufferSegments: Int
    /// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
    public let retries: Int
    /// The number of seconds between retries when an attempt to read a manifest or segment fails.
    public let retryInterval: Int

    public init (
        bandwidth: Int = 0,
        bufferSegments: Int = 0,
        retries: Int = 0,
        retryInterval: Int = 0
    )
    {
        self.bandwidth = bandwidth
        self.bufferSegments = bufferSegments
        self.retries = retries
        self.retryInterval = retryInterval
    }
}

/// Hls Iv In Manifest
public enum HlsIvInManifest {
    case exclude
    case include
    case sdkUnknown(String)
}

extension HlsIvInManifest : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsIvInManifest] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsIvInManifest(rawValue: rawValue) ?? HlsIvInManifest.sdkUnknown(rawValue)
    }
}

/// Hls Iv Source
public enum HlsIvSource {
    case explicit
    case followsSegmentNumber
    case sdkUnknown(String)
}

extension HlsIvSource : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsIvSource] {
        return [
            .explicit,
            .followsSegmentNumber,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .explicit: return "EXPLICIT"
        case .followsSegmentNumber: return "FOLLOWS_SEGMENT_NUMBER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsIvSource(rawValue: rawValue) ?? HlsIvSource.sdkUnknown(rawValue)
    }
}

/// Hls Manifest Compression
public enum HlsManifestCompression {
    case gzip
    case `none`
    case sdkUnknown(String)
}

extension HlsManifestCompression : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsManifestCompression] {
        return [
            .gzip,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .gzip: return "GZIP"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsManifestCompression(rawValue: rawValue) ?? HlsManifestCompression.sdkUnknown(rawValue)
    }
}

/// Hls Manifest Duration Format
public enum HlsManifestDurationFormat {
    case floatingPoint
    case integer
    case sdkUnknown(String)
}

extension HlsManifestDurationFormat : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsManifestDurationFormat] {
        return [
            .floatingPoint,
            .integer,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .floatingPoint: return "FLOATING_POINT"
        case .integer: return "INTEGER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsManifestDurationFormat(rawValue: rawValue) ?? HlsManifestDurationFormat.sdkUnknown(rawValue)
    }
}

extension HlsMediaStoreSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectionRetryInterval = "connectionRetryInterval"
        case filecacheDuration = "filecacheDuration"
        case mediaStoreStorageClass = "mediaStoreStorageClass"
        case numRetries = "numRetries"
        case restartDelay = "restartDelay"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if connectionRetryInterval != 0 {
            try encodeContainer.encode(connectionRetryInterval, forKey: .connectionRetryInterval)
        }
        if filecacheDuration != 0 {
            try encodeContainer.encode(filecacheDuration, forKey: .filecacheDuration)
        }
        if let mediaStoreStorageClass = mediaStoreStorageClass {
            try encodeContainer.encode(mediaStoreStorageClass.rawValue, forKey: .mediaStoreStorageClass)
        }
        if numRetries != 0 {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
        if restartDelay != 0 {
            try encodeContainer.encode(restartDelay, forKey: .restartDelay)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionRetryIntervalDecoded = try containerValues.decode(Int.self, forKey: .connectionRetryInterval)
        connectionRetryInterval = connectionRetryIntervalDecoded
        let filecacheDurationDecoded = try containerValues.decode(Int.self, forKey: .filecacheDuration)
        filecacheDuration = filecacheDurationDecoded
        let mediaStoreStorageClassDecoded = try containerValues.decodeIfPresent(HlsMediaStoreStorageClass.self, forKey: .mediaStoreStorageClass)
        mediaStoreStorageClass = mediaStoreStorageClassDecoded
        let numRetriesDecoded = try containerValues.decode(Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
        let restartDelayDecoded = try containerValues.decode(Int.self, forKey: .restartDelay)
        restartDelay = restartDelayDecoded
    }
}

extension HlsMediaStoreSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsMediaStoreSettings(connectionRetryInterval: \(String(describing: connectionRetryInterval)), filecacheDuration: \(String(describing: filecacheDuration)), mediaStoreStorageClass: \(String(describing: mediaStoreStorageClass)), numRetries: \(String(describing: numRetries)), restartDelay: \(String(describing: restartDelay)))"}
}

/// Hls Media Store Settings
public struct HlsMediaStoreSettings: Equatable {
    /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
    public let connectionRetryInterval: Int
    /// Size in seconds of file cache for streaming outputs.
    public let filecacheDuration: Int
    /// When set to temporal, output files are stored in non-persistent memory for faster reading and writing.
    public let mediaStoreStorageClass: HlsMediaStoreStorageClass?
    /// Number of retry attempts that will be made before the Live Event is put into an error state.
    public let numRetries: Int
    /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
    public let restartDelay: Int

    public init (
        connectionRetryInterval: Int = 0,
        filecacheDuration: Int = 0,
        mediaStoreStorageClass: HlsMediaStoreStorageClass? = nil,
        numRetries: Int = 0,
        restartDelay: Int = 0
    )
    {
        self.connectionRetryInterval = connectionRetryInterval
        self.filecacheDuration = filecacheDuration
        self.mediaStoreStorageClass = mediaStoreStorageClass
        self.numRetries = numRetries
        self.restartDelay = restartDelay
    }
}

/// Hls Media Store Storage Class
public enum HlsMediaStoreStorageClass {
    case temporal
    case sdkUnknown(String)
}

extension HlsMediaStoreStorageClass : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsMediaStoreStorageClass] {
        return [
            .temporal,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .temporal: return "TEMPORAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsMediaStoreStorageClass(rawValue: rawValue) ?? HlsMediaStoreStorageClass.sdkUnknown(rawValue)
    }
}

/// Hls Mode
public enum HlsMode {
    case live
    case vod
    case sdkUnknown(String)
}

extension HlsMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsMode] {
        return [
            .live,
            .vod,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .live: return "LIVE"
        case .vod: return "VOD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsMode(rawValue: rawValue) ?? HlsMode.sdkUnknown(rawValue)
    }
}

/// Hls Output Selection
public enum HlsOutputSelection {
    case manifestsAndSegments
    case segmentsOnly
    case variantManifestsAndSegments
    case sdkUnknown(String)
}

extension HlsOutputSelection : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsOutputSelection] {
        return [
            .manifestsAndSegments,
            .segmentsOnly,
            .variantManifestsAndSegments,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .manifestsAndSegments: return "MANIFESTS_AND_SEGMENTS"
        case .segmentsOnly: return "SEGMENTS_ONLY"
        case .variantManifestsAndSegments: return "VARIANT_MANIFESTS_AND_SEGMENTS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsOutputSelection(rawValue: rawValue) ?? HlsOutputSelection.sdkUnknown(rawValue)
    }
}

extension HlsOutputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case h265PackagingType = "h265PackagingType"
        case hlsSettings = "hlsSettings"
        case nameModifier = "nameModifier"
        case segmentModifier = "segmentModifier"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let h265PackagingType = h265PackagingType {
            try encodeContainer.encode(h265PackagingType.rawValue, forKey: .h265PackagingType)
        }
        if let hlsSettings = hlsSettings {
            try encodeContainer.encode(hlsSettings, forKey: .hlsSettings)
        }
        if let nameModifier = nameModifier {
            try encodeContainer.encode(nameModifier, forKey: .nameModifier)
        }
        if let segmentModifier = segmentModifier {
            try encodeContainer.encode(segmentModifier, forKey: .segmentModifier)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let h265PackagingTypeDecoded = try containerValues.decodeIfPresent(HlsH265PackagingType.self, forKey: .h265PackagingType)
        h265PackagingType = h265PackagingTypeDecoded
        let hlsSettingsDecoded = try containerValues.decodeIfPresent(HlsSettings.self, forKey: .hlsSettings)
        hlsSettings = hlsSettingsDecoded
        let nameModifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nameModifier)
        nameModifier = nameModifierDecoded
        let segmentModifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .segmentModifier)
        segmentModifier = segmentModifierDecoded
    }
}

extension HlsOutputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsOutputSettings(h265PackagingType: \(String(describing: h265PackagingType)), hlsSettings: \(String(describing: hlsSettings)), nameModifier: \(String(describing: nameModifier)), segmentModifier: \(String(describing: segmentModifier)))"}
}

/// Hls Output Settings
public struct HlsOutputSettings: Equatable {
    /// Only applicable when this output is referencing an H.265 video description.
    /// Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
    public let h265PackagingType: HlsH265PackagingType?
    /// Settings regarding the underlying stream. These settings are different for audio-only outputs.
    public let hlsSettings: HlsSettings?
    /// String concatenated to the end of the destination filename. Accepts \"Format Identifiers\":#formatIdentifierParameters.
    public let nameModifier: String?
    /// String concatenated to end of segment filenames.
    public let segmentModifier: String?

    public init (
        h265PackagingType: HlsH265PackagingType? = nil,
        hlsSettings: HlsSettings? = nil,
        nameModifier: String? = nil,
        segmentModifier: String? = nil
    )
    {
        self.h265PackagingType = h265PackagingType
        self.hlsSettings = hlsSettings
        self.nameModifier = nameModifier
        self.segmentModifier = segmentModifier
    }
}

/// Hls Program Date Time
public enum HlsProgramDateTime {
    case exclude
    case include
    case sdkUnknown(String)
}

extension HlsProgramDateTime : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsProgramDateTime] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsProgramDateTime(rawValue: rawValue) ?? HlsProgramDateTime.sdkUnknown(rawValue)
    }
}

/// Hls Redundant Manifest
public enum HlsRedundantManifest {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension HlsRedundantManifest : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsRedundantManifest] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsRedundantManifest(rawValue: rawValue) ?? HlsRedundantManifest.sdkUnknown(rawValue)
    }
}

extension HlsS3Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cannedAcl = "cannedAcl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cannedAcl = cannedAcl {
            try encodeContainer.encode(cannedAcl.rawValue, forKey: .cannedAcl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cannedAclDecoded = try containerValues.decodeIfPresent(S3CannedAcl.self, forKey: .cannedAcl)
        cannedAcl = cannedAclDecoded
    }
}

extension HlsS3Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsS3Settings(cannedAcl: \(String(describing: cannedAcl)))"}
}

/// Hls S3 Settings
public struct HlsS3Settings: Equatable {
    /// Specify the canned ACL to apply to each S3 request. Defaults to none.
    public let cannedAcl: S3CannedAcl?

    public init (
        cannedAcl: S3CannedAcl? = nil
    )
    {
        self.cannedAcl = cannedAcl
    }
}

/// Hls Segmentation Mode
public enum HlsSegmentationMode {
    case useInputSegmentation
    case useSegmentDuration
    case sdkUnknown(String)
}

extension HlsSegmentationMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsSegmentationMode] {
        return [
            .useInputSegmentation,
            .useSegmentDuration,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .useInputSegmentation: return "USE_INPUT_SEGMENTATION"
        case .useSegmentDuration: return "USE_SEGMENT_DURATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsSegmentationMode(rawValue: rawValue) ?? HlsSegmentationMode.sdkUnknown(rawValue)
    }
}

extension HlsSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioOnlyHlsSettings = "audioOnlyHlsSettings"
        case fmp4HlsSettings = "fmp4HlsSettings"
        case frameCaptureHlsSettings = "frameCaptureHlsSettings"
        case standardHlsSettings = "standardHlsSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioOnlyHlsSettings = audioOnlyHlsSettings {
            try encodeContainer.encode(audioOnlyHlsSettings, forKey: .audioOnlyHlsSettings)
        }
        if let fmp4HlsSettings = fmp4HlsSettings {
            try encodeContainer.encode(fmp4HlsSettings, forKey: .fmp4HlsSettings)
        }
        if let frameCaptureHlsSettings = frameCaptureHlsSettings {
            try encodeContainer.encode(frameCaptureHlsSettings, forKey: .frameCaptureHlsSettings)
        }
        if let standardHlsSettings = standardHlsSettings {
            try encodeContainer.encode(standardHlsSettings, forKey: .standardHlsSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioOnlyHlsSettingsDecoded = try containerValues.decodeIfPresent(AudioOnlyHlsSettings.self, forKey: .audioOnlyHlsSettings)
        audioOnlyHlsSettings = audioOnlyHlsSettingsDecoded
        let fmp4HlsSettingsDecoded = try containerValues.decodeIfPresent(Fmp4HlsSettings.self, forKey: .fmp4HlsSettings)
        fmp4HlsSettings = fmp4HlsSettingsDecoded
        let frameCaptureHlsSettingsDecoded = try containerValues.decodeIfPresent(FrameCaptureHlsSettings.self, forKey: .frameCaptureHlsSettings)
        frameCaptureHlsSettings = frameCaptureHlsSettingsDecoded
        let standardHlsSettingsDecoded = try containerValues.decodeIfPresent(StandardHlsSettings.self, forKey: .standardHlsSettings)
        standardHlsSettings = standardHlsSettingsDecoded
    }
}

extension HlsSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsSettings(audioOnlyHlsSettings: \(String(describing: audioOnlyHlsSettings)), fmp4HlsSettings: \(String(describing: fmp4HlsSettings)), frameCaptureHlsSettings: \(String(describing: frameCaptureHlsSettings)), standardHlsSettings: \(String(describing: standardHlsSettings)))"}
}

/// Hls Settings
public struct HlsSettings: Equatable {
    /// Audio Only Hls Settings
    public let audioOnlyHlsSettings: AudioOnlyHlsSettings?
    /// Fmp4 Hls Settings
    public let fmp4HlsSettings: Fmp4HlsSettings?
    /// Frame Capture Hls Settings
    public let frameCaptureHlsSettings: FrameCaptureHlsSettings?
    /// Standard Hls Settings
    public let standardHlsSettings: StandardHlsSettings?

    public init (
        audioOnlyHlsSettings: AudioOnlyHlsSettings? = nil,
        fmp4HlsSettings: Fmp4HlsSettings? = nil,
        frameCaptureHlsSettings: FrameCaptureHlsSettings? = nil,
        standardHlsSettings: StandardHlsSettings? = nil
    )
    {
        self.audioOnlyHlsSettings = audioOnlyHlsSettings
        self.fmp4HlsSettings = fmp4HlsSettings
        self.frameCaptureHlsSettings = frameCaptureHlsSettings
        self.standardHlsSettings = standardHlsSettings
    }
}

/// Hls Stream Inf Resolution
public enum HlsStreamInfResolution {
    case exclude
    case include
    case sdkUnknown(String)
}

extension HlsStreamInfResolution : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsStreamInfResolution] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsStreamInfResolution(rawValue: rawValue) ?? HlsStreamInfResolution.sdkUnknown(rawValue)
    }
}

/// Hls Timed Metadata Id3 Frame
public enum HlsTimedMetadataId3Frame {
    case `none`
    case priv
    case tdrl
    case sdkUnknown(String)
}

extension HlsTimedMetadataId3Frame : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsTimedMetadataId3Frame] {
        return [
            .none,
            .priv,
            .tdrl,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .priv: return "PRIV"
        case .tdrl: return "TDRL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsTimedMetadataId3Frame(rawValue: rawValue) ?? HlsTimedMetadataId3Frame.sdkUnknown(rawValue)
    }
}

extension HlsTimedMetadataScheduleActionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id3 = "id3"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id3 = id3 {
            try encodeContainer.encode(id3, forKey: .id3)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let id3Decoded = try containerValues.decodeIfPresent(String.self, forKey: .id3)
        id3 = id3Decoded
    }
}

extension HlsTimedMetadataScheduleActionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsTimedMetadataScheduleActionSettings(id3: \(String(describing: id3)))"}
}

/// Settings for the action to emit HLS metadata
public struct HlsTimedMetadataScheduleActionSettings: Equatable {
    /// Base64 string formatted according to the ID3 specification: http://id3.org/id3v2.4.0-structure
    public let id3: String?

    public init (
        id3: String? = nil
    )
    {
        self.id3 = id3
    }
}

/// Hls Ts File Mode
public enum HlsTsFileMode {
    case segmentedFiles
    case singleFile
    case sdkUnknown(String)
}

extension HlsTsFileMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsTsFileMode] {
        return [
            .segmentedFiles,
            .singleFile,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .segmentedFiles: return "SEGMENTED_FILES"
        case .singleFile: return "SINGLE_FILE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsTsFileMode(rawValue: rawValue) ?? HlsTsFileMode.sdkUnknown(rawValue)
    }
}

/// Hls Webdav Http Transfer Mode
public enum HlsWebdavHttpTransferMode {
    case chunked
    case nonChunked
    case sdkUnknown(String)
}

extension HlsWebdavHttpTransferMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsWebdavHttpTransferMode] {
        return [
            .chunked,
            .nonChunked,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .chunked: return "CHUNKED"
        case .nonChunked: return "NON_CHUNKED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsWebdavHttpTransferMode(rawValue: rawValue) ?? HlsWebdavHttpTransferMode.sdkUnknown(rawValue)
    }
}

extension HlsWebdavSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectionRetryInterval = "connectionRetryInterval"
        case filecacheDuration = "filecacheDuration"
        case httpTransferMode = "httpTransferMode"
        case numRetries = "numRetries"
        case restartDelay = "restartDelay"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if connectionRetryInterval != 0 {
            try encodeContainer.encode(connectionRetryInterval, forKey: .connectionRetryInterval)
        }
        if filecacheDuration != 0 {
            try encodeContainer.encode(filecacheDuration, forKey: .filecacheDuration)
        }
        if let httpTransferMode = httpTransferMode {
            try encodeContainer.encode(httpTransferMode.rawValue, forKey: .httpTransferMode)
        }
        if numRetries != 0 {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
        if restartDelay != 0 {
            try encodeContainer.encode(restartDelay, forKey: .restartDelay)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionRetryIntervalDecoded = try containerValues.decode(Int.self, forKey: .connectionRetryInterval)
        connectionRetryInterval = connectionRetryIntervalDecoded
        let filecacheDurationDecoded = try containerValues.decode(Int.self, forKey: .filecacheDuration)
        filecacheDuration = filecacheDurationDecoded
        let httpTransferModeDecoded = try containerValues.decodeIfPresent(HlsWebdavHttpTransferMode.self, forKey: .httpTransferMode)
        httpTransferMode = httpTransferModeDecoded
        let numRetriesDecoded = try containerValues.decode(Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
        let restartDelayDecoded = try containerValues.decode(Int.self, forKey: .restartDelay)
        restartDelay = restartDelayDecoded
    }
}

extension HlsWebdavSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsWebdavSettings(connectionRetryInterval: \(String(describing: connectionRetryInterval)), filecacheDuration: \(String(describing: filecacheDuration)), httpTransferMode: \(String(describing: httpTransferMode)), numRetries: \(String(describing: numRetries)), restartDelay: \(String(describing: restartDelay)))"}
}

/// Hls Webdav Settings
public struct HlsWebdavSettings: Equatable {
    /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
    public let connectionRetryInterval: Int
    /// Size in seconds of file cache for streaming outputs.
    public let filecacheDuration: Int
    /// Specify whether or not to use chunked transfer encoding to WebDAV.
    public let httpTransferMode: HlsWebdavHttpTransferMode?
    /// Number of retry attempts that will be made before the Live Event is put into an error state.
    public let numRetries: Int
    /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
    public let restartDelay: Int

    public init (
        connectionRetryInterval: Int = 0,
        filecacheDuration: Int = 0,
        httpTransferMode: HlsWebdavHttpTransferMode? = nil,
        numRetries: Int = 0,
        restartDelay: Int = 0
    )
    {
        self.connectionRetryInterval = connectionRetryInterval
        self.filecacheDuration = filecacheDuration
        self.httpTransferMode = httpTransferMode
        self.numRetries = numRetries
        self.restartDelay = restartDelay
    }
}

extension HtmlMotionGraphicsSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension HtmlMotionGraphicsSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HtmlMotionGraphicsSettings()"}
}

/// Html Motion Graphics Settings
public struct HtmlMotionGraphicsSettings: Equatable {

    public init() {}
}

/// When set to "standard", an I-Frame only playlist will be written out for each video output in the output group. This I-Frame only playlist will contain byte range offsets pointing to the I-frame(s) in each segment.
public enum IFrameOnlyPlaylistType {
    case disabled
    case standard
    case sdkUnknown(String)
}

extension IFrameOnlyPlaylistType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [IFrameOnlyPlaylistType] {
        return [
            .disabled,
            .standard,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .standard: return "STANDARD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = IFrameOnlyPlaylistType(rawValue: rawValue) ?? IFrameOnlyPlaylistType.sdkUnknown(rawValue)
    }
}

extension ImmediateModeScheduleActionStartSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension ImmediateModeScheduleActionStartSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ImmediateModeScheduleActionStartSettings()"}
}

/// Settings to configure an action so that it occurs as soon as possible.
public struct ImmediateModeScheduleActionStartSettings: Equatable {

    public init() {}
}

extension Input: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case attachedChannels = "attachedChannels"
        case destinations = "destinations"
        case id = "id"
        case inputClass = "inputClass"
        case inputDevices = "inputDevices"
        case inputPartnerIds = "inputPartnerIds"
        case inputSourceType = "inputSourceType"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case roleArn = "roleArn"
        case securityGroups = "securityGroups"
        case sources = "sources"
        case state = "state"
        case tags = "tags"
        case type = "type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let attachedChannels = attachedChannels {
            var attachedChannelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachedChannels)
            for __listof__string0 in attachedChannels {
                try attachedChannelsContainer.encode(__listof__string0)
            }
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for __listofinputdestination0 in destinations {
                try destinationsContainer.encode(__listofinputdestination0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inputClass = inputClass {
            try encodeContainer.encode(inputClass.rawValue, forKey: .inputClass)
        }
        if let inputDevices = inputDevices {
            var inputDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDevices)
            for __listofinputdevicesettings0 in inputDevices {
                try inputDevicesContainer.encode(__listofinputdevicesettings0)
            }
        }
        if let inputPartnerIds = inputPartnerIds {
            var inputPartnerIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputPartnerIds)
            for __listof__string0 in inputPartnerIds {
                try inputPartnerIdsContainer.encode(__listof__string0)
            }
        }
        if let inputSourceType = inputSourceType {
            try encodeContainer.encode(inputSourceType.rawValue, forKey: .inputSourceType)
        }
        if let mediaConnectFlows = mediaConnectFlows {
            var mediaConnectFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaConnectFlows)
            for __listofmediaconnectflow0 in mediaConnectFlows {
                try mediaConnectFlowsContainer.encode(__listofmediaconnectflow0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for __listof__string0 in securityGroups {
                try securityGroupsContainer.encode(__listof__string0)
            }
        }
        if let sources = sources {
            var sourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sources)
            for __listofinputsource0 in sources {
                try sourcesContainer.encode(__listofinputsource0)
            }
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let attachedChannelsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .attachedChannels)
        var attachedChannelsDecoded0:[String]? = nil
        if let attachedChannelsContainer = attachedChannelsContainer {
            attachedChannelsDecoded0 = [String]()
            for string0 in attachedChannelsContainer {
                if let string0 = string0 {
                    attachedChannelsDecoded0?.append(string0)
                }
            }
        }
        attachedChannels = attachedChannelsDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([InputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[InputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [InputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let inputClassDecoded = try containerValues.decodeIfPresent(InputClass.self, forKey: .inputClass)
        inputClass = inputClassDecoded
        let inputDevicesContainer = try containerValues.decodeIfPresent([InputDeviceSettings?].self, forKey: .inputDevices)
        var inputDevicesDecoded0:[InputDeviceSettings]? = nil
        if let inputDevicesContainer = inputDevicesContainer {
            inputDevicesDecoded0 = [InputDeviceSettings]()
            for structure0 in inputDevicesContainer {
                if let structure0 = structure0 {
                    inputDevicesDecoded0?.append(structure0)
                }
            }
        }
        inputDevices = inputDevicesDecoded0
        let inputPartnerIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .inputPartnerIds)
        var inputPartnerIdsDecoded0:[String]? = nil
        if let inputPartnerIdsContainer = inputPartnerIdsContainer {
            inputPartnerIdsDecoded0 = [String]()
            for string0 in inputPartnerIdsContainer {
                if let string0 = string0 {
                    inputPartnerIdsDecoded0?.append(string0)
                }
            }
        }
        inputPartnerIds = inputPartnerIdsDecoded0
        let inputSourceTypeDecoded = try containerValues.decodeIfPresent(InputSourceType.self, forKey: .inputSourceType)
        inputSourceType = inputSourceTypeDecoded
        let mediaConnectFlowsContainer = try containerValues.decodeIfPresent([MediaConnectFlow?].self, forKey: .mediaConnectFlows)
        var mediaConnectFlowsDecoded0:[MediaConnectFlow]? = nil
        if let mediaConnectFlowsContainer = mediaConnectFlowsContainer {
            mediaConnectFlowsDecoded0 = [MediaConnectFlow]()
            for structure0 in mediaConnectFlowsContainer {
                if let structure0 = structure0 {
                    mediaConnectFlowsDecoded0?.append(structure0)
                }
            }
        }
        mediaConnectFlows = mediaConnectFlowsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let sourcesContainer = try containerValues.decodeIfPresent([InputSource?].self, forKey: .sources)
        var sourcesDecoded0:[InputSource]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [InputSource]()
            for structure0 in sourcesContainer {
                if let structure0 = structure0 {
                    sourcesDecoded0?.append(structure0)
                }
            }
        }
        sources = sourcesDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(InputState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(InputType.self, forKey: .type)
        type = typeDecoded
    }
}

extension Input: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Input(arn: \(String(describing: arn)), attachedChannels: \(String(describing: attachedChannels)), destinations: \(String(describing: destinations)), id: \(String(describing: id)), inputClass: \(String(describing: inputClass)), inputDevices: \(String(describing: inputDevices)), inputPartnerIds: \(String(describing: inputPartnerIds)), inputSourceType: \(String(describing: inputSourceType)), mediaConnectFlows: \(String(describing: mediaConnectFlows)), name: \(String(describing: name)), roleArn: \(String(describing: roleArn)), securityGroups: \(String(describing: securityGroups)), sources: \(String(describing: sources)), state: \(String(describing: state)), tags: \(String(describing: tags)), type: \(String(describing: type)))"}
}

/// Placeholder documentation for Input
public struct Input: Equatable {
    /// The Unique ARN of the input (generated, immutable).
    public let arn: String?
    /// A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
    public let attachedChannels: [String]?
    /// A list of the destinations of the input (PUSH-type).
    public let destinations: [InputDestination]?
    /// The generated ID of the input (unique for user account, immutable).
    public let id: String?
    /// STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails.
    /// SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also  SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input.
    public let inputClass: InputClass?
    /// Settings for the input devices.
    public let inputDevices: [InputDeviceSettings]?
    /// A list of IDs for all Inputs which are partners of this one.
    public let inputPartnerIds: [String]?
    /// Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes
    /// during input switch actions. Presently, this functionality only works with MP4_FILE inputs.
    public let inputSourceType: InputSourceType?
    /// A list of MediaConnect Flows for this input.
    public let mediaConnectFlows: [MediaConnectFlow]?
    /// The user-assigned name (This is a mutable value).
    public let name: String?
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    public let roleArn: String?
    /// A list of IDs for all the Input Security Groups attached to the input.
    public let securityGroups: [String]?
    /// A list of the sources of the input (PULL-type).
    public let sources: [InputSource]?
    /// Placeholder documentation for InputState
    public let state: InputState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// Placeholder documentation for InputType
    public let type: InputType?

    public init (
        arn: String? = nil,
        attachedChannels: [String]? = nil,
        destinations: [InputDestination]? = nil,
        id: String? = nil,
        inputClass: InputClass? = nil,
        inputDevices: [InputDeviceSettings]? = nil,
        inputPartnerIds: [String]? = nil,
        inputSourceType: InputSourceType? = nil,
        mediaConnectFlows: [MediaConnectFlow]? = nil,
        name: String? = nil,
        roleArn: String? = nil,
        securityGroups: [String]? = nil,
        sources: [InputSource]? = nil,
        state: InputState? = nil,
        tags: [String:String]? = nil,
        type: InputType? = nil
    )
    {
        self.arn = arn
        self.attachedChannels = attachedChannels
        self.destinations = destinations
        self.id = id
        self.inputClass = inputClass
        self.inputDevices = inputDevices
        self.inputPartnerIds = inputPartnerIds
        self.inputSourceType = inputSourceType
        self.mediaConnectFlows = mediaConnectFlows
        self.name = name
        self.roleArn = roleArn
        self.securityGroups = securityGroups
        self.sources = sources
        self.state = state
        self.tags = tags
        self.type = type
    }
}

extension InputAttachment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case automaticInputFailoverSettings = "automaticInputFailoverSettings"
        case inputAttachmentName = "inputAttachmentName"
        case inputId = "inputId"
        case inputSettings = "inputSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automaticInputFailoverSettings = automaticInputFailoverSettings {
            try encodeContainer.encode(automaticInputFailoverSettings, forKey: .automaticInputFailoverSettings)
        }
        if let inputAttachmentName = inputAttachmentName {
            try encodeContainer.encode(inputAttachmentName, forKey: .inputAttachmentName)
        }
        if let inputId = inputId {
            try encodeContainer.encode(inputId, forKey: .inputId)
        }
        if let inputSettings = inputSettings {
            try encodeContainer.encode(inputSettings, forKey: .inputSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automaticInputFailoverSettingsDecoded = try containerValues.decodeIfPresent(AutomaticInputFailoverSettings.self, forKey: .automaticInputFailoverSettings)
        automaticInputFailoverSettings = automaticInputFailoverSettingsDecoded
        let inputAttachmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputAttachmentName)
        inputAttachmentName = inputAttachmentNameDecoded
        let inputIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputId)
        inputId = inputIdDecoded
        let inputSettingsDecoded = try containerValues.decodeIfPresent(InputSettings.self, forKey: .inputSettings)
        inputSettings = inputSettingsDecoded
    }
}

extension InputAttachment: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputAttachment(automaticInputFailoverSettings: \(String(describing: automaticInputFailoverSettings)), inputAttachmentName: \(String(describing: inputAttachmentName)), inputId: \(String(describing: inputId)), inputSettings: \(String(describing: inputSettings)))"}
}

/// Placeholder documentation for InputAttachment
public struct InputAttachment: Equatable {
    /// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
    public let automaticInputFailoverSettings: AutomaticInputFailoverSettings?
    /// User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
    public let inputAttachmentName: String?
    /// The ID of the input
    public let inputId: String?
    /// Settings of an input (caption selector, etc.)
    public let inputSettings: InputSettings?

    public init (
        automaticInputFailoverSettings: AutomaticInputFailoverSettings? = nil,
        inputAttachmentName: String? = nil,
        inputId: String? = nil,
        inputSettings: InputSettings? = nil
    )
    {
        self.automaticInputFailoverSettings = automaticInputFailoverSettings
        self.inputAttachmentName = inputAttachmentName
        self.inputId = inputId
        self.inputSettings = inputSettings
    }
}

extension InputChannelLevel: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gain = "gain"
        case inputChannel = "inputChannel"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if gain != 0 {
            try encodeContainer.encode(gain, forKey: .gain)
        }
        if inputChannel != 0 {
            try encodeContainer.encode(inputChannel, forKey: .inputChannel)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gainDecoded = try containerValues.decode(Int.self, forKey: .gain)
        gain = gainDecoded
        let inputChannelDecoded = try containerValues.decode(Int.self, forKey: .inputChannel)
        inputChannel = inputChannelDecoded
    }
}

extension InputChannelLevel: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputChannelLevel(gain: \(String(describing: gain)), inputChannel: \(String(describing: inputChannel)))"}
}

/// Input Channel Level
public struct InputChannelLevel: Equatable {
    /// Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
    public let gain: Int
    /// The index of the input channel used as a source.
    public let inputChannel: Int

    public init (
        gain: Int = 0,
        inputChannel: Int = 0
    )
    {
        self.gain = gain
        self.inputChannel = inputChannel
    }
}

/// A standard input has two sources and a single pipeline input only has one.
public enum InputClass {
    case singlePipeline
    case standard
    case sdkUnknown(String)
}

extension InputClass : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputClass] {
        return [
            .singlePipeline,
            .standard,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .singlePipeline: return "SINGLE_PIPELINE"
        case .standard: return "STANDARD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputClass(rawValue: rawValue) ?? InputClass.sdkUnknown(rawValue)
    }
}

extension InputClippingSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inputTimecodeSource = "inputTimecodeSource"
        case startTimecode = "startTimecode"
        case stopTimecode = "stopTimecode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputTimecodeSource = inputTimecodeSource {
            try encodeContainer.encode(inputTimecodeSource.rawValue, forKey: .inputTimecodeSource)
        }
        if let startTimecode = startTimecode {
            try encodeContainer.encode(startTimecode, forKey: .startTimecode)
        }
        if let stopTimecode = stopTimecode {
            try encodeContainer.encode(stopTimecode, forKey: .stopTimecode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputTimecodeSourceDecoded = try containerValues.decodeIfPresent(InputTimecodeSource.self, forKey: .inputTimecodeSource)
        inputTimecodeSource = inputTimecodeSourceDecoded
        let startTimecodeDecoded = try containerValues.decodeIfPresent(StartTimecode.self, forKey: .startTimecode)
        startTimecode = startTimecodeDecoded
        let stopTimecodeDecoded = try containerValues.decodeIfPresent(StopTimecode.self, forKey: .stopTimecode)
        stopTimecode = stopTimecodeDecoded
    }
}

extension InputClippingSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputClippingSettings(inputTimecodeSource: \(String(describing: inputTimecodeSource)), startTimecode: \(String(describing: startTimecode)), stopTimecode: \(String(describing: stopTimecode)))"}
}

/// Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
public struct InputClippingSettings: Equatable {
    /// The source of the timecodes in the source being clipped.
    public let inputTimecodeSource: InputTimecodeSource?
    /// Settings to identify the start of the clip.
    public let startTimecode: StartTimecode?
    /// Settings to identify the end of the clip.
    public let stopTimecode: StopTimecode?

    public init (
        inputTimecodeSource: InputTimecodeSource? = nil,
        startTimecode: StartTimecode? = nil,
        stopTimecode: StopTimecode? = nil
    )
    {
        self.inputTimecodeSource = inputTimecodeSource
        self.startTimecode = startTimecode
        self.stopTimecode = stopTimecode
    }
}

/// codec in increasing order of complexity
public enum InputCodec {
    case avc
    case hevc
    case mpeg2
    case sdkUnknown(String)
}

extension InputCodec : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputCodec] {
        return [
            .avc,
            .hevc,
            .mpeg2,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .avc: return "AVC"
        case .hevc: return "HEVC"
        case .mpeg2: return "MPEG2"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputCodec(rawValue: rawValue) ?? InputCodec.sdkUnknown(rawValue)
    }
}

/// Input Deblock Filter
public enum InputDeblockFilter {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension InputDeblockFilter : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputDeblockFilter] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputDeblockFilter(rawValue: rawValue) ?? InputDeblockFilter.sdkUnknown(rawValue)
    }
}

/// Input Denoise Filter
public enum InputDenoiseFilter {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension InputDenoiseFilter : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputDenoiseFilter] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputDenoiseFilter(rawValue: rawValue) ?? InputDenoiseFilter.sdkUnknown(rawValue)
    }
}

extension InputDestination: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ip = "ip"
        case port = "port"
        case url = "url"
        case vpc = "vpc"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ip = ip {
            try encodeContainer.encode(ip, forKey: .ip)
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let vpc = vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ip)
        ip = ipDecoded
        let portDecoded = try containerValues.decodeIfPresent(String.self, forKey: .port)
        port = portDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
        let vpcDecoded = try containerValues.decodeIfPresent(InputDestinationVpc.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension InputDestination: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputDestination(ip: \(String(describing: ip)), port: \(String(describing: port)), url: \(String(describing: url)), vpc: \(String(describing: vpc)))"}
}

/// The settings for a PUSH type input.
public struct InputDestination: Equatable {
    /// The system-generated static IP address of endpoint.
    /// It remains fixed for the lifetime of the input.
    public let ip: String?
    /// The port number for the input.
    public let port: String?
    /// This represents the endpoint that the customer stream will be
    /// pushed to.
    public let url: String?
    /// The properties for a VPC type input destination.
    public let vpc: InputDestinationVpc?

    public init (
        ip: String? = nil,
        port: String? = nil,
        url: String? = nil,
        vpc: InputDestinationVpc? = nil
    )
    {
        self.ip = ip
        self.port = port
        self.url = url
        self.vpc = vpc
    }
}

extension InputDestinationRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case streamName = "streamName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamName = streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamName)
        streamName = streamNameDecoded
    }
}

extension InputDestinationRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputDestinationRequest(streamName: \(String(describing: streamName)))"}
}

/// Endpoint settings for a PUSH type input.
public struct InputDestinationRequest: Equatable {
    /// A unique name for the location the RTMP stream is being pushed
    /// to.
    public let streamName: String?

    public init (
        streamName: String? = nil
    )
    {
        self.streamName = streamName
    }
}

extension InputDestinationVpc: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone = "availabilityZone"
        case networkInterfaceId = "networkInterfaceId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let networkInterfaceId = networkInterfaceId {
            try encodeContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
    }
}

extension InputDestinationVpc: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputDestinationVpc(availabilityZone: \(String(describing: availabilityZone)), networkInterfaceId: \(String(describing: networkInterfaceId)))"}
}

/// The properties for a VPC type input destination.
public struct InputDestinationVpc: Equatable {
    /// The availability zone of the Input destination.
    public let availabilityZone: String?
    /// The network interface ID of the Input destination in the VPC.
    public let networkInterfaceId: String?

    public init (
        availabilityZone: String? = nil,
        networkInterfaceId: String? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.networkInterfaceId = networkInterfaceId
    }
}

/// The source at the input device that is currently active.
public enum InputDeviceActiveInput {
    case hdmi
    case sdi
    case sdkUnknown(String)
}

extension InputDeviceActiveInput : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputDeviceActiveInput] {
        return [
            .hdmi,
            .sdi,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hdmi: return "HDMI"
        case .sdi: return "SDI"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputDeviceActiveInput(rawValue: rawValue) ?? InputDeviceActiveInput.sdkUnknown(rawValue)
    }
}

extension InputDeviceConfigurableSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configuredInput = "configuredInput"
        case maxBitrate = "maxBitrate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuredInput = configuredInput {
            try encodeContainer.encode(configuredInput.rawValue, forKey: .configuredInput)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configuredInputDecoded = try containerValues.decodeIfPresent(InputDeviceConfiguredInput.self, forKey: .configuredInput)
        configuredInput = configuredInputDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
    }
}

extension InputDeviceConfigurableSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputDeviceConfigurableSettings(configuredInput: \(String(describing: configuredInput)), maxBitrate: \(String(describing: maxBitrate)))"}
}

/// Configurable settings for the input device.
public struct InputDeviceConfigurableSettings: Equatable {
    /// The input source that you want to use. If the device has a source connected to only one of its input ports, or if you don't care which source the device sends, specify Auto. If the device has sources connected to both its input ports, and you want to use a specific source, specify the source.
    public let configuredInput: InputDeviceConfiguredInput?
    /// The maximum bitrate in bits per second. Set a value here to throttle the bitrate of the source video.
    public let maxBitrate: Int

    public init (
        configuredInput: InputDeviceConfiguredInput? = nil,
        maxBitrate: Int = 0
    )
    {
        self.configuredInput = configuredInput
        self.maxBitrate = maxBitrate
    }
}

/// The source to activate (use) from the input device.
public enum InputDeviceConfiguredInput {
    case auto
    case hdmi
    case sdi
    case sdkUnknown(String)
}

extension InputDeviceConfiguredInput : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputDeviceConfiguredInput] {
        return [
            .auto,
            .hdmi,
            .sdi,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .hdmi: return "HDMI"
        case .sdi: return "SDI"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputDeviceConfiguredInput(rawValue: rawValue) ?? InputDeviceConfiguredInput.sdkUnknown(rawValue)
    }
}

/// The state of the connection between the input device and AWS.
public enum InputDeviceConnectionState {
    case connected
    case disconnected
    case sdkUnknown(String)
}

extension InputDeviceConnectionState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputDeviceConnectionState] {
        return [
            .connected,
            .disconnected,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .connected: return "CONNECTED"
        case .disconnected: return "DISCONNECTED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputDeviceConnectionState(rawValue: rawValue) ?? InputDeviceConnectionState.sdkUnknown(rawValue)
    }
}

extension InputDeviceHdSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activeInput = "activeInput"
        case configuredInput = "configuredInput"
        case deviceState = "deviceState"
        case framerate = "framerate"
        case height = "height"
        case maxBitrate = "maxBitrate"
        case scanType = "scanType"
        case width = "width"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeInput = activeInput {
            try encodeContainer.encode(activeInput.rawValue, forKey: .activeInput)
        }
        if let configuredInput = configuredInput {
            try encodeContainer.encode(configuredInput.rawValue, forKey: .configuredInput)
        }
        if let deviceState = deviceState {
            try encodeContainer.encode(deviceState.rawValue, forKey: .deviceState)
        }
        if framerate != 0.0 {
            try encodeContainer.encode(framerate, forKey: .framerate)
        }
        if height != 0 {
            try encodeContainer.encode(height, forKey: .height)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let scanType = scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if width != 0 {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeInputDecoded = try containerValues.decodeIfPresent(InputDeviceActiveInput.self, forKey: .activeInput)
        activeInput = activeInputDecoded
        let configuredInputDecoded = try containerValues.decodeIfPresent(InputDeviceConfiguredInput.self, forKey: .configuredInput)
        configuredInput = configuredInputDecoded
        let deviceStateDecoded = try containerValues.decodeIfPresent(InputDeviceState.self, forKey: .deviceState)
        deviceState = deviceStateDecoded
        let framerateDecoded = try containerValues.decode(Double.self, forKey: .framerate)
        framerate = framerateDecoded
        let heightDecoded = try containerValues.decode(Int.self, forKey: .height)
        height = heightDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(InputDeviceScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let widthDecoded = try containerValues.decode(Int.self, forKey: .width)
        width = widthDecoded
    }
}

extension InputDeviceHdSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputDeviceHdSettings(activeInput: \(String(describing: activeInput)), configuredInput: \(String(describing: configuredInput)), deviceState: \(String(describing: deviceState)), framerate: \(String(describing: framerate)), height: \(String(describing: height)), maxBitrate: \(String(describing: maxBitrate)), scanType: \(String(describing: scanType)), width: \(String(describing: width)))"}
}

/// Settings that describe the active source from the input device, and the video characteristics of that source.
public struct InputDeviceHdSettings: Equatable {
    /// If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
    public let activeInput: InputDeviceActiveInput?
    /// The source at the input device that is currently active. You can specify this source.
    public let configuredInput: InputDeviceConfiguredInput?
    /// The state of the input device.
    public let deviceState: InputDeviceState?
    /// The frame rate of the video source.
    public let framerate: Double
    /// The height of the video source, in pixels.
    public let height: Int
    /// The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
    public let maxBitrate: Int
    /// The scan type of the video source.
    public let scanType: InputDeviceScanType?
    /// The width of the video source, in pixels.
    public let width: Int

    public init (
        activeInput: InputDeviceActiveInput? = nil,
        configuredInput: InputDeviceConfiguredInput? = nil,
        deviceState: InputDeviceState? = nil,
        framerate: Double = 0.0,
        height: Int = 0,
        maxBitrate: Int = 0,
        scanType: InputDeviceScanType? = nil,
        width: Int = 0
    )
    {
        self.activeInput = activeInput
        self.configuredInput = configuredInput
        self.deviceState = deviceState
        self.framerate = framerate
        self.height = height
        self.maxBitrate = maxBitrate
        self.scanType = scanType
        self.width = width
    }
}

/// Specifies whether the input device has been configured (outside of MediaLive) to use a dynamic IP address assignment (DHCP) or a static IP address.
public enum InputDeviceIpScheme {
    case dhcp
    case `static`
    case sdkUnknown(String)
}

extension InputDeviceIpScheme : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputDeviceIpScheme] {
        return [
            .dhcp,
            .static,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dhcp: return "DHCP"
        case .static: return "STATIC"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputDeviceIpScheme(rawValue: rawValue) ?? InputDeviceIpScheme.sdkUnknown(rawValue)
    }
}

extension InputDeviceNetworkSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dnsAddresses = "dnsAddresses"
        case gateway = "gateway"
        case ipAddress = "ipAddress"
        case ipScheme = "ipScheme"
        case subnetMask = "subnetMask"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsAddresses = dnsAddresses {
            var dnsAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsAddresses)
            for __listof__string0 in dnsAddresses {
                try dnsAddressesContainer.encode(__listof__string0)
            }
        }
        if let gateway = gateway {
            try encodeContainer.encode(gateway, forKey: .gateway)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let ipScheme = ipScheme {
            try encodeContainer.encode(ipScheme.rawValue, forKey: .ipScheme)
        }
        if let subnetMask = subnetMask {
            try encodeContainer.encode(subnetMask, forKey: .subnetMask)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dnsAddressesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .dnsAddresses)
        var dnsAddressesDecoded0:[String]? = nil
        if let dnsAddressesContainer = dnsAddressesContainer {
            dnsAddressesDecoded0 = [String]()
            for string0 in dnsAddressesContainer {
                if let string0 = string0 {
                    dnsAddressesDecoded0?.append(string0)
                }
            }
        }
        dnsAddresses = dnsAddressesDecoded0
        let gatewayDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gateway)
        gateway = gatewayDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let ipSchemeDecoded = try containerValues.decodeIfPresent(InputDeviceIpScheme.self, forKey: .ipScheme)
        ipScheme = ipSchemeDecoded
        let subnetMaskDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetMask)
        subnetMask = subnetMaskDecoded
    }
}

extension InputDeviceNetworkSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputDeviceNetworkSettings(dnsAddresses: \(String(describing: dnsAddresses)), gateway: \(String(describing: gateway)), ipAddress: \(String(describing: ipAddress)), ipScheme: \(String(describing: ipScheme)), subnetMask: \(String(describing: subnetMask)))"}
}

/// The network settings for the input device.
public struct InputDeviceNetworkSettings: Equatable {
    /// The DNS addresses of the input device.
    public let dnsAddresses: [String]?
    /// The network gateway IP address.
    public let gateway: String?
    /// The IP address of the input device.
    public let ipAddress: String?
    /// Specifies whether the input device has been configured (outside of MediaLive) to use a dynamic IP address assignment (DHCP) or a static IP address.
    public let ipScheme: InputDeviceIpScheme?
    /// The subnet mask of the input device.
    public let subnetMask: String?

    public init (
        dnsAddresses: [String]? = nil,
        gateway: String? = nil,
        ipAddress: String? = nil,
        ipScheme: InputDeviceIpScheme? = nil,
        subnetMask: String? = nil
    )
    {
        self.dnsAddresses = dnsAddresses
        self.gateway = gateway
        self.ipAddress = ipAddress
        self.ipScheme = ipScheme
        self.subnetMask = subnetMask
    }
}

extension InputDeviceRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "id"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
    }
}

extension InputDeviceRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputDeviceRequest(id: \(String(describing: id)))"}
}

/// Settings for an input device.
public struct InputDeviceRequest: Equatable {
    /// The unique ID for the device.
    public let id: String?

    public init (
        id: String? = nil
    )
    {
        self.id = id
    }
}

/// The scan type of the video source.
public enum InputDeviceScanType {
    case interlaced
    case progressive
    case sdkUnknown(String)
}

extension InputDeviceScanType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputDeviceScanType] {
        return [
            .interlaced,
            .progressive,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .interlaced: return "INTERLACED"
        case .progressive: return "PROGRESSIVE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputDeviceScanType(rawValue: rawValue) ?? InputDeviceScanType.sdkUnknown(rawValue)
    }
}

extension InputDeviceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "id"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
    }
}

extension InputDeviceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputDeviceSettings(id: \(String(describing: id)))"}
}

/// Settings for an input device.
public struct InputDeviceSettings: Equatable {
    /// The unique ID for the device.
    public let id: String?

    public init (
        id: String? = nil
    )
    {
        self.id = id
    }
}

/// The state of the input device.
public enum InputDeviceState {
    case idle
    case streaming
    case sdkUnknown(String)
}

extension InputDeviceState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputDeviceState] {
        return [
            .idle,
            .streaming,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .idle: return "IDLE"
        case .streaming: return "STREAMING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputDeviceState(rawValue: rawValue) ?? InputDeviceState.sdkUnknown(rawValue)
    }
}

extension InputDeviceSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case connectionState = "connectionState"
        case deviceSettingsSyncState = "deviceSettingsSyncState"
        case deviceUpdateStatus = "deviceUpdateStatus"
        case hdDeviceSettings = "hdDeviceSettings"
        case id = "id"
        case macAddress = "macAddress"
        case name = "name"
        case networkSettings = "networkSettings"
        case serialNumber = "serialNumber"
        case type = "type"
        case uhdDeviceSettings = "uhdDeviceSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let connectionState = connectionState {
            try encodeContainer.encode(connectionState.rawValue, forKey: .connectionState)
        }
        if let deviceSettingsSyncState = deviceSettingsSyncState {
            try encodeContainer.encode(deviceSettingsSyncState.rawValue, forKey: .deviceSettingsSyncState)
        }
        if let deviceUpdateStatus = deviceUpdateStatus {
            try encodeContainer.encode(deviceUpdateStatus.rawValue, forKey: .deviceUpdateStatus)
        }
        if let hdDeviceSettings = hdDeviceSettings {
            try encodeContainer.encode(hdDeviceSettings, forKey: .hdDeviceSettings)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let macAddress = macAddress {
            try encodeContainer.encode(macAddress, forKey: .macAddress)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networkSettings = networkSettings {
            try encodeContainer.encode(networkSettings, forKey: .networkSettings)
        }
        if let serialNumber = serialNumber {
            try encodeContainer.encode(serialNumber, forKey: .serialNumber)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let uhdDeviceSettings = uhdDeviceSettings {
            try encodeContainer.encode(uhdDeviceSettings, forKey: .uhdDeviceSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(InputDeviceConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let deviceSettingsSyncStateDecoded = try containerValues.decodeIfPresent(DeviceSettingsSyncState.self, forKey: .deviceSettingsSyncState)
        deviceSettingsSyncState = deviceSettingsSyncStateDecoded
        let deviceUpdateStatusDecoded = try containerValues.decodeIfPresent(DeviceUpdateStatus.self, forKey: .deviceUpdateStatus)
        deviceUpdateStatus = deviceUpdateStatusDecoded
        let hdDeviceSettingsDecoded = try containerValues.decodeIfPresent(InputDeviceHdSettings.self, forKey: .hdDeviceSettings)
        hdDeviceSettings = hdDeviceSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let macAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .macAddress)
        macAddress = macAddressDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let networkSettingsDecoded = try containerValues.decodeIfPresent(InputDeviceNetworkSettings.self, forKey: .networkSettings)
        networkSettings = networkSettingsDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let typeDecoded = try containerValues.decodeIfPresent(InputDeviceType.self, forKey: .type)
        type = typeDecoded
        let uhdDeviceSettingsDecoded = try containerValues.decodeIfPresent(InputDeviceUhdSettings.self, forKey: .uhdDeviceSettings)
        uhdDeviceSettings = uhdDeviceSettingsDecoded
    }
}

extension InputDeviceSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputDeviceSummary(arn: \(String(describing: arn)), connectionState: \(String(describing: connectionState)), deviceSettingsSyncState: \(String(describing: deviceSettingsSyncState)), deviceUpdateStatus: \(String(describing: deviceUpdateStatus)), hdDeviceSettings: \(String(describing: hdDeviceSettings)), id: \(String(describing: id)), macAddress: \(String(describing: macAddress)), name: \(String(describing: name)), networkSettings: \(String(describing: networkSettings)), serialNumber: \(String(describing: serialNumber)), type: \(String(describing: type)), uhdDeviceSettings: \(String(describing: uhdDeviceSettings)))"}
}

/// Details of the input device.
public struct InputDeviceSummary: Equatable {
    /// The unique ARN of the input device.
    public let arn: String?
    /// The state of the connection between the input device and AWS.
    public let connectionState: InputDeviceConnectionState?
    /// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
    public let deviceSettingsSyncState: DeviceSettingsSyncState?
    /// The status of software on the input device.
    public let deviceUpdateStatus: DeviceUpdateStatus?
    /// Settings that describe an input device that is type HD.
    public let hdDeviceSettings: InputDeviceHdSettings?
    /// The unique ID of the input device.
    public let id: String?
    /// The network MAC address of the input device.
    public let macAddress: String?
    /// A name that you specify for the input device.
    public let name: String?
    /// Network settings for the input device.
    public let networkSettings: InputDeviceNetworkSettings?
    /// The unique serial number of the input device.
    public let serialNumber: String?
    /// The type of the input device.
    public let type: InputDeviceType?
    /// Settings that describe an input device that is type UHD.
    public let uhdDeviceSettings: InputDeviceUhdSettings?

    public init (
        arn: String? = nil,
        connectionState: InputDeviceConnectionState? = nil,
        deviceSettingsSyncState: DeviceSettingsSyncState? = nil,
        deviceUpdateStatus: DeviceUpdateStatus? = nil,
        hdDeviceSettings: InputDeviceHdSettings? = nil,
        id: String? = nil,
        macAddress: String? = nil,
        name: String? = nil,
        networkSettings: InputDeviceNetworkSettings? = nil,
        serialNumber: String? = nil,
        type: InputDeviceType? = nil,
        uhdDeviceSettings: InputDeviceUhdSettings? = nil
    )
    {
        self.arn = arn
        self.connectionState = connectionState
        self.deviceSettingsSyncState = deviceSettingsSyncState
        self.deviceUpdateStatus = deviceUpdateStatus
        self.hdDeviceSettings = hdDeviceSettings
        self.id = id
        self.macAddress = macAddress
        self.name = name
        self.networkSettings = networkSettings
        self.serialNumber = serialNumber
        self.type = type
        self.uhdDeviceSettings = uhdDeviceSettings
    }
}

/// The type of device transfer. INCOMING for an input device that is being transferred to you, OUTGOING for an input device that you are transferring to another AWS account.
public enum InputDeviceTransferType {
    case incoming
    case outgoing
    case sdkUnknown(String)
}

extension InputDeviceTransferType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputDeviceTransferType] {
        return [
            .incoming,
            .outgoing,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .incoming: return "INCOMING"
        case .outgoing: return "OUTGOING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputDeviceTransferType(rawValue: rawValue) ?? InputDeviceTransferType.sdkUnknown(rawValue)
    }
}

/// The type of the input device. For an AWS Elemental Link device that outputs resolutions up to 1080, choose "HD".
public enum InputDeviceType {
    case hd
    case sdkUnknown(String)
}

extension InputDeviceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputDeviceType] {
        return [
            .hd,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hd: return "HD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputDeviceType(rawValue: rawValue) ?? InputDeviceType.sdkUnknown(rawValue)
    }
}

extension InputDeviceUhdSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activeInput = "activeInput"
        case configuredInput = "configuredInput"
        case deviceState = "deviceState"
        case framerate = "framerate"
        case height = "height"
        case maxBitrate = "maxBitrate"
        case scanType = "scanType"
        case width = "width"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeInput = activeInput {
            try encodeContainer.encode(activeInput.rawValue, forKey: .activeInput)
        }
        if let configuredInput = configuredInput {
            try encodeContainer.encode(configuredInput.rawValue, forKey: .configuredInput)
        }
        if let deviceState = deviceState {
            try encodeContainer.encode(deviceState.rawValue, forKey: .deviceState)
        }
        if framerate != 0.0 {
            try encodeContainer.encode(framerate, forKey: .framerate)
        }
        if height != 0 {
            try encodeContainer.encode(height, forKey: .height)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let scanType = scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if width != 0 {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeInputDecoded = try containerValues.decodeIfPresent(InputDeviceActiveInput.self, forKey: .activeInput)
        activeInput = activeInputDecoded
        let configuredInputDecoded = try containerValues.decodeIfPresent(InputDeviceConfiguredInput.self, forKey: .configuredInput)
        configuredInput = configuredInputDecoded
        let deviceStateDecoded = try containerValues.decodeIfPresent(InputDeviceState.self, forKey: .deviceState)
        deviceState = deviceStateDecoded
        let framerateDecoded = try containerValues.decode(Double.self, forKey: .framerate)
        framerate = framerateDecoded
        let heightDecoded = try containerValues.decode(Int.self, forKey: .height)
        height = heightDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(InputDeviceScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let widthDecoded = try containerValues.decode(Int.self, forKey: .width)
        width = widthDecoded
    }
}

extension InputDeviceUhdSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputDeviceUhdSettings(activeInput: \(String(describing: activeInput)), configuredInput: \(String(describing: configuredInput)), deviceState: \(String(describing: deviceState)), framerate: \(String(describing: framerate)), height: \(String(describing: height)), maxBitrate: \(String(describing: maxBitrate)), scanType: \(String(describing: scanType)), width: \(String(describing: width)))"}
}

/// Settings that describe the active source from the input device, and the video characteristics of that source.
public struct InputDeviceUhdSettings: Equatable {
    /// If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
    public let activeInput: InputDeviceActiveInput?
    /// The source at the input device that is currently active. You can specify this source.
    public let configuredInput: InputDeviceConfiguredInput?
    /// The state of the input device.
    public let deviceState: InputDeviceState?
    /// The frame rate of the video source.
    public let framerate: Double
    /// The height of the video source, in pixels.
    public let height: Int
    /// The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
    public let maxBitrate: Int
    /// The scan type of the video source.
    public let scanType: InputDeviceScanType?
    /// The width of the video source, in pixels.
    public let width: Int

    public init (
        activeInput: InputDeviceActiveInput? = nil,
        configuredInput: InputDeviceConfiguredInput? = nil,
        deviceState: InputDeviceState? = nil,
        framerate: Double = 0.0,
        height: Int = 0,
        maxBitrate: Int = 0,
        scanType: InputDeviceScanType? = nil,
        width: Int = 0
    )
    {
        self.activeInput = activeInput
        self.configuredInput = configuredInput
        self.deviceState = deviceState
        self.framerate = framerate
        self.height = height
        self.maxBitrate = maxBitrate
        self.scanType = scanType
        self.width = width
    }
}

/// Input Filter
public enum InputFilter {
    case auto
    case disabled
    case forced
    case sdkUnknown(String)
}

extension InputFilter : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputFilter] {
        return [
            .auto,
            .disabled,
            .forced,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .disabled: return "DISABLED"
        case .forced: return "FORCED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputFilter(rawValue: rawValue) ?? InputFilter.sdkUnknown(rawValue)
    }
}

extension InputLocation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case passwordParam = "passwordParam"
        case uri = "uri"
        case username = "username"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let passwordParam = passwordParam {
            try encodeContainer.encode(passwordParam, forKey: .passwordParam)
        }
        if let uri = uri {
            try encodeContainer.encode(uri, forKey: .uri)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let passwordParamDecoded = try containerValues.decodeIfPresent(String.self, forKey: .passwordParam)
        passwordParam = passwordParamDecoded
        let uriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uri)
        uri = uriDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension InputLocation: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputLocation(passwordParam: \(String(describing: passwordParam)), uri: \(String(describing: uri)), username: \(String(describing: username)))"}
}

/// Input Location
public struct InputLocation: Equatable {
    /// key used to extract the password from EC2 Parameter store
    public let passwordParam: String?
    /// Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
    public let uri: String?
    /// Documentation update needed
    public let username: String?

    public init (
        passwordParam: String? = nil,
        uri: String? = nil,
        username: String? = nil
    )
    {
        self.passwordParam = passwordParam
        self.uri = uri
        self.username = username
    }
}

/// Input Loss Action For Hls Out
public enum InputLossActionForHlsOut {
    case emitOutput
    case pauseOutput
    case sdkUnknown(String)
}

extension InputLossActionForHlsOut : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputLossActionForHlsOut] {
        return [
            .emitOutput,
            .pauseOutput,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .emitOutput: return "EMIT_OUTPUT"
        case .pauseOutput: return "PAUSE_OUTPUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputLossActionForHlsOut(rawValue: rawValue) ?? InputLossActionForHlsOut.sdkUnknown(rawValue)
    }
}

/// Input Loss Action For Ms Smooth Out
public enum InputLossActionForMsSmoothOut {
    case emitOutput
    case pauseOutput
    case sdkUnknown(String)
}

extension InputLossActionForMsSmoothOut : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputLossActionForMsSmoothOut] {
        return [
            .emitOutput,
            .pauseOutput,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .emitOutput: return "EMIT_OUTPUT"
        case .pauseOutput: return "PAUSE_OUTPUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputLossActionForMsSmoothOut(rawValue: rawValue) ?? InputLossActionForMsSmoothOut.sdkUnknown(rawValue)
    }
}

/// Input Loss Action For Rtmp Out
public enum InputLossActionForRtmpOut {
    case emitOutput
    case pauseOutput
    case sdkUnknown(String)
}

extension InputLossActionForRtmpOut : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputLossActionForRtmpOut] {
        return [
            .emitOutput,
            .pauseOutput,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .emitOutput: return "EMIT_OUTPUT"
        case .pauseOutput: return "PAUSE_OUTPUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputLossActionForRtmpOut(rawValue: rawValue) ?? InputLossActionForRtmpOut.sdkUnknown(rawValue)
    }
}

/// Input Loss Action For Udp Out
public enum InputLossActionForUdpOut {
    case dropProgram
    case dropTs
    case emitProgram
    case sdkUnknown(String)
}

extension InputLossActionForUdpOut : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputLossActionForUdpOut] {
        return [
            .dropProgram,
            .dropTs,
            .emitProgram,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dropProgram: return "DROP_PROGRAM"
        case .dropTs: return "DROP_TS"
        case .emitProgram: return "EMIT_PROGRAM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputLossActionForUdpOut(rawValue: rawValue) ?? InputLossActionForUdpOut.sdkUnknown(rawValue)
    }
}

extension InputLossBehavior: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blackFrameMsec = "blackFrameMsec"
        case inputLossImageColor = "inputLossImageColor"
        case inputLossImageSlate = "inputLossImageSlate"
        case inputLossImageType = "inputLossImageType"
        case repeatFrameMsec = "repeatFrameMsec"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if blackFrameMsec != 0 {
            try encodeContainer.encode(blackFrameMsec, forKey: .blackFrameMsec)
        }
        if let inputLossImageColor = inputLossImageColor {
            try encodeContainer.encode(inputLossImageColor, forKey: .inputLossImageColor)
        }
        if let inputLossImageSlate = inputLossImageSlate {
            try encodeContainer.encode(inputLossImageSlate, forKey: .inputLossImageSlate)
        }
        if let inputLossImageType = inputLossImageType {
            try encodeContainer.encode(inputLossImageType.rawValue, forKey: .inputLossImageType)
        }
        if repeatFrameMsec != 0 {
            try encodeContainer.encode(repeatFrameMsec, forKey: .repeatFrameMsec)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blackFrameMsecDecoded = try containerValues.decode(Int.self, forKey: .blackFrameMsec)
        blackFrameMsec = blackFrameMsecDecoded
        let inputLossImageColorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputLossImageColor)
        inputLossImageColor = inputLossImageColorDecoded
        let inputLossImageSlateDecoded = try containerValues.decodeIfPresent(InputLocation.self, forKey: .inputLossImageSlate)
        inputLossImageSlate = inputLossImageSlateDecoded
        let inputLossImageTypeDecoded = try containerValues.decodeIfPresent(InputLossImageType.self, forKey: .inputLossImageType)
        inputLossImageType = inputLossImageTypeDecoded
        let repeatFrameMsecDecoded = try containerValues.decode(Int.self, forKey: .repeatFrameMsec)
        repeatFrameMsec = repeatFrameMsecDecoded
    }
}

extension InputLossBehavior: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputLossBehavior(blackFrameMsec: \(String(describing: blackFrameMsec)), inputLossImageColor: \(String(describing: inputLossImageColor)), inputLossImageSlate: \(String(describing: inputLossImageSlate)), inputLossImageType: \(String(describing: inputLossImageType)), repeatFrameMsec: \(String(describing: repeatFrameMsec)))"}
}

/// Input Loss Behavior
public struct InputLossBehavior: Equatable {
    /// Documentation update needed
    public let blackFrameMsec: Int
    /// When input loss image type is "color" this field specifies the color to use. Value: 6 hex characters representing the values of RGB.
    public let inputLossImageColor: String?
    /// When input loss image type is "slate" these fields specify the parameters for accessing the slate.
    public let inputLossImageSlate: InputLocation?
    /// Indicates whether to substitute a solid color or a slate into the output after input loss exceeds blackFrameMsec.
    public let inputLossImageType: InputLossImageType?
    /// Documentation update needed
    public let repeatFrameMsec: Int

    public init (
        blackFrameMsec: Int = 0,
        inputLossImageColor: String? = nil,
        inputLossImageSlate: InputLocation? = nil,
        inputLossImageType: InputLossImageType? = nil,
        repeatFrameMsec: Int = 0
    )
    {
        self.blackFrameMsec = blackFrameMsec
        self.inputLossImageColor = inputLossImageColor
        self.inputLossImageSlate = inputLossImageSlate
        self.inputLossImageType = inputLossImageType
        self.repeatFrameMsec = repeatFrameMsec
    }
}

extension InputLossFailoverSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inputLossThresholdMsec = "inputLossThresholdMsec"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if inputLossThresholdMsec != 0 {
            try encodeContainer.encode(inputLossThresholdMsec, forKey: .inputLossThresholdMsec)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputLossThresholdMsecDecoded = try containerValues.decode(Int.self, forKey: .inputLossThresholdMsec)
        inputLossThresholdMsec = inputLossThresholdMsecDecoded
    }
}

extension InputLossFailoverSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputLossFailoverSettings(inputLossThresholdMsec: \(String(describing: inputLossThresholdMsec)))"}
}

/// MediaLive will perform a failover if content is not detected in this input for the specified period.
public struct InputLossFailoverSettings: Equatable {
    /// The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
    public let inputLossThresholdMsec: Int

    public init (
        inputLossThresholdMsec: Int = 0
    )
    {
        self.inputLossThresholdMsec = inputLossThresholdMsec
    }
}

/// Input Loss Image Type
public enum InputLossImageType {
    case color
    case slate
    case sdkUnknown(String)
}

extension InputLossImageType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputLossImageType] {
        return [
            .color,
            .slate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .color: return "COLOR"
        case .slate: return "SLATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputLossImageType(rawValue: rawValue) ?? InputLossImageType.sdkUnknown(rawValue)
    }
}

/// Maximum input bitrate in megabits per second. Bitrates up to 50 Mbps are supported currently.
public enum InputMaximumBitrate {
    case max10Mbps
    case max20Mbps
    case max50Mbps
    case sdkUnknown(String)
}

extension InputMaximumBitrate : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputMaximumBitrate] {
        return [
            .max10Mbps,
            .max20Mbps,
            .max50Mbps,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .max10Mbps: return "MAX_10_MBPS"
        case .max20Mbps: return "MAX_20_MBPS"
        case .max50Mbps: return "MAX_50_MBPS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputMaximumBitrate(rawValue: rawValue) ?? InputMaximumBitrate.sdkUnknown(rawValue)
    }
}

/// Input preference when deciding which input to make active when a previously failed input has recovered.
/// If \"EQUAL_INPUT_PREFERENCE\", then the active input will stay active as long as it is healthy.
/// If \"PRIMARY_INPUT_PREFERRED\", then always switch back to the primary input when it is healthy.
public enum InputPreference {
    case equalInputPreference
    case primaryInputPreferred
    case sdkUnknown(String)
}

extension InputPreference : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputPreference] {
        return [
            .equalInputPreference,
            .primaryInputPreferred,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .equalInputPreference: return "EQUAL_INPUT_PREFERENCE"
        case .primaryInputPreferred: return "PRIMARY_INPUT_PREFERRED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputPreference(rawValue: rawValue) ?? InputPreference.sdkUnknown(rawValue)
    }
}

extension InputPrepareScheduleActionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inputAttachmentNameReference = "inputAttachmentNameReference"
        case inputClippingSettings = "inputClippingSettings"
        case urlPath = "urlPath"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputAttachmentNameReference = inputAttachmentNameReference {
            try encodeContainer.encode(inputAttachmentNameReference, forKey: .inputAttachmentNameReference)
        }
        if let inputClippingSettings = inputClippingSettings {
            try encodeContainer.encode(inputClippingSettings, forKey: .inputClippingSettings)
        }
        if let urlPath = urlPath {
            var urlPathContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urlPath)
            for __listof__string0 in urlPath {
                try urlPathContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputAttachmentNameReferenceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputAttachmentNameReference)
        inputAttachmentNameReference = inputAttachmentNameReferenceDecoded
        let inputClippingSettingsDecoded = try containerValues.decodeIfPresent(InputClippingSettings.self, forKey: .inputClippingSettings)
        inputClippingSettings = inputClippingSettingsDecoded
        let urlPathContainer = try containerValues.decodeIfPresent([String?].self, forKey: .urlPath)
        var urlPathDecoded0:[String]? = nil
        if let urlPathContainer = urlPathContainer {
            urlPathDecoded0 = [String]()
            for string0 in urlPathContainer {
                if let string0 = string0 {
                    urlPathDecoded0?.append(string0)
                }
            }
        }
        urlPath = urlPathDecoded0
    }
}

extension InputPrepareScheduleActionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputPrepareScheduleActionSettings(inputAttachmentNameReference: \(String(describing: inputAttachmentNameReference)), inputClippingSettings: \(String(describing: inputClippingSettings)), urlPath: \(String(describing: urlPath)))"}
}

/// Action to prepare an input for a future immediate input switch.
public struct InputPrepareScheduleActionSettings: Equatable {
    /// The name of the input attachment that should be prepared by this action. If no name is provided, the action will stop the most recent prepare (if any) when activated.
    public let inputAttachmentNameReference: String?
    /// Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
    public let inputClippingSettings: InputClippingSettings?
    /// The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
    public let urlPath: [String]?

    public init (
        inputAttachmentNameReference: String? = nil,
        inputClippingSettings: InputClippingSettings? = nil,
        urlPath: [String]? = nil
    )
    {
        self.inputAttachmentNameReference = inputAttachmentNameReference
        self.inputClippingSettings = inputClippingSettings
        self.urlPath = urlPath
    }
}

/// Input resolution based on lines of vertical resolution in the input; SD is less than 720 lines, HD is 720 to 1080 lines, UHD is greater than 1080 lines
public enum InputResolution {
    case hd
    case sd
    case uhd
    case sdkUnknown(String)
}

extension InputResolution : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputResolution] {
        return [
            .hd,
            .sd,
            .uhd,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hd: return "HD"
        case .sd: return "SD"
        case .uhd: return "UHD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputResolution(rawValue: rawValue) ?? InputResolution.sdkUnknown(rawValue)
    }
}

extension InputSecurityGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case id = "id"
        case inputs = "inputs"
        case state = "state"
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for __listof__string0 in inputs {
                try inputsContainer.encode(__listof__string0)
            }
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let whitelistRules = whitelistRules {
            var whitelistRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .whitelistRules)
            for __listofinputwhitelistrule0 in whitelistRules {
                try whitelistRulesContainer.encode(__listofinputwhitelistrule0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let inputsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .inputs)
        var inputsDecoded0:[String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [String]()
            for string0 in inputsContainer {
                if let string0 = string0 {
                    inputsDecoded0?.append(string0)
                }
            }
        }
        inputs = inputsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(InputSecurityGroupState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let whitelistRulesContainer = try containerValues.decodeIfPresent([InputWhitelistRule?].self, forKey: .whitelistRules)
        var whitelistRulesDecoded0:[InputWhitelistRule]? = nil
        if let whitelistRulesContainer = whitelistRulesContainer {
            whitelistRulesDecoded0 = [InputWhitelistRule]()
            for structure0 in whitelistRulesContainer {
                if let structure0 = structure0 {
                    whitelistRulesDecoded0?.append(structure0)
                }
            }
        }
        whitelistRules = whitelistRulesDecoded0
    }
}

extension InputSecurityGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputSecurityGroup(arn: \(String(describing: arn)), id: \(String(describing: id)), inputs: \(String(describing: inputs)), state: \(String(describing: state)), tags: \(String(describing: tags)), whitelistRules: \(String(describing: whitelistRules)))"}
}

/// An Input Security Group
public struct InputSecurityGroup: Equatable {
    /// Unique ARN of Input Security Group
    public let arn: String?
    /// The Id of the Input Security Group
    public let id: String?
    /// The list of inputs currently using this Input Security Group.
    public let inputs: [String]?
    /// The current state of the Input Security Group.
    public let state: InputSecurityGroupState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// Whitelist rules and their sync status
    public let whitelistRules: [InputWhitelistRule]?

    public init (
        arn: String? = nil,
        id: String? = nil,
        inputs: [String]? = nil,
        state: InputSecurityGroupState? = nil,
        tags: [String:String]? = nil,
        whitelistRules: [InputWhitelistRule]? = nil
    )
    {
        self.arn = arn
        self.id = id
        self.inputs = inputs
        self.state = state
        self.tags = tags
        self.whitelistRules = whitelistRules
    }
}

/// Placeholder documentation for InputSecurityGroupState
public enum InputSecurityGroupState {
    case deleted
    case idle
    case inUse
    case updating
    case sdkUnknown(String)
}

extension InputSecurityGroupState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputSecurityGroupState] {
        return [
            .deleted,
            .idle,
            .inUse,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .deleted: return "DELETED"
        case .idle: return "IDLE"
        case .inUse: return "IN_USE"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputSecurityGroupState(rawValue: rawValue) ?? InputSecurityGroupState.sdkUnknown(rawValue)
    }
}

extension InputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioSelectors = "audioSelectors"
        case captionSelectors = "captionSelectors"
        case deblockFilter = "deblockFilter"
        case denoiseFilter = "denoiseFilter"
        case filterStrength = "filterStrength"
        case inputFilter = "inputFilter"
        case networkInputSettings = "networkInputSettings"
        case smpte2038DataPreference = "smpte2038DataPreference"
        case sourceEndBehavior = "sourceEndBehavior"
        case videoSelector = "videoSelector"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioSelectors = audioSelectors {
            var audioSelectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioSelectors)
            for __listofaudioselector0 in audioSelectors {
                try audioSelectorsContainer.encode(__listofaudioselector0)
            }
        }
        if let captionSelectors = captionSelectors {
            var captionSelectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionSelectors)
            for __listofcaptionselector0 in captionSelectors {
                try captionSelectorsContainer.encode(__listofcaptionselector0)
            }
        }
        if let deblockFilter = deblockFilter {
            try encodeContainer.encode(deblockFilter.rawValue, forKey: .deblockFilter)
        }
        if let denoiseFilter = denoiseFilter {
            try encodeContainer.encode(denoiseFilter.rawValue, forKey: .denoiseFilter)
        }
        if filterStrength != 0 {
            try encodeContainer.encode(filterStrength, forKey: .filterStrength)
        }
        if let inputFilter = inputFilter {
            try encodeContainer.encode(inputFilter.rawValue, forKey: .inputFilter)
        }
        if let networkInputSettings = networkInputSettings {
            try encodeContainer.encode(networkInputSettings, forKey: .networkInputSettings)
        }
        if let smpte2038DataPreference = smpte2038DataPreference {
            try encodeContainer.encode(smpte2038DataPreference.rawValue, forKey: .smpte2038DataPreference)
        }
        if let sourceEndBehavior = sourceEndBehavior {
            try encodeContainer.encode(sourceEndBehavior.rawValue, forKey: .sourceEndBehavior)
        }
        if let videoSelector = videoSelector {
            try encodeContainer.encode(videoSelector, forKey: .videoSelector)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioSelectorsContainer = try containerValues.decodeIfPresent([AudioSelector?].self, forKey: .audioSelectors)
        var audioSelectorsDecoded0:[AudioSelector]? = nil
        if let audioSelectorsContainer = audioSelectorsContainer {
            audioSelectorsDecoded0 = [AudioSelector]()
            for structure0 in audioSelectorsContainer {
                if let structure0 = structure0 {
                    audioSelectorsDecoded0?.append(structure0)
                }
            }
        }
        audioSelectors = audioSelectorsDecoded0
        let captionSelectorsContainer = try containerValues.decodeIfPresent([CaptionSelector?].self, forKey: .captionSelectors)
        var captionSelectorsDecoded0:[CaptionSelector]? = nil
        if let captionSelectorsContainer = captionSelectorsContainer {
            captionSelectorsDecoded0 = [CaptionSelector]()
            for structure0 in captionSelectorsContainer {
                if let structure0 = structure0 {
                    captionSelectorsDecoded0?.append(structure0)
                }
            }
        }
        captionSelectors = captionSelectorsDecoded0
        let deblockFilterDecoded = try containerValues.decodeIfPresent(InputDeblockFilter.self, forKey: .deblockFilter)
        deblockFilter = deblockFilterDecoded
        let denoiseFilterDecoded = try containerValues.decodeIfPresent(InputDenoiseFilter.self, forKey: .denoiseFilter)
        denoiseFilter = denoiseFilterDecoded
        let filterStrengthDecoded = try containerValues.decode(Int.self, forKey: .filterStrength)
        filterStrength = filterStrengthDecoded
        let inputFilterDecoded = try containerValues.decodeIfPresent(InputFilter.self, forKey: .inputFilter)
        inputFilter = inputFilterDecoded
        let networkInputSettingsDecoded = try containerValues.decodeIfPresent(NetworkInputSettings.self, forKey: .networkInputSettings)
        networkInputSettings = networkInputSettingsDecoded
        let smpte2038DataPreferenceDecoded = try containerValues.decodeIfPresent(Smpte2038DataPreference.self, forKey: .smpte2038DataPreference)
        smpte2038DataPreference = smpte2038DataPreferenceDecoded
        let sourceEndBehaviorDecoded = try containerValues.decodeIfPresent(InputSourceEndBehavior.self, forKey: .sourceEndBehavior)
        sourceEndBehavior = sourceEndBehaviorDecoded
        let videoSelectorDecoded = try containerValues.decodeIfPresent(VideoSelector.self, forKey: .videoSelector)
        videoSelector = videoSelectorDecoded
    }
}

extension InputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputSettings(audioSelectors: \(String(describing: audioSelectors)), captionSelectors: \(String(describing: captionSelectors)), deblockFilter: \(String(describing: deblockFilter)), denoiseFilter: \(String(describing: denoiseFilter)), filterStrength: \(String(describing: filterStrength)), inputFilter: \(String(describing: inputFilter)), networkInputSettings: \(String(describing: networkInputSettings)), smpte2038DataPreference: \(String(describing: smpte2038DataPreference)), sourceEndBehavior: \(String(describing: sourceEndBehavior)), videoSelector: \(String(describing: videoSelector)))"}
}

/// Live Event input parameters. There can be multiple inputs in a single Live Event.
public struct InputSettings: Equatable {
    /// Used to select the audio stream to decode for inputs that have multiple available.
    public let audioSelectors: [AudioSelector]?
    /// Used to select the caption input to use for inputs that have multiple available.
    public let captionSelectors: [CaptionSelector]?
    /// Enable or disable the deblock filter when filtering.
    public let deblockFilter: InputDeblockFilter?
    /// Enable or disable the denoise filter when filtering.
    public let denoiseFilter: InputDenoiseFilter?
    /// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
    public let filterStrength: Int
    /// Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default.
    /// 1) auto - filtering will be applied depending on input type/quality
    /// 2) disabled - no filtering will be applied to the input
    /// 3) forced - filtering will be applied regardless of input type
    public let inputFilter: InputFilter?
    /// Input settings.
    public let networkInputSettings: NetworkInputSettings?
    /// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages.
    /// - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any).
    /// - IGNORE: Never extract any ancillary data from SMPTE-2038.
    public let smpte2038DataPreference: Smpte2038DataPreference?
    /// Loop input if it is a file. This allows a file input to be streamed indefinitely.
    public let sourceEndBehavior: InputSourceEndBehavior?
    /// Informs which video elementary stream to decode for input types that have multiple available.
    public let videoSelector: VideoSelector?

    public init (
        audioSelectors: [AudioSelector]? = nil,
        captionSelectors: [CaptionSelector]? = nil,
        deblockFilter: InputDeblockFilter? = nil,
        denoiseFilter: InputDenoiseFilter? = nil,
        filterStrength: Int = 0,
        inputFilter: InputFilter? = nil,
        networkInputSettings: NetworkInputSettings? = nil,
        smpte2038DataPreference: Smpte2038DataPreference? = nil,
        sourceEndBehavior: InputSourceEndBehavior? = nil,
        videoSelector: VideoSelector? = nil
    )
    {
        self.audioSelectors = audioSelectors
        self.captionSelectors = captionSelectors
        self.deblockFilter = deblockFilter
        self.denoiseFilter = denoiseFilter
        self.filterStrength = filterStrength
        self.inputFilter = inputFilter
        self.networkInputSettings = networkInputSettings
        self.smpte2038DataPreference = smpte2038DataPreference
        self.sourceEndBehavior = sourceEndBehavior
        self.videoSelector = videoSelector
    }
}

extension InputSource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case passwordParam = "passwordParam"
        case url = "url"
        case username = "username"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let passwordParam = passwordParam {
            try encodeContainer.encode(passwordParam, forKey: .passwordParam)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let passwordParamDecoded = try containerValues.decodeIfPresent(String.self, forKey: .passwordParam)
        passwordParam = passwordParamDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension InputSource: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputSource(passwordParam: \(String(describing: passwordParam)), url: \(String(describing: url)), username: \(String(describing: username)))"}
}

/// The settings for a PULL type input.
public struct InputSource: Equatable {
    /// The key used to extract the password from EC2 Parameter store.
    public let passwordParam: String?
    /// This represents the customer's source URL where stream is
    /// pulled from.
    public let url: String?
    /// The username for the input source.
    public let username: String?

    public init (
        passwordParam: String? = nil,
        url: String? = nil,
        username: String? = nil
    )
    {
        self.passwordParam = passwordParam
        self.url = url
        self.username = username
    }
}

/// Input Source End Behavior
public enum InputSourceEndBehavior {
    case `continue`
    case loop
    case sdkUnknown(String)
}

extension InputSourceEndBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputSourceEndBehavior] {
        return [
            .continue,
            .loop,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .continue: return "CONTINUE"
        case .loop: return "LOOP"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputSourceEndBehavior(rawValue: rawValue) ?? InputSourceEndBehavior.sdkUnknown(rawValue)
    }
}

extension InputSourceRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case passwordParam = "passwordParam"
        case url = "url"
        case username = "username"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let passwordParam = passwordParam {
            try encodeContainer.encode(passwordParam, forKey: .passwordParam)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let passwordParamDecoded = try containerValues.decodeIfPresent(String.self, forKey: .passwordParam)
        passwordParam = passwordParamDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension InputSourceRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputSourceRequest(passwordParam: \(String(describing: passwordParam)), url: \(String(describing: url)), username: \(String(describing: username)))"}
}

/// Settings for for a PULL type input.
public struct InputSourceRequest: Equatable {
    /// The key used to extract the password from EC2 Parameter store.
    public let passwordParam: String?
    /// This represents the customer's source URL where stream is
    /// pulled from.
    public let url: String?
    /// The username for the input source.
    public let username: String?

    public init (
        passwordParam: String? = nil,
        url: String? = nil,
        username: String? = nil
    )
    {
        self.passwordParam = passwordParam
        self.url = url
        self.username = username
    }
}

/// There are two types of input sources, static and dynamic. If an input source is dynamic you can
/// change the source url of the input dynamically using an input switch action. However, the only input type
/// to support a dynamic url at this time is MP4_FILE. By default all input sources are static.
public enum InputSourceType {
    case `dynamic`
    case `static`
    case sdkUnknown(String)
}

extension InputSourceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputSourceType] {
        return [
            .dynamic,
            .static,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dynamic: return "DYNAMIC"
        case .static: return "STATIC"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputSourceType(rawValue: rawValue) ?? InputSourceType.sdkUnknown(rawValue)
    }
}

extension InputSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case codec = "codec"
        case maximumBitrate = "maximumBitrate"
        case resolution = "resolution"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codec = codec {
            try encodeContainer.encode(codec.rawValue, forKey: .codec)
        }
        if let maximumBitrate = maximumBitrate {
            try encodeContainer.encode(maximumBitrate.rawValue, forKey: .maximumBitrate)
        }
        if let resolution = resolution {
            try encodeContainer.encode(resolution.rawValue, forKey: .resolution)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codecDecoded = try containerValues.decodeIfPresent(InputCodec.self, forKey: .codec)
        codec = codecDecoded
        let maximumBitrateDecoded = try containerValues.decodeIfPresent(InputMaximumBitrate.self, forKey: .maximumBitrate)
        maximumBitrate = maximumBitrateDecoded
        let resolutionDecoded = try containerValues.decodeIfPresent(InputResolution.self, forKey: .resolution)
        resolution = resolutionDecoded
    }
}

extension InputSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputSpecification(codec: \(String(describing: codec)), maximumBitrate: \(String(describing: maximumBitrate)), resolution: \(String(describing: resolution)))"}
}

/// Placeholder documentation for InputSpecification
public struct InputSpecification: Equatable {
    /// Input codec
    public let codec: InputCodec?
    /// Maximum input bitrate, categorized coarsely
    public let maximumBitrate: InputMaximumBitrate?
    /// Input resolution, categorized coarsely
    public let resolution: InputResolution?

    public init (
        codec: InputCodec? = nil,
        maximumBitrate: InputMaximumBitrate? = nil,
        resolution: InputResolution? = nil
    )
    {
        self.codec = codec
        self.maximumBitrate = maximumBitrate
        self.resolution = resolution
    }
}

/// Placeholder documentation for InputState
public enum InputState {
    case attached
    case creating
    case deleted
    case deleting
    case detached
    case sdkUnknown(String)
}

extension InputState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputState] {
        return [
            .attached,
            .creating,
            .deleted,
            .deleting,
            .detached,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .attached: return "ATTACHED"
        case .creating: return "CREATING"
        case .deleted: return "DELETED"
        case .deleting: return "DELETING"
        case .detached: return "DETACHED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputState(rawValue: rawValue) ?? InputState.sdkUnknown(rawValue)
    }
}

extension InputSwitchScheduleActionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inputAttachmentNameReference = "inputAttachmentNameReference"
        case inputClippingSettings = "inputClippingSettings"
        case urlPath = "urlPath"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputAttachmentNameReference = inputAttachmentNameReference {
            try encodeContainer.encode(inputAttachmentNameReference, forKey: .inputAttachmentNameReference)
        }
        if let inputClippingSettings = inputClippingSettings {
            try encodeContainer.encode(inputClippingSettings, forKey: .inputClippingSettings)
        }
        if let urlPath = urlPath {
            var urlPathContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urlPath)
            for __listof__string0 in urlPath {
                try urlPathContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputAttachmentNameReferenceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputAttachmentNameReference)
        inputAttachmentNameReference = inputAttachmentNameReferenceDecoded
        let inputClippingSettingsDecoded = try containerValues.decodeIfPresent(InputClippingSettings.self, forKey: .inputClippingSettings)
        inputClippingSettings = inputClippingSettingsDecoded
        let urlPathContainer = try containerValues.decodeIfPresent([String?].self, forKey: .urlPath)
        var urlPathDecoded0:[String]? = nil
        if let urlPathContainer = urlPathContainer {
            urlPathDecoded0 = [String]()
            for string0 in urlPathContainer {
                if let string0 = string0 {
                    urlPathDecoded0?.append(string0)
                }
            }
        }
        urlPath = urlPathDecoded0
    }
}

extension InputSwitchScheduleActionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputSwitchScheduleActionSettings(inputAttachmentNameReference: \(String(describing: inputAttachmentNameReference)), inputClippingSettings: \(String(describing: inputClippingSettings)), urlPath: \(String(describing: urlPath)))"}
}

/// Settings for the "switch input" action: to switch from ingesting one input to ingesting another input.
public struct InputSwitchScheduleActionSettings: Equatable {
    /// The name of the input attachment (not the name of the input!) to switch to. The name is specified in the channel configuration.
    public let inputAttachmentNameReference: String?
    /// Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
    public let inputClippingSettings: InputClippingSettings?
    /// The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
    public let urlPath: [String]?

    public init (
        inputAttachmentNameReference: String? = nil,
        inputClippingSettings: InputClippingSettings? = nil,
        urlPath: [String]? = nil
    )
    {
        self.inputAttachmentNameReference = inputAttachmentNameReference
        self.inputClippingSettings = inputClippingSettings
        self.urlPath = urlPath
    }
}

/// Documentation update needed
public enum InputTimecodeSource {
    case embedded
    case zerobased
    case sdkUnknown(String)
}

extension InputTimecodeSource : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputTimecodeSource] {
        return [
            .embedded,
            .zerobased,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .embedded: return "EMBEDDED"
        case .zerobased: return "ZEROBASED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputTimecodeSource(rawValue: rawValue) ?? InputTimecodeSource.sdkUnknown(rawValue)
    }
}

/// Placeholder documentation for InputType
public enum InputType {
    case awsCdi
    case inputDevice
    case mediaconnect
    case mp4File
    case rtmpPull
    case rtmpPush
    case rtpPush
    case udpPush
    case urlPull
    case sdkUnknown(String)
}

extension InputType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputType] {
        return [
            .awsCdi,
            .inputDevice,
            .mediaconnect,
            .mp4File,
            .rtmpPull,
            .rtmpPush,
            .rtpPush,
            .udpPush,
            .urlPull,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .awsCdi: return "AWS_CDI"
        case .inputDevice: return "INPUT_DEVICE"
        case .mediaconnect: return "MEDIACONNECT"
        case .mp4File: return "MP4_FILE"
        case .rtmpPull: return "RTMP_PULL"
        case .rtmpPush: return "RTMP_PUSH"
        case .rtpPush: return "RTP_PUSH"
        case .udpPush: return "UDP_PUSH"
        case .urlPull: return "URL_PULL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputType(rawValue: rawValue) ?? InputType.sdkUnknown(rawValue)
    }
}

extension InputVpcRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case securityGroupIds = "securityGroupIds"
        case subnetIds = "subnetIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for __listof__string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(__listof__string0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for __listof__string0 in subnetIds {
                try subnetIdsContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
    }
}

extension InputVpcRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputVpcRequest(securityGroupIds: \(String(describing: securityGroupIds)), subnetIds: \(String(describing: subnetIds)))"}
}

/// Settings for a private VPC Input.
/// When this property is specified, the input destination addresses will be created in a VPC rather than with public Internet addresses.
/// This property requires setting the roleArn property on Input creation.
/// Not compatible with the inputSecurityGroups property.
public struct InputVpcRequest: Equatable {
    /// A list of up to 5 EC2 VPC security group IDs to attach to the Input VPC network interfaces.
    /// Requires subnetIds. If none are specified then the VPC default security group will be used.
    public let securityGroupIds: [String]?
    /// A list of 2 VPC subnet IDs from the same VPC.
    /// Subnet IDs must be mapped to two unique availability zones (AZ).
    public let subnetIds: [String]?

    public init (
        securityGroupIds: [String]? = nil,
        subnetIds: [String]? = nil
    )
    {
        self.securityGroupIds = securityGroupIds
        self.subnetIds = subnetIds
    }
}

extension InputWhitelistRule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cidr = "cidr"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidr = cidr {
            try encodeContainer.encode(cidr, forKey: .cidr)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cidr)
        cidr = cidrDecoded
    }
}

extension InputWhitelistRule: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputWhitelistRule(cidr: \(String(describing: cidr)))"}
}

/// Whitelist rule
public struct InputWhitelistRule: Equatable {
    /// The IPv4 CIDR that's whitelisted.
    public let cidr: String?

    public init (
        cidr: String? = nil
    )
    {
        self.cidr = cidr
    }
}

extension InputWhitelistRuleCidr: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cidr = "cidr"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidr = cidr {
            try encodeContainer.encode(cidr, forKey: .cidr)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cidr)
        cidr = cidrDecoded
    }
}

extension InputWhitelistRuleCidr: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputWhitelistRuleCidr(cidr: \(String(describing: cidr)))"}
}

/// An IPv4 CIDR to whitelist.
public struct InputWhitelistRuleCidr: Equatable {
    /// The IPv4 CIDR to whitelist.
    public let cidr: String?

    public init (
        cidr: String? = nil
    )
    {
        self.cidr = cidr
    }
}

extension InternalServerErrorException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InternalServerErrorException(message: \(String(describing: message)))"}
}

extension InternalServerErrorException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InternalServerErrorExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for InternalServerErrorException
public struct InternalServerErrorException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server
    /// Placeholder documentation for __string
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerErrorExceptionBody: Equatable {
    public let message: String?
}

extension InternalServerErrorExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KeyProviderSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case staticKeySettings = "staticKeySettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let staticKeySettings = staticKeySettings {
            try encodeContainer.encode(staticKeySettings, forKey: .staticKeySettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticKeySettingsDecoded = try containerValues.decodeIfPresent(StaticKeySettings.self, forKey: .staticKeySettings)
        staticKeySettings = staticKeySettingsDecoded
    }
}

extension KeyProviderSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "KeyProviderSettings(staticKeySettings: \(String(describing: staticKeySettings)))"}
}

/// Key Provider Settings
public struct KeyProviderSettings: Equatable {
    /// Static Key Settings
    public let staticKeySettings: StaticKeySettings?

    public init (
        staticKeySettings: StaticKeySettings? = nil
    )
    {
        self.staticKeySettings = staticKeySettings
    }
}

/// If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
public enum LastFrameClippingBehavior {
    case excludeLastFrame
    case includeLastFrame
    case sdkUnknown(String)
}

extension LastFrameClippingBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LastFrameClippingBehavior] {
        return [
            .excludeLastFrame,
            .includeLastFrame,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .excludeLastFrame: return "EXCLUDE_LAST_FRAME"
        case .includeLastFrame: return "INCLUDE_LAST_FRAME"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LastFrameClippingBehavior(rawValue: rawValue) ?? LastFrameClippingBehavior.sdkUnknown(rawValue)
    }
}

extension ListChannelsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListChannelsInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListChannelsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListChannelsInputHeadersMiddleware: Middleware {
    public let id: String = "ListChannelsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListChannelsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListChannelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListChannelsInput>
    public typealias MOutput = OperationOutput<ListChannelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListChannelsOutputError>
}

public struct ListChannelsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListChannelsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListChannelsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListChannelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListChannelsInput>
    public typealias MOutput = OperationOutput<ListChannelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListChannelsOutputError>
}

/// Placeholder documentation for ListChannelsRequest
public struct ListChannelsInput: Equatable {
    /// Placeholder documentation for MaxResults
    public let maxResults: Int
    /// Placeholder documentation for __string
    public let nextToken: String?

    public init (
        maxResults: Int = 0,
        nextToken: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListChannelsInputBody: Equatable {
}

extension ListChannelsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListChannelsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListChannelsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListChannelsOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListChannelsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListChannelsOutputResponse(channels: \(String(describing: channels)), nextToken: \(String(describing: nextToken)))"}
}

extension ListChannelsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListChannelsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.channels = output.channels
            self.nextToken = output.nextToken
        } else {
            self.channels = nil
            self.nextToken = nil
        }
    }
}

/// Placeholder documentation for ListChannelsResponse
public struct ListChannelsOutputResponse: Equatable {
    /// Placeholder documentation for __listOfChannelSummary
    public let channels: [ChannelSummary]?
    /// Placeholder documentation for __string
    public let nextToken: String?

    public init (
        channels: [ChannelSummary]? = nil,
        nextToken: String? = nil
    )
    {
        self.channels = channels
        self.nextToken = nextToken
    }
}

struct ListChannelsOutputResponseBody: Equatable {
    public let channels: [ChannelSummary]?
    public let nextToken: String?
}

extension ListChannelsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channels = "channels"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelsContainer = try containerValues.decodeIfPresent([ChannelSummary?].self, forKey: .channels)
        var channelsDecoded0:[ChannelSummary]? = nil
        if let channelsContainer = channelsContainer {
            channelsDecoded0 = [ChannelSummary]()
            for structure0 in channelsContainer {
                if let structure0 = structure0 {
                    channelsDecoded0?.append(structure0)
                }
            }
        }
        channels = channelsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListInputDeviceTransfersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInputDeviceTransfersInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), transferType: \(String(describing: transferType)))"}
}

extension ListInputDeviceTransfersInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListInputDeviceTransfersInputHeadersMiddleware: Middleware {
    public let id: String = "ListInputDeviceTransfersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInputDeviceTransfersInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInputDeviceTransfersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInputDeviceTransfersInput>
    public typealias MOutput = OperationOutput<ListInputDeviceTransfersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInputDeviceTransfersOutputError>
}

public struct ListInputDeviceTransfersInputQueryItemMiddleware: Middleware {
    public let id: String = "ListInputDeviceTransfersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInputDeviceTransfersInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInputDeviceTransfersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        if let transferType = input.operationInput.transferType {
            let transferTypeQueryItem = URLQueryItem(name: "transferType".urlPercentEncoding(), value: String(transferType).urlPercentEncoding())
            input.builder.withQueryItem(transferTypeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInputDeviceTransfersInput>
    public typealias MOutput = OperationOutput<ListInputDeviceTransfersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInputDeviceTransfersOutputError>
}

/// Placeholder documentation for ListInputDeviceTransfersRequest
public struct ListInputDeviceTransfersInput: Equatable {
    /// Placeholder documentation for MaxResults
    public let maxResults: Int
    /// Placeholder documentation for __string
    public let nextToken: String?
    /// Placeholder documentation for __string
    public let transferType: String?

    public init (
        maxResults: Int = 0,
        nextToken: String? = nil,
        transferType: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.transferType = transferType
    }
}

struct ListInputDeviceTransfersInputBody: Equatable {
}

extension ListInputDeviceTransfersInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListInputDeviceTransfersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInputDeviceTransfersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInputDeviceTransfersOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInputDeviceTransfersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInputDeviceTransfersOutputResponse(inputDeviceTransfers: \(String(describing: inputDeviceTransfers)), nextToken: \(String(describing: nextToken)))"}
}

extension ListInputDeviceTransfersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListInputDeviceTransfersOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.inputDeviceTransfers = output.inputDeviceTransfers
            self.nextToken = output.nextToken
        } else {
            self.inputDeviceTransfers = nil
            self.nextToken = nil
        }
    }
}

/// Placeholder documentation for ListInputDeviceTransfersResponse
public struct ListInputDeviceTransfersOutputResponse: Equatable {
    /// The list of devices that you are transferring or are being transferred to you.
    public let inputDeviceTransfers: [TransferringInputDeviceSummary]?
    /// A token to get additional list results.
    public let nextToken: String?

    public init (
        inputDeviceTransfers: [TransferringInputDeviceSummary]? = nil,
        nextToken: String? = nil
    )
    {
        self.inputDeviceTransfers = inputDeviceTransfers
        self.nextToken = nextToken
    }
}

struct ListInputDeviceTransfersOutputResponseBody: Equatable {
    public let inputDeviceTransfers: [TransferringInputDeviceSummary]?
    public let nextToken: String?
}

extension ListInputDeviceTransfersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case inputDeviceTransfers = "inputDeviceTransfers"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDeviceTransfersContainer = try containerValues.decodeIfPresent([TransferringInputDeviceSummary?].self, forKey: .inputDeviceTransfers)
        var inputDeviceTransfersDecoded0:[TransferringInputDeviceSummary]? = nil
        if let inputDeviceTransfersContainer = inputDeviceTransfersContainer {
            inputDeviceTransfersDecoded0 = [TransferringInputDeviceSummary]()
            for structure0 in inputDeviceTransfersContainer {
                if let structure0 = structure0 {
                    inputDeviceTransfersDecoded0?.append(structure0)
                }
            }
        }
        inputDeviceTransfers = inputDeviceTransfersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListInputDevicesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInputDevicesInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListInputDevicesInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListInputDevicesInputHeadersMiddleware: Middleware {
    public let id: String = "ListInputDevicesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInputDevicesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInputDevicesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInputDevicesInput>
    public typealias MOutput = OperationOutput<ListInputDevicesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInputDevicesOutputError>
}

public struct ListInputDevicesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListInputDevicesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInputDevicesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInputDevicesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInputDevicesInput>
    public typealias MOutput = OperationOutput<ListInputDevicesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInputDevicesOutputError>
}

/// Placeholder documentation for ListInputDevicesRequest
public struct ListInputDevicesInput: Equatable {
    /// Placeholder documentation for MaxResults
    public let maxResults: Int
    /// Placeholder documentation for __string
    public let nextToken: String?

    public init (
        maxResults: Int = 0,
        nextToken: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListInputDevicesInputBody: Equatable {
}

extension ListInputDevicesInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListInputDevicesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInputDevicesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInputDevicesOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInputDevicesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInputDevicesOutputResponse(inputDevices: \(String(describing: inputDevices)), nextToken: \(String(describing: nextToken)))"}
}

extension ListInputDevicesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListInputDevicesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.inputDevices = output.inputDevices
            self.nextToken = output.nextToken
        } else {
            self.inputDevices = nil
            self.nextToken = nil
        }
    }
}

/// Placeholder documentation for ListInputDevicesResponse
public struct ListInputDevicesOutputResponse: Equatable {
    /// The list of input devices.
    public let inputDevices: [InputDeviceSummary]?
    /// A token to get additional list results.
    public let nextToken: String?

    public init (
        inputDevices: [InputDeviceSummary]? = nil,
        nextToken: String? = nil
    )
    {
        self.inputDevices = inputDevices
        self.nextToken = nextToken
    }
}

struct ListInputDevicesOutputResponseBody: Equatable {
    public let inputDevices: [InputDeviceSummary]?
    public let nextToken: String?
}

extension ListInputDevicesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case inputDevices = "inputDevices"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDevicesContainer = try containerValues.decodeIfPresent([InputDeviceSummary?].self, forKey: .inputDevices)
        var inputDevicesDecoded0:[InputDeviceSummary]? = nil
        if let inputDevicesContainer = inputDevicesContainer {
            inputDevicesDecoded0 = [InputDeviceSummary]()
            for structure0 in inputDevicesContainer {
                if let structure0 = structure0 {
                    inputDevicesDecoded0?.append(structure0)
                }
            }
        }
        inputDevices = inputDevicesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListInputSecurityGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInputSecurityGroupsInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListInputSecurityGroupsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListInputSecurityGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "ListInputSecurityGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInputSecurityGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInputSecurityGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInputSecurityGroupsInput>
    public typealias MOutput = OperationOutput<ListInputSecurityGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInputSecurityGroupsOutputError>
}

public struct ListInputSecurityGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListInputSecurityGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInputSecurityGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInputSecurityGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInputSecurityGroupsInput>
    public typealias MOutput = OperationOutput<ListInputSecurityGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInputSecurityGroupsOutputError>
}

/// Placeholder documentation for ListInputSecurityGroupsRequest
public struct ListInputSecurityGroupsInput: Equatable {
    /// Placeholder documentation for MaxResults
    public let maxResults: Int
    /// Placeholder documentation for __string
    public let nextToken: String?

    public init (
        maxResults: Int = 0,
        nextToken: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListInputSecurityGroupsInputBody: Equatable {
}

extension ListInputSecurityGroupsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListInputSecurityGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInputSecurityGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInputSecurityGroupsOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInputSecurityGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInputSecurityGroupsOutputResponse(inputSecurityGroups: \(String(describing: inputSecurityGroups)), nextToken: \(String(describing: nextToken)))"}
}

extension ListInputSecurityGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListInputSecurityGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.inputSecurityGroups = output.inputSecurityGroups
            self.nextToken = output.nextToken
        } else {
            self.inputSecurityGroups = nil
            self.nextToken = nil
        }
    }
}

/// Placeholder documentation for ListInputSecurityGroupsResponse
public struct ListInputSecurityGroupsOutputResponse: Equatable {
    /// List of input security groups
    public let inputSecurityGroups: [InputSecurityGroup]?
    /// Placeholder documentation for __string
    public let nextToken: String?

    public init (
        inputSecurityGroups: [InputSecurityGroup]? = nil,
        nextToken: String? = nil
    )
    {
        self.inputSecurityGroups = inputSecurityGroups
        self.nextToken = nextToken
    }
}

struct ListInputSecurityGroupsOutputResponseBody: Equatable {
    public let inputSecurityGroups: [InputSecurityGroup]?
    public let nextToken: String?
}

extension ListInputSecurityGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case inputSecurityGroups = "inputSecurityGroups"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputSecurityGroupsContainer = try containerValues.decodeIfPresent([InputSecurityGroup?].self, forKey: .inputSecurityGroups)
        var inputSecurityGroupsDecoded0:[InputSecurityGroup]? = nil
        if let inputSecurityGroupsContainer = inputSecurityGroupsContainer {
            inputSecurityGroupsDecoded0 = [InputSecurityGroup]()
            for structure0 in inputSecurityGroupsContainer {
                if let structure0 = structure0 {
                    inputSecurityGroupsDecoded0?.append(structure0)
                }
            }
        }
        inputSecurityGroups = inputSecurityGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListInputsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInputsInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListInputsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListInputsInputHeadersMiddleware: Middleware {
    public let id: String = "ListInputsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInputsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInputsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInputsInput>
    public typealias MOutput = OperationOutput<ListInputsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInputsOutputError>
}

public struct ListInputsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListInputsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInputsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInputsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInputsInput>
    public typealias MOutput = OperationOutput<ListInputsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInputsOutputError>
}

/// Placeholder documentation for ListInputsRequest
public struct ListInputsInput: Equatable {
    /// Placeholder documentation for MaxResults
    public let maxResults: Int
    /// Placeholder documentation for __string
    public let nextToken: String?

    public init (
        maxResults: Int = 0,
        nextToken: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListInputsInputBody: Equatable {
}

extension ListInputsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListInputsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInputsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInputsOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInputsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInputsOutputResponse(inputs: \(String(describing: inputs)), nextToken: \(String(describing: nextToken)))"}
}

extension ListInputsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListInputsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.inputs = output.inputs
            self.nextToken = output.nextToken
        } else {
            self.inputs = nil
            self.nextToken = nil
        }
    }
}

/// Placeholder documentation for ListInputsResponse
public struct ListInputsOutputResponse: Equatable {
    /// Placeholder documentation for __listOfInput
    public let inputs: [Input]?
    /// Placeholder documentation for __string
    public let nextToken: String?

    public init (
        inputs: [Input]? = nil,
        nextToken: String? = nil
    )
    {
        self.inputs = inputs
        self.nextToken = nextToken
    }
}

struct ListInputsOutputResponseBody: Equatable {
    public let inputs: [Input]?
    public let nextToken: String?
}

extension ListInputsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case inputs = "inputs"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputsContainer = try containerValues.decodeIfPresent([Input?].self, forKey: .inputs)
        var inputsDecoded0:[Input]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Input]()
            for structure0 in inputsContainer {
                if let structure0 = structure0 {
                    inputsDecoded0?.append(structure0)
                }
            }
        }
        inputs = inputsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMultiplexProgramsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListMultiplexProgramsInput(maxResults: \(String(describing: maxResults)), multiplexId: \(String(describing: multiplexId)), nextToken: \(String(describing: nextToken)))"}
}

extension ListMultiplexProgramsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListMultiplexProgramsInputHeadersMiddleware: Middleware {
    public let id: String = "ListMultiplexProgramsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListMultiplexProgramsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListMultiplexProgramsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListMultiplexProgramsInput>
    public typealias MOutput = OperationOutput<ListMultiplexProgramsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListMultiplexProgramsOutputError>
}

public struct ListMultiplexProgramsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListMultiplexProgramsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListMultiplexProgramsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListMultiplexProgramsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListMultiplexProgramsInput>
    public typealias MOutput = OperationOutput<ListMultiplexProgramsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListMultiplexProgramsOutputError>
}

/// Placeholder documentation for ListMultiplexProgramsRequest
public struct ListMultiplexProgramsInput: Equatable {
    /// The maximum number of items to return.
    public let maxResults: Int
    /// The ID of the multiplex that the programs belong to.
    public let multiplexId: String?
    /// The token to retrieve the next page of results.
    public let nextToken: String?

    public init (
        maxResults: Int = 0,
        multiplexId: String? = nil,
        nextToken: String? = nil
    )
    {
        self.maxResults = maxResults
        self.multiplexId = multiplexId
        self.nextToken = nextToken
    }
}

struct ListMultiplexProgramsInputBody: Equatable {
}

extension ListMultiplexProgramsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListMultiplexProgramsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMultiplexProgramsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMultiplexProgramsOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMultiplexProgramsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListMultiplexProgramsOutputResponse(multiplexPrograms: \(String(describing: multiplexPrograms)), nextToken: \(String(describing: nextToken)))"}
}

extension ListMultiplexProgramsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListMultiplexProgramsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.multiplexPrograms = output.multiplexPrograms
            self.nextToken = output.nextToken
        } else {
            self.multiplexPrograms = nil
            self.nextToken = nil
        }
    }
}

/// Placeholder documentation for ListMultiplexProgramsResponse
public struct ListMultiplexProgramsOutputResponse: Equatable {
    /// List of multiplex programs.
    public let multiplexPrograms: [MultiplexProgramSummary]?
    /// Token for the next ListMultiplexProgram request.
    public let nextToken: String?

    public init (
        multiplexPrograms: [MultiplexProgramSummary]? = nil,
        nextToken: String? = nil
    )
    {
        self.multiplexPrograms = multiplexPrograms
        self.nextToken = nextToken
    }
}

struct ListMultiplexProgramsOutputResponseBody: Equatable {
    public let multiplexPrograms: [MultiplexProgramSummary]?
    public let nextToken: String?
}

extension ListMultiplexProgramsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case multiplexPrograms = "multiplexPrograms"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexProgramsContainer = try containerValues.decodeIfPresent([MultiplexProgramSummary?].self, forKey: .multiplexPrograms)
        var multiplexProgramsDecoded0:[MultiplexProgramSummary]? = nil
        if let multiplexProgramsContainer = multiplexProgramsContainer {
            multiplexProgramsDecoded0 = [MultiplexProgramSummary]()
            for structure0 in multiplexProgramsContainer {
                if let structure0 = structure0 {
                    multiplexProgramsDecoded0?.append(structure0)
                }
            }
        }
        multiplexPrograms = multiplexProgramsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMultiplexesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListMultiplexesInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListMultiplexesInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListMultiplexesInputHeadersMiddleware: Middleware {
    public let id: String = "ListMultiplexesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListMultiplexesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListMultiplexesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListMultiplexesInput>
    public typealias MOutput = OperationOutput<ListMultiplexesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListMultiplexesOutputError>
}

public struct ListMultiplexesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListMultiplexesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListMultiplexesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListMultiplexesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListMultiplexesInput>
    public typealias MOutput = OperationOutput<ListMultiplexesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListMultiplexesOutputError>
}

/// Placeholder documentation for ListMultiplexesRequest
public struct ListMultiplexesInput: Equatable {
    /// The maximum number of items to return.
    public let maxResults: Int
    /// The token to retrieve the next page of results.
    public let nextToken: String?

    public init (
        maxResults: Int = 0,
        nextToken: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListMultiplexesInputBody: Equatable {
}

extension ListMultiplexesInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListMultiplexesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMultiplexesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMultiplexesOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMultiplexesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListMultiplexesOutputResponse(multiplexes: \(String(describing: multiplexes)), nextToken: \(String(describing: nextToken)))"}
}

extension ListMultiplexesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListMultiplexesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.multiplexes = output.multiplexes
            self.nextToken = output.nextToken
        } else {
            self.multiplexes = nil
            self.nextToken = nil
        }
    }
}

/// Placeholder documentation for ListMultiplexesResponse
public struct ListMultiplexesOutputResponse: Equatable {
    /// List of multiplexes.
    public let multiplexes: [MultiplexSummary]?
    /// Token for the next ListMultiplexes request.
    public let nextToken: String?

    public init (
        multiplexes: [MultiplexSummary]? = nil,
        nextToken: String? = nil
    )
    {
        self.multiplexes = multiplexes
        self.nextToken = nextToken
    }
}

struct ListMultiplexesOutputResponseBody: Equatable {
    public let multiplexes: [MultiplexSummary]?
    public let nextToken: String?
}

extension ListMultiplexesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case multiplexes = "multiplexes"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexesContainer = try containerValues.decodeIfPresent([MultiplexSummary?].self, forKey: .multiplexes)
        var multiplexesDecoded0:[MultiplexSummary]? = nil
        if let multiplexesContainer = multiplexesContainer {
            multiplexesDecoded0 = [MultiplexSummary]()
            for structure0 in multiplexesContainer {
                if let structure0 = structure0 {
                    multiplexesDecoded0?.append(structure0)
                }
            }
        }
        multiplexes = multiplexesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListOfferingsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListOfferingsInput(channelClass: \(String(describing: channelClass)), channelConfiguration: \(String(describing: channelConfiguration)), codec: \(String(describing: codec)), duration: \(String(describing: duration)), maxResults: \(String(describing: maxResults)), maximumBitrate: \(String(describing: maximumBitrate)), maximumFramerate: \(String(describing: maximumFramerate)), nextToken: \(String(describing: nextToken)), resolution: \(String(describing: resolution)), resourceType: \(String(describing: resourceType)), specialFeature: \(String(describing: specialFeature)), videoQuality: \(String(describing: videoQuality)))"}
}

extension ListOfferingsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListOfferingsInputHeadersMiddleware: Middleware {
    public let id: String = "ListOfferingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOfferingsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOfferingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOfferingsInput>
    public typealias MOutput = OperationOutput<ListOfferingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOfferingsOutputError>
}

public struct ListOfferingsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListOfferingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOfferingsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOfferingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let channelClass = input.operationInput.channelClass {
            let channelClassQueryItem = URLQueryItem(name: "channelClass".urlPercentEncoding(), value: String(channelClass).urlPercentEncoding())
            input.builder.withQueryItem(channelClassQueryItem)
        }
        if let codec = input.operationInput.codec {
            let codecQueryItem = URLQueryItem(name: "codec".urlPercentEncoding(), value: String(codec).urlPercentEncoding())
            input.builder.withQueryItem(codecQueryItem)
        }
        if let videoQuality = input.operationInput.videoQuality {
            let videoQualityQueryItem = URLQueryItem(name: "videoQuality".urlPercentEncoding(), value: String(videoQuality).urlPercentEncoding())
            input.builder.withQueryItem(videoQualityQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        if let maximumBitrate = input.operationInput.maximumBitrate {
            let maximumBitrateQueryItem = URLQueryItem(name: "maximumBitrate".urlPercentEncoding(), value: String(maximumBitrate).urlPercentEncoding())
            input.builder.withQueryItem(maximumBitrateQueryItem)
        }
        if let specialFeature = input.operationInput.specialFeature {
            let specialFeatureQueryItem = URLQueryItem(name: "specialFeature".urlPercentEncoding(), value: String(specialFeature).urlPercentEncoding())
            input.builder.withQueryItem(specialFeatureQueryItem)
        }
        if let duration = input.operationInput.duration {
            let durationQueryItem = URLQueryItem(name: "duration".urlPercentEncoding(), value: String(duration).urlPercentEncoding())
            input.builder.withQueryItem(durationQueryItem)
        }
        if let resourceType = input.operationInput.resourceType {
            let resourceTypeQueryItem = URLQueryItem(name: "resourceType".urlPercentEncoding(), value: String(resourceType).urlPercentEncoding())
            input.builder.withQueryItem(resourceTypeQueryItem)
        }
        if let channelConfiguration = input.operationInput.channelConfiguration {
            let channelConfigurationQueryItem = URLQueryItem(name: "channelConfiguration".urlPercentEncoding(), value: String(channelConfiguration).urlPercentEncoding())
            input.builder.withQueryItem(channelConfigurationQueryItem)
        }
        if let maximumFramerate = input.operationInput.maximumFramerate {
            let maximumFramerateQueryItem = URLQueryItem(name: "maximumFramerate".urlPercentEncoding(), value: String(maximumFramerate).urlPercentEncoding())
            input.builder.withQueryItem(maximumFramerateQueryItem)
        }
        if let resolution = input.operationInput.resolution {
            let resolutionQueryItem = URLQueryItem(name: "resolution".urlPercentEncoding(), value: String(resolution).urlPercentEncoding())
            input.builder.withQueryItem(resolutionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOfferingsInput>
    public typealias MOutput = OperationOutput<ListOfferingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOfferingsOutputError>
}

/// Placeholder documentation for ListOfferingsRequest
public struct ListOfferingsInput: Equatable {
    /// Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
    public let channelClass: String?
    /// Filter to offerings that match the configuration of an existing channel, e.g. '2345678' (a channel ID)
    public let channelConfiguration: String?
    /// Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'
    public let codec: String?
    /// Filter by offering duration, e.g. '12'
    public let duration: String?
    /// Placeholder documentation for MaxResults
    public let maxResults: Int
    /// Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
    public let maximumBitrate: String?
    /// Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
    public let maximumFramerate: String?
    /// Placeholder documentation for __string
    public let nextToken: String?
    /// Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
    public let resolution: String?
    /// Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
    public let resourceType: String?
    /// Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
    public let specialFeature: String?
    /// Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
    public let videoQuality: String?

    public init (
        channelClass: String? = nil,
        channelConfiguration: String? = nil,
        codec: String? = nil,
        duration: String? = nil,
        maxResults: Int = 0,
        maximumBitrate: String? = nil,
        maximumFramerate: String? = nil,
        nextToken: String? = nil,
        resolution: String? = nil,
        resourceType: String? = nil,
        specialFeature: String? = nil,
        videoQuality: String? = nil
    )
    {
        self.channelClass = channelClass
        self.channelConfiguration = channelConfiguration
        self.codec = codec
        self.duration = duration
        self.maxResults = maxResults
        self.maximumBitrate = maximumBitrate
        self.maximumFramerate = maximumFramerate
        self.nextToken = nextToken
        self.resolution = resolution
        self.resourceType = resourceType
        self.specialFeature = specialFeature
        self.videoQuality = videoQuality
    }
}

struct ListOfferingsInputBody: Equatable {
}

extension ListOfferingsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListOfferingsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListOfferingsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListOfferingsOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListOfferingsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListOfferingsOutputResponse(nextToken: \(String(describing: nextToken)), offerings: \(String(describing: offerings)))"}
}

extension ListOfferingsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListOfferingsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.offerings = output.offerings
        } else {
            self.nextToken = nil
            self.offerings = nil
        }
    }
}

/// Placeholder documentation for ListOfferingsResponse
public struct ListOfferingsOutputResponse: Equatable {
    /// Token to retrieve the next page of results
    public let nextToken: String?
    /// List of offerings
    public let offerings: [Offering]?

    public init (
        nextToken: String? = nil,
        offerings: [Offering]? = nil
    )
    {
        self.nextToken = nextToken
        self.offerings = offerings
    }
}

struct ListOfferingsOutputResponseBody: Equatable {
    public let nextToken: String?
    public let offerings: [Offering]?
}

extension ListOfferingsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case offerings = "offerings"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let offeringsContainer = try containerValues.decodeIfPresent([Offering?].self, forKey: .offerings)
        var offeringsDecoded0:[Offering]? = nil
        if let offeringsContainer = offeringsContainer {
            offeringsDecoded0 = [Offering]()
            for structure0 in offeringsContainer {
                if let structure0 = structure0 {
                    offeringsDecoded0?.append(structure0)
                }
            }
        }
        offerings = offeringsDecoded0
    }
}

extension ListReservationsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListReservationsInput(channelClass: \(String(describing: channelClass)), codec: \(String(describing: codec)), maxResults: \(String(describing: maxResults)), maximumBitrate: \(String(describing: maximumBitrate)), maximumFramerate: \(String(describing: maximumFramerate)), nextToken: \(String(describing: nextToken)), resolution: \(String(describing: resolution)), resourceType: \(String(describing: resourceType)), specialFeature: \(String(describing: specialFeature)), videoQuality: \(String(describing: videoQuality)))"}
}

extension ListReservationsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListReservationsInputHeadersMiddleware: Middleware {
    public let id: String = "ListReservationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListReservationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListReservationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListReservationsInput>
    public typealias MOutput = OperationOutput<ListReservationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListReservationsOutputError>
}

public struct ListReservationsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListReservationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListReservationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListReservationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let channelClass = input.operationInput.channelClass {
            let channelClassQueryItem = URLQueryItem(name: "channelClass".urlPercentEncoding(), value: String(channelClass).urlPercentEncoding())
            input.builder.withQueryItem(channelClassQueryItem)
        }
        if let codec = input.operationInput.codec {
            let codecQueryItem = URLQueryItem(name: "codec".urlPercentEncoding(), value: String(codec).urlPercentEncoding())
            input.builder.withQueryItem(codecQueryItem)
        }
        if let videoQuality = input.operationInput.videoQuality {
            let videoQualityQueryItem = URLQueryItem(name: "videoQuality".urlPercentEncoding(), value: String(videoQuality).urlPercentEncoding())
            input.builder.withQueryItem(videoQualityQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        if let maximumBitrate = input.operationInput.maximumBitrate {
            let maximumBitrateQueryItem = URLQueryItem(name: "maximumBitrate".urlPercentEncoding(), value: String(maximumBitrate).urlPercentEncoding())
            input.builder.withQueryItem(maximumBitrateQueryItem)
        }
        if let specialFeature = input.operationInput.specialFeature {
            let specialFeatureQueryItem = URLQueryItem(name: "specialFeature".urlPercentEncoding(), value: String(specialFeature).urlPercentEncoding())
            input.builder.withQueryItem(specialFeatureQueryItem)
        }
        if let resourceType = input.operationInput.resourceType {
            let resourceTypeQueryItem = URLQueryItem(name: "resourceType".urlPercentEncoding(), value: String(resourceType).urlPercentEncoding())
            input.builder.withQueryItem(resourceTypeQueryItem)
        }
        if let maximumFramerate = input.operationInput.maximumFramerate {
            let maximumFramerateQueryItem = URLQueryItem(name: "maximumFramerate".urlPercentEncoding(), value: String(maximumFramerate).urlPercentEncoding())
            input.builder.withQueryItem(maximumFramerateQueryItem)
        }
        if let resolution = input.operationInput.resolution {
            let resolutionQueryItem = URLQueryItem(name: "resolution".urlPercentEncoding(), value: String(resolution).urlPercentEncoding())
            input.builder.withQueryItem(resolutionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListReservationsInput>
    public typealias MOutput = OperationOutput<ListReservationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListReservationsOutputError>
}

/// Placeholder documentation for ListReservationsRequest
public struct ListReservationsInput: Equatable {
    /// Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
    public let channelClass: String?
    /// Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'
    public let codec: String?
    /// Placeholder documentation for MaxResults
    public let maxResults: Int
    /// Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
    public let maximumBitrate: String?
    /// Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
    public let maximumFramerate: String?
    /// Placeholder documentation for __string
    public let nextToken: String?
    /// Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
    public let resolution: String?
    /// Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
    public let resourceType: String?
    /// Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
    public let specialFeature: String?
    /// Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
    public let videoQuality: String?

    public init (
        channelClass: String? = nil,
        codec: String? = nil,
        maxResults: Int = 0,
        maximumBitrate: String? = nil,
        maximumFramerate: String? = nil,
        nextToken: String? = nil,
        resolution: String? = nil,
        resourceType: String? = nil,
        specialFeature: String? = nil,
        videoQuality: String? = nil
    )
    {
        self.channelClass = channelClass
        self.codec = codec
        self.maxResults = maxResults
        self.maximumBitrate = maximumBitrate
        self.maximumFramerate = maximumFramerate
        self.nextToken = nextToken
        self.resolution = resolution
        self.resourceType = resourceType
        self.specialFeature = specialFeature
        self.videoQuality = videoQuality
    }
}

struct ListReservationsInputBody: Equatable {
}

extension ListReservationsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListReservationsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListReservationsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListReservationsOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListReservationsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListReservationsOutputResponse(nextToken: \(String(describing: nextToken)), reservations: \(String(describing: reservations)))"}
}

extension ListReservationsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListReservationsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.reservations = output.reservations
        } else {
            self.nextToken = nil
            self.reservations = nil
        }
    }
}

/// Placeholder documentation for ListReservationsResponse
public struct ListReservationsOutputResponse: Equatable {
    /// Token to retrieve the next page of results
    public let nextToken: String?
    /// List of reservations
    public let reservations: [Reservation]?

    public init (
        nextToken: String? = nil,
        reservations: [Reservation]? = nil
    )
    {
        self.nextToken = nextToken
        self.reservations = reservations
    }
}

struct ListReservationsOutputResponseBody: Equatable {
    public let nextToken: String?
    public let reservations: [Reservation]?
}

extension ListReservationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case reservations = "reservations"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let reservationsContainer = try containerValues.decodeIfPresent([Reservation?].self, forKey: .reservations)
        var reservationsDecoded0:[Reservation]? = nil
        if let reservationsContainer = reservationsContainer {
            reservationsDecoded0 = [Reservation]()
            for structure0 in reservationsContainer {
                if let structure0 = structure0 {
                    reservationsDecoded0?.append(structure0)
                }
            }
        }
        reservations = reservationsDecoded0
    }
}

extension ListTagsForResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceInput(resourceArn: \(String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

/// Placeholder documentation for ListTagsForResourceRequest
public struct ListTagsForResourceInput: Equatable {
    /// Placeholder documentation for __string
    public let resourceArn: String?

    public init (
        resourceArn: String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Equatable {
}

extension ListTagsForResourceInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceOutputResponse(tags: \(String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

/// Placeholder documentation for ListTagsForResourceResponse
public struct ListTagsForResourceOutputResponse: Equatable {
    /// Placeholder documentation for Tags
    public let tags: [String:String]?

    public init (
        tags: [String:String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Equatable {
    public let tags: [String:String]?
}

extension ListTagsForResourceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

/// The log level the user wants for their channel.
public enum LogLevel {
    case debug
    case disabled
    case error
    case info
    case warning
    case sdkUnknown(String)
}

extension LogLevel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LogLevel] {
        return [
            .debug,
            .disabled,
            .error,
            .info,
            .warning,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .debug: return "DEBUG"
        case .disabled: return "DISABLED"
        case .error: return "ERROR"
        case .info: return "INFO"
        case .warning: return "WARNING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LogLevel(rawValue: rawValue) ?? LogLevel.sdkUnknown(rawValue)
    }
}

/// M2ts Absent Input Audio Behavior
public enum M2tsAbsentInputAudioBehavior {
    case drop
    case encodeSilence
    case sdkUnknown(String)
}

extension M2tsAbsentInputAudioBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsAbsentInputAudioBehavior] {
        return [
            .drop,
            .encodeSilence,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .drop: return "DROP"
        case .encodeSilence: return "ENCODE_SILENCE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsAbsentInputAudioBehavior(rawValue: rawValue) ?? M2tsAbsentInputAudioBehavior.sdkUnknown(rawValue)
    }
}

/// M2ts Arib
public enum M2tsArib {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension M2tsArib : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsArib] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsArib(rawValue: rawValue) ?? M2tsArib.sdkUnknown(rawValue)
    }
}

/// M2ts Arib Captions Pid Control
public enum M2tsAribCaptionsPidControl {
    case auto
    case useConfigured
    case sdkUnknown(String)
}

extension M2tsAribCaptionsPidControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsAribCaptionsPidControl] {
        return [
            .auto,
            .useConfigured,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .useConfigured: return "USE_CONFIGURED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsAribCaptionsPidControl(rawValue: rawValue) ?? M2tsAribCaptionsPidControl.sdkUnknown(rawValue)
    }
}

/// M2ts Audio Buffer Model
public enum M2tsAudioBufferModel {
    case atsc
    case dvb
    case sdkUnknown(String)
}

extension M2tsAudioBufferModel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsAudioBufferModel] {
        return [
            .atsc,
            .dvb,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .atsc: return "ATSC"
        case .dvb: return "DVB"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsAudioBufferModel(rawValue: rawValue) ?? M2tsAudioBufferModel.sdkUnknown(rawValue)
    }
}

/// M2ts Audio Interval
public enum M2tsAudioInterval {
    case videoAndFixedIntervals
    case videoInterval
    case sdkUnknown(String)
}

extension M2tsAudioInterval : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsAudioInterval] {
        return [
            .videoAndFixedIntervals,
            .videoInterval,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .videoAndFixedIntervals: return "VIDEO_AND_FIXED_INTERVALS"
        case .videoInterval: return "VIDEO_INTERVAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsAudioInterval(rawValue: rawValue) ?? M2tsAudioInterval.sdkUnknown(rawValue)
    }
}

/// M2ts Audio Stream Type
public enum M2tsAudioStreamType {
    case atsc
    case dvb
    case sdkUnknown(String)
}

extension M2tsAudioStreamType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsAudioStreamType] {
        return [
            .atsc,
            .dvb,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .atsc: return "ATSC"
        case .dvb: return "DVB"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsAudioStreamType(rawValue: rawValue) ?? M2tsAudioStreamType.sdkUnknown(rawValue)
    }
}

/// M2ts Buffer Model
public enum M2tsBufferModel {
    case multiplex
    case `none`
    case sdkUnknown(String)
}

extension M2tsBufferModel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsBufferModel] {
        return [
            .multiplex,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .multiplex: return "MULTIPLEX"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsBufferModel(rawValue: rawValue) ?? M2tsBufferModel.sdkUnknown(rawValue)
    }
}

/// M2ts Cc Descriptor
public enum M2tsCcDescriptor {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension M2tsCcDescriptor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsCcDescriptor] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsCcDescriptor(rawValue: rawValue) ?? M2tsCcDescriptor.sdkUnknown(rawValue)
    }
}

/// M2ts Ebif Control
public enum M2tsEbifControl {
    case `none`
    case passthrough
    case sdkUnknown(String)
}

extension M2tsEbifControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsEbifControl] {
        return [
            .none,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsEbifControl(rawValue: rawValue) ?? M2tsEbifControl.sdkUnknown(rawValue)
    }
}

/// M2ts Ebp Placement
public enum M2tsEbpPlacement {
    case videoAndAudioPids
    case videoPid
    case sdkUnknown(String)
}

extension M2tsEbpPlacement : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsEbpPlacement] {
        return [
            .videoAndAudioPids,
            .videoPid,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .videoAndAudioPids: return "VIDEO_AND_AUDIO_PIDS"
        case .videoPid: return "VIDEO_PID"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsEbpPlacement(rawValue: rawValue) ?? M2tsEbpPlacement.sdkUnknown(rawValue)
    }
}

/// M2ts Es Rate In Pes
public enum M2tsEsRateInPes {
    case exclude
    case include
    case sdkUnknown(String)
}

extension M2tsEsRateInPes : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsEsRateInPes] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsEsRateInPes(rawValue: rawValue) ?? M2tsEsRateInPes.sdkUnknown(rawValue)
    }
}

/// M2ts Klv
public enum M2tsKlv {
    case `none`
    case passthrough
    case sdkUnknown(String)
}

extension M2tsKlv : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsKlv] {
        return [
            .none,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsKlv(rawValue: rawValue) ?? M2tsKlv.sdkUnknown(rawValue)
    }
}

/// M2ts Nielsen Id3 Behavior
public enum M2tsNielsenId3Behavior {
    case noPassthrough
    case passthrough
    case sdkUnknown(String)
}

extension M2tsNielsenId3Behavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsNielsenId3Behavior] {
        return [
            .noPassthrough,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noPassthrough: return "NO_PASSTHROUGH"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsNielsenId3Behavior(rawValue: rawValue) ?? M2tsNielsenId3Behavior.sdkUnknown(rawValue)
    }
}

/// M2ts Pcr Control
public enum M2tsPcrControl {
    case configuredPcrPeriod
    case pcrEveryPesPacket
    case sdkUnknown(String)
}

extension M2tsPcrControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsPcrControl] {
        return [
            .configuredPcrPeriod,
            .pcrEveryPesPacket,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .configuredPcrPeriod: return "CONFIGURED_PCR_PERIOD"
        case .pcrEveryPesPacket: return "PCR_EVERY_PES_PACKET"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsPcrControl(rawValue: rawValue) ?? M2tsPcrControl.sdkUnknown(rawValue)
    }
}

/// M2ts Rate Mode
public enum M2tsRateMode {
    case cbr
    case vbr
    case sdkUnknown(String)
}

extension M2tsRateMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsRateMode] {
        return [
            .cbr,
            .vbr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cbr: return "CBR"
        case .vbr: return "VBR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsRateMode(rawValue: rawValue) ?? M2tsRateMode.sdkUnknown(rawValue)
    }
}

/// M2ts Scte35 Control
public enum M2tsScte35Control {
    case `none`
    case passthrough
    case sdkUnknown(String)
}

extension M2tsScte35Control : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsScte35Control] {
        return [
            .none,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsScte35Control(rawValue: rawValue) ?? M2tsScte35Control.sdkUnknown(rawValue)
    }
}

/// M2ts Segmentation Markers
public enum M2tsSegmentationMarkers {
    case ebp
    case ebpLegacy
    case `none`
    case psiSegstart
    case raiAdapt
    case raiSegstart
    case sdkUnknown(String)
}

extension M2tsSegmentationMarkers : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsSegmentationMarkers] {
        return [
            .ebp,
            .ebpLegacy,
            .none,
            .psiSegstart,
            .raiAdapt,
            .raiSegstart,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ebp: return "EBP"
        case .ebpLegacy: return "EBP_LEGACY"
        case .none: return "NONE"
        case .psiSegstart: return "PSI_SEGSTART"
        case .raiAdapt: return "RAI_ADAPT"
        case .raiSegstart: return "RAI_SEGSTART"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsSegmentationMarkers(rawValue: rawValue) ?? M2tsSegmentationMarkers.sdkUnknown(rawValue)
    }
}

/// M2ts Segmentation Style
public enum M2tsSegmentationStyle {
    case maintainCadence
    case resetCadence
    case sdkUnknown(String)
}

extension M2tsSegmentationStyle : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsSegmentationStyle] {
        return [
            .maintainCadence,
            .resetCadence,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .maintainCadence: return "MAINTAIN_CADENCE"
        case .resetCadence: return "RESET_CADENCE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsSegmentationStyle(rawValue: rawValue) ?? M2tsSegmentationStyle.sdkUnknown(rawValue)
    }
}

extension M2tsSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case absentInputAudioBehavior = "absentInputAudioBehavior"
        case arib = "arib"
        case aribCaptionsPid = "aribCaptionsPid"
        case aribCaptionsPidControl = "aribCaptionsPidControl"
        case audioBufferModel = "audioBufferModel"
        case audioFramesPerPes = "audioFramesPerPes"
        case audioPids = "audioPids"
        case audioStreamType = "audioStreamType"
        case bitrate = "bitrate"
        case bufferModel = "bufferModel"
        case ccDescriptor = "ccDescriptor"
        case dvbNitSettings = "dvbNitSettings"
        case dvbSdtSettings = "dvbSdtSettings"
        case dvbSubPids = "dvbSubPids"
        case dvbTdtSettings = "dvbTdtSettings"
        case dvbTeletextPid = "dvbTeletextPid"
        case ebif = "ebif"
        case ebpAudioInterval = "ebpAudioInterval"
        case ebpLookaheadMs = "ebpLookaheadMs"
        case ebpPlacement = "ebpPlacement"
        case ecmPid = "ecmPid"
        case esRateInPes = "esRateInPes"
        case etvPlatformPid = "etvPlatformPid"
        case etvSignalPid = "etvSignalPid"
        case fragmentTime = "fragmentTime"
        case klv = "klv"
        case klvDataPids = "klvDataPids"
        case nielsenId3Behavior = "nielsenId3Behavior"
        case nullPacketBitrate = "nullPacketBitrate"
        case patInterval = "patInterval"
        case pcrControl = "pcrControl"
        case pcrPeriod = "pcrPeriod"
        case pcrPid = "pcrPid"
        case pmtInterval = "pmtInterval"
        case pmtPid = "pmtPid"
        case programNum = "programNum"
        case rateMode = "rateMode"
        case scte27Pids = "scte27Pids"
        case scte35Control = "scte35Control"
        case scte35Pid = "scte35Pid"
        case segmentationMarkers = "segmentationMarkers"
        case segmentationStyle = "segmentationStyle"
        case segmentationTime = "segmentationTime"
        case timedMetadataBehavior = "timedMetadataBehavior"
        case timedMetadataPid = "timedMetadataPid"
        case transportStreamId = "transportStreamId"
        case videoPid = "videoPid"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let absentInputAudioBehavior = absentInputAudioBehavior {
            try encodeContainer.encode(absentInputAudioBehavior.rawValue, forKey: .absentInputAudioBehavior)
        }
        if let arib = arib {
            try encodeContainer.encode(arib.rawValue, forKey: .arib)
        }
        if let aribCaptionsPid = aribCaptionsPid {
            try encodeContainer.encode(aribCaptionsPid, forKey: .aribCaptionsPid)
        }
        if let aribCaptionsPidControl = aribCaptionsPidControl {
            try encodeContainer.encode(aribCaptionsPidControl.rawValue, forKey: .aribCaptionsPidControl)
        }
        if let audioBufferModel = audioBufferModel {
            try encodeContainer.encode(audioBufferModel.rawValue, forKey: .audioBufferModel)
        }
        if audioFramesPerPes != 0 {
            try encodeContainer.encode(audioFramesPerPes, forKey: .audioFramesPerPes)
        }
        if let audioPids = audioPids {
            try encodeContainer.encode(audioPids, forKey: .audioPids)
        }
        if let audioStreamType = audioStreamType {
            try encodeContainer.encode(audioStreamType.rawValue, forKey: .audioStreamType)
        }
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bufferModel = bufferModel {
            try encodeContainer.encode(bufferModel.rawValue, forKey: .bufferModel)
        }
        if let ccDescriptor = ccDescriptor {
            try encodeContainer.encode(ccDescriptor.rawValue, forKey: .ccDescriptor)
        }
        if let dvbNitSettings = dvbNitSettings {
            try encodeContainer.encode(dvbNitSettings, forKey: .dvbNitSettings)
        }
        if let dvbSdtSettings = dvbSdtSettings {
            try encodeContainer.encode(dvbSdtSettings, forKey: .dvbSdtSettings)
        }
        if let dvbSubPids = dvbSubPids {
            try encodeContainer.encode(dvbSubPids, forKey: .dvbSubPids)
        }
        if let dvbTdtSettings = dvbTdtSettings {
            try encodeContainer.encode(dvbTdtSettings, forKey: .dvbTdtSettings)
        }
        if let dvbTeletextPid = dvbTeletextPid {
            try encodeContainer.encode(dvbTeletextPid, forKey: .dvbTeletextPid)
        }
        if let ebif = ebif {
            try encodeContainer.encode(ebif.rawValue, forKey: .ebif)
        }
        if let ebpAudioInterval = ebpAudioInterval {
            try encodeContainer.encode(ebpAudioInterval.rawValue, forKey: .ebpAudioInterval)
        }
        if ebpLookaheadMs != 0 {
            try encodeContainer.encode(ebpLookaheadMs, forKey: .ebpLookaheadMs)
        }
        if let ebpPlacement = ebpPlacement {
            try encodeContainer.encode(ebpPlacement.rawValue, forKey: .ebpPlacement)
        }
        if let ecmPid = ecmPid {
            try encodeContainer.encode(ecmPid, forKey: .ecmPid)
        }
        if let esRateInPes = esRateInPes {
            try encodeContainer.encode(esRateInPes.rawValue, forKey: .esRateInPes)
        }
        if let etvPlatformPid = etvPlatformPid {
            try encodeContainer.encode(etvPlatformPid, forKey: .etvPlatformPid)
        }
        if let etvSignalPid = etvSignalPid {
            try encodeContainer.encode(etvSignalPid, forKey: .etvSignalPid)
        }
        if fragmentTime != 0.0 {
            try encodeContainer.encode(fragmentTime, forKey: .fragmentTime)
        }
        if let klv = klv {
            try encodeContainer.encode(klv.rawValue, forKey: .klv)
        }
        if let klvDataPids = klvDataPids {
            try encodeContainer.encode(klvDataPids, forKey: .klvDataPids)
        }
        if let nielsenId3Behavior = nielsenId3Behavior {
            try encodeContainer.encode(nielsenId3Behavior.rawValue, forKey: .nielsenId3Behavior)
        }
        if nullPacketBitrate != 0.0 {
            try encodeContainer.encode(nullPacketBitrate, forKey: .nullPacketBitrate)
        }
        if patInterval != 0 {
            try encodeContainer.encode(patInterval, forKey: .patInterval)
        }
        if let pcrControl = pcrControl {
            try encodeContainer.encode(pcrControl.rawValue, forKey: .pcrControl)
        }
        if pcrPeriod != 0 {
            try encodeContainer.encode(pcrPeriod, forKey: .pcrPeriod)
        }
        if let pcrPid = pcrPid {
            try encodeContainer.encode(pcrPid, forKey: .pcrPid)
        }
        if pmtInterval != 0 {
            try encodeContainer.encode(pmtInterval, forKey: .pmtInterval)
        }
        if let pmtPid = pmtPid {
            try encodeContainer.encode(pmtPid, forKey: .pmtPid)
        }
        if programNum != 0 {
            try encodeContainer.encode(programNum, forKey: .programNum)
        }
        if let rateMode = rateMode {
            try encodeContainer.encode(rateMode.rawValue, forKey: .rateMode)
        }
        if let scte27Pids = scte27Pids {
            try encodeContainer.encode(scte27Pids, forKey: .scte27Pids)
        }
        if let scte35Control = scte35Control {
            try encodeContainer.encode(scte35Control.rawValue, forKey: .scte35Control)
        }
        if let scte35Pid = scte35Pid {
            try encodeContainer.encode(scte35Pid, forKey: .scte35Pid)
        }
        if let segmentationMarkers = segmentationMarkers {
            try encodeContainer.encode(segmentationMarkers.rawValue, forKey: .segmentationMarkers)
        }
        if let segmentationStyle = segmentationStyle {
            try encodeContainer.encode(segmentationStyle.rawValue, forKey: .segmentationStyle)
        }
        if segmentationTime != 0.0 {
            try encodeContainer.encode(segmentationTime, forKey: .segmentationTime)
        }
        if let timedMetadataBehavior = timedMetadataBehavior {
            try encodeContainer.encode(timedMetadataBehavior.rawValue, forKey: .timedMetadataBehavior)
        }
        if let timedMetadataPid = timedMetadataPid {
            try encodeContainer.encode(timedMetadataPid, forKey: .timedMetadataPid)
        }
        if transportStreamId != 0 {
            try encodeContainer.encode(transportStreamId, forKey: .transportStreamId)
        }
        if let videoPid = videoPid {
            try encodeContainer.encode(videoPid, forKey: .videoPid)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let absentInputAudioBehaviorDecoded = try containerValues.decodeIfPresent(M2tsAbsentInputAudioBehavior.self, forKey: .absentInputAudioBehavior)
        absentInputAudioBehavior = absentInputAudioBehaviorDecoded
        let aribDecoded = try containerValues.decodeIfPresent(M2tsArib.self, forKey: .arib)
        arib = aribDecoded
        let aribCaptionsPidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aribCaptionsPid)
        aribCaptionsPid = aribCaptionsPidDecoded
        let aribCaptionsPidControlDecoded = try containerValues.decodeIfPresent(M2tsAribCaptionsPidControl.self, forKey: .aribCaptionsPidControl)
        aribCaptionsPidControl = aribCaptionsPidControlDecoded
        let audioBufferModelDecoded = try containerValues.decodeIfPresent(M2tsAudioBufferModel.self, forKey: .audioBufferModel)
        audioBufferModel = audioBufferModelDecoded
        let audioFramesPerPesDecoded = try containerValues.decode(Int.self, forKey: .audioFramesPerPes)
        audioFramesPerPes = audioFramesPerPesDecoded
        let audioPidsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioPids)
        audioPids = audioPidsDecoded
        let audioStreamTypeDecoded = try containerValues.decodeIfPresent(M2tsAudioStreamType.self, forKey: .audioStreamType)
        audioStreamType = audioStreamTypeDecoded
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bufferModelDecoded = try containerValues.decodeIfPresent(M2tsBufferModel.self, forKey: .bufferModel)
        bufferModel = bufferModelDecoded
        let ccDescriptorDecoded = try containerValues.decodeIfPresent(M2tsCcDescriptor.self, forKey: .ccDescriptor)
        ccDescriptor = ccDescriptorDecoded
        let dvbNitSettingsDecoded = try containerValues.decodeIfPresent(DvbNitSettings.self, forKey: .dvbNitSettings)
        dvbNitSettings = dvbNitSettingsDecoded
        let dvbSdtSettingsDecoded = try containerValues.decodeIfPresent(DvbSdtSettings.self, forKey: .dvbSdtSettings)
        dvbSdtSettings = dvbSdtSettingsDecoded
        let dvbSubPidsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dvbSubPids)
        dvbSubPids = dvbSubPidsDecoded
        let dvbTdtSettingsDecoded = try containerValues.decodeIfPresent(DvbTdtSettings.self, forKey: .dvbTdtSettings)
        dvbTdtSettings = dvbTdtSettingsDecoded
        let dvbTeletextPidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dvbTeletextPid)
        dvbTeletextPid = dvbTeletextPidDecoded
        let ebifDecoded = try containerValues.decodeIfPresent(M2tsEbifControl.self, forKey: .ebif)
        ebif = ebifDecoded
        let ebpAudioIntervalDecoded = try containerValues.decodeIfPresent(M2tsAudioInterval.self, forKey: .ebpAudioInterval)
        ebpAudioInterval = ebpAudioIntervalDecoded
        let ebpLookaheadMsDecoded = try containerValues.decode(Int.self, forKey: .ebpLookaheadMs)
        ebpLookaheadMs = ebpLookaheadMsDecoded
        let ebpPlacementDecoded = try containerValues.decodeIfPresent(M2tsEbpPlacement.self, forKey: .ebpPlacement)
        ebpPlacement = ebpPlacementDecoded
        let ecmPidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ecmPid)
        ecmPid = ecmPidDecoded
        let esRateInPesDecoded = try containerValues.decodeIfPresent(M2tsEsRateInPes.self, forKey: .esRateInPes)
        esRateInPes = esRateInPesDecoded
        let etvPlatformPidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .etvPlatformPid)
        etvPlatformPid = etvPlatformPidDecoded
        let etvSignalPidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .etvSignalPid)
        etvSignalPid = etvSignalPidDecoded
        let fragmentTimeDecoded = try containerValues.decode(Double.self, forKey: .fragmentTime)
        fragmentTime = fragmentTimeDecoded
        let klvDecoded = try containerValues.decodeIfPresent(M2tsKlv.self, forKey: .klv)
        klv = klvDecoded
        let klvDataPidsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .klvDataPids)
        klvDataPids = klvDataPidsDecoded
        let nielsenId3BehaviorDecoded = try containerValues.decodeIfPresent(M2tsNielsenId3Behavior.self, forKey: .nielsenId3Behavior)
        nielsenId3Behavior = nielsenId3BehaviorDecoded
        let nullPacketBitrateDecoded = try containerValues.decode(Double.self, forKey: .nullPacketBitrate)
        nullPacketBitrate = nullPacketBitrateDecoded
        let patIntervalDecoded = try containerValues.decode(Int.self, forKey: .patInterval)
        patInterval = patIntervalDecoded
        let pcrControlDecoded = try containerValues.decodeIfPresent(M2tsPcrControl.self, forKey: .pcrControl)
        pcrControl = pcrControlDecoded
        let pcrPeriodDecoded = try containerValues.decode(Int.self, forKey: .pcrPeriod)
        pcrPeriod = pcrPeriodDecoded
        let pcrPidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pcrPid)
        pcrPid = pcrPidDecoded
        let pmtIntervalDecoded = try containerValues.decode(Int.self, forKey: .pmtInterval)
        pmtInterval = pmtIntervalDecoded
        let pmtPidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pmtPid)
        pmtPid = pmtPidDecoded
        let programNumDecoded = try containerValues.decode(Int.self, forKey: .programNum)
        programNum = programNumDecoded
        let rateModeDecoded = try containerValues.decodeIfPresent(M2tsRateMode.self, forKey: .rateMode)
        rateMode = rateModeDecoded
        let scte27PidsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scte27Pids)
        scte27Pids = scte27PidsDecoded
        let scte35ControlDecoded = try containerValues.decodeIfPresent(M2tsScte35Control.self, forKey: .scte35Control)
        scte35Control = scte35ControlDecoded
        let scte35PidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scte35Pid)
        scte35Pid = scte35PidDecoded
        let segmentationMarkersDecoded = try containerValues.decodeIfPresent(M2tsSegmentationMarkers.self, forKey: .segmentationMarkers)
        segmentationMarkers = segmentationMarkersDecoded
        let segmentationStyleDecoded = try containerValues.decodeIfPresent(M2tsSegmentationStyle.self, forKey: .segmentationStyle)
        segmentationStyle = segmentationStyleDecoded
        let segmentationTimeDecoded = try containerValues.decode(Double.self, forKey: .segmentationTime)
        segmentationTime = segmentationTimeDecoded
        let timedMetadataBehaviorDecoded = try containerValues.decodeIfPresent(M2tsTimedMetadataBehavior.self, forKey: .timedMetadataBehavior)
        timedMetadataBehavior = timedMetadataBehaviorDecoded
        let timedMetadataPidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timedMetadataPid)
        timedMetadataPid = timedMetadataPidDecoded
        let transportStreamIdDecoded = try containerValues.decode(Int.self, forKey: .transportStreamId)
        transportStreamId = transportStreamIdDecoded
        let videoPidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .videoPid)
        videoPid = videoPidDecoded
    }
}

extension M2tsSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "M2tsSettings(absentInputAudioBehavior: \(String(describing: absentInputAudioBehavior)), arib: \(String(describing: arib)), aribCaptionsPid: \(String(describing: aribCaptionsPid)), aribCaptionsPidControl: \(String(describing: aribCaptionsPidControl)), audioBufferModel: \(String(describing: audioBufferModel)), audioFramesPerPes: \(String(describing: audioFramesPerPes)), audioPids: \(String(describing: audioPids)), audioStreamType: \(String(describing: audioStreamType)), bitrate: \(String(describing: bitrate)), bufferModel: \(String(describing: bufferModel)), ccDescriptor: \(String(describing: ccDescriptor)), dvbNitSettings: \(String(describing: dvbNitSettings)), dvbSdtSettings: \(String(describing: dvbSdtSettings)), dvbSubPids: \(String(describing: dvbSubPids)), dvbTdtSettings: \(String(describing: dvbTdtSettings)), dvbTeletextPid: \(String(describing: dvbTeletextPid)), ebif: \(String(describing: ebif)), ebpAudioInterval: \(String(describing: ebpAudioInterval)), ebpLookaheadMs: \(String(describing: ebpLookaheadMs)), ebpPlacement: \(String(describing: ebpPlacement)), ecmPid: \(String(describing: ecmPid)), esRateInPes: \(String(describing: esRateInPes)), etvPlatformPid: \(String(describing: etvPlatformPid)), etvSignalPid: \(String(describing: etvSignalPid)), fragmentTime: \(String(describing: fragmentTime)), klv: \(String(describing: klv)), klvDataPids: \(String(describing: klvDataPids)), nielsenId3Behavior: \(String(describing: nielsenId3Behavior)), nullPacketBitrate: \(String(describing: nullPacketBitrate)), patInterval: \(String(describing: patInterval)), pcrControl: \(String(describing: pcrControl)), pcrPeriod: \(String(describing: pcrPeriod)), pcrPid: \(String(describing: pcrPid)), pmtInterval: \(String(describing: pmtInterval)), pmtPid: \(String(describing: pmtPid)), programNum: \(String(describing: programNum)), rateMode: \(String(describing: rateMode)), scte27Pids: \(String(describing: scte27Pids)), scte35Control: \(String(describing: scte35Control)), scte35Pid: \(String(describing: scte35Pid)), segmentationMarkers: \(String(describing: segmentationMarkers)), segmentationStyle: \(String(describing: segmentationStyle)), segmentationTime: \(String(describing: segmentationTime)), timedMetadataBehavior: \(String(describing: timedMetadataBehavior)), timedMetadataPid: \(String(describing: timedMetadataPid)), transportStreamId: \(String(describing: transportStreamId)), videoPid: \(String(describing: videoPid)))"}
}

/// M2ts Settings
public struct M2tsSettings: Equatable {
    /// When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
    public let absentInputAudioBehavior: M2tsAbsentInputAudioBehavior?
    /// When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
    public let arib: M2tsArib?
    /// Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    public let aribCaptionsPid: String?
    /// If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids.  If set to useConfigured, ARIB Captions will be on the configured pid number.
    public let aribCaptionsPidControl: M2tsAribCaptionsPidControl?
    /// When set to dvb, uses DVB buffer model for Dolby Digital audio.  When set to atsc, the ATSC model is used.
    public let audioBufferModel: M2tsAudioBufferModel?
    /// The number of audio frames to insert for each PES packet.
    public let audioFramesPerPes: Int
    /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    public let audioPids: String?
    /// When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
    public let audioStreamType: M2tsAudioStreamType?
    /// The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
    public let bitrate: Int
    /// Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
    public let bufferModel: M2tsBufferModel?
    /// When set to enabled, generates captionServiceDescriptor in PMT.
    public let ccDescriptor: M2tsCcDescriptor?
    /// Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
    public let dvbNitSettings: DvbNitSettings?
    /// Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
    public let dvbSdtSettings: DvbSdtSettings?
    /// Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.  Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    public let dvbSubPids: String?
    /// Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
    public let dvbTdtSettings: DvbTdtSettings?
    /// Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    public let dvbTeletextPid: String?
    /// If set to passthrough, passes any EBIF data from the input source to this output.
    public let ebif: M2tsEbifControl?
    /// When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected.  Partitions 1 and 2 will always follow the video interval.
    public let ebpAudioInterval: M2tsAudioInterval?
    /// When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker.  The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
    public let ebpLookaheadMs: Int
    /// Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs.  If set to videoPid, EBP markers will be placed on only the video PID.
    public let ebpPlacement: M2tsEbpPlacement?
    /// This field is unused and deprecated.
    public let ecmPid: String?
    /// Include or exclude the ES Rate field in the PES header.
    public let esRateInPes: M2tsEsRateInPes?
    /// Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    public let etvPlatformPid: String?
    /// Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    public let etvSignalPid: String?
    /// The length in seconds of each fragment. Only used with EBP markers.
    public let fragmentTime: Double
    /// If set to passthrough, passes any KLV data from the input source to this output.
    public let klv: M2tsKlv?
    /// Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.  Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    public let klvDataPids: String?
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    public let nielsenId3Behavior: M2tsNielsenId3Behavior?
    /// Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
    public let nullPacketBitrate: Double
    /// The number of milliseconds between instances of this table in the output transport stream.  Valid values are 0, 10..1000.
    public let patInterval: Int
    /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    public let pcrControl: M2tsPcrControl?
    /// Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
    public let pcrPeriod: Int
    /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    public let pcrPid: String?
    /// The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
    public let pmtInterval: Int
    /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    public let pmtPid: String?
    /// The value of the program number field in the Program Map Table.
    public let programNum: Int
    /// When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
    public let rateMode: M2tsRateMode?
    /// Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.  Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    public let scte27Pids: String?
    /// Optionally pass SCTE-35 signals from the input source to this output.
    public let scte35Control: M2tsScte35Control?
    /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    public let scte35Pid: String?
    /// Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
    public let segmentationMarkers: M2tsSegmentationMarkers?
    /// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted.
    ///
    /// When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds.
    ///
    /// When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
    public let segmentationStyle: M2tsSegmentationStyle?
    /// The length in seconds of each segment. Required unless markers is set to _none_.
    public let segmentationTime: Double
    /// When set to passthrough, timed metadata will be passed through from input to output.
    public let timedMetadataBehavior: M2tsTimedMetadataBehavior?
    /// Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    public let timedMetadataPid: String?
    /// The value of the transport stream ID field in the Program Map Table.
    public let transportStreamId: Int
    /// Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    public let videoPid: String?

    public init (
        absentInputAudioBehavior: M2tsAbsentInputAudioBehavior? = nil,
        arib: M2tsArib? = nil,
        aribCaptionsPid: String? = nil,
        aribCaptionsPidControl: M2tsAribCaptionsPidControl? = nil,
        audioBufferModel: M2tsAudioBufferModel? = nil,
        audioFramesPerPes: Int = 0,
        audioPids: String? = nil,
        audioStreamType: M2tsAudioStreamType? = nil,
        bitrate: Int = 0,
        bufferModel: M2tsBufferModel? = nil,
        ccDescriptor: M2tsCcDescriptor? = nil,
        dvbNitSettings: DvbNitSettings? = nil,
        dvbSdtSettings: DvbSdtSettings? = nil,
        dvbSubPids: String? = nil,
        dvbTdtSettings: DvbTdtSettings? = nil,
        dvbTeletextPid: String? = nil,
        ebif: M2tsEbifControl? = nil,
        ebpAudioInterval: M2tsAudioInterval? = nil,
        ebpLookaheadMs: Int = 0,
        ebpPlacement: M2tsEbpPlacement? = nil,
        ecmPid: String? = nil,
        esRateInPes: M2tsEsRateInPes? = nil,
        etvPlatformPid: String? = nil,
        etvSignalPid: String? = nil,
        fragmentTime: Double = 0.0,
        klv: M2tsKlv? = nil,
        klvDataPids: String? = nil,
        nielsenId3Behavior: M2tsNielsenId3Behavior? = nil,
        nullPacketBitrate: Double = 0.0,
        patInterval: Int = 0,
        pcrControl: M2tsPcrControl? = nil,
        pcrPeriod: Int = 0,
        pcrPid: String? = nil,
        pmtInterval: Int = 0,
        pmtPid: String? = nil,
        programNum: Int = 0,
        rateMode: M2tsRateMode? = nil,
        scte27Pids: String? = nil,
        scte35Control: M2tsScte35Control? = nil,
        scte35Pid: String? = nil,
        segmentationMarkers: M2tsSegmentationMarkers? = nil,
        segmentationStyle: M2tsSegmentationStyle? = nil,
        segmentationTime: Double = 0.0,
        timedMetadataBehavior: M2tsTimedMetadataBehavior? = nil,
        timedMetadataPid: String? = nil,
        transportStreamId: Int = 0,
        videoPid: String? = nil
    )
    {
        self.absentInputAudioBehavior = absentInputAudioBehavior
        self.arib = arib
        self.aribCaptionsPid = aribCaptionsPid
        self.aribCaptionsPidControl = aribCaptionsPidControl
        self.audioBufferModel = audioBufferModel
        self.audioFramesPerPes = audioFramesPerPes
        self.audioPids = audioPids
        self.audioStreamType = audioStreamType
        self.bitrate = bitrate
        self.bufferModel = bufferModel
        self.ccDescriptor = ccDescriptor
        self.dvbNitSettings = dvbNitSettings
        self.dvbSdtSettings = dvbSdtSettings
        self.dvbSubPids = dvbSubPids
        self.dvbTdtSettings = dvbTdtSettings
        self.dvbTeletextPid = dvbTeletextPid
        self.ebif = ebif
        self.ebpAudioInterval = ebpAudioInterval
        self.ebpLookaheadMs = ebpLookaheadMs
        self.ebpPlacement = ebpPlacement
        self.ecmPid = ecmPid
        self.esRateInPes = esRateInPes
        self.etvPlatformPid = etvPlatformPid
        self.etvSignalPid = etvSignalPid
        self.fragmentTime = fragmentTime
        self.klv = klv
        self.klvDataPids = klvDataPids
        self.nielsenId3Behavior = nielsenId3Behavior
        self.nullPacketBitrate = nullPacketBitrate
        self.patInterval = patInterval
        self.pcrControl = pcrControl
        self.pcrPeriod = pcrPeriod
        self.pcrPid = pcrPid
        self.pmtInterval = pmtInterval
        self.pmtPid = pmtPid
        self.programNum = programNum
        self.rateMode = rateMode
        self.scte27Pids = scte27Pids
        self.scte35Control = scte35Control
        self.scte35Pid = scte35Pid
        self.segmentationMarkers = segmentationMarkers
        self.segmentationStyle = segmentationStyle
        self.segmentationTime = segmentationTime
        self.timedMetadataBehavior = timedMetadataBehavior
        self.timedMetadataPid = timedMetadataPid
        self.transportStreamId = transportStreamId
        self.videoPid = videoPid
    }
}

/// M2ts Timed Metadata Behavior
public enum M2tsTimedMetadataBehavior {
    case noPassthrough
    case passthrough
    case sdkUnknown(String)
}

extension M2tsTimedMetadataBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsTimedMetadataBehavior] {
        return [
            .noPassthrough,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noPassthrough: return "NO_PASSTHROUGH"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsTimedMetadataBehavior(rawValue: rawValue) ?? M2tsTimedMetadataBehavior.sdkUnknown(rawValue)
    }
}

/// M3u8 Nielsen Id3 Behavior
public enum M3u8NielsenId3Behavior {
    case noPassthrough
    case passthrough
    case sdkUnknown(String)
}

extension M3u8NielsenId3Behavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M3u8NielsenId3Behavior] {
        return [
            .noPassthrough,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noPassthrough: return "NO_PASSTHROUGH"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M3u8NielsenId3Behavior(rawValue: rawValue) ?? M3u8NielsenId3Behavior.sdkUnknown(rawValue)
    }
}

/// M3u8 Pcr Control
public enum M3u8PcrControl {
    case configuredPcrPeriod
    case pcrEveryPesPacket
    case sdkUnknown(String)
}

extension M3u8PcrControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M3u8PcrControl] {
        return [
            .configuredPcrPeriod,
            .pcrEveryPesPacket,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .configuredPcrPeriod: return "CONFIGURED_PCR_PERIOD"
        case .pcrEveryPesPacket: return "PCR_EVERY_PES_PACKET"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M3u8PcrControl(rawValue: rawValue) ?? M3u8PcrControl.sdkUnknown(rawValue)
    }
}

/// M3u8 Scte35 Behavior
public enum M3u8Scte35Behavior {
    case noPassthrough
    case passthrough
    case sdkUnknown(String)
}

extension M3u8Scte35Behavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M3u8Scte35Behavior] {
        return [
            .noPassthrough,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noPassthrough: return "NO_PASSTHROUGH"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M3u8Scte35Behavior(rawValue: rawValue) ?? M3u8Scte35Behavior.sdkUnknown(rawValue)
    }
}

extension M3u8Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioFramesPerPes = "audioFramesPerPes"
        case audioPids = "audioPids"
        case ecmPid = "ecmPid"
        case nielsenId3Behavior = "nielsenId3Behavior"
        case patInterval = "patInterval"
        case pcrControl = "pcrControl"
        case pcrPeriod = "pcrPeriod"
        case pcrPid = "pcrPid"
        case pmtInterval = "pmtInterval"
        case pmtPid = "pmtPid"
        case programNum = "programNum"
        case scte35Behavior = "scte35Behavior"
        case scte35Pid = "scte35Pid"
        case timedMetadataBehavior = "timedMetadataBehavior"
        case timedMetadataPid = "timedMetadataPid"
        case transportStreamId = "transportStreamId"
        case videoPid = "videoPid"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if audioFramesPerPes != 0 {
            try encodeContainer.encode(audioFramesPerPes, forKey: .audioFramesPerPes)
        }
        if let audioPids = audioPids {
            try encodeContainer.encode(audioPids, forKey: .audioPids)
        }
        if let ecmPid = ecmPid {
            try encodeContainer.encode(ecmPid, forKey: .ecmPid)
        }
        if let nielsenId3Behavior = nielsenId3Behavior {
            try encodeContainer.encode(nielsenId3Behavior.rawValue, forKey: .nielsenId3Behavior)
        }
        if patInterval != 0 {
            try encodeContainer.encode(patInterval, forKey: .patInterval)
        }
        if let pcrControl = pcrControl {
            try encodeContainer.encode(pcrControl.rawValue, forKey: .pcrControl)
        }
        if pcrPeriod != 0 {
            try encodeContainer.encode(pcrPeriod, forKey: .pcrPeriod)
        }
        if let pcrPid = pcrPid {
            try encodeContainer.encode(pcrPid, forKey: .pcrPid)
        }
        if pmtInterval != 0 {
            try encodeContainer.encode(pmtInterval, forKey: .pmtInterval)
        }
        if let pmtPid = pmtPid {
            try encodeContainer.encode(pmtPid, forKey: .pmtPid)
        }
        if programNum != 0 {
            try encodeContainer.encode(programNum, forKey: .programNum)
        }
        if let scte35Behavior = scte35Behavior {
            try encodeContainer.encode(scte35Behavior.rawValue, forKey: .scte35Behavior)
        }
        if let scte35Pid = scte35Pid {
            try encodeContainer.encode(scte35Pid, forKey: .scte35Pid)
        }
        if let timedMetadataBehavior = timedMetadataBehavior {
            try encodeContainer.encode(timedMetadataBehavior.rawValue, forKey: .timedMetadataBehavior)
        }
        if let timedMetadataPid = timedMetadataPid {
            try encodeContainer.encode(timedMetadataPid, forKey: .timedMetadataPid)
        }
        if transportStreamId != 0 {
            try encodeContainer.encode(transportStreamId, forKey: .transportStreamId)
        }
        if let videoPid = videoPid {
            try encodeContainer.encode(videoPid, forKey: .videoPid)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioFramesPerPesDecoded = try containerValues.decode(Int.self, forKey: .audioFramesPerPes)
        audioFramesPerPes = audioFramesPerPesDecoded
        let audioPidsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioPids)
        audioPids = audioPidsDecoded
        let ecmPidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ecmPid)
        ecmPid = ecmPidDecoded
        let nielsenId3BehaviorDecoded = try containerValues.decodeIfPresent(M3u8NielsenId3Behavior.self, forKey: .nielsenId3Behavior)
        nielsenId3Behavior = nielsenId3BehaviorDecoded
        let patIntervalDecoded = try containerValues.decode(Int.self, forKey: .patInterval)
        patInterval = patIntervalDecoded
        let pcrControlDecoded = try containerValues.decodeIfPresent(M3u8PcrControl.self, forKey: .pcrControl)
        pcrControl = pcrControlDecoded
        let pcrPeriodDecoded = try containerValues.decode(Int.self, forKey: .pcrPeriod)
        pcrPeriod = pcrPeriodDecoded
        let pcrPidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pcrPid)
        pcrPid = pcrPidDecoded
        let pmtIntervalDecoded = try containerValues.decode(Int.self, forKey: .pmtInterval)
        pmtInterval = pmtIntervalDecoded
        let pmtPidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pmtPid)
        pmtPid = pmtPidDecoded
        let programNumDecoded = try containerValues.decode(Int.self, forKey: .programNum)
        programNum = programNumDecoded
        let scte35BehaviorDecoded = try containerValues.decodeIfPresent(M3u8Scte35Behavior.self, forKey: .scte35Behavior)
        scte35Behavior = scte35BehaviorDecoded
        let scte35PidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scte35Pid)
        scte35Pid = scte35PidDecoded
        let timedMetadataBehaviorDecoded = try containerValues.decodeIfPresent(M3u8TimedMetadataBehavior.self, forKey: .timedMetadataBehavior)
        timedMetadataBehavior = timedMetadataBehaviorDecoded
        let timedMetadataPidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timedMetadataPid)
        timedMetadataPid = timedMetadataPidDecoded
        let transportStreamIdDecoded = try containerValues.decode(Int.self, forKey: .transportStreamId)
        transportStreamId = transportStreamIdDecoded
        let videoPidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .videoPid)
        videoPid = videoPidDecoded
    }
}

extension M3u8Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "M3u8Settings(audioFramesPerPes: \(String(describing: audioFramesPerPes)), audioPids: \(String(describing: audioPids)), ecmPid: \(String(describing: ecmPid)), nielsenId3Behavior: \(String(describing: nielsenId3Behavior)), patInterval: \(String(describing: patInterval)), pcrControl: \(String(describing: pcrControl)), pcrPeriod: \(String(describing: pcrPeriod)), pcrPid: \(String(describing: pcrPid)), pmtInterval: \(String(describing: pmtInterval)), pmtPid: \(String(describing: pmtPid)), programNum: \(String(describing: programNum)), scte35Behavior: \(String(describing: scte35Behavior)), scte35Pid: \(String(describing: scte35Pid)), timedMetadataBehavior: \(String(describing: timedMetadataBehavior)), timedMetadataPid: \(String(describing: timedMetadataPid)), transportStreamId: \(String(describing: transportStreamId)), videoPid: \(String(describing: videoPid)))"}
}

/// Settings information for the .m3u8 container
public struct M3u8Settings: Equatable {
    /// The number of audio frames to insert for each PES packet.
    public let audioFramesPerPes: Int
    /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.
    public let audioPids: String?
    /// This parameter is unused and deprecated.
    public let ecmPid: String?
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    public let nielsenId3Behavior: M3u8NielsenId3Behavior?
    /// The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
    public let patInterval: Int
    /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    public let pcrControl: M3u8PcrControl?
    /// Maximum time in milliseconds between Program Clock References (PCRs) inserted into the transport stream.
    public let pcrPeriod: Int
    /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.
    public let pcrPid: String?
    /// The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
    public let pmtInterval: Int
    /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
    public let pmtPid: String?
    /// The value of the program number field in the Program Map Table.
    public let programNum: Int
    /// If set to passthrough, passes any SCTE-35 signals from the input source to this output.
    public let scte35Behavior: M3u8Scte35Behavior?
    /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.
    public let scte35Pid: String?
    /// When set to passthrough, timed metadata is passed through from input to output.
    public let timedMetadataBehavior: M3u8TimedMetadataBehavior?
    /// Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    public let timedMetadataPid: String?
    /// The value of the transport stream ID field in the Program Map Table.
    public let transportStreamId: Int
    /// Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.
    public let videoPid: String?

    public init (
        audioFramesPerPes: Int = 0,
        audioPids: String? = nil,
        ecmPid: String? = nil,
        nielsenId3Behavior: M3u8NielsenId3Behavior? = nil,
        patInterval: Int = 0,
        pcrControl: M3u8PcrControl? = nil,
        pcrPeriod: Int = 0,
        pcrPid: String? = nil,
        pmtInterval: Int = 0,
        pmtPid: String? = nil,
        programNum: Int = 0,
        scte35Behavior: M3u8Scte35Behavior? = nil,
        scte35Pid: String? = nil,
        timedMetadataBehavior: M3u8TimedMetadataBehavior? = nil,
        timedMetadataPid: String? = nil,
        transportStreamId: Int = 0,
        videoPid: String? = nil
    )
    {
        self.audioFramesPerPes = audioFramesPerPes
        self.audioPids = audioPids
        self.ecmPid = ecmPid
        self.nielsenId3Behavior = nielsenId3Behavior
        self.patInterval = patInterval
        self.pcrControl = pcrControl
        self.pcrPeriod = pcrPeriod
        self.pcrPid = pcrPid
        self.pmtInterval = pmtInterval
        self.pmtPid = pmtPid
        self.programNum = programNum
        self.scte35Behavior = scte35Behavior
        self.scte35Pid = scte35Pid
        self.timedMetadataBehavior = timedMetadataBehavior
        self.timedMetadataPid = timedMetadataPid
        self.transportStreamId = transportStreamId
        self.videoPid = videoPid
    }
}

/// M3u8 Timed Metadata Behavior
public enum M3u8TimedMetadataBehavior {
    case noPassthrough
    case passthrough
    case sdkUnknown(String)
}

extension M3u8TimedMetadataBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M3u8TimedMetadataBehavior] {
        return [
            .noPassthrough,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noPassthrough: return "NO_PASSTHROUGH"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M3u8TimedMetadataBehavior(rawValue: rawValue) ?? M3u8TimedMetadataBehavior.sdkUnknown(rawValue)
    }
}

extension MediaConnectFlow: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case flowArn = "flowArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let flowArn = flowArn {
            try encodeContainer.encode(flowArn, forKey: .flowArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flowArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .flowArn)
        flowArn = flowArnDecoded
    }
}

extension MediaConnectFlow: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MediaConnectFlow(flowArn: \(String(describing: flowArn)))"}
}

/// The settings for a MediaConnect Flow.
public struct MediaConnectFlow: Equatable {
    /// The unique ARN of the MediaConnect Flow being used as a source.
    public let flowArn: String?

    public init (
        flowArn: String? = nil
    )
    {
        self.flowArn = flowArn
    }
}

extension MediaConnectFlowRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case flowArn = "flowArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let flowArn = flowArn {
            try encodeContainer.encode(flowArn, forKey: .flowArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flowArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .flowArn)
        flowArn = flowArnDecoded
    }
}

extension MediaConnectFlowRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MediaConnectFlowRequest(flowArn: \(String(describing: flowArn)))"}
}

/// The settings for a MediaConnect Flow.
public struct MediaConnectFlowRequest: Equatable {
    /// The ARN of the MediaConnect Flow that you want to use as a source.
    public let flowArn: String?

    public init (
        flowArn: String? = nil
    )
    {
        self.flowArn = flowArn
    }
}

extension MediaPackageGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destination = "destination"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
    }
}

extension MediaPackageGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MediaPackageGroupSettings(destination: \(String(describing: destination)))"}
}

/// Media Package Group Settings
public struct MediaPackageGroupSettings: Equatable {
    /// MediaPackage channel destination.
    public let destination: OutputLocationRef?

    public init (
        destination: OutputLocationRef? = nil
    )
    {
        self.destination = destination
    }
}

extension MediaPackageOutputDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelId = "channelId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelId = channelId {
            try encodeContainer.encode(channelId, forKey: .channelId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .channelId)
        channelId = channelIdDecoded
    }
}

extension MediaPackageOutputDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MediaPackageOutputDestinationSettings(channelId: \(String(describing: channelId)))"}
}

/// MediaPackage Output Destination Settings
public struct MediaPackageOutputDestinationSettings: Equatable {
    /// ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.
    public let channelId: String?

    public init (
        channelId: String? = nil
    )
    {
        self.channelId = channelId
    }
}

extension MediaPackageOutputSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension MediaPackageOutputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MediaPackageOutputSettings()"}
}

/// Media Package Output Settings
public struct MediaPackageOutputSettings: Equatable {

    public init() {}
}

extension MotionGraphicsActivateScheduleActionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case duration = "duration"
        case passwordParam = "passwordParam"
        case url = "url"
        case username = "username"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let passwordParam = passwordParam {
            try encodeContainer.encode(passwordParam, forKey: .passwordParam)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let passwordParamDecoded = try containerValues.decodeIfPresent(String.self, forKey: .passwordParam)
        passwordParam = passwordParamDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension MotionGraphicsActivateScheduleActionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MotionGraphicsActivateScheduleActionSettings(duration: \(String(describing: duration)), passwordParam: \(String(describing: passwordParam)), url: \(String(describing: url)), username: \(String(describing: username)))"}
}

/// Settings to specify the rendering of motion graphics into the video stream.
public struct MotionGraphicsActivateScheduleActionSettings: Equatable {
    /// Duration (in milliseconds) that motion graphics should render on to the video stream. Leaving out this property or setting to 0 will result in rendering continuing until a deactivate action is processed.
    public let duration: Int
    /// Key used to extract the password from EC2 Parameter store
    public let passwordParam: String?
    /// URI of the HTML5 content to be rendered into the live stream.
    public let url: String?
    /// Documentation update needed
    public let username: String?

    public init (
        duration: Int = 0,
        passwordParam: String? = nil,
        url: String? = nil,
        username: String? = nil
    )
    {
        self.duration = duration
        self.passwordParam = passwordParam
        self.url = url
        self.username = username
    }
}

extension MotionGraphicsConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case motionGraphicsInsertion = "motionGraphicsInsertion"
        case motionGraphicsSettings = "motionGraphicsSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let motionGraphicsInsertion = motionGraphicsInsertion {
            try encodeContainer.encode(motionGraphicsInsertion.rawValue, forKey: .motionGraphicsInsertion)
        }
        if let motionGraphicsSettings = motionGraphicsSettings {
            try encodeContainer.encode(motionGraphicsSettings, forKey: .motionGraphicsSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let motionGraphicsInsertionDecoded = try containerValues.decodeIfPresent(MotionGraphicsInsertion.self, forKey: .motionGraphicsInsertion)
        motionGraphicsInsertion = motionGraphicsInsertionDecoded
        let motionGraphicsSettingsDecoded = try containerValues.decodeIfPresent(MotionGraphicsSettings.self, forKey: .motionGraphicsSettings)
        motionGraphicsSettings = motionGraphicsSettingsDecoded
    }
}

extension MotionGraphicsConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MotionGraphicsConfiguration(motionGraphicsInsertion: \(String(describing: motionGraphicsInsertion)), motionGraphicsSettings: \(String(describing: motionGraphicsSettings)))"}
}

/// Motion Graphics Configuration
public struct MotionGraphicsConfiguration: Equatable {
    /// Motion Graphics Insertion
    public let motionGraphicsInsertion: MotionGraphicsInsertion?
    /// Motion Graphics Settings
    public let motionGraphicsSettings: MotionGraphicsSettings?

    public init (
        motionGraphicsInsertion: MotionGraphicsInsertion? = nil,
        motionGraphicsSettings: MotionGraphicsSettings? = nil
    )
    {
        self.motionGraphicsInsertion = motionGraphicsInsertion
        self.motionGraphicsSettings = motionGraphicsSettings
    }
}

extension MotionGraphicsDeactivateScheduleActionSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension MotionGraphicsDeactivateScheduleActionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MotionGraphicsDeactivateScheduleActionSettings()"}
}

/// Settings to specify the ending of rendering motion graphics into the video stream.
public struct MotionGraphicsDeactivateScheduleActionSettings: Equatable {

    public init() {}
}

/// Motion Graphics Insertion
public enum MotionGraphicsInsertion {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension MotionGraphicsInsertion : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MotionGraphicsInsertion] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MotionGraphicsInsertion(rawValue: rawValue) ?? MotionGraphicsInsertion.sdkUnknown(rawValue)
    }
}

extension MotionGraphicsSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case htmlMotionGraphicsSettings = "htmlMotionGraphicsSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let htmlMotionGraphicsSettings = htmlMotionGraphicsSettings {
            try encodeContainer.encode(htmlMotionGraphicsSettings, forKey: .htmlMotionGraphicsSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let htmlMotionGraphicsSettingsDecoded = try containerValues.decodeIfPresent(HtmlMotionGraphicsSettings.self, forKey: .htmlMotionGraphicsSettings)
        htmlMotionGraphicsSettings = htmlMotionGraphicsSettingsDecoded
    }
}

extension MotionGraphicsSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MotionGraphicsSettings(htmlMotionGraphicsSettings: \(String(describing: htmlMotionGraphicsSettings)))"}
}

/// Motion Graphics Settings
public struct MotionGraphicsSettings: Equatable {
    /// Html Motion Graphics Settings
    public let htmlMotionGraphicsSettings: HtmlMotionGraphicsSettings?

    public init (
        htmlMotionGraphicsSettings: HtmlMotionGraphicsSettings? = nil
    )
    {
        self.htmlMotionGraphicsSettings = htmlMotionGraphicsSettings
    }
}

/// Mp2 Coding Mode
public enum Mp2CodingMode {
    case codingMode10
    case codingMode20
    case sdkUnknown(String)
}

extension Mp2CodingMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mp2CodingMode] {
        return [
            .codingMode10,
            .codingMode20,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .codingMode10: return "CODING_MODE_1_0"
        case .codingMode20: return "CODING_MODE_2_0"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mp2CodingMode(rawValue: rawValue) ?? Mp2CodingMode.sdkUnknown(rawValue)
    }
}

extension Mp2Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitrate = "bitrate"
        case codingMode = "codingMode"
        case sampleRate = "sampleRate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitrate != 0.0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let codingMode = codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if sampleRate != 0.0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decode(Double.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(Mp2CodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let sampleRateDecoded = try containerValues.decode(Double.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
    }
}

extension Mp2Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Mp2Settings(bitrate: \(String(describing: bitrate)), codingMode: \(String(describing: codingMode)), sampleRate: \(String(describing: sampleRate)))"}
}

/// Mp2 Settings
public struct Mp2Settings: Equatable {
    /// Average bitrate in bits/second.
    public let bitrate: Double
    /// The MPEG2 Audio coding mode.  Valid values are codingMode10 (for mono) or codingMode20 (for stereo).
    public let codingMode: Mp2CodingMode?
    /// Sample rate in Hz.
    public let sampleRate: Double

    public init (
        bitrate: Double = 0.0,
        codingMode: Mp2CodingMode? = nil,
        sampleRate: Double = 0.0
    )
    {
        self.bitrate = bitrate
        self.codingMode = codingMode
        self.sampleRate = sampleRate
    }
}

/// Mpeg2 Adaptive Quantization
public enum Mpeg2AdaptiveQuantization {
    case auto
    case high
    case low
    case medium
    case off
    case sdkUnknown(String)
}

extension Mpeg2AdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2AdaptiveQuantization] {
        return [
            .auto,
            .high,
            .low,
            .medium,
            .off,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .high: return "HIGH"
        case .low: return "LOW"
        case .medium: return "MEDIUM"
        case .off: return "OFF"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2AdaptiveQuantization(rawValue: rawValue) ?? Mpeg2AdaptiveQuantization.sdkUnknown(rawValue)
    }
}

/// Mpeg2 Color Metadata
public enum Mpeg2ColorMetadata {
    case ignore
    case insert
    case sdkUnknown(String)
}

extension Mpeg2ColorMetadata : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2ColorMetadata] {
        return [
            .ignore,
            .insert,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ignore: return "IGNORE"
        case .insert: return "INSERT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2ColorMetadata(rawValue: rawValue) ?? Mpeg2ColorMetadata.sdkUnknown(rawValue)
    }
}

/// Mpeg2 Color Space
public enum Mpeg2ColorSpace {
    case auto
    case passthrough
    case sdkUnknown(String)
}

extension Mpeg2ColorSpace : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2ColorSpace] {
        return [
            .auto,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2ColorSpace(rawValue: rawValue) ?? Mpeg2ColorSpace.sdkUnknown(rawValue)
    }
}

/// Mpeg2 Display Ratio
public enum Mpeg2DisplayRatio {
    case displayratio16x9
    case displayratio4x3
    case sdkUnknown(String)
}

extension Mpeg2DisplayRatio : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2DisplayRatio] {
        return [
            .displayratio16x9,
            .displayratio4x3,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .displayratio16x9: return "DISPLAYRATIO16X9"
        case .displayratio4x3: return "DISPLAYRATIO4X3"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2DisplayRatio(rawValue: rawValue) ?? Mpeg2DisplayRatio.sdkUnknown(rawValue)
    }
}

extension Mpeg2FilterSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case temporalFilterSettings = "temporalFilterSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let temporalFilterSettings = temporalFilterSettings {
            try encodeContainer.encode(temporalFilterSettings, forKey: .temporalFilterSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let temporalFilterSettingsDecoded = try containerValues.decodeIfPresent(TemporalFilterSettings.self, forKey: .temporalFilterSettings)
        temporalFilterSettings = temporalFilterSettingsDecoded
    }
}

extension Mpeg2FilterSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Mpeg2FilterSettings(temporalFilterSettings: \(String(describing: temporalFilterSettings)))"}
}

/// Mpeg2 Filter Settings
public struct Mpeg2FilterSettings: Equatable {
    /// Temporal Filter Settings
    public let temporalFilterSettings: TemporalFilterSettings?

    public init (
        temporalFilterSettings: TemporalFilterSettings? = nil
    )
    {
        self.temporalFilterSettings = temporalFilterSettings
    }
}

/// Mpeg2 Gop Size Units
public enum Mpeg2GopSizeUnits {
    case frames
    case seconds
    case sdkUnknown(String)
}

extension Mpeg2GopSizeUnits : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2GopSizeUnits] {
        return [
            .frames,
            .seconds,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .frames: return "FRAMES"
        case .seconds: return "SECONDS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2GopSizeUnits(rawValue: rawValue) ?? Mpeg2GopSizeUnits.sdkUnknown(rawValue)
    }
}

/// Mpeg2 Scan Type
public enum Mpeg2ScanType {
    case interlaced
    case progressive
    case sdkUnknown(String)
}

extension Mpeg2ScanType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2ScanType] {
        return [
            .interlaced,
            .progressive,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .interlaced: return "INTERLACED"
        case .progressive: return "PROGRESSIVE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2ScanType(rawValue: rawValue) ?? Mpeg2ScanType.sdkUnknown(rawValue)
    }
}

extension Mpeg2Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case afdSignaling = "afdSignaling"
        case colorMetadata = "colorMetadata"
        case colorSpace = "colorSpace"
        case displayAspectRatio = "displayAspectRatio"
        case filterSettings = "filterSettings"
        case fixedAfd = "fixedAfd"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopClosedCadence = "gopClosedCadence"
        case gopNumBFrames = "gopNumBFrames"
        case gopSize = "gopSize"
        case gopSizeUnits = "gopSizeUnits"
        case scanType = "scanType"
        case subgopLength = "subgopLength"
        case timecodeInsertion = "timecodeInsertion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if let afdSignaling = afdSignaling {
            try encodeContainer.encode(afdSignaling.rawValue, forKey: .afdSignaling)
        }
        if let colorMetadata = colorMetadata {
            try encodeContainer.encode(colorMetadata.rawValue, forKey: .colorMetadata)
        }
        if let colorSpace = colorSpace {
            try encodeContainer.encode(colorSpace.rawValue, forKey: .colorSpace)
        }
        if let displayAspectRatio = displayAspectRatio {
            try encodeContainer.encode(displayAspectRatio.rawValue, forKey: .displayAspectRatio)
        }
        if let filterSettings = filterSettings {
            try encodeContainer.encode(filterSettings, forKey: .filterSettings)
        }
        if let fixedAfd = fixedAfd {
            try encodeContainer.encode(fixedAfd.rawValue, forKey: .fixedAfd)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if gopClosedCadence != 0 {
            try encodeContainer.encode(gopClosedCadence, forKey: .gopClosedCadence)
        }
        if gopNumBFrames != 0 {
            try encodeContainer.encode(gopNumBFrames, forKey: .gopNumBFrames)
        }
        if gopSize != 0.0 {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if let gopSizeUnits = gopSizeUnits {
            try encodeContainer.encode(gopSizeUnits.rawValue, forKey: .gopSizeUnits)
        }
        if let scanType = scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if let subgopLength = subgopLength {
            try encodeContainer.encode(subgopLength.rawValue, forKey: .subgopLength)
        }
        if let timecodeInsertion = timecodeInsertion {
            try encodeContainer.encode(timecodeInsertion.rawValue, forKey: .timecodeInsertion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(Mpeg2AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let afdSignalingDecoded = try containerValues.decodeIfPresent(AfdSignaling.self, forKey: .afdSignaling)
        afdSignaling = afdSignalingDecoded
        let colorMetadataDecoded = try containerValues.decodeIfPresent(Mpeg2ColorMetadata.self, forKey: .colorMetadata)
        colorMetadata = colorMetadataDecoded
        let colorSpaceDecoded = try containerValues.decodeIfPresent(Mpeg2ColorSpace.self, forKey: .colorSpace)
        colorSpace = colorSpaceDecoded
        let displayAspectRatioDecoded = try containerValues.decodeIfPresent(Mpeg2DisplayRatio.self, forKey: .displayAspectRatio)
        displayAspectRatio = displayAspectRatioDecoded
        let filterSettingsDecoded = try containerValues.decodeIfPresent(Mpeg2FilterSettings.self, forKey: .filterSettings)
        filterSettings = filterSettingsDecoded
        let fixedAfdDecoded = try containerValues.decodeIfPresent(FixedAfd.self, forKey: .fixedAfd)
        fixedAfd = fixedAfdDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopClosedCadenceDecoded = try containerValues.decode(Int.self, forKey: .gopClosedCadence)
        gopClosedCadence = gopClosedCadenceDecoded
        let gopNumBFramesDecoded = try containerValues.decode(Int.self, forKey: .gopNumBFrames)
        gopNumBFrames = gopNumBFramesDecoded
        let gopSizeDecoded = try containerValues.decode(Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let gopSizeUnitsDecoded = try containerValues.decodeIfPresent(Mpeg2GopSizeUnits.self, forKey: .gopSizeUnits)
        gopSizeUnits = gopSizeUnitsDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(Mpeg2ScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let subgopLengthDecoded = try containerValues.decodeIfPresent(Mpeg2SubGopLength.self, forKey: .subgopLength)
        subgopLength = subgopLengthDecoded
        let timecodeInsertionDecoded = try containerValues.decodeIfPresent(Mpeg2TimecodeInsertionBehavior.self, forKey: .timecodeInsertion)
        timecodeInsertion = timecodeInsertionDecoded
    }
}

extension Mpeg2Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Mpeg2Settings(adaptiveQuantization: \(String(describing: adaptiveQuantization)), afdSignaling: \(String(describing: afdSignaling)), colorMetadata: \(String(describing: colorMetadata)), colorSpace: \(String(describing: colorSpace)), displayAspectRatio: \(String(describing: displayAspectRatio)), filterSettings: \(String(describing: filterSettings)), fixedAfd: \(String(describing: fixedAfd)), framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)), gopClosedCadence: \(String(describing: gopClosedCadence)), gopNumBFrames: \(String(describing: gopNumBFrames)), gopSize: \(String(describing: gopSize)), gopSizeUnits: \(String(describing: gopSizeUnits)), scanType: \(String(describing: scanType)), subgopLength: \(String(describing: subgopLength)), timecodeInsertion: \(String(describing: timecodeInsertion)))"}
}

/// Mpeg2 Settings
public struct Mpeg2Settings: Equatable {
    /// Choose Off to disable adaptive quantization. Or choose another value to enable the quantizer and set its strength. The strengths are: Auto, Off, Low, Medium, High. When you enable this field, MediaLive allows intra-frame quantizers to vary, which might improve visual quality.
    public let adaptiveQuantization: Mpeg2AdaptiveQuantization?
    /// Indicates the AFD values that MediaLive will write into the video encode. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose AUTO.
    /// AUTO: MediaLive will try to preserve the input AFD value (in cases where multiple AFD values are valid).
    /// FIXED: MediaLive will use the value you specify in fixedAFD.
    public let afdSignaling: AfdSignaling?
    /// Specifies whether to include the color space metadata. The metadata describes the color space that applies to the video (the colorSpace field). We recommend that you insert the metadata.
    public let colorMetadata: Mpeg2ColorMetadata?
    /// Choose the type of color space conversion to apply to the output. For detailed information on setting up both the input and the output to obtain the desired color space in the output, see the section on \"MediaLive Features - Video - color space\" in the MediaLive User Guide.
    /// PASSTHROUGH: Keep the color space of the input content - do not convert it.
    /// AUTO:Convert all content that is SD to rec 601, and convert all content that is HD to rec 709.
    public let colorSpace: Mpeg2ColorSpace?
    /// Sets the pixel aspect ratio for the encode.
    public let displayAspectRatio: Mpeg2DisplayRatio?
    /// Optionally specify a noise reduction filter, which can improve quality of compressed content. If you do not choose a filter, no filter will be applied.
    /// TEMPORAL: This filter is useful for both source content that is noisy (when it has excessive digital artifacts) and source content that is clean.
    /// When the content is noisy, the filter cleans up the source content before the encoding phase, with these two effects: First, it improves the output video quality because the content has been cleaned up. Secondly, it decreases the bandwidth because MediaLive does not waste bits on encoding noise.
    /// When the content is reasonably clean, the filter tends to decrease the bitrate.
    public let filterSettings: Mpeg2FilterSettings?
    /// Complete this field only when afdSignaling is set to FIXED. Enter the AFD value (4 bits) to write on all frames of the video encode.
    public let fixedAfd: FixedAfd?
    /// description": "The framerate denominator. For example, 1001. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
    public let framerateDenominator: Int
    /// The framerate numerator. For example, 24000. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
    public let framerateNumerator: Int
    /// MPEG2: default is open GOP.
    public let gopClosedCadence: Int
    /// Relates to the GOP structure. The number of B-frames between reference frames. If you do not know what a B-frame is, use the default.
    public let gopNumBFrames: Int
    /// Relates to the GOP structure. The GOP size (keyframe interval) in the units specified in gopSizeUnits. If you do not know what GOP is, use the default.
    /// If gopSizeUnits is frames, then the gopSize must be an integer and must be greater than or equal to 1.
    /// If gopSizeUnits is seconds, the gopSize must be greater than 0, but does not need to be an integer.
    public let gopSize: Double
    /// Relates to the GOP structure. Specifies whether the gopSize is specified in frames or seconds. If you do not plan to change the default gopSize, leave the default. If you specify SECONDS, MediaLive will internally convert the gop size to a frame count.
    public let gopSizeUnits: Mpeg2GopSizeUnits?
    /// Set the scan type of the output to PROGRESSIVE or INTERLACED (top field first).
    public let scanType: Mpeg2ScanType?
    /// Relates to the GOP structure. If you do not know what GOP is, use the default.
    /// FIXED: Set the number of B-frames in each sub-GOP to the value in gopNumBFrames.
    /// DYNAMIC: Let MediaLive optimize the number of B-frames in each sub-GOP, to improve visual quality.
    public let subgopLength: Mpeg2SubGopLength?
    /// Determines how MediaLive inserts timecodes in the output video. For detailed information about setting up the input and the output for a timecode, see the section on \"MediaLive Features - Timecode configuration\" in the MediaLive User Guide.
    /// DISABLED: do not include timecodes.
    /// GOP_TIMECODE: Include timecode metadata in the GOP header.
    public let timecodeInsertion: Mpeg2TimecodeInsertionBehavior?

    public init (
        adaptiveQuantization: Mpeg2AdaptiveQuantization? = nil,
        afdSignaling: AfdSignaling? = nil,
        colorMetadata: Mpeg2ColorMetadata? = nil,
        colorSpace: Mpeg2ColorSpace? = nil,
        displayAspectRatio: Mpeg2DisplayRatio? = nil,
        filterSettings: Mpeg2FilterSettings? = nil,
        fixedAfd: FixedAfd? = nil,
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        gopClosedCadence: Int = 0,
        gopNumBFrames: Int = 0,
        gopSize: Double = 0.0,
        gopSizeUnits: Mpeg2GopSizeUnits? = nil,
        scanType: Mpeg2ScanType? = nil,
        subgopLength: Mpeg2SubGopLength? = nil,
        timecodeInsertion: Mpeg2TimecodeInsertionBehavior? = nil
    )
    {
        self.adaptiveQuantization = adaptiveQuantization
        self.afdSignaling = afdSignaling
        self.colorMetadata = colorMetadata
        self.colorSpace = colorSpace
        self.displayAspectRatio = displayAspectRatio
        self.filterSettings = filterSettings
        self.fixedAfd = fixedAfd
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.gopClosedCadence = gopClosedCadence
        self.gopNumBFrames = gopNumBFrames
        self.gopSize = gopSize
        self.gopSizeUnits = gopSizeUnits
        self.scanType = scanType
        self.subgopLength = subgopLength
        self.timecodeInsertion = timecodeInsertion
    }
}

/// Mpeg2 Sub Gop Length
public enum Mpeg2SubGopLength {
    case `dynamic`
    case fixed
    case sdkUnknown(String)
}

extension Mpeg2SubGopLength : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2SubGopLength] {
        return [
            .dynamic,
            .fixed,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dynamic: return "DYNAMIC"
        case .fixed: return "FIXED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2SubGopLength(rawValue: rawValue) ?? Mpeg2SubGopLength.sdkUnknown(rawValue)
    }
}

/// Mpeg2 Timecode Insertion Behavior
public enum Mpeg2TimecodeInsertionBehavior {
    case disabled
    case gopTimecode
    case sdkUnknown(String)
}

extension Mpeg2TimecodeInsertionBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2TimecodeInsertionBehavior] {
        return [
            .disabled,
            .gopTimecode,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .gopTimecode: return "GOP_TIMECODE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2TimecodeInsertionBehavior(rawValue: rawValue) ?? Mpeg2TimecodeInsertionBehavior.sdkUnknown(rawValue)
    }
}

extension MsSmoothGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acquisitionPointId = "acquisitionPointId"
        case audioOnlyTimecodeControl = "audioOnlyTimecodeControl"
        case certificateMode = "certificateMode"
        case connectionRetryInterval = "connectionRetryInterval"
        case destination = "destination"
        case eventId = "eventId"
        case eventIdMode = "eventIdMode"
        case eventStopBehavior = "eventStopBehavior"
        case filecacheDuration = "filecacheDuration"
        case fragmentLength = "fragmentLength"
        case inputLossAction = "inputLossAction"
        case numRetries = "numRetries"
        case restartDelay = "restartDelay"
        case segmentationMode = "segmentationMode"
        case sendDelayMs = "sendDelayMs"
        case sparseTrackType = "sparseTrackType"
        case streamManifestBehavior = "streamManifestBehavior"
        case timestampOffset = "timestampOffset"
        case timestampOffsetMode = "timestampOffsetMode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acquisitionPointId = acquisitionPointId {
            try encodeContainer.encode(acquisitionPointId, forKey: .acquisitionPointId)
        }
        if let audioOnlyTimecodeControl = audioOnlyTimecodeControl {
            try encodeContainer.encode(audioOnlyTimecodeControl.rawValue, forKey: .audioOnlyTimecodeControl)
        }
        if let certificateMode = certificateMode {
            try encodeContainer.encode(certificateMode.rawValue, forKey: .certificateMode)
        }
        if connectionRetryInterval != 0 {
            try encodeContainer.encode(connectionRetryInterval, forKey: .connectionRetryInterval)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let eventId = eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventIdMode = eventIdMode {
            try encodeContainer.encode(eventIdMode.rawValue, forKey: .eventIdMode)
        }
        if let eventStopBehavior = eventStopBehavior {
            try encodeContainer.encode(eventStopBehavior.rawValue, forKey: .eventStopBehavior)
        }
        if filecacheDuration != 0 {
            try encodeContainer.encode(filecacheDuration, forKey: .filecacheDuration)
        }
        if fragmentLength != 0 {
            try encodeContainer.encode(fragmentLength, forKey: .fragmentLength)
        }
        if let inputLossAction = inputLossAction {
            try encodeContainer.encode(inputLossAction.rawValue, forKey: .inputLossAction)
        }
        if numRetries != 0 {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
        if restartDelay != 0 {
            try encodeContainer.encode(restartDelay, forKey: .restartDelay)
        }
        if let segmentationMode = segmentationMode {
            try encodeContainer.encode(segmentationMode.rawValue, forKey: .segmentationMode)
        }
        if sendDelayMs != 0 {
            try encodeContainer.encode(sendDelayMs, forKey: .sendDelayMs)
        }
        if let sparseTrackType = sparseTrackType {
            try encodeContainer.encode(sparseTrackType.rawValue, forKey: .sparseTrackType)
        }
        if let streamManifestBehavior = streamManifestBehavior {
            try encodeContainer.encode(streamManifestBehavior.rawValue, forKey: .streamManifestBehavior)
        }
        if let timestampOffset = timestampOffset {
            try encodeContainer.encode(timestampOffset, forKey: .timestampOffset)
        }
        if let timestampOffsetMode = timestampOffsetMode {
            try encodeContainer.encode(timestampOffsetMode.rawValue, forKey: .timestampOffsetMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acquisitionPointIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .acquisitionPointId)
        acquisitionPointId = acquisitionPointIdDecoded
        let audioOnlyTimecodeControlDecoded = try containerValues.decodeIfPresent(SmoothGroupAudioOnlyTimecodeControl.self, forKey: .audioOnlyTimecodeControl)
        audioOnlyTimecodeControl = audioOnlyTimecodeControlDecoded
        let certificateModeDecoded = try containerValues.decodeIfPresent(SmoothGroupCertificateMode.self, forKey: .certificateMode)
        certificateMode = certificateModeDecoded
        let connectionRetryIntervalDecoded = try containerValues.decode(Int.self, forKey: .connectionRetryInterval)
        connectionRetryInterval = connectionRetryIntervalDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let eventIdModeDecoded = try containerValues.decodeIfPresent(SmoothGroupEventIdMode.self, forKey: .eventIdMode)
        eventIdMode = eventIdModeDecoded
        let eventStopBehaviorDecoded = try containerValues.decodeIfPresent(SmoothGroupEventStopBehavior.self, forKey: .eventStopBehavior)
        eventStopBehavior = eventStopBehaviorDecoded
        let filecacheDurationDecoded = try containerValues.decode(Int.self, forKey: .filecacheDuration)
        filecacheDuration = filecacheDurationDecoded
        let fragmentLengthDecoded = try containerValues.decode(Int.self, forKey: .fragmentLength)
        fragmentLength = fragmentLengthDecoded
        let inputLossActionDecoded = try containerValues.decodeIfPresent(InputLossActionForMsSmoothOut.self, forKey: .inputLossAction)
        inputLossAction = inputLossActionDecoded
        let numRetriesDecoded = try containerValues.decode(Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
        let restartDelayDecoded = try containerValues.decode(Int.self, forKey: .restartDelay)
        restartDelay = restartDelayDecoded
        let segmentationModeDecoded = try containerValues.decodeIfPresent(SmoothGroupSegmentationMode.self, forKey: .segmentationMode)
        segmentationMode = segmentationModeDecoded
        let sendDelayMsDecoded = try containerValues.decode(Int.self, forKey: .sendDelayMs)
        sendDelayMs = sendDelayMsDecoded
        let sparseTrackTypeDecoded = try containerValues.decodeIfPresent(SmoothGroupSparseTrackType.self, forKey: .sparseTrackType)
        sparseTrackType = sparseTrackTypeDecoded
        let streamManifestBehaviorDecoded = try containerValues.decodeIfPresent(SmoothGroupStreamManifestBehavior.self, forKey: .streamManifestBehavior)
        streamManifestBehavior = streamManifestBehaviorDecoded
        let timestampOffsetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timestampOffset)
        timestampOffset = timestampOffsetDecoded
        let timestampOffsetModeDecoded = try containerValues.decodeIfPresent(SmoothGroupTimestampOffsetMode.self, forKey: .timestampOffsetMode)
        timestampOffsetMode = timestampOffsetModeDecoded
    }
}

extension MsSmoothGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MsSmoothGroupSettings(acquisitionPointId: \(String(describing: acquisitionPointId)), audioOnlyTimecodeControl: \(String(describing: audioOnlyTimecodeControl)), certificateMode: \(String(describing: certificateMode)), connectionRetryInterval: \(String(describing: connectionRetryInterval)), destination: \(String(describing: destination)), eventId: \(String(describing: eventId)), eventIdMode: \(String(describing: eventIdMode)), eventStopBehavior: \(String(describing: eventStopBehavior)), filecacheDuration: \(String(describing: filecacheDuration)), fragmentLength: \(String(describing: fragmentLength)), inputLossAction: \(String(describing: inputLossAction)), numRetries: \(String(describing: numRetries)), restartDelay: \(String(describing: restartDelay)), segmentationMode: \(String(describing: segmentationMode)), sendDelayMs: \(String(describing: sendDelayMs)), sparseTrackType: \(String(describing: sparseTrackType)), streamManifestBehavior: \(String(describing: streamManifestBehavior)), timestampOffset: \(String(describing: timestampOffset)), timestampOffsetMode: \(String(describing: timestampOffsetMode)))"}
}

/// Ms Smooth Group Settings
public struct MsSmoothGroupSettings: Equatable {
    /// The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
    public let acquisitionPointId: String?
    /// If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
    public let audioOnlyTimecodeControl: SmoothGroupAudioOnlyTimecodeControl?
    /// If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA).  This will cause https outputs to self-signed certificates to fail.
    public let certificateMode: SmoothGroupCertificateMode?
    /// Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
    public let connectionRetryInterval: Int
    /// Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
    public let destination: OutputLocationRef?
    /// MS Smooth event ID to be sent to the IIS server.
    ///
    /// Should only be specified if eventIdMode is set to useConfigured.
    public let eventId: String?
    /// Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run.
    ///
    /// Options:
    /// - "useConfigured" - use the value provided in eventId
    /// - "useTimestamp" - generate and send an event ID based on the current timestamp
    /// - "noEventId" - do not send an event ID to the IIS server.
    public let eventIdMode: SmoothGroupEventIdMode?
    /// When set to sendEos, send EOS signal to IIS server when stopping the event
    public let eventStopBehavior: SmoothGroupEventStopBehavior?
    /// Size in seconds of file cache for streaming outputs.
    public let filecacheDuration: Int
    /// Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
    public let fragmentLength: Int
    /// Parameter that control output group behavior on input loss.
    public let inputLossAction: InputLossActionForMsSmoothOut?
    /// Number of retry attempts.
    public let numRetries: Int
    /// Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
    public let restartDelay: Int
    /// useInputSegmentation has been deprecated. The configured segment size is always used.
    public let segmentationMode: SmoothGroupSegmentationMode?
    /// Number of milliseconds to delay the output from the second pipeline.
    public let sendDelayMs: Int
    /// Identifies the type of data to place in the sparse track:
    /// - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment.
    /// - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment.
    /// - NONE: Don't generate a sparse track for any outputs in this output group.
    public let sparseTrackType: SmoothGroupSparseTrackType?
    /// When set to send, send stream manifest so publishing point doesn't start until all streams start.
    public let streamManifestBehavior: SmoothGroupStreamManifestBehavior?
    /// Timestamp offset for the event.  Only used if timestampOffsetMode is set to useConfiguredOffset.
    public let timestampOffset: String?
    /// Type of timestamp date offset to use.
    /// - useEventStartDate: Use the date the event was started as the offset
    /// - useConfiguredOffset: Use an explicitly configured date as the offset
    public let timestampOffsetMode: SmoothGroupTimestampOffsetMode?

    public init (
        acquisitionPointId: String? = nil,
        audioOnlyTimecodeControl: SmoothGroupAudioOnlyTimecodeControl? = nil,
        certificateMode: SmoothGroupCertificateMode? = nil,
        connectionRetryInterval: Int = 0,
        destination: OutputLocationRef? = nil,
        eventId: String? = nil,
        eventIdMode: SmoothGroupEventIdMode? = nil,
        eventStopBehavior: SmoothGroupEventStopBehavior? = nil,
        filecacheDuration: Int = 0,
        fragmentLength: Int = 0,
        inputLossAction: InputLossActionForMsSmoothOut? = nil,
        numRetries: Int = 0,
        restartDelay: Int = 0,
        segmentationMode: SmoothGroupSegmentationMode? = nil,
        sendDelayMs: Int = 0,
        sparseTrackType: SmoothGroupSparseTrackType? = nil,
        streamManifestBehavior: SmoothGroupStreamManifestBehavior? = nil,
        timestampOffset: String? = nil,
        timestampOffsetMode: SmoothGroupTimestampOffsetMode? = nil
    )
    {
        self.acquisitionPointId = acquisitionPointId
        self.audioOnlyTimecodeControl = audioOnlyTimecodeControl
        self.certificateMode = certificateMode
        self.connectionRetryInterval = connectionRetryInterval
        self.destination = destination
        self.eventId = eventId
        self.eventIdMode = eventIdMode
        self.eventStopBehavior = eventStopBehavior
        self.filecacheDuration = filecacheDuration
        self.fragmentLength = fragmentLength
        self.inputLossAction = inputLossAction
        self.numRetries = numRetries
        self.restartDelay = restartDelay
        self.segmentationMode = segmentationMode
        self.sendDelayMs = sendDelayMs
        self.sparseTrackType = sparseTrackType
        self.streamManifestBehavior = streamManifestBehavior
        self.timestampOffset = timestampOffset
        self.timestampOffsetMode = timestampOffsetMode
    }
}

/// Ms Smooth H265 Packaging Type
public enum MsSmoothH265PackagingType {
    case hev1
    case hvc1
    case sdkUnknown(String)
}

extension MsSmoothH265PackagingType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MsSmoothH265PackagingType] {
        return [
            .hev1,
            .hvc1,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hev1: return "HEV1"
        case .hvc1: return "HVC1"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MsSmoothH265PackagingType(rawValue: rawValue) ?? MsSmoothH265PackagingType.sdkUnknown(rawValue)
    }
}

extension MsSmoothOutputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case h265PackagingType = "h265PackagingType"
        case nameModifier = "nameModifier"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let h265PackagingType = h265PackagingType {
            try encodeContainer.encode(h265PackagingType.rawValue, forKey: .h265PackagingType)
        }
        if let nameModifier = nameModifier {
            try encodeContainer.encode(nameModifier, forKey: .nameModifier)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let h265PackagingTypeDecoded = try containerValues.decodeIfPresent(MsSmoothH265PackagingType.self, forKey: .h265PackagingType)
        h265PackagingType = h265PackagingTypeDecoded
        let nameModifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nameModifier)
        nameModifier = nameModifierDecoded
    }
}

extension MsSmoothOutputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MsSmoothOutputSettings(h265PackagingType: \(String(describing: h265PackagingType)), nameModifier: \(String(describing: nameModifier)))"}
}

/// Ms Smooth Output Settings
public struct MsSmoothOutputSettings: Equatable {
    /// Only applicable when this output is referencing an H.265 video description.
    /// Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
    public let h265PackagingType: MsSmoothH265PackagingType?
    /// String concatenated to the end of the destination filename.  Required for multiple outputs of the same type.
    public let nameModifier: String?

    public init (
        h265PackagingType: MsSmoothH265PackagingType? = nil,
        nameModifier: String? = nil
    )
    {
        self.h265PackagingType = h265PackagingType
        self.nameModifier = nameModifier
    }
}

extension Multiplex: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case destinations = "destinations"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for __listof__string0 in availabilityZones {
                try availabilityZonesContainer.encode(__listof__string0)
            }
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for __listofmultiplexoutputdestination0 in destinations {
                try destinationsContainer.encode(__listofmultiplexoutputdestination0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let multiplexSettings = multiplexSettings {
            try encodeContainer.encode(multiplexSettings, forKey: .multiplexSettings)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if pipelinesRunningCount != 0 {
            try encodeContainer.encode(pipelinesRunningCount, forKey: .pipelinesRunningCount)
        }
        if programCount != 0 {
            try encodeContainer.encode(programCount, forKey: .programCount)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MultiplexOutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MultiplexOutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MultiplexOutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decode(Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decode(Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension Multiplex: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Multiplex(arn: \(String(describing: arn)), availabilityZones: \(String(describing: availabilityZones)), destinations: \(String(describing: destinations)), id: \(String(describing: id)), multiplexSettings: \(String(describing: multiplexSettings)), name: \(String(describing: name)), pipelinesRunningCount: \(String(describing: pipelinesRunningCount)), programCount: \(String(describing: programCount)), state: \(String(describing: state)), tags: \(String(describing: tags)))"}
}

/// The multiplex object.
public struct Multiplex: Equatable {
    /// The unique arn of the multiplex.
    public let arn: String?
    /// A list of availability zones for the multiplex.
    public let availabilityZones: [String]?
    /// A list of the multiplex output destinations.
    public let destinations: [MultiplexOutputDestination]?
    /// The unique id of the multiplex.
    public let id: String?
    /// Configuration for a multiplex event.
    public let multiplexSettings: MultiplexSettings?
    /// The name of the multiplex.
    public let name: String?
    /// The number of currently healthy pipelines.
    public let pipelinesRunningCount: Int
    /// The number of programs in the multiplex.
    public let programCount: Int
    /// The current state of the multiplex.
    public let state: MultiplexState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?

    public init (
        arn: String? = nil,
        availabilityZones: [String]? = nil,
        destinations: [MultiplexOutputDestination]? = nil,
        id: String? = nil,
        multiplexSettings: MultiplexSettings? = nil,
        name: String? = nil,
        pipelinesRunningCount: Int = 0,
        programCount: Int = 0,
        state: MultiplexState? = nil,
        tags: [String:String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZones = availabilityZones
        self.destinations = destinations
        self.id = id
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.programCount = programCount
        self.state = state
        self.tags = tags
    }
}

extension MultiplexGroupSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension MultiplexGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexGroupSettings()"}
}

/// Multiplex Group Settings
public struct MultiplexGroupSettings: Equatable {

    public init() {}
}

extension MultiplexMediaConnectOutputDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case entitlementArn = "entitlementArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entitlementArn = entitlementArn {
            try encodeContainer.encode(entitlementArn, forKey: .entitlementArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entitlementArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .entitlementArn)
        entitlementArn = entitlementArnDecoded
    }
}

extension MultiplexMediaConnectOutputDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexMediaConnectOutputDestinationSettings(entitlementArn: \(String(describing: entitlementArn)))"}
}

/// Multiplex MediaConnect output destination settings.
public struct MultiplexMediaConnectOutputDestinationSettings: Equatable {
    /// The MediaConnect entitlement ARN available as a Flow source.
    public let entitlementArn: String?

    public init (
        entitlementArn: String? = nil
    )
    {
        self.entitlementArn = entitlementArn
    }
}

extension MultiplexOutputDestination: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case mediaConnectSettings = "mediaConnectSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mediaConnectSettings = mediaConnectSettings {
            try encodeContainer.encode(mediaConnectSettings, forKey: .mediaConnectSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mediaConnectSettingsDecoded = try containerValues.decodeIfPresent(MultiplexMediaConnectOutputDestinationSettings.self, forKey: .mediaConnectSettings)
        mediaConnectSettings = mediaConnectSettingsDecoded
    }
}

extension MultiplexOutputDestination: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexOutputDestination(mediaConnectSettings: \(String(describing: mediaConnectSettings)))"}
}

/// Multiplex output destination settings
public struct MultiplexOutputDestination: Equatable {
    /// Multiplex MediaConnect output destination settings.
    public let mediaConnectSettings: MultiplexMediaConnectOutputDestinationSettings?

    public init (
        mediaConnectSettings: MultiplexMediaConnectOutputDestinationSettings? = nil
    )
    {
        self.mediaConnectSettings = mediaConnectSettings
    }
}

extension MultiplexOutputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destination = "destination"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
    }
}

extension MultiplexOutputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexOutputSettings(destination: \(String(describing: destination)))"}
}

/// Multiplex Output Settings
public struct MultiplexOutputSettings: Equatable {
    /// Destination is a Multiplex.
    public let destination: OutputLocationRef?

    public init (
        destination: OutputLocationRef? = nil
    )
    {
        self.destination = destination
    }
}

extension MultiplexProgram: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelId = "channelId"
        case multiplexProgramSettings = "multiplexProgramSettings"
        case packetIdentifiersMap = "packetIdentifiersMap"
        case pipelineDetails = "pipelineDetails"
        case programName = "programName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelId = channelId {
            try encodeContainer.encode(channelId, forKey: .channelId)
        }
        if let multiplexProgramSettings = multiplexProgramSettings {
            try encodeContainer.encode(multiplexProgramSettings, forKey: .multiplexProgramSettings)
        }
        if let packetIdentifiersMap = packetIdentifiersMap {
            try encodeContainer.encode(packetIdentifiersMap, forKey: .packetIdentifiersMap)
        }
        if let pipelineDetails = pipelineDetails {
            var pipelineDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineDetails)
            for __listofmultiplexprogrampipelinedetail0 in pipelineDetails {
                try pipelineDetailsContainer.encode(__listofmultiplexprogrampipelinedetail0)
            }
        }
        if let programName = programName {
            try encodeContainer.encode(programName, forKey: .programName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .channelId)
        channelId = channelIdDecoded
        let multiplexProgramSettingsDecoded = try containerValues.decodeIfPresent(MultiplexProgramSettings.self, forKey: .multiplexProgramSettings)
        multiplexProgramSettings = multiplexProgramSettingsDecoded
        let packetIdentifiersMapDecoded = try containerValues.decodeIfPresent(MultiplexProgramPacketIdentifiersMap.self, forKey: .packetIdentifiersMap)
        packetIdentifiersMap = packetIdentifiersMapDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([MultiplexProgramPipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[MultiplexProgramPipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [MultiplexProgramPipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let programNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .programName)
        programName = programNameDecoded
    }
}

extension MultiplexProgram: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexProgram(channelId: \(String(describing: channelId)), multiplexProgramSettings: \(String(describing: multiplexProgramSettings)), packetIdentifiersMap: \(String(describing: packetIdentifiersMap)), pipelineDetails: \(String(describing: pipelineDetails)), programName: \(String(describing: programName)))"}
}

/// The multiplex program object.
public struct MultiplexProgram: Equatable {
    /// The MediaLive channel associated with the program.
    public let channelId: String?
    /// The settings for this multiplex program.
    public let multiplexProgramSettings: MultiplexProgramSettings?
    /// The packet identifier map for this multiplex program.
    public let packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap?
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    public let pipelineDetails: [MultiplexProgramPipelineDetail]?
    /// The name of the multiplex program.
    public let programName: String?

    public init (
        channelId: String? = nil,
        multiplexProgramSettings: MultiplexProgramSettings? = nil,
        packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap? = nil,
        pipelineDetails: [MultiplexProgramPipelineDetail]? = nil,
        programName: String? = nil
    )
    {
        self.channelId = channelId
        self.multiplexProgramSettings = multiplexProgramSettings
        self.packetIdentifiersMap = packetIdentifiersMap
        self.pipelineDetails = pipelineDetails
        self.programName = programName
    }
}

extension MultiplexProgramChannelDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case multiplexId = "multiplexId"
        case programName = "programName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let multiplexId = multiplexId {
            try encodeContainer.encode(multiplexId, forKey: .multiplexId)
        }
        if let programName = programName {
            try encodeContainer.encode(programName, forKey: .programName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .multiplexId)
        multiplexId = multiplexIdDecoded
        let programNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .programName)
        programName = programNameDecoded
    }
}

extension MultiplexProgramChannelDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexProgramChannelDestinationSettings(multiplexId: \(String(describing: multiplexId)), programName: \(String(describing: programName)))"}
}

/// Multiplex Program Input Destination Settings for outputting a Channel to a Multiplex
public struct MultiplexProgramChannelDestinationSettings: Equatable {
    /// The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances.
    /// The Multiplex must be in the same region as the Channel.
    public let multiplexId: String?
    /// The program name of the Multiplex program that the encoder is providing output to.
    public let programName: String?

    public init (
        multiplexId: String? = nil,
        programName: String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.programName = programName
    }
}

extension MultiplexProgramPacketIdentifiersMap: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioPids = "audioPids"
        case dvbSubPids = "dvbSubPids"
        case dvbTeletextPid = "dvbTeletextPid"
        case etvPlatformPid = "etvPlatformPid"
        case etvSignalPid = "etvSignalPid"
        case klvDataPids = "klvDataPids"
        case pcrPid = "pcrPid"
        case pmtPid = "pmtPid"
        case privateMetadataPid = "privateMetadataPid"
        case scte27Pids = "scte27Pids"
        case scte35Pid = "scte35Pid"
        case timedMetadataPid = "timedMetadataPid"
        case videoPid = "videoPid"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioPids = audioPids {
            var audioPidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioPids)
            for __listof__integer0 in audioPids {
                try audioPidsContainer.encode(__listof__integer0)
            }
        }
        if let dvbSubPids = dvbSubPids {
            var dvbSubPidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dvbSubPids)
            for __listof__integer0 in dvbSubPids {
                try dvbSubPidsContainer.encode(__listof__integer0)
            }
        }
        if dvbTeletextPid != 0 {
            try encodeContainer.encode(dvbTeletextPid, forKey: .dvbTeletextPid)
        }
        if etvPlatformPid != 0 {
            try encodeContainer.encode(etvPlatformPid, forKey: .etvPlatformPid)
        }
        if etvSignalPid != 0 {
            try encodeContainer.encode(etvSignalPid, forKey: .etvSignalPid)
        }
        if let klvDataPids = klvDataPids {
            var klvDataPidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .klvDataPids)
            for __listof__integer0 in klvDataPids {
                try klvDataPidsContainer.encode(__listof__integer0)
            }
        }
        if pcrPid != 0 {
            try encodeContainer.encode(pcrPid, forKey: .pcrPid)
        }
        if pmtPid != 0 {
            try encodeContainer.encode(pmtPid, forKey: .pmtPid)
        }
        if privateMetadataPid != 0 {
            try encodeContainer.encode(privateMetadataPid, forKey: .privateMetadataPid)
        }
        if let scte27Pids = scte27Pids {
            var scte27PidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scte27Pids)
            for __listof__integer0 in scte27Pids {
                try scte27PidsContainer.encode(__listof__integer0)
            }
        }
        if scte35Pid != 0 {
            try encodeContainer.encode(scte35Pid, forKey: .scte35Pid)
        }
        if timedMetadataPid != 0 {
            try encodeContainer.encode(timedMetadataPid, forKey: .timedMetadataPid)
        }
        if videoPid != 0 {
            try encodeContainer.encode(videoPid, forKey: .videoPid)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioPidsContainer = try containerValues.decodeIfPresent([Int?].self, forKey: .audioPids)
        var audioPidsDecoded0:[Int]? = nil
        if let audioPidsContainer = audioPidsContainer {
            audioPidsDecoded0 = [Int]()
            for integer0 in audioPidsContainer {
                if let integer0 = integer0 {
                    audioPidsDecoded0?.append(integer0)
                }
            }
        }
        audioPids = audioPidsDecoded0
        let dvbSubPidsContainer = try containerValues.decodeIfPresent([Int?].self, forKey: .dvbSubPids)
        var dvbSubPidsDecoded0:[Int]? = nil
        if let dvbSubPidsContainer = dvbSubPidsContainer {
            dvbSubPidsDecoded0 = [Int]()
            for integer0 in dvbSubPidsContainer {
                if let integer0 = integer0 {
                    dvbSubPidsDecoded0?.append(integer0)
                }
            }
        }
        dvbSubPids = dvbSubPidsDecoded0
        let dvbTeletextPidDecoded = try containerValues.decode(Int.self, forKey: .dvbTeletextPid)
        dvbTeletextPid = dvbTeletextPidDecoded
        let etvPlatformPidDecoded = try containerValues.decode(Int.self, forKey: .etvPlatformPid)
        etvPlatformPid = etvPlatformPidDecoded
        let etvSignalPidDecoded = try containerValues.decode(Int.self, forKey: .etvSignalPid)
        etvSignalPid = etvSignalPidDecoded
        let klvDataPidsContainer = try containerValues.decodeIfPresent([Int?].self, forKey: .klvDataPids)
        var klvDataPidsDecoded0:[Int]? = nil
        if let klvDataPidsContainer = klvDataPidsContainer {
            klvDataPidsDecoded0 = [Int]()
            for integer0 in klvDataPidsContainer {
                if let integer0 = integer0 {
                    klvDataPidsDecoded0?.append(integer0)
                }
            }
        }
        klvDataPids = klvDataPidsDecoded0
        let pcrPidDecoded = try containerValues.decode(Int.self, forKey: .pcrPid)
        pcrPid = pcrPidDecoded
        let pmtPidDecoded = try containerValues.decode(Int.self, forKey: .pmtPid)
        pmtPid = pmtPidDecoded
        let privateMetadataPidDecoded = try containerValues.decode(Int.self, forKey: .privateMetadataPid)
        privateMetadataPid = privateMetadataPidDecoded
        let scte27PidsContainer = try containerValues.decodeIfPresent([Int?].self, forKey: .scte27Pids)
        var scte27PidsDecoded0:[Int]? = nil
        if let scte27PidsContainer = scte27PidsContainer {
            scte27PidsDecoded0 = [Int]()
            for integer0 in scte27PidsContainer {
                if let integer0 = integer0 {
                    scte27PidsDecoded0?.append(integer0)
                }
            }
        }
        scte27Pids = scte27PidsDecoded0
        let scte35PidDecoded = try containerValues.decode(Int.self, forKey: .scte35Pid)
        scte35Pid = scte35PidDecoded
        let timedMetadataPidDecoded = try containerValues.decode(Int.self, forKey: .timedMetadataPid)
        timedMetadataPid = timedMetadataPidDecoded
        let videoPidDecoded = try containerValues.decode(Int.self, forKey: .videoPid)
        videoPid = videoPidDecoded
    }
}

extension MultiplexProgramPacketIdentifiersMap: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexProgramPacketIdentifiersMap(audioPids: \(String(describing: audioPids)), dvbSubPids: \(String(describing: dvbSubPids)), dvbTeletextPid: \(String(describing: dvbTeletextPid)), etvPlatformPid: \(String(describing: etvPlatformPid)), etvSignalPid: \(String(describing: etvSignalPid)), klvDataPids: \(String(describing: klvDataPids)), pcrPid: \(String(describing: pcrPid)), pmtPid: \(String(describing: pmtPid)), privateMetadataPid: \(String(describing: privateMetadataPid)), scte27Pids: \(String(describing: scte27Pids)), scte35Pid: \(String(describing: scte35Pid)), timedMetadataPid: \(String(describing: timedMetadataPid)), videoPid: \(String(describing: videoPid)))"}
}

/// Packet identifiers map for a given Multiplex program.
public struct MultiplexProgramPacketIdentifiersMap: Equatable {
    /// Placeholder documentation for __listOf__integer
    public let audioPids: [Int]?
    /// Placeholder documentation for __listOf__integer
    public let dvbSubPids: [Int]?
    /// Placeholder documentation for __integer
    public let dvbTeletextPid: Int
    /// Placeholder documentation for __integer
    public let etvPlatformPid: Int
    /// Placeholder documentation for __integer
    public let etvSignalPid: Int
    /// Placeholder documentation for __listOf__integer
    public let klvDataPids: [Int]?
    /// Placeholder documentation for __integer
    public let pcrPid: Int
    /// Placeholder documentation for __integer
    public let pmtPid: Int
    /// Placeholder documentation for __integer
    public let privateMetadataPid: Int
    /// Placeholder documentation for __listOf__integer
    public let scte27Pids: [Int]?
    /// Placeholder documentation for __integer
    public let scte35Pid: Int
    /// Placeholder documentation for __integer
    public let timedMetadataPid: Int
    /// Placeholder documentation for __integer
    public let videoPid: Int

    public init (
        audioPids: [Int]? = nil,
        dvbSubPids: [Int]? = nil,
        dvbTeletextPid: Int = 0,
        etvPlatformPid: Int = 0,
        etvSignalPid: Int = 0,
        klvDataPids: [Int]? = nil,
        pcrPid: Int = 0,
        pmtPid: Int = 0,
        privateMetadataPid: Int = 0,
        scte27Pids: [Int]? = nil,
        scte35Pid: Int = 0,
        timedMetadataPid: Int = 0,
        videoPid: Int = 0
    )
    {
        self.audioPids = audioPids
        self.dvbSubPids = dvbSubPids
        self.dvbTeletextPid = dvbTeletextPid
        self.etvPlatformPid = etvPlatformPid
        self.etvSignalPid = etvSignalPid
        self.klvDataPids = klvDataPids
        self.pcrPid = pcrPid
        self.pmtPid = pmtPid
        self.privateMetadataPid = privateMetadataPid
        self.scte27Pids = scte27Pids
        self.scte35Pid = scte35Pid
        self.timedMetadataPid = timedMetadataPid
        self.videoPid = videoPid
    }
}

extension MultiplexProgramPipelineDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activeChannelPipeline = "activeChannelPipeline"
        case pipelineId = "pipelineId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeChannelPipeline = activeChannelPipeline {
            try encodeContainer.encode(activeChannelPipeline, forKey: .activeChannelPipeline)
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeChannelPipelineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activeChannelPipeline)
        activeChannelPipeline = activeChannelPipelineDecoded
        let pipelineIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
    }
}

extension MultiplexProgramPipelineDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexProgramPipelineDetail(activeChannelPipeline: \(String(describing: activeChannelPipeline)), pipelineId: \(String(describing: pipelineId)))"}
}

/// The current source for one of the pipelines in the multiplex.
public struct MultiplexProgramPipelineDetail: Equatable {
    /// Identifies the channel pipeline that is currently active for the pipeline (identified by PipelineId) in the multiplex.
    public let activeChannelPipeline: String?
    /// Identifies a specific pipeline in the multiplex.
    public let pipelineId: String?

    public init (
        activeChannelPipeline: String? = nil,
        pipelineId: String? = nil
    )
    {
        self.activeChannelPipeline = activeChannelPipeline
        self.pipelineId = pipelineId
    }
}

extension MultiplexProgramServiceDescriptor: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case providerName = "providerName"
        case serviceName = "serviceName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let providerName = providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let providerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
    }
}

extension MultiplexProgramServiceDescriptor: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexProgramServiceDescriptor(providerName: \(String(describing: providerName)), serviceName: \(String(describing: serviceName)))"}
}

/// Transport stream service descriptor configuration for the Multiplex program.
public struct MultiplexProgramServiceDescriptor: Equatable {
    /// Name of the provider.
    public let providerName: String?
    /// Name of the service.
    public let serviceName: String?

    public init (
        providerName: String? = nil,
        serviceName: String? = nil
    )
    {
        self.providerName = providerName
        self.serviceName = serviceName
    }
}

extension MultiplexProgramSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case preferredChannelPipeline = "preferredChannelPipeline"
        case programNumber = "programNumber"
        case serviceDescriptor = "serviceDescriptor"
        case videoSettings = "videoSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let preferredChannelPipeline = preferredChannelPipeline {
            try encodeContainer.encode(preferredChannelPipeline.rawValue, forKey: .preferredChannelPipeline)
        }
        if programNumber != 0 {
            try encodeContainer.encode(programNumber, forKey: .programNumber)
        }
        if let serviceDescriptor = serviceDescriptor {
            try encodeContainer.encode(serviceDescriptor, forKey: .serviceDescriptor)
        }
        if let videoSettings = videoSettings {
            try encodeContainer.encode(videoSettings, forKey: .videoSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let preferredChannelPipelineDecoded = try containerValues.decodeIfPresent(PreferredChannelPipeline.self, forKey: .preferredChannelPipeline)
        preferredChannelPipeline = preferredChannelPipelineDecoded
        let programNumberDecoded = try containerValues.decode(Int.self, forKey: .programNumber)
        programNumber = programNumberDecoded
        let serviceDescriptorDecoded = try containerValues.decodeIfPresent(MultiplexProgramServiceDescriptor.self, forKey: .serviceDescriptor)
        serviceDescriptor = serviceDescriptorDecoded
        let videoSettingsDecoded = try containerValues.decodeIfPresent(MultiplexVideoSettings.self, forKey: .videoSettings)
        videoSettings = videoSettingsDecoded
    }
}

extension MultiplexProgramSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexProgramSettings(preferredChannelPipeline: \(String(describing: preferredChannelPipeline)), programNumber: \(String(describing: programNumber)), serviceDescriptor: \(String(describing: serviceDescriptor)), videoSettings: \(String(describing: videoSettings)))"}
}

/// Multiplex Program settings configuration.
public struct MultiplexProgramSettings: Equatable {
    /// Indicates which pipeline is preferred by the multiplex for program ingest.
    public let preferredChannelPipeline: PreferredChannelPipeline?
    /// Unique program number.
    public let programNumber: Int
    /// Transport stream service descriptor configuration for the Multiplex program.
    public let serviceDescriptor: MultiplexProgramServiceDescriptor?
    /// Program video settings configuration.
    public let videoSettings: MultiplexVideoSettings?

    public init (
        preferredChannelPipeline: PreferredChannelPipeline? = nil,
        programNumber: Int = 0,
        serviceDescriptor: MultiplexProgramServiceDescriptor? = nil,
        videoSettings: MultiplexVideoSettings? = nil
    )
    {
        self.preferredChannelPipeline = preferredChannelPipeline
        self.programNumber = programNumber
        self.serviceDescriptor = serviceDescriptor
        self.videoSettings = videoSettings
    }
}

extension MultiplexProgramSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelId = "channelId"
        case programName = "programName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelId = channelId {
            try encodeContainer.encode(channelId, forKey: .channelId)
        }
        if let programName = programName {
            try encodeContainer.encode(programName, forKey: .programName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .channelId)
        channelId = channelIdDecoded
        let programNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .programName)
        programName = programNameDecoded
    }
}

extension MultiplexProgramSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexProgramSummary(channelId: \(String(describing: channelId)), programName: \(String(describing: programName)))"}
}

/// Placeholder documentation for MultiplexProgramSummary
public struct MultiplexProgramSummary: Equatable {
    /// The MediaLive Channel associated with the program.
    public let channelId: String?
    /// The name of the multiplex program.
    public let programName: String?

    public init (
        channelId: String? = nil,
        programName: String? = nil
    )
    {
        self.channelId = channelId
        self.programName = programName
    }
}

extension MultiplexSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maximumVideoBufferDelayMilliseconds = "maximumVideoBufferDelayMilliseconds"
        case transportStreamBitrate = "transportStreamBitrate"
        case transportStreamId = "transportStreamId"
        case transportStreamReservedBitrate = "transportStreamReservedBitrate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumVideoBufferDelayMilliseconds != 0 {
            try encodeContainer.encode(maximumVideoBufferDelayMilliseconds, forKey: .maximumVideoBufferDelayMilliseconds)
        }
        if transportStreamBitrate != 0 {
            try encodeContainer.encode(transportStreamBitrate, forKey: .transportStreamBitrate)
        }
        if transportStreamId != 0 {
            try encodeContainer.encode(transportStreamId, forKey: .transportStreamId)
        }
        if transportStreamReservedBitrate != 0 {
            try encodeContainer.encode(transportStreamReservedBitrate, forKey: .transportStreamReservedBitrate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumVideoBufferDelayMillisecondsDecoded = try containerValues.decode(Int.self, forKey: .maximumVideoBufferDelayMilliseconds)
        maximumVideoBufferDelayMilliseconds = maximumVideoBufferDelayMillisecondsDecoded
        let transportStreamBitrateDecoded = try containerValues.decode(Int.self, forKey: .transportStreamBitrate)
        transportStreamBitrate = transportStreamBitrateDecoded
        let transportStreamIdDecoded = try containerValues.decode(Int.self, forKey: .transportStreamId)
        transportStreamId = transportStreamIdDecoded
        let transportStreamReservedBitrateDecoded = try containerValues.decode(Int.self, forKey: .transportStreamReservedBitrate)
        transportStreamReservedBitrate = transportStreamReservedBitrateDecoded
    }
}

extension MultiplexSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexSettings(maximumVideoBufferDelayMilliseconds: \(String(describing: maximumVideoBufferDelayMilliseconds)), transportStreamBitrate: \(String(describing: transportStreamBitrate)), transportStreamId: \(String(describing: transportStreamId)), transportStreamReservedBitrate: \(String(describing: transportStreamReservedBitrate)))"}
}

/// Contains configuration for a Multiplex event
public struct MultiplexSettings: Equatable {
    /// Maximum video buffer delay in milliseconds.
    public let maximumVideoBufferDelayMilliseconds: Int
    /// Transport stream bit rate.
    public let transportStreamBitrate: Int
    /// Transport stream ID.
    public let transportStreamId: Int
    /// Transport stream reserved bit rate.
    public let transportStreamReservedBitrate: Int

    public init (
        maximumVideoBufferDelayMilliseconds: Int = 0,
        transportStreamBitrate: Int = 0,
        transportStreamId: Int = 0,
        transportStreamReservedBitrate: Int = 0
    )
    {
        self.maximumVideoBufferDelayMilliseconds = maximumVideoBufferDelayMilliseconds
        self.transportStreamBitrate = transportStreamBitrate
        self.transportStreamId = transportStreamId
        self.transportStreamReservedBitrate = transportStreamReservedBitrate
    }
}

extension MultiplexSettingsSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case transportStreamBitrate = "transportStreamBitrate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if transportStreamBitrate != 0 {
            try encodeContainer.encode(transportStreamBitrate, forKey: .transportStreamBitrate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transportStreamBitrateDecoded = try containerValues.decode(Int.self, forKey: .transportStreamBitrate)
        transportStreamBitrate = transportStreamBitrateDecoded
    }
}

extension MultiplexSettingsSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexSettingsSummary(transportStreamBitrate: \(String(describing: transportStreamBitrate)))"}
}

/// Contains summary configuration for a Multiplex event.
public struct MultiplexSettingsSummary: Equatable {
    /// Transport stream bit rate.
    public let transportStreamBitrate: Int

    public init (
        transportStreamBitrate: Int = 0
    )
    {
        self.transportStreamBitrate = transportStreamBitrate
    }
}

/// The current state of the multiplex.
public enum MultiplexState {
    case createFailed
    case creating
    case deleted
    case deleting
    case idle
    case recovering
    case running
    case starting
    case stopping
    case sdkUnknown(String)
}

extension MultiplexState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MultiplexState] {
        return [
            .createFailed,
            .creating,
            .deleted,
            .deleting,
            .idle,
            .recovering,
            .running,
            .starting,
            .stopping,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .createFailed: return "CREATE_FAILED"
        case .creating: return "CREATING"
        case .deleted: return "DELETED"
        case .deleting: return "DELETING"
        case .idle: return "IDLE"
        case .recovering: return "RECOVERING"
        case .running: return "RUNNING"
        case .starting: return "STARTING"
        case .stopping: return "STOPPING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MultiplexState(rawValue: rawValue) ?? MultiplexState.sdkUnknown(rawValue)
    }
}

extension MultiplexStatmuxVideoSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maximumBitrate = "maximumBitrate"
        case minimumBitrate = "minimumBitrate"
        case priority = "priority"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumBitrate != 0 {
            try encodeContainer.encode(maximumBitrate, forKey: .maximumBitrate)
        }
        if minimumBitrate != 0 {
            try encodeContainer.encode(minimumBitrate, forKey: .minimumBitrate)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumBitrateDecoded = try containerValues.decode(Int.self, forKey: .maximumBitrate)
        maximumBitrate = maximumBitrateDecoded
        let minimumBitrateDecoded = try containerValues.decode(Int.self, forKey: .minimumBitrate)
        minimumBitrate = minimumBitrateDecoded
        let priorityDecoded = try containerValues.decode(Int.self, forKey: .priority)
        priority = priorityDecoded
    }
}

extension MultiplexStatmuxVideoSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexStatmuxVideoSettings(maximumBitrate: \(String(describing: maximumBitrate)), minimumBitrate: \(String(describing: minimumBitrate)), priority: \(String(describing: priority)))"}
}

/// Statmux rate control settings
public struct MultiplexStatmuxVideoSettings: Equatable {
    /// Maximum statmux bitrate.
    public let maximumBitrate: Int
    /// Minimum statmux bitrate.
    public let minimumBitrate: Int
    /// The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others.  Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.
    public let priority: Int

    public init (
        maximumBitrate: Int = 0,
        minimumBitrate: Int = 0,
        priority: Int = 0
    )
    {
        self.maximumBitrate = maximumBitrate
        self.minimumBitrate = minimumBitrate
        self.priority = priority
    }
}

extension MultiplexSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for __listof__string0 in availabilityZones {
                try availabilityZonesContainer.encode(__listof__string0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let multiplexSettings = multiplexSettings {
            try encodeContainer.encode(multiplexSettings, forKey: .multiplexSettings)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if pipelinesRunningCount != 0 {
            try encodeContainer.encode(pipelinesRunningCount, forKey: .pipelinesRunningCount)
        }
        if programCount != 0 {
            try encodeContainer.encode(programCount, forKey: .programCount)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MultiplexSettingsSummary.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decode(Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decode(Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension MultiplexSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexSummary(arn: \(String(describing: arn)), availabilityZones: \(String(describing: availabilityZones)), id: \(String(describing: id)), multiplexSettings: \(String(describing: multiplexSettings)), name: \(String(describing: name)), pipelinesRunningCount: \(String(describing: pipelinesRunningCount)), programCount: \(String(describing: programCount)), state: \(String(describing: state)), tags: \(String(describing: tags)))"}
}

/// Placeholder documentation for MultiplexSummary
public struct MultiplexSummary: Equatable {
    /// The unique arn of the multiplex.
    public let arn: String?
    /// A list of availability zones for the multiplex.
    public let availabilityZones: [String]?
    /// The unique id of the multiplex.
    public let id: String?
    /// Configuration for a multiplex event.
    public let multiplexSettings: MultiplexSettingsSummary?
    /// The name of the multiplex.
    public let name: String?
    /// The number of currently healthy pipelines.
    public let pipelinesRunningCount: Int
    /// The number of programs in the multiplex.
    public let programCount: Int
    /// The current state of the multiplex.
    public let state: MultiplexState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?

    public init (
        arn: String? = nil,
        availabilityZones: [String]? = nil,
        id: String? = nil,
        multiplexSettings: MultiplexSettingsSummary? = nil,
        name: String? = nil,
        pipelinesRunningCount: Int = 0,
        programCount: Int = 0,
        state: MultiplexState? = nil,
        tags: [String:String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZones = availabilityZones
        self.id = id
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.programCount = programCount
        self.state = state
        self.tags = tags
    }
}

extension MultiplexVideoSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case constantBitrate = "constantBitrate"
        case statmuxSettings = "statmuxSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if constantBitrate != 0 {
            try encodeContainer.encode(constantBitrate, forKey: .constantBitrate)
        }
        if let statmuxSettings = statmuxSettings {
            try encodeContainer.encode(statmuxSettings, forKey: .statmuxSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let constantBitrateDecoded = try containerValues.decode(Int.self, forKey: .constantBitrate)
        constantBitrate = constantBitrateDecoded
        let statmuxSettingsDecoded = try containerValues.decodeIfPresent(MultiplexStatmuxVideoSettings.self, forKey: .statmuxSettings)
        statmuxSettings = statmuxSettingsDecoded
    }
}

extension MultiplexVideoSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultiplexVideoSettings(constantBitrate: \(String(describing: constantBitrate)), statmuxSettings: \(String(describing: statmuxSettings)))"}
}

/// The video configuration for each program in a multiplex.
public struct MultiplexVideoSettings: Equatable {
    /// The constant bitrate configuration for the video encode.
    /// When this field is defined, StatmuxSettings must be undefined.
    public let constantBitrate: Int
    /// Statmux rate control settings.
    /// When this field is defined, ConstantBitrate must be undefined.
    public let statmuxSettings: MultiplexStatmuxVideoSettings?

    public init (
        constantBitrate: Int = 0,
        statmuxSettings: MultiplexStatmuxVideoSettings? = nil
    )
    {
        self.constantBitrate = constantBitrate
        self.statmuxSettings = statmuxSettings
    }
}

/// Network Input Server Validation
public enum NetworkInputServerValidation {
    case checkCryptographyAndValidateName
    case checkCryptographyOnly
    case sdkUnknown(String)
}

extension NetworkInputServerValidation : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NetworkInputServerValidation] {
        return [
            .checkCryptographyAndValidateName,
            .checkCryptographyOnly,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .checkCryptographyAndValidateName: return "CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME"
        case .checkCryptographyOnly: return "CHECK_CRYPTOGRAPHY_ONLY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NetworkInputServerValidation(rawValue: rawValue) ?? NetworkInputServerValidation.sdkUnknown(rawValue)
    }
}

extension NetworkInputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case hlsInputSettings = "hlsInputSettings"
        case serverValidation = "serverValidation"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hlsInputSettings = hlsInputSettings {
            try encodeContainer.encode(hlsInputSettings, forKey: .hlsInputSettings)
        }
        if let serverValidation = serverValidation {
            try encodeContainer.encode(serverValidation.rawValue, forKey: .serverValidation)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hlsInputSettingsDecoded = try containerValues.decodeIfPresent(HlsInputSettings.self, forKey: .hlsInputSettings)
        hlsInputSettings = hlsInputSettingsDecoded
        let serverValidationDecoded = try containerValues.decodeIfPresent(NetworkInputServerValidation.self, forKey: .serverValidation)
        serverValidation = serverValidationDecoded
    }
}

extension NetworkInputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NetworkInputSettings(hlsInputSettings: \(String(describing: hlsInputSettings)), serverValidation: \(String(describing: serverValidation)))"}
}

/// Network source to transcode. Must be accessible to the Elemental Live node that is running the live event through a network connection.
public struct NetworkInputSettings: Equatable {
    /// Specifies HLS input settings when the uri is for a HLS manifest.
    public let hlsInputSettings: HlsInputSettings?
    /// Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.
    public let serverValidation: NetworkInputServerValidation?

    public init (
        hlsInputSettings: HlsInputSettings? = nil,
        serverValidation: NetworkInputServerValidation? = nil
    )
    {
        self.hlsInputSettings = hlsInputSettings
        self.serverValidation = serverValidation
    }
}

extension NielsenConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case distributorId = "distributorId"
        case nielsenPcmToId3Tagging = "nielsenPcmToId3Tagging"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributorId = distributorId {
            try encodeContainer.encode(distributorId, forKey: .distributorId)
        }
        if let nielsenPcmToId3Tagging = nielsenPcmToId3Tagging {
            try encodeContainer.encode(nielsenPcmToId3Tagging.rawValue, forKey: .nielsenPcmToId3Tagging)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .distributorId)
        distributorId = distributorIdDecoded
        let nielsenPcmToId3TaggingDecoded = try containerValues.decodeIfPresent(NielsenPcmToId3TaggingState.self, forKey: .nielsenPcmToId3Tagging)
        nielsenPcmToId3Tagging = nielsenPcmToId3TaggingDecoded
    }
}

extension NielsenConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NielsenConfiguration(distributorId: \(String(describing: distributorId)), nielsenPcmToId3Tagging: \(String(describing: nielsenPcmToId3Tagging)))"}
}

/// Nielsen Configuration
public struct NielsenConfiguration: Equatable {
    /// Enter the Distributor ID assigned to your organization by Nielsen.
    public let distributorId: String?
    /// Enables Nielsen PCM to ID3 tagging
    public let nielsenPcmToId3Tagging: NielsenPcmToId3TaggingState?

    public init (
        distributorId: String? = nil,
        nielsenPcmToId3Tagging: NielsenPcmToId3TaggingState? = nil
    )
    {
        self.distributorId = distributorId
        self.nielsenPcmToId3Tagging = nielsenPcmToId3Tagging
    }
}

/// State of Nielsen PCM to ID3 tagging
public enum NielsenPcmToId3TaggingState {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension NielsenPcmToId3TaggingState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NielsenPcmToId3TaggingState] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NielsenPcmToId3TaggingState(rawValue: rawValue) ?? NielsenPcmToId3TaggingState.sdkUnknown(rawValue)
    }
}

extension NotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NotFoundException(message: \(String(describing: message)))"}
}

extension NotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for NotFoundException
public struct NotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// Placeholder documentation for __string
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Equatable {
    public let message: String?
}

extension NotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Offering: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case durationUnits = "durationUnits"
        case fixedPrice = "fixedPrice"
        case offeringDescription = "offeringDescription"
        case offeringId = "offeringId"
        case offeringType = "offeringType"
        case region = "region"
        case resourceSpecification = "resourceSpecification"
        case usagePrice = "usagePrice"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let currencyCode = currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let durationUnits = durationUnits {
            try encodeContainer.encode(durationUnits.rawValue, forKey: .durationUnits)
        }
        if fixedPrice != 0.0 {
            try encodeContainer.encode(fixedPrice, forKey: .fixedPrice)
        }
        if let offeringDescription = offeringDescription {
            try encodeContainer.encode(offeringDescription, forKey: .offeringDescription)
        }
        if let offeringId = offeringId {
            try encodeContainer.encode(offeringId, forKey: .offeringId)
        }
        if let offeringType = offeringType {
            try encodeContainer.encode(offeringType.rawValue, forKey: .offeringType)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let resourceSpecification = resourceSpecification {
            try encodeContainer.encode(resourceSpecification, forKey: .resourceSpecification)
        }
        if usagePrice != 0.0 {
            try encodeContainer.encode(usagePrice, forKey: .usagePrice)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let durationUnitsDecoded = try containerValues.decodeIfPresent(OfferingDurationUnits.self, forKey: .durationUnits)
        durationUnits = durationUnitsDecoded
        let fixedPriceDecoded = try containerValues.decode(Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let offeringDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringDescription)
        offeringDescription = offeringDescriptionDecoded
        let offeringIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(OfferingType.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let resourceSpecificationDecoded = try containerValues.decodeIfPresent(ReservationResourceSpecification.self, forKey: .resourceSpecification)
        resourceSpecification = resourceSpecificationDecoded
        let usagePriceDecoded = try containerValues.decode(Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
    }
}

extension Offering: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Offering(arn: \(String(describing: arn)), currencyCode: \(String(describing: currencyCode)), duration: \(String(describing: duration)), durationUnits: \(String(describing: durationUnits)), fixedPrice: \(String(describing: fixedPrice)), offeringDescription: \(String(describing: offeringDescription)), offeringId: \(String(describing: offeringId)), offeringType: \(String(describing: offeringType)), region: \(String(describing: region)), resourceSpecification: \(String(describing: resourceSpecification)), usagePrice: \(String(describing: usagePrice)))"}
}

/// Reserved resources available for purchase
public struct Offering: Equatable {
    /// Unique offering ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:offering:87654321'
    public let arn: String?
    /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
    public let currencyCode: String?
    /// Lease duration, e.g. '12'
    public let duration: Int
    /// Units for duration, e.g. 'MONTHS'
    public let durationUnits: OfferingDurationUnits?
    /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
    public let fixedPrice: Double
    /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
    public let offeringDescription: String?
    /// Unique offering ID, e.g. '87654321'
    public let offeringId: String?
    /// Offering type, e.g. 'NO_UPFRONT'
    public let offeringType: OfferingType?
    /// AWS region, e.g. 'us-west-2'
    public let region: String?
    /// Resource configuration details
    public let resourceSpecification: ReservationResourceSpecification?
    /// Recurring usage charge for each reserved resource, e.g. '157.0'
    public let usagePrice: Double

    public init (
        arn: String? = nil,
        currencyCode: String? = nil,
        duration: Int = 0,
        durationUnits: OfferingDurationUnits? = nil,
        fixedPrice: Double = 0.0,
        offeringDescription: String? = nil,
        offeringId: String? = nil,
        offeringType: OfferingType? = nil,
        region: String? = nil,
        resourceSpecification: ReservationResourceSpecification? = nil,
        usagePrice: Double = 0.0
    )
    {
        self.arn = arn
        self.currencyCode = currencyCode
        self.duration = duration
        self.durationUnits = durationUnits
        self.fixedPrice = fixedPrice
        self.offeringDescription = offeringDescription
        self.offeringId = offeringId
        self.offeringType = offeringType
        self.region = region
        self.resourceSpecification = resourceSpecification
        self.usagePrice = usagePrice
    }
}

/// Units for duration, e.g. 'MONTHS'
public enum OfferingDurationUnits {
    case months
    case sdkUnknown(String)
}

extension OfferingDurationUnits : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OfferingDurationUnits] {
        return [
            .months,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .months: return "MONTHS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OfferingDurationUnits(rawValue: rawValue) ?? OfferingDurationUnits.sdkUnknown(rawValue)
    }
}

/// Offering type, e.g. 'NO_UPFRONT'
public enum OfferingType {
    case noUpfront
    case sdkUnknown(String)
}

extension OfferingType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OfferingType] {
        return [
            .noUpfront,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noUpfront: return "NO_UPFRONT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OfferingType(rawValue: rawValue) ?? OfferingType.sdkUnknown(rawValue)
    }
}

extension Output: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioDescriptionNames = "audioDescriptionNames"
        case captionDescriptionNames = "captionDescriptionNames"
        case outputName = "outputName"
        case outputSettings = "outputSettings"
        case videoDescriptionName = "videoDescriptionName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDescriptionNames = audioDescriptionNames {
            var audioDescriptionNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioDescriptionNames)
            for __listof__string0 in audioDescriptionNames {
                try audioDescriptionNamesContainer.encode(__listof__string0)
            }
        }
        if let captionDescriptionNames = captionDescriptionNames {
            var captionDescriptionNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionDescriptionNames)
            for __listof__string0 in captionDescriptionNames {
                try captionDescriptionNamesContainer.encode(__listof__string0)
            }
        }
        if let outputName = outputName {
            try encodeContainer.encode(outputName, forKey: .outputName)
        }
        if let outputSettings = outputSettings {
            try encodeContainer.encode(outputSettings, forKey: .outputSettings)
        }
        if let videoDescriptionName = videoDescriptionName {
            try encodeContainer.encode(videoDescriptionName, forKey: .videoDescriptionName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDescriptionNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .audioDescriptionNames)
        var audioDescriptionNamesDecoded0:[String]? = nil
        if let audioDescriptionNamesContainer = audioDescriptionNamesContainer {
            audioDescriptionNamesDecoded0 = [String]()
            for string0 in audioDescriptionNamesContainer {
                if let string0 = string0 {
                    audioDescriptionNamesDecoded0?.append(string0)
                }
            }
        }
        audioDescriptionNames = audioDescriptionNamesDecoded0
        let captionDescriptionNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .captionDescriptionNames)
        var captionDescriptionNamesDecoded0:[String]? = nil
        if let captionDescriptionNamesContainer = captionDescriptionNamesContainer {
            captionDescriptionNamesDecoded0 = [String]()
            for string0 in captionDescriptionNamesContainer {
                if let string0 = string0 {
                    captionDescriptionNamesDecoded0?.append(string0)
                }
            }
        }
        captionDescriptionNames = captionDescriptionNamesDecoded0
        let outputNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputName)
        outputName = outputNameDecoded
        let outputSettingsDecoded = try containerValues.decodeIfPresent(OutputSettings.self, forKey: .outputSettings)
        outputSettings = outputSettingsDecoded
        let videoDescriptionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .videoDescriptionName)
        videoDescriptionName = videoDescriptionNameDecoded
    }
}

extension Output: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Output(audioDescriptionNames: \(String(describing: audioDescriptionNames)), captionDescriptionNames: \(String(describing: captionDescriptionNames)), outputName: \(String(describing: outputName)), outputSettings: \(String(describing: outputSettings)), videoDescriptionName: \(String(describing: videoDescriptionName)))"}
}

/// Output settings. There can be multiple outputs within a group.
public struct Output: Equatable {
    /// The names of the AudioDescriptions used as audio sources for this output.
    public let audioDescriptionNames: [String]?
    /// The names of the CaptionDescriptions used as caption sources for this output.
    public let captionDescriptionNames: [String]?
    /// The name used to identify an output.
    public let outputName: String?
    /// Output type-specific settings.
    public let outputSettings: OutputSettings?
    /// The name of the VideoDescription used as the source for this output.
    public let videoDescriptionName: String?

    public init (
        audioDescriptionNames: [String]? = nil,
        captionDescriptionNames: [String]? = nil,
        outputName: String? = nil,
        outputSettings: OutputSettings? = nil,
        videoDescriptionName: String? = nil
    )
    {
        self.audioDescriptionNames = audioDescriptionNames
        self.captionDescriptionNames = captionDescriptionNames
        self.outputName = outputName
        self.outputSettings = outputSettings
        self.videoDescriptionName = videoDescriptionName
    }
}

extension OutputDestination: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "id"
        case mediaPackageSettings = "mediaPackageSettings"
        case multiplexSettings = "multiplexSettings"
        case settings = "settings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let mediaPackageSettings = mediaPackageSettings {
            var mediaPackageSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaPackageSettings)
            for __listofmediapackageoutputdestinationsettings0 in mediaPackageSettings {
                try mediaPackageSettingsContainer.encode(__listofmediapackageoutputdestinationsettings0)
            }
        }
        if let multiplexSettings = multiplexSettings {
            try encodeContainer.encode(multiplexSettings, forKey: .multiplexSettings)
        }
        if let settings = settings {
            var settingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .settings)
            for __listofoutputdestinationsettings0 in settings {
                try settingsContainer.encode(__listofoutputdestinationsettings0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let mediaPackageSettingsContainer = try containerValues.decodeIfPresent([MediaPackageOutputDestinationSettings?].self, forKey: .mediaPackageSettings)
        var mediaPackageSettingsDecoded0:[MediaPackageOutputDestinationSettings]? = nil
        if let mediaPackageSettingsContainer = mediaPackageSettingsContainer {
            mediaPackageSettingsDecoded0 = [MediaPackageOutputDestinationSettings]()
            for structure0 in mediaPackageSettingsContainer {
                if let structure0 = structure0 {
                    mediaPackageSettingsDecoded0?.append(structure0)
                }
            }
        }
        mediaPackageSettings = mediaPackageSettingsDecoded0
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MultiplexProgramChannelDestinationSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let settingsContainer = try containerValues.decodeIfPresent([OutputDestinationSettings?].self, forKey: .settings)
        var settingsDecoded0:[OutputDestinationSettings]? = nil
        if let settingsContainer = settingsContainer {
            settingsDecoded0 = [OutputDestinationSettings]()
            for structure0 in settingsContainer {
                if let structure0 = structure0 {
                    settingsDecoded0?.append(structure0)
                }
            }
        }
        settings = settingsDecoded0
    }
}

extension OutputDestination: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OutputDestination(id: \(String(describing: id)), mediaPackageSettings: \(String(describing: mediaPackageSettings)), multiplexSettings: \(String(describing: multiplexSettings)), settings: \(String(describing: settings)))"}
}

/// Placeholder documentation for OutputDestination
public struct OutputDestination: Equatable {
    /// User-specified id. This is used in an output group or an output.
    public let id: String?
    /// Destination settings for a MediaPackage output; one destination for both encoders.
    public let mediaPackageSettings: [MediaPackageOutputDestinationSettings]?
    /// Destination settings for a Multiplex output; one destination for both encoders.
    public let multiplexSettings: MultiplexProgramChannelDestinationSettings?
    /// Destination settings for a standard output; one destination for each redundant encoder.
    public let settings: [OutputDestinationSettings]?

    public init (
        id: String? = nil,
        mediaPackageSettings: [MediaPackageOutputDestinationSettings]? = nil,
        multiplexSettings: MultiplexProgramChannelDestinationSettings? = nil,
        settings: [OutputDestinationSettings]? = nil
    )
    {
        self.id = id
        self.mediaPackageSettings = mediaPackageSettings
        self.multiplexSettings = multiplexSettings
        self.settings = settings
    }
}

extension OutputDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case passwordParam = "passwordParam"
        case streamName = "streamName"
        case url = "url"
        case username = "username"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let passwordParam = passwordParam {
            try encodeContainer.encode(passwordParam, forKey: .passwordParam)
        }
        if let streamName = streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let passwordParamDecoded = try containerValues.decodeIfPresent(String.self, forKey: .passwordParam)
        passwordParam = passwordParamDecoded
        let streamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension OutputDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OutputDestinationSettings(passwordParam: \(String(describing: passwordParam)), streamName: \(String(describing: streamName)), url: \(String(describing: url)), username: \(String(describing: username)))"}
}

/// Placeholder documentation for OutputDestinationSettings
public struct OutputDestinationSettings: Equatable {
    /// key used to extract the password from EC2 Parameter store
    public let passwordParam: String?
    /// Stream name for RTMP destinations (URLs of type rtmp://)
    public let streamName: String?
    /// A URL specifying a destination
    public let url: String?
    /// username for destination
    public let username: String?

    public init (
        passwordParam: String? = nil,
        streamName: String? = nil,
        url: String? = nil,
        username: String? = nil
    )
    {
        self.passwordParam = passwordParam
        self.streamName = streamName
        self.url = url
        self.username = username
    }
}

extension OutputGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "name"
        case outputGroupSettings = "outputGroupSettings"
        case outputs = "outputs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputGroupSettings = outputGroupSettings {
            try encodeContainer.encode(outputGroupSettings, forKey: .outputGroupSettings)
        }
        if let outputs = outputs {
            var outputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputs)
            for __listofoutput0 in outputs {
                try outputsContainer.encode(__listofoutput0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let outputGroupSettingsDecoded = try containerValues.decodeIfPresent(OutputGroupSettings.self, forKey: .outputGroupSettings)
        outputGroupSettings = outputGroupSettingsDecoded
        let outputsContainer = try containerValues.decodeIfPresent([Output?].self, forKey: .outputs)
        var outputsDecoded0:[Output]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [Output]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
    }
}

extension OutputGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OutputGroup(name: \(String(describing: name)), outputGroupSettings: \(String(describing: outputGroupSettings)), outputs: \(String(describing: outputs)))"}
}

/// Output groups for this Live Event. Output groups contain information about where streams should be distributed.
public struct OutputGroup: Equatable {
    /// Custom output group name optionally defined by the user.  Only letters, numbers, and the underscore character allowed; only 32 characters allowed.
    public let name: String?
    /// Settings associated with the output group.
    public let outputGroupSettings: OutputGroupSettings?
    /// Placeholder documentation for __listOfOutput
    public let outputs: [Output]?

    public init (
        name: String? = nil,
        outputGroupSettings: OutputGroupSettings? = nil,
        outputs: [Output]? = nil
    )
    {
        self.name = name
        self.outputGroupSettings = outputGroupSettings
        self.outputs = outputs
    }
}

extension OutputGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case archiveGroupSettings = "archiveGroupSettings"
        case frameCaptureGroupSettings = "frameCaptureGroupSettings"
        case hlsGroupSettings = "hlsGroupSettings"
        case mediaPackageGroupSettings = "mediaPackageGroupSettings"
        case msSmoothGroupSettings = "msSmoothGroupSettings"
        case multiplexGroupSettings = "multiplexGroupSettings"
        case rtmpGroupSettings = "rtmpGroupSettings"
        case udpGroupSettings = "udpGroupSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archiveGroupSettings = archiveGroupSettings {
            try encodeContainer.encode(archiveGroupSettings, forKey: .archiveGroupSettings)
        }
        if let frameCaptureGroupSettings = frameCaptureGroupSettings {
            try encodeContainer.encode(frameCaptureGroupSettings, forKey: .frameCaptureGroupSettings)
        }
        if let hlsGroupSettings = hlsGroupSettings {
            try encodeContainer.encode(hlsGroupSettings, forKey: .hlsGroupSettings)
        }
        if let mediaPackageGroupSettings = mediaPackageGroupSettings {
            try encodeContainer.encode(mediaPackageGroupSettings, forKey: .mediaPackageGroupSettings)
        }
        if let msSmoothGroupSettings = msSmoothGroupSettings {
            try encodeContainer.encode(msSmoothGroupSettings, forKey: .msSmoothGroupSettings)
        }
        if let multiplexGroupSettings = multiplexGroupSettings {
            try encodeContainer.encode(multiplexGroupSettings, forKey: .multiplexGroupSettings)
        }
        if let rtmpGroupSettings = rtmpGroupSettings {
            try encodeContainer.encode(rtmpGroupSettings, forKey: .rtmpGroupSettings)
        }
        if let udpGroupSettings = udpGroupSettings {
            try encodeContainer.encode(udpGroupSettings, forKey: .udpGroupSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archiveGroupSettingsDecoded = try containerValues.decodeIfPresent(ArchiveGroupSettings.self, forKey: .archiveGroupSettings)
        archiveGroupSettings = archiveGroupSettingsDecoded
        let frameCaptureGroupSettingsDecoded = try containerValues.decodeIfPresent(FrameCaptureGroupSettings.self, forKey: .frameCaptureGroupSettings)
        frameCaptureGroupSettings = frameCaptureGroupSettingsDecoded
        let hlsGroupSettingsDecoded = try containerValues.decodeIfPresent(HlsGroupSettings.self, forKey: .hlsGroupSettings)
        hlsGroupSettings = hlsGroupSettingsDecoded
        let mediaPackageGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaPackageGroupSettings.self, forKey: .mediaPackageGroupSettings)
        mediaPackageGroupSettings = mediaPackageGroupSettingsDecoded
        let msSmoothGroupSettingsDecoded = try containerValues.decodeIfPresent(MsSmoothGroupSettings.self, forKey: .msSmoothGroupSettings)
        msSmoothGroupSettings = msSmoothGroupSettingsDecoded
        let multiplexGroupSettingsDecoded = try containerValues.decodeIfPresent(MultiplexGroupSettings.self, forKey: .multiplexGroupSettings)
        multiplexGroupSettings = multiplexGroupSettingsDecoded
        let rtmpGroupSettingsDecoded = try containerValues.decodeIfPresent(RtmpGroupSettings.self, forKey: .rtmpGroupSettings)
        rtmpGroupSettings = rtmpGroupSettingsDecoded
        let udpGroupSettingsDecoded = try containerValues.decodeIfPresent(UdpGroupSettings.self, forKey: .udpGroupSettings)
        udpGroupSettings = udpGroupSettingsDecoded
    }
}

extension OutputGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OutputGroupSettings(archiveGroupSettings: \(String(describing: archiveGroupSettings)), frameCaptureGroupSettings: \(String(describing: frameCaptureGroupSettings)), hlsGroupSettings: \(String(describing: hlsGroupSettings)), mediaPackageGroupSettings: \(String(describing: mediaPackageGroupSettings)), msSmoothGroupSettings: \(String(describing: msSmoothGroupSettings)), multiplexGroupSettings: \(String(describing: multiplexGroupSettings)), rtmpGroupSettings: \(String(describing: rtmpGroupSettings)), udpGroupSettings: \(String(describing: udpGroupSettings)))"}
}

/// Output Group Settings
public struct OutputGroupSettings: Equatable {
    /// Archive Group Settings
    public let archiveGroupSettings: ArchiveGroupSettings?
    /// Frame Capture Group Settings
    public let frameCaptureGroupSettings: FrameCaptureGroupSettings?
    /// Hls Group Settings
    public let hlsGroupSettings: HlsGroupSettings?
    /// Media Package Group Settings
    public let mediaPackageGroupSettings: MediaPackageGroupSettings?
    /// Ms Smooth Group Settings
    public let msSmoothGroupSettings: MsSmoothGroupSettings?
    /// Multiplex Group Settings
    public let multiplexGroupSettings: MultiplexGroupSettings?
    /// Rtmp Group Settings
    public let rtmpGroupSettings: RtmpGroupSettings?
    /// Udp Group Settings
    public let udpGroupSettings: UdpGroupSettings?

    public init (
        archiveGroupSettings: ArchiveGroupSettings? = nil,
        frameCaptureGroupSettings: FrameCaptureGroupSettings? = nil,
        hlsGroupSettings: HlsGroupSettings? = nil,
        mediaPackageGroupSettings: MediaPackageGroupSettings? = nil,
        msSmoothGroupSettings: MsSmoothGroupSettings? = nil,
        multiplexGroupSettings: MultiplexGroupSettings? = nil,
        rtmpGroupSettings: RtmpGroupSettings? = nil,
        udpGroupSettings: UdpGroupSettings? = nil
    )
    {
        self.archiveGroupSettings = archiveGroupSettings
        self.frameCaptureGroupSettings = frameCaptureGroupSettings
        self.hlsGroupSettings = hlsGroupSettings
        self.mediaPackageGroupSettings = mediaPackageGroupSettings
        self.msSmoothGroupSettings = msSmoothGroupSettings
        self.multiplexGroupSettings = multiplexGroupSettings
        self.rtmpGroupSettings = rtmpGroupSettings
        self.udpGroupSettings = udpGroupSettings
    }
}

extension OutputLocationRef: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationRefId = "destinationRefId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationRefId = destinationRefId {
            try encodeContainer.encode(destinationRefId, forKey: .destinationRefId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationRefIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationRefId)
        destinationRefId = destinationRefIdDecoded
    }
}

extension OutputLocationRef: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OutputLocationRef(destinationRefId: \(String(describing: destinationRefId)))"}
}

/// Reference to an OutputDestination ID defined in the channel
public struct OutputLocationRef: Equatable {
    /// Placeholder documentation for __string
    public let destinationRefId: String?

    public init (
        destinationRefId: String? = nil
    )
    {
        self.destinationRefId = destinationRefId
    }
}

extension OutputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case archiveOutputSettings = "archiveOutputSettings"
        case frameCaptureOutputSettings = "frameCaptureOutputSettings"
        case hlsOutputSettings = "hlsOutputSettings"
        case mediaPackageOutputSettings = "mediaPackageOutputSettings"
        case msSmoothOutputSettings = "msSmoothOutputSettings"
        case multiplexOutputSettings = "multiplexOutputSettings"
        case rtmpOutputSettings = "rtmpOutputSettings"
        case udpOutputSettings = "udpOutputSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archiveOutputSettings = archiveOutputSettings {
            try encodeContainer.encode(archiveOutputSettings, forKey: .archiveOutputSettings)
        }
        if let frameCaptureOutputSettings = frameCaptureOutputSettings {
            try encodeContainer.encode(frameCaptureOutputSettings, forKey: .frameCaptureOutputSettings)
        }
        if let hlsOutputSettings = hlsOutputSettings {
            try encodeContainer.encode(hlsOutputSettings, forKey: .hlsOutputSettings)
        }
        if let mediaPackageOutputSettings = mediaPackageOutputSettings {
            try encodeContainer.encode(mediaPackageOutputSettings, forKey: .mediaPackageOutputSettings)
        }
        if let msSmoothOutputSettings = msSmoothOutputSettings {
            try encodeContainer.encode(msSmoothOutputSettings, forKey: .msSmoothOutputSettings)
        }
        if let multiplexOutputSettings = multiplexOutputSettings {
            try encodeContainer.encode(multiplexOutputSettings, forKey: .multiplexOutputSettings)
        }
        if let rtmpOutputSettings = rtmpOutputSettings {
            try encodeContainer.encode(rtmpOutputSettings, forKey: .rtmpOutputSettings)
        }
        if let udpOutputSettings = udpOutputSettings {
            try encodeContainer.encode(udpOutputSettings, forKey: .udpOutputSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archiveOutputSettingsDecoded = try containerValues.decodeIfPresent(ArchiveOutputSettings.self, forKey: .archiveOutputSettings)
        archiveOutputSettings = archiveOutputSettingsDecoded
        let frameCaptureOutputSettingsDecoded = try containerValues.decodeIfPresent(FrameCaptureOutputSettings.self, forKey: .frameCaptureOutputSettings)
        frameCaptureOutputSettings = frameCaptureOutputSettingsDecoded
        let hlsOutputSettingsDecoded = try containerValues.decodeIfPresent(HlsOutputSettings.self, forKey: .hlsOutputSettings)
        hlsOutputSettings = hlsOutputSettingsDecoded
        let mediaPackageOutputSettingsDecoded = try containerValues.decodeIfPresent(MediaPackageOutputSettings.self, forKey: .mediaPackageOutputSettings)
        mediaPackageOutputSettings = mediaPackageOutputSettingsDecoded
        let msSmoothOutputSettingsDecoded = try containerValues.decodeIfPresent(MsSmoothOutputSettings.self, forKey: .msSmoothOutputSettings)
        msSmoothOutputSettings = msSmoothOutputSettingsDecoded
        let multiplexOutputSettingsDecoded = try containerValues.decodeIfPresent(MultiplexOutputSettings.self, forKey: .multiplexOutputSettings)
        multiplexOutputSettings = multiplexOutputSettingsDecoded
        let rtmpOutputSettingsDecoded = try containerValues.decodeIfPresent(RtmpOutputSettings.self, forKey: .rtmpOutputSettings)
        rtmpOutputSettings = rtmpOutputSettingsDecoded
        let udpOutputSettingsDecoded = try containerValues.decodeIfPresent(UdpOutputSettings.self, forKey: .udpOutputSettings)
        udpOutputSettings = udpOutputSettingsDecoded
    }
}

extension OutputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OutputSettings(archiveOutputSettings: \(String(describing: archiveOutputSettings)), frameCaptureOutputSettings: \(String(describing: frameCaptureOutputSettings)), hlsOutputSettings: \(String(describing: hlsOutputSettings)), mediaPackageOutputSettings: \(String(describing: mediaPackageOutputSettings)), msSmoothOutputSettings: \(String(describing: msSmoothOutputSettings)), multiplexOutputSettings: \(String(describing: multiplexOutputSettings)), rtmpOutputSettings: \(String(describing: rtmpOutputSettings)), udpOutputSettings: \(String(describing: udpOutputSettings)))"}
}

/// Output Settings
public struct OutputSettings: Equatable {
    /// Archive Output Settings
    public let archiveOutputSettings: ArchiveOutputSettings?
    /// Frame Capture Output Settings
    public let frameCaptureOutputSettings: FrameCaptureOutputSettings?
    /// Hls Output Settings
    public let hlsOutputSettings: HlsOutputSettings?
    /// Media Package Output Settings
    public let mediaPackageOutputSettings: MediaPackageOutputSettings?
    /// Ms Smooth Output Settings
    public let msSmoothOutputSettings: MsSmoothOutputSettings?
    /// Multiplex Output Settings
    public let multiplexOutputSettings: MultiplexOutputSettings?
    /// Rtmp Output Settings
    public let rtmpOutputSettings: RtmpOutputSettings?
    /// Udp Output Settings
    public let udpOutputSettings: UdpOutputSettings?

    public init (
        archiveOutputSettings: ArchiveOutputSettings? = nil,
        frameCaptureOutputSettings: FrameCaptureOutputSettings? = nil,
        hlsOutputSettings: HlsOutputSettings? = nil,
        mediaPackageOutputSettings: MediaPackageOutputSettings? = nil,
        msSmoothOutputSettings: MsSmoothOutputSettings? = nil,
        multiplexOutputSettings: MultiplexOutputSettings? = nil,
        rtmpOutputSettings: RtmpOutputSettings? = nil,
        udpOutputSettings: UdpOutputSettings? = nil
    )
    {
        self.archiveOutputSettings = archiveOutputSettings
        self.frameCaptureOutputSettings = frameCaptureOutputSettings
        self.hlsOutputSettings = hlsOutputSettings
        self.mediaPackageOutputSettings = mediaPackageOutputSettings
        self.msSmoothOutputSettings = msSmoothOutputSettings
        self.multiplexOutputSettings = multiplexOutputSettings
        self.rtmpOutputSettings = rtmpOutputSettings
        self.udpOutputSettings = udpOutputSettings
    }
}

extension PassThroughSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension PassThroughSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PassThroughSettings()"}
}

/// Pass Through Settings
public struct PassThroughSettings: Equatable {

    public init() {}
}

extension PauseStateScheduleActionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pipelines = "pipelines"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelines = pipelines {
            var pipelinesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelines)
            for __listofpipelinepausestatesettings0 in pipelines {
                try pipelinesContainer.encode(__listofpipelinepausestatesettings0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelinesContainer = try containerValues.decodeIfPresent([PipelinePauseStateSettings?].self, forKey: .pipelines)
        var pipelinesDecoded0:[PipelinePauseStateSettings]? = nil
        if let pipelinesContainer = pipelinesContainer {
            pipelinesDecoded0 = [PipelinePauseStateSettings]()
            for structure0 in pipelinesContainer {
                if let structure0 = structure0 {
                    pipelinesDecoded0?.append(structure0)
                }
            }
        }
        pipelines = pipelinesDecoded0
    }
}

extension PauseStateScheduleActionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PauseStateScheduleActionSettings(pipelines: \(String(describing: pipelines)))"}
}

/// Settings for the action to set pause state of a channel.
public struct PauseStateScheduleActionSettings: Equatable {
    /// Placeholder documentation for __listOfPipelinePauseStateSettings
    public let pipelines: [PipelinePauseStateSettings]?

    public init (
        pipelines: [PipelinePauseStateSettings]? = nil
    )
    {
        self.pipelines = pipelines
    }
}

extension PipelineDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activeInputAttachmentName = "activeInputAttachmentName"
        case activeInputSwitchActionName = "activeInputSwitchActionName"
        case activeMotionGraphicsActionName = "activeMotionGraphicsActionName"
        case activeMotionGraphicsUri = "activeMotionGraphicsUri"
        case pipelineId = "pipelineId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeInputAttachmentName = activeInputAttachmentName {
            try encodeContainer.encode(activeInputAttachmentName, forKey: .activeInputAttachmentName)
        }
        if let activeInputSwitchActionName = activeInputSwitchActionName {
            try encodeContainer.encode(activeInputSwitchActionName, forKey: .activeInputSwitchActionName)
        }
        if let activeMotionGraphicsActionName = activeMotionGraphicsActionName {
            try encodeContainer.encode(activeMotionGraphicsActionName, forKey: .activeMotionGraphicsActionName)
        }
        if let activeMotionGraphicsUri = activeMotionGraphicsUri {
            try encodeContainer.encode(activeMotionGraphicsUri, forKey: .activeMotionGraphicsUri)
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeInputAttachmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activeInputAttachmentName)
        activeInputAttachmentName = activeInputAttachmentNameDecoded
        let activeInputSwitchActionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activeInputSwitchActionName)
        activeInputSwitchActionName = activeInputSwitchActionNameDecoded
        let activeMotionGraphicsActionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activeMotionGraphicsActionName)
        activeMotionGraphicsActionName = activeMotionGraphicsActionNameDecoded
        let activeMotionGraphicsUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activeMotionGraphicsUri)
        activeMotionGraphicsUri = activeMotionGraphicsUriDecoded
        let pipelineIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
    }
}

extension PipelineDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PipelineDetail(activeInputAttachmentName: \(String(describing: activeInputAttachmentName)), activeInputSwitchActionName: \(String(describing: activeInputSwitchActionName)), activeMotionGraphicsActionName: \(String(describing: activeMotionGraphicsActionName)), activeMotionGraphicsUri: \(String(describing: activeMotionGraphicsUri)), pipelineId: \(String(describing: pipelineId)))"}
}

/// Runtime details of a pipeline when a channel is running.
public struct PipelineDetail: Equatable {
    /// The name of the active input attachment currently being ingested by this pipeline.
    public let activeInputAttachmentName: String?
    /// The name of the input switch schedule action that occurred most recently and that resulted in the switch to the current input attachment for this pipeline.
    public let activeInputSwitchActionName: String?
    /// The name of the motion graphics activate action that occurred most recently and that resulted in the current graphics URI for this pipeline.
    public let activeMotionGraphicsActionName: String?
    /// The current URI being used for HTML5 motion graphics for this pipeline.
    public let activeMotionGraphicsUri: String?
    /// Pipeline ID
    public let pipelineId: String?

    public init (
        activeInputAttachmentName: String? = nil,
        activeInputSwitchActionName: String? = nil,
        activeMotionGraphicsActionName: String? = nil,
        activeMotionGraphicsUri: String? = nil,
        pipelineId: String? = nil
    )
    {
        self.activeInputAttachmentName = activeInputAttachmentName
        self.activeInputSwitchActionName = activeInputSwitchActionName
        self.activeMotionGraphicsActionName = activeMotionGraphicsActionName
        self.activeMotionGraphicsUri = activeMotionGraphicsUri
        self.pipelineId = pipelineId
    }
}

/// Pipeline ID
public enum PipelineId {
    case pipeline0
    case pipeline1
    case sdkUnknown(String)
}

extension PipelineId : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PipelineId] {
        return [
            .pipeline0,
            .pipeline1,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .pipeline0: return "PIPELINE_0"
        case .pipeline1: return "PIPELINE_1"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PipelineId(rawValue: rawValue) ?? PipelineId.sdkUnknown(rawValue)
    }
}

extension PipelinePauseStateSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pipelineId = "pipelineId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId.rawValue, forKey: .pipelineId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(PipelineId.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
    }
}

extension PipelinePauseStateSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PipelinePauseStateSettings(pipelineId: \(String(describing: pipelineId)))"}
}

/// Settings for pausing a pipeline.
public struct PipelinePauseStateSettings: Equatable {
    /// Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").
    public let pipelineId: PipelineId?

    public init (
        pipelineId: PipelineId? = nil
    )
    {
        self.pipelineId = pipelineId
    }
}

/// Indicates which pipeline is preferred by the multiplex for program ingest.
/// If set to \"PIPELINE_0\" or \"PIPELINE_1\" and an unhealthy ingest causes the multiplex to switch to the non-preferred pipeline,
/// it will switch back once that ingest is healthy again. If set to \"CURRENTLY_ACTIVE\",
/// it will not switch back to the other pipeline based on it recovering to a healthy state,
/// it will only switch if the active pipeline becomes unhealthy.
public enum PreferredChannelPipeline {
    case currentlyActive
    case pipeline0
    case pipeline1
    case sdkUnknown(String)
}

extension PreferredChannelPipeline : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PreferredChannelPipeline] {
        return [
            .currentlyActive,
            .pipeline0,
            .pipeline1,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .currentlyActive: return "CURRENTLY_ACTIVE"
        case .pipeline0: return "PIPELINE_0"
        case .pipeline1: return "PIPELINE_1"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PreferredChannelPipeline(rawValue: rawValue) ?? PreferredChannelPipeline.sdkUnknown(rawValue)
    }
}

public struct PurchaseOfferingInputBodyMiddleware: Middleware {
    public let id: String = "PurchaseOfferingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PurchaseOfferingInput>,
                  next: H) -> Swift.Result<OperationOutput<PurchaseOfferingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PurchaseOfferingInput>
    public typealias MOutput = OperationOutput<PurchaseOfferingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PurchaseOfferingOutputError>
}

extension PurchaseOfferingInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PurchaseOfferingInput(count: \(String(describing: count)), name: \(String(describing: name)), offeringId: \(String(describing: offeringId)), requestId: \(String(describing: requestId)), start: \(String(describing: start)), tags: \(String(describing: tags)))"}
}

extension PurchaseOfferingInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case count = "count"
        case name = "name"
        case requestId = "requestId"
        case start = "start"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let requestId = requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let start = start {
            try encodeContainer.encode(start, forKey: .start)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct PurchaseOfferingInputHeadersMiddleware: Middleware {
    public let id: String = "PurchaseOfferingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PurchaseOfferingInput>,
                  next: H) -> Swift.Result<OperationOutput<PurchaseOfferingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PurchaseOfferingInput>
    public typealias MOutput = OperationOutput<PurchaseOfferingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PurchaseOfferingOutputError>
}

public struct PurchaseOfferingInputQueryItemMiddleware: Middleware {
    public let id: String = "PurchaseOfferingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PurchaseOfferingInput>,
                  next: H) -> Swift.Result<OperationOutput<PurchaseOfferingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PurchaseOfferingInput>
    public typealias MOutput = OperationOutput<PurchaseOfferingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PurchaseOfferingOutputError>
}

/// Placeholder documentation for PurchaseOfferingRequest
public struct PurchaseOfferingInput: Equatable {
    /// Number of resources
    public let count: Int
    /// Name for the new reservation
    public let name: String?
    /// Offering to purchase, e.g. '87654321'
    public let offeringId: String?
    /// Unique request ID to be specified. This is needed to prevent retries from creating multiple resources.
    public var requestId: String?
    /// Requested reservation start time (UTC) in ISO-8601 format. The specified time must be between the first day of the current month and one year from now. If no value is given, the default is now.
    public let start: String?
    /// A collection of key-value pairs
    public let tags: [String:String]?

    public init (
        count: Int = 0,
        name: String? = nil,
        offeringId: String? = nil,
        requestId: String? = nil,
        start: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.count = count
        self.name = name
        self.offeringId = offeringId
        self.requestId = requestId
        self.start = start
        self.tags = tags
    }
}

struct PurchaseOfferingInputBody: Equatable {
    public let count: Int
    public let name: String?
    public let requestId: String?
    public let start: String?
    public let tags: [String:String]?
}

extension PurchaseOfferingInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case count = "count"
        case name = "name"
        case requestId = "requestId"
        case start = "start"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let startDecoded = try containerValues.decodeIfPresent(String.self, forKey: .start)
        start = startDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PurchaseOfferingOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PurchaseOfferingOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PurchaseOfferingOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PurchaseOfferingOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PurchaseOfferingOutputResponse(reservation: \(String(describing: reservation)))"}
}

extension PurchaseOfferingOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PurchaseOfferingOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.reservation = output.reservation
        } else {
            self.reservation = nil
        }
    }
}

/// Placeholder documentation for PurchaseOfferingResponse
public struct PurchaseOfferingOutputResponse: Equatable {
    /// Reserved resources available to use
    public let reservation: Reservation?

    public init (
        reservation: Reservation? = nil
    )
    {
        self.reservation = reservation
    }
}

struct PurchaseOfferingOutputResponseBody: Equatable {
    public let reservation: Reservation?
}

extension PurchaseOfferingOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case reservation = "reservation"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservationDecoded = try containerValues.decodeIfPresent(Reservation.self, forKey: .reservation)
        reservation = reservationDecoded
    }
}

extension RawSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension RawSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RawSettings()"}
}

/// Raw Settings
public struct RawSettings: Equatable {

    public init() {}
}

extension Rec601Settings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension Rec601Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Rec601Settings()"}
}

/// Rec601 Settings
public struct Rec601Settings: Equatable {

    public init() {}
}

extension Rec709Settings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension Rec709Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Rec709Settings()"}
}

/// Rec709 Settings
public struct Rec709Settings: Equatable {

    public init() {}
}

extension RejectInputDeviceTransferInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RejectInputDeviceTransferInput(inputDeviceId: \(String(describing: inputDeviceId)))"}
}

extension RejectInputDeviceTransferInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct RejectInputDeviceTransferInputHeadersMiddleware: Middleware {
    public let id: String = "RejectInputDeviceTransferInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RejectInputDeviceTransferInput>,
                  next: H) -> Swift.Result<OperationOutput<RejectInputDeviceTransferOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RejectInputDeviceTransferInput>
    public typealias MOutput = OperationOutput<RejectInputDeviceTransferOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RejectInputDeviceTransferOutputError>
}

public struct RejectInputDeviceTransferInputQueryItemMiddleware: Middleware {
    public let id: String = "RejectInputDeviceTransferInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RejectInputDeviceTransferInput>,
                  next: H) -> Swift.Result<OperationOutput<RejectInputDeviceTransferOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RejectInputDeviceTransferInput>
    public typealias MOutput = OperationOutput<RejectInputDeviceTransferOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RejectInputDeviceTransferOutputError>
}

/// Placeholder documentation for RejectInputDeviceTransferRequest
public struct RejectInputDeviceTransferInput: Equatable {
    /// The unique ID of the input device to reject. For example, hd-123456789abcdef.
    public let inputDeviceId: String?

    public init (
        inputDeviceId: String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

struct RejectInputDeviceTransferInputBody: Equatable {
}

extension RejectInputDeviceTransferInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension RejectInputDeviceTransferOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RejectInputDeviceTransferOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RejectInputDeviceTransferOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RejectInputDeviceTransferOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RejectInputDeviceTransferOutputResponse()"}
}

extension RejectInputDeviceTransferOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for RejectInputDeviceTransferResponse
public struct RejectInputDeviceTransferOutputResponse: Equatable {

    public init() {}
}

struct RejectInputDeviceTransferOutputResponseBody: Equatable {
}

extension RejectInputDeviceTransferOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension RemixSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelMappings = "channelMappings"
        case channelsIn = "channelsIn"
        case channelsOut = "channelsOut"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelMappings = channelMappings {
            var channelMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .channelMappings)
            for __listofaudiochannelmapping0 in channelMappings {
                try channelMappingsContainer.encode(__listofaudiochannelmapping0)
            }
        }
        if channelsIn != 0 {
            try encodeContainer.encode(channelsIn, forKey: .channelsIn)
        }
        if channelsOut != 0 {
            try encodeContainer.encode(channelsOut, forKey: .channelsOut)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelMappingsContainer = try containerValues.decodeIfPresent([AudioChannelMapping?].self, forKey: .channelMappings)
        var channelMappingsDecoded0:[AudioChannelMapping]? = nil
        if let channelMappingsContainer = channelMappingsContainer {
            channelMappingsDecoded0 = [AudioChannelMapping]()
            for structure0 in channelMappingsContainer {
                if let structure0 = structure0 {
                    channelMappingsDecoded0?.append(structure0)
                }
            }
        }
        channelMappings = channelMappingsDecoded0
        let channelsInDecoded = try containerValues.decode(Int.self, forKey: .channelsIn)
        channelsIn = channelsInDecoded
        let channelsOutDecoded = try containerValues.decode(Int.self, forKey: .channelsOut)
        channelsOut = channelsOutDecoded
    }
}

extension RemixSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemixSettings(channelMappings: \(String(describing: channelMappings)), channelsIn: \(String(describing: channelsIn)), channelsOut: \(String(describing: channelsOut)))"}
}

/// Remix Settings
public struct RemixSettings: Equatable {
    /// Mapping of input channels to output channels, with appropriate gain adjustments.
    public let channelMappings: [AudioChannelMapping]?
    /// Number of input channels to be used.
    public let channelsIn: Int
    /// Number of output channels to be produced.
    /// Valid values: 1, 2, 4, 6, 8
    public let channelsOut: Int

    public init (
        channelMappings: [AudioChannelMapping]? = nil,
        channelsIn: Int = 0,
        channelsOut: Int = 0
    )
    {
        self.channelMappings = channelMappings
        self.channelsIn = channelsIn
        self.channelsOut = channelsOut
    }
}

extension Reservation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case count = "count"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case durationUnits = "durationUnits"
        case end = "end"
        case fixedPrice = "fixedPrice"
        case name = "name"
        case offeringDescription = "offeringDescription"
        case offeringId = "offeringId"
        case offeringType = "offeringType"
        case region = "region"
        case reservationId = "reservationId"
        case resourceSpecification = "resourceSpecification"
        case start = "start"
        case state = "state"
        case tags = "tags"
        case usagePrice = "usagePrice"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let currencyCode = currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let durationUnits = durationUnits {
            try encodeContainer.encode(durationUnits.rawValue, forKey: .durationUnits)
        }
        if let end = end {
            try encodeContainer.encode(end, forKey: .end)
        }
        if fixedPrice != 0.0 {
            try encodeContainer.encode(fixedPrice, forKey: .fixedPrice)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let offeringDescription = offeringDescription {
            try encodeContainer.encode(offeringDescription, forKey: .offeringDescription)
        }
        if let offeringId = offeringId {
            try encodeContainer.encode(offeringId, forKey: .offeringId)
        }
        if let offeringType = offeringType {
            try encodeContainer.encode(offeringType.rawValue, forKey: .offeringType)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let reservationId = reservationId {
            try encodeContainer.encode(reservationId, forKey: .reservationId)
        }
        if let resourceSpecification = resourceSpecification {
            try encodeContainer.encode(resourceSpecification, forKey: .resourceSpecification)
        }
        if let start = start {
            try encodeContainer.encode(start, forKey: .start)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if usagePrice != 0.0 {
            try encodeContainer.encode(usagePrice, forKey: .usagePrice)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let durationUnitsDecoded = try containerValues.decodeIfPresent(OfferingDurationUnits.self, forKey: .durationUnits)
        durationUnits = durationUnitsDecoded
        let endDecoded = try containerValues.decodeIfPresent(String.self, forKey: .end)
        end = endDecoded
        let fixedPriceDecoded = try containerValues.decode(Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let offeringDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringDescription)
        offeringDescription = offeringDescriptionDecoded
        let offeringIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(OfferingType.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let reservationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reservationId)
        reservationId = reservationIdDecoded
        let resourceSpecificationDecoded = try containerValues.decodeIfPresent(ReservationResourceSpecification.self, forKey: .resourceSpecification)
        resourceSpecification = resourceSpecificationDecoded
        let startDecoded = try containerValues.decodeIfPresent(String.self, forKey: .start)
        start = startDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ReservationState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let usagePriceDecoded = try containerValues.decode(Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
    }
}

extension Reservation: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Reservation(arn: \(String(describing: arn)), count: \(String(describing: count)), currencyCode: \(String(describing: currencyCode)), duration: \(String(describing: duration)), durationUnits: \(String(describing: durationUnits)), end: \(String(describing: end)), fixedPrice: \(String(describing: fixedPrice)), name: \(String(describing: name)), offeringDescription: \(String(describing: offeringDescription)), offeringId: \(String(describing: offeringId)), offeringType: \(String(describing: offeringType)), region: \(String(describing: region)), reservationId: \(String(describing: reservationId)), resourceSpecification: \(String(describing: resourceSpecification)), start: \(String(describing: start)), state: \(String(describing: state)), tags: \(String(describing: tags)), usagePrice: \(String(describing: usagePrice)))"}
}

/// Reserved resources available to use
public struct Reservation: Equatable {
    /// Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
    public let arn: String?
    /// Number of reserved resources
    public let count: Int
    /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
    public let currencyCode: String?
    /// Lease duration, e.g. '12'
    public let duration: Int
    /// Units for duration, e.g. 'MONTHS'
    public let durationUnits: OfferingDurationUnits?
    /// Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
    public let end: String?
    /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
    public let fixedPrice: Double
    /// User specified reservation name
    public let name: String?
    /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
    public let offeringDescription: String?
    /// Unique offering ID, e.g. '87654321'
    public let offeringId: String?
    /// Offering type, e.g. 'NO_UPFRONT'
    public let offeringType: OfferingType?
    /// AWS region, e.g. 'us-west-2'
    public let region: String?
    /// Unique reservation ID, e.g. '1234567'
    public let reservationId: String?
    /// Resource configuration details
    public let resourceSpecification: ReservationResourceSpecification?
    /// Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
    public let start: String?
    /// Current state of reservation, e.g. 'ACTIVE'
    public let state: ReservationState?
    /// A collection of key-value pairs
    public let tags: [String:String]?
    /// Recurring usage charge for each reserved resource, e.g. '157.0'
    public let usagePrice: Double

    public init (
        arn: String? = nil,
        count: Int = 0,
        currencyCode: String? = nil,
        duration: Int = 0,
        durationUnits: OfferingDurationUnits? = nil,
        end: String? = nil,
        fixedPrice: Double = 0.0,
        name: String? = nil,
        offeringDescription: String? = nil,
        offeringId: String? = nil,
        offeringType: OfferingType? = nil,
        region: String? = nil,
        reservationId: String? = nil,
        resourceSpecification: ReservationResourceSpecification? = nil,
        start: String? = nil,
        state: ReservationState? = nil,
        tags: [String:String]? = nil,
        usagePrice: Double = 0.0
    )
    {
        self.arn = arn
        self.count = count
        self.currencyCode = currencyCode
        self.duration = duration
        self.durationUnits = durationUnits
        self.end = end
        self.fixedPrice = fixedPrice
        self.name = name
        self.offeringDescription = offeringDescription
        self.offeringId = offeringId
        self.offeringType = offeringType
        self.region = region
        self.reservationId = reservationId
        self.resourceSpecification = resourceSpecification
        self.start = start
        self.state = state
        self.tags = tags
        self.usagePrice = usagePrice
    }
}

/// Codec, 'MPEG2', 'AVC', 'HEVC', or 'AUDIO'
public enum ReservationCodec {
    case audio
    case avc
    case hevc
    case link
    case mpeg2
    case sdkUnknown(String)
}

extension ReservationCodec : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReservationCodec] {
        return [
            .audio,
            .avc,
            .hevc,
            .link,
            .mpeg2,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .audio: return "AUDIO"
        case .avc: return "AVC"
        case .hevc: return "HEVC"
        case .link: return "LINK"
        case .mpeg2: return "MPEG2"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReservationCodec(rawValue: rawValue) ?? ReservationCodec.sdkUnknown(rawValue)
    }
}

/// Maximum bitrate in megabits per second
public enum ReservationMaximumBitrate {
    case max10Mbps
    case max20Mbps
    case max50Mbps
    case sdkUnknown(String)
}

extension ReservationMaximumBitrate : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReservationMaximumBitrate] {
        return [
            .max10Mbps,
            .max20Mbps,
            .max50Mbps,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .max10Mbps: return "MAX_10_MBPS"
        case .max20Mbps: return "MAX_20_MBPS"
        case .max50Mbps: return "MAX_50_MBPS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReservationMaximumBitrate(rawValue: rawValue) ?? ReservationMaximumBitrate.sdkUnknown(rawValue)
    }
}

/// Maximum framerate in frames per second (Outputs only)
public enum ReservationMaximumFramerate {
    case max30Fps
    case max60Fps
    case sdkUnknown(String)
}

extension ReservationMaximumFramerate : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReservationMaximumFramerate] {
        return [
            .max30Fps,
            .max60Fps,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .max30Fps: return "MAX_30_FPS"
        case .max60Fps: return "MAX_60_FPS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReservationMaximumFramerate(rawValue: rawValue) ?? ReservationMaximumFramerate.sdkUnknown(rawValue)
    }
}

/// Resolution based on lines of vertical resolution; SD is less than 720 lines, HD is 720 to 1080 lines, FHD is 1080 lines, UHD is greater than 1080 lines
public enum ReservationResolution {
    case fhd
    case hd
    case sd
    case uhd
    case sdkUnknown(String)
}

extension ReservationResolution : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReservationResolution] {
        return [
            .fhd,
            .hd,
            .sd,
            .uhd,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .fhd: return "FHD"
        case .hd: return "HD"
        case .sd: return "SD"
        case .uhd: return "UHD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReservationResolution(rawValue: rawValue) ?? ReservationResolution.sdkUnknown(rawValue)
    }
}

extension ReservationResourceSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelClass = "channelClass"
        case codec = "codec"
        case maximumBitrate = "maximumBitrate"
        case maximumFramerate = "maximumFramerate"
        case resolution = "resolution"
        case resourceType = "resourceType"
        case specialFeature = "specialFeature"
        case videoQuality = "videoQuality"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelClass = channelClass {
            try encodeContainer.encode(channelClass.rawValue, forKey: .channelClass)
        }
        if let codec = codec {
            try encodeContainer.encode(codec.rawValue, forKey: .codec)
        }
        if let maximumBitrate = maximumBitrate {
            try encodeContainer.encode(maximumBitrate.rawValue, forKey: .maximumBitrate)
        }
        if let maximumFramerate = maximumFramerate {
            try encodeContainer.encode(maximumFramerate.rawValue, forKey: .maximumFramerate)
        }
        if let resolution = resolution {
            try encodeContainer.encode(resolution.rawValue, forKey: .resolution)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let specialFeature = specialFeature {
            try encodeContainer.encode(specialFeature.rawValue, forKey: .specialFeature)
        }
        if let videoQuality = videoQuality {
            try encodeContainer.encode(videoQuality.rawValue, forKey: .videoQuality)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelClassDecoded = try containerValues.decodeIfPresent(ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let codecDecoded = try containerValues.decodeIfPresent(ReservationCodec.self, forKey: .codec)
        codec = codecDecoded
        let maximumBitrateDecoded = try containerValues.decodeIfPresent(ReservationMaximumBitrate.self, forKey: .maximumBitrate)
        maximumBitrate = maximumBitrateDecoded
        let maximumFramerateDecoded = try containerValues.decodeIfPresent(ReservationMaximumFramerate.self, forKey: .maximumFramerate)
        maximumFramerate = maximumFramerateDecoded
        let resolutionDecoded = try containerValues.decodeIfPresent(ReservationResolution.self, forKey: .resolution)
        resolution = resolutionDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ReservationResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let specialFeatureDecoded = try containerValues.decodeIfPresent(ReservationSpecialFeature.self, forKey: .specialFeature)
        specialFeature = specialFeatureDecoded
        let videoQualityDecoded = try containerValues.decodeIfPresent(ReservationVideoQuality.self, forKey: .videoQuality)
        videoQuality = videoQualityDecoded
    }
}

extension ReservationResourceSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReservationResourceSpecification(channelClass: \(String(describing: channelClass)), codec: \(String(describing: codec)), maximumBitrate: \(String(describing: maximumBitrate)), maximumFramerate: \(String(describing: maximumFramerate)), resolution: \(String(describing: resolution)), resourceType: \(String(describing: resourceType)), specialFeature: \(String(describing: specialFeature)), videoQuality: \(String(describing: videoQuality)))"}
}

/// Resource configuration (codec, resolution, bitrate, ...)
public struct ReservationResourceSpecification: Equatable {
    /// Channel class, e.g. 'STANDARD'
    public let channelClass: ChannelClass?
    /// Codec, e.g. 'AVC'
    public let codec: ReservationCodec?
    /// Maximum bitrate, e.g. 'MAX_20_MBPS'
    public let maximumBitrate: ReservationMaximumBitrate?
    /// Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)
    public let maximumFramerate: ReservationMaximumFramerate?
    /// Resolution, e.g. 'HD'
    public let resolution: ReservationResolution?
    /// Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
    public let resourceType: ReservationResourceType?
    /// Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)
    public let specialFeature: ReservationSpecialFeature?
    /// Video quality, e.g. 'STANDARD' (Outputs only)
    public let videoQuality: ReservationVideoQuality?

    public init (
        channelClass: ChannelClass? = nil,
        codec: ReservationCodec? = nil,
        maximumBitrate: ReservationMaximumBitrate? = nil,
        maximumFramerate: ReservationMaximumFramerate? = nil,
        resolution: ReservationResolution? = nil,
        resourceType: ReservationResourceType? = nil,
        specialFeature: ReservationSpecialFeature? = nil,
        videoQuality: ReservationVideoQuality? = nil
    )
    {
        self.channelClass = channelClass
        self.codec = codec
        self.maximumBitrate = maximumBitrate
        self.maximumFramerate = maximumFramerate
        self.resolution = resolution
        self.resourceType = resourceType
        self.specialFeature = specialFeature
        self.videoQuality = videoQuality
    }
}

/// Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
public enum ReservationResourceType {
    case channel
    case input
    case multiplex
    case output
    case sdkUnknown(String)
}

extension ReservationResourceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReservationResourceType] {
        return [
            .channel,
            .input,
            .multiplex,
            .output,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .channel: return "CHANNEL"
        case .input: return "INPUT"
        case .multiplex: return "MULTIPLEX"
        case .output: return "OUTPUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReservationResourceType(rawValue: rawValue) ?? ReservationResourceType.sdkUnknown(rawValue)
    }
}

/// Special features, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
public enum ReservationSpecialFeature {
    case advancedAudio
    case audioNormalization
    case sdkUnknown(String)
}

extension ReservationSpecialFeature : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReservationSpecialFeature] {
        return [
            .advancedAudio,
            .audioNormalization,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .advancedAudio: return "ADVANCED_AUDIO"
        case .audioNormalization: return "AUDIO_NORMALIZATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReservationSpecialFeature(rawValue: rawValue) ?? ReservationSpecialFeature.sdkUnknown(rawValue)
    }
}

/// Current reservation state
public enum ReservationState {
    case active
    case canceled
    case deleted
    case expired
    case sdkUnknown(String)
}

extension ReservationState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReservationState] {
        return [
            .active,
            .canceled,
            .deleted,
            .expired,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .canceled: return "CANCELED"
        case .deleted: return "DELETED"
        case .expired: return "EXPIRED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReservationState(rawValue: rawValue) ?? ReservationState.sdkUnknown(rawValue)
    }
}

/// Video quality, e.g. 'STANDARD' (Outputs only)
public enum ReservationVideoQuality {
    case enhanced
    case premium
    case standard
    case sdkUnknown(String)
}

extension ReservationVideoQuality : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReservationVideoQuality] {
        return [
            .enhanced,
            .premium,
            .standard,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .enhanced: return "ENHANCED"
        case .premium: return "PREMIUM"
        case .standard: return "STANDARD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReservationVideoQuality(rawValue: rawValue) ?? ReservationVideoQuality.sdkUnknown(rawValue)
    }
}

/// Rtmp Ad Markers
public enum RtmpAdMarkers {
    case onCuePointScte35
    case sdkUnknown(String)
}

extension RtmpAdMarkers : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RtmpAdMarkers] {
        return [
            .onCuePointScte35,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .onCuePointScte35: return "ON_CUE_POINT_SCTE35"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RtmpAdMarkers(rawValue: rawValue) ?? RtmpAdMarkers.sdkUnknown(rawValue)
    }
}

/// Rtmp Cache Full Behavior
public enum RtmpCacheFullBehavior {
    case disconnectImmediately
    case waitForServer
    case sdkUnknown(String)
}

extension RtmpCacheFullBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RtmpCacheFullBehavior] {
        return [
            .disconnectImmediately,
            .waitForServer,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disconnectImmediately: return "DISCONNECT_IMMEDIATELY"
        case .waitForServer: return "WAIT_FOR_SERVER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RtmpCacheFullBehavior(rawValue: rawValue) ?? RtmpCacheFullBehavior.sdkUnknown(rawValue)
    }
}

/// Rtmp Caption Data
public enum RtmpCaptionData {
    case all
    case field1608
    case field1AndField2608
    case sdkUnknown(String)
}

extension RtmpCaptionData : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RtmpCaptionData] {
        return [
            .all,
            .field1608,
            .field1AndField2608,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .all: return "ALL"
        case .field1608: return "FIELD1_608"
        case .field1AndField2608: return "FIELD1_AND_FIELD2_608"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RtmpCaptionData(rawValue: rawValue) ?? RtmpCaptionData.sdkUnknown(rawValue)
    }
}

extension RtmpCaptionInfoDestinationSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension RtmpCaptionInfoDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RtmpCaptionInfoDestinationSettings()"}
}

/// Rtmp Caption Info Destination Settings
public struct RtmpCaptionInfoDestinationSettings: Equatable {

    public init() {}
}

extension RtmpGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adMarkers = "adMarkers"
        case authenticationScheme = "authenticationScheme"
        case cacheFullBehavior = "cacheFullBehavior"
        case cacheLength = "cacheLength"
        case captionData = "captionData"
        case inputLossAction = "inputLossAction"
        case restartDelay = "restartDelay"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adMarkers = adMarkers {
            var adMarkersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .adMarkers)
            for __listofrtmpadmarkers0 in adMarkers {
                try adMarkersContainer.encode(__listofrtmpadmarkers0.rawValue)
            }
        }
        if let authenticationScheme = authenticationScheme {
            try encodeContainer.encode(authenticationScheme.rawValue, forKey: .authenticationScheme)
        }
        if let cacheFullBehavior = cacheFullBehavior {
            try encodeContainer.encode(cacheFullBehavior.rawValue, forKey: .cacheFullBehavior)
        }
        if cacheLength != 0 {
            try encodeContainer.encode(cacheLength, forKey: .cacheLength)
        }
        if let captionData = captionData {
            try encodeContainer.encode(captionData.rawValue, forKey: .captionData)
        }
        if let inputLossAction = inputLossAction {
            try encodeContainer.encode(inputLossAction.rawValue, forKey: .inputLossAction)
        }
        if restartDelay != 0 {
            try encodeContainer.encode(restartDelay, forKey: .restartDelay)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adMarkersContainer = try containerValues.decodeIfPresent([RtmpAdMarkers?].self, forKey: .adMarkers)
        var adMarkersDecoded0:[RtmpAdMarkers]? = nil
        if let adMarkersContainer = adMarkersContainer {
            adMarkersDecoded0 = [RtmpAdMarkers]()
            for string0 in adMarkersContainer {
                if let string0 = string0 {
                    adMarkersDecoded0?.append(string0)
                }
            }
        }
        adMarkers = adMarkersDecoded0
        let authenticationSchemeDecoded = try containerValues.decodeIfPresent(AuthenticationScheme.self, forKey: .authenticationScheme)
        authenticationScheme = authenticationSchemeDecoded
        let cacheFullBehaviorDecoded = try containerValues.decodeIfPresent(RtmpCacheFullBehavior.self, forKey: .cacheFullBehavior)
        cacheFullBehavior = cacheFullBehaviorDecoded
        let cacheLengthDecoded = try containerValues.decode(Int.self, forKey: .cacheLength)
        cacheLength = cacheLengthDecoded
        let captionDataDecoded = try containerValues.decodeIfPresent(RtmpCaptionData.self, forKey: .captionData)
        captionData = captionDataDecoded
        let inputLossActionDecoded = try containerValues.decodeIfPresent(InputLossActionForRtmpOut.self, forKey: .inputLossAction)
        inputLossAction = inputLossActionDecoded
        let restartDelayDecoded = try containerValues.decode(Int.self, forKey: .restartDelay)
        restartDelay = restartDelayDecoded
    }
}

extension RtmpGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RtmpGroupSettings(adMarkers: \(String(describing: adMarkers)), authenticationScheme: \(String(describing: authenticationScheme)), cacheFullBehavior: \(String(describing: cacheFullBehavior)), cacheLength: \(String(describing: cacheLength)), captionData: \(String(describing: captionData)), inputLossAction: \(String(describing: inputLossAction)), restartDelay: \(String(describing: restartDelay)))"}
}

/// Rtmp Group Settings
public struct RtmpGroupSettings: Equatable {
    /// Choose the ad marker type for this output group. MediaLive will create a message based on the content of each SCTE-35 message, format it for that marker type, and insert it in the datastream.
    public let adMarkers: [RtmpAdMarkers]?
    /// Authentication scheme to use when connecting with CDN
    public let authenticationScheme: AuthenticationScheme?
    /// Controls behavior when content cache fills up. If remote origin server stalls the RTMP connection and does not accept content fast enough the 'Media Cache' will fill up. When the cache reaches the duration specified by cacheLength the cache will stop accepting new content. If set to disconnectImmediately, the RTMP output will force a disconnect. Clear the media cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes to allow the origin server to begin accepting data again.
    public let cacheFullBehavior: RtmpCacheFullBehavior?
    /// Cache length, in seconds, is used to calculate buffer size.
    public let cacheLength: Int
    /// Controls the types of data that passes to onCaptionInfo outputs.  If set to 'all' then 608 and 708 carried DTVCC data will be passed.  If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields will be passed. If set to 'field1608' then only the data carried in 608 from field 1 video will be passed.
    public let captionData: RtmpCaptionData?
    /// Controls the behavior of this RTMP group if input becomes unavailable.
    ///
    /// - emitOutput: Emit a slate until input returns.
    /// - pauseOutput: Stop transmitting data until input returns. This does not close the underlying RTMP connection.
    public let inputLossAction: InputLossActionForRtmpOut?
    /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
    public let restartDelay: Int

    public init (
        adMarkers: [RtmpAdMarkers]? = nil,
        authenticationScheme: AuthenticationScheme? = nil,
        cacheFullBehavior: RtmpCacheFullBehavior? = nil,
        cacheLength: Int = 0,
        captionData: RtmpCaptionData? = nil,
        inputLossAction: InputLossActionForRtmpOut? = nil,
        restartDelay: Int = 0
    )
    {
        self.adMarkers = adMarkers
        self.authenticationScheme = authenticationScheme
        self.cacheFullBehavior = cacheFullBehavior
        self.cacheLength = cacheLength
        self.captionData = captionData
        self.inputLossAction = inputLossAction
        self.restartDelay = restartDelay
    }
}

/// Rtmp Output Certificate Mode
public enum RtmpOutputCertificateMode {
    case selfSigned
    case verifyAuthenticity
    case sdkUnknown(String)
}

extension RtmpOutputCertificateMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RtmpOutputCertificateMode] {
        return [
            .selfSigned,
            .verifyAuthenticity,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .selfSigned: return "SELF_SIGNED"
        case .verifyAuthenticity: return "VERIFY_AUTHENTICITY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RtmpOutputCertificateMode(rawValue: rawValue) ?? RtmpOutputCertificateMode.sdkUnknown(rawValue)
    }
}

extension RtmpOutputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateMode = "certificateMode"
        case connectionRetryInterval = "connectionRetryInterval"
        case destination = "destination"
        case numRetries = "numRetries"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateMode = certificateMode {
            try encodeContainer.encode(certificateMode.rawValue, forKey: .certificateMode)
        }
        if connectionRetryInterval != 0 {
            try encodeContainer.encode(connectionRetryInterval, forKey: .connectionRetryInterval)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if numRetries != 0 {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateModeDecoded = try containerValues.decodeIfPresent(RtmpOutputCertificateMode.self, forKey: .certificateMode)
        certificateMode = certificateModeDecoded
        let connectionRetryIntervalDecoded = try containerValues.decode(Int.self, forKey: .connectionRetryInterval)
        connectionRetryInterval = connectionRetryIntervalDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
        let numRetriesDecoded = try containerValues.decode(Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
    }
}

extension RtmpOutputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RtmpOutputSettings(certificateMode: \(String(describing: certificateMode)), connectionRetryInterval: \(String(describing: connectionRetryInterval)), destination: \(String(describing: destination)), numRetries: \(String(describing: numRetries)))"}
}

/// Rtmp Output Settings
public struct RtmpOutputSettings: Equatable {
    /// If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA).  This will cause rtmps outputs with self-signed certificates to fail.
    public let certificateMode: RtmpOutputCertificateMode?
    /// Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
    public let connectionRetryInterval: Int
    /// The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
    public let destination: OutputLocationRef?
    /// Number of retry attempts.
    public let numRetries: Int

    public init (
        certificateMode: RtmpOutputCertificateMode? = nil,
        connectionRetryInterval: Int = 0,
        destination: OutputLocationRef? = nil,
        numRetries: Int = 0
    )
    {
        self.certificateMode = certificateMode
        self.connectionRetryInterval = connectionRetryInterval
        self.destination = destination
        self.numRetries = numRetries
    }
}

/// S3 Canned Acl
public enum S3CannedAcl {
    case authenticatedRead
    case bucketOwnerFullControl
    case bucketOwnerRead
    case publicRead
    case sdkUnknown(String)
}

extension S3CannedAcl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [S3CannedAcl] {
        return [
            .authenticatedRead,
            .bucketOwnerFullControl,
            .bucketOwnerRead,
            .publicRead,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .authenticatedRead: return "AUTHENTICATED_READ"
        case .bucketOwnerFullControl: return "BUCKET_OWNER_FULL_CONTROL"
        case .bucketOwnerRead: return "BUCKET_OWNER_READ"
        case .publicRead: return "PUBLIC_READ"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = S3CannedAcl(rawValue: rawValue) ?? S3CannedAcl.sdkUnknown(rawValue)
    }
}

extension ScheduleAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionName = "actionName"
        case scheduleActionSettings = "scheduleActionSettings"
        case scheduleActionStartSettings = "scheduleActionStartSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let scheduleActionSettings = scheduleActionSettings {
            try encodeContainer.encode(scheduleActionSettings, forKey: .scheduleActionSettings)
        }
        if let scheduleActionStartSettings = scheduleActionStartSettings {
            try encodeContainer.encode(scheduleActionStartSettings, forKey: .scheduleActionStartSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let scheduleActionSettingsDecoded = try containerValues.decodeIfPresent(ScheduleActionSettings.self, forKey: .scheduleActionSettings)
        scheduleActionSettings = scheduleActionSettingsDecoded
        let scheduleActionStartSettingsDecoded = try containerValues.decodeIfPresent(ScheduleActionStartSettings.self, forKey: .scheduleActionStartSettings)
        scheduleActionStartSettings = scheduleActionStartSettingsDecoded
    }
}

extension ScheduleAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScheduleAction(actionName: \(String(describing: actionName)), scheduleActionSettings: \(String(describing: scheduleActionSettings)), scheduleActionStartSettings: \(String(describing: scheduleActionStartSettings)))"}
}

/// Contains information on a single schedule action.
public struct ScheduleAction: Equatable {
    /// The name of the action, must be unique within the schedule. This name provides the main reference to an action once it is added to the schedule. A name is unique if it is no longer in the schedule. The schedule is automatically cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at that point a name can be reused.
    public let actionName: String?
    /// Settings for this schedule action.
    public let scheduleActionSettings: ScheduleActionSettings?
    /// The time for the action to start in the channel.
    public let scheduleActionStartSettings: ScheduleActionStartSettings?

    public init (
        actionName: String? = nil,
        scheduleActionSettings: ScheduleActionSettings? = nil,
        scheduleActionStartSettings: ScheduleActionStartSettings? = nil
    )
    {
        self.actionName = actionName
        self.scheduleActionSettings = scheduleActionSettings
        self.scheduleActionStartSettings = scheduleActionStartSettings
    }
}

extension ScheduleActionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case hlsId3SegmentTaggingSettings = "hlsId3SegmentTaggingSettings"
        case hlsTimedMetadataSettings = "hlsTimedMetadataSettings"
        case inputPrepareSettings = "inputPrepareSettings"
        case inputSwitchSettings = "inputSwitchSettings"
        case motionGraphicsImageActivateSettings = "motionGraphicsImageActivateSettings"
        case motionGraphicsImageDeactivateSettings = "motionGraphicsImageDeactivateSettings"
        case pauseStateSettings = "pauseStateSettings"
        case scte35ReturnToNetworkSettings = "scte35ReturnToNetworkSettings"
        case scte35SpliceInsertSettings = "scte35SpliceInsertSettings"
        case scte35TimeSignalSettings = "scte35TimeSignalSettings"
        case staticImageActivateSettings = "staticImageActivateSettings"
        case staticImageDeactivateSettings = "staticImageDeactivateSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hlsId3SegmentTaggingSettings = hlsId3SegmentTaggingSettings {
            try encodeContainer.encode(hlsId3SegmentTaggingSettings, forKey: .hlsId3SegmentTaggingSettings)
        }
        if let hlsTimedMetadataSettings = hlsTimedMetadataSettings {
            try encodeContainer.encode(hlsTimedMetadataSettings, forKey: .hlsTimedMetadataSettings)
        }
        if let inputPrepareSettings = inputPrepareSettings {
            try encodeContainer.encode(inputPrepareSettings, forKey: .inputPrepareSettings)
        }
        if let inputSwitchSettings = inputSwitchSettings {
            try encodeContainer.encode(inputSwitchSettings, forKey: .inputSwitchSettings)
        }
        if let motionGraphicsImageActivateSettings = motionGraphicsImageActivateSettings {
            try encodeContainer.encode(motionGraphicsImageActivateSettings, forKey: .motionGraphicsImageActivateSettings)
        }
        if let motionGraphicsImageDeactivateSettings = motionGraphicsImageDeactivateSettings {
            try encodeContainer.encode(motionGraphicsImageDeactivateSettings, forKey: .motionGraphicsImageDeactivateSettings)
        }
        if let pauseStateSettings = pauseStateSettings {
            try encodeContainer.encode(pauseStateSettings, forKey: .pauseStateSettings)
        }
        if let scte35ReturnToNetworkSettings = scte35ReturnToNetworkSettings {
            try encodeContainer.encode(scte35ReturnToNetworkSettings, forKey: .scte35ReturnToNetworkSettings)
        }
        if let scte35SpliceInsertSettings = scte35SpliceInsertSettings {
            try encodeContainer.encode(scte35SpliceInsertSettings, forKey: .scte35SpliceInsertSettings)
        }
        if let scte35TimeSignalSettings = scte35TimeSignalSettings {
            try encodeContainer.encode(scte35TimeSignalSettings, forKey: .scte35TimeSignalSettings)
        }
        if let staticImageActivateSettings = staticImageActivateSettings {
            try encodeContainer.encode(staticImageActivateSettings, forKey: .staticImageActivateSettings)
        }
        if let staticImageDeactivateSettings = staticImageDeactivateSettings {
            try encodeContainer.encode(staticImageDeactivateSettings, forKey: .staticImageDeactivateSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hlsId3SegmentTaggingSettingsDecoded = try containerValues.decodeIfPresent(HlsId3SegmentTaggingScheduleActionSettings.self, forKey: .hlsId3SegmentTaggingSettings)
        hlsId3SegmentTaggingSettings = hlsId3SegmentTaggingSettingsDecoded
        let hlsTimedMetadataSettingsDecoded = try containerValues.decodeIfPresent(HlsTimedMetadataScheduleActionSettings.self, forKey: .hlsTimedMetadataSettings)
        hlsTimedMetadataSettings = hlsTimedMetadataSettingsDecoded
        let inputPrepareSettingsDecoded = try containerValues.decodeIfPresent(InputPrepareScheduleActionSettings.self, forKey: .inputPrepareSettings)
        inputPrepareSettings = inputPrepareSettingsDecoded
        let inputSwitchSettingsDecoded = try containerValues.decodeIfPresent(InputSwitchScheduleActionSettings.self, forKey: .inputSwitchSettings)
        inputSwitchSettings = inputSwitchSettingsDecoded
        let motionGraphicsImageActivateSettingsDecoded = try containerValues.decodeIfPresent(MotionGraphicsActivateScheduleActionSettings.self, forKey: .motionGraphicsImageActivateSettings)
        motionGraphicsImageActivateSettings = motionGraphicsImageActivateSettingsDecoded
        let motionGraphicsImageDeactivateSettingsDecoded = try containerValues.decodeIfPresent(MotionGraphicsDeactivateScheduleActionSettings.self, forKey: .motionGraphicsImageDeactivateSettings)
        motionGraphicsImageDeactivateSettings = motionGraphicsImageDeactivateSettingsDecoded
        let pauseStateSettingsDecoded = try containerValues.decodeIfPresent(PauseStateScheduleActionSettings.self, forKey: .pauseStateSettings)
        pauseStateSettings = pauseStateSettingsDecoded
        let scte35ReturnToNetworkSettingsDecoded = try containerValues.decodeIfPresent(Scte35ReturnToNetworkScheduleActionSettings.self, forKey: .scte35ReturnToNetworkSettings)
        scte35ReturnToNetworkSettings = scte35ReturnToNetworkSettingsDecoded
        let scte35SpliceInsertSettingsDecoded = try containerValues.decodeIfPresent(Scte35SpliceInsertScheduleActionSettings.self, forKey: .scte35SpliceInsertSettings)
        scte35SpliceInsertSettings = scte35SpliceInsertSettingsDecoded
        let scte35TimeSignalSettingsDecoded = try containerValues.decodeIfPresent(Scte35TimeSignalScheduleActionSettings.self, forKey: .scte35TimeSignalSettings)
        scte35TimeSignalSettings = scte35TimeSignalSettingsDecoded
        let staticImageActivateSettingsDecoded = try containerValues.decodeIfPresent(StaticImageActivateScheduleActionSettings.self, forKey: .staticImageActivateSettings)
        staticImageActivateSettings = staticImageActivateSettingsDecoded
        let staticImageDeactivateSettingsDecoded = try containerValues.decodeIfPresent(StaticImageDeactivateScheduleActionSettings.self, forKey: .staticImageDeactivateSettings)
        staticImageDeactivateSettings = staticImageDeactivateSettingsDecoded
    }
}

extension ScheduleActionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScheduleActionSettings(hlsId3SegmentTaggingSettings: \(String(describing: hlsId3SegmentTaggingSettings)), hlsTimedMetadataSettings: \(String(describing: hlsTimedMetadataSettings)), inputPrepareSettings: \(String(describing: inputPrepareSettings)), inputSwitchSettings: \(String(describing: inputSwitchSettings)), motionGraphicsImageActivateSettings: \(String(describing: motionGraphicsImageActivateSettings)), motionGraphicsImageDeactivateSettings: \(String(describing: motionGraphicsImageDeactivateSettings)), pauseStateSettings: \(String(describing: pauseStateSettings)), scte35ReturnToNetworkSettings: \(String(describing: scte35ReturnToNetworkSettings)), scte35SpliceInsertSettings: \(String(describing: scte35SpliceInsertSettings)), scte35TimeSignalSettings: \(String(describing: scte35TimeSignalSettings)), staticImageActivateSettings: \(String(describing: staticImageActivateSettings)), staticImageDeactivateSettings: \(String(describing: staticImageDeactivateSettings)))"}
}

/// Holds the settings for a single schedule action.
public struct ScheduleActionSettings: Equatable {
    /// Action to insert HLS ID3 segment tagging
    public let hlsId3SegmentTaggingSettings: HlsId3SegmentTaggingScheduleActionSettings?
    /// Action to insert HLS metadata
    public let hlsTimedMetadataSettings: HlsTimedMetadataScheduleActionSettings?
    /// Action to prepare an input for a future immediate input switch
    public let inputPrepareSettings: InputPrepareScheduleActionSettings?
    /// Action to switch the input
    public let inputSwitchSettings: InputSwitchScheduleActionSettings?
    /// Action to activate a motion graphics image overlay
    public let motionGraphicsImageActivateSettings: MotionGraphicsActivateScheduleActionSettings?
    /// Action to deactivate a motion graphics image overlay
    public let motionGraphicsImageDeactivateSettings: MotionGraphicsDeactivateScheduleActionSettings?
    /// Action to pause or unpause one or both channel pipelines
    public let pauseStateSettings: PauseStateScheduleActionSettings?
    /// Action to insert SCTE-35 return_to_network message
    public let scte35ReturnToNetworkSettings: Scte35ReturnToNetworkScheduleActionSettings?
    /// Action to insert SCTE-35 splice_insert message
    public let scte35SpliceInsertSettings: Scte35SpliceInsertScheduleActionSettings?
    /// Action to insert SCTE-35 time_signal message
    public let scte35TimeSignalSettings: Scte35TimeSignalScheduleActionSettings?
    /// Action to activate a static image overlay
    public let staticImageActivateSettings: StaticImageActivateScheduleActionSettings?
    /// Action to deactivate a static image overlay
    public let staticImageDeactivateSettings: StaticImageDeactivateScheduleActionSettings?

    public init (
        hlsId3SegmentTaggingSettings: HlsId3SegmentTaggingScheduleActionSettings? = nil,
        hlsTimedMetadataSettings: HlsTimedMetadataScheduleActionSettings? = nil,
        inputPrepareSettings: InputPrepareScheduleActionSettings? = nil,
        inputSwitchSettings: InputSwitchScheduleActionSettings? = nil,
        motionGraphicsImageActivateSettings: MotionGraphicsActivateScheduleActionSettings? = nil,
        motionGraphicsImageDeactivateSettings: MotionGraphicsDeactivateScheduleActionSettings? = nil,
        pauseStateSettings: PauseStateScheduleActionSettings? = nil,
        scte35ReturnToNetworkSettings: Scte35ReturnToNetworkScheduleActionSettings? = nil,
        scte35SpliceInsertSettings: Scte35SpliceInsertScheduleActionSettings? = nil,
        scte35TimeSignalSettings: Scte35TimeSignalScheduleActionSettings? = nil,
        staticImageActivateSettings: StaticImageActivateScheduleActionSettings? = nil,
        staticImageDeactivateSettings: StaticImageDeactivateScheduleActionSettings? = nil
    )
    {
        self.hlsId3SegmentTaggingSettings = hlsId3SegmentTaggingSettings
        self.hlsTimedMetadataSettings = hlsTimedMetadataSettings
        self.inputPrepareSettings = inputPrepareSettings
        self.inputSwitchSettings = inputSwitchSettings
        self.motionGraphicsImageActivateSettings = motionGraphicsImageActivateSettings
        self.motionGraphicsImageDeactivateSettings = motionGraphicsImageDeactivateSettings
        self.pauseStateSettings = pauseStateSettings
        self.scte35ReturnToNetworkSettings = scte35ReturnToNetworkSettings
        self.scte35SpliceInsertSettings = scte35SpliceInsertSettings
        self.scte35TimeSignalSettings = scte35TimeSignalSettings
        self.staticImageActivateSettings = staticImageActivateSettings
        self.staticImageDeactivateSettings = staticImageDeactivateSettings
    }
}

extension ScheduleActionStartSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fixedModeScheduleActionStartSettings = "fixedModeScheduleActionStartSettings"
        case followModeScheduleActionStartSettings = "followModeScheduleActionStartSettings"
        case immediateModeScheduleActionStartSettings = "immediateModeScheduleActionStartSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fixedModeScheduleActionStartSettings = fixedModeScheduleActionStartSettings {
            try encodeContainer.encode(fixedModeScheduleActionStartSettings, forKey: .fixedModeScheduleActionStartSettings)
        }
        if let followModeScheduleActionStartSettings = followModeScheduleActionStartSettings {
            try encodeContainer.encode(followModeScheduleActionStartSettings, forKey: .followModeScheduleActionStartSettings)
        }
        if let immediateModeScheduleActionStartSettings = immediateModeScheduleActionStartSettings {
            try encodeContainer.encode(immediateModeScheduleActionStartSettings, forKey: .immediateModeScheduleActionStartSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fixedModeScheduleActionStartSettingsDecoded = try containerValues.decodeIfPresent(FixedModeScheduleActionStartSettings.self, forKey: .fixedModeScheduleActionStartSettings)
        fixedModeScheduleActionStartSettings = fixedModeScheduleActionStartSettingsDecoded
        let followModeScheduleActionStartSettingsDecoded = try containerValues.decodeIfPresent(FollowModeScheduleActionStartSettings.self, forKey: .followModeScheduleActionStartSettings)
        followModeScheduleActionStartSettings = followModeScheduleActionStartSettingsDecoded
        let immediateModeScheduleActionStartSettingsDecoded = try containerValues.decodeIfPresent(ImmediateModeScheduleActionStartSettings.self, forKey: .immediateModeScheduleActionStartSettings)
        immediateModeScheduleActionStartSettings = immediateModeScheduleActionStartSettingsDecoded
    }
}

extension ScheduleActionStartSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScheduleActionStartSettings(fixedModeScheduleActionStartSettings: \(String(describing: fixedModeScheduleActionStartSettings)), followModeScheduleActionStartSettings: \(String(describing: followModeScheduleActionStartSettings)), immediateModeScheduleActionStartSettings: \(String(describing: immediateModeScheduleActionStartSettings)))"}
}

/// Settings to specify when an action should occur. Only one of the options must be selected.
public struct ScheduleActionStartSettings: Equatable {
    /// Option for specifying the start time for an action.
    public let fixedModeScheduleActionStartSettings: FixedModeScheduleActionStartSettings?
    /// Option for specifying an action as relative to another action.
    public let followModeScheduleActionStartSettings: FollowModeScheduleActionStartSettings?
    /// Option for specifying an action that should be applied immediately.
    public let immediateModeScheduleActionStartSettings: ImmediateModeScheduleActionStartSettings?

    public init (
        fixedModeScheduleActionStartSettings: FixedModeScheduleActionStartSettings? = nil,
        followModeScheduleActionStartSettings: FollowModeScheduleActionStartSettings? = nil,
        immediateModeScheduleActionStartSettings: ImmediateModeScheduleActionStartSettings? = nil
    )
    {
        self.fixedModeScheduleActionStartSettings = fixedModeScheduleActionStartSettings
        self.followModeScheduleActionStartSettings = followModeScheduleActionStartSettings
        self.immediateModeScheduleActionStartSettings = immediateModeScheduleActionStartSettings
    }
}

/// Scte20 Convert608 To708
public enum Scte20Convert608To708 {
    case disabled
    case upconvert
    case sdkUnknown(String)
}

extension Scte20Convert608To708 : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Scte20Convert608To708] {
        return [
            .disabled,
            .upconvert,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .upconvert: return "UPCONVERT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Scte20Convert608To708(rawValue: rawValue) ?? Scte20Convert608To708.sdkUnknown(rawValue)
    }
}

extension Scte20PlusEmbeddedDestinationSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension Scte20PlusEmbeddedDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Scte20PlusEmbeddedDestinationSettings()"}
}

/// Scte20 Plus Embedded Destination Settings
public struct Scte20PlusEmbeddedDestinationSettings: Equatable {

    public init() {}
}

extension Scte20SourceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case convert608To708 = "convert608To708"
        case source608ChannelNumber = "source608ChannelNumber"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let convert608To708 = convert608To708 {
            try encodeContainer.encode(convert608To708.rawValue, forKey: .convert608To708)
        }
        if source608ChannelNumber != 0 {
            try encodeContainer.encode(source608ChannelNumber, forKey: .source608ChannelNumber)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let convert608To708Decoded = try containerValues.decodeIfPresent(Scte20Convert608To708.self, forKey: .convert608To708)
        convert608To708 = convert608To708Decoded
        let source608ChannelNumberDecoded = try containerValues.decode(Int.self, forKey: .source608ChannelNumber)
        source608ChannelNumber = source608ChannelNumberDecoded
    }
}

extension Scte20SourceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Scte20SourceSettings(convert608To708: \(String(describing: convert608To708)), source608ChannelNumber: \(String(describing: source608ChannelNumber)))"}
}

/// Scte20 Source Settings
public struct Scte20SourceSettings: Equatable {
    /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    public let convert608To708: Scte20Convert608To708?
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    public let source608ChannelNumber: Int

    public init (
        convert608To708: Scte20Convert608To708? = nil,
        source608ChannelNumber: Int = 0
    )
    {
        self.convert608To708 = convert608To708
        self.source608ChannelNumber = source608ChannelNumber
    }
}

extension Scte27DestinationSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension Scte27DestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Scte27DestinationSettings()"}
}

/// Scte27 Destination Settings
public struct Scte27DestinationSettings: Equatable {

    public init() {}
}

extension Scte27SourceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pid = "pid"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if pid != 0 {
            try encodeContainer.encode(pid, forKey: .pid)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pidDecoded = try containerValues.decode(Int.self, forKey: .pid)
        pid = pidDecoded
    }
}

extension Scte27SourceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Scte27SourceSettings(pid: \(String(describing: pid)))"}
}

/// Scte27 Source Settings
public struct Scte27SourceSettings: Equatable {
    /// The pid field is used in conjunction with the caption selector languageCode field as follows:
    ///   - Specify PID and Language: Extracts captions from that PID; the language is "informational".
    ///   - Specify PID and omit Language: Extracts the specified PID.
    ///   - Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be.
    ///   - Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.
    public let pid: Int

    public init (
        pid: Int = 0
    )
    {
        self.pid = pid
    }
}

/// Scte35 Apos No Regional Blackout Behavior
public enum Scte35AposNoRegionalBlackoutBehavior {
    case follow
    case ignore
    case sdkUnknown(String)
}

extension Scte35AposNoRegionalBlackoutBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Scte35AposNoRegionalBlackoutBehavior] {
        return [
            .follow,
            .ignore,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .follow: return "FOLLOW"
        case .ignore: return "IGNORE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Scte35AposNoRegionalBlackoutBehavior(rawValue: rawValue) ?? Scte35AposNoRegionalBlackoutBehavior.sdkUnknown(rawValue)
    }
}

/// Scte35 Apos Web Delivery Allowed Behavior
public enum Scte35AposWebDeliveryAllowedBehavior {
    case follow
    case ignore
    case sdkUnknown(String)
}

extension Scte35AposWebDeliveryAllowedBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Scte35AposWebDeliveryAllowedBehavior] {
        return [
            .follow,
            .ignore,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .follow: return "FOLLOW"
        case .ignore: return "IGNORE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Scte35AposWebDeliveryAllowedBehavior(rawValue: rawValue) ?? Scte35AposWebDeliveryAllowedBehavior.sdkUnknown(rawValue)
    }
}

/// Corresponds to the archive_allowed parameter. A value of ARCHIVE_NOT_ALLOWED corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
public enum Scte35ArchiveAllowedFlag {
    case archiveAllowed
    case archiveNotAllowed
    case sdkUnknown(String)
}

extension Scte35ArchiveAllowedFlag : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Scte35ArchiveAllowedFlag] {
        return [
            .archiveAllowed,
            .archiveNotAllowed,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .archiveAllowed: return "ARCHIVE_ALLOWED"
        case .archiveNotAllowed: return "ARCHIVE_NOT_ALLOWED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Scte35ArchiveAllowedFlag(rawValue: rawValue) ?? Scte35ArchiveAllowedFlag.sdkUnknown(rawValue)
    }
}

extension Scte35DeliveryRestrictions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case archiveAllowedFlag = "archiveAllowedFlag"
        case deviceRestrictions = "deviceRestrictions"
        case noRegionalBlackoutFlag = "noRegionalBlackoutFlag"
        case webDeliveryAllowedFlag = "webDeliveryAllowedFlag"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archiveAllowedFlag = archiveAllowedFlag {
            try encodeContainer.encode(archiveAllowedFlag.rawValue, forKey: .archiveAllowedFlag)
        }
        if let deviceRestrictions = deviceRestrictions {
            try encodeContainer.encode(deviceRestrictions.rawValue, forKey: .deviceRestrictions)
        }
        if let noRegionalBlackoutFlag = noRegionalBlackoutFlag {
            try encodeContainer.encode(noRegionalBlackoutFlag.rawValue, forKey: .noRegionalBlackoutFlag)
        }
        if let webDeliveryAllowedFlag = webDeliveryAllowedFlag {
            try encodeContainer.encode(webDeliveryAllowedFlag.rawValue, forKey: .webDeliveryAllowedFlag)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archiveAllowedFlagDecoded = try containerValues.decodeIfPresent(Scte35ArchiveAllowedFlag.self, forKey: .archiveAllowedFlag)
        archiveAllowedFlag = archiveAllowedFlagDecoded
        let deviceRestrictionsDecoded = try containerValues.decodeIfPresent(Scte35DeviceRestrictions.self, forKey: .deviceRestrictions)
        deviceRestrictions = deviceRestrictionsDecoded
        let noRegionalBlackoutFlagDecoded = try containerValues.decodeIfPresent(Scte35NoRegionalBlackoutFlag.self, forKey: .noRegionalBlackoutFlag)
        noRegionalBlackoutFlag = noRegionalBlackoutFlagDecoded
        let webDeliveryAllowedFlagDecoded = try containerValues.decodeIfPresent(Scte35WebDeliveryAllowedFlag.self, forKey: .webDeliveryAllowedFlag)
        webDeliveryAllowedFlag = webDeliveryAllowedFlagDecoded
    }
}

extension Scte35DeliveryRestrictions: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Scte35DeliveryRestrictions(archiveAllowedFlag: \(String(describing: archiveAllowedFlag)), deviceRestrictions: \(String(describing: deviceRestrictions)), noRegionalBlackoutFlag: \(String(describing: noRegionalBlackoutFlag)), webDeliveryAllowedFlag: \(String(describing: webDeliveryAllowedFlag)))"}
}

/// Corresponds to SCTE-35 delivery_not_restricted_flag parameter. To declare delivery restrictions, include this element and its four "restriction" flags. To declare that there are no restrictions, omit this element.
public struct Scte35DeliveryRestrictions: Equatable {
    /// Corresponds to SCTE-35 archive_allowed_flag.
    public let archiveAllowedFlag: Scte35ArchiveAllowedFlag?
    /// Corresponds to SCTE-35 device_restrictions parameter.
    public let deviceRestrictions: Scte35DeviceRestrictions?
    /// Corresponds to SCTE-35 no_regional_blackout_flag parameter.
    public let noRegionalBlackoutFlag: Scte35NoRegionalBlackoutFlag?
    /// Corresponds to SCTE-35 web_delivery_allowed_flag parameter.
    public let webDeliveryAllowedFlag: Scte35WebDeliveryAllowedFlag?

    public init (
        archiveAllowedFlag: Scte35ArchiveAllowedFlag? = nil,
        deviceRestrictions: Scte35DeviceRestrictions? = nil,
        noRegionalBlackoutFlag: Scte35NoRegionalBlackoutFlag? = nil,
        webDeliveryAllowedFlag: Scte35WebDeliveryAllowedFlag? = nil
    )
    {
        self.archiveAllowedFlag = archiveAllowedFlag
        self.deviceRestrictions = deviceRestrictions
        self.noRegionalBlackoutFlag = noRegionalBlackoutFlag
        self.webDeliveryAllowedFlag = webDeliveryAllowedFlag
    }
}

extension Scte35Descriptor: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case scte35DescriptorSettings = "scte35DescriptorSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scte35DescriptorSettings = scte35DescriptorSettings {
            try encodeContainer.encode(scte35DescriptorSettings, forKey: .scte35DescriptorSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scte35DescriptorSettingsDecoded = try containerValues.decodeIfPresent(Scte35DescriptorSettings.self, forKey: .scte35DescriptorSettings)
        scte35DescriptorSettings = scte35DescriptorSettingsDecoded
    }
}

extension Scte35Descriptor: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Scte35Descriptor(scte35DescriptorSettings: \(String(describing: scte35DescriptorSettings)))"}
}

/// Holds one set of SCTE-35 Descriptor Settings.
public struct Scte35Descriptor: Equatable {
    /// SCTE-35 Descriptor Settings.
    public let scte35DescriptorSettings: Scte35DescriptorSettings?

    public init (
        scte35DescriptorSettings: Scte35DescriptorSettings? = nil
    )
    {
        self.scte35DescriptorSettings = scte35DescriptorSettings
    }
}

extension Scte35DescriptorSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case segmentationDescriptorScte35DescriptorSettings = "segmentationDescriptorScte35DescriptorSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let segmentationDescriptorScte35DescriptorSettings = segmentationDescriptorScte35DescriptorSettings {
            try encodeContainer.encode(segmentationDescriptorScte35DescriptorSettings, forKey: .segmentationDescriptorScte35DescriptorSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let segmentationDescriptorScte35DescriptorSettingsDecoded = try containerValues.decodeIfPresent(Scte35SegmentationDescriptor.self, forKey: .segmentationDescriptorScte35DescriptorSettings)
        segmentationDescriptorScte35DescriptorSettings = segmentationDescriptorScte35DescriptorSettingsDecoded
    }
}

extension Scte35DescriptorSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Scte35DescriptorSettings(segmentationDescriptorScte35DescriptorSettings: \(String(describing: segmentationDescriptorScte35DescriptorSettings)))"}
}

/// SCTE-35 Descriptor settings.
public struct Scte35DescriptorSettings: Equatable {
    /// SCTE-35 Segmentation Descriptor.
    public let segmentationDescriptorScte35DescriptorSettings: Scte35SegmentationDescriptor?

    public init (
        segmentationDescriptorScte35DescriptorSettings: Scte35SegmentationDescriptor? = nil
    )
    {
        self.segmentationDescriptorScte35DescriptorSettings = segmentationDescriptorScte35DescriptorSettings
    }
}

/// Corresponds to the device_restrictions parameter in a segmentation_descriptor. If you include one of the "restriction" flags then you must include all four of them.
public enum Scte35DeviceRestrictions {
    case `none`
    case restrictGroup0
    case restrictGroup1
    case restrictGroup2
    case sdkUnknown(String)
}

extension Scte35DeviceRestrictions : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Scte35DeviceRestrictions] {
        return [
            .none,
            .restrictGroup0,
            .restrictGroup1,
            .restrictGroup2,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .restrictGroup0: return "RESTRICT_GROUP0"
        case .restrictGroup1: return "RESTRICT_GROUP1"
        case .restrictGroup2: return "RESTRICT_GROUP2"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Scte35DeviceRestrictions(rawValue: rawValue) ?? Scte35DeviceRestrictions.sdkUnknown(rawValue)
    }
}

/// Corresponds to the no_regional_blackout_flag parameter. A value of REGIONAL_BLACKOUT corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
public enum Scte35NoRegionalBlackoutFlag {
    case noRegionalBlackout
    case regionalBlackout
    case sdkUnknown(String)
}

extension Scte35NoRegionalBlackoutFlag : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Scte35NoRegionalBlackoutFlag] {
        return [
            .noRegionalBlackout,
            .regionalBlackout,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noRegionalBlackout: return "NO_REGIONAL_BLACKOUT"
        case .regionalBlackout: return "REGIONAL_BLACKOUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Scte35NoRegionalBlackoutFlag(rawValue: rawValue) ?? Scte35NoRegionalBlackoutFlag.sdkUnknown(rawValue)
    }
}

extension Scte35ReturnToNetworkScheduleActionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case spliceEventId = "spliceEventId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if spliceEventId != 0 {
            try encodeContainer.encode(spliceEventId, forKey: .spliceEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let spliceEventIdDecoded = try containerValues.decode(Int.self, forKey: .spliceEventId)
        spliceEventId = spliceEventIdDecoded
    }
}

extension Scte35ReturnToNetworkScheduleActionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Scte35ReturnToNetworkScheduleActionSettings(spliceEventId: \(String(describing: spliceEventId)))"}
}

/// Settings for a SCTE-35 return_to_network message.
public struct Scte35ReturnToNetworkScheduleActionSettings: Equatable {
    /// The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
    public let spliceEventId: Int

    public init (
        spliceEventId: Int = 0
    )
    {
        self.spliceEventId = spliceEventId
    }
}

/// Corresponds to SCTE-35 segmentation_event_cancel_indicator. SEGMENTATION_EVENT_NOT_CANCELED corresponds to 0 in the SCTE-35 specification and indicates that this is an insertion request. SEGMENTATION_EVENT_CANCELED corresponds to 1 in the SCTE-35 specification and indicates that this is a cancelation request, in which case complete this field and the existing event ID to cancel.
public enum Scte35SegmentationCancelIndicator {
    case segmentationEventCanceled
    case segmentationEventNotCanceled
    case sdkUnknown(String)
}

extension Scte35SegmentationCancelIndicator : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Scte35SegmentationCancelIndicator] {
        return [
            .segmentationEventCanceled,
            .segmentationEventNotCanceled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .segmentationEventCanceled: return "SEGMENTATION_EVENT_CANCELED"
        case .segmentationEventNotCanceled: return "SEGMENTATION_EVENT_NOT_CANCELED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Scte35SegmentationCancelIndicator(rawValue: rawValue) ?? Scte35SegmentationCancelIndicator.sdkUnknown(rawValue)
    }
}

extension Scte35SegmentationDescriptor: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deliveryRestrictions = "deliveryRestrictions"
        case segmentNum = "segmentNum"
        case segmentationCancelIndicator = "segmentationCancelIndicator"
        case segmentationDuration = "segmentationDuration"
        case segmentationEventId = "segmentationEventId"
        case segmentationTypeId = "segmentationTypeId"
        case segmentationUpid = "segmentationUpid"
        case segmentationUpidType = "segmentationUpidType"
        case segmentsExpected = "segmentsExpected"
        case subSegmentNum = "subSegmentNum"
        case subSegmentsExpected = "subSegmentsExpected"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryRestrictions = deliveryRestrictions {
            try encodeContainer.encode(deliveryRestrictions, forKey: .deliveryRestrictions)
        }
        if segmentNum != 0 {
            try encodeContainer.encode(segmentNum, forKey: .segmentNum)
        }
        if let segmentationCancelIndicator = segmentationCancelIndicator {
            try encodeContainer.encode(segmentationCancelIndicator.rawValue, forKey: .segmentationCancelIndicator)
        }
        if segmentationDuration != 0 {
            try encodeContainer.encode(segmentationDuration, forKey: .segmentationDuration)
        }
        if segmentationEventId != 0 {
            try encodeContainer.encode(segmentationEventId, forKey: .segmentationEventId)
        }
        if segmentationTypeId != 0 {
            try encodeContainer.encode(segmentationTypeId, forKey: .segmentationTypeId)
        }
        if let segmentationUpid = segmentationUpid {
            try encodeContainer.encode(segmentationUpid, forKey: .segmentationUpid)
        }
        if segmentationUpidType != 0 {
            try encodeContainer.encode(segmentationUpidType, forKey: .segmentationUpidType)
        }
        if segmentsExpected != 0 {
            try encodeContainer.encode(segmentsExpected, forKey: .segmentsExpected)
        }
        if subSegmentNum != 0 {
            try encodeContainer.encode(subSegmentNum, forKey: .subSegmentNum)
        }
        if subSegmentsExpected != 0 {
            try encodeContainer.encode(subSegmentsExpected, forKey: .subSegmentsExpected)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryRestrictionsDecoded = try containerValues.decodeIfPresent(Scte35DeliveryRestrictions.self, forKey: .deliveryRestrictions)
        deliveryRestrictions = deliveryRestrictionsDecoded
        let segmentNumDecoded = try containerValues.decode(Int.self, forKey: .segmentNum)
        segmentNum = segmentNumDecoded
        let segmentationCancelIndicatorDecoded = try containerValues.decodeIfPresent(Scte35SegmentationCancelIndicator.self, forKey: .segmentationCancelIndicator)
        segmentationCancelIndicator = segmentationCancelIndicatorDecoded
        let segmentationDurationDecoded = try containerValues.decode(Int.self, forKey: .segmentationDuration)
        segmentationDuration = segmentationDurationDecoded
        let segmentationEventIdDecoded = try containerValues.decode(Int.self, forKey: .segmentationEventId)
        segmentationEventId = segmentationEventIdDecoded
        let segmentationTypeIdDecoded = try containerValues.decode(Int.self, forKey: .segmentationTypeId)
        segmentationTypeId = segmentationTypeIdDecoded
        let segmentationUpidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .segmentationUpid)
        segmentationUpid = segmentationUpidDecoded
        let segmentationUpidTypeDecoded = try containerValues.decode(Int.self, forKey: .segmentationUpidType)
        segmentationUpidType = segmentationUpidTypeDecoded
        let segmentsExpectedDecoded = try containerValues.decode(Int.self, forKey: .segmentsExpected)
        segmentsExpected = segmentsExpectedDecoded
        let subSegmentNumDecoded = try containerValues.decode(Int.self, forKey: .subSegmentNum)
        subSegmentNum = subSegmentNumDecoded
        let subSegmentsExpectedDecoded = try containerValues.decode(Int.self, forKey: .subSegmentsExpected)
        subSegmentsExpected = subSegmentsExpectedDecoded
    }
}

extension Scte35SegmentationDescriptor: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Scte35SegmentationDescriptor(deliveryRestrictions: \(String(describing: deliveryRestrictions)), segmentNum: \(String(describing: segmentNum)), segmentationCancelIndicator: \(String(describing: segmentationCancelIndicator)), segmentationDuration: \(String(describing: segmentationDuration)), segmentationEventId: \(String(describing: segmentationEventId)), segmentationTypeId: \(String(describing: segmentationTypeId)), segmentationUpid: \(String(describing: segmentationUpid)), segmentationUpidType: \(String(describing: segmentationUpidType)), segmentsExpected: \(String(describing: segmentsExpected)), subSegmentNum: \(String(describing: subSegmentNum)), subSegmentsExpected: \(String(describing: subSegmentsExpected)))"}
}

/// Corresponds to SCTE-35 segmentation_descriptor.
public struct Scte35SegmentationDescriptor: Equatable {
    /// Holds the four SCTE-35 delivery restriction parameters.
    public let deliveryRestrictions: Scte35DeliveryRestrictions?
    /// Corresponds to SCTE-35 segment_num. A value that is valid for the specified segmentation_type_id.
    public let segmentNum: Int
    /// Corresponds to SCTE-35 segmentation_event_cancel_indicator.
    public let segmentationCancelIndicator: Scte35SegmentationCancelIndicator?
    /// Corresponds to SCTE-35 segmentation_duration. Optional. The duration for the time_signal, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time in 90 KHz clock ticks. If you do not enter a duration, the time_signal will continue until you insert a cancellation message.
    public let segmentationDuration: Int
    /// Corresponds to SCTE-35 segmentation_event_id.
    public let segmentationEventId: Int
    /// Corresponds to SCTE-35 segmentation_type_id. One of the segmentation_type_id values listed in the SCTE-35 specification. On the console, enter the ID in decimal (for example, "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or decimal (for example, "52").
    public let segmentationTypeId: Int
    /// Corresponds to SCTE-35 segmentation_upid. Enter a string containing the hexadecimal representation of the characters that make up the SCTE-35 segmentation_upid value. Must contain an even number of hex characters. Do not include spaces between each hex pair. For example, the ASCII "ADS Information" becomes hex "41445320496e666f726d6174696f6e.
    public let segmentationUpid: String?
    /// Corresponds to SCTE-35 segmentation_upid_type. On the console, enter one of the types listed in the SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the types listed in the SCTE-35 specification, in either hex (for example, "0x0C" ) or in decimal (for example, "12").
    public let segmentationUpidType: Int
    /// Corresponds to SCTE-35 segments_expected. A value that is valid for the specified segmentation_type_id.
    public let segmentsExpected: Int
    /// Corresponds to SCTE-35 sub_segment_num. A value that is valid for the specified segmentation_type_id.
    public let subSegmentNum: Int
    /// Corresponds to SCTE-35 sub_segments_expected. A value that is valid for the specified segmentation_type_id.
    public let subSegmentsExpected: Int

    public init (
        deliveryRestrictions: Scte35DeliveryRestrictions? = nil,
        segmentNum: Int = 0,
        segmentationCancelIndicator: Scte35SegmentationCancelIndicator? = nil,
        segmentationDuration: Int = 0,
        segmentationEventId: Int = 0,
        segmentationTypeId: Int = 0,
        segmentationUpid: String? = nil,
        segmentationUpidType: Int = 0,
        segmentsExpected: Int = 0,
        subSegmentNum: Int = 0,
        subSegmentsExpected: Int = 0
    )
    {
        self.deliveryRestrictions = deliveryRestrictions
        self.segmentNum = segmentNum
        self.segmentationCancelIndicator = segmentationCancelIndicator
        self.segmentationDuration = segmentationDuration
        self.segmentationEventId = segmentationEventId
        self.segmentationTypeId = segmentationTypeId
        self.segmentationUpid = segmentationUpid
        self.segmentationUpidType = segmentationUpidType
        self.segmentsExpected = segmentsExpected
        self.subSegmentNum = subSegmentNum
        self.subSegmentsExpected = subSegmentsExpected
    }
}

extension Scte35SpliceInsert: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adAvailOffset = "adAvailOffset"
        case noRegionalBlackoutFlag = "noRegionalBlackoutFlag"
        case webDeliveryAllowedFlag = "webDeliveryAllowedFlag"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if adAvailOffset != 0 {
            try encodeContainer.encode(adAvailOffset, forKey: .adAvailOffset)
        }
        if let noRegionalBlackoutFlag = noRegionalBlackoutFlag {
            try encodeContainer.encode(noRegionalBlackoutFlag.rawValue, forKey: .noRegionalBlackoutFlag)
        }
        if let webDeliveryAllowedFlag = webDeliveryAllowedFlag {
            try encodeContainer.encode(webDeliveryAllowedFlag.rawValue, forKey: .webDeliveryAllowedFlag)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adAvailOffsetDecoded = try containerValues.decode(Int.self, forKey: .adAvailOffset)
        adAvailOffset = adAvailOffsetDecoded
        let noRegionalBlackoutFlagDecoded = try containerValues.decodeIfPresent(Scte35SpliceInsertNoRegionalBlackoutBehavior.self, forKey: .noRegionalBlackoutFlag)
        noRegionalBlackoutFlag = noRegionalBlackoutFlagDecoded
        let webDeliveryAllowedFlagDecoded = try containerValues.decodeIfPresent(Scte35SpliceInsertWebDeliveryAllowedBehavior.self, forKey: .webDeliveryAllowedFlag)
        webDeliveryAllowedFlag = webDeliveryAllowedFlagDecoded
    }
}

extension Scte35SpliceInsert: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Scte35SpliceInsert(adAvailOffset: \(String(describing: adAvailOffset)), noRegionalBlackoutFlag: \(String(describing: noRegionalBlackoutFlag)), webDeliveryAllowedFlag: \(String(describing: webDeliveryAllowedFlag)))"}
}

/// Scte35 Splice Insert
public struct Scte35SpliceInsert: Equatable {
    /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
    public let adAvailOffset: Int
    /// When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    public let noRegionalBlackoutFlag: Scte35SpliceInsertNoRegionalBlackoutBehavior?
    /// When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    public let webDeliveryAllowedFlag: Scte35SpliceInsertWebDeliveryAllowedBehavior?

    public init (
        adAvailOffset: Int = 0,
        noRegionalBlackoutFlag: Scte35SpliceInsertNoRegionalBlackoutBehavior? = nil,
        webDeliveryAllowedFlag: Scte35SpliceInsertWebDeliveryAllowedBehavior? = nil
    )
    {
        self.adAvailOffset = adAvailOffset
        self.noRegionalBlackoutFlag = noRegionalBlackoutFlag
        self.webDeliveryAllowedFlag = webDeliveryAllowedFlag
    }
}

/// Scte35 Splice Insert No Regional Blackout Behavior
public enum Scte35SpliceInsertNoRegionalBlackoutBehavior {
    case follow
    case ignore
    case sdkUnknown(String)
}

extension Scte35SpliceInsertNoRegionalBlackoutBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Scte35SpliceInsertNoRegionalBlackoutBehavior] {
        return [
            .follow,
            .ignore,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .follow: return "FOLLOW"
        case .ignore: return "IGNORE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Scte35SpliceInsertNoRegionalBlackoutBehavior(rawValue: rawValue) ?? Scte35SpliceInsertNoRegionalBlackoutBehavior.sdkUnknown(rawValue)
    }
}

extension Scte35SpliceInsertScheduleActionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case duration = "duration"
        case spliceEventId = "spliceEventId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if spliceEventId != 0 {
            try encodeContainer.encode(spliceEventId, forKey: .spliceEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let spliceEventIdDecoded = try containerValues.decode(Int.self, forKey: .spliceEventId)
        spliceEventId = spliceEventIdDecoded
    }
}

extension Scte35SpliceInsertScheduleActionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Scte35SpliceInsertScheduleActionSettings(duration: \(String(describing: duration)), spliceEventId: \(String(describing: spliceEventId)))"}
}

/// Settings for a SCTE-35 splice_insert message.
public struct Scte35SpliceInsertScheduleActionSettings: Equatable {
    /// Optional, the duration for the splice_insert, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a duration, there is an expectation that the downstream system can read the duration and cue in at that time. If you do not enter a duration, the splice_insert will continue indefinitely and there is an expectation that you will enter a return_to_network to end the splice_insert at the appropriate time.
    public let duration: Int
    /// The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
    public let spliceEventId: Int

    public init (
        duration: Int = 0,
        spliceEventId: Int = 0
    )
    {
        self.duration = duration
        self.spliceEventId = spliceEventId
    }
}

/// Scte35 Splice Insert Web Delivery Allowed Behavior
public enum Scte35SpliceInsertWebDeliveryAllowedBehavior {
    case follow
    case ignore
    case sdkUnknown(String)
}

extension Scte35SpliceInsertWebDeliveryAllowedBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Scte35SpliceInsertWebDeliveryAllowedBehavior] {
        return [
            .follow,
            .ignore,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .follow: return "FOLLOW"
        case .ignore: return "IGNORE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Scte35SpliceInsertWebDeliveryAllowedBehavior(rawValue: rawValue) ?? Scte35SpliceInsertWebDeliveryAllowedBehavior.sdkUnknown(rawValue)
    }
}

extension Scte35TimeSignalApos: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adAvailOffset = "adAvailOffset"
        case noRegionalBlackoutFlag = "noRegionalBlackoutFlag"
        case webDeliveryAllowedFlag = "webDeliveryAllowedFlag"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if adAvailOffset != 0 {
            try encodeContainer.encode(adAvailOffset, forKey: .adAvailOffset)
        }
        if let noRegionalBlackoutFlag = noRegionalBlackoutFlag {
            try encodeContainer.encode(noRegionalBlackoutFlag.rawValue, forKey: .noRegionalBlackoutFlag)
        }
        if let webDeliveryAllowedFlag = webDeliveryAllowedFlag {
            try encodeContainer.encode(webDeliveryAllowedFlag.rawValue, forKey: .webDeliveryAllowedFlag)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adAvailOffsetDecoded = try containerValues.decode(Int.self, forKey: .adAvailOffset)
        adAvailOffset = adAvailOffsetDecoded
        let noRegionalBlackoutFlagDecoded = try containerValues.decodeIfPresent(Scte35AposNoRegionalBlackoutBehavior.self, forKey: .noRegionalBlackoutFlag)
        noRegionalBlackoutFlag = noRegionalBlackoutFlagDecoded
        let webDeliveryAllowedFlagDecoded = try containerValues.decodeIfPresent(Scte35AposWebDeliveryAllowedBehavior.self, forKey: .webDeliveryAllowedFlag)
        webDeliveryAllowedFlag = webDeliveryAllowedFlagDecoded
    }
}

extension Scte35TimeSignalApos: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Scte35TimeSignalApos(adAvailOffset: \(String(describing: adAvailOffset)), noRegionalBlackoutFlag: \(String(describing: noRegionalBlackoutFlag)), webDeliveryAllowedFlag: \(String(describing: webDeliveryAllowedFlag)))"}
}

/// Scte35 Time Signal Apos
public struct Scte35TimeSignalApos: Equatable {
    /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
    public let adAvailOffset: Int
    /// When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    public let noRegionalBlackoutFlag: Scte35AposNoRegionalBlackoutBehavior?
    /// When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    public let webDeliveryAllowedFlag: Scte35AposWebDeliveryAllowedBehavior?

    public init (
        adAvailOffset: Int = 0,
        noRegionalBlackoutFlag: Scte35AposNoRegionalBlackoutBehavior? = nil,
        webDeliveryAllowedFlag: Scte35AposWebDeliveryAllowedBehavior? = nil
    )
    {
        self.adAvailOffset = adAvailOffset
        self.noRegionalBlackoutFlag = noRegionalBlackoutFlag
        self.webDeliveryAllowedFlag = webDeliveryAllowedFlag
    }
}

extension Scte35TimeSignalScheduleActionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case scte35Descriptors = "scte35Descriptors"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scte35Descriptors = scte35Descriptors {
            var scte35DescriptorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scte35Descriptors)
            for __listofscte35descriptor0 in scte35Descriptors {
                try scte35DescriptorsContainer.encode(__listofscte35descriptor0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scte35DescriptorsContainer = try containerValues.decodeIfPresent([Scte35Descriptor?].self, forKey: .scte35Descriptors)
        var scte35DescriptorsDecoded0:[Scte35Descriptor]? = nil
        if let scte35DescriptorsContainer = scte35DescriptorsContainer {
            scte35DescriptorsDecoded0 = [Scte35Descriptor]()
            for structure0 in scte35DescriptorsContainer {
                if let structure0 = structure0 {
                    scte35DescriptorsDecoded0?.append(structure0)
                }
            }
        }
        scte35Descriptors = scte35DescriptorsDecoded0
    }
}

extension Scte35TimeSignalScheduleActionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Scte35TimeSignalScheduleActionSettings(scte35Descriptors: \(String(describing: scte35Descriptors)))"}
}

/// Settings for a SCTE-35 time_signal.
public struct Scte35TimeSignalScheduleActionSettings: Equatable {
    /// The list of SCTE-35 descriptors accompanying the SCTE-35 time_signal.
    public let scte35Descriptors: [Scte35Descriptor]?

    public init (
        scte35Descriptors: [Scte35Descriptor]? = nil
    )
    {
        self.scte35Descriptors = scte35Descriptors
    }
}

/// Corresponds to the web_delivery_allowed_flag parameter. A value of WEB_DELIVERY_NOT_ALLOWED corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
public enum Scte35WebDeliveryAllowedFlag {
    case webDeliveryAllowed
    case webDeliveryNotAllowed
    case sdkUnknown(String)
}

extension Scte35WebDeliveryAllowedFlag : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Scte35WebDeliveryAllowedFlag] {
        return [
            .webDeliveryAllowed,
            .webDeliveryNotAllowed,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .webDeliveryAllowed: return "WEB_DELIVERY_ALLOWED"
        case .webDeliveryNotAllowed: return "WEB_DELIVERY_NOT_ALLOWED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Scte35WebDeliveryAllowedFlag(rawValue: rawValue) ?? Scte35WebDeliveryAllowedFlag.sdkUnknown(rawValue)
    }
}

/// Smooth Group Audio Only Timecode Control
public enum SmoothGroupAudioOnlyTimecodeControl {
    case passthrough
    case useConfiguredClock
    case sdkUnknown(String)
}

extension SmoothGroupAudioOnlyTimecodeControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SmoothGroupAudioOnlyTimecodeControl] {
        return [
            .passthrough,
            .useConfiguredClock,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .passthrough: return "PASSTHROUGH"
        case .useConfiguredClock: return "USE_CONFIGURED_CLOCK"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SmoothGroupAudioOnlyTimecodeControl(rawValue: rawValue) ?? SmoothGroupAudioOnlyTimecodeControl.sdkUnknown(rawValue)
    }
}

/// Smooth Group Certificate Mode
public enum SmoothGroupCertificateMode {
    case selfSigned
    case verifyAuthenticity
    case sdkUnknown(String)
}

extension SmoothGroupCertificateMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SmoothGroupCertificateMode] {
        return [
            .selfSigned,
            .verifyAuthenticity,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .selfSigned: return "SELF_SIGNED"
        case .verifyAuthenticity: return "VERIFY_AUTHENTICITY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SmoothGroupCertificateMode(rawValue: rawValue) ?? SmoothGroupCertificateMode.sdkUnknown(rawValue)
    }
}

/// Smooth Group Event Id Mode
public enum SmoothGroupEventIdMode {
    case noEventId
    case useConfigured
    case useTimestamp
    case sdkUnknown(String)
}

extension SmoothGroupEventIdMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SmoothGroupEventIdMode] {
        return [
            .noEventId,
            .useConfigured,
            .useTimestamp,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noEventId: return "NO_EVENT_ID"
        case .useConfigured: return "USE_CONFIGURED"
        case .useTimestamp: return "USE_TIMESTAMP"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SmoothGroupEventIdMode(rawValue: rawValue) ?? SmoothGroupEventIdMode.sdkUnknown(rawValue)
    }
}

/// Smooth Group Event Stop Behavior
public enum SmoothGroupEventStopBehavior {
    case `none`
    case sendEos
    case sdkUnknown(String)
}

extension SmoothGroupEventStopBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SmoothGroupEventStopBehavior] {
        return [
            .none,
            .sendEos,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .sendEos: return "SEND_EOS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SmoothGroupEventStopBehavior(rawValue: rawValue) ?? SmoothGroupEventStopBehavior.sdkUnknown(rawValue)
    }
}

/// Smooth Group Segmentation Mode
public enum SmoothGroupSegmentationMode {
    case useInputSegmentation
    case useSegmentDuration
    case sdkUnknown(String)
}

extension SmoothGroupSegmentationMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SmoothGroupSegmentationMode] {
        return [
            .useInputSegmentation,
            .useSegmentDuration,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .useInputSegmentation: return "USE_INPUT_SEGMENTATION"
        case .useSegmentDuration: return "USE_SEGMENT_DURATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SmoothGroupSegmentationMode(rawValue: rawValue) ?? SmoothGroupSegmentationMode.sdkUnknown(rawValue)
    }
}

/// Smooth Group Sparse Track Type
public enum SmoothGroupSparseTrackType {
    case `none`
    case scte35
    case scte35WithoutSegmentation
    case sdkUnknown(String)
}

extension SmoothGroupSparseTrackType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SmoothGroupSparseTrackType] {
        return [
            .none,
            .scte35,
            .scte35WithoutSegmentation,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .scte35: return "SCTE_35"
        case .scte35WithoutSegmentation: return "SCTE_35_WITHOUT_SEGMENTATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SmoothGroupSparseTrackType(rawValue: rawValue) ?? SmoothGroupSparseTrackType.sdkUnknown(rawValue)
    }
}

/// Smooth Group Stream Manifest Behavior
public enum SmoothGroupStreamManifestBehavior {
    case doNotSend
    case send
    case sdkUnknown(String)
}

extension SmoothGroupStreamManifestBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SmoothGroupStreamManifestBehavior] {
        return [
            .doNotSend,
            .send,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .doNotSend: return "DO_NOT_SEND"
        case .send: return "SEND"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SmoothGroupStreamManifestBehavior(rawValue: rawValue) ?? SmoothGroupStreamManifestBehavior.sdkUnknown(rawValue)
    }
}

/// Smooth Group Timestamp Offset Mode
public enum SmoothGroupTimestampOffsetMode {
    case useConfiguredOffset
    case useEventStartDate
    case sdkUnknown(String)
}

extension SmoothGroupTimestampOffsetMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SmoothGroupTimestampOffsetMode] {
        return [
            .useConfiguredOffset,
            .useEventStartDate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .useConfiguredOffset: return "USE_CONFIGURED_OFFSET"
        case .useEventStartDate: return "USE_EVENT_START_DATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SmoothGroupTimestampOffsetMode(rawValue: rawValue) ?? SmoothGroupTimestampOffsetMode.sdkUnknown(rawValue)
    }
}

/// Smpte2038 Data Preference
public enum Smpte2038DataPreference {
    case ignore
    case prefer
    case sdkUnknown(String)
}

extension Smpte2038DataPreference : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Smpte2038DataPreference] {
        return [
            .ignore,
            .prefer,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ignore: return "IGNORE"
        case .prefer: return "PREFER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Smpte2038DataPreference(rawValue: rawValue) ?? Smpte2038DataPreference.sdkUnknown(rawValue)
    }
}

extension SmpteTtDestinationSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension SmpteTtDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SmpteTtDestinationSettings()"}
}

/// Smpte Tt Destination Settings
public struct SmpteTtDestinationSettings: Equatable {

    public init() {}
}

extension StandardHlsSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioRenditionSets = "audioRenditionSets"
        case m3u8Settings = "m3u8Settings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioRenditionSets = audioRenditionSets {
            try encodeContainer.encode(audioRenditionSets, forKey: .audioRenditionSets)
        }
        if let m3u8Settings = m3u8Settings {
            try encodeContainer.encode(m3u8Settings, forKey: .m3u8Settings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioRenditionSetsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioRenditionSets)
        audioRenditionSets = audioRenditionSetsDecoded
        let m3u8SettingsDecoded = try containerValues.decodeIfPresent(M3u8Settings.self, forKey: .m3u8Settings)
        m3u8Settings = m3u8SettingsDecoded
    }
}

extension StandardHlsSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StandardHlsSettings(audioRenditionSets: \(String(describing: audioRenditionSets)), m3u8Settings: \(String(describing: m3u8Settings)))"}
}

/// Standard Hls Settings
public struct StandardHlsSettings: Equatable {
    /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
    public let audioRenditionSets: String?
    /// Settings information for the .m3u8 container
    public let m3u8Settings: M3u8Settings?

    public init (
        audioRenditionSets: String? = nil,
        m3u8Settings: M3u8Settings? = nil
    )
    {
        self.audioRenditionSets = audioRenditionSets
        self.m3u8Settings = m3u8Settings
    }
}

extension StartChannelInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartChannelInput(channelId: \(String(describing: channelId)))"}
}

extension StartChannelInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct StartChannelInputHeadersMiddleware: Middleware {
    public let id: String = "StartChannelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartChannelInput>,
                  next: H) -> Swift.Result<OperationOutput<StartChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartChannelInput>
    public typealias MOutput = OperationOutput<StartChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartChannelOutputError>
}

public struct StartChannelInputQueryItemMiddleware: Middleware {
    public let id: String = "StartChannelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartChannelInput>,
                  next: H) -> Swift.Result<OperationOutput<StartChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartChannelInput>
    public typealias MOutput = OperationOutput<StartChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartChannelOutputError>
}

/// Placeholder documentation for StartChannelRequest
public struct StartChannelInput: Equatable {
    /// A request to start a channel
    public let channelId: String?

    public init (
        channelId: String? = nil
    )
    {
        self.channelId = channelId
    }
}

struct StartChannelInputBody: Equatable {
}

extension StartChannelInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension StartChannelOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartChannelOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartChannelOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartChannelOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartChannelOutputResponse(arn: \(String(describing: arn)), cdiInputSpecification: \(String(describing: cdiInputSpecification)), channelClass: \(String(describing: channelClass)), destinations: \(String(describing: destinations)), egressEndpoints: \(String(describing: egressEndpoints)), encoderSettings: \(String(describing: encoderSettings)), id: \(String(describing: id)), inputAttachments: \(String(describing: inputAttachments)), inputSpecification: \(String(describing: inputSpecification)), logLevel: \(String(describing: logLevel)), name: \(String(describing: name)), pipelineDetails: \(String(describing: pipelineDetails)), pipelinesRunningCount: \(String(describing: pipelinesRunningCount)), roleArn: \(String(describing: roleArn)), state: \(String(describing: state)), tags: \(String(describing: tags)), vpc: \(String(describing: vpc)))"}
}

extension StartChannelOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StartChannelOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.cdiInputSpecification = output.cdiInputSpecification
            self.channelClass = output.channelClass
            self.destinations = output.destinations
            self.egressEndpoints = output.egressEndpoints
            self.encoderSettings = output.encoderSettings
            self.id = output.id
            self.inputAttachments = output.inputAttachments
            self.inputSpecification = output.inputSpecification
            self.logLevel = output.logLevel
            self.name = output.name
            self.pipelineDetails = output.pipelineDetails
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.roleArn = output.roleArn
            self.state = output.state
            self.tags = output.tags
            self.vpc = output.vpc
        } else {
            self.arn = nil
            self.cdiInputSpecification = nil
            self.channelClass = nil
            self.destinations = nil
            self.egressEndpoints = nil
            self.encoderSettings = nil
            self.id = nil
            self.inputAttachments = nil
            self.inputSpecification = nil
            self.logLevel = nil
            self.name = nil
            self.pipelineDetails = nil
            self.pipelinesRunningCount = 0
            self.roleArn = nil
            self.state = nil
            self.tags = nil
            self.vpc = nil
        }
    }
}

/// Placeholder documentation for StartChannelResponse
public struct StartChannelOutputResponse: Equatable {
    /// The unique arn of the channel.
    public let arn: String?
    /// Specification of CDI inputs for this channel
    public let cdiInputSpecification: CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public let channelClass: ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one
    /// destination per output. For other types (HLS, for example), there is
    /// one destination per packager.
    public let destinations: [OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public let egressEndpoints: [ChannelEgressEndpoint]?
    /// Encoder Settings
    public let encoderSettings: EncoderSettings?
    /// The unique id of the channel.
    public let id: String?
    /// List of input attachments for channel.
    public let inputAttachments: [InputAttachment]?
    /// Specification of network and file inputs for this channel
    public let inputSpecification: InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public let logLevel: LogLevel?
    /// The name of the channel. (user-mutable)
    public let name: String?
    /// Runtime details for the pipelines of a running channel.
    public let pipelineDetails: [PipelineDetail]?
    /// The number of currently healthy pipelines.
    public let pipelinesRunningCount: Int
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public let roleArn: String?
    /// Placeholder documentation for ChannelState
    public let state: ChannelState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// Settings for VPC output
    public let vpc: VpcOutputSettingsDescription?

    public init (
        arn: String? = nil,
        cdiInputSpecification: CdiInputSpecification? = nil,
        channelClass: ChannelClass? = nil,
        destinations: [OutputDestination]? = nil,
        egressEndpoints: [ChannelEgressEndpoint]? = nil,
        encoderSettings: EncoderSettings? = nil,
        id: String? = nil,
        inputAttachments: [InputAttachment]? = nil,
        inputSpecification: InputSpecification? = nil,
        logLevel: LogLevel? = nil,
        name: String? = nil,
        pipelineDetails: [PipelineDetail]? = nil,
        pipelinesRunningCount: Int = 0,
        roleArn: String? = nil,
        state: ChannelState? = nil,
        tags: [String:String]? = nil,
        vpc: VpcOutputSettingsDescription? = nil
    )
    {
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.encoderSettings = encoderSettings
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.name = name
        self.pipelineDetails = pipelineDetails
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

struct StartChannelOutputResponseBody: Equatable {
    public let arn: String?
    public let cdiInputSpecification: CdiInputSpecification?
    public let channelClass: ChannelClass?
    public let destinations: [OutputDestination]?
    public let egressEndpoints: [ChannelEgressEndpoint]?
    public let encoderSettings: EncoderSettings?
    public let id: String?
    public let inputAttachments: [InputAttachment]?
    public let inputSpecification: InputSpecification?
    public let logLevel: LogLevel?
    public let name: String?
    public let pipelineDetails: [PipelineDetail]?
    public let pipelinesRunningCount: Int
    public let roleArn: String?
    public let state: ChannelState?
    public let tags: [String:String]?
    public let vpc: VpcOutputSettingsDescription?
}

extension StartChannelOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case egressEndpoints = "egressEndpoints"
        case encoderSettings = "encoderSettings"
        case id = "id"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case name = "name"
        case pipelineDetails = "pipelineDetails"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case roleArn = "roleArn"
        case state = "state"
        case tags = "tags"
        case vpc = "vpc"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let egressEndpointsContainer = try containerValues.decodeIfPresent([ChannelEgressEndpoint?].self, forKey: .egressEndpoints)
        var egressEndpointsDecoded0:[ChannelEgressEndpoint]? = nil
        if let egressEndpointsContainer = egressEndpointsContainer {
            egressEndpointsDecoded0 = [ChannelEgressEndpoint]()
            for structure0 in egressEndpointsContainer {
                if let structure0 = structure0 {
                    egressEndpointsDecoded0?.append(structure0)
                }
            }
        }
        egressEndpoints = egressEndpointsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([PipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[PipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [PipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let pipelinesRunningCountDecoded = try containerValues.decode(Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ChannelState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(VpcOutputSettingsDescription.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension StartMultiplexInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartMultiplexInput(multiplexId: \(String(describing: multiplexId)))"}
}

extension StartMultiplexInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct StartMultiplexInputHeadersMiddleware: Middleware {
    public let id: String = "StartMultiplexInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMultiplexInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMultiplexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMultiplexInput>
    public typealias MOutput = OperationOutput<StartMultiplexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartMultiplexOutputError>
}

public struct StartMultiplexInputQueryItemMiddleware: Middleware {
    public let id: String = "StartMultiplexInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMultiplexInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMultiplexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMultiplexInput>
    public typealias MOutput = OperationOutput<StartMultiplexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartMultiplexOutputError>
}

/// Placeholder documentation for StartMultiplexRequest
public struct StartMultiplexInput: Equatable {
    /// The ID of the multiplex.
    public let multiplexId: String?

    public init (
        multiplexId: String? = nil
    )
    {
        self.multiplexId = multiplexId
    }
}

struct StartMultiplexInputBody: Equatable {
}

extension StartMultiplexInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension StartMultiplexOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartMultiplexOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartMultiplexOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMultiplexOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartMultiplexOutputResponse(arn: \(String(describing: arn)), availabilityZones: \(String(describing: availabilityZones)), destinations: \(String(describing: destinations)), id: \(String(describing: id)), multiplexSettings: \(String(describing: multiplexSettings)), name: \(String(describing: name)), pipelinesRunningCount: \(String(describing: pipelinesRunningCount)), programCount: \(String(describing: programCount)), state: \(String(describing: state)), tags: \(String(describing: tags)))"}
}

extension StartMultiplexOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StartMultiplexOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.availabilityZones = output.availabilityZones
            self.destinations = output.destinations
            self.id = output.id
            self.multiplexSettings = output.multiplexSettings
            self.name = output.name
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.programCount = output.programCount
            self.state = output.state
            self.tags = output.tags
        } else {
            self.arn = nil
            self.availabilityZones = nil
            self.destinations = nil
            self.id = nil
            self.multiplexSettings = nil
            self.name = nil
            self.pipelinesRunningCount = 0
            self.programCount = 0
            self.state = nil
            self.tags = nil
        }
    }
}

/// Placeholder documentation for StartMultiplexResponse
public struct StartMultiplexOutputResponse: Equatable {
    /// The unique arn of the multiplex.
    public let arn: String?
    /// A list of availability zones for the multiplex.
    public let availabilityZones: [String]?
    /// A list of the multiplex output destinations.
    public let destinations: [MultiplexOutputDestination]?
    /// The unique id of the multiplex.
    public let id: String?
    /// Configuration for a multiplex event.
    public let multiplexSettings: MultiplexSettings?
    /// The name of the multiplex.
    public let name: String?
    /// The number of currently healthy pipelines.
    public let pipelinesRunningCount: Int
    /// The number of programs in the multiplex.
    public let programCount: Int
    /// The current state of the multiplex.
    public let state: MultiplexState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?

    public init (
        arn: String? = nil,
        availabilityZones: [String]? = nil,
        destinations: [MultiplexOutputDestination]? = nil,
        id: String? = nil,
        multiplexSettings: MultiplexSettings? = nil,
        name: String? = nil,
        pipelinesRunningCount: Int = 0,
        programCount: Int = 0,
        state: MultiplexState? = nil,
        tags: [String:String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZones = availabilityZones
        self.destinations = destinations
        self.id = id
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.programCount = programCount
        self.state = state
        self.tags = tags
    }
}

struct StartMultiplexOutputResponseBody: Equatable {
    public let arn: String?
    public let availabilityZones: [String]?
    public let destinations: [MultiplexOutputDestination]?
    public let id: String?
    public let multiplexSettings: MultiplexSettings?
    public let name: String?
    public let pipelinesRunningCount: Int
    public let programCount: Int
    public let state: MultiplexState?
    public let tags: [String:String]?
}

extension StartMultiplexOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case destinations = "destinations"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MultiplexOutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MultiplexOutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MultiplexOutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decode(Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decode(Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StartTimecode: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case timecode = "timecode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let timecode = timecode {
            try encodeContainer.encode(timecode, forKey: .timecode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timecodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timecode)
        timecode = timecodeDecoded
    }
}

extension StartTimecode: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartTimecode(timecode: \(String(describing: timecode)))"}
}

/// Settings to identify the start of the clip.
public struct StartTimecode: Equatable {
    /// The timecode for the frame where you want to start the clip. Optional; if not specified, the clip starts at first frame in the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
    public let timecode: String?

    public init (
        timecode: String? = nil
    )
    {
        self.timecode = timecode
    }
}

extension StaticImageActivateScheduleActionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case duration = "duration"
        case fadeIn = "fadeIn"
        case fadeOut = "fadeOut"
        case height = "height"
        case image = "image"
        case imageX = "imageX"
        case imageY = "imageY"
        case layer = "layer"
        case opacity = "opacity"
        case width = "width"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if fadeIn != 0 {
            try encodeContainer.encode(fadeIn, forKey: .fadeIn)
        }
        if fadeOut != 0 {
            try encodeContainer.encode(fadeOut, forKey: .fadeOut)
        }
        if height != 0 {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if imageX != 0 {
            try encodeContainer.encode(imageX, forKey: .imageX)
        }
        if imageY != 0 {
            try encodeContainer.encode(imageY, forKey: .imageY)
        }
        if layer != 0 {
            try encodeContainer.encode(layer, forKey: .layer)
        }
        if opacity != 0 {
            try encodeContainer.encode(opacity, forKey: .opacity)
        }
        if width != 0 {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let fadeInDecoded = try containerValues.decode(Int.self, forKey: .fadeIn)
        fadeIn = fadeInDecoded
        let fadeOutDecoded = try containerValues.decode(Int.self, forKey: .fadeOut)
        fadeOut = fadeOutDecoded
        let heightDecoded = try containerValues.decode(Int.self, forKey: .height)
        height = heightDecoded
        let imageDecoded = try containerValues.decodeIfPresent(InputLocation.self, forKey: .image)
        image = imageDecoded
        let imageXDecoded = try containerValues.decode(Int.self, forKey: .imageX)
        imageX = imageXDecoded
        let imageYDecoded = try containerValues.decode(Int.self, forKey: .imageY)
        imageY = imageYDecoded
        let layerDecoded = try containerValues.decode(Int.self, forKey: .layer)
        layer = layerDecoded
        let opacityDecoded = try containerValues.decode(Int.self, forKey: .opacity)
        opacity = opacityDecoded
        let widthDecoded = try containerValues.decode(Int.self, forKey: .width)
        width = widthDecoded
    }
}

extension StaticImageActivateScheduleActionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StaticImageActivateScheduleActionSettings(duration: \(String(describing: duration)), fadeIn: \(String(describing: fadeIn)), fadeOut: \(String(describing: fadeOut)), height: \(String(describing: height)), image: \(String(describing: image)), imageX: \(String(describing: imageX)), imageY: \(String(describing: imageY)), layer: \(String(describing: layer)), opacity: \(String(describing: opacity)), width: \(String(describing: width)))"}
}

/// Settings for the action to activate a static image.
public struct StaticImageActivateScheduleActionSettings: Equatable {
    /// The duration in milliseconds for the image to remain on the video. If omitted or set to 0 the duration is unlimited and the image will remain until it is explicitly deactivated.
    public let duration: Int
    /// The time in milliseconds for the image to fade in. The fade-in starts at the start time of the overlay. Default is 0 (no fade-in).
    public let fadeIn: Int
    /// Applies only if a duration is specified. The time in milliseconds for the image to fade out. The fade-out starts when the duration time is hit, so it effectively extends the duration. Default is 0 (no fade-out).
    public let fadeOut: Int
    /// The height of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified height. Leave blank to use the native height of the overlay.
    public let height: Int
    /// The location and filename of the image file to overlay on the video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in pixels) than the input video.
    public let image: InputLocation?
    /// Placement of the left edge of the overlay relative to the left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame. If the placement causes the overlay to extend beyond the right edge of the underlying video, then the overlay is cropped on the right.
    public let imageX: Int
    /// Placement of the top edge of the overlay relative to the top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame. If the placement causes the overlay to extend beyond the bottom edge of the underlying video, then the overlay is cropped on the bottom.
    public let imageY: Int
    /// The number of the layer, 0 to 7. There are 8 layers that can be overlaid on the video, each layer with a different image. The layers are in Z order, which means that overlays with higher values of layer are inserted on top of overlays with lower values of layer. Default is 0.
    public let layer: Int
    /// Opacity of image where 0 is transparent and 100 is fully opaque. Default is 100.
    public let opacity: Int
    /// The width of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified width. Leave blank to use the native width of the overlay.
    public let width: Int

    public init (
        duration: Int = 0,
        fadeIn: Int = 0,
        fadeOut: Int = 0,
        height: Int = 0,
        image: InputLocation? = nil,
        imageX: Int = 0,
        imageY: Int = 0,
        layer: Int = 0,
        opacity: Int = 0,
        width: Int = 0
    )
    {
        self.duration = duration
        self.fadeIn = fadeIn
        self.fadeOut = fadeOut
        self.height = height
        self.image = image
        self.imageX = imageX
        self.imageY = imageY
        self.layer = layer
        self.opacity = opacity
        self.width = width
    }
}

extension StaticImageDeactivateScheduleActionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fadeOut = "fadeOut"
        case layer = "layer"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if fadeOut != 0 {
            try encodeContainer.encode(fadeOut, forKey: .fadeOut)
        }
        if layer != 0 {
            try encodeContainer.encode(layer, forKey: .layer)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fadeOutDecoded = try containerValues.decode(Int.self, forKey: .fadeOut)
        fadeOut = fadeOutDecoded
        let layerDecoded = try containerValues.decode(Int.self, forKey: .layer)
        layer = layerDecoded
    }
}

extension StaticImageDeactivateScheduleActionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StaticImageDeactivateScheduleActionSettings(fadeOut: \(String(describing: fadeOut)), layer: \(String(describing: layer)))"}
}

/// Settings for the action to deactivate the image in a specific layer.
public struct StaticImageDeactivateScheduleActionSettings: Equatable {
    /// The time in milliseconds for the image to fade out. Default is 0 (no fade-out).
    public let fadeOut: Int
    /// The image overlay layer to deactivate, 0 to 7. Default is 0.
    public let layer: Int

    public init (
        fadeOut: Int = 0,
        layer: Int = 0
    )
    {
        self.fadeOut = fadeOut
        self.layer = layer
    }
}

extension StaticKeySettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case keyProviderServer = "keyProviderServer"
        case staticKeyValue = "staticKeyValue"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyProviderServer = keyProviderServer {
            try encodeContainer.encode(keyProviderServer, forKey: .keyProviderServer)
        }
        if let staticKeyValue = staticKeyValue {
            try encodeContainer.encode(staticKeyValue, forKey: .staticKeyValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyProviderServerDecoded = try containerValues.decodeIfPresent(InputLocation.self, forKey: .keyProviderServer)
        keyProviderServer = keyProviderServerDecoded
        let staticKeyValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .staticKeyValue)
        staticKeyValue = staticKeyValueDecoded
    }
}

extension StaticKeySettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StaticKeySettings(keyProviderServer: \(String(describing: keyProviderServer)), staticKeyValue: \(String(describing: staticKeyValue)))"}
}

/// Static Key Settings
public struct StaticKeySettings: Equatable {
    /// The URL of the license server used for protecting content.
    public let keyProviderServer: InputLocation?
    /// Static key value as a 32 character hexadecimal string.
    public let staticKeyValue: String?

    public init (
        keyProviderServer: InputLocation? = nil,
        staticKeyValue: String? = nil
    )
    {
        self.keyProviderServer = keyProviderServer
        self.staticKeyValue = staticKeyValue
    }
}

extension StopChannelInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopChannelInput(channelId: \(String(describing: channelId)))"}
}

extension StopChannelInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct StopChannelInputHeadersMiddleware: Middleware {
    public let id: String = "StopChannelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopChannelInput>,
                  next: H) -> Swift.Result<OperationOutput<StopChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopChannelInput>
    public typealias MOutput = OperationOutput<StopChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopChannelOutputError>
}

public struct StopChannelInputQueryItemMiddleware: Middleware {
    public let id: String = "StopChannelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopChannelInput>,
                  next: H) -> Swift.Result<OperationOutput<StopChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopChannelInput>
    public typealias MOutput = OperationOutput<StopChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopChannelOutputError>
}

/// Placeholder documentation for StopChannelRequest
public struct StopChannelInput: Equatable {
    /// A request to stop a running channel
    public let channelId: String?

    public init (
        channelId: String? = nil
    )
    {
        self.channelId = channelId
    }
}

struct StopChannelInputBody: Equatable {
}

extension StopChannelInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension StopChannelOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopChannelOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopChannelOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopChannelOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopChannelOutputResponse(arn: \(String(describing: arn)), cdiInputSpecification: \(String(describing: cdiInputSpecification)), channelClass: \(String(describing: channelClass)), destinations: \(String(describing: destinations)), egressEndpoints: \(String(describing: egressEndpoints)), encoderSettings: \(String(describing: encoderSettings)), id: \(String(describing: id)), inputAttachments: \(String(describing: inputAttachments)), inputSpecification: \(String(describing: inputSpecification)), logLevel: \(String(describing: logLevel)), name: \(String(describing: name)), pipelineDetails: \(String(describing: pipelineDetails)), pipelinesRunningCount: \(String(describing: pipelinesRunningCount)), roleArn: \(String(describing: roleArn)), state: \(String(describing: state)), tags: \(String(describing: tags)), vpc: \(String(describing: vpc)))"}
}

extension StopChannelOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StopChannelOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.cdiInputSpecification = output.cdiInputSpecification
            self.channelClass = output.channelClass
            self.destinations = output.destinations
            self.egressEndpoints = output.egressEndpoints
            self.encoderSettings = output.encoderSettings
            self.id = output.id
            self.inputAttachments = output.inputAttachments
            self.inputSpecification = output.inputSpecification
            self.logLevel = output.logLevel
            self.name = output.name
            self.pipelineDetails = output.pipelineDetails
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.roleArn = output.roleArn
            self.state = output.state
            self.tags = output.tags
            self.vpc = output.vpc
        } else {
            self.arn = nil
            self.cdiInputSpecification = nil
            self.channelClass = nil
            self.destinations = nil
            self.egressEndpoints = nil
            self.encoderSettings = nil
            self.id = nil
            self.inputAttachments = nil
            self.inputSpecification = nil
            self.logLevel = nil
            self.name = nil
            self.pipelineDetails = nil
            self.pipelinesRunningCount = 0
            self.roleArn = nil
            self.state = nil
            self.tags = nil
            self.vpc = nil
        }
    }
}

/// Placeholder documentation for StopChannelResponse
public struct StopChannelOutputResponse: Equatable {
    /// The unique arn of the channel.
    public let arn: String?
    /// Specification of CDI inputs for this channel
    public let cdiInputSpecification: CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public let channelClass: ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one
    /// destination per output. For other types (HLS, for example), there is
    /// one destination per packager.
    public let destinations: [OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public let egressEndpoints: [ChannelEgressEndpoint]?
    /// Encoder Settings
    public let encoderSettings: EncoderSettings?
    /// The unique id of the channel.
    public let id: String?
    /// List of input attachments for channel.
    public let inputAttachments: [InputAttachment]?
    /// Specification of network and file inputs for this channel
    public let inputSpecification: InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public let logLevel: LogLevel?
    /// The name of the channel. (user-mutable)
    public let name: String?
    /// Runtime details for the pipelines of a running channel.
    public let pipelineDetails: [PipelineDetail]?
    /// The number of currently healthy pipelines.
    public let pipelinesRunningCount: Int
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public let roleArn: String?
    /// Placeholder documentation for ChannelState
    public let state: ChannelState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// Settings for VPC output
    public let vpc: VpcOutputSettingsDescription?

    public init (
        arn: String? = nil,
        cdiInputSpecification: CdiInputSpecification? = nil,
        channelClass: ChannelClass? = nil,
        destinations: [OutputDestination]? = nil,
        egressEndpoints: [ChannelEgressEndpoint]? = nil,
        encoderSettings: EncoderSettings? = nil,
        id: String? = nil,
        inputAttachments: [InputAttachment]? = nil,
        inputSpecification: InputSpecification? = nil,
        logLevel: LogLevel? = nil,
        name: String? = nil,
        pipelineDetails: [PipelineDetail]? = nil,
        pipelinesRunningCount: Int = 0,
        roleArn: String? = nil,
        state: ChannelState? = nil,
        tags: [String:String]? = nil,
        vpc: VpcOutputSettingsDescription? = nil
    )
    {
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.encoderSettings = encoderSettings
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.name = name
        self.pipelineDetails = pipelineDetails
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

struct StopChannelOutputResponseBody: Equatable {
    public let arn: String?
    public let cdiInputSpecification: CdiInputSpecification?
    public let channelClass: ChannelClass?
    public let destinations: [OutputDestination]?
    public let egressEndpoints: [ChannelEgressEndpoint]?
    public let encoderSettings: EncoderSettings?
    public let id: String?
    public let inputAttachments: [InputAttachment]?
    public let inputSpecification: InputSpecification?
    public let logLevel: LogLevel?
    public let name: String?
    public let pipelineDetails: [PipelineDetail]?
    public let pipelinesRunningCount: Int
    public let roleArn: String?
    public let state: ChannelState?
    public let tags: [String:String]?
    public let vpc: VpcOutputSettingsDescription?
}

extension StopChannelOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case egressEndpoints = "egressEndpoints"
        case encoderSettings = "encoderSettings"
        case id = "id"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case name = "name"
        case pipelineDetails = "pipelineDetails"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case roleArn = "roleArn"
        case state = "state"
        case tags = "tags"
        case vpc = "vpc"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let egressEndpointsContainer = try containerValues.decodeIfPresent([ChannelEgressEndpoint?].self, forKey: .egressEndpoints)
        var egressEndpointsDecoded0:[ChannelEgressEndpoint]? = nil
        if let egressEndpointsContainer = egressEndpointsContainer {
            egressEndpointsDecoded0 = [ChannelEgressEndpoint]()
            for structure0 in egressEndpointsContainer {
                if let structure0 = structure0 {
                    egressEndpointsDecoded0?.append(structure0)
                }
            }
        }
        egressEndpoints = egressEndpointsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([PipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[PipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [PipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let pipelinesRunningCountDecoded = try containerValues.decode(Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ChannelState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(VpcOutputSettingsDescription.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension StopMultiplexInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopMultiplexInput(multiplexId: \(String(describing: multiplexId)))"}
}

extension StopMultiplexInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct StopMultiplexInputHeadersMiddleware: Middleware {
    public let id: String = "StopMultiplexInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopMultiplexInput>,
                  next: H) -> Swift.Result<OperationOutput<StopMultiplexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopMultiplexInput>
    public typealias MOutput = OperationOutput<StopMultiplexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopMultiplexOutputError>
}

public struct StopMultiplexInputQueryItemMiddleware: Middleware {
    public let id: String = "StopMultiplexInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopMultiplexInput>,
                  next: H) -> Swift.Result<OperationOutput<StopMultiplexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopMultiplexInput>
    public typealias MOutput = OperationOutput<StopMultiplexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopMultiplexOutputError>
}

/// Placeholder documentation for StopMultiplexRequest
public struct StopMultiplexInput: Equatable {
    /// The ID of the multiplex.
    public let multiplexId: String?

    public init (
        multiplexId: String? = nil
    )
    {
        self.multiplexId = multiplexId
    }
}

struct StopMultiplexInputBody: Equatable {
}

extension StopMultiplexInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension StopMultiplexOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopMultiplexOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopMultiplexOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopMultiplexOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopMultiplexOutputResponse(arn: \(String(describing: arn)), availabilityZones: \(String(describing: availabilityZones)), destinations: \(String(describing: destinations)), id: \(String(describing: id)), multiplexSettings: \(String(describing: multiplexSettings)), name: \(String(describing: name)), pipelinesRunningCount: \(String(describing: pipelinesRunningCount)), programCount: \(String(describing: programCount)), state: \(String(describing: state)), tags: \(String(describing: tags)))"}
}

extension StopMultiplexOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StopMultiplexOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.availabilityZones = output.availabilityZones
            self.destinations = output.destinations
            self.id = output.id
            self.multiplexSettings = output.multiplexSettings
            self.name = output.name
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.programCount = output.programCount
            self.state = output.state
            self.tags = output.tags
        } else {
            self.arn = nil
            self.availabilityZones = nil
            self.destinations = nil
            self.id = nil
            self.multiplexSettings = nil
            self.name = nil
            self.pipelinesRunningCount = 0
            self.programCount = 0
            self.state = nil
            self.tags = nil
        }
    }
}

/// Placeholder documentation for StopMultiplexResponse
public struct StopMultiplexOutputResponse: Equatable {
    /// The unique arn of the multiplex.
    public let arn: String?
    /// A list of availability zones for the multiplex.
    public let availabilityZones: [String]?
    /// A list of the multiplex output destinations.
    public let destinations: [MultiplexOutputDestination]?
    /// The unique id of the multiplex.
    public let id: String?
    /// Configuration for a multiplex event.
    public let multiplexSettings: MultiplexSettings?
    /// The name of the multiplex.
    public let name: String?
    /// The number of currently healthy pipelines.
    public let pipelinesRunningCount: Int
    /// The number of programs in the multiplex.
    public let programCount: Int
    /// The current state of the multiplex.
    public let state: MultiplexState?
    /// A collection of key-value pairs.
    public let tags: [String:String]?

    public init (
        arn: String? = nil,
        availabilityZones: [String]? = nil,
        destinations: [MultiplexOutputDestination]? = nil,
        id: String? = nil,
        multiplexSettings: MultiplexSettings? = nil,
        name: String? = nil,
        pipelinesRunningCount: Int = 0,
        programCount: Int = 0,
        state: MultiplexState? = nil,
        tags: [String:String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZones = availabilityZones
        self.destinations = destinations
        self.id = id
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.programCount = programCount
        self.state = state
        self.tags = tags
    }
}

struct StopMultiplexOutputResponseBody: Equatable {
    public let arn: String?
    public let availabilityZones: [String]?
    public let destinations: [MultiplexOutputDestination]?
    public let id: String?
    public let multiplexSettings: MultiplexSettings?
    public let name: String?
    public let pipelinesRunningCount: Int
    public let programCount: Int
    public let state: MultiplexState?
    public let tags: [String:String]?
}

extension StopMultiplexOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case destinations = "destinations"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MultiplexOutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MultiplexOutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MultiplexOutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decode(Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decode(Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StopTimecode: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case lastFrameClippingBehavior = "lastFrameClippingBehavior"
        case timecode = "timecode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastFrameClippingBehavior = lastFrameClippingBehavior {
            try encodeContainer.encode(lastFrameClippingBehavior.rawValue, forKey: .lastFrameClippingBehavior)
        }
        if let timecode = timecode {
            try encodeContainer.encode(timecode, forKey: .timecode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastFrameClippingBehaviorDecoded = try containerValues.decodeIfPresent(LastFrameClippingBehavior.self, forKey: .lastFrameClippingBehavior)
        lastFrameClippingBehavior = lastFrameClippingBehaviorDecoded
        let timecodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timecode)
        timecode = timecodeDecoded
    }
}

extension StopTimecode: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopTimecode(lastFrameClippingBehavior: \(String(describing: lastFrameClippingBehavior)), timecode: \(String(describing: timecode)))"}
}

/// Settings to identify the end of the clip.
public struct StopTimecode: Equatable {
    /// If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
    public let lastFrameClippingBehavior: LastFrameClippingBehavior?
    /// The timecode for the frame where you want to stop the clip. Optional; if not specified, the clip continues to the end of the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
    public let timecode: String?

    public init (
        lastFrameClippingBehavior: LastFrameClippingBehavior? = nil,
        timecode: String? = nil
    )
    {
        self.lastFrameClippingBehavior = lastFrameClippingBehavior
        self.timecode = timecode
    }
}

extension TeletextDestinationSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension TeletextDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TeletextDestinationSettings()"}
}

/// Teletext Destination Settings
public struct TeletextDestinationSettings: Equatable {

    public init() {}
}

extension TeletextSourceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case outputRectangle = "outputRectangle"
        case pageNumber = "pageNumber"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputRectangle = outputRectangle {
            try encodeContainer.encode(outputRectangle, forKey: .outputRectangle)
        }
        if let pageNumber = pageNumber {
            try encodeContainer.encode(pageNumber, forKey: .pageNumber)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputRectangleDecoded = try containerValues.decodeIfPresent(CaptionRectangle.self, forKey: .outputRectangle)
        outputRectangle = outputRectangleDecoded
        let pageNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pageNumber)
        pageNumber = pageNumberDecoded
    }
}

extension TeletextSourceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TeletextSourceSettings(outputRectangle: \(String(describing: outputRectangle)), pageNumber: \(String(describing: pageNumber)))"}
}

/// Teletext Source Settings
public struct TeletextSourceSettings: Equatable {
    /// Optionally defines a region where TTML style captions will be displayed
    public let outputRectangle: CaptionRectangle?
    /// Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.
    public let pageNumber: String?

    public init (
        outputRectangle: CaptionRectangle? = nil,
        pageNumber: String? = nil
    )
    {
        self.outputRectangle = outputRectangle
        self.pageNumber = pageNumber
    }
}

/// Temporal Filter Post Filter Sharpening
public enum TemporalFilterPostFilterSharpening {
    case auto
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension TemporalFilterPostFilterSharpening : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TemporalFilterPostFilterSharpening] {
        return [
            .auto,
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TemporalFilterPostFilterSharpening(rawValue: rawValue) ?? TemporalFilterPostFilterSharpening.sdkUnknown(rawValue)
    }
}

extension TemporalFilterSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case postFilterSharpening = "postFilterSharpening"
        case strength = "strength"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let postFilterSharpening = postFilterSharpening {
            try encodeContainer.encode(postFilterSharpening.rawValue, forKey: .postFilterSharpening)
        }
        if let strength = strength {
            try encodeContainer.encode(strength.rawValue, forKey: .strength)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let postFilterSharpeningDecoded = try containerValues.decodeIfPresent(TemporalFilterPostFilterSharpening.self, forKey: .postFilterSharpening)
        postFilterSharpening = postFilterSharpeningDecoded
        let strengthDecoded = try containerValues.decodeIfPresent(TemporalFilterStrength.self, forKey: .strength)
        strength = strengthDecoded
    }
}

extension TemporalFilterSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TemporalFilterSettings(postFilterSharpening: \(String(describing: postFilterSharpening)), strength: \(String(describing: strength)))"}
}

/// Temporal Filter Settings
public struct TemporalFilterSettings: Equatable {
    /// If you enable this filter, the results are the following:
    /// - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source.
    /// - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
    public let postFilterSharpening: TemporalFilterPostFilterSharpening?
    /// Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
    public let strength: TemporalFilterStrength?

    public init (
        postFilterSharpening: TemporalFilterPostFilterSharpening? = nil,
        strength: TemporalFilterStrength? = nil
    )
    {
        self.postFilterSharpening = postFilterSharpening
        self.strength = strength
    }
}

/// Temporal Filter Strength
public enum TemporalFilterStrength {
    case auto
    case strength1
    case strength10
    case strength11
    case strength12
    case strength13
    case strength14
    case strength15
    case strength16
    case strength2
    case strength3
    case strength4
    case strength5
    case strength6
    case strength7
    case strength8
    case strength9
    case sdkUnknown(String)
}

extension TemporalFilterStrength : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TemporalFilterStrength] {
        return [
            .auto,
            .strength1,
            .strength10,
            .strength11,
            .strength12,
            .strength13,
            .strength14,
            .strength15,
            .strength16,
            .strength2,
            .strength3,
            .strength4,
            .strength5,
            .strength6,
            .strength7,
            .strength8,
            .strength9,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .strength1: return "STRENGTH_1"
        case .strength10: return "STRENGTH_10"
        case .strength11: return "STRENGTH_11"
        case .strength12: return "STRENGTH_12"
        case .strength13: return "STRENGTH_13"
        case .strength14: return "STRENGTH_14"
        case .strength15: return "STRENGTH_15"
        case .strength16: return "STRENGTH_16"
        case .strength2: return "STRENGTH_2"
        case .strength3: return "STRENGTH_3"
        case .strength4: return "STRENGTH_4"
        case .strength5: return "STRENGTH_5"
        case .strength6: return "STRENGTH_6"
        case .strength7: return "STRENGTH_7"
        case .strength8: return "STRENGTH_8"
        case .strength9: return "STRENGTH_9"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TemporalFilterStrength(rawValue: rawValue) ?? TemporalFilterStrength.sdkUnknown(rawValue)
    }
}

extension TimecodeConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case source = "source"
        case syncThreshold = "syncThreshold"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let source = source {
            try encodeContainer.encode(source.rawValue, forKey: .source)
        }
        if syncThreshold != 0 {
            try encodeContainer.encode(syncThreshold, forKey: .syncThreshold)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(TimecodeConfigSource.self, forKey: .source)
        source = sourceDecoded
        let syncThresholdDecoded = try containerValues.decode(Int.self, forKey: .syncThreshold)
        syncThreshold = syncThresholdDecoded
    }
}

extension TimecodeConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TimecodeConfig(source: \(String(describing: source)), syncThreshold: \(String(describing: syncThreshold)))"}
}

/// Timecode Config
public struct TimecodeConfig: Equatable {
    /// Identifies the source for the timecode that will be associated with the events outputs.
    /// -Embedded (embedded): Initialize the output timecode with timecode from the the source.  If no embedded timecode is detected in the source, the system falls back to using "Start at 0" (zerobased).
    /// -System Clock (systemclock): Use the UTC time.
    /// -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.
    public let source: TimecodeConfigSource?
    /// Threshold in frames beyond which output timecode is resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.
    public let syncThreshold: Int

    public init (
        source: TimecodeConfigSource? = nil,
        syncThreshold: Int = 0
    )
    {
        self.source = source
        self.syncThreshold = syncThreshold
    }
}

/// Timecode Config Source
public enum TimecodeConfigSource {
    case embedded
    case systemclock
    case zerobased
    case sdkUnknown(String)
}

extension TimecodeConfigSource : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TimecodeConfigSource] {
        return [
            .embedded,
            .systemclock,
            .zerobased,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .embedded: return "EMBEDDED"
        case .systemclock: return "SYSTEMCLOCK"
        case .zerobased: return "ZEROBASED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TimecodeConfigSource(rawValue: rawValue) ?? TimecodeConfigSource.sdkUnknown(rawValue)
    }
}

extension TooManyRequestsException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TooManyRequestsException(message: \(String(describing: message)))"}
}

extension TooManyRequestsException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TooManyRequestsExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for TooManyRequestsException
public struct TooManyRequestsException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// Placeholder documentation for __string
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyRequestsExceptionBody: Equatable {
    public let message: String?
}

extension TooManyRequestsExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct TransferInputDeviceInputBodyMiddleware: Middleware {
    public let id: String = "TransferInputDeviceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TransferInputDeviceInput>,
                  next: H) -> Swift.Result<OperationOutput<TransferInputDeviceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TransferInputDeviceInput>
    public typealias MOutput = OperationOutput<TransferInputDeviceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TransferInputDeviceOutputError>
}

extension TransferInputDeviceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TransferInputDeviceInput(inputDeviceId: \(String(describing: inputDeviceId)), targetCustomerId: \(String(describing: targetCustomerId)), targetRegion: \(String(describing: targetRegion)), transferMessage: \(String(describing: transferMessage)))"}
}

extension TransferInputDeviceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case targetCustomerId = "targetCustomerId"
        case targetRegion = "targetRegion"
        case transferMessage = "transferMessage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let targetCustomerId = targetCustomerId {
            try encodeContainer.encode(targetCustomerId, forKey: .targetCustomerId)
        }
        if let targetRegion = targetRegion {
            try encodeContainer.encode(targetRegion, forKey: .targetRegion)
        }
        if let transferMessage = transferMessage {
            try encodeContainer.encode(transferMessage, forKey: .transferMessage)
        }
    }
}

public struct TransferInputDeviceInputHeadersMiddleware: Middleware {
    public let id: String = "TransferInputDeviceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TransferInputDeviceInput>,
                  next: H) -> Swift.Result<OperationOutput<TransferInputDeviceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TransferInputDeviceInput>
    public typealias MOutput = OperationOutput<TransferInputDeviceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TransferInputDeviceOutputError>
}

public struct TransferInputDeviceInputQueryItemMiddleware: Middleware {
    public let id: String = "TransferInputDeviceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TransferInputDeviceInput>,
                  next: H) -> Swift.Result<OperationOutput<TransferInputDeviceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TransferInputDeviceInput>
    public typealias MOutput = OperationOutput<TransferInputDeviceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TransferInputDeviceOutputError>
}

/// A request to transfer an input device.
public struct TransferInputDeviceInput: Equatable {
    /// The unique ID of this input device. For example, hd-123456789abcdef.
    public let inputDeviceId: String?
    /// The AWS account ID (12 digits) for the recipient of the device transfer.
    public let targetCustomerId: String?
    /// The target AWS region to transfer the device.
    public let targetRegion: String?
    /// An optional message for the recipient. Maximum 280 characters.
    public let transferMessage: String?

    public init (
        inputDeviceId: String? = nil,
        targetCustomerId: String? = nil,
        targetRegion: String? = nil,
        transferMessage: String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
        self.targetCustomerId = targetCustomerId
        self.targetRegion = targetRegion
        self.transferMessage = transferMessage
    }
}

struct TransferInputDeviceInputBody: Equatable {
    public let targetCustomerId: String?
    public let targetRegion: String?
    public let transferMessage: String?
}

extension TransferInputDeviceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case targetCustomerId = "targetCustomerId"
        case targetRegion = "targetRegion"
        case transferMessage = "transferMessage"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetCustomerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetCustomerId)
        targetCustomerId = targetCustomerIdDecoded
        let targetRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetRegion)
        targetRegion = targetRegionDecoded
        let transferMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transferMessage)
        transferMessage = transferMessageDecoded
    }
}

extension TransferInputDeviceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TransferInputDeviceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TransferInputDeviceOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TransferInputDeviceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TransferInputDeviceOutputResponse()"}
}

extension TransferInputDeviceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for TransferInputDeviceResponse
public struct TransferInputDeviceOutputResponse: Equatable {

    public init() {}
}

struct TransferInputDeviceOutputResponseBody: Equatable {
}

extension TransferInputDeviceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension TransferringInputDeviceSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "id"
        case message = "message"
        case targetCustomerId = "targetCustomerId"
        case transferType = "transferType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let targetCustomerId = targetCustomerId {
            try encodeContainer.encode(targetCustomerId, forKey: .targetCustomerId)
        }
        if let transferType = transferType {
            try encodeContainer.encode(transferType.rawValue, forKey: .transferType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let targetCustomerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetCustomerId)
        targetCustomerId = targetCustomerIdDecoded
        let transferTypeDecoded = try containerValues.decodeIfPresent(InputDeviceTransferType.self, forKey: .transferType)
        transferType = transferTypeDecoded
    }
}

extension TransferringInputDeviceSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TransferringInputDeviceSummary(id: \(String(describing: id)), message: \(String(describing: message)), targetCustomerId: \(String(describing: targetCustomerId)), transferType: \(String(describing: transferType)))"}
}

/// Details about the input device that is being transferred.
public struct TransferringInputDeviceSummary: Equatable {
    /// The unique ID of the input device.
    public let id: String?
    /// The optional message that the sender has attached to the transfer.
    public let message: String?
    /// The AWS account ID for the recipient of the input device transfer.
    public let targetCustomerId: String?
    /// The type (direction) of the input device transfer.
    public let transferType: InputDeviceTransferType?

    public init (
        id: String? = nil,
        message: String? = nil,
        targetCustomerId: String? = nil,
        transferType: InputDeviceTransferType? = nil
    )
    {
        self.id = id
        self.message = message
        self.targetCustomerId = targetCustomerId
        self.transferType = transferType
    }
}

extension TtmlDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case styleControl = "styleControl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let styleControl = styleControl {
            try encodeContainer.encode(styleControl.rawValue, forKey: .styleControl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let styleControlDecoded = try containerValues.decodeIfPresent(TtmlDestinationStyleControl.self, forKey: .styleControl)
        styleControl = styleControlDecoded
    }
}

extension TtmlDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TtmlDestinationSettings(styleControl: \(String(describing: styleControl)))"}
}

/// Ttml Destination Settings
public struct TtmlDestinationSettings: Equatable {
    /// When set to passthrough, passes through style and position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the CFF-TT output or TTML output.
    public let styleControl: TtmlDestinationStyleControl?

    public init (
        styleControl: TtmlDestinationStyleControl? = nil
    )
    {
        self.styleControl = styleControl
    }
}

/// Ttml Destination Style Control
public enum TtmlDestinationStyleControl {
    case passthrough
    case useConfigured
    case sdkUnknown(String)
}

extension TtmlDestinationStyleControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TtmlDestinationStyleControl] {
        return [
            .passthrough,
            .useConfigured,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .passthrough: return "PASSTHROUGH"
        case .useConfigured: return "USE_CONFIGURED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TtmlDestinationStyleControl(rawValue: rawValue) ?? TtmlDestinationStyleControl.sdkUnknown(rawValue)
    }
}

extension UdpContainerSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case m2tsSettings = "m2tsSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let m2tsSettings = m2tsSettings {
            try encodeContainer.encode(m2tsSettings, forKey: .m2tsSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let m2tsSettingsDecoded = try containerValues.decodeIfPresent(M2tsSettings.self, forKey: .m2tsSettings)
        m2tsSettings = m2tsSettingsDecoded
    }
}

extension UdpContainerSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UdpContainerSettings(m2tsSettings: \(String(describing: m2tsSettings)))"}
}

/// Udp Container Settings
public struct UdpContainerSettings: Equatable {
    /// M2ts Settings
    public let m2tsSettings: M2tsSettings?

    public init (
        m2tsSettings: M2tsSettings? = nil
    )
    {
        self.m2tsSettings = m2tsSettings
    }
}

extension UdpGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inputLossAction = "inputLossAction"
        case timedMetadataId3Frame = "timedMetadataId3Frame"
        case timedMetadataId3Period = "timedMetadataId3Period"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputLossAction = inputLossAction {
            try encodeContainer.encode(inputLossAction.rawValue, forKey: .inputLossAction)
        }
        if let timedMetadataId3Frame = timedMetadataId3Frame {
            try encodeContainer.encode(timedMetadataId3Frame.rawValue, forKey: .timedMetadataId3Frame)
        }
        if timedMetadataId3Period != 0 {
            try encodeContainer.encode(timedMetadataId3Period, forKey: .timedMetadataId3Period)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputLossActionDecoded = try containerValues.decodeIfPresent(InputLossActionForUdpOut.self, forKey: .inputLossAction)
        inputLossAction = inputLossActionDecoded
        let timedMetadataId3FrameDecoded = try containerValues.decodeIfPresent(UdpTimedMetadataId3Frame.self, forKey: .timedMetadataId3Frame)
        timedMetadataId3Frame = timedMetadataId3FrameDecoded
        let timedMetadataId3PeriodDecoded = try containerValues.decode(Int.self, forKey: .timedMetadataId3Period)
        timedMetadataId3Period = timedMetadataId3PeriodDecoded
    }
}

extension UdpGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UdpGroupSettings(inputLossAction: \(String(describing: inputLossAction)), timedMetadataId3Frame: \(String(describing: timedMetadataId3Frame)), timedMetadataId3Period: \(String(describing: timedMetadataId3Period)))"}
}

/// Udp Group Settings
public struct UdpGroupSettings: Equatable {
    /// Specifies behavior of last resort when input video is lost, and no more backup inputs are available. When dropTs is selected the entire transport stream will stop being emitted.  When dropProgram is selected the program can be dropped from the transport stream (and replaced with null packets to meet the TS bitrate requirement).  Or, when emitProgram is chosen the transport stream will continue to be produced normally with repeat frames, black frames, or slate frames substituted for the absent input video.
    public let inputLossAction: InputLossActionForUdpOut?
    /// Indicates ID3 frame that has the timecode.
    public let timedMetadataId3Frame: UdpTimedMetadataId3Frame?
    /// Timed Metadata interval in seconds.
    public let timedMetadataId3Period: Int

    public init (
        inputLossAction: InputLossActionForUdpOut? = nil,
        timedMetadataId3Frame: UdpTimedMetadataId3Frame? = nil,
        timedMetadataId3Period: Int = 0
    )
    {
        self.inputLossAction = inputLossAction
        self.timedMetadataId3Frame = timedMetadataId3Frame
        self.timedMetadataId3Period = timedMetadataId3Period
    }
}

extension UdpOutputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bufferMsec = "bufferMsec"
        case containerSettings = "containerSettings"
        case destination = "destination"
        case fecOutputSettings = "fecOutputSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bufferMsec != 0 {
            try encodeContainer.encode(bufferMsec, forKey: .bufferMsec)
        }
        if let containerSettings = containerSettings {
            try encodeContainer.encode(containerSettings, forKey: .containerSettings)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let fecOutputSettings = fecOutputSettings {
            try encodeContainer.encode(fecOutputSettings, forKey: .fecOutputSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bufferMsecDecoded = try containerValues.decode(Int.self, forKey: .bufferMsec)
        bufferMsec = bufferMsecDecoded
        let containerSettingsDecoded = try containerValues.decodeIfPresent(UdpContainerSettings.self, forKey: .containerSettings)
        containerSettings = containerSettingsDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
        let fecOutputSettingsDecoded = try containerValues.decodeIfPresent(FecOutputSettings.self, forKey: .fecOutputSettings)
        fecOutputSettings = fecOutputSettingsDecoded
    }
}

extension UdpOutputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UdpOutputSettings(bufferMsec: \(String(describing: bufferMsec)), containerSettings: \(String(describing: containerSettings)), destination: \(String(describing: destination)), fecOutputSettings: \(String(describing: fecOutputSettings)))"}
}

/// Udp Output Settings
public struct UdpOutputSettings: Equatable {
    /// UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
    public let bufferMsec: Int
    /// Udp Container Settings
    public let containerSettings: UdpContainerSettings?
    /// Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
    public let destination: OutputLocationRef?
    /// Settings for enabling and adjusting Forward Error Correction on UDP outputs.
    public let fecOutputSettings: FecOutputSettings?

    public init (
        bufferMsec: Int = 0,
        containerSettings: UdpContainerSettings? = nil,
        destination: OutputLocationRef? = nil,
        fecOutputSettings: FecOutputSettings? = nil
    )
    {
        self.bufferMsec = bufferMsec
        self.containerSettings = containerSettings
        self.destination = destination
        self.fecOutputSettings = fecOutputSettings
    }
}

/// Udp Timed Metadata Id3 Frame
public enum UdpTimedMetadataId3Frame {
    case `none`
    case priv
    case tdrl
    case sdkUnknown(String)
}

extension UdpTimedMetadataId3Frame : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [UdpTimedMetadataId3Frame] {
        return [
            .none,
            .priv,
            .tdrl,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .priv: return "PRIV"
        case .tdrl: return "TDRL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = UdpTimedMetadataId3Frame(rawValue: rawValue) ?? UdpTimedMetadataId3Frame.sdkUnknown(rawValue)
    }
}

extension UnprocessableEntityException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UnprocessableEntityException(message: \(String(describing: message)), validationErrors: \(String(describing: validationErrors)))"}
}

extension UnprocessableEntityException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UnprocessableEntityExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
            self.validationErrors = output.validationErrors
        } else {
            self.message = nil
            self.validationErrors = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for UnprocessableEntityException
public struct UnprocessableEntityException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// The error message.
    public var message: String?
    /// A collection of validation error responses.
    public var validationErrors: [ValidationError]?

    public init (
        message: String? = nil,
        validationErrors: [ValidationError]? = nil
    )
    {
        self.message = message
        self.validationErrors = validationErrors
    }
}

struct UnprocessableEntityExceptionBody: Equatable {
    public let message: String?
    public let validationErrors: [ValidationError]?
}

extension UnprocessableEntityExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
        case validationErrors = "validationErrors"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let validationErrorsContainer = try containerValues.decodeIfPresent([ValidationError?].self, forKey: .validationErrors)
        var validationErrorsDecoded0:[ValidationError]? = nil
        if let validationErrorsContainer = validationErrorsContainer {
            validationErrorsDecoded0 = [ValidationError]()
            for structure0 in validationErrorsContainer {
                if let structure0 = structure0 {
                    validationErrorsDecoded0?.append(structure0)
                }
            }
        }
        validationErrors = validationErrorsDecoded0
    }
}

public struct UpdateChannelClassInputBodyMiddleware: Middleware {
    public let id: String = "UpdateChannelClassInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateChannelClassInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateChannelClassOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateChannelClassInput>
    public typealias MOutput = OperationOutput<UpdateChannelClassOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateChannelClassOutputError>
}

extension UpdateChannelClassInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateChannelClassInput(channelClass: \(String(describing: channelClass)), channelId: \(String(describing: channelId)), destinations: \(String(describing: destinations)))"}
}

extension UpdateChannelClassInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelClass = "channelClass"
        case destinations = "destinations"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelClass = channelClass {
            try encodeContainer.encode(channelClass.rawValue, forKey: .channelClass)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for __listofoutputdestination0 in destinations {
                try destinationsContainer.encode(__listofoutputdestination0)
            }
        }
    }
}

public struct UpdateChannelClassInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateChannelClassInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateChannelClassInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateChannelClassOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateChannelClassInput>
    public typealias MOutput = OperationOutput<UpdateChannelClassOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateChannelClassOutputError>
}

public struct UpdateChannelClassInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateChannelClassInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateChannelClassInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateChannelClassOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateChannelClassInput>
    public typealias MOutput = OperationOutput<UpdateChannelClassOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateChannelClassOutputError>
}

/// Channel class that the channel should be updated to.
public struct UpdateChannelClassInput: Equatable {
    /// The channel class that you wish to update this channel to use.
    public let channelClass: ChannelClass?
    /// Channel Id of the channel whose class should be updated.
    public let channelId: String?
    /// A list of output destinations for this channel.
    public let destinations: [OutputDestination]?

    public init (
        channelClass: ChannelClass? = nil,
        channelId: String? = nil,
        destinations: [OutputDestination]? = nil
    )
    {
        self.channelClass = channelClass
        self.channelId = channelId
        self.destinations = destinations
    }
}

struct UpdateChannelClassInputBody: Equatable {
    public let channelClass: ChannelClass?
    public let destinations: [OutputDestination]?
}

extension UpdateChannelClassInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channelClass = "channelClass"
        case destinations = "destinations"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelClassDecoded = try containerValues.decodeIfPresent(ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
    }
}

extension UpdateChannelClassOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateChannelClassOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateChannelClassOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateChannelClassOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateChannelClassOutputResponse(channel: \(String(describing: channel)))"}
}

extension UpdateChannelClassOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateChannelClassOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.channel = output.channel
        } else {
            self.channel = nil
        }
    }
}

/// Placeholder documentation for UpdateChannelClassResponse
public struct UpdateChannelClassOutputResponse: Equatable {
    /// Placeholder documentation for Channel
    public let channel: Channel?

    public init (
        channel: Channel? = nil
    )
    {
        self.channel = channel
    }
}

struct UpdateChannelClassOutputResponseBody: Equatable {
    public let channel: Channel?
}

extension UpdateChannelClassOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channel = "channel"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelDecoded = try containerValues.decodeIfPresent(Channel.self, forKey: .channel)
        channel = channelDecoded
    }
}

public struct UpdateChannelInputBodyMiddleware: Middleware {
    public let id: String = "UpdateChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateChannelInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateChannelInput>
    public typealias MOutput = OperationOutput<UpdateChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateChannelOutputError>
}

extension UpdateChannelInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateChannelInput(cdiInputSpecification: \(String(describing: cdiInputSpecification)), channelId: \(String(describing: channelId)), destinations: \(String(describing: destinations)), encoderSettings: \(String(describing: encoderSettings)), inputAttachments: \(String(describing: inputAttachments)), inputSpecification: \(String(describing: inputSpecification)), logLevel: \(String(describing: logLevel)), name: \(String(describing: name)), roleArn: \(String(describing: roleArn)))"}
}

extension UpdateChannelInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cdiInputSpecification = "cdiInputSpecification"
        case destinations = "destinations"
        case encoderSettings = "encoderSettings"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case name = "name"
        case roleArn = "roleArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cdiInputSpecification = cdiInputSpecification {
            try encodeContainer.encode(cdiInputSpecification, forKey: .cdiInputSpecification)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for __listofoutputdestination0 in destinations {
                try destinationsContainer.encode(__listofoutputdestination0)
            }
        }
        if let encoderSettings = encoderSettings {
            try encodeContainer.encode(encoderSettings, forKey: .encoderSettings)
        }
        if let inputAttachments = inputAttachments {
            var inputAttachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputAttachments)
            for __listofinputattachment0 in inputAttachments {
                try inputAttachmentsContainer.encode(__listofinputattachment0)
            }
        }
        if let inputSpecification = inputSpecification {
            try encodeContainer.encode(inputSpecification, forKey: .inputSpecification)
        }
        if let logLevel = logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

public struct UpdateChannelInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateChannelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateChannelInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateChannelInput>
    public typealias MOutput = OperationOutput<UpdateChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateChannelOutputError>
}

public struct UpdateChannelInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateChannelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateChannelInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateChannelInput>
    public typealias MOutput = OperationOutput<UpdateChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateChannelOutputError>
}

/// A request to update a channel.
public struct UpdateChannelInput: Equatable {
    /// Specification of CDI inputs for this channel
    public let cdiInputSpecification: CdiInputSpecification?
    /// channel ID
    public let channelId: String?
    /// A list of output destinations for this channel.
    public let destinations: [OutputDestination]?
    /// The encoder settings for this channel.
    public let encoderSettings: EncoderSettings?
    /// Placeholder documentation for __listOfInputAttachment
    public let inputAttachments: [InputAttachment]?
    /// Specification of network and file inputs for this channel
    public let inputSpecification: InputSpecification?
    /// The log level to write to CloudWatch Logs.
    public let logLevel: LogLevel?
    /// The name of the channel.
    public let name: String?
    /// An optional Amazon Resource Name (ARN) of the role to assume when running the Channel. If you do not specify this on an update call but the role was previously set that role will be removed.
    public let roleArn: String?

    public init (
        cdiInputSpecification: CdiInputSpecification? = nil,
        channelId: String? = nil,
        destinations: [OutputDestination]? = nil,
        encoderSettings: EncoderSettings? = nil,
        inputAttachments: [InputAttachment]? = nil,
        inputSpecification: InputSpecification? = nil,
        logLevel: LogLevel? = nil,
        name: String? = nil,
        roleArn: String? = nil
    )
    {
        self.cdiInputSpecification = cdiInputSpecification
        self.channelId = channelId
        self.destinations = destinations
        self.encoderSettings = encoderSettings
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.name = name
        self.roleArn = roleArn
    }
}

struct UpdateChannelInputBody: Equatable {
    public let cdiInputSpecification: CdiInputSpecification?
    public let destinations: [OutputDestination]?
    public let encoderSettings: EncoderSettings?
    public let inputAttachments: [InputAttachment]?
    public let inputSpecification: InputSpecification?
    public let logLevel: LogLevel?
    public let name: String?
    public let roleArn: String?
}

extension UpdateChannelInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cdiInputSpecification = "cdiInputSpecification"
        case destinations = "destinations"
        case encoderSettings = "encoderSettings"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case name = "name"
        case roleArn = "roleArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension UpdateChannelOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateChannelOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateChannelOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateChannelOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateChannelOutputResponse(channel: \(String(describing: channel)))"}
}

extension UpdateChannelOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateChannelOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.channel = output.channel
        } else {
            self.channel = nil
        }
    }
}

/// Placeholder documentation for UpdateChannelResponse
public struct UpdateChannelOutputResponse: Equatable {
    /// Placeholder documentation for Channel
    public let channel: Channel?

    public init (
        channel: Channel? = nil
    )
    {
        self.channel = channel
    }
}

struct UpdateChannelOutputResponseBody: Equatable {
    public let channel: Channel?
}

extension UpdateChannelOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channel = "channel"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelDecoded = try containerValues.decodeIfPresent(Channel.self, forKey: .channel)
        channel = channelDecoded
    }
}

public struct UpdateInputDeviceInputBodyMiddleware: Middleware {
    public let id: String = "UpdateInputDeviceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateInputDeviceInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateInputDeviceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateInputDeviceInput>
    public typealias MOutput = OperationOutput<UpdateInputDeviceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateInputDeviceOutputError>
}

extension UpdateInputDeviceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateInputDeviceInput(hdDeviceSettings: \(String(describing: hdDeviceSettings)), inputDeviceId: \(String(describing: inputDeviceId)), name: \(String(describing: name)), uhdDeviceSettings: \(String(describing: uhdDeviceSettings)))"}
}

extension UpdateInputDeviceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case hdDeviceSettings = "hdDeviceSettings"
        case name = "name"
        case uhdDeviceSettings = "uhdDeviceSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hdDeviceSettings = hdDeviceSettings {
            try encodeContainer.encode(hdDeviceSettings, forKey: .hdDeviceSettings)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let uhdDeviceSettings = uhdDeviceSettings {
            try encodeContainer.encode(uhdDeviceSettings, forKey: .uhdDeviceSettings)
        }
    }
}

public struct UpdateInputDeviceInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateInputDeviceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateInputDeviceInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateInputDeviceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateInputDeviceInput>
    public typealias MOutput = OperationOutput<UpdateInputDeviceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateInputDeviceOutputError>
}

public struct UpdateInputDeviceInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateInputDeviceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateInputDeviceInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateInputDeviceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateInputDeviceInput>
    public typealias MOutput = OperationOutput<UpdateInputDeviceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateInputDeviceOutputError>
}

/// A request to update an input device.
public struct UpdateInputDeviceInput: Equatable {
    /// The settings that you want to apply to the HD input device.
    public let hdDeviceSettings: InputDeviceConfigurableSettings?
    /// The unique ID of the input device. For example, hd-123456789abcdef.
    public let inputDeviceId: String?
    /// The name that you assigned to this input device (not the unique ID).
    public let name: String?
    /// The settings that you want to apply to the UHD input device.
    public let uhdDeviceSettings: InputDeviceConfigurableSettings?

    public init (
        hdDeviceSettings: InputDeviceConfigurableSettings? = nil,
        inputDeviceId: String? = nil,
        name: String? = nil,
        uhdDeviceSettings: InputDeviceConfigurableSettings? = nil
    )
    {
        self.hdDeviceSettings = hdDeviceSettings
        self.inputDeviceId = inputDeviceId
        self.name = name
        self.uhdDeviceSettings = uhdDeviceSettings
    }
}

struct UpdateInputDeviceInputBody: Equatable {
    public let hdDeviceSettings: InputDeviceConfigurableSettings?
    public let name: String?
    public let uhdDeviceSettings: InputDeviceConfigurableSettings?
}

extension UpdateInputDeviceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case hdDeviceSettings = "hdDeviceSettings"
        case name = "name"
        case uhdDeviceSettings = "uhdDeviceSettings"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hdDeviceSettingsDecoded = try containerValues.decodeIfPresent(InputDeviceConfigurableSettings.self, forKey: .hdDeviceSettings)
        hdDeviceSettings = hdDeviceSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let uhdDeviceSettingsDecoded = try containerValues.decodeIfPresent(InputDeviceConfigurableSettings.self, forKey: .uhdDeviceSettings)
        uhdDeviceSettings = uhdDeviceSettingsDecoded
    }
}

extension UpdateInputDeviceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateInputDeviceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateInputDeviceOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateInputDeviceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateInputDeviceOutputResponse(arn: \(String(describing: arn)), connectionState: \(String(describing: connectionState)), deviceSettingsSyncState: \(String(describing: deviceSettingsSyncState)), deviceUpdateStatus: \(String(describing: deviceUpdateStatus)), hdDeviceSettings: \(String(describing: hdDeviceSettings)), id: \(String(describing: id)), macAddress: \(String(describing: macAddress)), name: \(String(describing: name)), networkSettings: \(String(describing: networkSettings)), serialNumber: \(String(describing: serialNumber)), type: \(String(describing: type)), uhdDeviceSettings: \(String(describing: uhdDeviceSettings)))"}
}

extension UpdateInputDeviceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateInputDeviceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.arn = output.arn
            self.connectionState = output.connectionState
            self.deviceSettingsSyncState = output.deviceSettingsSyncState
            self.deviceUpdateStatus = output.deviceUpdateStatus
            self.hdDeviceSettings = output.hdDeviceSettings
            self.id = output.id
            self.macAddress = output.macAddress
            self.name = output.name
            self.networkSettings = output.networkSettings
            self.serialNumber = output.serialNumber
            self.type = output.type
            self.uhdDeviceSettings = output.uhdDeviceSettings
        } else {
            self.arn = nil
            self.connectionState = nil
            self.deviceSettingsSyncState = nil
            self.deviceUpdateStatus = nil
            self.hdDeviceSettings = nil
            self.id = nil
            self.macAddress = nil
            self.name = nil
            self.networkSettings = nil
            self.serialNumber = nil
            self.type = nil
            self.uhdDeviceSettings = nil
        }
    }
}

/// Placeholder documentation for UpdateInputDeviceResponse
public struct UpdateInputDeviceOutputResponse: Equatable {
    /// The unique ARN of the input device.
    public let arn: String?
    /// The state of the connection between the input device and AWS.
    public let connectionState: InputDeviceConnectionState?
    /// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
    public let deviceSettingsSyncState: DeviceSettingsSyncState?
    /// The status of software on the input device.
    public let deviceUpdateStatus: DeviceUpdateStatus?
    /// Settings that describe an input device that is type HD.
    public let hdDeviceSettings: InputDeviceHdSettings?
    /// The unique ID of the input device.
    public let id: String?
    /// The network MAC address of the input device.
    public let macAddress: String?
    /// A name that you specify for the input device.
    public let name: String?
    /// The network settings for the input device.
    public let networkSettings: InputDeviceNetworkSettings?
    /// The unique serial number of the input device.
    public let serialNumber: String?
    /// The type of the input device.
    public let type: InputDeviceType?
    /// Settings that describe an input device that is type UHD.
    public let uhdDeviceSettings: InputDeviceUhdSettings?

    public init (
        arn: String? = nil,
        connectionState: InputDeviceConnectionState? = nil,
        deviceSettingsSyncState: DeviceSettingsSyncState? = nil,
        deviceUpdateStatus: DeviceUpdateStatus? = nil,
        hdDeviceSettings: InputDeviceHdSettings? = nil,
        id: String? = nil,
        macAddress: String? = nil,
        name: String? = nil,
        networkSettings: InputDeviceNetworkSettings? = nil,
        serialNumber: String? = nil,
        type: InputDeviceType? = nil,
        uhdDeviceSettings: InputDeviceUhdSettings? = nil
    )
    {
        self.arn = arn
        self.connectionState = connectionState
        self.deviceSettingsSyncState = deviceSettingsSyncState
        self.deviceUpdateStatus = deviceUpdateStatus
        self.hdDeviceSettings = hdDeviceSettings
        self.id = id
        self.macAddress = macAddress
        self.name = name
        self.networkSettings = networkSettings
        self.serialNumber = serialNumber
        self.type = type
        self.uhdDeviceSettings = uhdDeviceSettings
    }
}

struct UpdateInputDeviceOutputResponseBody: Equatable {
    public let arn: String?
    public let connectionState: InputDeviceConnectionState?
    public let deviceSettingsSyncState: DeviceSettingsSyncState?
    public let deviceUpdateStatus: DeviceUpdateStatus?
    public let hdDeviceSettings: InputDeviceHdSettings?
    public let id: String?
    public let macAddress: String?
    public let name: String?
    public let networkSettings: InputDeviceNetworkSettings?
    public let serialNumber: String?
    public let type: InputDeviceType?
    public let uhdDeviceSettings: InputDeviceUhdSettings?
}

extension UpdateInputDeviceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case connectionState = "connectionState"
        case deviceSettingsSyncState = "deviceSettingsSyncState"
        case deviceUpdateStatus = "deviceUpdateStatus"
        case hdDeviceSettings = "hdDeviceSettings"
        case id = "id"
        case macAddress = "macAddress"
        case name = "name"
        case networkSettings = "networkSettings"
        case serialNumber = "serialNumber"
        case type = "type"
        case uhdDeviceSettings = "uhdDeviceSettings"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(InputDeviceConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let deviceSettingsSyncStateDecoded = try containerValues.decodeIfPresent(DeviceSettingsSyncState.self, forKey: .deviceSettingsSyncState)
        deviceSettingsSyncState = deviceSettingsSyncStateDecoded
        let deviceUpdateStatusDecoded = try containerValues.decodeIfPresent(DeviceUpdateStatus.self, forKey: .deviceUpdateStatus)
        deviceUpdateStatus = deviceUpdateStatusDecoded
        let hdDeviceSettingsDecoded = try containerValues.decodeIfPresent(InputDeviceHdSettings.self, forKey: .hdDeviceSettings)
        hdDeviceSettings = hdDeviceSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let macAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .macAddress)
        macAddress = macAddressDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let networkSettingsDecoded = try containerValues.decodeIfPresent(InputDeviceNetworkSettings.self, forKey: .networkSettings)
        networkSettings = networkSettingsDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let typeDecoded = try containerValues.decodeIfPresent(InputDeviceType.self, forKey: .type)
        type = typeDecoded
        let uhdDeviceSettingsDecoded = try containerValues.decodeIfPresent(InputDeviceUhdSettings.self, forKey: .uhdDeviceSettings)
        uhdDeviceSettings = uhdDeviceSettingsDecoded
    }
}

public struct UpdateInputInputBodyMiddleware: Middleware {
    public let id: String = "UpdateInputInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateInputInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateInputInput>
    public typealias MOutput = OperationOutput<UpdateInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateInputOutputError>
}

extension UpdateInputInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateInputInput(destinations: \(String(describing: destinations)), inputDevices: \(String(describing: inputDevices)), inputId: \(String(describing: inputId)), inputSecurityGroups: \(String(describing: inputSecurityGroups)), mediaConnectFlows: \(String(describing: mediaConnectFlows)), name: \(String(describing: name)), roleArn: \(String(describing: roleArn)), sources: \(String(describing: sources)))"}
}

extension UpdateInputInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinations = "destinations"
        case inputDevices = "inputDevices"
        case inputSecurityGroups = "inputSecurityGroups"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case roleArn = "roleArn"
        case sources = "sources"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for __listofinputdestinationrequest0 in destinations {
                try destinationsContainer.encode(__listofinputdestinationrequest0)
            }
        }
        if let inputDevices = inputDevices {
            var inputDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDevices)
            for __listofinputdevicerequest0 in inputDevices {
                try inputDevicesContainer.encode(__listofinputdevicerequest0)
            }
        }
        if let inputSecurityGroups = inputSecurityGroups {
            var inputSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputSecurityGroups)
            for __listof__string0 in inputSecurityGroups {
                try inputSecurityGroupsContainer.encode(__listof__string0)
            }
        }
        if let mediaConnectFlows = mediaConnectFlows {
            var mediaConnectFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaConnectFlows)
            for __listofmediaconnectflowrequest0 in mediaConnectFlows {
                try mediaConnectFlowsContainer.encode(__listofmediaconnectflowrequest0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let sources = sources {
            var sourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sources)
            for __listofinputsourcerequest0 in sources {
                try sourcesContainer.encode(__listofinputsourcerequest0)
            }
        }
    }
}

public struct UpdateInputInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateInputInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateInputInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateInputInput>
    public typealias MOutput = OperationOutput<UpdateInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateInputOutputError>
}

public struct UpdateInputInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateInputInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateInputInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateInputInput>
    public typealias MOutput = OperationOutput<UpdateInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateInputOutputError>
}

/// A request to update an input.
public struct UpdateInputInput: Equatable {
    /// Destination settings for PUSH type inputs.
    public let destinations: [InputDestinationRequest]?
    /// Settings for the devices.
    public let inputDevices: [InputDeviceRequest]?
    /// Unique ID of the input.
    public let inputId: String?
    /// A list of security groups referenced by IDs to attach to the input.
    public let inputSecurityGroups: [String]?
    /// A list of the MediaConnect Flow ARNs that you want to use as the source of the input. You can specify as few as one
    /// Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a
    /// separate Availability Zone as this ensures your EML input is redundant to AZ issues.
    public let mediaConnectFlows: [MediaConnectFlowRequest]?
    /// Name of the input.
    public let name: String?
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    public let roleArn: String?
    /// The source URLs for a PULL-type input. Every PULL type input needs
    /// exactly two source URLs for redundancy.
    /// Only specify sources for PULL type Inputs. Leave Destinations empty.
    public let sources: [InputSourceRequest]?

    public init (
        destinations: [InputDestinationRequest]? = nil,
        inputDevices: [InputDeviceRequest]? = nil,
        inputId: String? = nil,
        inputSecurityGroups: [String]? = nil,
        mediaConnectFlows: [MediaConnectFlowRequest]? = nil,
        name: String? = nil,
        roleArn: String? = nil,
        sources: [InputSourceRequest]? = nil
    )
    {
        self.destinations = destinations
        self.inputDevices = inputDevices
        self.inputId = inputId
        self.inputSecurityGroups = inputSecurityGroups
        self.mediaConnectFlows = mediaConnectFlows
        self.name = name
        self.roleArn = roleArn
        self.sources = sources
    }
}

struct UpdateInputInputBody: Equatable {
    public let destinations: [InputDestinationRequest]?
    public let inputDevices: [InputDeviceRequest]?
    public let inputSecurityGroups: [String]?
    public let mediaConnectFlows: [MediaConnectFlowRequest]?
    public let name: String?
    public let roleArn: String?
    public let sources: [InputSourceRequest]?
}

extension UpdateInputInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destinations = "destinations"
        case inputDevices = "inputDevices"
        case inputSecurityGroups = "inputSecurityGroups"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case roleArn = "roleArn"
        case sources = "sources"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationsContainer = try containerValues.decodeIfPresent([InputDestinationRequest?].self, forKey: .destinations)
        var destinationsDecoded0:[InputDestinationRequest]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [InputDestinationRequest]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let inputDevicesContainer = try containerValues.decodeIfPresent([InputDeviceRequest?].self, forKey: .inputDevices)
        var inputDevicesDecoded0:[InputDeviceRequest]? = nil
        if let inputDevicesContainer = inputDevicesContainer {
            inputDevicesDecoded0 = [InputDeviceRequest]()
            for structure0 in inputDevicesContainer {
                if let structure0 = structure0 {
                    inputDevicesDecoded0?.append(structure0)
                }
            }
        }
        inputDevices = inputDevicesDecoded0
        let inputSecurityGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .inputSecurityGroups)
        var inputSecurityGroupsDecoded0:[String]? = nil
        if let inputSecurityGroupsContainer = inputSecurityGroupsContainer {
            inputSecurityGroupsDecoded0 = [String]()
            for string0 in inputSecurityGroupsContainer {
                if let string0 = string0 {
                    inputSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        inputSecurityGroups = inputSecurityGroupsDecoded0
        let mediaConnectFlowsContainer = try containerValues.decodeIfPresent([MediaConnectFlowRequest?].self, forKey: .mediaConnectFlows)
        var mediaConnectFlowsDecoded0:[MediaConnectFlowRequest]? = nil
        if let mediaConnectFlowsContainer = mediaConnectFlowsContainer {
            mediaConnectFlowsDecoded0 = [MediaConnectFlowRequest]()
            for structure0 in mediaConnectFlowsContainer {
                if let structure0 = structure0 {
                    mediaConnectFlowsDecoded0?.append(structure0)
                }
            }
        }
        mediaConnectFlows = mediaConnectFlowsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let sourcesContainer = try containerValues.decodeIfPresent([InputSourceRequest?].self, forKey: .sources)
        var sourcesDecoded0:[InputSourceRequest]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [InputSourceRequest]()
            for structure0 in sourcesContainer {
                if let structure0 = structure0 {
                    sourcesDecoded0?.append(structure0)
                }
            }
        }
        sources = sourcesDecoded0
    }
}

extension UpdateInputOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateInputOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateInputOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateInputOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateInputOutputResponse(input: \(String(describing: input)))"}
}

extension UpdateInputOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateInputOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.input = output.input
        } else {
            self.input = nil
        }
    }
}

/// Placeholder documentation for UpdateInputResponse
public struct UpdateInputOutputResponse: Equatable {
    /// Placeholder documentation for Input
    public let input: Input?

    public init (
        input: Input? = nil
    )
    {
        self.input = input
    }
}

struct UpdateInputOutputResponseBody: Equatable {
    public let input: Input?
}

extension UpdateInputOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case input = "input"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(Input.self, forKey: .input)
        input = inputDecoded
    }
}

public struct UpdateInputSecurityGroupInputBodyMiddleware: Middleware {
    public let id: String = "UpdateInputSecurityGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateInputSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateInputSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateInputSecurityGroupInput>
    public typealias MOutput = OperationOutput<UpdateInputSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateInputSecurityGroupOutputError>
}

extension UpdateInputSecurityGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateInputSecurityGroupInput(inputSecurityGroupId: \(String(describing: inputSecurityGroupId)), tags: \(String(describing: tags)), whitelistRules: \(String(describing: whitelistRules)))"}
}

extension UpdateInputSecurityGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let whitelistRules = whitelistRules {
            var whitelistRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .whitelistRules)
            for __listofinputwhitelistrulecidr0 in whitelistRules {
                try whitelistRulesContainer.encode(__listofinputwhitelistrulecidr0)
            }
        }
    }
}

public struct UpdateInputSecurityGroupInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateInputSecurityGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateInputSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateInputSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateInputSecurityGroupInput>
    public typealias MOutput = OperationOutput<UpdateInputSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateInputSecurityGroupOutputError>
}

public struct UpdateInputSecurityGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateInputSecurityGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateInputSecurityGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateInputSecurityGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateInputSecurityGroupInput>
    public typealias MOutput = OperationOutput<UpdateInputSecurityGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateInputSecurityGroupOutputError>
}

/// The request to update some combination of the Input Security Group name and the IPv4 CIDRs the Input Security Group should allow.
public struct UpdateInputSecurityGroupInput: Equatable {
    /// The id of the Input Security Group to update.
    public let inputSecurityGroupId: String?
    /// A collection of key-value pairs.
    public let tags: [String:String]?
    /// List of IPv4 CIDR addresses to whitelist
    public let whitelistRules: [InputWhitelistRuleCidr]?

    public init (
        inputSecurityGroupId: String? = nil,
        tags: [String:String]? = nil,
        whitelistRules: [InputWhitelistRuleCidr]? = nil
    )
    {
        self.inputSecurityGroupId = inputSecurityGroupId
        self.tags = tags
        self.whitelistRules = whitelistRules
    }
}

struct UpdateInputSecurityGroupInputBody: Equatable {
    public let tags: [String:String]?
    public let whitelistRules: [InputWhitelistRuleCidr]?
}

extension UpdateInputSecurityGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let whitelistRulesContainer = try containerValues.decodeIfPresent([InputWhitelistRuleCidr?].self, forKey: .whitelistRules)
        var whitelistRulesDecoded0:[InputWhitelistRuleCidr]? = nil
        if let whitelistRulesContainer = whitelistRulesContainer {
            whitelistRulesDecoded0 = [InputWhitelistRuleCidr]()
            for structure0 in whitelistRulesContainer {
                if let structure0 = structure0 {
                    whitelistRulesDecoded0?.append(structure0)
                }
            }
        }
        whitelistRules = whitelistRulesDecoded0
    }
}

extension UpdateInputSecurityGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateInputSecurityGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateInputSecurityGroupOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateInputSecurityGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateInputSecurityGroupOutputResponse(securityGroup: \(String(describing: securityGroup)))"}
}

extension UpdateInputSecurityGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateInputSecurityGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.securityGroup = output.securityGroup
        } else {
            self.securityGroup = nil
        }
    }
}

/// Placeholder documentation for UpdateInputSecurityGroupResponse
public struct UpdateInputSecurityGroupOutputResponse: Equatable {
    /// An Input Security Group
    public let securityGroup: InputSecurityGroup?

    public init (
        securityGroup: InputSecurityGroup? = nil
    )
    {
        self.securityGroup = securityGroup
    }
}

struct UpdateInputSecurityGroupOutputResponseBody: Equatable {
    public let securityGroup: InputSecurityGroup?
}

extension UpdateInputSecurityGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case securityGroup = "securityGroup"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupDecoded = try containerValues.decodeIfPresent(InputSecurityGroup.self, forKey: .securityGroup)
        securityGroup = securityGroupDecoded
    }
}

public struct UpdateMultiplexInputBodyMiddleware: Middleware {
    public let id: String = "UpdateMultiplexInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMultiplexInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMultiplexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMultiplexInput>
    public typealias MOutput = OperationOutput<UpdateMultiplexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMultiplexOutputError>
}

extension UpdateMultiplexInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateMultiplexInput(multiplexId: \(String(describing: multiplexId)), multiplexSettings: \(String(describing: multiplexSettings)), name: \(String(describing: name)))"}
}

extension UpdateMultiplexInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case multiplexSettings = "multiplexSettings"
        case name = "name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let multiplexSettings = multiplexSettings {
            try encodeContainer.encode(multiplexSettings, forKey: .multiplexSettings)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct UpdateMultiplexInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateMultiplexInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMultiplexInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMultiplexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMultiplexInput>
    public typealias MOutput = OperationOutput<UpdateMultiplexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMultiplexOutputError>
}

public struct UpdateMultiplexInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateMultiplexInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMultiplexInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMultiplexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMultiplexInput>
    public typealias MOutput = OperationOutput<UpdateMultiplexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMultiplexOutputError>
}

/// A request to update a multiplex.
public struct UpdateMultiplexInput: Equatable {
    /// ID of the multiplex to update.
    public let multiplexId: String?
    /// The new settings for a multiplex.
    public let multiplexSettings: MultiplexSettings?
    /// Name of the multiplex.
    public let name: String?

    public init (
        multiplexId: String? = nil,
        multiplexSettings: MultiplexSettings? = nil,
        name: String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.multiplexSettings = multiplexSettings
        self.name = name
    }
}

struct UpdateMultiplexInputBody: Equatable {
    public let multiplexSettings: MultiplexSettings?
    public let name: String?
}

extension UpdateMultiplexInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case multiplexSettings = "multiplexSettings"
        case name = "name"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension UpdateMultiplexOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMultiplexOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateMultiplexOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMultiplexOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateMultiplexOutputResponse(multiplex: \(String(describing: multiplex)))"}
}

extension UpdateMultiplexOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateMultiplexOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.multiplex = output.multiplex
        } else {
            self.multiplex = nil
        }
    }
}

/// Placeholder documentation for UpdateMultiplexResponse
public struct UpdateMultiplexOutputResponse: Equatable {
    /// The updated multiplex.
    public let multiplex: Multiplex?

    public init (
        multiplex: Multiplex? = nil
    )
    {
        self.multiplex = multiplex
    }
}

struct UpdateMultiplexOutputResponseBody: Equatable {
    public let multiplex: Multiplex?
}

extension UpdateMultiplexOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case multiplex = "multiplex"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexDecoded = try containerValues.decodeIfPresent(Multiplex.self, forKey: .multiplex)
        multiplex = multiplexDecoded
    }
}

public struct UpdateMultiplexProgramInputBodyMiddleware: Middleware {
    public let id: String = "UpdateMultiplexProgramInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMultiplexProgramInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMultiplexProgramOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMultiplexProgramInput>
    public typealias MOutput = OperationOutput<UpdateMultiplexProgramOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMultiplexProgramOutputError>
}

extension UpdateMultiplexProgramInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateMultiplexProgramInput(multiplexId: \(String(describing: multiplexId)), multiplexProgramSettings: \(String(describing: multiplexProgramSettings)), programName: \(String(describing: programName)))"}
}

extension UpdateMultiplexProgramInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case multiplexProgramSettings = "multiplexProgramSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let multiplexProgramSettings = multiplexProgramSettings {
            try encodeContainer.encode(multiplexProgramSettings, forKey: .multiplexProgramSettings)
        }
    }
}

public struct UpdateMultiplexProgramInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateMultiplexProgramInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMultiplexProgramInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMultiplexProgramOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMultiplexProgramInput>
    public typealias MOutput = OperationOutput<UpdateMultiplexProgramOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMultiplexProgramOutputError>
}

public struct UpdateMultiplexProgramInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateMultiplexProgramInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMultiplexProgramInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMultiplexProgramOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMultiplexProgramInput>
    public typealias MOutput = OperationOutput<UpdateMultiplexProgramOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMultiplexProgramOutputError>
}

/// A request to update a program in a multiplex.
public struct UpdateMultiplexProgramInput: Equatable {
    /// The ID of the multiplex of the program to update.
    public let multiplexId: String?
    /// The new settings for a multiplex program.
    public let multiplexProgramSettings: MultiplexProgramSettings?
    /// The name of the program to update.
    public let programName: String?

    public init (
        multiplexId: String? = nil,
        multiplexProgramSettings: MultiplexProgramSettings? = nil,
        programName: String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.multiplexProgramSettings = multiplexProgramSettings
        self.programName = programName
    }
}

struct UpdateMultiplexProgramInputBody: Equatable {
    public let multiplexProgramSettings: MultiplexProgramSettings?
}

extension UpdateMultiplexProgramInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case multiplexProgramSettings = "multiplexProgramSettings"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexProgramSettingsDecoded = try containerValues.decodeIfPresent(MultiplexProgramSettings.self, forKey: .multiplexProgramSettings)
        multiplexProgramSettings = multiplexProgramSettingsDecoded
    }
}

extension UpdateMultiplexProgramOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMultiplexProgramOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateMultiplexProgramOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMultiplexProgramOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateMultiplexProgramOutputResponse(multiplexProgram: \(String(describing: multiplexProgram)))"}
}

extension UpdateMultiplexProgramOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateMultiplexProgramOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.multiplexProgram = output.multiplexProgram
        } else {
            self.multiplexProgram = nil
        }
    }
}

/// Placeholder documentation for UpdateMultiplexProgramResponse
public struct UpdateMultiplexProgramOutputResponse: Equatable {
    /// The updated multiplex program.
    public let multiplexProgram: MultiplexProgram?

    public init (
        multiplexProgram: MultiplexProgram? = nil
    )
    {
        self.multiplexProgram = multiplexProgram
    }
}

struct UpdateMultiplexProgramOutputResponseBody: Equatable {
    public let multiplexProgram: MultiplexProgram?
}

extension UpdateMultiplexProgramOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case multiplexProgram = "multiplexProgram"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexProgramDecoded = try containerValues.decodeIfPresent(MultiplexProgram.self, forKey: .multiplexProgram)
        multiplexProgram = multiplexProgramDecoded
    }
}

public struct UpdateReservationInputBodyMiddleware: Middleware {
    public let id: String = "UpdateReservationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateReservationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateReservationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateReservationInput>
    public typealias MOutput = OperationOutput<UpdateReservationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateReservationOutputError>
}

extension UpdateReservationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateReservationInput(name: \(String(describing: name)), reservationId: \(String(describing: reservationId)))"}
}

extension UpdateReservationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct UpdateReservationInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateReservationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateReservationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateReservationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateReservationInput>
    public typealias MOutput = OperationOutput<UpdateReservationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateReservationOutputError>
}

public struct UpdateReservationInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateReservationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateReservationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateReservationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateReservationInput>
    public typealias MOutput = OperationOutput<UpdateReservationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateReservationOutputError>
}

/// Request to update a reservation
public struct UpdateReservationInput: Equatable {
    /// Name of the reservation
    public let name: String?
    /// Unique reservation ID, e.g. '1234567'
    public let reservationId: String?

    public init (
        name: String? = nil,
        reservationId: String? = nil
    )
    {
        self.name = name
        self.reservationId = reservationId
    }
}

struct UpdateReservationInputBody: Equatable {
    public let name: String?
}

extension UpdateReservationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "name"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension UpdateReservationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateReservationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateReservationOutputError: Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateReservationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateReservationOutputResponse(reservation: \(String(describing: reservation)))"}
}

extension UpdateReservationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateReservationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.reservation = output.reservation
        } else {
            self.reservation = nil
        }
    }
}

/// Placeholder documentation for UpdateReservationResponse
public struct UpdateReservationOutputResponse: Equatable {
    /// Reserved resources available to use
    public let reservation: Reservation?

    public init (
        reservation: Reservation? = nil
    )
    {
        self.reservation = reservation
    }
}

struct UpdateReservationOutputResponseBody: Equatable {
    public let reservation: Reservation?
}

extension UpdateReservationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case reservation = "reservation"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservationDecoded = try containerValues.decodeIfPresent(Reservation.self, forKey: .reservation)
        reservation = reservationDecoded
    }
}

extension ValidationError: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case elementPath = "elementPath"
        case errorMessage = "errorMessage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let elementPath = elementPath {
            try encodeContainer.encode(elementPath, forKey: .elementPath)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elementPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .elementPath)
        elementPath = elementPathDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension ValidationError: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ValidationError(elementPath: \(String(describing: elementPath)), errorMessage: \(String(describing: errorMessage)))"}
}

/// Placeholder documentation for ValidationError
public struct ValidationError: Equatable {
    /// Path to the source of the error.
    public let elementPath: String?
    /// The error message.
    public let errorMessage: String?

    public init (
        elementPath: String? = nil,
        errorMessage: String? = nil
    )
    {
        self.elementPath = elementPath
        self.errorMessage = errorMessage
    }
}

extension VideoBlackFailoverSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blackDetectThreshold = "blackDetectThreshold"
        case videoBlackThresholdMsec = "videoBlackThresholdMsec"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if blackDetectThreshold != 0.0 {
            try encodeContainer.encode(blackDetectThreshold, forKey: .blackDetectThreshold)
        }
        if videoBlackThresholdMsec != 0 {
            try encodeContainer.encode(videoBlackThresholdMsec, forKey: .videoBlackThresholdMsec)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blackDetectThresholdDecoded = try containerValues.decode(Double.self, forKey: .blackDetectThreshold)
        blackDetectThreshold = blackDetectThresholdDecoded
        let videoBlackThresholdMsecDecoded = try containerValues.decode(Int.self, forKey: .videoBlackThresholdMsec)
        videoBlackThresholdMsec = videoBlackThresholdMsecDecoded
    }
}

extension VideoBlackFailoverSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VideoBlackFailoverSettings(blackDetectThreshold: \(String(describing: blackDetectThreshold)), videoBlackThresholdMsec: \(String(describing: videoBlackThresholdMsec)))"}
}

/// Placeholder documentation for VideoBlackFailoverSettings
public struct VideoBlackFailoverSettings: Equatable {
    /// A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (1023*0.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (255*0.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
    public let blackDetectThreshold: Double
    /// The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
    public let videoBlackThresholdMsec: Int

    public init (
        blackDetectThreshold: Double = 0.0,
        videoBlackThresholdMsec: Int = 0
    )
    {
        self.blackDetectThreshold = blackDetectThreshold
        self.videoBlackThresholdMsec = videoBlackThresholdMsec
    }
}

extension VideoCodecSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case frameCaptureSettings = "frameCaptureSettings"
        case h264Settings = "h264Settings"
        case h265Settings = "h265Settings"
        case mpeg2Settings = "mpeg2Settings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let frameCaptureSettings = frameCaptureSettings {
            try encodeContainer.encode(frameCaptureSettings, forKey: .frameCaptureSettings)
        }
        if let h264Settings = h264Settings {
            try encodeContainer.encode(h264Settings, forKey: .h264Settings)
        }
        if let h265Settings = h265Settings {
            try encodeContainer.encode(h265Settings, forKey: .h265Settings)
        }
        if let mpeg2Settings = mpeg2Settings {
            try encodeContainer.encode(mpeg2Settings, forKey: .mpeg2Settings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let frameCaptureSettingsDecoded = try containerValues.decodeIfPresent(FrameCaptureSettings.self, forKey: .frameCaptureSettings)
        frameCaptureSettings = frameCaptureSettingsDecoded
        let h264SettingsDecoded = try containerValues.decodeIfPresent(H264Settings.self, forKey: .h264Settings)
        h264Settings = h264SettingsDecoded
        let h265SettingsDecoded = try containerValues.decodeIfPresent(H265Settings.self, forKey: .h265Settings)
        h265Settings = h265SettingsDecoded
        let mpeg2SettingsDecoded = try containerValues.decodeIfPresent(Mpeg2Settings.self, forKey: .mpeg2Settings)
        mpeg2Settings = mpeg2SettingsDecoded
    }
}

extension VideoCodecSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VideoCodecSettings(frameCaptureSettings: \(String(describing: frameCaptureSettings)), h264Settings: \(String(describing: h264Settings)), h265Settings: \(String(describing: h265Settings)), mpeg2Settings: \(String(describing: mpeg2Settings)))"}
}

/// Video Codec Settings
public struct VideoCodecSettings: Equatable {
    /// Frame Capture Settings
    public let frameCaptureSettings: FrameCaptureSettings?
    /// H264 Settings
    public let h264Settings: H264Settings?
    /// H265 Settings
    public let h265Settings: H265Settings?
    /// Mpeg2 Settings
    public let mpeg2Settings: Mpeg2Settings?

    public init (
        frameCaptureSettings: FrameCaptureSettings? = nil,
        h264Settings: H264Settings? = nil,
        h265Settings: H265Settings? = nil,
        mpeg2Settings: Mpeg2Settings? = nil
    )
    {
        self.frameCaptureSettings = frameCaptureSettings
        self.h264Settings = h264Settings
        self.h265Settings = h265Settings
        self.mpeg2Settings = mpeg2Settings
    }
}

extension VideoDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case codecSettings = "codecSettings"
        case height = "height"
        case name = "name"
        case respondToAfd = "respondToAfd"
        case scalingBehavior = "scalingBehavior"
        case sharpness = "sharpness"
        case width = "width"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codecSettings = codecSettings {
            try encodeContainer.encode(codecSettings, forKey: .codecSettings)
        }
        if height != 0 {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let respondToAfd = respondToAfd {
            try encodeContainer.encode(respondToAfd.rawValue, forKey: .respondToAfd)
        }
        if let scalingBehavior = scalingBehavior {
            try encodeContainer.encode(scalingBehavior.rawValue, forKey: .scalingBehavior)
        }
        if sharpness != 0 {
            try encodeContainer.encode(sharpness, forKey: .sharpness)
        }
        if width != 0 {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codecSettingsDecoded = try containerValues.decodeIfPresent(VideoCodecSettings.self, forKey: .codecSettings)
        codecSettings = codecSettingsDecoded
        let heightDecoded = try containerValues.decode(Int.self, forKey: .height)
        height = heightDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let respondToAfdDecoded = try containerValues.decodeIfPresent(VideoDescriptionRespondToAfd.self, forKey: .respondToAfd)
        respondToAfd = respondToAfdDecoded
        let scalingBehaviorDecoded = try containerValues.decodeIfPresent(VideoDescriptionScalingBehavior.self, forKey: .scalingBehavior)
        scalingBehavior = scalingBehaviorDecoded
        let sharpnessDecoded = try containerValues.decode(Int.self, forKey: .sharpness)
        sharpness = sharpnessDecoded
        let widthDecoded = try containerValues.decode(Int.self, forKey: .width)
        width = widthDecoded
    }
}

extension VideoDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VideoDescription(codecSettings: \(String(describing: codecSettings)), height: \(String(describing: height)), name: \(String(describing: name)), respondToAfd: \(String(describing: respondToAfd)), scalingBehavior: \(String(describing: scalingBehavior)), sharpness: \(String(describing: sharpness)), width: \(String(describing: width)))"}
}

/// Video settings for this stream.
public struct VideoDescription: Equatable {
    /// Video codec settings.
    public let codecSettings: VideoCodecSettings?
    /// Output video height, in pixels. Must be an even number. For most codecs, you can leave this field and width blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
    public let height: Int
    /// The name of this VideoDescription. Outputs will use this name to uniquely identify this Description.  Description names should be unique within this Live Event.
    public let name: String?
    /// Indicates how MediaLive will respond to the AFD values that might be in the input video. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose PASSTHROUGH.
    /// RESPOND: MediaLive clips the input video using a formula that uses the AFD values (configured in afdSignaling ), the input display aspect ratio, and the output display aspect ratio. MediaLive also includes the AFD values in the output, unless the codec for this encode is FRAME_CAPTURE.
    /// PASSTHROUGH: MediaLive ignores the AFD values and does not clip the video. But MediaLive does include the values in the output.
    /// NONE: MediaLive does not clip the input video and does not include the AFD values in the output
    public let respondToAfd: VideoDescriptionRespondToAfd?
    /// STRETCH_TO_OUTPUT configures the output position to stretch the video to the specified output resolution (height and width). This option will override any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the video to provide the specified output resolution.
    public let scalingBehavior: VideoDescriptionScalingBehavior?
    /// Changes the strength of the anti-alias filter used for scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for most content.
    public let sharpness: Int
    /// Output video width, in pixels. Must be an even number. For most codecs, you can leave this field and height blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
    public let width: Int

    public init (
        codecSettings: VideoCodecSettings? = nil,
        height: Int = 0,
        name: String? = nil,
        respondToAfd: VideoDescriptionRespondToAfd? = nil,
        scalingBehavior: VideoDescriptionScalingBehavior? = nil,
        sharpness: Int = 0,
        width: Int = 0
    )
    {
        self.codecSettings = codecSettings
        self.height = height
        self.name = name
        self.respondToAfd = respondToAfd
        self.scalingBehavior = scalingBehavior
        self.sharpness = sharpness
        self.width = width
    }
}

/// Video Description Respond To Afd
public enum VideoDescriptionRespondToAfd {
    case `none`
    case passthrough
    case respond
    case sdkUnknown(String)
}

extension VideoDescriptionRespondToAfd : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [VideoDescriptionRespondToAfd] {
        return [
            .none,
            .passthrough,
            .respond,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .passthrough: return "PASSTHROUGH"
        case .respond: return "RESPOND"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = VideoDescriptionRespondToAfd(rawValue: rawValue) ?? VideoDescriptionRespondToAfd.sdkUnknown(rawValue)
    }
}

/// Video Description Scaling Behavior
public enum VideoDescriptionScalingBehavior {
    case `default`
    case stretchToOutput
    case sdkUnknown(String)
}

extension VideoDescriptionScalingBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [VideoDescriptionScalingBehavior] {
        return [
            .default,
            .stretchToOutput,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .default: return "DEFAULT"
        case .stretchToOutput: return "STRETCH_TO_OUTPUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = VideoDescriptionScalingBehavior(rawValue: rawValue) ?? VideoDescriptionScalingBehavior.sdkUnknown(rawValue)
    }
}

extension VideoSelector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case colorSpace = "colorSpace"
        case colorSpaceSettings = "colorSpaceSettings"
        case colorSpaceUsage = "colorSpaceUsage"
        case selectorSettings = "selectorSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let colorSpace = colorSpace {
            try encodeContainer.encode(colorSpace.rawValue, forKey: .colorSpace)
        }
        if let colorSpaceSettings = colorSpaceSettings {
            try encodeContainer.encode(colorSpaceSettings, forKey: .colorSpaceSettings)
        }
        if let colorSpaceUsage = colorSpaceUsage {
            try encodeContainer.encode(colorSpaceUsage.rawValue, forKey: .colorSpaceUsage)
        }
        if let selectorSettings = selectorSettings {
            try encodeContainer.encode(selectorSettings, forKey: .selectorSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let colorSpaceDecoded = try containerValues.decodeIfPresent(VideoSelectorColorSpace.self, forKey: .colorSpace)
        colorSpace = colorSpaceDecoded
        let colorSpaceSettingsDecoded = try containerValues.decodeIfPresent(VideoSelectorColorSpaceSettings.self, forKey: .colorSpaceSettings)
        colorSpaceSettings = colorSpaceSettingsDecoded
        let colorSpaceUsageDecoded = try containerValues.decodeIfPresent(VideoSelectorColorSpaceUsage.self, forKey: .colorSpaceUsage)
        colorSpaceUsage = colorSpaceUsageDecoded
        let selectorSettingsDecoded = try containerValues.decodeIfPresent(VideoSelectorSettings.self, forKey: .selectorSettings)
        selectorSettings = selectorSettingsDecoded
    }
}

extension VideoSelector: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VideoSelector(colorSpace: \(String(describing: colorSpace)), colorSpaceSettings: \(String(describing: colorSpaceSettings)), colorSpaceUsage: \(String(describing: colorSpaceUsage)), selectorSettings: \(String(describing: selectorSettings)))"}
}

/// Specifies a particular video stream within an input source. An input may have only a single video selector.
public struct VideoSelector: Equatable {
    /// Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.
    public let colorSpace: VideoSelectorColorSpace?
    /// Color space settings
    public let colorSpaceSettings: VideoSelectorColorSpaceSettings?
    /// Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.
    public let colorSpaceUsage: VideoSelectorColorSpaceUsage?
    /// The video selector settings.
    public let selectorSettings: VideoSelectorSettings?

    public init (
        colorSpace: VideoSelectorColorSpace? = nil,
        colorSpaceSettings: VideoSelectorColorSpaceSettings? = nil,
        colorSpaceUsage: VideoSelectorColorSpaceUsage? = nil,
        selectorSettings: VideoSelectorSettings? = nil
    )
    {
        self.colorSpace = colorSpace
        self.colorSpaceSettings = colorSpaceSettings
        self.colorSpaceUsage = colorSpaceUsage
        self.selectorSettings = selectorSettings
    }
}

/// Video Selector Color Space
public enum VideoSelectorColorSpace {
    case follow
    case hdr10
    case hlg2020
    case rec601
    case rec709
    case sdkUnknown(String)
}

extension VideoSelectorColorSpace : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [VideoSelectorColorSpace] {
        return [
            .follow,
            .hdr10,
            .hlg2020,
            .rec601,
            .rec709,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .follow: return "FOLLOW"
        case .hdr10: return "HDR10"
        case .hlg2020: return "HLG_2020"
        case .rec601: return "REC_601"
        case .rec709: return "REC_709"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = VideoSelectorColorSpace(rawValue: rawValue) ?? VideoSelectorColorSpace.sdkUnknown(rawValue)
    }
}

extension VideoSelectorColorSpaceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case hdr10Settings = "hdr10Settings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hdr10Settings = hdr10Settings {
            try encodeContainer.encode(hdr10Settings, forKey: .hdr10Settings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hdr10SettingsDecoded = try containerValues.decodeIfPresent(Hdr10Settings.self, forKey: .hdr10Settings)
        hdr10Settings = hdr10SettingsDecoded
    }
}

extension VideoSelectorColorSpaceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VideoSelectorColorSpaceSettings(hdr10Settings: \(String(describing: hdr10Settings)))"}
}

/// Video Selector Color Space Settings
public struct VideoSelectorColorSpaceSettings: Equatable {
    /// Hdr10 Settings
    public let hdr10Settings: Hdr10Settings?

    public init (
        hdr10Settings: Hdr10Settings? = nil
    )
    {
        self.hdr10Settings = hdr10Settings
    }
}

/// Video Selector Color Space Usage
public enum VideoSelectorColorSpaceUsage {
    case fallback
    case force
    case sdkUnknown(String)
}

extension VideoSelectorColorSpaceUsage : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [VideoSelectorColorSpaceUsage] {
        return [
            .fallback,
            .force,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .fallback: return "FALLBACK"
        case .force: return "FORCE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = VideoSelectorColorSpaceUsage(rawValue: rawValue) ?? VideoSelectorColorSpaceUsage.sdkUnknown(rawValue)
    }
}

extension VideoSelectorPid: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pid = "pid"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if pid != 0 {
            try encodeContainer.encode(pid, forKey: .pid)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pidDecoded = try containerValues.decode(Int.self, forKey: .pid)
        pid = pidDecoded
    }
}

extension VideoSelectorPid: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VideoSelectorPid(pid: \(String(describing: pid)))"}
}

/// Video Selector Pid
public struct VideoSelectorPid: Equatable {
    /// Selects a specific PID from within a video source.
    public let pid: Int

    public init (
        pid: Int = 0
    )
    {
        self.pid = pid
    }
}

extension VideoSelectorProgramId: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case programId = "programId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if programId != 0 {
            try encodeContainer.encode(programId, forKey: .programId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let programIdDecoded = try containerValues.decode(Int.self, forKey: .programId)
        programId = programIdDecoded
    }
}

extension VideoSelectorProgramId: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VideoSelectorProgramId(programId: \(String(describing: programId)))"}
}

/// Video Selector Program Id
public struct VideoSelectorProgramId: Equatable {
    /// Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
    public let programId: Int

    public init (
        programId: Int = 0
    )
    {
        self.programId = programId
    }
}

extension VideoSelectorSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case videoSelectorPid = "videoSelectorPid"
        case videoSelectorProgramId = "videoSelectorProgramId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let videoSelectorPid = videoSelectorPid {
            try encodeContainer.encode(videoSelectorPid, forKey: .videoSelectorPid)
        }
        if let videoSelectorProgramId = videoSelectorProgramId {
            try encodeContainer.encode(videoSelectorProgramId, forKey: .videoSelectorProgramId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let videoSelectorPidDecoded = try containerValues.decodeIfPresent(VideoSelectorPid.self, forKey: .videoSelectorPid)
        videoSelectorPid = videoSelectorPidDecoded
        let videoSelectorProgramIdDecoded = try containerValues.decodeIfPresent(VideoSelectorProgramId.self, forKey: .videoSelectorProgramId)
        videoSelectorProgramId = videoSelectorProgramIdDecoded
    }
}

extension VideoSelectorSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VideoSelectorSettings(videoSelectorPid: \(String(describing: videoSelectorPid)), videoSelectorProgramId: \(String(describing: videoSelectorProgramId)))"}
}

/// Video Selector Settings
public struct VideoSelectorSettings: Equatable {
    /// Video Selector Pid
    public let videoSelectorPid: VideoSelectorPid?
    /// Video Selector Program Id
    public let videoSelectorProgramId: VideoSelectorProgramId?

    public init (
        videoSelectorPid: VideoSelectorPid? = nil,
        videoSelectorProgramId: VideoSelectorProgramId? = nil
    )
    {
        self.videoSelectorPid = videoSelectorPid
        self.videoSelectorProgramId = videoSelectorProgramId
    }
}

extension VpcOutputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case publicAddressAllocationIds = "publicAddressAllocationIds"
        case securityGroupIds = "securityGroupIds"
        case subnetIds = "subnetIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let publicAddressAllocationIds = publicAddressAllocationIds {
            var publicAddressAllocationIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicAddressAllocationIds)
            for __listof__string0 in publicAddressAllocationIds {
                try publicAddressAllocationIdsContainer.encode(__listof__string0)
            }
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for __listof__string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(__listof__string0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for __listof__string0 in subnetIds {
                try subnetIdsContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publicAddressAllocationIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .publicAddressAllocationIds)
        var publicAddressAllocationIdsDecoded0:[String]? = nil
        if let publicAddressAllocationIdsContainer = publicAddressAllocationIdsContainer {
            publicAddressAllocationIdsDecoded0 = [String]()
            for string0 in publicAddressAllocationIdsContainer {
                if let string0 = string0 {
                    publicAddressAllocationIdsDecoded0?.append(string0)
                }
            }
        }
        publicAddressAllocationIds = publicAddressAllocationIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
    }
}

extension VpcOutputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VpcOutputSettings(publicAddressAllocationIds: \(String(describing: publicAddressAllocationIds)), securityGroupIds: \(String(describing: securityGroupIds)), subnetIds: \(String(describing: subnetIds)))"}
}

/// The properties for a private VPC Output
/// When this property is specified, the output egress addresses will be created in a user specified VPC
public struct VpcOutputSettings: Equatable {
    /// List of public address allocation ids to associate with ENIs that will be created in Output VPC.
    /// Must specify one for SINGLE_PIPELINE, two for STANDARD channels
    public let publicAddressAllocationIds: [String]?
    /// A list of up to 5 EC2 VPC security group IDs to attach to the Output VPC network interfaces.
    /// If none are specified then the VPC default security group will be used
    public let securityGroupIds: [String]?
    /// A list of VPC subnet IDs from the same VPC.
    /// If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ).
    public let subnetIds: [String]?

    public init (
        publicAddressAllocationIds: [String]? = nil,
        securityGroupIds: [String]? = nil,
        subnetIds: [String]? = nil
    )
    {
        self.publicAddressAllocationIds = publicAddressAllocationIds
        self.securityGroupIds = securityGroupIds
        self.subnetIds = subnetIds
    }
}

extension VpcOutputSettingsDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZones = "availabilityZones"
        case networkInterfaceIds = "networkInterfaceIds"
        case securityGroupIds = "securityGroupIds"
        case subnetIds = "subnetIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for __listof__string0 in availabilityZones {
                try availabilityZonesContainer.encode(__listof__string0)
            }
        }
        if let networkInterfaceIds = networkInterfaceIds {
            var networkInterfaceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaceIds)
            for __listof__string0 in networkInterfaceIds {
                try networkInterfaceIdsContainer.encode(__listof__string0)
            }
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for __listof__string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(__listof__string0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for __listof__string0 in subnetIds {
                try subnetIdsContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZonesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let networkInterfaceIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .networkInterfaceIds)
        var networkInterfaceIdsDecoded0:[String]? = nil
        if let networkInterfaceIdsContainer = networkInterfaceIdsContainer {
            networkInterfaceIdsDecoded0 = [String]()
            for string0 in networkInterfaceIdsContainer {
                if let string0 = string0 {
                    networkInterfaceIdsDecoded0?.append(string0)
                }
            }
        }
        networkInterfaceIds = networkInterfaceIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
    }
}

extension VpcOutputSettingsDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VpcOutputSettingsDescription(availabilityZones: \(String(describing: availabilityZones)), networkInterfaceIds: \(String(describing: networkInterfaceIds)), securityGroupIds: \(String(describing: securityGroupIds)), subnetIds: \(String(describing: subnetIds)))"}
}

/// The properties for a private VPC Output
public struct VpcOutputSettingsDescription: Equatable {
    /// The Availability Zones where the vpc subnets are located.
    /// The first Availability Zone applies to the first subnet in the list of subnets.
    /// The second Availability Zone applies to the second subnet.
    public let availabilityZones: [String]?
    /// A list of Elastic Network Interfaces created by MediaLive in the customer's VPC
    public let networkInterfaceIds: [String]?
    /// A list of up EC2 VPC security group IDs attached to the Output VPC network interfaces.
    public let securityGroupIds: [String]?
    /// A list of VPC subnet IDs from the same VPC.
    /// If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ).
    public let subnetIds: [String]?

    public init (
        availabilityZones: [String]? = nil,
        networkInterfaceIds: [String]? = nil,
        securityGroupIds: [String]? = nil,
        subnetIds: [String]? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.networkInterfaceIds = networkInterfaceIds
        self.securityGroupIds = securityGroupIds
        self.subnetIds = subnetIds
    }
}

/// Wav Coding Mode
public enum WavCodingMode {
    case codingMode10
    case codingMode20
    case codingMode40
    case codingMode80
    case sdkUnknown(String)
}

extension WavCodingMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [WavCodingMode] {
        return [
            .codingMode10,
            .codingMode20,
            .codingMode40,
            .codingMode80,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .codingMode10: return "CODING_MODE_1_0"
        case .codingMode20: return "CODING_MODE_2_0"
        case .codingMode40: return "CODING_MODE_4_0"
        case .codingMode80: return "CODING_MODE_8_0"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = WavCodingMode(rawValue: rawValue) ?? WavCodingMode.sdkUnknown(rawValue)
    }
}

extension WavSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitDepth = "bitDepth"
        case codingMode = "codingMode"
        case sampleRate = "sampleRate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitDepth != 0.0 {
            try encodeContainer.encode(bitDepth, forKey: .bitDepth)
        }
        if let codingMode = codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if sampleRate != 0.0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitDepthDecoded = try containerValues.decode(Double.self, forKey: .bitDepth)
        bitDepth = bitDepthDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(WavCodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let sampleRateDecoded = try containerValues.decode(Double.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
    }
}

extension WavSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WavSettings(bitDepth: \(String(describing: bitDepth)), codingMode: \(String(describing: codingMode)), sampleRate: \(String(describing: sampleRate)))"}
}

/// Wav Settings
public struct WavSettings: Equatable {
    /// Bits per sample.
    public let bitDepth: Double
    /// The audio coding mode for the WAV audio. The mode determines the number of channels in the audio.
    public let codingMode: WavCodingMode?
    /// Sample rate in Hz.
    public let sampleRate: Double

    public init (
        bitDepth: Double = 0.0,
        codingMode: WavCodingMode? = nil,
        sampleRate: Double = 0.0
    )
    {
        self.bitDepth = bitDepth
        self.codingMode = codingMode
        self.sampleRate = sampleRate
    }
}

extension WebvttDestinationSettings: Codable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }

    public init (from decoder: Decoder) throws {
    }
}

extension WebvttDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WebvttDestinationSettings()"}
}

/// Webvtt Destination Settings
public struct WebvttDestinationSettings: Equatable {

    public init() {}
}
