// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RtmpOutputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateMode = "certificateMode"
        case connectionRetryInterval = "connectionRetryInterval"
        case destination = "destination"
        case numRetries = "numRetries"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateMode = certificateMode {
            try encodeContainer.encode(certificateMode.rawValue, forKey: .certificateMode)
        }
        if connectionRetryInterval != 0 {
            try encodeContainer.encode(connectionRetryInterval, forKey: .connectionRetryInterval)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if numRetries != 0 {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateModeDecoded = try containerValues.decodeIfPresent(RtmpOutputCertificateMode.self, forKey: .certificateMode)
        certificateMode = certificateModeDecoded
        let connectionRetryIntervalDecoded = try containerValues.decode(Int.self, forKey: .connectionRetryInterval)
        connectionRetryInterval = connectionRetryIntervalDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
        let numRetriesDecoded = try containerValues.decode(Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
    }
}
