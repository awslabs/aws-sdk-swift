// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Scte35SpliceInsert: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adAvailOffset = "adAvailOffset"
        case noRegionalBlackoutFlag = "noRegionalBlackoutFlag"
        case webDeliveryAllowedFlag = "webDeliveryAllowedFlag"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if adAvailOffset != 0 {
            try encodeContainer.encode(adAvailOffset, forKey: .adAvailOffset)
        }
        if let noRegionalBlackoutFlag = noRegionalBlackoutFlag {
            try encodeContainer.encode(noRegionalBlackoutFlag.rawValue, forKey: .noRegionalBlackoutFlag)
        }
        if let webDeliveryAllowedFlag = webDeliveryAllowedFlag {
            try encodeContainer.encode(webDeliveryAllowedFlag.rawValue, forKey: .webDeliveryAllowedFlag)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adAvailOffsetDecoded = try containerValues.decode(Int.self, forKey: .adAvailOffset)
        adAvailOffset = adAvailOffsetDecoded
        let noRegionalBlackoutFlagDecoded = try containerValues.decodeIfPresent(Scte35SpliceInsertNoRegionalBlackoutBehavior.self, forKey: .noRegionalBlackoutFlag)
        noRegionalBlackoutFlag = noRegionalBlackoutFlagDecoded
        let webDeliveryAllowedFlagDecoded = try containerValues.decodeIfPresent(Scte35SpliceInsertWebDeliveryAllowedBehavior.self, forKey: .webDeliveryAllowedFlag)
        webDeliveryAllowedFlag = webDeliveryAllowedFlagDecoded
    }
}
