// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MultiplexSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for __listof__string0 in availabilityZones {
                try availabilityZonesContainer.encode(__listof__string0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let multiplexSettings = multiplexSettings {
            try encodeContainer.encode(multiplexSettings, forKey: .multiplexSettings)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if pipelinesRunningCount != 0 {
            try encodeContainer.encode(pipelinesRunningCount, forKey: .pipelinesRunningCount)
        }
        if programCount != 0 {
            try encodeContainer.encode(programCount, forKey: .programCount)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([String].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [String]()
            for string0 in availabilityZonesContainer {
                availabilityZonesDecoded0?.append(string0)
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MultiplexSettingsSummary.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decode(Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decode(Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
    }
}
