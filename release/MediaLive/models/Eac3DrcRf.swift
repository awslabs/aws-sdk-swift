// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Eac3 Drc Rf
public enum Eac3DrcRf {
    case filmLight
    case filmStandard
    case musicLight
    case musicStandard
    case `none`
    case speech
    case sdkUnknown(String)
}

extension Eac3DrcRf : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3DrcRf] {
        return [
            .filmLight,
            .filmStandard,
            .musicLight,
            .musicStandard,
            .none,
            .speech,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .filmLight: return "FILM_LIGHT"
        case .filmStandard: return "FILM_STANDARD"
        case .musicLight: return "MUSIC_LIGHT"
        case .musicStandard: return "MUSIC_STANDARD"
        case .none: return "NONE"
        case .speech: return "SPEECH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3DrcRf(rawValue: rawValue) ?? Eac3DrcRf.sdkUnknown(rawValue)
    }
}
