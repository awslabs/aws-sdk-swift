// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// H265 Settings
public struct H265Settings: Equatable {
    /// Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
    public let adaptiveQuantization: H265AdaptiveQuantization?
    /// Indicates that AFD values will be written into the output stream.  If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
    public let afdSignaling: AfdSignaling?
    /// Whether or not EML should insert an Alternative Transfer Function SEI message to support backwards compatibility with non-HDR decoders and displays.
    public let alternativeTransferFunction: H265AlternativeTransferFunction?
    /// Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
    public let bitrate: Int
    /// Size of buffer (HRD buffer model) in bits.
    public let bufSize: Int
    /// Includes colorspace metadata in the output.
    public let colorMetadata: H265ColorMetadata?
    /// Color Space settings
    public let colorSpaceSettings: H265ColorSpaceSettings?
    /// Optional filters that you can apply to an encode.
    public let filterSettings: H265FilterSettings?
    /// Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
    public let fixedAfd: FixedAfd?
    /// If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
    public let flickerAq: H265FlickerAq?
    /// Framerate denominator.
    public let framerateDenominator: Int
    /// Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
    public let framerateNumerator: Int
    /// Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
    public let gopClosedCadence: Int
    /// GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits.
    /// If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1.
    /// If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
    public let gopSize: Double
    /// Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
    public let gopSizeUnits: H265GopSizeUnits?
    /// H.265 Level.
    public let level: H265Level?
    /// Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
    public let lookAheadRateControl: H265LookAheadRateControl?
    /// For QVBR: See the tooltip for Quality level
    public let maxBitrate: Int
    /// Only meaningful if sceneChangeDetect is set to enabled.  Defaults to 5 if multiplex rate control is used.  Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
    public let minIInterval: Int
    /// Pixel Aspect Ratio denominator.
    public let parDenominator: Int
    /// Pixel Aspect Ratio numerator.
    public let parNumerator: Int
    /// H.265 Profile.
    public let profile: H265Profile?
    /// Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are:
    /// - Primary screen: Quality level: 8 to 10. Max bitrate: 4M
    /// - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M
    /// - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M
    public let qvbrQualityLevel: Int
    /// Rate control mode.
    ///
    /// QVBR: Quality will match the specified quality level except when it is constrained by the
    /// maximum bitrate.  Recommended if you or your viewers pay for bandwidth.
    ///
    /// CBR: Quality varies, depending on the video complexity. Recommended only if you distribute
    /// your assets to devices that cannot handle variable bitrates.
    ///
    /// Multiplex: This rate control mode is only supported (and is required) when the video is being
    /// delivered to a MediaLive Multiplex in which case the rate control configuration is controlled
    /// by the properties within the Multiplex Program.
    public let rateControlMode: H265RateControlMode?
    /// Sets the scan type of the output to progressive or top-field-first interlaced.
    public let scanType: H265ScanType?
    /// Scene change detection.
    public let sceneChangeDetect: H265SceneChangeDetect?
    /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures.
    /// This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
    public let slices: Int
    /// H.265 Tier.
    public let tier: H265Tier?
    /// Determines how timecodes should be inserted into the video elementary stream.
    /// - 'disabled': Do not include timecodes
    /// - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
    public let timecodeInsertion: H265TimecodeInsertionBehavior?

    public init (
        adaptiveQuantization: H265AdaptiveQuantization? = nil,
        afdSignaling: AfdSignaling? = nil,
        alternativeTransferFunction: H265AlternativeTransferFunction? = nil,
        bitrate: Int = 0,
        bufSize: Int = 0,
        colorMetadata: H265ColorMetadata? = nil,
        colorSpaceSettings: H265ColorSpaceSettings? = nil,
        filterSettings: H265FilterSettings? = nil,
        fixedAfd: FixedAfd? = nil,
        flickerAq: H265FlickerAq? = nil,
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        gopClosedCadence: Int = 0,
        gopSize: Double = 0.0,
        gopSizeUnits: H265GopSizeUnits? = nil,
        level: H265Level? = nil,
        lookAheadRateControl: H265LookAheadRateControl? = nil,
        maxBitrate: Int = 0,
        minIInterval: Int = 0,
        parDenominator: Int = 0,
        parNumerator: Int = 0,
        profile: H265Profile? = nil,
        qvbrQualityLevel: Int = 0,
        rateControlMode: H265RateControlMode? = nil,
        scanType: H265ScanType? = nil,
        sceneChangeDetect: H265SceneChangeDetect? = nil,
        slices: Int = 0,
        tier: H265Tier? = nil,
        timecodeInsertion: H265TimecodeInsertionBehavior? = nil
    )
    {
        self.adaptiveQuantization = adaptiveQuantization
        self.afdSignaling = afdSignaling
        self.alternativeTransferFunction = alternativeTransferFunction
        self.bitrate = bitrate
        self.bufSize = bufSize
        self.colorMetadata = colorMetadata
        self.colorSpaceSettings = colorSpaceSettings
        self.filterSettings = filterSettings
        self.fixedAfd = fixedAfd
        self.flickerAq = flickerAq
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.gopClosedCadence = gopClosedCadence
        self.gopSize = gopSize
        self.gopSizeUnits = gopSizeUnits
        self.level = level
        self.lookAheadRateControl = lookAheadRateControl
        self.maxBitrate = maxBitrate
        self.minIInterval = minIInterval
        self.parDenominator = parDenominator
        self.parNumerator = parNumerator
        self.profile = profile
        self.qvbrQualityLevel = qvbrQualityLevel
        self.rateControlMode = rateControlMode
        self.scanType = scanType
        self.sceneChangeDetect = sceneChangeDetect
        self.slices = slices
        self.tier = tier
        self.timecodeInsertion = timecodeInsertion
    }
}
