// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AudioNormalizationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithm = "algorithm"
        case algorithmControl = "algorithmControl"
        case targetLkfs = "targetLkfs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithm = algorithm {
            try encodeContainer.encode(algorithm.rawValue, forKey: .algorithm)
        }
        if let algorithmControl = algorithmControl {
            try encodeContainer.encode(algorithmControl.rawValue, forKey: .algorithmControl)
        }
        if targetLkfs != 0.0 {
            try encodeContainer.encode(targetLkfs, forKey: .targetLkfs)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmDecoded = try containerValues.decodeIfPresent(AudioNormalizationAlgorithm.self, forKey: .algorithm)
        algorithm = algorithmDecoded
        let algorithmControlDecoded = try containerValues.decodeIfPresent(AudioNormalizationAlgorithmControl.self, forKey: .algorithmControl)
        algorithmControl = algorithmControlDecoded
        let targetLkfsDecoded = try containerValues.decode(Double.self, forKey: .targetLkfs)
        targetLkfs = targetLkfsDecoded
    }
}
