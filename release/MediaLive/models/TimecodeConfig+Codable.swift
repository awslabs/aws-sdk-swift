// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TimecodeConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case source = "source"
        case syncThreshold = "syncThreshold"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let source = source {
            try encodeContainer.encode(source.rawValue, forKey: .source)
        }
        if syncThreshold != 0 {
            try encodeContainer.encode(syncThreshold, forKey: .syncThreshold)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(TimecodeConfigSource.self, forKey: .source)
        source = sourceDecoded
        let syncThresholdDecoded = try containerValues.decode(Int.self, forKey: .syncThreshold)
        syncThreshold = syncThresholdDecoded
    }
}
