// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CaptionSelectorSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ancillarySourceSettings = "ancillarySourceSettings"
        case aribSourceSettings = "aribSourceSettings"
        case dvbSubSourceSettings = "dvbSubSourceSettings"
        case embeddedSourceSettings = "embeddedSourceSettings"
        case scte20SourceSettings = "scte20SourceSettings"
        case scte27SourceSettings = "scte27SourceSettings"
        case teletextSourceSettings = "teletextSourceSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ancillarySourceSettings = ancillarySourceSettings {
            try encodeContainer.encode(ancillarySourceSettings, forKey: .ancillarySourceSettings)
        }
        if let aribSourceSettings = aribSourceSettings {
            try encodeContainer.encode(aribSourceSettings, forKey: .aribSourceSettings)
        }
        if let dvbSubSourceSettings = dvbSubSourceSettings {
            try encodeContainer.encode(dvbSubSourceSettings, forKey: .dvbSubSourceSettings)
        }
        if let embeddedSourceSettings = embeddedSourceSettings {
            try encodeContainer.encode(embeddedSourceSettings, forKey: .embeddedSourceSettings)
        }
        if let scte20SourceSettings = scte20SourceSettings {
            try encodeContainer.encode(scte20SourceSettings, forKey: .scte20SourceSettings)
        }
        if let scte27SourceSettings = scte27SourceSettings {
            try encodeContainer.encode(scte27SourceSettings, forKey: .scte27SourceSettings)
        }
        if let teletextSourceSettings = teletextSourceSettings {
            try encodeContainer.encode(teletextSourceSettings, forKey: .teletextSourceSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ancillarySourceSettingsDecoded = try containerValues.decodeIfPresent(AncillarySourceSettings.self, forKey: .ancillarySourceSettings)
        ancillarySourceSettings = ancillarySourceSettingsDecoded
        let aribSourceSettingsDecoded = try containerValues.decodeIfPresent(AribSourceSettings.self, forKey: .aribSourceSettings)
        aribSourceSettings = aribSourceSettingsDecoded
        let dvbSubSourceSettingsDecoded = try containerValues.decodeIfPresent(DvbSubSourceSettings.self, forKey: .dvbSubSourceSettings)
        dvbSubSourceSettings = dvbSubSourceSettingsDecoded
        let embeddedSourceSettingsDecoded = try containerValues.decodeIfPresent(EmbeddedSourceSettings.self, forKey: .embeddedSourceSettings)
        embeddedSourceSettings = embeddedSourceSettingsDecoded
        let scte20SourceSettingsDecoded = try containerValues.decodeIfPresent(Scte20SourceSettings.self, forKey: .scte20SourceSettings)
        scte20SourceSettings = scte20SourceSettingsDecoded
        let scte27SourceSettingsDecoded = try containerValues.decodeIfPresent(Scte27SourceSettings.self, forKey: .scte27SourceSettings)
        scte27SourceSettings = scte27SourceSettingsDecoded
        let teletextSourceSettingsDecoded = try containerValues.decodeIfPresent(TeletextSourceSettings.self, forKey: .teletextSourceSettings)
        teletextSourceSettings = teletextSourceSettingsDecoded
    }
}
