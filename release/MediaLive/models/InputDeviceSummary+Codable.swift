// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InputDeviceSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case connectionState = "connectionState"
        case deviceSettingsSyncState = "deviceSettingsSyncState"
        case deviceUpdateStatus = "deviceUpdateStatus"
        case hdDeviceSettings = "hdDeviceSettings"
        case id = "id"
        case macAddress = "macAddress"
        case name = "name"
        case networkSettings = "networkSettings"
        case serialNumber = "serialNumber"
        case type = "type"
        case uhdDeviceSettings = "uhdDeviceSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let connectionState = connectionState {
            try encodeContainer.encode(connectionState.rawValue, forKey: .connectionState)
        }
        if let deviceSettingsSyncState = deviceSettingsSyncState {
            try encodeContainer.encode(deviceSettingsSyncState.rawValue, forKey: .deviceSettingsSyncState)
        }
        if let deviceUpdateStatus = deviceUpdateStatus {
            try encodeContainer.encode(deviceUpdateStatus.rawValue, forKey: .deviceUpdateStatus)
        }
        if let hdDeviceSettings = hdDeviceSettings {
            try encodeContainer.encode(hdDeviceSettings, forKey: .hdDeviceSettings)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let macAddress = macAddress {
            try encodeContainer.encode(macAddress, forKey: .macAddress)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networkSettings = networkSettings {
            try encodeContainer.encode(networkSettings, forKey: .networkSettings)
        }
        if let serialNumber = serialNumber {
            try encodeContainer.encode(serialNumber, forKey: .serialNumber)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let uhdDeviceSettings = uhdDeviceSettings {
            try encodeContainer.encode(uhdDeviceSettings, forKey: .uhdDeviceSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(InputDeviceConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let deviceSettingsSyncStateDecoded = try containerValues.decodeIfPresent(DeviceSettingsSyncState.self, forKey: .deviceSettingsSyncState)
        deviceSettingsSyncState = deviceSettingsSyncStateDecoded
        let deviceUpdateStatusDecoded = try containerValues.decodeIfPresent(DeviceUpdateStatus.self, forKey: .deviceUpdateStatus)
        deviceUpdateStatus = deviceUpdateStatusDecoded
        let hdDeviceSettingsDecoded = try containerValues.decodeIfPresent(InputDeviceHdSettings.self, forKey: .hdDeviceSettings)
        hdDeviceSettings = hdDeviceSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let macAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .macAddress)
        macAddress = macAddressDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let networkSettingsDecoded = try containerValues.decodeIfPresent(InputDeviceNetworkSettings.self, forKey: .networkSettings)
        networkSettings = networkSettingsDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let typeDecoded = try containerValues.decodeIfPresent(InputDeviceType.self, forKey: .type)
        type = typeDecoded
        let uhdDeviceSettingsDecoded = try containerValues.decodeIfPresent(InputDeviceUhdSettings.self, forKey: .uhdDeviceSettings)
        uhdDeviceSettings = uhdDeviceSettingsDecoded
    }
}
