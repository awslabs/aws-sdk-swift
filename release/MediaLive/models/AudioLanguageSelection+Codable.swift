// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AudioLanguageSelection: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case languageCode = "languageCode"
        case languageSelectionPolicy = "languageSelectionPolicy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let languageSelectionPolicy = languageSelectionPolicy {
            try encodeContainer.encode(languageSelectionPolicy.rawValue, forKey: .languageSelectionPolicy)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageSelectionPolicyDecoded = try containerValues.decodeIfPresent(AudioLanguageSelectionPolicy.self, forKey: .languageSelectionPolicy)
        languageSelectionPolicy = languageSelectionPolicyDecoded
    }
}
