// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NielsenConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case distributorId = "distributorId"
        case nielsenPcmToId3Tagging = "nielsenPcmToId3Tagging"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributorId = distributorId {
            try encodeContainer.encode(distributorId, forKey: .distributorId)
        }
        if let nielsenPcmToId3Tagging = nielsenPcmToId3Tagging {
            try encodeContainer.encode(nielsenPcmToId3Tagging.rawValue, forKey: .nielsenPcmToId3Tagging)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .distributorId)
        distributorId = distributorIdDecoded
        let nielsenPcmToId3TaggingDecoded = try containerValues.decodeIfPresent(NielsenPcmToId3TaggingState.self, forKey: .nielsenPcmToId3Tagging)
        nielsenPcmToId3Tagging = nielsenPcmToId3TaggingDecoded
    }
}
