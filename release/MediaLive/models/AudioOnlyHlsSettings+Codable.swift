// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AudioOnlyHlsSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioGroupId = "audioGroupId"
        case audioOnlyImage = "audioOnlyImage"
        case audioTrackType = "audioTrackType"
        case segmentType = "segmentType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioGroupId = audioGroupId {
            try encodeContainer.encode(audioGroupId, forKey: .audioGroupId)
        }
        if let audioOnlyImage = audioOnlyImage {
            try encodeContainer.encode(audioOnlyImage, forKey: .audioOnlyImage)
        }
        if let audioTrackType = audioTrackType {
            try encodeContainer.encode(audioTrackType.rawValue, forKey: .audioTrackType)
        }
        if let segmentType = segmentType {
            try encodeContainer.encode(segmentType.rawValue, forKey: .segmentType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioGroupId)
        audioGroupId = audioGroupIdDecoded
        let audioOnlyImageDecoded = try containerValues.decodeIfPresent(InputLocation.self, forKey: .audioOnlyImage)
        audioOnlyImage = audioOnlyImageDecoded
        let audioTrackTypeDecoded = try containerValues.decodeIfPresent(AudioOnlyHlsTrackType.self, forKey: .audioTrackType)
        audioTrackType = audioTrackTypeDecoded
        let segmentTypeDecoded = try containerValues.decodeIfPresent(AudioOnlyHlsSegmentType.self, forKey: .segmentType)
        segmentType = segmentTypeDecoded
    }
}
