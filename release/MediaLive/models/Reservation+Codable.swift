// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Reservation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case count = "count"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case durationUnits = "durationUnits"
        case end = "end"
        case fixedPrice = "fixedPrice"
        case name = "name"
        case offeringDescription = "offeringDescription"
        case offeringId = "offeringId"
        case offeringType = "offeringType"
        case region = "region"
        case reservationId = "reservationId"
        case resourceSpecification = "resourceSpecification"
        case start = "start"
        case state = "state"
        case tags = "tags"
        case usagePrice = "usagePrice"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let currencyCode = currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let durationUnits = durationUnits {
            try encodeContainer.encode(durationUnits.rawValue, forKey: .durationUnits)
        }
        if let end = end {
            try encodeContainer.encode(end, forKey: .end)
        }
        if fixedPrice != 0.0 {
            try encodeContainer.encode(fixedPrice, forKey: .fixedPrice)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let offeringDescription = offeringDescription {
            try encodeContainer.encode(offeringDescription, forKey: .offeringDescription)
        }
        if let offeringId = offeringId {
            try encodeContainer.encode(offeringId, forKey: .offeringId)
        }
        if let offeringType = offeringType {
            try encodeContainer.encode(offeringType.rawValue, forKey: .offeringType)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let reservationId = reservationId {
            try encodeContainer.encode(reservationId, forKey: .reservationId)
        }
        if let resourceSpecification = resourceSpecification {
            try encodeContainer.encode(resourceSpecification, forKey: .resourceSpecification)
        }
        if let start = start {
            try encodeContainer.encode(start, forKey: .start)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if usagePrice != 0.0 {
            try encodeContainer.encode(usagePrice, forKey: .usagePrice)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let durationUnitsDecoded = try containerValues.decodeIfPresent(OfferingDurationUnits.self, forKey: .durationUnits)
        durationUnits = durationUnitsDecoded
        let endDecoded = try containerValues.decodeIfPresent(String.self, forKey: .end)
        end = endDecoded
        let fixedPriceDecoded = try containerValues.decode(Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let offeringDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringDescription)
        offeringDescription = offeringDescriptionDecoded
        let offeringIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(OfferingType.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let reservationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reservationId)
        reservationId = reservationIdDecoded
        let resourceSpecificationDecoded = try containerValues.decodeIfPresent(ReservationResourceSpecification.self, forKey: .resourceSpecification)
        resourceSpecification = resourceSpecificationDecoded
        let startDecoded = try containerValues.decodeIfPresent(String.self, forKey: .start)
        start = startDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ReservationState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
        let usagePriceDecoded = try containerValues.decode(Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
    }
}
