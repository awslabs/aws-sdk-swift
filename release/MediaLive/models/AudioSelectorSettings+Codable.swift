// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AudioSelectorSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioLanguageSelection = "audioLanguageSelection"
        case audioPidSelection = "audioPidSelection"
        case audioTrackSelection = "audioTrackSelection"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioLanguageSelection = audioLanguageSelection {
            try encodeContainer.encode(audioLanguageSelection, forKey: .audioLanguageSelection)
        }
        if let audioPidSelection = audioPidSelection {
            try encodeContainer.encode(audioPidSelection, forKey: .audioPidSelection)
        }
        if let audioTrackSelection = audioTrackSelection {
            try encodeContainer.encode(audioTrackSelection, forKey: .audioTrackSelection)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioLanguageSelectionDecoded = try containerValues.decodeIfPresent(AudioLanguageSelection.self, forKey: .audioLanguageSelection)
        audioLanguageSelection = audioLanguageSelectionDecoded
        let audioPidSelectionDecoded = try containerValues.decodeIfPresent(AudioPidSelection.self, forKey: .audioPidSelection)
        audioPidSelection = audioPidSelectionDecoded
        let audioTrackSelectionDecoded = try containerValues.decodeIfPresent(AudioTrackSelection.self, forKey: .audioTrackSelection)
        audioTrackSelection = audioTrackSelectionDecoded
    }
}
