// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InputSecurityGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case id = "id"
        case inputs = "inputs"
        case state = "state"
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for __listof__string0 in inputs {
                try inputsContainer.encode(__listof__string0)
            }
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let whitelistRules = whitelistRules {
            var whitelistRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .whitelistRules)
            for __listofinputwhitelistrule0 in whitelistRules {
                try whitelistRulesContainer.encode(__listofinputwhitelistrule0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let inputsContainer = try containerValues.decodeIfPresent([String].self, forKey: .inputs)
        var inputsDecoded0:[String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [String]()
            for string0 in inputsContainer {
                inputsDecoded0?.append(string0)
            }
        }
        inputs = inputsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(InputSecurityGroupState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
        let whitelistRulesContainer = try containerValues.decodeIfPresent([InputWhitelistRule].self, forKey: .whitelistRules)
        var whitelistRulesDecoded0:[InputWhitelistRule]? = nil
        if let whitelistRulesContainer = whitelistRulesContainer {
            whitelistRulesDecoded0 = [InputWhitelistRule]()
            for structure0 in whitelistRulesContainer {
                whitelistRulesDecoded0?.append(structure0)
            }
        }
        whitelistRules = whitelistRulesDecoded0
    }
}
