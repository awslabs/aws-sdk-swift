// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EbuTtDDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case copyrightHolder = "copyrightHolder"
        case fillLineGap = "fillLineGap"
        case fontFamily = "fontFamily"
        case styleControl = "styleControl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let copyrightHolder = copyrightHolder {
            try encodeContainer.encode(copyrightHolder, forKey: .copyrightHolder)
        }
        if let fillLineGap = fillLineGap {
            try encodeContainer.encode(fillLineGap.rawValue, forKey: .fillLineGap)
        }
        if let fontFamily = fontFamily {
            try encodeContainer.encode(fontFamily, forKey: .fontFamily)
        }
        if let styleControl = styleControl {
            try encodeContainer.encode(styleControl.rawValue, forKey: .styleControl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let copyrightHolderDecoded = try containerValues.decodeIfPresent(String.self, forKey: .copyrightHolder)
        copyrightHolder = copyrightHolderDecoded
        let fillLineGapDecoded = try containerValues.decodeIfPresent(EbuTtDFillLineGapControl.self, forKey: .fillLineGap)
        fillLineGap = fillLineGapDecoded
        let fontFamilyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fontFamily)
        fontFamily = fontFamilyDecoded
        let styleControlDecoded = try containerValues.decodeIfPresent(EbuTtDDestinationStyleControl.self, forKey: .styleControl)
        styleControl = styleControlDecoded
    }
}
