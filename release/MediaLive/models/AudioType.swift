// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Audio Type
public enum AudioType {
    case cleanEffects
    case hearingImpaired
    case undefined
    case visualImpairedCommentary
    case sdkUnknown(String)
}

extension AudioType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioType] {
        return [
            .cleanEffects,
            .hearingImpaired,
            .undefined,
            .visualImpairedCommentary,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cleanEffects: return "CLEAN_EFFECTS"
        case .hearingImpaired: return "HEARING_IMPAIRED"
        case .undefined: return "UNDEFINED"
        case .visualImpairedCommentary: return "VISUAL_IMPAIRED_COMMENTARY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioType(rawValue: rawValue) ?? AudioType.sdkUnknown(rawValue)
    }
}
