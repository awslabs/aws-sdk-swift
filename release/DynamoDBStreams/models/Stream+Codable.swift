// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Stream: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case streamArn = "StreamArn"
        case streamLabel = "StreamLabel"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamArn = streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
        if let streamLabel = streamLabel {
            try encodeContainer.encode(streamLabel, forKey: .streamLabel)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let streamLabelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamLabel)
        streamLabel = streamLabelDecoded
    }
}
