// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StreamRecord: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case approximateCreationDateTime = "ApproximateCreationDateTime"
        case keys = "Keys"
        case newImage = "NewImage"
        case oldImage = "OldImage"
        case sequenceNumber = "SequenceNumber"
        case sizeBytes = "SizeBytes"
        case streamViewType = "StreamViewType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approximateCreationDateTime = approximateCreationDateTime {
            try encodeContainer.encode(approximateCreationDateTime.timeIntervalSince1970, forKey: .approximateCreationDateTime)
        }
        if let keys = keys {
            var keysContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .keys)
            for (dictKey0, attributemap0) in keys {
                try keysContainer.encode(attributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let newImage = newImage {
            var newImageContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .newImage)
            for (dictKey0, attributemap0) in newImage {
                try newImageContainer.encode(attributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let oldImage = oldImage {
            var oldImageContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .oldImage)
            for (dictKey0, attributemap0) in oldImage {
                try oldImageContainer.encode(attributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let sequenceNumber = sequenceNumber {
            try encodeContainer.encode(sequenceNumber, forKey: .sequenceNumber)
        }
        if let sizeBytes = sizeBytes {
            try encodeContainer.encode(sizeBytes, forKey: .sizeBytes)
        }
        if let streamViewType = streamViewType {
            try encodeContainer.encode(streamViewType.rawValue, forKey: .streamViewType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let approximateCreationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .approximateCreationDateTime)
        approximateCreationDateTime = approximateCreationDateTimeDecoded
        let keysContainer = try containerValues.decodeIfPresent([String:AttributeValue].self, forKey: .keys)
        var keysDecoded0: [String:AttributeValue]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in keysContainer {
                keysDecoded0?[key0] = attributevalue0
            }
        }
        keys = keysDecoded0
        let newImageContainer = try containerValues.decodeIfPresent([String:AttributeValue].self, forKey: .newImage)
        var newImageDecoded0: [String:AttributeValue]? = nil
        if let newImageContainer = newImageContainer {
            newImageDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in newImageContainer {
                newImageDecoded0?[key0] = attributevalue0
            }
        }
        newImage = newImageDecoded0
        let oldImageContainer = try containerValues.decodeIfPresent([String:AttributeValue].self, forKey: .oldImage)
        var oldImageDecoded0: [String:AttributeValue]? = nil
        if let oldImageContainer = oldImageContainer {
            oldImageDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in oldImageContainer {
                oldImageDecoded0?[key0] = attributevalue0
            }
        }
        oldImage = oldImageDecoded0
        let sequenceNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sequenceNumber)
        sequenceNumber = sequenceNumberDecoded
        let sizeBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .sizeBytes)
        sizeBytes = sizeBytesDecoded
        let streamViewTypeDecoded = try containerValues.decodeIfPresent(StreamViewType.self, forKey: .streamViewType)
        streamViewType = streamViewTypeDecoded
    }
}
