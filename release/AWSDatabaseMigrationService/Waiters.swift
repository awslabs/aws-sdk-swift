// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DatabaseMigrationClientProtocol {

    static func testConnectionSucceedsWaiterConfig() throws -> WaiterConfiguration<DescribeConnectionsInput, DescribeConnectionsOutputResponse> {
        let acceptors: [WaiterConfiguration<DescribeConnectionsInput, DescribeConnectionsOutputResponse>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeConnectionsInput, result: Result<DescribeConnectionsOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Connections[].Status"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "successful"
                guard case .success(let output) = result else { return false }
                let connections = output.connections
                let projection: [Swift.String]? = connections?.compactMap { original in
                    let status = original.status
                    return status
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { JMESUtils.compare($0, ==, "successful") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeConnectionsInput, result: Result<DescribeConnectionsOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Connections[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "failed"
                guard case .success(let output) = result else { return false }
                let connections = output.connections
                let projection: [Swift.String]? = connections?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "failed") }) ?? false
            }),
        ]
        return try WaiterConfiguration<DescribeConnectionsInput, DescribeConnectionsOutputResponse>(acceptors: acceptors, minDelay: 5.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the TestConnectionSucceeds event on the describeConnections operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeConnectionsInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilTestConnectionSucceeds(options: WaiterOptions, input: DescribeConnectionsInput) async throws -> WaiterOutcome<DescribeConnectionsOutputResponse> {
        let waiter = Waiter(config: try Self.testConnectionSucceedsWaiterConfig(), operation: self.describeConnections(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func endpointDeletedWaiterConfig() throws -> WaiterConfiguration<DescribeEndpointsInput, DescribeEndpointsOutputResponse> {
        let acceptors: [WaiterConfiguration<DescribeEndpointsInput, DescribeEndpointsOutputResponse>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeEndpointsInput, result: Result<DescribeEndpointsOutputResponse, Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? WaiterTypedError)?.waiterErrorType == "ResourceNotFoundFault"
            }),
            .init(state: .failure, matcher: { (input: DescribeEndpointsInput, result: Result<DescribeEndpointsOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Endpoints[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "active"
                guard case .success(let output) = result else { return false }
                let endpoints = output.endpoints
                let projection: [Swift.String]? = endpoints?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "active") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeEndpointsInput, result: Result<DescribeEndpointsOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Endpoints[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "creating"
                guard case .success(let output) = result else { return false }
                let endpoints = output.endpoints
                let projection: [Swift.String]? = endpoints?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "creating") }) ?? false
            }),
        ]
        return try WaiterConfiguration<DescribeEndpointsInput, DescribeEndpointsOutputResponse>(acceptors: acceptors, minDelay: 5.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the EndpointDeleted event on the describeEndpoints operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeEndpointsInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilEndpointDeleted(options: WaiterOptions, input: DescribeEndpointsInput) async throws -> WaiterOutcome<DescribeEndpointsOutputResponse> {
        let waiter = Waiter(config: try Self.endpointDeletedWaiterConfig(), operation: self.describeEndpoints(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func replicationInstanceAvailableWaiterConfig() throws -> WaiterConfiguration<DescribeReplicationInstancesInput, DescribeReplicationInstancesOutputResponse> {
        let acceptors: [WaiterConfiguration<DescribeReplicationInstancesInput, DescribeReplicationInstancesOutputResponse>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeReplicationInstancesInput, result: Result<DescribeReplicationInstancesOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationInstances[].ReplicationInstanceStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "available"
                guard case .success(let output) = result else { return false }
                let replicationInstances = output.replicationInstances
                let projection: [Swift.String]? = replicationInstances?.compactMap { original in
                    let replicationInstanceStatus = original.replicationInstanceStatus
                    return replicationInstanceStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { JMESUtils.compare($0, ==, "available") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationInstancesInput, result: Result<DescribeReplicationInstancesOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationInstances[].ReplicationInstanceStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "deleting"
                guard case .success(let output) = result else { return false }
                let replicationInstances = output.replicationInstances
                let projection: [Swift.String]? = replicationInstances?.compactMap { original in
                    let replicationInstanceStatus = original.replicationInstanceStatus
                    return replicationInstanceStatus
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "deleting") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationInstancesInput, result: Result<DescribeReplicationInstancesOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationInstances[].ReplicationInstanceStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "incompatible-credentials"
                guard case .success(let output) = result else { return false }
                let replicationInstances = output.replicationInstances
                let projection: [Swift.String]? = replicationInstances?.compactMap { original in
                    let replicationInstanceStatus = original.replicationInstanceStatus
                    return replicationInstanceStatus
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "incompatible-credentials") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationInstancesInput, result: Result<DescribeReplicationInstancesOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationInstances[].ReplicationInstanceStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "incompatible-network"
                guard case .success(let output) = result else { return false }
                let replicationInstances = output.replicationInstances
                let projection: [Swift.String]? = replicationInstances?.compactMap { original in
                    let replicationInstanceStatus = original.replicationInstanceStatus
                    return replicationInstanceStatus
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "incompatible-network") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationInstancesInput, result: Result<DescribeReplicationInstancesOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationInstances[].ReplicationInstanceStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "inaccessible-encryption-credentials"
                guard case .success(let output) = result else { return false }
                let replicationInstances = output.replicationInstances
                let projection: [Swift.String]? = replicationInstances?.compactMap { original in
                    let replicationInstanceStatus = original.replicationInstanceStatus
                    return replicationInstanceStatus
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "inaccessible-encryption-credentials") }) ?? false
            }),
        ]
        return try WaiterConfiguration<DescribeReplicationInstancesInput, DescribeReplicationInstancesOutputResponse>(acceptors: acceptors, minDelay: 60.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the ReplicationInstanceAvailable event on the describeReplicationInstances operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeReplicationInstancesInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilReplicationInstanceAvailable(options: WaiterOptions, input: DescribeReplicationInstancesInput) async throws -> WaiterOutcome<DescribeReplicationInstancesOutputResponse> {
        let waiter = Waiter(config: try Self.replicationInstanceAvailableWaiterConfig(), operation: self.describeReplicationInstances(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func replicationInstanceDeletedWaiterConfig() throws -> WaiterConfiguration<DescribeReplicationInstancesInput, DescribeReplicationInstancesOutputResponse> {
        let acceptors: [WaiterConfiguration<DescribeReplicationInstancesInput, DescribeReplicationInstancesOutputResponse>.Acceptor] = [
            .init(state: .failure, matcher: { (input: DescribeReplicationInstancesInput, result: Result<DescribeReplicationInstancesOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationInstances[].ReplicationInstanceStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "available"
                guard case .success(let output) = result else { return false }
                let replicationInstances = output.replicationInstances
                let projection: [Swift.String]? = replicationInstances?.compactMap { original in
                    let replicationInstanceStatus = original.replicationInstanceStatus
                    return replicationInstanceStatus
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "available") }) ?? false
            }),
            .init(state: .success, matcher: { (input: DescribeReplicationInstancesInput, result: Result<DescribeReplicationInstancesOutputResponse, Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? WaiterTypedError)?.waiterErrorType == "ResourceNotFoundFault"
            }),
        ]
        return try WaiterConfiguration<DescribeReplicationInstancesInput, DescribeReplicationInstancesOutputResponse>(acceptors: acceptors, minDelay: 15.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the ReplicationInstanceDeleted event on the describeReplicationInstances operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeReplicationInstancesInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilReplicationInstanceDeleted(options: WaiterOptions, input: DescribeReplicationInstancesInput) async throws -> WaiterOutcome<DescribeReplicationInstancesOutputResponse> {
        let waiter = Waiter(config: try Self.replicationInstanceDeletedWaiterConfig(), operation: self.describeReplicationInstances(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func replicationTaskDeletedWaiterConfig() throws -> WaiterConfiguration<DescribeReplicationTasksInput, DescribeReplicationTasksOutputResponse> {
        let acceptors: [WaiterConfiguration<DescribeReplicationTasksInput, DescribeReplicationTasksOutputResponse>.Acceptor] = [
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "ready"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "ready") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "creating"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "creating") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "stopped"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "stopped") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "running"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "running") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "failed"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "failed") }) ?? false
            }),
            .init(state: .success, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? WaiterTypedError)?.waiterErrorType == "ResourceNotFoundFault"
            }),
        ]
        return try WaiterConfiguration<DescribeReplicationTasksInput, DescribeReplicationTasksOutputResponse>(acceptors: acceptors, minDelay: 15.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the ReplicationTaskDeleted event on the describeReplicationTasks operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeReplicationTasksInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilReplicationTaskDeleted(options: WaiterOptions, input: DescribeReplicationTasksInput) async throws -> WaiterOutcome<DescribeReplicationTasksOutputResponse> {
        let waiter = Waiter(config: try Self.replicationTaskDeletedWaiterConfig(), operation: self.describeReplicationTasks(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func replicationTaskReadyWaiterConfig() throws -> WaiterConfiguration<DescribeReplicationTasksInput, DescribeReplicationTasksOutputResponse> {
        let acceptors: [WaiterConfiguration<DescribeReplicationTasksInput, DescribeReplicationTasksOutputResponse>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "ready"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { JMESUtils.compare($0, ==, "ready") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "starting"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "starting") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "running"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "running") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "stopping"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "stopping") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "stopped"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "stopped") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "failed"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "failed") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "modifying"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "modifying") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "testing"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "testing") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "deleting"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "deleting") }) ?? false
            }),
        ]
        return try WaiterConfiguration<DescribeReplicationTasksInput, DescribeReplicationTasksOutputResponse>(acceptors: acceptors, minDelay: 15.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the ReplicationTaskReady event on the describeReplicationTasks operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeReplicationTasksInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilReplicationTaskReady(options: WaiterOptions, input: DescribeReplicationTasksInput) async throws -> WaiterOutcome<DescribeReplicationTasksOutputResponse> {
        let waiter = Waiter(config: try Self.replicationTaskReadyWaiterConfig(), operation: self.describeReplicationTasks(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func replicationTaskRunningWaiterConfig() throws -> WaiterConfiguration<DescribeReplicationTasksInput, DescribeReplicationTasksOutputResponse> {
        let acceptors: [WaiterConfiguration<DescribeReplicationTasksInput, DescribeReplicationTasksOutputResponse>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "running"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { JMESUtils.compare($0, ==, "running") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "ready"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "ready") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "creating"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "creating") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "stopping"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "stopping") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "stopped"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "stopped") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "failed"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "failed") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "modifying"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "modifying") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "testing"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "testing") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "deleting"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "deleting") }) ?? false
            }),
        ]
        return try WaiterConfiguration<DescribeReplicationTasksInput, DescribeReplicationTasksOutputResponse>(acceptors: acceptors, minDelay: 15.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the ReplicationTaskRunning event on the describeReplicationTasks operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeReplicationTasksInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilReplicationTaskRunning(options: WaiterOptions, input: DescribeReplicationTasksInput) async throws -> WaiterOutcome<DescribeReplicationTasksOutputResponse> {
        let waiter = Waiter(config: try Self.replicationTaskRunningWaiterConfig(), operation: self.describeReplicationTasks(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func replicationTaskStoppedWaiterConfig() throws -> WaiterConfiguration<DescribeReplicationTasksInput, DescribeReplicationTasksOutputResponse> {
        let acceptors: [WaiterConfiguration<DescribeReplicationTasksInput, DescribeReplicationTasksOutputResponse>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "stopped"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { JMESUtils.compare($0, ==, "stopped") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "ready"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "ready") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "creating"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "creating") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "starting"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "starting") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "failed"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "failed") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "modifying"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "modifying") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "testing"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "testing") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeReplicationTasksInput, result: Result<DescribeReplicationTasksOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ReplicationTasks[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "deleting"
                guard case .success(let output) = result else { return false }
                let replicationTasks = output.replicationTasks
                let projection: [Swift.String]? = replicationTasks?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "deleting") }) ?? false
            }),
        ]
        return try WaiterConfiguration<DescribeReplicationTasksInput, DescribeReplicationTasksOutputResponse>(acceptors: acceptors, minDelay: 15.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the ReplicationTaskStopped event on the describeReplicationTasks operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeReplicationTasksInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilReplicationTaskStopped(options: WaiterOptions, input: DescribeReplicationTasksInput) async throws -> WaiterOutcome<DescribeReplicationTasksOutputResponse> {
        let waiter = Waiter(config: try Self.replicationTaskStoppedWaiterConfig(), operation: self.describeReplicationTasks(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
