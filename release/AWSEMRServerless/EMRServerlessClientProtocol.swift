// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

/// Amazon EMR Serverless is a new deployment option for Amazon EMR. EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks. The API reference to Amazon EMR Serverless is emr-serverless. The emr-serverless prefix is used in the following scenarios:
///
/// * It is the prefix in the CLI commands for Amazon EMR Serverless. For example, aws emr-serverless start-job-run.
///
/// * It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, "Action": ["emr-serverless:StartJobRun"]. For more information, see [Policy actions for Amazon EMR Serverless](https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions).
///
/// * It is the prefix used in Amazon EMR Serverless service endpoints. For example, emr-serverless.us-east-2.amazonaws.com.
public protocol EMRServerlessClientProtocol {
    /// Cancels a job run.
    func cancelJobRun(input: CancelJobRunInput) async throws -> CancelJobRunOutputResponse
    /// Creates an application.
    func createApplication(input: CreateApplicationInput) async throws -> CreateApplicationOutputResponse
    /// Deletes an application. An application has to be in a stopped or created state in order to be deleted.
    func deleteApplication(input: DeleteApplicationInput) async throws -> DeleteApplicationOutputResponse
    /// Displays detailed information about a specified application.
    func getApplication(input: GetApplicationInput) async throws -> GetApplicationOutputResponse
    /// Returns a URL to access the job run dashboard.
    func getDashboardForJobRun(input: GetDashboardForJobRunInput) async throws -> GetDashboardForJobRunOutputResponse
    /// Displays detailed information about a job run.
    func getJobRun(input: GetJobRunInput) async throws -> GetJobRunOutputResponse
    /// Lists applications based on a set of parameters.
    func listApplications(input: ListApplicationsInput) async throws -> ListApplicationsOutputResponse
    /// Lists job runs based on a set of parameters.
    func listJobRuns(input: ListJobRunsInput) async throws -> ListJobRunsOutputResponse
    /// Lists the tags assigned to the resources.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    /// Starts a specified application and initializes initial capacity if configured.
    func startApplication(input: StartApplicationInput) async throws -> StartApplicationOutputResponse
    /// Starts a job run.
    func startJobRun(input: StartJobRunInput) async throws -> StartJobRunOutputResponse
    /// Stops a specified application and releases initial capacity if configured. All scheduled and running jobs must be completed or cancelled before stopping an application.
    func stopApplication(input: StopApplicationInput) async throws -> StopApplicationOutputResponse
    /// Assigns tags to resources. A tag is a label that you assign to an AWS resource. Each tag consists of a key and an optional value, both of which you define. Tags enable you to categorize your AWS resources by attributes such as purpose, owner, or environment. When you have many resources of the same type, you can quickly identify a specific resource based on the tags you've assigned to it.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    /// Removes tags from resources.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    /// Updates a specified application. An application has to be in a stopped or created state in order to be updated.
    func updateApplication(input: UpdateApplicationInput) async throws -> UpdateApplicationOutputResponse
}

public protocol EMRServerlessClientConfigurationProtocol : AWSClientRuntime.AWSClientConfiguration {
    var endpointResolver: EndpointResolver { get }
}

public enum EMRServerlessClientTypes {}
