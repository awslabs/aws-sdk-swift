// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class EbsClient {
    let client: SdkHttpClient
    let config: EbsClientConfiguration
    let serviceName = "EBS"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: EbsClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class EbsClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> EbsClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try EbsClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension EbsClient: EbsClientProtocol {
    /// <p>Seals and completes the snapshot after all of the required blocks of data have been
    ///             written to it. Completing the snapshot changes the status to <code>completed</code>. You
    ///             cannot write new blocks to a snapshot after it has been completed.</p>
    public func completeSnapshot(input: CompleteSnapshotInput, completion: @escaping (SdkResult<CompleteSnapshotOutputResponse, CompleteSnapshotOutputError>) -> Void)
    {
        guard let snapshotId = input.snapshotId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component snapshotId unexpectedly nil"))))
            return
        }
        let urlPath = "/snapshots/completion/\(snapshotId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "completeSnapshot")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "ebs.\(config.region).amazonaws.com")
                      .withSigningName(value: "ebs")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CompleteSnapshotInput, CompleteSnapshotOutputResponse, CompleteSnapshotOutputError>(id: "completeSnapshot")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CompleteSnapshotInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CompleteSnapshotInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CompleteSnapshotInput, CompleteSnapshotOutputResponse, CompleteSnapshotOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the data in a block in an Amazon Elastic Block Store snapshot.</p>
    public func getSnapshotBlock(input: GetSnapshotBlockInput, streamSink: StreamSink, completion: @escaping (SdkResult<GetSnapshotBlockOutputResponse, GetSnapshotBlockOutputError>) -> Void)
    {
        guard let snapshotId = input.snapshotId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component snapshotId unexpectedly nil"))))
            return
        }
        guard let blockIndex = input.blockIndex else {
            completion(.failure(.client(ClientError.serializationFailed("uri component blockIndex unexpectedly nil"))))
            return
        }
        let urlPath = "/snapshots/\(snapshotId)/blocks/\(blockIndex)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getSnapshotBlock")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "ebs.\(config.region).amazonaws.com")
                      .withSigningName(value: "ebs")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetSnapshotBlockInput, GetSnapshotBlockOutputResponse, GetSnapshotBlockOutputError>(id: "getSnapshotBlock")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetSnapshotBlockInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetSnapshotBlockInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetSnapshotBlockInput, GetSnapshotBlockOutputResponse, GetSnapshotBlockOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns information about the blocks that are different between two
    ///             Amazon Elastic Block Store snapshots of the same volume/snapshot lineage.</p>
    public func listChangedBlocks(input: ListChangedBlocksInput, completion: @escaping (SdkResult<ListChangedBlocksOutputResponse, ListChangedBlocksOutputError>) -> Void)
    {
        guard let secondSnapshotId = input.secondSnapshotId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component secondSnapshotId unexpectedly nil"))))
            return
        }
        let urlPath = "/snapshots/\(secondSnapshotId)/changedblocks"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listChangedBlocks")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "ebs.\(config.region).amazonaws.com")
                      .withSigningName(value: "ebs")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListChangedBlocksInput, ListChangedBlocksOutputResponse, ListChangedBlocksOutputError>(id: "listChangedBlocks")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListChangedBlocksInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListChangedBlocksInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListChangedBlocksInput, ListChangedBlocksOutputResponse, ListChangedBlocksOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns information about the blocks in an Amazon Elastic Block Store snapshot.</p>
    public func listSnapshotBlocks(input: ListSnapshotBlocksInput, completion: @escaping (SdkResult<ListSnapshotBlocksOutputResponse, ListSnapshotBlocksOutputError>) -> Void)
    {
        guard let snapshotId = input.snapshotId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component snapshotId unexpectedly nil"))))
            return
        }
        let urlPath = "/snapshots/\(snapshotId)/blocks"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listSnapshotBlocks")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "ebs.\(config.region).amazonaws.com")
                      .withSigningName(value: "ebs")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListSnapshotBlocksInput, ListSnapshotBlocksOutputResponse, ListSnapshotBlocksOutputError>(id: "listSnapshotBlocks")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListSnapshotBlocksInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListSnapshotBlocksInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListSnapshotBlocksInput, ListSnapshotBlocksOutputResponse, ListSnapshotBlocksOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Writes a block of data to a snapshot. If the specified block contains
    ///             data, the existing data is overwritten. The target snapshot must be in the
    ///                 <code>pending</code> state.</p>  	
    ///     	    <p>Data written to a snapshot must be aligned with 512-byte sectors.</p>
    public func putSnapshotBlock(input: PutSnapshotBlockInput, streamSource: StreamSource, completion: @escaping (SdkResult<PutSnapshotBlockOutputResponse, PutSnapshotBlockOutputError>) -> Void)
    {
        guard let snapshotId = input.snapshotId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component snapshotId unexpectedly nil"))))
            return
        }
        guard let blockIndex = input.blockIndex else {
            completion(.failure(.client(ClientError.serializationFailed("uri component blockIndex unexpectedly nil"))))
            return
        }
        let urlPath = "/snapshots/\(snapshotId)/blocks/\(blockIndex)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putSnapshotBlock")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "ebs.\(config.region).amazonaws.com")
                      .withSigningName(value: "ebs")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutSnapshotBlockInput, PutSnapshotBlockOutputResponse, PutSnapshotBlockOutputError>(id: "putSnapshotBlock")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutSnapshotBlockInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutSnapshotBlockInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutSnapshotBlockInput, PutSnapshotBlockOutputResponse, PutSnapshotBlockOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutSnapshotBlockInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: true)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a new Amazon EBS snapshot. The new snapshot enters the <code>pending</code> state
    ///             after the request completes. </p>
    ///         <p>After creating the snapshot, use <a href="https://docs.aws.amazon.com/ebs/latest/APIReference/API_PutSnapshotBlock.html"> PutSnapshotBlock</a> to
    ///             write blocks of data to the snapshot.</p>
    public func startSnapshot(input: StartSnapshotInput, completion: @escaping (SdkResult<StartSnapshotOutputResponse, StartSnapshotOutputError>) -> Void)
    {
        let urlPath = "/snapshots"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "startSnapshot")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "ebs.\(config.region).amazonaws.com")
                      .withSigningName(value: "ebs")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<StartSnapshotInput, StartSnapshotOutputResponse, StartSnapshotOutputError>(id: "startSnapshot")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<StartSnapshotOutputResponse>, SdkError<StartSnapshotOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: StartSnapshotInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: StartSnapshotInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<StartSnapshotInput, StartSnapshotOutputResponse, StartSnapshotOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: StartSnapshotInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
