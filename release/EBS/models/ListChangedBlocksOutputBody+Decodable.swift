// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListChangedBlocksOutputBody: Equatable {
    public let changedBlocks: [ChangedBlock]?
    public let expiryTime: Date?
    public let volumeSize: Int?
    public let blockSize: Int?
    public let nextToken: String?
}

extension ListChangedBlocksOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case blockSize = "BlockSize"
        case changedBlocks = "ChangedBlocks"
        case expiryTime = "ExpiryTime"
        case nextToken = "NextToken"
        case volumeSize = "VolumeSize"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changedBlocksContainer = try containerValues.decodeIfPresent([ChangedBlock].self, forKey: .changedBlocks)
        var changedBlocksDecoded0:[ChangedBlock]? = nil
        if let changedBlocksContainer = changedBlocksContainer {
            changedBlocksDecoded0 = [ChangedBlock]()
            for structure0 in changedBlocksContainer {
                changedBlocksDecoded0?.append(structure0)
            }
        }
        changedBlocks = changedBlocksDecoded0
        let expiryTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expiryTime)
        expiryTime = expiryTimeDecoded
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let blockSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .blockSize)
        blockSize = blockSizeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
