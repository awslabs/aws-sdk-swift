// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutSnapshotBlockInput: Equatable {
    /// <p>The data to write to the block.</p>
    ///         <p>The block data is not signed as part of the Signature Version 4 signing process. As a
    ///             result, you must generate and provide a Base64-encoded SHA256 checksum for the block
    ///             data using the <b>x-amz-Checksum</b> header. Also, you
    ///         	must specify the checksum algorithm using the <b>x-amz-Checksum-Algorithm</b>
    ///         	header. The checksum that you provide is part of the Signature Version 4 signing process.
    ///         	It is validated against a checksum generated by Amazon EBS to ensure the validity and authenticity
    ///         	of the data. If the checksums do not correspond, the request fails. For more information,
    ///         	see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html#ebsapis-using-checksums">
    ///                 Using checksums with the EBS direct APIs</a> in the <i>Amazon Elastic Compute Cloud User
    ///                 Guide</i>.</p>
    public let blockData: Data?
    /// <p>The block index of the block in which to write the data. A block index is a logical
    ///     	index in units of <code>512</code> KiB blocks. To identify the block index, divide
    ///         	the logical offset of the data in the logical volume by the block size (logical offset of
    ///         	data/<code>524288</code>). The logical offset of the data must be <code>512</code>
    ///         	KiB aligned.</p>
    public let blockIndex: Int?
    /// <p>A Base64-encoded SHA256 checksum of the data. Only SHA256 checksums are
    ///             supported.</p>
    public let checksum: String?
    /// <p>The algorithm used to generate the checksum. Currently, the only supported algorithm
    ///             is <code>SHA256</code>.</p>
    public let checksumAlgorithm: ChecksumAlgorithm?
    /// <p>The size of the data to write to the block, in bytes. Currently, the only supported
    ///             size is <code>524288</code>.</p>
    ///         <p>Valid values: <code>524288</code>
    ///          </p>
    public let dataLength: Int?
    /// <p>The progress of the write process, as a percentage.</p>
    public let progress: Int?
    /// <p>The ID of the snapshot.</p>
    public let snapshotId: String?

    public init (
        blockData: Data? = nil,
        blockIndex: Int? = nil,
        checksum: String? = nil,
        checksumAlgorithm: ChecksumAlgorithm? = nil,
        dataLength: Int? = nil,
        progress: Int? = nil,
        snapshotId: String? = nil
    )
    {
        self.blockData = blockData
        self.blockIndex = blockIndex
        self.checksum = checksum
        self.checksumAlgorithm = checksumAlgorithm
        self.dataLength = dataLength
        self.progress = progress
        self.snapshotId = snapshotId
    }
}
