// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSnapshotBlocksOutputBody: Equatable {
    public let blocks: [Block]?
    public let expiryTime: Date?
    public let volumeSize: Int?
    public let blockSize: Int?
    public let nextToken: String?
}

extension ListSnapshotBlocksOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case blockSize = "BlockSize"
        case blocks = "Blocks"
        case expiryTime = "ExpiryTime"
        case nextToken = "NextToken"
        case volumeSize = "VolumeSize"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blocksContainer = try containerValues.decodeIfPresent([Block].self, forKey: .blocks)
        var blocksDecoded0:[Block]? = nil
        if let blocksContainer = blocksContainer {
            blocksDecoded0 = [Block]()
            for structure0 in blocksContainer {
                blocksDecoded0?.append(structure0)
            }
        }
        blocks = blocksDecoded0
        let expiryTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expiryTime)
        expiryTime = expiryTimeDecoded
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let blockSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .blockSize)
        blockSize = blockSizeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
