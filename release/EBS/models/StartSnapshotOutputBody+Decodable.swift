// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartSnapshotOutputBody: Equatable {
    public let description: String?
    public let snapshotId: String?
    public let ownerId: String?
    public let status: Status?
    public let startTime: Date?
    public let volumeSize: Int?
    public let blockSize: Int?
    public let tags: [Tag]?
    public let parentSnapshotId: String?
    public let kmsKeyArn: String?
}

extension StartSnapshotOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case blockSize = "BlockSize"
        case description = "Description"
        case kmsKeyArn = "KmsKeyArn"
        case ownerId = "OwnerId"
        case parentSnapshotId = "ParentSnapshotId"
        case snapshotId = "SnapshotId"
        case startTime = "StartTime"
        case status = "Status"
        case tags = "Tags"
        case volumeSize = "VolumeSize"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Status.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let blockSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .blockSize)
        blockSize = blockSizeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let parentSnapshotIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentSnapshotId)
        parentSnapshotId = parentSnapshotIdDecoded
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
    }
}
