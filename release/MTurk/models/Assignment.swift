// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p> The Assignment data structure represents a single assignment
///             of a HIT to a Worker. The assignment tracks the Worker's efforts to
///             complete the HIT, and contains the results for later retrieval.
///         </p>
public struct Assignment: Equatable {
    /// <p> The date and time the Worker accepted the assignment.</p>
    public let acceptTime: Date?
    /// <p> The Worker's answers submitted for the HIT contained in a
    ///             QuestionFormAnswers document, if the Worker provides an answer. If
    ///             the Worker does not provide any answers, Answer may contain a
    ///             QuestionFormAnswers document, or Answer may be empty.</p>
    public let answer: String?
    /// <p> If the Worker has submitted results and the Requester has
    ///             approved the results, ApprovalTime is the date and time the Requester
    ///             approved the results. This value is omitted from the assignment if
    ///             the Requester has not yet approved the results.</p>
    public let approvalTime: Date?
    /// <p> A unique identifier for the assignment.</p>
    public let assignmentId: String?
    /// <p> The status of the assignment.</p>
    public let assignmentStatus: AssignmentStatus?
    /// <p> If results have been submitted, AutoApprovalTime is the date
    ///             and time the results of the assignment results are considered
    ///             Approved automatically if they have not already been explicitly
    ///             approved or rejected by the Requester. This value is derived from the
    ///             auto-approval delay specified by the Requester in the HIT. This value
    ///             is omitted from the assignment if the Worker has not yet submitted
    ///             results.</p>
    public let autoApprovalTime: Date?
    /// <p> The date and time of the deadline for the assignment. This
    ///             value is derived from the deadline specification for the HIT and the
    ///             date and time the Worker accepted the HIT.</p>
    public let deadline: Date?
    /// <p> The ID of the HIT.</p>
    public let hITId: String?
    /// <p> If the Worker has submitted results and the Requester has
    ///             rejected the results, RejectionTime is the date and time the
    ///             Requester rejected the results.</p>
    public let rejectionTime: Date?
    /// <p> The feedback string included with the call to the
    ///             ApproveAssignment operation or the RejectAssignment operation, if the
    ///             Requester approved or rejected the assignment and specified feedback.</p>
    public let requesterFeedback: String?
    /// <p> If the Worker has submitted results, SubmitTime is the date
    ///             and time the assignment was submitted. This value is omitted from the
    ///             assignment if the Worker has not yet submitted results.</p>
    public let submitTime: Date?
    /// <p> The ID of the Worker who accepted the HIT.</p>
    public let workerId: String?

    public init (
        acceptTime: Date? = nil,
        answer: String? = nil,
        approvalTime: Date? = nil,
        assignmentId: String? = nil,
        assignmentStatus: AssignmentStatus? = nil,
        autoApprovalTime: Date? = nil,
        deadline: Date? = nil,
        hITId: String? = nil,
        rejectionTime: Date? = nil,
        requesterFeedback: String? = nil,
        submitTime: Date? = nil,
        workerId: String? = nil
    )
    {
        self.acceptTime = acceptTime
        self.answer = answer
        self.approvalTime = approvalTime
        self.assignmentId = assignmentId
        self.assignmentStatus = assignmentStatus
        self.autoApprovalTime = autoApprovalTime
        self.deadline = deadline
        self.hITId = hITId
        self.rejectionTime = rejectionTime
        self.requesterFeedback = requesterFeedback
        self.submitTime = submitTime
        self.workerId = workerId
    }
}
