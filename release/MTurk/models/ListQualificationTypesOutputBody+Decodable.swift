// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListQualificationTypesOutputBody: Equatable {
    public let numResults: Int?
    public let nextToken: String?
    public let qualificationTypes: [QualificationType]?
}

extension ListQualificationTypesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case numResults = "NumResults"
        case qualificationTypes = "QualificationTypes"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let qualificationTypesContainer = try containerValues.decodeIfPresent([QualificationType].self, forKey: .qualificationTypes)
        var qualificationTypesDecoded0:[QualificationType]? = nil
        if let qualificationTypesContainer = qualificationTypesContainer {
            qualificationTypesDecoded0 = [QualificationType]()
            for structure0 in qualificationTypesContainer {
                qualificationTypesDecoded0?.append(structure0)
            }
        }
        qualificationTypes = qualificationTypesDecoded0
    }
}
