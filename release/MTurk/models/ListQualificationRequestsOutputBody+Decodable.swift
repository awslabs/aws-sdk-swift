// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListQualificationRequestsOutputBody: Equatable {
    public let numResults: Int?
    public let nextToken: String?
    public let qualificationRequests: [QualificationRequest]?
}

extension ListQualificationRequestsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case numResults = "NumResults"
        case qualificationRequests = "QualificationRequests"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let qualificationRequestsContainer = try containerValues.decodeIfPresent([QualificationRequest].self, forKey: .qualificationRequests)
        var qualificationRequestsDecoded0:[QualificationRequest]? = nil
        if let qualificationRequestsContainer = qualificationRequestsContainer {
            qualificationRequestsDecoded0 = [QualificationRequest]()
            for structure0 in qualificationRequestsContainer {
                qualificationRequestsDecoded0?.append(structure0)
            }
        }
        qualificationRequests = qualificationRequestsDecoded0
    }
}
