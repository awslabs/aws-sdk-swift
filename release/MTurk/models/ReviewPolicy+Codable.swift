// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReviewPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case parameters = "Parameters"
        case policyName = "PolicyName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for policyparameterlist0 in parameters {
                try parametersContainer.encode(policyparameterlist0)
            }
        }
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let parametersContainer = try containerValues.decodeIfPresent([PolicyParameter].self, forKey: .parameters)
        var parametersDecoded0:[PolicyParameter]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [PolicyParameter]()
            for structure0 in parametersContainer {
                parametersDecoded0?.append(structure0)
            }
        }
        parameters = parametersDecoded0
    }
}
