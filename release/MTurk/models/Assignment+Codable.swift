// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Assignment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceptTime = "AcceptTime"
        case answer = "Answer"
        case approvalTime = "ApprovalTime"
        case assignmentId = "AssignmentId"
        case assignmentStatus = "AssignmentStatus"
        case autoApprovalTime = "AutoApprovalTime"
        case deadline = "Deadline"
        case hITId = "HITId"
        case rejectionTime = "RejectionTime"
        case requesterFeedback = "RequesterFeedback"
        case submitTime = "SubmitTime"
        case workerId = "WorkerId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptTime = acceptTime {
            try encodeContainer.encode(acceptTime.timeIntervalSince1970, forKey: .acceptTime)
        }
        if let answer = answer {
            try encodeContainer.encode(answer, forKey: .answer)
        }
        if let approvalTime = approvalTime {
            try encodeContainer.encode(approvalTime.timeIntervalSince1970, forKey: .approvalTime)
        }
        if let assignmentId = assignmentId {
            try encodeContainer.encode(assignmentId, forKey: .assignmentId)
        }
        if let assignmentStatus = assignmentStatus {
            try encodeContainer.encode(assignmentStatus.rawValue, forKey: .assignmentStatus)
        }
        if let autoApprovalTime = autoApprovalTime {
            try encodeContainer.encode(autoApprovalTime.timeIntervalSince1970, forKey: .autoApprovalTime)
        }
        if let deadline = deadline {
            try encodeContainer.encode(deadline.timeIntervalSince1970, forKey: .deadline)
        }
        if let hITId = hITId {
            try encodeContainer.encode(hITId, forKey: .hITId)
        }
        if let rejectionTime = rejectionTime {
            try encodeContainer.encode(rejectionTime.timeIntervalSince1970, forKey: .rejectionTime)
        }
        if let requesterFeedback = requesterFeedback {
            try encodeContainer.encode(requesterFeedback, forKey: .requesterFeedback)
        }
        if let submitTime = submitTime {
            try encodeContainer.encode(submitTime.timeIntervalSince1970, forKey: .submitTime)
        }
        if let workerId = workerId {
            try encodeContainer.encode(workerId, forKey: .workerId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assignmentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assignmentId)
        assignmentId = assignmentIdDecoded
        let workerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workerId)
        workerId = workerIdDecoded
        let hITIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hITId)
        hITId = hITIdDecoded
        let assignmentStatusDecoded = try containerValues.decodeIfPresent(AssignmentStatus.self, forKey: .assignmentStatus)
        assignmentStatus = assignmentStatusDecoded
        let autoApprovalTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .autoApprovalTime)
        autoApprovalTime = autoApprovalTimeDecoded
        let acceptTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .acceptTime)
        acceptTime = acceptTimeDecoded
        let submitTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let approvalTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .approvalTime)
        approvalTime = approvalTimeDecoded
        let rejectionTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .rejectionTime)
        rejectionTime = rejectionTimeDecoded
        let deadlineDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .deadline)
        deadline = deadlineDecoded
        let answerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .answer)
        answer = answerDecoded
        let requesterFeedbackDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requesterFeedback)
        requesterFeedback = requesterFeedbackDecoded
    }
}
