// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListReviewPolicyResultsForHITInputBody: Equatable {
    public let hITId: String?
    public let policyLevels: [ReviewPolicyLevel]?
    public let retrieveActions: Bool?
    public let retrieveResults: Bool?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListReviewPolicyResultsForHITInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case hITId = "HITId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case policyLevels = "PolicyLevels"
        case retrieveActions = "RetrieveActions"
        case retrieveResults = "RetrieveResults"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hITIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hITId)
        hITId = hITIdDecoded
        let policyLevelsContainer = try containerValues.decodeIfPresent([ReviewPolicyLevel].self, forKey: .policyLevels)
        var policyLevelsDecoded0:[ReviewPolicyLevel]? = nil
        if let policyLevelsContainer = policyLevelsContainer {
            policyLevelsDecoded0 = [ReviewPolicyLevel]()
            for string0 in policyLevelsContainer {
                policyLevelsDecoded0?.append(string0)
            }
        }
        policyLevels = policyLevelsDecoded0
        let retrieveActionsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .retrieveActions)
        retrieveActions = retrieveActionsDecoded
        let retrieveResultsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .retrieveResults)
        retrieveResults = retrieveResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
