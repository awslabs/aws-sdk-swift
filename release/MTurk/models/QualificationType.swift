// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p> The QualificationType data structure represents a
///             Qualification type, a description of a property of a Worker that must
///             match the requirements of a HIT for the Worker to be able to accept
///             the HIT. The type also describes how a Worker can obtain a
///             Qualification of that type, such as through a Qualification test.
///         </p>
public struct QualificationType: Equatable {
    /// <p>The answers to the Qualification test specified in the Test
    ///             parameter.</p>
    public let answerKey: String?
    /// <p>Specifies that requests for the Qualification type are
    ///             granted immediately, without prompting the Worker with a
    ///             Qualification test. Valid values are True | False.</p>
    public let autoGranted: Bool?
    /// <p> The Qualification integer value to use for automatically
    ///             granted Qualifications, if AutoGranted is true. This is 1 by default.
    ///         </p>
    public let autoGrantedValue: Int?
    /// <p> The date and time the Qualification type was created.
    ///         </p>
    public let creationTime: Date?
    /// <p> A long description for the Qualification type.
    ///         </p>
    public let description: String?
    /// <p> Specifies whether the Qualification type is one that a user
    ///             can request through the Amazon Mechanical Turk web site, such as by
    ///             taking a Qualification test. This value is False for Qualifications
    ///             assigned automatically by the system. Valid values are True | False.
    ///         </p>
    public let isRequestable: Bool?
    /// <p> One or more words or phrases that describe theQualification
    ///             type, separated by commas. The Keywords make the type easier to find
    ///             using a search.
    ///         </p>
    public let keywords: String?
    /// <p> The name of the Qualification type. The type name is used to
    ///             identify the type, and to find the type using a Qualification type
    ///             search.
    ///         </p>
    public let name: String?
    /// <p> A unique identifier for the Qualification type. A
    ///             Qualification type is given a Qualification type ID when you call the
    ///             CreateQualificationType operation.
    ///         </p>
    public let qualificationTypeId: String?
    /// <p> The status of the Qualification type. A Qualification type's
    ///             status determines if users can apply to receive a Qualification of
    ///             this type, and if HITs can be created with requirements based on this
    ///             type. Valid values are Active | Inactive.
    ///         </p>
    public let qualificationTypeStatus: QualificationTypeStatus?
    /// <p> The amount of time, in seconds, Workers must wait after
    ///             taking the Qualification test before they can take it again. Workers
    ///             can take a Qualification test multiple times if they were not granted
    ///             the Qualification from a previous attempt, or if the test offers a
    ///             gradient score and they want a better score. If not specified,
    ///             retries are disabled and Workers can request a Qualification only
    ///             once.
    ///         </p>
    public let retryDelayInSeconds: Int?
    /// <p> The questions for a Qualification test associated with this
    ///             Qualification type that a user can take to obtain a Qualification of
    ///             this type. This parameter must be specified if AnswerKey is present.
    ///             A Qualification type cannot have both a specified Test parameter and
    ///             an AutoGranted value of true.
    ///         </p>
    public let test: String?
    /// <p> The amount of time, in seconds, given to a Worker to
    ///             complete the Qualification test, beginning from the time the Worker
    ///             requests the Qualification.
    ///         </p>
    public let testDurationInSeconds: Int?

    public init (
        answerKey: String? = nil,
        autoGranted: Bool? = nil,
        autoGrantedValue: Int? = nil,
        creationTime: Date? = nil,
        description: String? = nil,
        isRequestable: Bool? = nil,
        keywords: String? = nil,
        name: String? = nil,
        qualificationTypeId: String? = nil,
        qualificationTypeStatus: QualificationTypeStatus? = nil,
        retryDelayInSeconds: Int? = nil,
        test: String? = nil,
        testDurationInSeconds: Int? = nil
    )
    {
        self.answerKey = answerKey
        self.autoGranted = autoGranted
        self.autoGrantedValue = autoGrantedValue
        self.creationTime = creationTime
        self.description = description
        self.isRequestable = isRequestable
        self.keywords = keywords
        self.name = name
        self.qualificationTypeId = qualificationTypeId
        self.qualificationTypeStatus = qualificationTypeStatus
        self.retryDelayInSeconds = retryDelayInSeconds
        self.test = test
        self.testDurationInSeconds = testDurationInSeconds
    }
}
