// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The NotificationSpecification data structure describes a HIT
///             event notification for a HIT type.</p>
public struct NotificationSpecification: Equatable {
    /// <p>
    ///             The target for notification messages. The Destinationâ€™s format is determined by the specified Transport:
    ///         </p>
    ///         <ul>
    ///             <li>
    ///                 <p>When Transport is Email, the Destination is your email address.</p>
    ///             </li>
    ///             <li>
    ///                 <p>When Transport is SQS, the Destination is your queue URL.</p>
    ///             </li>
    ///             <li>
    ///                 <p>When Transport is SNS, the Destination is the ARN of your topic.</p>
    ///             </li>
    ///          </ul>
    public let destination: String?
    /// <p> The list of events that should cause notifications to be
    ///             sent. Valid Values: AssignmentAccepted | AssignmentAbandoned |
    ///             AssignmentReturned | AssignmentSubmitted | AssignmentRejected |
    ///             AssignmentApproved | HITCreated | HITExtended | HITDisposed |
    ///             HITReviewable | HITExpired | Ping. The Ping event is only valid for
    ///             the SendTestEventNotification operation.
    ///         </p>
    public let eventTypes: [EventType]?
    /// <p> The method Amazon Mechanical Turk uses to send the
    ///             notification. Valid Values: Email | SQS | SNS.
    ///         </p>
    public let transport: NotificationTransport?
    /// <p>The version of the Notification API to use. Valid value is
    ///             2006-05-05.</p>
    public let version: String?

    public init (
        destination: String? = nil,
        eventTypes: [EventType]? = nil,
        transport: NotificationTransport? = nil,
        version: String? = nil
    )
    {
        self.destination = destination
        self.eventTypes = eventTypes
        self.transport = transport
        self.version = version
    }
}
