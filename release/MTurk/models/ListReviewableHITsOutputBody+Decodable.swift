// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListReviewableHITsOutputBody: Equatable {
    public let nextToken: String?
    public let numResults: Int?
    public let hITs: [HIT]?
}

extension ListReviewableHITsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case hITs = "HITs"
        case nextToken = "NextToken"
        case numResults = "NumResults"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let numResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let hITsContainer = try containerValues.decodeIfPresent([HIT].self, forKey: .hITs)
        var hITsDecoded0:[HIT]? = nil
        if let hITsContainer = hITsContainer {
            hITsDecoded0 = [HIT]()
            for structure0 in hITsContainer {
                hITsDecoded0?.append(structure0)
            }
        }
        hITs = hITsDecoded0
    }
}
