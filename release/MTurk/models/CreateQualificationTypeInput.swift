// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateQualificationTypeInput: Equatable {
    /// <p>The answers to the Qualification test specified in the Test
    ///             parameter, in the form of an AnswerKey data structure.</p>
    ///         <p>Constraints: Must not be longer than 65535 bytes.</p>
    ///         <p>Constraints: None. If not specified, you must process
    ///             Qualification requests manually.</p>
    public let answerKey: String?
    /// <p>Specifies whether requests for the Qualification type are
    ///             granted immediately, without prompting the Worker with a
    ///             Qualification test.</p>
    ///         <p>Constraints: If the Test parameter is specified, this
    ///             parameter cannot be true.</p>
    public let autoGranted: Bool?
    /// <p>The Qualification value to use for automatically granted
    ///             Qualifications. This parameter is used only if the AutoGranted
    ///             parameter is true.</p>
    public let autoGrantedValue: Int?
    /// <p>A long description for the Qualification type. On the Amazon
    ///             Mechanical Turk website, the long description is displayed when a
    ///             Worker examines a Qualification type.</p>
    public let description: String?
    /// <p>One or more words or phrases that describe the Qualification
    ///             type, separated by commas. The keywords of a type make the type
    ///             easier to find during a search.</p>
    public let keywords: String?
    /// <p> The name you give to the Qualification type. The type name
    ///             is used to represent the Qualification to Workers, and to find the
    ///             type using a Qualification type search. It must be unique across all
    ///             of your Qualification types.</p>
    public let name: String?
    /// <p>The initial status of the Qualification type.</p>
    ///         <p>Constraints: Valid values are: Active | Inactive</p>
    public let qualificationTypeStatus: QualificationTypeStatus?
    /// <p>The number of seconds that a Worker must wait after
    ///             requesting a Qualification of the Qualification type before the
    ///             worker can retry the Qualification request.</p>
    ///         <p>Constraints: None. If not specified, retries are disabled and
    ///             Workers can request a Qualification of this type only once, even if
    ///             the Worker has not been granted the Qualification. It is not possible
    ///             to disable retries for a Qualification type after it has been created
    ///             with retries enabled. If you want to disable retries, you must delete
    ///             existing retry-enabled Qualification type and then create a new
    ///             Qualification type with retries disabled.</p>
    public let retryDelayInSeconds: Int?
    /// <p>
    ///             The questions for the Qualification test a Worker must answer
    ///             correctly to obtain a Qualification of this type. If this parameter
    ///             is specified,
    ///             <code>TestDurationInSeconds</code>
    ///             must also be specified.
    ///         </p>
    ///         <p>Constraints: Must not be longer than 65535 bytes. Must be a
    ///             QuestionForm data structure. This parameter cannot be specified if
    ///             AutoGranted is true.</p>
    ///         <p>Constraints: None. If not specified, the Worker may request
    ///             the Qualification without answering any questions.</p>
    public let test: String?
    /// <p>The number of seconds the Worker has to complete the
    ///             Qualification test, starting from the time the Worker requests the
    ///             Qualification.</p>
    public let testDurationInSeconds: Int?

    public init (
        answerKey: String? = nil,
        autoGranted: Bool? = nil,
        autoGrantedValue: Int? = nil,
        description: String? = nil,
        keywords: String? = nil,
        name: String? = nil,
        qualificationTypeStatus: QualificationTypeStatus? = nil,
        retryDelayInSeconds: Int? = nil,
        test: String? = nil,
        testDurationInSeconds: Int? = nil
    )
    {
        self.answerKey = answerKey
        self.autoGranted = autoGranted
        self.autoGrantedValue = autoGrantedValue
        self.description = description
        self.keywords = keywords
        self.name = name
        self.qualificationTypeStatus = qualificationTypeStatus
        self.retryDelayInSeconds = retryDelayInSeconds
        self.test = test
        self.testDurationInSeconds = testDurationInSeconds
    }
}
