// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateHITInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
        case assignmentReviewPolicy = "AssignmentReviewPolicy"
        case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
        case description = "Description"
        case hITLayoutId = "HITLayoutId"
        case hITLayoutParameters = "HITLayoutParameters"
        case hITReviewPolicy = "HITReviewPolicy"
        case keywords = "Keywords"
        case lifetimeInSeconds = "LifetimeInSeconds"
        case maxAssignments = "MaxAssignments"
        case qualificationRequirements = "QualificationRequirements"
        case question = "Question"
        case requesterAnnotation = "RequesterAnnotation"
        case reward = "Reward"
        case title = "Title"
        case uniqueRequestToken = "UniqueRequestToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentDurationInSeconds = assignmentDurationInSeconds {
            try encodeContainer.encode(assignmentDurationInSeconds, forKey: .assignmentDurationInSeconds)
        }
        if let assignmentReviewPolicy = assignmentReviewPolicy {
            try encodeContainer.encode(assignmentReviewPolicy, forKey: .assignmentReviewPolicy)
        }
        if let autoApprovalDelayInSeconds = autoApprovalDelayInSeconds {
            try encodeContainer.encode(autoApprovalDelayInSeconds, forKey: .autoApprovalDelayInSeconds)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let hITLayoutId = hITLayoutId {
            try encodeContainer.encode(hITLayoutId, forKey: .hITLayoutId)
        }
        if let hITLayoutParameters = hITLayoutParameters {
            var hITLayoutParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hITLayoutParameters)
            for hitlayoutparameterlist0 in hITLayoutParameters {
                try hITLayoutParametersContainer.encode(hitlayoutparameterlist0)
            }
        }
        if let hITReviewPolicy = hITReviewPolicy {
            try encodeContainer.encode(hITReviewPolicy, forKey: .hITReviewPolicy)
        }
        if let keywords = keywords {
            try encodeContainer.encode(keywords, forKey: .keywords)
        }
        if let lifetimeInSeconds = lifetimeInSeconds {
            try encodeContainer.encode(lifetimeInSeconds, forKey: .lifetimeInSeconds)
        }
        if let maxAssignments = maxAssignments {
            try encodeContainer.encode(maxAssignments, forKey: .maxAssignments)
        }
        if let qualificationRequirements = qualificationRequirements {
            var qualificationRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .qualificationRequirements)
            for qualificationrequirementlist0 in qualificationRequirements {
                try qualificationRequirementsContainer.encode(qualificationrequirementlist0)
            }
        }
        if let question = question {
            try encodeContainer.encode(question, forKey: .question)
        }
        if let requesterAnnotation = requesterAnnotation {
            try encodeContainer.encode(requesterAnnotation, forKey: .requesterAnnotation)
        }
        if let reward = reward {
            try encodeContainer.encode(reward, forKey: .reward)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let uniqueRequestToken = uniqueRequestToken {
            try encodeContainer.encode(uniqueRequestToken, forKey: .uniqueRequestToken)
        }
    }
}
