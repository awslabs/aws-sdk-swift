// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QualificationRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case answer = "Answer"
        case qualificationRequestId = "QualificationRequestId"
        case qualificationTypeId = "QualificationTypeId"
        case submitTime = "SubmitTime"
        case test = "Test"
        case workerId = "WorkerId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let answer = answer {
            try encodeContainer.encode(answer, forKey: .answer)
        }
        if let qualificationRequestId = qualificationRequestId {
            try encodeContainer.encode(qualificationRequestId, forKey: .qualificationRequestId)
        }
        if let qualificationTypeId = qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
        if let submitTime = submitTime {
            try encodeContainer.encode(submitTime.timeIntervalSince1970, forKey: .submitTime)
        }
        if let test = test {
            try encodeContainer.encode(test, forKey: .test)
        }
        if let workerId = workerId {
            try encodeContainer.encode(workerId, forKey: .workerId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationRequestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .qualificationRequestId)
        qualificationRequestId = qualificationRequestIdDecoded
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
        let workerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workerId)
        workerId = workerIdDecoded
        let testDecoded = try containerValues.decodeIfPresent(String.self, forKey: .test)
        test = testDecoded
        let answerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .answer)
        answer = answerDecoded
        let submitTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .submitTime)
        submitTime = submitTimeDecoded
    }
}
