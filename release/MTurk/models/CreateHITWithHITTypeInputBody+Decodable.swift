// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateHITWithHITTypeInputBody: Equatable {
    public let hITTypeId: String?
    public let maxAssignments: Int?
    public let lifetimeInSeconds: Int?
    public let question: String?
    public let requesterAnnotation: String?
    public let uniqueRequestToken: String?
    public let assignmentReviewPolicy: ReviewPolicy?
    public let hITReviewPolicy: ReviewPolicy?
    public let hITLayoutId: String?
    public let hITLayoutParameters: [HITLayoutParameter]?
}

extension CreateHITWithHITTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case assignmentReviewPolicy = "AssignmentReviewPolicy"
        case hITLayoutId = "HITLayoutId"
        case hITLayoutParameters = "HITLayoutParameters"
        case hITReviewPolicy = "HITReviewPolicy"
        case hITTypeId = "HITTypeId"
        case lifetimeInSeconds = "LifetimeInSeconds"
        case maxAssignments = "MaxAssignments"
        case question = "Question"
        case requesterAnnotation = "RequesterAnnotation"
        case uniqueRequestToken = "UniqueRequestToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hITTypeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hITTypeId)
        hITTypeId = hITTypeIdDecoded
        let maxAssignmentsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxAssignments)
        maxAssignments = maxAssignmentsDecoded
        let lifetimeInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .lifetimeInSeconds)
        lifetimeInSeconds = lifetimeInSecondsDecoded
        let questionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .question)
        question = questionDecoded
        let requesterAnnotationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requesterAnnotation)
        requesterAnnotation = requesterAnnotationDecoded
        let uniqueRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uniqueRequestToken)
        uniqueRequestToken = uniqueRequestTokenDecoded
        let assignmentReviewPolicyDecoded = try containerValues.decodeIfPresent(ReviewPolicy.self, forKey: .assignmentReviewPolicy)
        assignmentReviewPolicy = assignmentReviewPolicyDecoded
        let hITReviewPolicyDecoded = try containerValues.decodeIfPresent(ReviewPolicy.self, forKey: .hITReviewPolicy)
        hITReviewPolicy = hITReviewPolicyDecoded
        let hITLayoutIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hITLayoutId)
        hITLayoutId = hITLayoutIdDecoded
        let hITLayoutParametersContainer = try containerValues.decodeIfPresent([HITLayoutParameter].self, forKey: .hITLayoutParameters)
        var hITLayoutParametersDecoded0:[HITLayoutParameter]? = nil
        if let hITLayoutParametersContainer = hITLayoutParametersContainer {
            hITLayoutParametersDecoded0 = [HITLayoutParameter]()
            for structure0 in hITLayoutParametersContainer {
                hITLayoutParametersDecoded0?.append(structure0)
            }
        }
        hITLayoutParameters = hITLayoutParametersDecoded0
    }
}
