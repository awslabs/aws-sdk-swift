// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct NotifyWorkersInputBody: Equatable {
    public let subject: String?
    public let messageText: String?
    public let workerIds: [String]?
}

extension NotifyWorkersInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case messageText = "MessageText"
        case subject = "Subject"
        case workerIds = "WorkerIds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subjectDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subject)
        subject = subjectDecoded
        let messageTextDecoded = try containerValues.decodeIfPresent(String.self, forKey: .messageText)
        messageText = messageTextDecoded
        let workerIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .workerIds)
        var workerIdsDecoded0:[String]? = nil
        if let workerIdsContainer = workerIdsContainer {
            workerIdsDecoded0 = [String]()
            for string0 in workerIdsContainer {
                workerIdsDecoded0?.append(string0)
            }
        }
        workerIds = workerIdsDecoded0
    }
}
