// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListWorkerBlocksOutputBody: Equatable {
    public let nextToken: String?
    public let numResults: Int?
    public let workerBlocks: [WorkerBlock]?
}

extension ListWorkerBlocksOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case numResults = "NumResults"
        case workerBlocks = "WorkerBlocks"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let numResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let workerBlocksContainer = try containerValues.decodeIfPresent([WorkerBlock].self, forKey: .workerBlocks)
        var workerBlocksDecoded0:[WorkerBlock]? = nil
        if let workerBlocksContainer = workerBlocksContainer {
            workerBlocksDecoded0 = [WorkerBlock]()
            for structure0 in workerBlocksContainer {
                workerBlocksDecoded0?.append(structure0)
            }
        }
        workerBlocks = workerBlocksDecoded0
    }
}
