// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListBonusPaymentsOutputBody: Equatable {
    public let numResults: Int?
    public let nextToken: String?
    public let bonusPayments: [BonusPayment]?
}

extension ListBonusPaymentsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case bonusPayments = "BonusPayments"
        case nextToken = "NextToken"
        case numResults = "NumResults"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let bonusPaymentsContainer = try containerValues.decodeIfPresent([BonusPayment].self, forKey: .bonusPayments)
        var bonusPaymentsDecoded0:[BonusPayment]? = nil
        if let bonusPaymentsContainer = bonusPaymentsContainer {
            bonusPaymentsDecoded0 = [BonusPayment]()
            for structure0 in bonusPaymentsContainer {
                bonusPaymentsDecoded0?.append(structure0)
            }
        }
        bonusPayments = bonusPaymentsDecoded0
    }
}
