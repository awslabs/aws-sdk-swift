// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p> The HIT data structure represents a single HIT, including
///             all the information necessary for a Worker to accept and complete the
///             HIT.</p>
public struct HIT: Equatable {
    /// <p> The length of time, in seconds, that a Worker has to
    ///             complete the HIT after accepting it.</p>
    public let assignmentDurationInSeconds: Int?
    /// <p>The amount of time, in seconds, after the Worker submits an
    ///             assignment for the HIT that the results are automatically approved by
    ///             Amazon Mechanical Turk. This is the amount of time the Requester has
    ///             to reject an assignment submitted by a Worker before the assignment
    ///             is auto-approved and the Worker is paid.
    ///         </p>
    public let autoApprovalDelayInSeconds: Int?
    /// <p> The date and time the HIT was created.</p>
    public let creationTime: Date?
    /// <p> A general description of the HIT.</p>
    public let description: String?
    /// <p>The date and time the HIT expires.</p>
    public let expiration: Date?
    /// <p> The ID of the HIT Group of this HIT.</p>
    public let hITGroupId: String?
    /// <p> A unique identifier for the HIT.</p>
    public let hITId: String?
    /// <p> The ID of the HIT Layout of this HIT.</p>
    public let hITLayoutId: String?
    /// <p> Indicates the review status of the HIT. Valid Values are
    ///             NotReviewed | MarkedForReview | ReviewedAppropriate |
    ///             ReviewedInappropriate.</p>
    public let hITReviewStatus: HITReviewStatus?
    /// <p>The status of the HIT and its assignments. Valid Values are
    ///             Assignable | Unassignable | Reviewable | Reviewing | Disposed.
    ///         </p>
    public let hITStatus: HITStatus?
    /// <p>The ID of the HIT type of this HIT</p>
    public let hITTypeId: String?
    /// <p> One or more words or phrases that describe the HIT,
    ///             separated by commas. Search terms similar to the keywords of a HIT
    ///             are more likely to have the HIT in the search results.</p>
    public let keywords: String?
    /// <p>The number of times the HIT can be accepted and completed
    ///             before the HIT becomes unavailable.
    ///         </p>
    public let maxAssignments: Int?
    /// <p> The number of assignments for this HIT that are available
    ///             for Workers to accept.</p>
    public let numberOfAssignmentsAvailable: Int?
    /// <p> The number of assignments for this HIT that have been
    ///             approved or rejected.</p>
    public let numberOfAssignmentsCompleted: Int?
    /// <p> The number of assignments for this HIT that are being
    ///             previewed or have been accepted by Workers, but have not yet been
    ///             submitted, returned, or abandoned.</p>
    public let numberOfAssignmentsPending: Int?
    /// <p>
    ///             Conditions that a Worker's Qualifications must meet in order
    ///             to accept the HIT. A HIT can have between zero and ten
    ///             Qualification requirements. All requirements must be met in
    ///             order for a Worker to accept the HIT. Additionally, other
    ///             actions can be restricted using the <code>ActionsGuarded</code>
    ///             field on each <code>QualificationRequirement</code> structure.
    ///         </p>
    public let qualificationRequirements: [QualificationRequirement]?
    /// <p> The data the Worker completing the HIT uses produce the
    ///             results. This is either either a QuestionForm, HTMLQuestion or an
    ///             ExternalQuestion data structure.</p>
    public let question: String?
    /// <p> An arbitrary data field the Requester who created the HIT
    ///             can use. This field is visible only to the creator of the HIT.</p>
    public let requesterAnnotation: String?
    /// <p>A string representing a currency amount.</p>
    public let reward: String?
    /// <p> The title of the HIT.</p>
    public let title: String?

    public init (
        assignmentDurationInSeconds: Int? = nil,
        autoApprovalDelayInSeconds: Int? = nil,
        creationTime: Date? = nil,
        description: String? = nil,
        expiration: Date? = nil,
        hITGroupId: String? = nil,
        hITId: String? = nil,
        hITLayoutId: String? = nil,
        hITReviewStatus: HITReviewStatus? = nil,
        hITStatus: HITStatus? = nil,
        hITTypeId: String? = nil,
        keywords: String? = nil,
        maxAssignments: Int? = nil,
        numberOfAssignmentsAvailable: Int? = nil,
        numberOfAssignmentsCompleted: Int? = nil,
        numberOfAssignmentsPending: Int? = nil,
        qualificationRequirements: [QualificationRequirement]? = nil,
        question: String? = nil,
        requesterAnnotation: String? = nil,
        reward: String? = nil,
        title: String? = nil
    )
    {
        self.assignmentDurationInSeconds = assignmentDurationInSeconds
        self.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds
        self.creationTime = creationTime
        self.description = description
        self.expiration = expiration
        self.hITGroupId = hITGroupId
        self.hITId = hITId
        self.hITLayoutId = hITLayoutId
        self.hITReviewStatus = hITReviewStatus
        self.hITStatus = hITStatus
        self.hITTypeId = hITTypeId
        self.keywords = keywords
        self.maxAssignments = maxAssignments
        self.numberOfAssignmentsAvailable = numberOfAssignmentsAvailable
        self.numberOfAssignmentsCompleted = numberOfAssignmentsCompleted
        self.numberOfAssignmentsPending = numberOfAssignmentsPending
        self.qualificationRequirements = qualificationRequirements
        self.question = question
        self.requesterAnnotation = requesterAnnotation
        self.reward = reward
        self.title = title
    }
}
