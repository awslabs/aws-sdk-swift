// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QualificationRequirement: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionsGuarded = "ActionsGuarded"
        case comparator = "Comparator"
        case integerValues = "IntegerValues"
        case localeValues = "LocaleValues"
        case qualificationTypeId = "QualificationTypeId"
        case requiredToPreview = "RequiredToPreview"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionsGuarded = actionsGuarded {
            try encodeContainer.encode(actionsGuarded.rawValue, forKey: .actionsGuarded)
        }
        if let comparator = comparator {
            try encodeContainer.encode(comparator.rawValue, forKey: .comparator)
        }
        if let integerValues = integerValues {
            var integerValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .integerValues)
            for integerlist0 in integerValues {
                try integerValuesContainer.encode(integerlist0)
            }
        }
        if let localeValues = localeValues {
            var localeValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localeValues)
            for localelist0 in localeValues {
                try localeValuesContainer.encode(localelist0)
            }
        }
        if let qualificationTypeId = qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
        if let requiredToPreview = requiredToPreview {
            try encodeContainer.encode(requiredToPreview, forKey: .requiredToPreview)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
        let comparatorDecoded = try containerValues.decodeIfPresent(Comparator.self, forKey: .comparator)
        comparator = comparatorDecoded
        let integerValuesContainer = try containerValues.decodeIfPresent([Int].self, forKey: .integerValues)
        var integerValuesDecoded0:[Int]? = nil
        if let integerValuesContainer = integerValuesContainer {
            integerValuesDecoded0 = [Int]()
            for integer0 in integerValuesContainer {
                integerValuesDecoded0?.append(integer0)
            }
        }
        integerValues = integerValuesDecoded0
        let localeValuesContainer = try containerValues.decodeIfPresent([Locale].self, forKey: .localeValues)
        var localeValuesDecoded0:[Locale]? = nil
        if let localeValuesContainer = localeValuesContainer {
            localeValuesDecoded0 = [Locale]()
            for structure0 in localeValuesContainer {
                localeValuesDecoded0?.append(structure0)
            }
        }
        localeValues = localeValuesDecoded0
        let requiredToPreviewDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .requiredToPreview)
        requiredToPreview = requiredToPreviewDecoded
        let actionsGuardedDecoded = try containerValues.decodeIfPresent(HITAccessActions.self, forKey: .actionsGuarded)
        actionsGuarded = actionsGuardedDecoded
    }
}
