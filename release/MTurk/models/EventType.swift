// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum EventType {
    case assignmentabandoned
    case assignmentaccepted
    case assignmentapproved
    case assignmentrejected
    case assignmentreturned
    case assignmentsubmitted
    case hitcreated
    case hitdisposed
    case hitexpired
    case hitextended
    case hitreviewable
    case ping
    case sdkUnknown(String)
}

extension EventType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EventType] {
        return [
            .assignmentabandoned,
            .assignmentaccepted,
            .assignmentapproved,
            .assignmentrejected,
            .assignmentreturned,
            .assignmentsubmitted,
            .hitcreated,
            .hitdisposed,
            .hitexpired,
            .hitextended,
            .hitreviewable,
            .ping,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .assignmentabandoned: return "AssignmentAbandoned"
        case .assignmentaccepted: return "AssignmentAccepted"
        case .assignmentapproved: return "AssignmentApproved"
        case .assignmentrejected: return "AssignmentRejected"
        case .assignmentreturned: return "AssignmentReturned"
        case .assignmentsubmitted: return "AssignmentSubmitted"
        case .hitcreated: return "HITCreated"
        case .hitdisposed: return "HITDisposed"
        case .hitexpired: return "HITExpired"
        case .hitextended: return "HITExtended"
        case .hitreviewable: return "HITReviewable"
        case .ping: return "Ping"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
    }
}
