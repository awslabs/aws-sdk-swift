// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListWorkersWithQualificationTypeOutputBody: Equatable {
    public let nextToken: String?
    public let numResults: Int?
    public let qualifications: [Qualification]?
}

extension ListWorkersWithQualificationTypeOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case numResults = "NumResults"
        case qualifications = "Qualifications"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let numResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let qualificationsContainer = try containerValues.decodeIfPresent([Qualification].self, forKey: .qualifications)
        var qualificationsDecoded0:[Qualification]? = nil
        if let qualificationsContainer = qualificationsContainer {
            qualificationsDecoded0 = [Qualification]()
            for structure0 in qualificationsContainer {
                qualificationsDecoded0?.append(structure0)
            }
        }
        qualifications = qualificationsDecoded0
    }
}
