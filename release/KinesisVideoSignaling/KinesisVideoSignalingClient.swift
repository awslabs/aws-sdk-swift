// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class KinesisVideoSignalingClient {
    let client: SdkHttpClient
    let config: KinesisVideoSignalingClientConfiguration
    let serviceName = "Kinesis Video Signaling"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: KinesisVideoSignalingClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class KinesisVideoSignalingClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> KinesisVideoSignalingClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try KinesisVideoSignalingClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension KinesisVideoSignalingClient: KinesisVideoSignalingClientProtocol {
    /// <p>Gets the Interactive Connectivity Establishment (ICE) server configuration
    ///             information, including URIs, username, and password which can be used to configure the
    ///             WebRTC connection. The ICE component uses this configuration information to setup the
    ///             WebRTC connection, including authenticating with the Traversal Using Relays around NAT
    ///             (TURN) relay server. </p>
    ///         <p>TURN is a protocol that is used to improve the connectivity of peer-to-peer
    ///             applications. By providing a cloud-based relay service, TURN ensures that a connection
    ///             can be established even when one or more peers are incapable of a direct peer-to-peer
    ///             connection. For more information, see <a href="https://tools.ietf.org/html/draft-uberti-rtcweb-turn-rest-00">A REST API For
    ///                 Access To TURN Services</a>.</p>
    ///         <p> You can invoke this API to establish a fallback mechanism in case either of the peers
    ///             is unable to establish a direct peer-to-peer connection over a signaling channel. You
    ///             must specify either a signaling channel ARN or the client ID in order to invoke this
    ///             API.</p>
    public func getIceServerConfig(input: GetIceServerConfigInput, completion: @escaping (SdkResult<GetIceServerConfigOutputResponse, GetIceServerConfigOutputError>) -> Void)
    {
        let urlPath = "/v1/get-ice-server-config"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getIceServerConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "kinesisvideo.\(config.region).amazonaws.com")
                      .withSigningName(value: "kinesisvideo")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetIceServerConfigInput, GetIceServerConfigOutputResponse, GetIceServerConfigOutputError>(id: "getIceServerConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetIceServerConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetIceServerConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetIceServerConfigInput, GetIceServerConfigOutputResponse, GetIceServerConfigOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GetIceServerConfigInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This API allows you to connect WebRTC-enabled devices with Alexa display devices. When
    ///             invoked, it sends the Alexa Session Description Protocol (SDP) offer to the master peer.
    ///             The offer is delivered as soon as the master is connected to the specified signaling
    ///             channel. This API returns the SDP answer from the connected master. If the master is not
    ///             connected to the signaling channel, redelivery requests are made until the message
    ///             expires.</p>
    public func sendAlexaOfferToMaster(input: SendAlexaOfferToMasterInput, completion: @escaping (SdkResult<SendAlexaOfferToMasterOutputResponse, SendAlexaOfferToMasterOutputError>) -> Void)
    {
        let urlPath = "/v1/send-alexa-offer-to-master"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "sendAlexaOfferToMaster")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "kinesisvideo.\(config.region).amazonaws.com")
                      .withSigningName(value: "kinesisvideo")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SendAlexaOfferToMasterInput, SendAlexaOfferToMasterOutputResponse, SendAlexaOfferToMasterOutputError>(id: "sendAlexaOfferToMaster")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: SendAlexaOfferToMasterInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SendAlexaOfferToMasterInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SendAlexaOfferToMasterInput, SendAlexaOfferToMasterOutputResponse, SendAlexaOfferToMasterOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: SendAlexaOfferToMasterInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
