// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CategoryDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pointsOfInterest = "PointsOfInterest"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pointsOfInterest = pointsOfInterest {
            var pointsOfInterestContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pointsOfInterest)
            for pointsofinterest0 in pointsOfInterest {
                try pointsOfInterestContainer.encode(pointsofinterest0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pointsOfInterestContainer = try containerValues.decodeIfPresent([PointOfInterest].self, forKey: .pointsOfInterest)
        var pointsOfInterestDecoded0:[PointOfInterest]? = nil
        if let pointsOfInterestContainer = pointsOfInterestContainer {
            pointsOfInterestDecoded0 = [PointOfInterest]()
            for structure0 in pointsOfInterestContainer {
                pointsOfInterestDecoded0?.append(structure0)
            }
        }
        pointsOfInterest = pointsOfInterestDecoded0
    }
}
