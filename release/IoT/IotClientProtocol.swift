// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname>AWS IoT</fullname>
///         <p>AWS IoT provides secure, bi-directional communication between Internet-connected
///             devices (such as sensors, actuators, embedded devices, or smart appliances) and the AWS
///             cloud. You can discover your custom IoT-Data endpoint to communicate with, configure
///             rules for data processing and integration with other services, organize resources
///             associated with each device (Registry), configure logging, and create and manage
///             policies and credentials to authenticate devices.</p>
///         <p>The service endpoints that expose this API are listed in
///             <a href="https://docs.aws.amazon.com/general/latest/gr/iot-core.html">AWS IoT Core Endpoints and Quotas</a>.
///             You must use the endpoint for the region that has the resources you want to access.</p>
///         <p>The service name used by <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">AWS
///                 Signature Version 4</a> to sign the request is:
///             <i>execute-api</i>.</p>
///         <p>For more information about how AWS IoT works, see the <a href="https://docs.aws.amazon.com/iot/latest/developerguide/aws-iot-how-it-works.html">Developer
///             Guide</a>.</p>
///         <p>For information about how to use the credentials provider for AWS IoT, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorizing-direct-aws.html">Authorizing Direct Calls to AWS Services</a>.</p>
public protocol IotClientProtocol {
    /// <p>Accepts a pending certificate transfer. The default state of the certificate is
    ///          INACTIVE.</p>
    ///          <p>To check for pending certificate transfers, call <a>ListCertificates</a>
    ///          to enumerate your certificates.</p>
    func acceptCertificateTransfer(input: AcceptCertificateTransferInput, completion: @escaping (SdkResult<AcceptCertificateTransferOutputResponse, AcceptCertificateTransferOutputError>) -> Void)
    /// <p>Adds a thing to a billing group.</p>
    func addThingToBillingGroup(input: AddThingToBillingGroupInput, completion: @escaping (SdkResult<AddThingToBillingGroupOutputResponse, AddThingToBillingGroupOutputError>) -> Void)
    /// <p>Adds a thing to a thing group.</p>
    func addThingToThingGroup(input: AddThingToThingGroupInput, completion: @escaping (SdkResult<AddThingToThingGroupOutputResponse, AddThingToThingGroupOutputError>) -> Void)
    /// <p>Associates a group with a continuous job. The following criteria must be met: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>The job must have been created with the <code>targetSelection</code> field set to
    ///                     "CONTINUOUS".</p>
    ///             </li>
    ///             <li>
    ///                 <p>The job status must currently be "IN_PROGRESS".</p>
    ///             </li>
    ///             <li>
    ///                 <p>The total number of targets associated with a job must not exceed 100.</p>
    ///             </li>
    ///          </ul>
    func associateTargetsWithJob(input: AssociateTargetsWithJobInput, completion: @escaping (SdkResult<AssociateTargetsWithJobOutputResponse, AssociateTargetsWithJobOutputError>) -> Void)
    /// <p>Attaches a policy to the specified target.</p>
    func attachPolicy(input: AttachPolicyInput, completion: @escaping (SdkResult<AttachPolicyOutputResponse, AttachPolicyOutputError>) -> Void)
    /// <p>Attaches the specified policy to the specified principal (certificate or other
    ///          credential).</p>
    ///          <p>
    ///             <b>Note:</b> This API is deprecated. Please use <a>AttachPolicy</a> instead.</p>
    @available(*, deprecated)
    func attachPrincipalPolicy(input: AttachPrincipalPolicyInput, completion: @escaping (SdkResult<AttachPrincipalPolicyOutputResponse, AttachPrincipalPolicyOutputError>) -> Void)
    /// <p>Associates a Device Defender security profile with a thing group or this account. Each
    ///         thing group or account can have up to five security profiles associated with it.</p>
    func attachSecurityProfile(input: AttachSecurityProfileInput, completion: @escaping (SdkResult<AttachSecurityProfileOutputResponse, AttachSecurityProfileOutputError>) -> Void)
    /// <p>Attaches the specified principal to the specified thing. A principal can be X.509
    /// 			certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
    /// 			identities.</p>
    func attachThingPrincipal(input: AttachThingPrincipalInput, completion: @escaping (SdkResult<AttachThingPrincipalOutputResponse, AttachThingPrincipalOutputError>) -> Void)
    /// <p>Cancels a mitigation action task that is in progress. If the task
    ///       is not
    ///       in progress, an InvalidRequestException occurs.</p>
    func cancelAuditMitigationActionsTask(input: CancelAuditMitigationActionsTaskInput, completion: @escaping (SdkResult<CancelAuditMitigationActionsTaskOutputResponse, CancelAuditMitigationActionsTaskOutputError>) -> Void)
    /// <p>Cancels an audit that is in progress. The audit can be either scheduled or on demand. If the audit isn't in progress, an "InvalidRequestException" occurs.</p>
    func cancelAuditTask(input: CancelAuditTaskInput, completion: @escaping (SdkResult<CancelAuditTaskOutputResponse, CancelAuditTaskOutputError>) -> Void)
    /// <p>Cancels a pending transfer for the specified certificate.</p>
    ///          <p>
    ///             <b>Note</b> Only the transfer source account can use this
    ///          operation to cancel a transfer. (Transfer destinations can use <a>RejectCertificateTransfer</a> instead.) After transfer, AWS IoT returns the
    ///          certificate to the source account in the INACTIVE state. After the destination account has
    ///          accepted the transfer, the transfer cannot be cancelled.</p>
    ///          <p>After a certificate transfer is cancelled, the status of the certificate changes from
    ///          PENDING_TRANSFER to INACTIVE.</p>
    func cancelCertificateTransfer(input: CancelCertificateTransferInput, completion: @escaping (SdkResult<CancelCertificateTransferOutputResponse, CancelCertificateTransferOutputError>) -> Void)
    /// <p>
    ///         Cancels a Device Defender ML Detect mitigation action.
    ///       </p>
    func cancelDetectMitigationActionsTask(input: CancelDetectMitigationActionsTaskInput, completion: @escaping (SdkResult<CancelDetectMitigationActionsTaskOutputResponse, CancelDetectMitigationActionsTaskOutputError>) -> Void)
    /// <p>Cancels a job.</p>
    func cancelJob(input: CancelJobInput, completion: @escaping (SdkResult<CancelJobOutputResponse, CancelJobOutputError>) -> Void)
    /// <p>Cancels the execution of a job for a given thing.</p>
    func cancelJobExecution(input: CancelJobExecutionInput, completion: @escaping (SdkResult<CancelJobExecutionOutputResponse, CancelJobExecutionOutputError>) -> Void)
    /// <p>Clears the default authorizer.</p>
    func clearDefaultAuthorizer(input: ClearDefaultAuthorizerInput, completion: @escaping (SdkResult<ClearDefaultAuthorizerOutputResponse, ClearDefaultAuthorizerOutputError>) -> Void)
    /// <p>Confirms a topic rule destination. When you create a rule requiring a destination, AWS
    ///          IoT sends a confirmation message to the endpoint or base address you specify. The message
    ///          includes a token which you pass back when calling <code>ConfirmTopicRuleDestination</code>
    ///          to confirm that you own or have access to the endpoint.</p>
    func confirmTopicRuleDestination(input: ConfirmTopicRuleDestinationInput, completion: @escaping (SdkResult<ConfirmTopicRuleDestinationOutputResponse, ConfirmTopicRuleDestinationOutputError>) -> Void)
    /// <p>
    ///       Creates a Device Defender audit suppression.
    ///     </p>
    func createAuditSuppression(input: CreateAuditSuppressionInput, completion: @escaping (SdkResult<CreateAuditSuppressionOutputResponse, CreateAuditSuppressionOutputError>) -> Void)
    /// <p>Creates an authorizer.</p>
    func createAuthorizer(input: CreateAuthorizerInput, completion: @escaping (SdkResult<CreateAuthorizerOutputResponse, CreateAuthorizerOutputError>) -> Void)
    /// <p>Creates a billing group.</p>
    func createBillingGroup(input: CreateBillingGroupInput, completion: @escaping (SdkResult<CreateBillingGroupOutputResponse, CreateBillingGroupOutputError>) -> Void)
    /// <p>Creates an X.509 certificate using the specified certificate signing
    ///          request.</p>
    ///          <p>
    ///             <b>Note:</b> The CSR must include a public key that is either an
    ///          RSA key with a length of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384
    ///          curves. </p>
    ///          <p>
    ///             <b>Note:</b> Reusing the same certificate signing request (CSR)
    ///          results in a distinct certificate.</p>
    ///          <p>You can create multiple certificates in a batch by creating a directory, copying
    ///          multiple .csr files into that directory, and then specifying that directory on the command
    ///          line. The following commands show how to create a batch of certificates given a batch of
    ///          CSRs.</p>
    ///          <p>Assuming a set of CSRs are located inside of the directory
    ///          my-csr-directory:</p>
    ///
    ///          <p>On Linux and OS X, the command is:</p>
    ///
    ///          <p>$ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr
    ///          --certificate-signing-request file://my-csr-directory/{}</p>
    ///          <p>This command lists all of the CSRs in my-csr-directory and pipes each CSR file name
    ///          to the aws iot create-certificate-from-csr AWS CLI command to create a certificate for the
    ///          corresponding CSR.</p>
    ///          <p>The aws iot create-certificate-from-csr part of the command can also be run in
    ///          parallel to speed up the certificate creation process:</p>
    ///          <p>$ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr
    ///          --certificate-signing-request file://my-csr-directory/{}</p>
    ///          <p>On Windows PowerShell, the command to create certificates for all CSRs in
    ///          my-csr-directory is:</p>
    ///          <p>> ls -Name my-csr-directory | %{aws iot create-certificate-from-csr
    ///          --certificate-signing-request file://my-csr-directory/$_}</p>
    ///          <p>On a Windows command prompt, the command to create certificates for all CSRs in
    ///          my-csr-directory is:</p>
    ///          <p>> forfiles /p my-csr-directory /c "cmd /c aws iot create-certificate-from-csr
    ///          --certificate-signing-request file://@path"</p>
    func createCertificateFromCsr(input: CreateCertificateFromCsrInput, completion: @escaping (SdkResult<CreateCertificateFromCsrOutputResponse, CreateCertificateFromCsrOutputError>) -> Void)
    /// <p> Use this API to define a
    ///       Custom
    ///       Metric
    ///       published by your devices to Device Defender. </p>
    func createCustomMetric(input: CreateCustomMetricInput, completion: @escaping (SdkResult<CreateCustomMetricOutputResponse, CreateCustomMetricOutputError>) -> Void)
    /// <p>Create a dimension that you can use to limit the scope of a metric used in a security profile for AWS IoT Device Defender. For example, using a <code>TOPIC_FILTER</code> dimension, you can narrow down the scope of the metric only to MQTT topics whose name match the pattern specified in the dimension.</p>
    func createDimension(input: CreateDimensionInput, completion: @escaping (SdkResult<CreateDimensionOutputResponse, CreateDimensionOutputError>) -> Void)
    /// <p>Creates a domain configuration.</p>
    func createDomainConfiguration(input: CreateDomainConfigurationInput, completion: @escaping (SdkResult<CreateDomainConfigurationOutputResponse, CreateDomainConfigurationOutputError>) -> Void)
    /// <p>Creates a dynamic thing group.</p>
    func createDynamicThingGroup(input: CreateDynamicThingGroupInput, completion: @escaping (SdkResult<CreateDynamicThingGroupOutputResponse, CreateDynamicThingGroupOutputError>) -> Void)
    /// <p>Creates a job.</p>
    func createJob(input: CreateJobInput, completion: @escaping (SdkResult<CreateJobOutputResponse, CreateJobOutputError>) -> Void)
    /// <p>Creates a job template.</p>
    func createJobTemplate(input: CreateJobTemplateInput, completion: @escaping (SdkResult<CreateJobTemplateOutputResponse, CreateJobTemplateOutputError>) -> Void)
    /// <p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued
    ///          public key. You can also call <code>CreateKeysAndCertificate</code> over MQTT from a
    ///          device, for more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#provision-mqtt-api">Provisioning MQTT API</a>.</p>
    ///          <p>
    ///             <b>Note</b> This is the only time AWS IoT issues the private key
    ///          for this certificate, so it is important to keep it in a secure location.</p>
    func createKeysAndCertificate(input: CreateKeysAndCertificateInput, completion: @escaping (SdkResult<CreateKeysAndCertificateOutputResponse, CreateKeysAndCertificateOutputError>) -> Void)
    /// <p>Defines an action that can be applied to audit findings by using StartAuditMitigationActionsTask. Only certain types of mitigation actions can be applied to specific check names. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/device-defender-mitigation-actions.html">Mitigation actions</a>. Each mitigation action can apply only one type of change.</p>
    func createMitigationAction(input: CreateMitigationActionInput, completion: @escaping (SdkResult<CreateMitigationActionOutputResponse, CreateMitigationActionOutputError>) -> Void)
    /// <p>Creates an AWS IoT OTAUpdate on a target group of things or groups.</p>
    func createOTAUpdate(input: CreateOTAUpdateInput, completion: @escaping (SdkResult<CreateOTAUpdateOutputResponse, CreateOTAUpdateOutputError>) -> Void)
    /// <p>Creates an AWS IoT policy.</p>
    ///          <p>The created policy is the default version for the policy. This operation creates a
    ///          policy version with a version identifier of <b>1</b> and sets
    ///             <b>1</b> as the policy's default version.</p>
    func createPolicy(input: CreatePolicyInput, completion: @escaping (SdkResult<CreatePolicyOutputResponse, CreatePolicyOutputError>) -> Void)
    /// <p>Creates a new version of the specified AWS IoT policy. To update a policy, create a
    ///          new policy version. A managed policy can have up to five versions. If the policy has five
    ///          versions, you must use <a>DeletePolicyVersion</a> to delete an existing version
    ///          before you create a new one.</p>
    ///          <p>Optionally, you can set the new version as the policy's default version. The default
    ///          version is the operative version (that is, the version that is in effect for the
    ///          certificates to which the policy is attached).</p>
    func createPolicyVersion(input: CreatePolicyVersionInput, completion: @escaping (SdkResult<CreatePolicyVersionOutputResponse, CreatePolicyVersionOutputError>) -> Void)
    /// <p>Creates a provisioning claim.</p>
    func createProvisioningClaim(input: CreateProvisioningClaimInput, completion: @escaping (SdkResult<CreateProvisioningClaimOutputResponse, CreateProvisioningClaimOutputError>) -> Void)
    /// <p>Creates a fleet provisioning template.</p>
    func createProvisioningTemplate(input: CreateProvisioningTemplateInput, completion: @escaping (SdkResult<CreateProvisioningTemplateOutputResponse, CreateProvisioningTemplateOutputError>) -> Void)
    /// <p>Creates a new version of a fleet provisioning template.</p>
    func createProvisioningTemplateVersion(input: CreateProvisioningTemplateVersionInput, completion: @escaping (SdkResult<CreateProvisioningTemplateVersionOutputResponse, CreateProvisioningTemplateVersionOutputError>) -> Void)
    /// <p>Creates a role alias.</p>
    func createRoleAlias(input: CreateRoleAliasInput, completion: @escaping (SdkResult<CreateRoleAliasOutputResponse, CreateRoleAliasOutputError>) -> Void)
    /// <p>Creates a scheduled audit that is run at a specified
    ///           time interval.</p>
    func createScheduledAudit(input: CreateScheduledAuditInput, completion: @escaping (SdkResult<CreateScheduledAuditOutputResponse, CreateScheduledAuditOutputError>) -> Void)
    /// <p>Creates a Device Defender security profile.</p>
    func createSecurityProfile(input: CreateSecurityProfileInput, completion: @escaping (SdkResult<CreateSecurityProfileOutputResponse, CreateSecurityProfileOutputError>) -> Void)
    /// <p>Creates a stream for delivering one or more large files in chunks over MQTT. A stream transports data
    ///             bytes in chunks or blocks packaged as MQTT messages from a source like S3. You can have one or more files
    ///             associated with a stream.</p>
    func createStream(input: CreateStreamInput, completion: @escaping (SdkResult<CreateStreamOutputResponse, CreateStreamOutputError>) -> Void)
    /// <p>Creates a thing record in the registry. If this call is made multiple times using
    /// 			the same thing name and configuration, the call will succeed. If this call is made with
    /// 			the same thing name but different configuration a
    /// 				<code>ResourceAlreadyExistsException</code> is thrown.</p>
    /// 		       <note>
    /// 			         <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-authorization.html">Authorization</a> for
    /// 				information about authorizing control plane actions.</p>
    /// 		       </note>
    func createThing(input: CreateThingInput, completion: @escaping (SdkResult<CreateThingOutputResponse, CreateThingOutputError>) -> Void)
    /// <p>Create a thing group.</p>
    /// 		       <note>
    /// 			         <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-authorization.html">Authorization</a> for
    /// 				information about authorizing control plane actions.</p>
    /// 		       </note>
    func createThingGroup(input: CreateThingGroupInput, completion: @escaping (SdkResult<CreateThingGroupOutputResponse, CreateThingGroupOutputError>) -> Void)
    /// <p>Creates a new thing type.</p>
    func createThingType(input: CreateThingTypeInput, completion: @escaping (SdkResult<CreateThingTypeOutputResponse, CreateThingTypeOutputError>) -> Void)
    /// <p>Creates a rule. Creating rules is an administrator-level action. Any user who has
    ///          permission to create rules will be able to access data processed by the rule.</p>
    func createTopicRule(input: CreateTopicRuleInput, completion: @escaping (SdkResult<CreateTopicRuleOutputResponse, CreateTopicRuleOutputError>) -> Void)
    /// <p>Creates a topic rule destination. The destination must be confirmed prior to use.</p>
    func createTopicRuleDestination(input: CreateTopicRuleDestinationInput, completion: @escaping (SdkResult<CreateTopicRuleDestinationOutputResponse, CreateTopicRuleDestinationOutputError>) -> Void)
    /// <p>Restores the default settings for Device Defender audits for this account. Any
    ///           configuration data you entered is deleted and all audit checks are reset to
    ///           disabled.  </p>
    func deleteAccountAuditConfiguration(input: DeleteAccountAuditConfigurationInput, completion: @escaping (SdkResult<DeleteAccountAuditConfigurationOutputResponse, DeleteAccountAuditConfigurationOutputError>) -> Void)
    /// <p>
    ///       Deletes a Device Defender audit suppression.
    ///     </p>
    func deleteAuditSuppression(input: DeleteAuditSuppressionInput, completion: @escaping (SdkResult<DeleteAuditSuppressionOutputResponse, DeleteAuditSuppressionOutputError>) -> Void)
    /// <p>Deletes an authorizer.</p>
    func deleteAuthorizer(input: DeleteAuthorizerInput, completion: @escaping (SdkResult<DeleteAuthorizerOutputResponse, DeleteAuthorizerOutputError>) -> Void)
    /// <p>Deletes the billing group.</p>
    func deleteBillingGroup(input: DeleteBillingGroupInput, completion: @escaping (SdkResult<DeleteBillingGroupOutputResponse, DeleteBillingGroupOutputError>) -> Void)
    /// <p>Deletes a registered CA certificate.</p>
    func deleteCACertificate(input: DeleteCACertificateInput, completion: @escaping (SdkResult<DeleteCACertificateOutputResponse, DeleteCACertificateOutputError>) -> Void)
    /// <p>Deletes the specified certificate.</p>
    ///          <p>A certificate cannot be deleted if it has a policy or IoT thing attached to it or if
    ///          its status is set to ACTIVE. To delete a certificate, first use the <a>DetachPrincipalPolicy</a> API to detach all policies. Next, use the <a>UpdateCertificate</a> API to set the certificate to the INACTIVE
    ///          status.</p>
    func deleteCertificate(input: DeleteCertificateInput, completion: @escaping (SdkResult<DeleteCertificateOutputResponse, DeleteCertificateOutputError>) -> Void)
    /// <note>
    ///             <p>Before you can delete a custom metric, you must first remove the custom metric from all
    ///         security profiles it's a part of.
    ///         The
    ///         security
    ///         profile associated with the custom metric can be found using the <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_ListSecurityProfiles.html">ListSecurityProfiles</a>
    ///         API with <code>metricName</code> set to your custom metric name.</p>
    ///          </note>
    ///          <p>
    ///       Deletes a Device Defender detect custom metric.
    ///     </p>
    func deleteCustomMetric(input: DeleteCustomMetricInput, completion: @escaping (SdkResult<DeleteCustomMetricOutputResponse, DeleteCustomMetricOutputError>) -> Void)
    /// <p>Removes the specified dimension from your AWS account.</p>
    func deleteDimension(input: DeleteDimensionInput, completion: @escaping (SdkResult<DeleteDimensionOutputResponse, DeleteDimensionOutputError>) -> Void)
    /// <p>Deletes the specified domain configuration.</p>
    func deleteDomainConfiguration(input: DeleteDomainConfigurationInput, completion: @escaping (SdkResult<DeleteDomainConfigurationOutputResponse, DeleteDomainConfigurationOutputError>) -> Void)
    /// <p>Deletes a dynamic thing group.</p>
    func deleteDynamicThingGroup(input: DeleteDynamicThingGroupInput, completion: @escaping (SdkResult<DeleteDynamicThingGroupOutputResponse, DeleteDynamicThingGroupOutputError>) -> Void)
    /// <p>Deletes a job and its related job executions.</p>
    ///          <p>Deleting a job may take time, depending on the number of job
    ///         executions created for the job and various other factors. While the job
    ///         is being deleted, the status of the job will be shown as
    ///         "DELETION_IN_PROGRESS". Attempting to delete or cancel a job whose status
    ///         is already "DELETION_IN_PROGRESS" will result in an error.</p>
    ///          <p>Only 10 jobs may have status "DELETION_IN_PROGRESS" at the same time, or
    ///         a LimitExceededException will occur.</p>
    func deleteJob(input: DeleteJobInput, completion: @escaping (SdkResult<DeleteJobOutputResponse, DeleteJobOutputError>) -> Void)
    /// <p>Deletes a job execution.</p>
    func deleteJobExecution(input: DeleteJobExecutionInput, completion: @escaping (SdkResult<DeleteJobExecutionOutputResponse, DeleteJobExecutionOutputError>) -> Void)
    /// <p>Deletes the specified job template.</p>
    func deleteJobTemplate(input: DeleteJobTemplateInput, completion: @escaping (SdkResult<DeleteJobTemplateOutputResponse, DeleteJobTemplateOutputError>) -> Void)
    /// <p>Deletes a defined mitigation action from your AWS account.</p>
    func deleteMitigationAction(input: DeleteMitigationActionInput, completion: @escaping (SdkResult<DeleteMitigationActionOutputResponse, DeleteMitigationActionOutputError>) -> Void)
    /// <p>Delete an OTA update.</p>
    func deleteOTAUpdate(input: DeleteOTAUpdateInput, completion: @escaping (SdkResult<DeleteOTAUpdateOutputResponse, DeleteOTAUpdateOutputError>) -> Void)
    /// <p>Deletes the specified policy.</p>
    ///          <p>A policy cannot be deleted if it has non-default versions or it is attached to any
    ///          certificate.</p>
    ///          <p>To delete a policy, use the DeletePolicyVersion API to delete all non-default
    ///          versions of the policy; use the DetachPrincipalPolicy API to detach the policy from any
    ///          certificate; and then use the DeletePolicy API to delete the policy.</p>
    ///          <p>When a policy is deleted using DeletePolicy, its default version is deleted with
    ///          it.</p>
    func deletePolicy(input: DeletePolicyInput, completion: @escaping (SdkResult<DeletePolicyOutputResponse, DeletePolicyOutputError>) -> Void)
    /// <p>Deletes the specified version of the specified policy. You cannot delete the default
    ///          version of a policy using this API. To delete the default version of a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default
    ///          version, use ListPolicyVersions.</p>
    func deletePolicyVersion(input: DeletePolicyVersionInput, completion: @escaping (SdkResult<DeletePolicyVersionOutputResponse, DeletePolicyVersionOutputError>) -> Void)
    /// <p>Deletes a fleet provisioning template.</p>
    func deleteProvisioningTemplate(input: DeleteProvisioningTemplateInput, completion: @escaping (SdkResult<DeleteProvisioningTemplateOutputResponse, DeleteProvisioningTemplateOutputError>) -> Void)
    /// <p>Deletes a fleet provisioning template version.</p>
    func deleteProvisioningTemplateVersion(input: DeleteProvisioningTemplateVersionInput, completion: @escaping (SdkResult<DeleteProvisioningTemplateVersionOutputResponse, DeleteProvisioningTemplateVersionOutputError>) -> Void)
    /// <p>Deletes a CA certificate registration code.</p>
    func deleteRegistrationCode(input: DeleteRegistrationCodeInput, completion: @escaping (SdkResult<DeleteRegistrationCodeOutputResponse, DeleteRegistrationCodeOutputError>) -> Void)
    /// <p>Deletes a role alias</p>
    func deleteRoleAlias(input: DeleteRoleAliasInput, completion: @escaping (SdkResult<DeleteRoleAliasOutputResponse, DeleteRoleAliasOutputError>) -> Void)
    /// <p>Deletes a scheduled audit.</p>
    func deleteScheduledAudit(input: DeleteScheduledAuditInput, completion: @escaping (SdkResult<DeleteScheduledAuditOutputResponse, DeleteScheduledAuditOutputError>) -> Void)
    /// <p>Deletes a Device Defender security profile.</p>
    func deleteSecurityProfile(input: DeleteSecurityProfileInput, completion: @escaping (SdkResult<DeleteSecurityProfileOutputResponse, DeleteSecurityProfileOutputError>) -> Void)
    /// <p>Deletes a stream.</p>
    func deleteStream(input: DeleteStreamInput, completion: @escaping (SdkResult<DeleteStreamOutputResponse, DeleteStreamOutputError>) -> Void)
    /// <p>Deletes the specified thing. Returns successfully with no error if the deletion is
    /// 			successful or you specify a thing that doesn't exist.</p>
    func deleteThing(input: DeleteThingInput, completion: @escaping (SdkResult<DeleteThingOutputResponse, DeleteThingOutputError>) -> Void)
    /// <p>Deletes a thing group.</p>
    func deleteThingGroup(input: DeleteThingGroupInput, completion: @escaping (SdkResult<DeleteThingGroupOutputResponse, DeleteThingGroupOutputError>) -> Void)
    /// <p>Deletes the specified thing type. You cannot delete a thing type if it has things
    /// 			associated with it. To delete a thing type, first mark it as deprecated by calling <a>DeprecateThingType</a>, then remove any associated things by calling <a>UpdateThing</a> to change the thing type on any associated thing, and
    /// 			finally use <a>DeleteThingType</a> to delete the thing type.</p>
    func deleteThingType(input: DeleteThingTypeInput, completion: @escaping (SdkResult<DeleteThingTypeOutputResponse, DeleteThingTypeOutputError>) -> Void)
    /// <p>Deletes the rule.</p>
    func deleteTopicRule(input: DeleteTopicRuleInput, completion: @escaping (SdkResult<DeleteTopicRuleOutputResponse, DeleteTopicRuleOutputError>) -> Void)
    /// <p>Deletes a topic rule destination.</p>
    func deleteTopicRuleDestination(input: DeleteTopicRuleDestinationInput, completion: @escaping (SdkResult<DeleteTopicRuleDestinationOutputResponse, DeleteTopicRuleDestinationOutputError>) -> Void)
    /// <p>Deletes a logging level.</p>
    func deleteV2LoggingLevel(input: DeleteV2LoggingLevelInput, completion: @escaping (SdkResult<DeleteV2LoggingLevelOutputResponse, DeleteV2LoggingLevelOutputError>) -> Void)
    /// <p>Deprecates a thing type. You can not associate new things with deprecated thing
    /// 			type.</p>
    func deprecateThingType(input: DeprecateThingTypeInput, completion: @escaping (SdkResult<DeprecateThingTypeOutputResponse, DeprecateThingTypeOutputError>) -> Void)
    /// <p>Gets information about the Device Defender audit settings for this account.
    ///           Settings include how audit notifications are sent and which audit checks are
    ///           enabled or disabled.</p>
    func describeAccountAuditConfiguration(input: DescribeAccountAuditConfigurationInput, completion: @escaping (SdkResult<DescribeAccountAuditConfigurationOutputResponse, DescribeAccountAuditConfigurationOutputError>) -> Void)
    /// <p>Gets information about a single audit finding. Properties include the reason for
    ///       noncompliance, the severity of the issue,
    ///       and the start time
    ///       when the audit that returned the
    ///       finding.</p>
    func describeAuditFinding(input: DescribeAuditFindingInput, completion: @escaping (SdkResult<DescribeAuditFindingOutputResponse, DescribeAuditFindingOutputError>) -> Void)
    /// <p>Gets information about an audit mitigation task that is used to apply mitigation actions to a set of audit findings. Properties include the actions being applied, the audit checks to which they're being applied, the task status, and aggregated task statistics.</p>
    func describeAuditMitigationActionsTask(input: DescribeAuditMitigationActionsTaskInput, completion: @escaping (SdkResult<DescribeAuditMitigationActionsTaskOutputResponse, DescribeAuditMitigationActionsTaskOutputError>) -> Void)
    /// <p>
    ///       Gets information about a Device Defender audit suppression.
    ///     </p>
    func describeAuditSuppression(input: DescribeAuditSuppressionInput, completion: @escaping (SdkResult<DescribeAuditSuppressionOutputResponse, DescribeAuditSuppressionOutputError>) -> Void)
    /// <p>Gets information about a Device Defender audit.</p>
    func describeAuditTask(input: DescribeAuditTaskInput, completion: @escaping (SdkResult<DescribeAuditTaskOutputResponse, DescribeAuditTaskOutputError>) -> Void)
    /// <p>Describes an authorizer.</p>
    func describeAuthorizer(input: DescribeAuthorizerInput, completion: @escaping (SdkResult<DescribeAuthorizerOutputResponse, DescribeAuthorizerOutputError>) -> Void)
    /// <p>Returns information about a billing group.</p>
    func describeBillingGroup(input: DescribeBillingGroupInput, completion: @escaping (SdkResult<DescribeBillingGroupOutputResponse, DescribeBillingGroupOutputError>) -> Void)
    /// <p>Describes a registered CA certificate.</p>
    func describeCACertificate(input: DescribeCACertificateInput, completion: @escaping (SdkResult<DescribeCACertificateOutputResponse, DescribeCACertificateOutputError>) -> Void)
    /// <p>Gets information about the specified certificate.</p>
    func describeCertificate(input: DescribeCertificateInput, completion: @escaping (SdkResult<DescribeCertificateOutputResponse, DescribeCertificateOutputError>) -> Void)
    /// <p>
    ///       Gets information about a Device Defender detect custom metric.
    ///     </p>
    func describeCustomMetric(input: DescribeCustomMetricInput, completion: @escaping (SdkResult<DescribeCustomMetricOutputResponse, DescribeCustomMetricOutputError>) -> Void)
    /// <p>Describes the default authorizer.</p>
    func describeDefaultAuthorizer(input: DescribeDefaultAuthorizerInput, completion: @escaping (SdkResult<DescribeDefaultAuthorizerOutputResponse, DescribeDefaultAuthorizerOutputError>) -> Void)
    /// <p>
    ///       Gets information about a Device Defender ML Detect mitigation action.
    ///     </p>
    func describeDetectMitigationActionsTask(input: DescribeDetectMitigationActionsTaskInput, completion: @escaping (SdkResult<DescribeDetectMitigationActionsTaskOutputResponse, DescribeDetectMitigationActionsTaskOutputError>) -> Void)
    /// <p>Provides details about a dimension that is defined in your AWS account.</p>
    func describeDimension(input: DescribeDimensionInput, completion: @escaping (SdkResult<DescribeDimensionOutputResponse, DescribeDimensionOutputError>) -> Void)
    /// <p>Gets summary information about a domain configuration.</p>
    func describeDomainConfiguration(input: DescribeDomainConfigurationInput, completion: @escaping (SdkResult<DescribeDomainConfigurationOutputResponse, DescribeDomainConfigurationOutputError>) -> Void)
    /// <p>Returns a unique endpoint specific to the AWS account making the call.</p>
    func describeEndpoint(input: DescribeEndpointInput, completion: @escaping (SdkResult<DescribeEndpointOutputResponse, DescribeEndpointOutputError>) -> Void)
    /// <p>Describes event configurations.</p>
    func describeEventConfigurations(input: DescribeEventConfigurationsInput, completion: @escaping (SdkResult<DescribeEventConfigurationsOutputResponse, DescribeEventConfigurationsOutputError>) -> Void)
    /// <p>Describes a search index.</p>
    func describeIndex(input: DescribeIndexInput, completion: @escaping (SdkResult<DescribeIndexOutputResponse, DescribeIndexOutputError>) -> Void)
    /// <p>Describes a job.</p>
    func describeJob(input: DescribeJobInput, completion: @escaping (SdkResult<DescribeJobOutputResponse, DescribeJobOutputError>) -> Void)
    /// <p>Describes a job execution.</p>
    func describeJobExecution(input: DescribeJobExecutionInput, completion: @escaping (SdkResult<DescribeJobExecutionOutputResponse, DescribeJobExecutionOutputError>) -> Void)
    /// <p>Returns information about a job template.</p>
    func describeJobTemplate(input: DescribeJobTemplateInput, completion: @escaping (SdkResult<DescribeJobTemplateOutputResponse, DescribeJobTemplateOutputError>) -> Void)
    /// <p>Gets information about a mitigation action.</p>
    func describeMitigationAction(input: DescribeMitigationActionInput, completion: @escaping (SdkResult<DescribeMitigationActionOutputResponse, DescribeMitigationActionOutputError>) -> Void)
    /// <p>Returns information about a fleet provisioning template.</p>
    func describeProvisioningTemplate(input: DescribeProvisioningTemplateInput, completion: @escaping (SdkResult<DescribeProvisioningTemplateOutputResponse, DescribeProvisioningTemplateOutputError>) -> Void)
    /// <p>Returns information about a fleet provisioning template version.</p>
    func describeProvisioningTemplateVersion(input: DescribeProvisioningTemplateVersionInput, completion: @escaping (SdkResult<DescribeProvisioningTemplateVersionOutputResponse, DescribeProvisioningTemplateVersionOutputError>) -> Void)
    /// <p>Describes a role alias.</p>
    func describeRoleAlias(input: DescribeRoleAliasInput, completion: @escaping (SdkResult<DescribeRoleAliasOutputResponse, DescribeRoleAliasOutputError>) -> Void)
    /// <p>Gets information about a scheduled audit.</p>
    func describeScheduledAudit(input: DescribeScheduledAuditInput, completion: @escaping (SdkResult<DescribeScheduledAuditOutputResponse, DescribeScheduledAuditOutputError>) -> Void)
    /// <p>Gets information about a Device Defender security profile.</p>
    func describeSecurityProfile(input: DescribeSecurityProfileInput, completion: @escaping (SdkResult<DescribeSecurityProfileOutputResponse, DescribeSecurityProfileOutputError>) -> Void)
    /// <p>Gets information about a stream.</p>
    func describeStream(input: DescribeStreamInput, completion: @escaping (SdkResult<DescribeStreamOutputResponse, DescribeStreamOutputError>) -> Void)
    /// <p>Gets information about the specified thing.</p>
    func describeThing(input: DescribeThingInput, completion: @escaping (SdkResult<DescribeThingOutputResponse, DescribeThingOutputError>) -> Void)
    /// <p>Describe a thing group.</p>
    func describeThingGroup(input: DescribeThingGroupInput, completion: @escaping (SdkResult<DescribeThingGroupOutputResponse, DescribeThingGroupOutputError>) -> Void)
    /// <p>Describes a bulk thing provisioning task.</p>
    func describeThingRegistrationTask(input: DescribeThingRegistrationTaskInput, completion: @escaping (SdkResult<DescribeThingRegistrationTaskOutputResponse, DescribeThingRegistrationTaskOutputError>) -> Void)
    /// <p>Gets information about the specified thing type.</p>
    func describeThingType(input: DescribeThingTypeInput, completion: @escaping (SdkResult<DescribeThingTypeOutputResponse, DescribeThingTypeOutputError>) -> Void)
    /// <p>Detaches a policy from the specified target.</p>
    func detachPolicy(input: DetachPolicyInput, completion: @escaping (SdkResult<DetachPolicyOutputResponse, DetachPolicyOutputError>) -> Void)
    /// <p>Removes the specified policy from the specified certificate.</p>
    ///          <p>
    ///             <b>Note:</b> This API is deprecated. Please use <a>DetachPolicy</a> instead.</p>
    @available(*, deprecated)
    func detachPrincipalPolicy(input: DetachPrincipalPolicyInput, completion: @escaping (SdkResult<DetachPrincipalPolicyOutputResponse, DetachPrincipalPolicyOutputError>) -> Void)
    /// <p>Disassociates a Device Defender security profile from a thing group or from this account.</p>
    func detachSecurityProfile(input: DetachSecurityProfileInput, completion: @escaping (SdkResult<DetachSecurityProfileOutputResponse, DetachSecurityProfileOutputError>) -> Void)
    /// <p>Detaches the specified principal from the specified thing. A principal can be X.509
    /// 			certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
    /// 			identities.</p>
    /// 		       <note>
    /// 			         <p>This call is asynchronous. It might take several seconds for the detachment to
    /// 				propagate.</p>
    /// 		       </note>
    func detachThingPrincipal(input: DetachThingPrincipalInput, completion: @escaping (SdkResult<DetachThingPrincipalOutputResponse, DetachThingPrincipalOutputError>) -> Void)
    /// <p>Disables the rule.</p>
    func disableTopicRule(input: DisableTopicRuleInput, completion: @escaping (SdkResult<DisableTopicRuleOutputResponse, DisableTopicRuleOutputError>) -> Void)
    /// <p>Enables the rule.</p>
    func enableTopicRule(input: EnableTopicRuleInput, completion: @escaping (SdkResult<EnableTopicRuleOutputResponse, EnableTopicRuleOutputError>) -> Void)
    /// <p>
    ///       Returns a Device Defender's ML Detect Security Profile training model's status.
    ///     </p>
    func getBehaviorModelTrainingSummaries(input: GetBehaviorModelTrainingSummariesInput, completion: @escaping (SdkResult<GetBehaviorModelTrainingSummariesOutputResponse, GetBehaviorModelTrainingSummariesOutputError>) -> Void)
    /// <p>Returns the approximate count of unique values that match the query.</p>
    func getCardinality(input: GetCardinalityInput, completion: @escaping (SdkResult<GetCardinalityOutputResponse, GetCardinalityOutputError>) -> Void)
    /// <p>Gets a list of the policies that have an effect on the authorization behavior of the
    ///          specified device when it connects to the AWS IoT device gateway.</p>
    func getEffectivePolicies(input: GetEffectivePoliciesInput, completion: @escaping (SdkResult<GetEffectivePoliciesOutputResponse, GetEffectivePoliciesOutputError>) -> Void)
    /// <p>Gets the indexing configuration.</p>
    func getIndexingConfiguration(input: GetIndexingConfigurationInput, completion: @escaping (SdkResult<GetIndexingConfigurationOutputResponse, GetIndexingConfigurationOutputError>) -> Void)
    /// <p>Gets a job document.</p>
    func getJobDocument(input: GetJobDocumentInput, completion: @escaping (SdkResult<GetJobDocumentOutputResponse, GetJobDocumentOutputError>) -> Void)
    /// <p>Gets the logging options.</p>
    ///          <p>NOTE: use of this command is not recommended. Use <code>GetV2LoggingOptions</code>
    ///          instead.</p>
    func getLoggingOptions(input: GetLoggingOptionsInput, completion: @escaping (SdkResult<GetLoggingOptionsOutputResponse, GetLoggingOptionsOutputError>) -> Void)
    /// <p>Gets an OTA update.</p>
    func getOTAUpdate(input: GetOTAUpdateInput, completion: @escaping (SdkResult<GetOTAUpdateOutputResponse, GetOTAUpdateOutputError>) -> Void)
    /// <p>Groups the aggregated values that match the query into percentile groupings. The default
    ///         percentile groupings are: 1,5,25,50,75,95,99, although you can specify your own
    ///         when you call <code>GetPercentiles</code>. This function returns a value for each
    ///         percentile group specified (or the default percentile groupings). The percentile group
    ///         "1" contains the aggregated field value that occurs in approximately one percent of the
    ///         values that match the query. The percentile group "5" contains the aggregated field value
    ///         that occurs in approximately five percent of the values that match the query, and so on.
    ///         The result is an approximation, the more values that match the query, the more accurate
    ///         the percentile values.</p>
    func getPercentiles(input: GetPercentilesInput, completion: @escaping (SdkResult<GetPercentilesOutputResponse, GetPercentilesOutputError>) -> Void)
    /// <p>Gets information about the specified policy with the policy document of the default
    ///          version.</p>
    func getPolicy(input: GetPolicyInput, completion: @escaping (SdkResult<GetPolicyOutputResponse, GetPolicyOutputError>) -> Void)
    /// <p>Gets information about the specified policy version.</p>
    func getPolicyVersion(input: GetPolicyVersionInput, completion: @escaping (SdkResult<GetPolicyVersionOutputResponse, GetPolicyVersionOutputError>) -> Void)
    /// <p>Gets a registration code used to register a CA certificate with AWS IoT.</p>
    func getRegistrationCode(input: GetRegistrationCodeInput, completion: @escaping (SdkResult<GetRegistrationCodeOutputResponse, GetRegistrationCodeOutputError>) -> Void)
    /// <p>Returns the count, average, sum, minimum, maximum, sum of squares, variance,
    ///       and standard deviation for the specified aggregated field. If the aggregation field is of type
    ///       <code>String</code>, only the count statistic is returned.</p>
    func getStatistics(input: GetStatisticsInput, completion: @escaping (SdkResult<GetStatisticsOutputResponse, GetStatisticsOutputError>) -> Void)
    /// <p>Gets information about the rule.</p>
    func getTopicRule(input: GetTopicRuleInput, completion: @escaping (SdkResult<GetTopicRuleOutputResponse, GetTopicRuleOutputError>) -> Void)
    /// <p>Gets information about a topic rule destination.</p>
    func getTopicRuleDestination(input: GetTopicRuleDestinationInput, completion: @escaping (SdkResult<GetTopicRuleDestinationOutputResponse, GetTopicRuleDestinationOutputError>) -> Void)
    /// <p>Gets the fine grained logging options.</p>
    func getV2LoggingOptions(input: GetV2LoggingOptionsInput, completion: @escaping (SdkResult<GetV2LoggingOptionsOutputResponse, GetV2LoggingOptionsOutputError>) -> Void)
    /// <p>Lists the active violations for a given Device Defender security profile.</p>
    func listActiveViolations(input: ListActiveViolationsInput, completion: @escaping (SdkResult<ListActiveViolationsOutputResponse, ListActiveViolationsOutputError>) -> Void)
    /// <p>Lists the policies attached to the specified thing group.</p>
    func listAttachedPolicies(input: ListAttachedPoliciesInput, completion: @escaping (SdkResult<ListAttachedPoliciesOutputResponse, ListAttachedPoliciesOutputError>) -> Void)
    /// <p>Lists the findings (results) of a Device Defender audit or of the audits
    ///         performed during a specified time period. (Findings are retained for 90 days.)</p>
    func listAuditFindings(input: ListAuditFindingsInput, completion: @escaping (SdkResult<ListAuditFindingsOutputResponse, ListAuditFindingsOutputError>) -> Void)
    /// <p>Gets the status of audit mitigation action tasks that were
    ///       executed.</p>
    func listAuditMitigationActionsExecutions(input: ListAuditMitigationActionsExecutionsInput, completion: @escaping (SdkResult<ListAuditMitigationActionsExecutionsOutputResponse, ListAuditMitigationActionsExecutionsOutputError>) -> Void)
    /// <p>Gets a list of audit mitigation action tasks that match the specified filters.</p>
    func listAuditMitigationActionsTasks(input: ListAuditMitigationActionsTasksInput, completion: @escaping (SdkResult<ListAuditMitigationActionsTasksOutputResponse, ListAuditMitigationActionsTasksOutputError>) -> Void)
    /// <p>
    ///       Lists your Device Defender audit listings.
    ///     </p>
    func listAuditSuppressions(input: ListAuditSuppressionsInput, completion: @escaping (SdkResult<ListAuditSuppressionsOutputResponse, ListAuditSuppressionsOutputError>) -> Void)
    /// <p>Lists the Device Defender audits that have been performed during a given
    ///           time period.</p>
    func listAuditTasks(input: ListAuditTasksInput, completion: @escaping (SdkResult<ListAuditTasksOutputResponse, ListAuditTasksOutputError>) -> Void)
    /// <p>Lists the authorizers registered in your account.</p>
    func listAuthorizers(input: ListAuthorizersInput, completion: @escaping (SdkResult<ListAuthorizersOutputResponse, ListAuthorizersOutputError>) -> Void)
    /// <p>Lists the billing groups you have created.</p>
    func listBillingGroups(input: ListBillingGroupsInput, completion: @escaping (SdkResult<ListBillingGroupsOutputResponse, ListBillingGroupsOutputError>) -> Void)
    /// <p>Lists the CA certificates registered for your AWS account.</p>
    ///          <p>The results are paginated with a default page size of 25. You can use the returned
    ///          marker to retrieve additional results.</p>
    func listCACertificates(input: ListCACertificatesInput, completion: @escaping (SdkResult<ListCACertificatesOutputResponse, ListCACertificatesOutputError>) -> Void)
    /// <p>Lists the certificates registered in your AWS account.</p>
    ///          <p>The results are paginated with a default page size of 25. You can use the returned
    ///          marker to retrieve additional results.</p>
    func listCertificates(input: ListCertificatesInput, completion: @escaping (SdkResult<ListCertificatesOutputResponse, ListCertificatesOutputError>) -> Void)
    /// <p>List the device certificates signed by the specified CA certificate.</p>
    func listCertificatesByCA(input: ListCertificatesByCAInput, completion: @escaping (SdkResult<ListCertificatesByCAOutputResponse, ListCertificatesByCAOutputError>) -> Void)
    /// <p>
    ///       Lists your Device Defender detect custom metrics.
    ///     </p>
    func listCustomMetrics(input: ListCustomMetricsInput, completion: @escaping (SdkResult<ListCustomMetricsOutputResponse, ListCustomMetricsOutputError>) -> Void)
    /// <p>
    ///       Lists mitigation actions executions for a Device Defender ML Detect Security Profile.
    ///     </p>
    func listDetectMitigationActionsExecutions(input: ListDetectMitigationActionsExecutionsInput, completion: @escaping (SdkResult<ListDetectMitigationActionsExecutionsOutputResponse, ListDetectMitigationActionsExecutionsOutputError>) -> Void)
    /// <p>
    ///       List of Device Defender ML Detect mitigation actions tasks.
    ///     </p>
    func listDetectMitigationActionsTasks(input: ListDetectMitigationActionsTasksInput, completion: @escaping (SdkResult<ListDetectMitigationActionsTasksOutputResponse, ListDetectMitigationActionsTasksOutputError>) -> Void)
    /// <p>List the set of dimensions that are defined for your AWS account.</p>
    func listDimensions(input: ListDimensionsInput, completion: @escaping (SdkResult<ListDimensionsOutputResponse, ListDimensionsOutputError>) -> Void)
    /// <p>Gets a list of domain configurations for the user. This list is sorted alphabetically by domain configuration name.</p>
    func listDomainConfigurations(input: ListDomainConfigurationsInput, completion: @escaping (SdkResult<ListDomainConfigurationsOutputResponse, ListDomainConfigurationsOutputError>) -> Void)
    /// <p>Lists the search indices.</p>
    func listIndices(input: ListIndicesInput, completion: @escaping (SdkResult<ListIndicesOutputResponse, ListIndicesOutputError>) -> Void)
    /// <p>Lists the job executions for a job.</p>
    func listJobExecutionsForJob(input: ListJobExecutionsForJobInput, completion: @escaping (SdkResult<ListJobExecutionsForJobOutputResponse, ListJobExecutionsForJobOutputError>) -> Void)
    /// <p>Lists the job executions for the specified thing.</p>
    func listJobExecutionsForThing(input: ListJobExecutionsForThingInput, completion: @escaping (SdkResult<ListJobExecutionsForThingOutputResponse, ListJobExecutionsForThingOutputError>) -> Void)
    /// <p>Lists jobs.</p>
    func listJobs(input: ListJobsInput, completion: @escaping (SdkResult<ListJobsOutputResponse, ListJobsOutputError>) -> Void)
    /// <p>Returns a list of job templates.</p>
    func listJobTemplates(input: ListJobTemplatesInput, completion: @escaping (SdkResult<ListJobTemplatesOutputResponse, ListJobTemplatesOutputError>) -> Void)
    /// <p>Gets a list of all mitigation actions that match the specified filter criteria.</p>
    func listMitigationActions(input: ListMitigationActionsInput, completion: @escaping (SdkResult<ListMitigationActionsOutputResponse, ListMitigationActionsOutputError>) -> Void)
    /// <p>Lists OTA updates.</p>
    func listOTAUpdates(input: ListOTAUpdatesInput, completion: @escaping (SdkResult<ListOTAUpdatesOutputResponse, ListOTAUpdatesOutputError>) -> Void)
    /// <p>Lists certificates that are being transferred but not yet accepted.</p>
    func listOutgoingCertificates(input: ListOutgoingCertificatesInput, completion: @escaping (SdkResult<ListOutgoingCertificatesOutputResponse, ListOutgoingCertificatesOutputError>) -> Void)
    /// <p>Lists your policies.</p>
    func listPolicies(input: ListPoliciesInput, completion: @escaping (SdkResult<ListPoliciesOutputResponse, ListPoliciesOutputError>) -> Void)
    /// <p>Lists the principals associated with the specified policy.</p>
    ///          <p>
    ///             <b>Note:</b> This API is deprecated. Please use <a>ListTargetsForPolicy</a> instead.</p>
    @available(*, deprecated)
    func listPolicyPrincipals(input: ListPolicyPrincipalsInput, completion: @escaping (SdkResult<ListPolicyPrincipalsOutputResponse, ListPolicyPrincipalsOutputError>) -> Void)
    /// <p>Lists the versions of the specified policy and identifies the default
    ///          version.</p>
    func listPolicyVersions(input: ListPolicyVersionsInput, completion: @escaping (SdkResult<ListPolicyVersionsOutputResponse, ListPolicyVersionsOutputError>) -> Void)
    /// <p>Lists the policies attached to the specified principal. If you use an Cognito
    ///          identity, the ID must be in <a href="https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax">AmazonCognito Identity format</a>.</p>
    ///          <p>
    ///             <b>Note:</b> This API is deprecated. Please use <a>ListAttachedPolicies</a> instead.</p>
    @available(*, deprecated)
    func listPrincipalPolicies(input: ListPrincipalPoliciesInput, completion: @escaping (SdkResult<ListPrincipalPoliciesOutputResponse, ListPrincipalPoliciesOutputError>) -> Void)
    /// <p>Lists the things associated with the specified principal. A principal can be X.509
    /// 			certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
    /// 			identities. </p>
    func listPrincipalThings(input: ListPrincipalThingsInput, completion: @escaping (SdkResult<ListPrincipalThingsOutputResponse, ListPrincipalThingsOutputError>) -> Void)
    /// <p>Lists the fleet provisioning templates in your AWS account.</p>
    func listProvisioningTemplates(input: ListProvisioningTemplatesInput, completion: @escaping (SdkResult<ListProvisioningTemplatesOutputResponse, ListProvisioningTemplatesOutputError>) -> Void)
    /// <p>A list of fleet provisioning template versions.</p>
    func listProvisioningTemplateVersions(input: ListProvisioningTemplateVersionsInput, completion: @escaping (SdkResult<ListProvisioningTemplateVersionsOutputResponse, ListProvisioningTemplateVersionsOutputError>) -> Void)
    /// <p>Lists the role aliases registered in your account.</p>
    func listRoleAliases(input: ListRoleAliasesInput, completion: @escaping (SdkResult<ListRoleAliasesOutputResponse, ListRoleAliasesOutputError>) -> Void)
    /// <p>Lists all of your scheduled audits.</p>
    func listScheduledAudits(input: ListScheduledAuditsInput, completion: @escaping (SdkResult<ListScheduledAuditsOutputResponse, ListScheduledAuditsOutputError>) -> Void)
    /// <p>Lists the Device Defender security profiles
    ///       you've
    ///       created. You can filter security profiles by dimension or custom metric.</p>
    ///          <note>
    ///             <p>
    ///                <code>dimensionName</code> and <code>metricName</code> cannot be used in the same request.</p>
    ///          </note>
    func listSecurityProfiles(input: ListSecurityProfilesInput, completion: @escaping (SdkResult<ListSecurityProfilesOutputResponse, ListSecurityProfilesOutputError>) -> Void)
    /// <p>Lists the Device Defender security profiles attached to a target (thing group).</p>
    func listSecurityProfilesForTarget(input: ListSecurityProfilesForTargetInput, completion: @escaping (SdkResult<ListSecurityProfilesForTargetOutputResponse, ListSecurityProfilesForTargetOutputError>) -> Void)
    /// <p>Lists all of the streams in your AWS account.</p>
    func listStreams(input: ListStreamsInput, completion: @escaping (SdkResult<ListStreamsOutputResponse, ListStreamsOutputError>) -> Void)
    /// <p>Lists the tags (metadata) you have assigned to the resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>List targets for the specified policy.</p>
    func listTargetsForPolicy(input: ListTargetsForPolicyInput, completion: @escaping (SdkResult<ListTargetsForPolicyOutputResponse, ListTargetsForPolicyOutputError>) -> Void)
    /// <p>Lists the targets (thing groups) associated with a given Device Defender security profile.</p>
    func listTargetsForSecurityProfile(input: ListTargetsForSecurityProfileInput, completion: @escaping (SdkResult<ListTargetsForSecurityProfileOutputResponse, ListTargetsForSecurityProfileOutputError>) -> Void)
    /// <p>List the thing groups in your account.</p>
    func listThingGroups(input: ListThingGroupsInput, completion: @escaping (SdkResult<ListThingGroupsOutputResponse, ListThingGroupsOutputError>) -> Void)
    /// <p>List the thing groups to which the specified thing belongs.</p>
    func listThingGroupsForThing(input: ListThingGroupsForThingInput, completion: @escaping (SdkResult<ListThingGroupsForThingOutputResponse, ListThingGroupsForThingOutputError>) -> Void)
    /// <p>Lists the principals associated with the specified thing. A principal can be X.509
    /// 			certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
    /// 			identities.</p>
    func listThingPrincipals(input: ListThingPrincipalsInput, completion: @escaping (SdkResult<ListThingPrincipalsOutputResponse, ListThingPrincipalsOutputError>) -> Void)
    /// <p>Information about the thing registration tasks.</p>
    func listThingRegistrationTaskReports(input: ListThingRegistrationTaskReportsInput, completion: @escaping (SdkResult<ListThingRegistrationTaskReportsOutputResponse, ListThingRegistrationTaskReportsOutputError>) -> Void)
    /// <p>List bulk thing provisioning tasks.</p>
    func listThingRegistrationTasks(input: ListThingRegistrationTasksInput, completion: @escaping (SdkResult<ListThingRegistrationTasksOutputResponse, ListThingRegistrationTasksOutputError>) -> Void)
    /// <p>Lists your things. Use the <b>attributeName</b> and
    /// 				<b>attributeValue</b> parameters to filter your things.
    /// 			For example, calling <code>ListThings</code> with attributeName=Color and
    /// 			attributeValue=Red retrieves all things in the registry that contain an attribute
    /// 				<b>Color</b> with the value <b>Red</b>. </p>
    /// 		       <note>
    /// 			         <p>You will not be charged for calling this API if an <code>Access denied</code> error is returned. You will also not be charged if no attributes or pagination token was provided in request and no pagination token and no results were returned.</p>
    /// 		       </note>
    func listThings(input: ListThingsInput, completion: @escaping (SdkResult<ListThingsOutputResponse, ListThingsOutputError>) -> Void)
    /// <p>Lists the things you have added to the given billing group.</p>
    func listThingsInBillingGroup(input: ListThingsInBillingGroupInput, completion: @escaping (SdkResult<ListThingsInBillingGroupOutputResponse, ListThingsInBillingGroupOutputError>) -> Void)
    /// <p>Lists the things in the specified group.</p>
    func listThingsInThingGroup(input: ListThingsInThingGroupInput, completion: @escaping (SdkResult<ListThingsInThingGroupOutputResponse, ListThingsInThingGroupOutputError>) -> Void)
    /// <p>Lists the existing thing types.</p>
    func listThingTypes(input: ListThingTypesInput, completion: @escaping (SdkResult<ListThingTypesOutputResponse, ListThingTypesOutputError>) -> Void)
    /// <p>Lists all the topic rule destinations in your AWS account.</p>
    func listTopicRuleDestinations(input: ListTopicRuleDestinationsInput, completion: @escaping (SdkResult<ListTopicRuleDestinationsOutputResponse, ListTopicRuleDestinationsOutputError>) -> Void)
    /// <p>Lists the rules for the specific topic.</p>
    func listTopicRules(input: ListTopicRulesInput, completion: @escaping (SdkResult<ListTopicRulesOutputResponse, ListTopicRulesOutputError>) -> Void)
    /// <p>Lists logging levels.</p>
    func listV2LoggingLevels(input: ListV2LoggingLevelsInput, completion: @escaping (SdkResult<ListV2LoggingLevelsOutputResponse, ListV2LoggingLevelsOutputError>) -> Void)
    /// <p>Lists the Device Defender security profile violations discovered during the given time period.
    ///       You can use filters to limit the results to those alerts issued for a particular security profile,
    ///       behavior, or thing (device).</p>
    func listViolationEvents(input: ListViolationEventsInput, completion: @escaping (SdkResult<ListViolationEventsOutputResponse, ListViolationEventsOutputError>) -> Void)
    /// <p>Registers a CA certificate with AWS IoT. This CA certificate can then be used to sign
    ///          device certificates, which can be then registered with AWS IoT. You can register up to 10
    ///          CA certificates per AWS account that have the same subject field. This enables you to have
    ///          up to 10 certificate authorities sign your device certificates. If you have more than one
    ///          CA certificate registered, make sure you pass the CA certificate when you register your
    ///          device certificates with the RegisterCertificate API.</p>
    func registerCACertificate(input: RegisterCACertificateInput, completion: @escaping (SdkResult<RegisterCACertificateOutputResponse, RegisterCACertificateOutputError>) -> Void)
    /// <p>Registers a device certificate with AWS IoT. If you have more than one CA certificate
    ///          that has the same subject field, you must specify the CA certificate that was used to sign
    ///          the device certificate being registered.</p>
    func registerCertificate(input: RegisterCertificateInput, completion: @escaping (SdkResult<RegisterCertificateOutputResponse, RegisterCertificateOutputError>) -> Void)
    /// <p>Register a certificate that does not have a certificate authority (CA).</p>
    func registerCertificateWithoutCA(input: RegisterCertificateWithoutCAInput, completion: @escaping (SdkResult<RegisterCertificateWithoutCAOutputResponse, RegisterCertificateWithoutCAOutputError>) -> Void)
    /// <p>Provisions a thing in the device registry. RegisterThing calls other AWS IoT control
    ///          plane APIs. These calls might exceed your account level <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_iot">
    ///             AWS IoT Throttling Limits</a> and cause throttle errors. Please contact <a href="https://console.aws.amazon.com/support/home">AWS Customer Support</a> to raise
    ///          your throttling limits if necessary.</p>
    func registerThing(input: RegisterThingInput, completion: @escaping (SdkResult<RegisterThingOutputResponse, RegisterThingOutputError>) -> Void)
    /// <p>Rejects a pending certificate transfer. After AWS IoT rejects a certificate transfer,
    ///          the certificate status changes from <b>PENDING_TRANSFER</b> to
    ///             <b>INACTIVE</b>.</p>
    ///          <p>To check for pending certificate transfers, call <a>ListCertificates</a>
    ///          to enumerate your certificates.</p>
    ///          <p>This operation can only be called by the transfer destination. After it is called,
    ///          the certificate will be returned to the source's account in the INACTIVE state.</p>
    func rejectCertificateTransfer(input: RejectCertificateTransferInput, completion: @escaping (SdkResult<RejectCertificateTransferOutputResponse, RejectCertificateTransferOutputError>) -> Void)
    /// <p>Removes the given thing from the billing group.</p>
    func removeThingFromBillingGroup(input: RemoveThingFromBillingGroupInput, completion: @escaping (SdkResult<RemoveThingFromBillingGroupOutputResponse, RemoveThingFromBillingGroupOutputError>) -> Void)
    /// <p>Remove the specified thing from the specified group.</p>
    /// 		       <p>You must specify either a <code>thingGroupArn</code> or a
    /// 			<code>thingGroupName</code> to identify the thing group and
    /// 			either a <code>thingArn</code> or a <code>thingName</code> to
    /// 			identify the thing to remove from the thing group.
    /// 		</p>
    func removeThingFromThingGroup(input: RemoveThingFromThingGroupInput, completion: @escaping (SdkResult<RemoveThingFromThingGroupOutputResponse, RemoveThingFromThingGroupOutputError>) -> Void)
    /// <p>Replaces the rule. You must specify all parameters for the new rule. Creating rules
    ///          is an administrator-level action. Any user who has permission to create rules will be able
    ///          to access data processed by the rule.</p>
    func replaceTopicRule(input: ReplaceTopicRuleInput, completion: @escaping (SdkResult<ReplaceTopicRuleOutputResponse, ReplaceTopicRuleOutputError>) -> Void)
    /// <p>The query search index.</p>
    func searchIndex(input: SearchIndexInput, completion: @escaping (SdkResult<SearchIndexOutputResponse, SearchIndexOutputError>) -> Void)
    /// <p>Sets the default authorizer. This will be used if a websocket connection is made
    ///          without specifying an authorizer.</p>
    func setDefaultAuthorizer(input: SetDefaultAuthorizerInput, completion: @escaping (SdkResult<SetDefaultAuthorizerOutputResponse, SetDefaultAuthorizerOutputError>) -> Void)
    /// <p>Sets the specified version of the specified policy as the policy's default
    ///          (operative) version. This action affects all certificates to which the policy is attached.
    ///          To list the principals the policy is attached to, use the ListPrincipalPolicy
    ///          API.</p>
    func setDefaultPolicyVersion(input: SetDefaultPolicyVersionInput, completion: @escaping (SdkResult<SetDefaultPolicyVersionOutputResponse, SetDefaultPolicyVersionOutputError>) -> Void)
    /// <p>Sets the logging options.</p>
    ///          <p>NOTE: use of this command is not recommended. Use <code>SetV2LoggingOptions</code>
    ///          instead.</p>
    func setLoggingOptions(input: SetLoggingOptionsInput, completion: @escaping (SdkResult<SetLoggingOptionsOutputResponse, SetLoggingOptionsOutputError>) -> Void)
    /// <p>Sets the logging level.</p>
    func setV2LoggingLevel(input: SetV2LoggingLevelInput, completion: @escaping (SdkResult<SetV2LoggingLevelOutputResponse, SetV2LoggingLevelOutputError>) -> Void)
    /// <p>Sets the logging options for the V2 logging service.</p>
    func setV2LoggingOptions(input: SetV2LoggingOptionsInput, completion: @escaping (SdkResult<SetV2LoggingOptionsOutputResponse, SetV2LoggingOptionsOutputError>) -> Void)
    /// <p>Starts a task that applies a set of mitigation actions to the specified target.</p>
    func startAuditMitigationActionsTask(input: StartAuditMitigationActionsTaskInput, completion: @escaping (SdkResult<StartAuditMitigationActionsTaskOutputResponse, StartAuditMitigationActionsTaskOutputError>) -> Void)
    /// <p>
    ///       Starts a Device Defender ML Detect mitigation actions task.
    ///     </p>
    func startDetectMitigationActionsTask(input: StartDetectMitigationActionsTaskInput, completion: @escaping (SdkResult<StartDetectMitigationActionsTaskOutputResponse, StartDetectMitigationActionsTaskOutputError>) -> Void)
    /// <p>Starts an on-demand Device Defender audit.</p>
    func startOnDemandAuditTask(input: StartOnDemandAuditTaskInput, completion: @escaping (SdkResult<StartOnDemandAuditTaskOutputResponse, StartOnDemandAuditTaskOutputError>) -> Void)
    /// <p>Creates a bulk thing provisioning task.</p>
    func startThingRegistrationTask(input: StartThingRegistrationTaskInput, completion: @escaping (SdkResult<StartThingRegistrationTaskOutputResponse, StartThingRegistrationTaskOutputError>) -> Void)
    /// <p>Cancels a bulk thing provisioning task.</p>
    func stopThingRegistrationTask(input: StopThingRegistrationTaskInput, completion: @escaping (SdkResult<StopThingRegistrationTaskOutputResponse, StopThingRegistrationTaskOutputError>) -> Void)
    /// <p>Adds to or modifies the tags of the given resource. Tags are metadata which can be
    /// 			used to manage a resource.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Tests if a specified principal is authorized to perform an AWS IoT action on a
    ///          specified resource. Use this to test and debug the authorization behavior of devices that
    ///          connect to the AWS IoT device gateway.</p>
    func testAuthorization(input: TestAuthorizationInput, completion: @escaping (SdkResult<TestAuthorizationOutputResponse, TestAuthorizationOutputError>) -> Void)
    /// <p>Tests a custom authorization behavior by invoking a specified custom authorizer. Use
    ///          this to test and debug the custom authorization behavior of devices that connect to the AWS
    ///          IoT device gateway.</p>
    func testInvokeAuthorizer(input: TestInvokeAuthorizerInput, completion: @escaping (SdkResult<TestInvokeAuthorizerOutputResponse, TestInvokeAuthorizerOutputError>) -> Void)
    /// <p>Transfers the specified certificate to the specified AWS account.</p>
    ///          <p>You can cancel the transfer until it is acknowledged by the recipient.</p>
    ///          <p>No notification is sent to the transfer destination's account. It is up to the caller
    ///          to notify the transfer target.</p>
    ///          <p>The certificate being transferred must not be in the ACTIVE state. You can use the
    ///          UpdateCertificate API to deactivate it.</p>
    ///          <p>The certificate must not have any policies attached to it. You can use the
    ///          DetachPrincipalPolicy API to detach them.</p>
    func transferCertificate(input: TransferCertificateInput, completion: @escaping (SdkResult<TransferCertificateOutputResponse, TransferCertificateOutputError>) -> Void)
    /// <p>Removes the given tags (metadata) from the resource.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Configures or reconfigures the Device Defender audit settings for this account.
    ///           Settings include how audit notifications are sent and which audit checks are
    ///           enabled or disabled.</p>
    func updateAccountAuditConfiguration(input: UpdateAccountAuditConfigurationInput, completion: @escaping (SdkResult<UpdateAccountAuditConfigurationOutputResponse, UpdateAccountAuditConfigurationOutputError>) -> Void)
    /// <p>
    ///       Updates a Device Defender audit suppression.
    ///     </p>
    func updateAuditSuppression(input: UpdateAuditSuppressionInput, completion: @escaping (SdkResult<UpdateAuditSuppressionOutputResponse, UpdateAuditSuppressionOutputError>) -> Void)
    /// <p>Updates an authorizer.</p>
    func updateAuthorizer(input: UpdateAuthorizerInput, completion: @escaping (SdkResult<UpdateAuthorizerOutputResponse, UpdateAuthorizerOutputError>) -> Void)
    /// <p>Updates information about the billing group.</p>
    func updateBillingGroup(input: UpdateBillingGroupInput, completion: @escaping (SdkResult<UpdateBillingGroupOutputResponse, UpdateBillingGroupOutputError>) -> Void)
    /// <p>Updates a registered CA certificate.</p>
    func updateCACertificate(input: UpdateCACertificateInput, completion: @escaping (SdkResult<UpdateCACertificateOutputResponse, UpdateCACertificateOutputError>) -> Void)
    /// <p>Updates the status of the specified certificate. This operation is
    ///          idempotent.</p>
    ///          <p>Certificates must be in the ACTIVE state to authenticate devices that use
    ///          a certificate to connect to AWS IoT.</p>
    ///          <p>Within a few minutes of updating a certificate from the ACTIVE state to any other
    ///          state, AWS IoT disconnects all devices that used that certificate to connect. Devices cannot
    ///          use a certificate that is not in the ACTIVE state to reconnect.</p>
    func updateCertificate(input: UpdateCertificateInput, completion: @escaping (SdkResult<UpdateCertificateOutputResponse, UpdateCertificateOutputError>) -> Void)
    /// <p>Updates a
    ///       Device Defender detect custom metric. </p>
    func updateCustomMetric(input: UpdateCustomMetricInput, completion: @escaping (SdkResult<UpdateCustomMetricOutputResponse, UpdateCustomMetricOutputError>) -> Void)
    /// <p>Updates the definition for a dimension. You
    ///       cannot
    ///       change the type of a dimension after
    ///       it is created (you can delete it and
    ///       recreate
    ///       it).</p>
    func updateDimension(input: UpdateDimensionInput, completion: @escaping (SdkResult<UpdateDimensionOutputResponse, UpdateDimensionOutputError>) -> Void)
    /// <p>Updates values stored in the domain configuration. Domain configurations for default endpoints can't be updated.</p>
    func updateDomainConfiguration(input: UpdateDomainConfigurationInput, completion: @escaping (SdkResult<UpdateDomainConfigurationOutputResponse, UpdateDomainConfigurationOutputError>) -> Void)
    /// <p>Updates a dynamic thing group.</p>
    func updateDynamicThingGroup(input: UpdateDynamicThingGroupInput, completion: @escaping (SdkResult<UpdateDynamicThingGroupOutputResponse, UpdateDynamicThingGroupOutputError>) -> Void)
    /// <p>Updates the event configurations.</p>
    func updateEventConfigurations(input: UpdateEventConfigurationsInput, completion: @escaping (SdkResult<UpdateEventConfigurationsOutputResponse, UpdateEventConfigurationsOutputError>) -> Void)
    /// <p>Updates the search configuration.</p>
    func updateIndexingConfiguration(input: UpdateIndexingConfigurationInput, completion: @escaping (SdkResult<UpdateIndexingConfigurationOutputResponse, UpdateIndexingConfigurationOutputError>) -> Void)
    /// <p>Updates supported fields of the specified job.</p>
    func updateJob(input: UpdateJobInput, completion: @escaping (SdkResult<UpdateJobOutputResponse, UpdateJobOutputError>) -> Void)
    /// <p>Updates the definition for the specified mitigation action.</p>
    func updateMitigationAction(input: UpdateMitigationActionInput, completion: @escaping (SdkResult<UpdateMitigationActionOutputResponse, UpdateMitigationActionOutputError>) -> Void)
    /// <p>Updates a fleet provisioning template.</p>
    func updateProvisioningTemplate(input: UpdateProvisioningTemplateInput, completion: @escaping (SdkResult<UpdateProvisioningTemplateOutputResponse, UpdateProvisioningTemplateOutputError>) -> Void)
    /// <p>Updates a role alias.</p>
    func updateRoleAlias(input: UpdateRoleAliasInput, completion: @escaping (SdkResult<UpdateRoleAliasOutputResponse, UpdateRoleAliasOutputError>) -> Void)
    /// <p>Updates a scheduled audit, including which checks are performed and
    ///           how often the audit takes place.</p>
    func updateScheduledAudit(input: UpdateScheduledAuditInput, completion: @escaping (SdkResult<UpdateScheduledAuditOutputResponse, UpdateScheduledAuditOutputError>) -> Void)
    /// <p>Updates a Device Defender security profile.</p>
    func updateSecurityProfile(input: UpdateSecurityProfileInput, completion: @escaping (SdkResult<UpdateSecurityProfileOutputResponse, UpdateSecurityProfileOutputError>) -> Void)
    /// <p>Updates an existing stream. The stream version will be incremented by one.</p>
    func updateStream(input: UpdateStreamInput, completion: @escaping (SdkResult<UpdateStreamOutputResponse, UpdateStreamOutputError>) -> Void)
    /// <p>Updates the data for a thing.</p>
    func updateThing(input: UpdateThingInput, completion: @escaping (SdkResult<UpdateThingOutputResponse, UpdateThingOutputError>) -> Void)
    /// <p>Update a thing group.</p>
    func updateThingGroup(input: UpdateThingGroupInput, completion: @escaping (SdkResult<UpdateThingGroupOutputResponse, UpdateThingGroupOutputError>) -> Void)
    /// <p>Updates the groups to which the thing belongs.</p>
    func updateThingGroupsForThing(input: UpdateThingGroupsForThingInput, completion: @escaping (SdkResult<UpdateThingGroupsForThingOutputResponse, UpdateThingGroupsForThingOutputError>) -> Void)
    /// <p>Updates a topic rule destination. You use this to change the status, endpoint URL, or
    ///          confirmation URL of the destination.</p>
    func updateTopicRuleDestination(input: UpdateTopicRuleDestinationInput, completion: @escaping (SdkResult<UpdateTopicRuleDestinationOutputResponse, UpdateTopicRuleDestinationOutputError>) -> Void)
    /// <p>Validates a Device Defender security profile behaviors specification.</p>
    func validateSecurityProfileBehaviors(input: ValidateSecurityProfileBehaviorsInput, completion: @escaping (SdkResult<ValidateSecurityProfileBehaviorsOutputResponse, ValidateSecurityProfileBehaviorsOutputError>) -> Void)
}
