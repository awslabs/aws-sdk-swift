// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateJobExecutionInput: Equatable {
    /// <p>Optional. A number that identifies a particular job execution on a particular device.</p>
    public let executionNumber: Int?
    /// <p>Optional. The expected current version of the job execution. Each time you update the job execution, its
    ///          version is incremented. If the version of the job execution stored in Jobs does not match, the update is
    ///          rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data
    ///          is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain
    ///          the job execution status data.)</p>
    public let expectedVersion: Int?
    /// <p>Optional. When set to true, the response contains the job document. The default is false.</p>
    public let includeJobDocument: Bool?
    /// <p>Optional. When included and set to true, the response contains the JobExecutionState data. The default is
    ///          false.</p>
    public let includeJobExecutionState: Bool?
    /// <p>The unique identifier assigned to this job when it was created.</p>
    public let jobId: String?
    /// <p>The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified
    ///          on every update.</p>
    public let status: JobExecutionStatus?
    /// <p> Optional. A collection of name/value pairs that describe the status of the job execution. If not
    ///          specified, the statusDetails are unchanged.</p>
    public let statusDetails: [String:String]?
    /// <p>Specifies the amount of time this device has to finish execution of this job. If the job
    ///            execution status is not set to a terminal state before this timer expires, or before the
    ///            timer is reset (by again calling <code>UpdateJobExecution</code>, setting the status to
    ///            <code>IN_PROGRESS</code> and specifying a new timeout value in this field) the job execution
    ///            status will be automatically set to <code>TIMED_OUT</code>.  Note that setting or resetting
    ///            this timeout has no effect on that job execution timeout which may have been specified when
    ///            the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).</p>
    public let stepTimeoutInMinutes: Int?
    /// <p>The name of the thing associated with the device.</p>
    public let thingName: String?

    public init (
        executionNumber: Int? = nil,
        expectedVersion: Int? = nil,
        includeJobDocument: Bool? = nil,
        includeJobExecutionState: Bool? = nil,
        jobId: String? = nil,
        status: JobExecutionStatus? = nil,
        statusDetails: [String:String]? = nil,
        stepTimeoutInMinutes: Int? = nil,
        thingName: String? = nil
    )
    {
        self.executionNumber = executionNumber
        self.expectedVersion = expectedVersion
        self.includeJobDocument = includeJobDocument
        self.includeJobExecutionState = includeJobExecutionState
        self.jobId = jobId
        self.status = status
        self.statusDetails = statusDetails
        self.stepTimeoutInMinutes = stepTimeoutInMinutes
        self.thingName = thingName
    }
}
