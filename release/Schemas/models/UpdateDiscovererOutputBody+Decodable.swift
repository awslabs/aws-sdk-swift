// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateDiscovererOutputBody: Equatable {
    public let description: String?
    public let discovererArn: String?
    public let discovererId: String?
    public let sourceArn: String?
    public let state: DiscovererState?
    public let tags: [String:String]?
}

extension UpdateDiscovererOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case discovererArn = "DiscovererArn"
        case discovererId = "DiscovererId"
        case sourceArn = "SourceArn"
        case state = "State"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let discovererArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .discovererArn)
        discovererArn = discovererArnDecoded
        let discovererIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .discovererId)
        discovererId = discovererIdDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(DiscovererState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
    }
}
