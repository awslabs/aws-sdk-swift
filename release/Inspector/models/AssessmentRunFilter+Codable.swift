// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AssessmentRunFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case completionTimeRange
        case durationRange
        case namePattern
        case rulesPackageArns
        case startTimeRange
        case stateChangeTimeRange
        case states
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTimeRange = completionTimeRange {
            try encodeContainer.encode(completionTimeRange, forKey: .completionTimeRange)
        }
        if let durationRange = durationRange {
            try encodeContainer.encode(durationRange, forKey: .durationRange)
        }
        if let namePattern = namePattern {
            try encodeContainer.encode(namePattern, forKey: .namePattern)
        }
        if let rulesPackageArns = rulesPackageArns {
            var rulesPackageArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rulesPackageArns)
            for filterrulespackagearnlist0 in rulesPackageArns {
                try rulesPackageArnsContainer.encode(filterrulespackagearnlist0)
            }
        }
        if let startTimeRange = startTimeRange {
            try encodeContainer.encode(startTimeRange, forKey: .startTimeRange)
        }
        if let stateChangeTimeRange = stateChangeTimeRange {
            try encodeContainer.encode(stateChangeTimeRange, forKey: .stateChangeTimeRange)
        }
        if let states = states {
            var statesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .states)
            for assessmentrunstatelist0 in states {
                try statesContainer.encode(assessmentrunstatelist0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namePatternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namePattern)
        namePattern = namePatternDecoded
        let statesContainer = try containerValues.decodeIfPresent([AssessmentRunState].self, forKey: .states)
        var statesDecoded0:[AssessmentRunState]? = nil
        if let statesContainer = statesContainer {
            statesDecoded0 = [AssessmentRunState]()
            for string0 in statesContainer {
                statesDecoded0?.append(string0)
            }
        }
        states = statesDecoded0
        let durationRangeDecoded = try containerValues.decodeIfPresent(DurationRange.self, forKey: .durationRange)
        durationRange = durationRangeDecoded
        let rulesPackageArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .rulesPackageArns)
        var rulesPackageArnsDecoded0:[String]? = nil
        if let rulesPackageArnsContainer = rulesPackageArnsContainer {
            rulesPackageArnsDecoded0 = [String]()
            for string0 in rulesPackageArnsContainer {
                rulesPackageArnsDecoded0?.append(string0)
            }
        }
        rulesPackageArns = rulesPackageArnsDecoded0
        let startTimeRangeDecoded = try containerValues.decodeIfPresent(TimestampRange.self, forKey: .startTimeRange)
        startTimeRange = startTimeRangeDecoded
        let completionTimeRangeDecoded = try containerValues.decodeIfPresent(TimestampRange.self, forKey: .completionTimeRange)
        completionTimeRange = completionTimeRangeDecoded
        let stateChangeTimeRangeDecoded = try containerValues.decodeIfPresent(TimestampRange.self, forKey: .stateChangeTimeRange)
        stateChangeTimeRange = stateChangeTimeRangeDecoded
    }
}
