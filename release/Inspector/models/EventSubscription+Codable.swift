// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EventSubscription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case event
        case subscribedAt
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let event = event {
            try encodeContainer.encode(event.rawValue, forKey: .event)
        }
        if let subscribedAt = subscribedAt {
            try encodeContainer.encode(subscribedAt.timeIntervalSince1970, forKey: .subscribedAt)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventDecoded = try containerValues.decodeIfPresent(InspectorEvent.self, forKey: .event)
        event = eventDecoded
        let subscribedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .subscribedAt)
        subscribedAt = subscribedAtDecoded
    }
}
