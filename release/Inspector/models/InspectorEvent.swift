// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum InspectorEvent {
    case assessmentRunCompleted
    case assessmentRunStarted
    case assessmentRunStateChanged
    case findingReported
    case other
    case sdkUnknown(String)
}

extension InspectorEvent : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InspectorEvent] {
        return [
            .assessmentRunCompleted,
            .assessmentRunStarted,
            .assessmentRunStateChanged,
            .findingReported,
            .other,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .assessmentRunCompleted: return "ASSESSMENT_RUN_COMPLETED"
        case .assessmentRunStarted: return "ASSESSMENT_RUN_STARTED"
        case .assessmentRunStateChanged: return "ASSESSMENT_RUN_STATE_CHANGED"
        case .findingReported: return "FINDING_REPORTED"
        case .other: return "OTHER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InspectorEvent(rawValue: rawValue) ?? InspectorEvent.sdkUnknown(rawValue)
    }
}
