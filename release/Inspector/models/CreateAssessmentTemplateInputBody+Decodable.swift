// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAssessmentTemplateInputBody: Equatable {
    public let assessmentTargetArn: String?
    public let assessmentTemplateName: String?
    public let durationInSeconds: Int
    public let rulesPackageArns: [String]?
    public let userAttributesForFindings: [Attribute]?
}

extension CreateAssessmentTemplateInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case assessmentTargetArn
        case assessmentTemplateName
        case durationInSeconds
        case rulesPackageArns
        case userAttributesForFindings
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assessmentTargetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assessmentTargetArn)
        assessmentTargetArn = assessmentTargetArnDecoded
        let assessmentTemplateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assessmentTemplateName)
        assessmentTemplateName = assessmentTemplateNameDecoded
        let durationInSecondsDecoded = try containerValues.decode(Int.self, forKey: .durationInSeconds)
        durationInSeconds = durationInSecondsDecoded
        let rulesPackageArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .rulesPackageArns)
        var rulesPackageArnsDecoded0:[String]? = nil
        if let rulesPackageArnsContainer = rulesPackageArnsContainer {
            rulesPackageArnsDecoded0 = [String]()
            for string0 in rulesPackageArnsContainer {
                rulesPackageArnsDecoded0?.append(string0)
            }
        }
        rulesPackageArns = rulesPackageArnsDecoded0
        let userAttributesForFindingsContainer = try containerValues.decodeIfPresent([Attribute].self, forKey: .userAttributesForFindings)
        var userAttributesForFindingsDecoded0:[Attribute]? = nil
        if let userAttributesForFindingsContainer = userAttributesForFindingsContainer {
            userAttributesForFindingsDecoded0 = [Attribute]()
            for structure0 in userAttributesForFindingsContainer {
                userAttributesForFindingsDecoded0?.append(structure0)
            }
        }
        userAttributesForFindings = userAttributesForFindingsDecoded0
    }
}
