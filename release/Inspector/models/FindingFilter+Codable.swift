// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FindingFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case agentIds
        case attributes
        case autoScalingGroups
        case creationTimeRange
        case ruleNames
        case rulesPackageArns
        case severities
        case userAttributes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentIds = agentIds {
            var agentIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentIds)
            for agentidlist0 in agentIds {
                try agentIdsContainer.encode(agentidlist0)
            }
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for attributelist0 in attributes {
                try attributesContainer.encode(attributelist0)
            }
        }
        if let autoScalingGroups = autoScalingGroups {
            var autoScalingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroups)
            for autoscalinggrouplist0 in autoScalingGroups {
                try autoScalingGroupsContainer.encode(autoscalinggrouplist0)
            }
        }
        if let creationTimeRange = creationTimeRange {
            try encodeContainer.encode(creationTimeRange, forKey: .creationTimeRange)
        }
        if let ruleNames = ruleNames {
            var ruleNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ruleNames)
            for rulenamelist0 in ruleNames {
                try ruleNamesContainer.encode(rulenamelist0)
            }
        }
        if let rulesPackageArns = rulesPackageArns {
            var rulesPackageArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rulesPackageArns)
            for filterrulespackagearnlist0 in rulesPackageArns {
                try rulesPackageArnsContainer.encode(filterrulespackagearnlist0)
            }
        }
        if let severities = severities {
            var severitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .severities)
            for severitylist0 in severities {
                try severitiesContainer.encode(severitylist0.rawValue)
            }
        }
        if let userAttributes = userAttributes {
            var userAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userAttributes)
            for attributelist0 in userAttributes {
                try userAttributesContainer.encode(attributelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .agentIds)
        var agentIdsDecoded0:[String]? = nil
        if let agentIdsContainer = agentIdsContainer {
            agentIdsDecoded0 = [String]()
            for string0 in agentIdsContainer {
                agentIdsDecoded0?.append(string0)
            }
        }
        agentIds = agentIdsDecoded0
        let autoScalingGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .autoScalingGroups)
        var autoScalingGroupsDecoded0:[String]? = nil
        if let autoScalingGroupsContainer = autoScalingGroupsContainer {
            autoScalingGroupsDecoded0 = [String]()
            for string0 in autoScalingGroupsContainer {
                autoScalingGroupsDecoded0?.append(string0)
            }
        }
        autoScalingGroups = autoScalingGroupsDecoded0
        let ruleNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .ruleNames)
        var ruleNamesDecoded0:[String]? = nil
        if let ruleNamesContainer = ruleNamesContainer {
            ruleNamesDecoded0 = [String]()
            for string0 in ruleNamesContainer {
                ruleNamesDecoded0?.append(string0)
            }
        }
        ruleNames = ruleNamesDecoded0
        let severitiesContainer = try containerValues.decodeIfPresent([Severity].self, forKey: .severities)
        var severitiesDecoded0:[Severity]? = nil
        if let severitiesContainer = severitiesContainer {
            severitiesDecoded0 = [Severity]()
            for string0 in severitiesContainer {
                severitiesDecoded0?.append(string0)
            }
        }
        severities = severitiesDecoded0
        let rulesPackageArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .rulesPackageArns)
        var rulesPackageArnsDecoded0:[String]? = nil
        if let rulesPackageArnsContainer = rulesPackageArnsContainer {
            rulesPackageArnsDecoded0 = [String]()
            for string0 in rulesPackageArnsContainer {
                rulesPackageArnsDecoded0?.append(string0)
            }
        }
        rulesPackageArns = rulesPackageArnsDecoded0
        let attributesContainer = try containerValues.decodeIfPresent([Attribute].self, forKey: .attributes)
        var attributesDecoded0:[Attribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Attribute]()
            for structure0 in attributesContainer {
                attributesDecoded0?.append(structure0)
            }
        }
        attributes = attributesDecoded0
        let userAttributesContainer = try containerValues.decodeIfPresent([Attribute].self, forKey: .userAttributes)
        var userAttributesDecoded0:[Attribute]? = nil
        if let userAttributesContainer = userAttributesContainer {
            userAttributesDecoded0 = [Attribute]()
            for structure0 in userAttributesContainer {
                userAttributesDecoded0?.append(structure0)
            }
        }
        userAttributes = userAttributesDecoded0
        let creationTimeRangeDecoded = try containerValues.decodeIfPresent(TimestampRange.self, forKey: .creationTimeRange)
        creationTimeRange = creationTimeRangeDecoded
    }
}
