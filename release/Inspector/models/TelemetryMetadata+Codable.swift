// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TelemetryMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case count
        case dataSize
        case messageType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let count = count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let dataSize = dataSize {
            try encodeContainer.encode(dataSize, forKey: .dataSize)
        }
        if let messageType = messageType {
            try encodeContainer.encode(messageType, forKey: .messageType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let countDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .count)
        count = countDecoded
        let dataSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .dataSize)
        dataSize = dataSizeDecoded
    }
}
