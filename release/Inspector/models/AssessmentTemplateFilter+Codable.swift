// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AssessmentTemplateFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case durationRange
        case namePattern
        case rulesPackageArns
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationRange = durationRange {
            try encodeContainer.encode(durationRange, forKey: .durationRange)
        }
        if let namePattern = namePattern {
            try encodeContainer.encode(namePattern, forKey: .namePattern)
        }
        if let rulesPackageArns = rulesPackageArns {
            var rulesPackageArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rulesPackageArns)
            for filterrulespackagearnlist0 in rulesPackageArns {
                try rulesPackageArnsContainer.encode(filterrulespackagearnlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namePatternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namePattern)
        namePattern = namePatternDecoded
        let durationRangeDecoded = try containerValues.decodeIfPresent(DurationRange.self, forKey: .durationRange)
        durationRange = durationRangeDecoded
        let rulesPackageArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .rulesPackageArns)
        var rulesPackageArnsDecoded0:[String]? = nil
        if let rulesPackageArnsContainer = rulesPackageArnsContainer {
            rulesPackageArnsDecoded0 = [String]()
            for string0 in rulesPackageArnsContainer {
                rulesPackageArnsDecoded0?.append(string0)
            }
        }
        rulesPackageArns = rulesPackageArnsDecoded0
    }
}
