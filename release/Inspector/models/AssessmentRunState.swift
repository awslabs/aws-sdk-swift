// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum AssessmentRunState {
    case canceled
    case collectingData
    case completed
    case completedWithErrors
    case created
    case dataCollected
    case error
    case evaluatingRules
    case failed
    case startDataCollectionInProgress
    case startDataCollectionPending
    case startEvaluatingRulesPending
    case stopDataCollectionPending
    case sdkUnknown(String)
}

extension AssessmentRunState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AssessmentRunState] {
        return [
            .canceled,
            .collectingData,
            .completed,
            .completedWithErrors,
            .created,
            .dataCollected,
            .error,
            .evaluatingRules,
            .failed,
            .startDataCollectionInProgress,
            .startDataCollectionPending,
            .startEvaluatingRulesPending,
            .stopDataCollectionPending,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .canceled: return "CANCELED"
        case .collectingData: return "COLLECTING_DATA"
        case .completed: return "COMPLETED"
        case .completedWithErrors: return "COMPLETED_WITH_ERRORS"
        case .created: return "CREATED"
        case .dataCollected: return "DATA_COLLECTED"
        case .error: return "ERROR"
        case .evaluatingRules: return "EVALUATING_RULES"
        case .failed: return "FAILED"
        case .startDataCollectionInProgress: return "START_DATA_COLLECTION_IN_PROGRESS"
        case .startDataCollectionPending: return "START_DATA_COLLECTION_PENDING"
        case .startEvaluatingRulesPending: return "START_EVALUATING_RULES_PENDING"
        case .stopDataCollectionPending: return "STOP_DATA_COLLECTION_PENDING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AssessmentRunState(rawValue: rawValue) ?? AssessmentRunState.sdkUnknown(rawValue)
    }
}
