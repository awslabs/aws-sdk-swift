// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Finding: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case assetAttributes
        case assetType
        case attributes
        case confidence
        case createdAt
        case description
        case id
        case indicatorOfCompromise
        case numericSeverity
        case recommendation
        case schemaVersion
        case service
        case serviceAttributes
        case severity
        case title
        case updatedAt
        case userAttributes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let assetAttributes = assetAttributes {
            try encodeContainer.encode(assetAttributes, forKey: .assetAttributes)
        }
        if let assetType = assetType {
            try encodeContainer.encode(assetType.rawValue, forKey: .assetType)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for attributelist0 in attributes {
                try attributesContainer.encode(attributelist0)
            }
        }
        if confidence != 0 {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indicatorOfCompromise = indicatorOfCompromise {
            try encodeContainer.encode(indicatorOfCompromise, forKey: .indicatorOfCompromise)
        }
        if numericSeverity != 0.0 {
            try encodeContainer.encode(numericSeverity, forKey: .numericSeverity)
        }
        if let recommendation = recommendation {
            try encodeContainer.encode(recommendation, forKey: .recommendation)
        }
        if schemaVersion != 0 {
            try encodeContainer.encode(schemaVersion, forKey: .schemaVersion)
        }
        if let service = service {
            try encodeContainer.encode(service, forKey: .service)
        }
        if let serviceAttributes = serviceAttributes {
            try encodeContainer.encode(serviceAttributes, forKey: .serviceAttributes)
        }
        if let severity = severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
        if let userAttributes = userAttributes {
            var userAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userAttributes)
            for userattributelist0 in userAttributes {
                try userAttributesContainer.encode(userattributelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let schemaVersionDecoded = try containerValues.decode(Int.self, forKey: .schemaVersion)
        schemaVersion = schemaVersionDecoded
        let serviceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .service)
        service = serviceDecoded
        let serviceAttributesDecoded = try containerValues.decodeIfPresent(InspectorServiceAttributes.self, forKey: .serviceAttributes)
        serviceAttributes = serviceAttributesDecoded
        let assetTypeDecoded = try containerValues.decodeIfPresent(AssetType.self, forKey: .assetType)
        assetType = assetTypeDecoded
        let assetAttributesDecoded = try containerValues.decodeIfPresent(AssetAttributes.self, forKey: .assetAttributes)
        assetAttributes = assetAttributesDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let titleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .title)
        title = titleDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let recommendationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recommendation)
        recommendation = recommendationDecoded
        let severityDecoded = try containerValues.decodeIfPresent(Severity.self, forKey: .severity)
        severity = severityDecoded
        let numericSeverityDecoded = try containerValues.decode(Double.self, forKey: .numericSeverity)
        numericSeverity = numericSeverityDecoded
        let confidenceDecoded = try containerValues.decode(Int.self, forKey: .confidence)
        confidence = confidenceDecoded
        let indicatorOfCompromiseDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .indicatorOfCompromise)
        indicatorOfCompromise = indicatorOfCompromiseDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Attribute].self, forKey: .attributes)
        var attributesDecoded0:[Attribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Attribute]()
            for structure0 in attributesContainer {
                attributesDecoded0?.append(structure0)
            }
        }
        attributes = attributesDecoded0
        let userAttributesContainer = try containerValues.decodeIfPresent([Attribute].self, forKey: .userAttributes)
        var userAttributesDecoded0:[Attribute]? = nil
        if let userAttributesContainer = userAttributesContainer {
            userAttributesDecoded0 = [Attribute]()
            for structure0 in userAttributesContainer {
                userAttributesDecoded0?.append(structure0)
            }
        }
        userAttributes = userAttributesDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}
