// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AssetAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case agentId
        case amiId
        case autoScalingGroup
        case hostname
        case ipv4Addresses
        case networkInterfaces
        case schemaVersion
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentId = agentId {
            try encodeContainer.encode(agentId, forKey: .agentId)
        }
        if let amiId = amiId {
            try encodeContainer.encode(amiId, forKey: .amiId)
        }
        if let autoScalingGroup = autoScalingGroup {
            try encodeContainer.encode(autoScalingGroup, forKey: .autoScalingGroup)
        }
        if let hostname = hostname {
            try encodeContainer.encode(hostname, forKey: .hostname)
        }
        if let ipv4Addresses = ipv4Addresses {
            var ipv4AddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv4Addresses)
            for ipv4addresslist0 in ipv4Addresses {
                try ipv4AddressesContainer.encode(ipv4addresslist0)
            }
        }
        if let networkInterfaces = networkInterfaces {
            var networkInterfacesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaces)
            for networkinterfaces0 in networkInterfaces {
                try networkInterfacesContainer.encode(networkinterfaces0)
            }
        }
        if schemaVersion != 0 {
            try encodeContainer.encode(schemaVersion, forKey: .schemaVersion)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaVersionDecoded = try containerValues.decode(Int.self, forKey: .schemaVersion)
        schemaVersion = schemaVersionDecoded
        let agentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .agentId)
        agentId = agentIdDecoded
        let autoScalingGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroup)
        autoScalingGroup = autoScalingGroupDecoded
        let amiIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .amiId)
        amiId = amiIdDecoded
        let hostnameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostname)
        hostname = hostnameDecoded
        let ipv4AddressesContainer = try containerValues.decodeIfPresent([String].self, forKey: .ipv4Addresses)
        var ipv4AddressesDecoded0:[String]? = nil
        if let ipv4AddressesContainer = ipv4AddressesContainer {
            ipv4AddressesDecoded0 = [String]()
            for string0 in ipv4AddressesContainer {
                ipv4AddressesDecoded0?.append(string0)
            }
        }
        ipv4Addresses = ipv4AddressesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let networkInterfacesContainer = try containerValues.decodeIfPresent([NetworkInterface].self, forKey: .networkInterfaces)
        var networkInterfacesDecoded0:[NetworkInterface]? = nil
        if let networkInterfacesContainer = networkInterfacesContainer {
            networkInterfacesDecoded0 = [NetworkInterface]()
            for structure0 in networkInterfacesContainer {
                networkInterfacesDecoded0?.append(structure0)
            }
        }
        networkInterfaces = networkInterfacesDecoded0
    }
}
