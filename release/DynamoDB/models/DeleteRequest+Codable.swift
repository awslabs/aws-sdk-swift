// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeleteRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyContainer = try containerValues.decodeIfPresent([String:AttributeValue].self, forKey: .key)
        var keyDecoded0: [String:AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                keyDecoded0?[key0] = attributevalue0
            }
        }
        key = keyDecoded0
    }
}
