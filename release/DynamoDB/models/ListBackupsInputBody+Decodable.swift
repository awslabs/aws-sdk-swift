// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListBackupsInputBody: Equatable {
    public let tableName: String?
    public let limit: Int?
    public let timeRangeLowerBound: Date?
    public let timeRangeUpperBound: Date?
    public let exclusiveStartBackupArn: String?
    public let backupType: BackupTypeFilter?
}

extension ListBackupsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case backupType = "BackupType"
        case exclusiveStartBackupArn = "ExclusiveStartBackupArn"
        case limit = "Limit"
        case tableName = "TableName"
        case timeRangeLowerBound = "TimeRangeLowerBound"
        case timeRangeUpperBound = "TimeRangeUpperBound"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let timeRangeLowerBoundDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .timeRangeLowerBound)
        timeRangeLowerBound = timeRangeLowerBoundDecoded
        let timeRangeUpperBoundDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .timeRangeUpperBound)
        timeRangeUpperBound = timeRangeUpperBoundDecoded
        let exclusiveStartBackupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exclusiveStartBackupArn)
        exclusiveStartBackupArn = exclusiveStartBackupArnDecoded
        let backupTypeDecoded = try containerValues.decodeIfPresent(BackupTypeFilter.self, forKey: .backupType)
        backupType = backupTypeDecoded
    }
}
