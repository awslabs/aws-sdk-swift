// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
///          <ul>
///             <li>
///                <p>
///                   <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
///                <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
///             </li>
///             <li>
///                <p>
///                   <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
///             </li>
///             <li>
///                <p>
///                   <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
///             </li>
///          </ul>
public enum ReturnConsumedCapacity {
    case indexes
    case `none`
    case total
    case sdkUnknown(String)
}

extension ReturnConsumedCapacity : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReturnConsumedCapacity] {
        return [
            .indexes,
            .none,
            .total,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .indexes: return "INDEXES"
        case .none: return "NONE"
        case .total: return "TOTAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReturnConsumedCapacity(rawValue: rawValue) ?? ReturnConsumedCapacity.sdkUnknown(rawValue)
    }
}
