// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutItemInputBody: Equatable {
    public let tableName: String?
    public let item: [String:AttributeValue]?
    public let expected: [String:ExpectedAttributeValue]?
    public let returnValues: ReturnValue?
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
    public let conditionalOperator: ConditionalOperator?
    public let conditionExpression: String?
    public let expressionAttributeNames: [String:String]?
    public let expressionAttributeValues: [String:AttributeValue]?
}

extension PutItemInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case item = "Item"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let itemContainer = try containerValues.decodeIfPresent([String:AttributeValue].self, forKey: .item)
        var itemDecoded0: [String:AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                itemDecoded0?[key0] = attributevalue0
            }
        }
        item = itemDecoded0
        let expectedContainer = try containerValues.decodeIfPresent([String:ExpectedAttributeValue].self, forKey: .expected)
        var expectedDecoded0: [String:ExpectedAttributeValue]? = nil
        if let expectedContainer = expectedContainer {
            expectedDecoded0 = [String:ExpectedAttributeValue]()
            for (key0, expectedattributevalue0) in expectedContainer {
                expectedDecoded0?[key0] = expectedattributevalue0
            }
        }
        expected = expectedDecoded0
        let returnValuesDecoded = try containerValues.decodeIfPresent(ReturnValue.self, forKey: .returnValues)
        returnValues = returnValuesDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let returnItemCollectionMetricsDecoded = try containerValues.decodeIfPresent(ReturnItemCollectionMetrics.self, forKey: .returnItemCollectionMetrics)
        returnItemCollectionMetrics = returnItemCollectionMetricsDecoded
        let conditionalOperatorDecoded = try containerValues.decodeIfPresent(ConditionalOperator.self, forKey: .conditionalOperator)
        conditionalOperator = conditionalOperatorDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                expressionAttributeNamesDecoded0?[key0] = attributename0
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([String:AttributeValue].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [String:AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                expressionAttributeValuesDecoded0?[key0] = attributevalue0
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
    }
}
