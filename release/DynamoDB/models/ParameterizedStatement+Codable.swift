// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ParameterizedStatement: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case parameters = "Parameters"
        case statement = "Statement"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for preparedstatementparameters0 in parameters {
                try parametersContainer.encode(preparedstatementparameters0)
            }
        }
        if let statement = statement {
            try encodeContainer.encode(statement, forKey: .statement)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statement)
        statement = statementDecoded
        let parametersContainer = try containerValues.decodeIfPresent([AttributeValue].self, forKey: .parameters)
        var parametersDecoded0:[AttributeValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [AttributeValue]()
            for union0 in parametersContainer {
                parametersDecoded0?.append(union0)
            }
        }
        parameters = parametersDecoded0
    }
}
